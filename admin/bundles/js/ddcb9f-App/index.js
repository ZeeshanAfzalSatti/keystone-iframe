(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
"use strict";

require("core-js/shim");

require("regenerator-runtime/runtime");

require("core-js/fn/regexp/escape");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"core-js/fn/regexp/escape":3,"core-js/shim":326,"regenerator-runtime/runtime":2}],2:[function(require,module,exports){
(function (global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(require,module,exports){
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;

},{"../../modules/_core":24,"../../modules/core.regexp.escape":129}],4:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],5:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

},{"./_cof":19}],6:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_hide":43,"./_wks":127}],7:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
    throw TypeError(name + ': incorrect invocation!');
  }return it;
};

},{}],8:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":52}],9:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';

var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];else delete O[to];
    to += inc;
    from += inc;
  }return O;
};

},{"./_to-absolute-index":112,"./_to-length":116,"./_to-object":117}],10:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';

var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"./_to-absolute-index":112,"./_to-length":116,"./_to-object":117}],11:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":40}],12:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    }return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":112,"./_to-iobject":115,"./_to-length":116}],13:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (; length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res; // map
        else if (res) switch (TYPE) {
            case 3:
              return true; // some
            case 5:
              return val; // find
            case 6:
              return index; // findIndex
            case 2:
              result.push(val); // filter
          } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_array-species-create":16,"./_ctx":26,"./_iobject":48,"./_to-length":116,"./_to-object":117}],14:[function(require,module,exports){
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var toLength = require('./_to-length');

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (; isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

},{"./_a-function":4,"./_iobject":48,"./_to-length":116,"./_to-object":117}],15:[function(require,module,exports){
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  }return C === undefined ? Array : C;
};

},{"./_is-array":50,"./_is-object":52,"./_wks":127}],16:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":15}],17:[function(require,module,exports){
'use strict';

var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  }return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function () /* args... */{
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":4,"./_invoke":47,"./_is-object":52}],18:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () {
  return arguments;
}()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) {/* empty */}
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
  // @@toStringTag case
  : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
  // builtinTag case
  : ARG ? cof(O)
  // ES3 arguments fallback
  : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":19,"./_wks":127}],19:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],20:[function(require,module,exports){
'use strict';

var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type
      that._i = create(null); // index
      that._f = undefined; // first entry
      that._l = undefined; // last entry
      that[SIZE] = 0; // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        }return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
      // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key, // <- key
        v: value, // <- value
        p: prev = that._l, // <- previous entry
        n: undefined, // <- next entry
        r: false // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    }return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind; // kind
      this._l = undefined; // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_an-instance":7,"./_ctx":26,"./_descriptors":30,"./_for-of":40,"./_iter-define":56,"./_iter-step":58,"./_meta":66,"./_object-create":71,"./_object-dp":72,"./_redefine-all":91,"./_set-species":98,"./_validate-collection":124}],21:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof');
var from = require('./_array-from-iterable');
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};

},{"./_array-from-iterable":11,"./_classof":18}],22:[function(require,module,exports){
'use strict';

var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type
      that._i = id++; // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_an-instance":7,"./_an-object":8,"./_array-methods":13,"./_for-of":40,"./_has":42,"./_is-object":52,"./_meta":66,"./_redefine-all":91,"./_validate-collection":124}],23:[function(require,module,exports){
'use strict';

var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY, KEY == 'delete' ? function (a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'has' ? function has(a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'get' ? function get(a) {
      return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'add' ? function add(a) {
      fn.call(this, a === 0 ? 0 : a);return this;
    } : function set(a, b) {
      fn.call(this, a === 0 ? 0 : a, b);return this;
    });
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () {
      instance.has(1);
    });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) {
      new C(iter);
    }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_an-instance":7,"./_export":34,"./_fails":36,"./_for-of":40,"./_global":41,"./_inherit-if-required":46,"./_is-object":52,"./_iter-detect":57,"./_meta":66,"./_redefine":92,"./_redefine-all":91,"./_set-to-string-tag":99}],24:[function(require,module,exports){
var core = module.exports = { version: '2.5.7' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],25:[function(require,module,exports){
'use strict';

var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
};

},{"./_object-dp":72,"./_property-desc":90}],26:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1:
      return function (a) {
        return fn.call(that, a);
      };
    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };
    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }
  return function () /* ...args */{
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":4}],27:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

var fails = require('./_fails');
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
}) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

},{"./_fails":36}],28:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"./_an-object":8,"./_to-primitive":118}],29:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],30:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () {
      return 7;
    } }).a != 7;
});

},{"./_fails":36}],31:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":41,"./_is-object":52}],32:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

},{}],33:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  }return result;
};

},{"./_object-gops":78,"./_object-keys":81,"./_object-pie":82}],34:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1; // forced
$export.G = 2; // global
$export.S = 4; // static
$export.P = 8; // proto
$export.B = 16; // bind
$export.W = 32; // wrap
$export.U = 64; // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":24,"./_ctx":26,"./_global":41,"./_hide":43,"./_redefine":92}],35:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) {/* empty */}
  }return true;
};

},{"./_wks":127}],36:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],37:[function(require,module,exports){
'use strict';

var hide = require('./_hide');
var redefine = require('./_redefine');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (fails(function () {
    var O = {};
    O[SYMBOL] = function () {
      return 7;
    };
    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
    // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
    // 21.2.5.11 RegExp.prototype[@@split](string, limit)
    ? function (string, arg) {
      return rxfn.call(string, this, arg);
    }
    // 21.2.5.6 RegExp.prototype[@@match](string)
    // 21.2.5.9 RegExp.prototype[@@search](string)
    : function (string) {
      return rxfn.call(string, this);
    });
  }
};

},{"./_defined":29,"./_fails":36,"./_hide":43,"./_redefine":92,"./_wks":127}],38:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags

var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":8}],39:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

var isArray = require('./_is-array');
var isObject = require('./_is-object');
var toLength = require('./_to-length');
var ctx = require('./_ctx');
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

},{"./_ctx":26,"./_is-array":50,"./_is-object":52,"./_to-length":116,"./_wks":127}],40:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () {
    return iterable;
  } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":8,"./_ctx":26,"./_is-array-iter":49,"./_iter-call":54,"./_to-length":116,"./core.get-iterator-method":128}],41:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
// eslint-disable-next-line no-new-func
: Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],42:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],43:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":30,"./_object-dp":72,"./_property-desc":90}],44:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":41}],45:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () {
      return 7;
    } }).a != 7;
});

},{"./_descriptors":30,"./_dom-create":31,"./_fails":36}],46:[function(require,module,exports){
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  }return that;
};

},{"./_is-object":52,"./_set-proto":97}],47:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
                  var un = that === undefined;
                  switch (args.length) {
                                    case 0:
                                                      return un ? fn() : fn.call(that);
                                    case 1:
                                                      return un ? fn(args[0]) : fn.call(that, args[0]);
                                    case 2:
                                                      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
                                    case 3:
                                                      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
                                    case 4:
                                                      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
                  }return fn.apply(that, args);
};

},{}],48:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":19}],49:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":59,"./_wks":127}],50:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":19}],51:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":52}],52:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],53:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_cof":19,"./_is-object":52,"./_wks":127}],54:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":8}],55:[function(require,module,exports){
'use strict';

var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () {
  return this;
});

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":43,"./_object-create":71,"./_property-desc":90,"./_set-to-string-tag":99,"./_wks":127}],56:[function(require,module,exports){
'use strict';

var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () {
  return this;
};

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS:
        return function keys() {
          return new Constructor(this, kind);
        };
      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }return function entries() {
      return new Constructor(this, kind);
    };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() {
      return $native.call(this);
    };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":34,"./_hide":43,"./_iter-create":55,"./_iterators":59,"./_library":60,"./_object-gpo":79,"./_redefine":92,"./_set-to-string-tag":99,"./_wks":127}],57:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () {
    SAFE_CLOSING = true;
  };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () {
    throw 2;
  });
} catch (e) {/* empty */}

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () {
      return { done: safe = true };
    };
    arr[ITERATOR] = function () {
      return iter;
    };
    exec(arr);
  } catch (e) {/* empty */}
  return safe;
};

},{"./_wks":127}],58:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],59:[function(require,module,exports){
module.exports = {};

},{}],60:[function(require,module,exports){
module.exports = false;

},{}],61:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = !$expm1
// Old FF bug
|| $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
// Tor Browser bug
|| $expm1(-2e-17) != -2e-17 ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],62:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var sign = require('./_math-sign');
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"./_math-sign":65}],63:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],64:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (arguments.length === 0
  // eslint-disable-next-line no-self-compare
  || x != x
  // eslint-disable-next-line no-self-compare
  || inLow != inLow
  // eslint-disable-next-line no-self-compare
  || inHigh != inHigh
  // eslint-disable-next-line no-self-compare
  || outLow != outLow
  // eslint-disable-next-line no-self-compare
  || outHigh != outHigh) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};

},{}],65:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],66:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
      i: 'O' + ++id, // object ID
      w: {} // weak collections IDs
    } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
    // return object ID
  }return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
    // return hash weak collections IDs
  }return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":36,"./_has":42,"./_is-object":52,"./_object-dp":72,"./_uid":122}],67:[function(require,module,exports){
var Map = require('./es6.map');
var $export = require('./_export');
var shared = require('./_shared')('metadata');
var store = shared.store || (shared.store = new (require('./es6.weak-map'))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  }return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) {
    keys.push(key);
  });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};

},{"./_export":34,"./_shared":101,"./es6.map":159,"./es6.weak-map":265}],68:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();else last = undefined;
        throw e;
      }
    }last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
    // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
    // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    }last = task;
  };
};

},{"./_cof":19,"./_global":41,"./_task":111}],69:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)

var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":4}],70:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)

var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) {
    B[k] = k;
  });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) {
  // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  }return T;
} : $assign;

},{"./_fails":36,"./_iobject":48,"./_object-gops":78,"./_object-keys":81,"./_object-pie":82,"./_to-object":117}],71:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () {/* empty */};
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":8,"./_dom-create":31,"./_enum-bug-keys":32,"./_html":44,"./_object-dps":73,"./_shared-key":100}],72:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) {/* empty */}
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":8,"./_descriptors":30,"./_ie8-dom-define":45,"./_to-primitive":118}],73:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":8,"./_descriptors":30,"./_object-dp":72,"./_object-keys":81}],74:[function(require,module,exports){
'use strict';
// Forced replacement prototype accessors methods

module.exports = require('./_library') || !require('./_fails')(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () {/* empty */});
  delete require('./_global')[K];
});

},{"./_fails":36,"./_global":41,"./_library":60}],75:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) {/* empty */}
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":30,"./_has":42,"./_ie8-dom-define":45,"./_object-pie":82,"./_property-desc":90,"./_to-iobject":115,"./_to-primitive":118}],76:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":77,"./_to-iobject":115}],77:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":32,"./_object-keys-internal":80}],78:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],79:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  }return O instanceof Object ? ObjectProto : null;
};

},{"./_has":42,"./_shared-key":100,"./_to-object":117}],80:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":12,"./_has":42,"./_shared-key":100,"./_to-iobject":115}],81:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":32,"./_object-keys-internal":80}],82:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],83:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () {
    fn(1);
  }), 'Object', exp);
};

},{"./_core":24,"./_export":34,"./_fails":36}],84:[function(require,module,exports){
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    }return result;
  };
};

},{"./_object-keys":81,"./_object-pie":82,"./_to-iobject":115}],85:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN = require('./_object-gopn');
var gOPS = require('./_object-gops');
var anObject = require('./_an-object');
var Reflect = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"./_an-object":8,"./_global":41,"./_object-gopn":77,"./_object-gops":78}],86:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat;
var $trim = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"./_global":41,"./_string-trim":109,"./_string-ws":110}],87:[function(require,module,exports){
var $parseInt = require('./_global').parseInt;
var $trim = require('./_string-trim').trim;
var ws = require('./_string-ws');
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"./_global":41,"./_string-trim":109,"./_string-ws":110}],88:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],89:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":8,"./_is-object":52,"./_new-promise-capability":69}],90:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],91:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":92}],92:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_core":24,"./_global":41,"./_has":42,"./_hide":43,"./_uid":122}],93:[function(require,module,exports){
module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};

},{}],94:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],95:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/

var $export = require('./_export');
var aFunction = require('./_a-function');
var ctx = require('./_ctx');
var forOf = require('./_for-of');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
      var mapFn = arguments[1];
      var mapping, A, n, cb;
      aFunction(this);
      mapping = mapFn !== undefined;
      if (mapping) aFunction(mapFn);
      if (source == undefined) return new this();
      A = [];
      if (mapping) {
        n = 0;
        cb = ctx(mapFn, arguments[2], 2);
        forOf(source, false, function (nextItem) {
          A.push(cb(nextItem, n++));
        });
      } else {
        forOf(source, false, A.push, A);
      }
      return new this(A);
    } });
};

},{"./_a-function":4,"./_ctx":26,"./_export":34,"./_for-of":40}],96:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/

var $export = require('./_export');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
      var length = arguments.length;
      var A = new Array(length);
      while (length--) A[length] = arguments[length];
      return new this(A);
    } });
};

},{"./_export":34}],97:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
  function (test, buggy, set) {
    try {
      set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
      set(test, []);
      buggy = !(test instanceof Array);
    } catch (e) {
      buggy = true;
    }
    return function setPrototypeOf(O, proto) {
      check(O, proto);
      if (buggy) O.__proto__ = proto;else set(O, proto);
      return O;
    };
  }({}, false) : undefined),
  check: check
};

},{"./_an-object":8,"./_ctx":26,"./_is-object":52,"./_object-gopd":75}],98:[function(require,module,exports){
'use strict';

var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () {
      return this;
    }
  });
};

},{"./_descriptors":30,"./_global":41,"./_object-dp":72,"./_wks":127}],99:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":42,"./_object-dp":72,"./_wks":127}],100:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":101,"./_uid":122}],101:[function(require,module,exports){
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":24,"./_global":41,"./_library":60}],102:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":4,"./_an-object":8,"./_wks":127}],103:[function(require,module,exports){
'use strict';

var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () {/* empty */}, 1) : method.call(null);
  });
};

},{"./_fails":36}],104:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":29,"./_to-integer":114}],105:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_defined":29,"./_is-regexp":53}],106:[function(require,module,exports){
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"./_defined":29,"./_export":34,"./_fails":36}],107:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length');
var repeat = require('./_string-repeat');
var defined = require('./_defined');

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":29,"./_string-repeat":108,"./_to-length":116}],108:[function(require,module,exports){
'use strict';

var toInteger = require('./_to-integer');
var defined = require('./_defined');

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"./_defined":29,"./_to-integer":114}],109:[function(require,module,exports){
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"./_defined":29,"./_export":34,"./_fails":36,"./_string-ws":110}],110:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],111:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
    // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
    // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
    // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
    // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":19,"./_ctx":26,"./_dom-create":31,"./_global":41,"./_html":44,"./_invoke":47}],112:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":114}],113:[function(require,module,exports){
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"./_to-integer":114,"./_to-length":116}],114:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],115:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":29,"./_iobject":48}],116:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":114}],117:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":29}],118:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":52}],119:[function(require,module,exports){
'use strict';

if (require('./_descriptors')) {
  var LIBRARY = require('./_library');
  var global = require('./_global');
  var fails = require('./_fails');
  var $export = require('./_export');
  var $typed = require('./_typed');
  var $buffer = require('./_typed-buffer');
  var ctx = require('./_ctx');
  var anInstance = require('./_an-instance');
  var propertyDesc = require('./_property-desc');
  var hide = require('./_hide');
  var redefineAll = require('./_redefine-all');
  var toInteger = require('./_to-integer');
  var toLength = require('./_to-length');
  var toIndex = require('./_to-index');
  var toAbsoluteIndex = require('./_to-absolute-index');
  var toPrimitive = require('./_to-primitive');
  var has = require('./_has');
  var classof = require('./_classof');
  var isObject = require('./_is-object');
  var toObject = require('./_to-object');
  var isArrayIter = require('./_is-array-iter');
  var create = require('./_object-create');
  var getPrototypeOf = require('./_object-gpo');
  var gOPN = require('./_object-gopn').f;
  var getIterFn = require('./core.get-iterator-method');
  var uid = require('./_uid');
  var wks = require('./_wks');
  var createArrayMethod = require('./_array-methods');
  var createArrayIncludes = require('./_array-includes');
  var speciesConstructor = require('./_species-constructor');
  var ArrayIterators = require('./es6.array.iterator');
  var Iterators = require('./_iterators');
  var $iterDetect = require('./_iter-detect');
  var setSpecies = require('./_set-species');
  var arrayFill = require('./_array-fill');
  var arrayCopyWithin = require('./_array-copy-within');
  var $DP = require('./_object-dp');
  var $GOPD = require('./_object-gopd');
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    }return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () {
        return this._d[internal];
      } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      }O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of() /* ...items */{
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
    arrayToLocaleString.call(new Uint8Array(1));
  });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) {
      // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) {
      // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) {
      // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) {
      // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) {
      // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      }return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target) && target[TYPED_ARRAY] && typeof key != 'symbol' && key in target && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set')
    // TODO: add validation descriptor w/o calling accessors
    && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
      target[key] = desc.value;
      return target;
    }return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () {
    arrayToString.call({});
  })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () {/* noop */},
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () {
      return this[TYPED_ARRAY];
    }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () {
          return NAME;
        }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () {
      Base.of.call(TypedArray, 1);
    }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () {/* empty */};

},{"./_an-instance":7,"./_array-copy-within":9,"./_array-fill":10,"./_array-includes":12,"./_array-methods":13,"./_classof":18,"./_ctx":26,"./_descriptors":30,"./_export":34,"./_fails":36,"./_global":41,"./_has":42,"./_hide":43,"./_is-array-iter":49,"./_is-object":52,"./_iter-detect":57,"./_iterators":59,"./_library":60,"./_object-create":71,"./_object-dp":72,"./_object-gopd":75,"./_object-gopn":77,"./_object-gpo":79,"./_property-desc":90,"./_redefine-all":91,"./_set-species":98,"./_species-constructor":102,"./_to-absolute-index":112,"./_to-index":113,"./_to-integer":114,"./_to-length":116,"./_to-object":117,"./_to-primitive":118,"./_typed":121,"./_typed-buffer":120,"./_uid":122,"./_wks":127,"./core.get-iterator-method":128,"./es6.array.iterator":140}],120:[function(require,module,exports){
'use strict';

var global = require('./_global');
var DESCRIPTORS = require('./_descriptors');
var LIBRARY = require('./_library');
var $typed = require('./_typed');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var fails = require('./_fails');
var anInstance = require('./_an-instance');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var toIndex = require('./_to-index');
var gOPN = require('./_object-gopn').f;
var dP = require('./_object-dp').f;
var arrayFill = require('./_array-fill');
var setToStringTag = require('./_set-to-string-tag');
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  }return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () {
      return this[internal];
    } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"./_an-instance":7,"./_array-fill":10,"./_descriptors":30,"./_fails":36,"./_global":41,"./_hide":43,"./_library":60,"./_object-dp":72,"./_object-gopn":77,"./_redefine-all":91,"./_set-to-string-tag":99,"./_to-index":113,"./_to-integer":114,"./_to-length":116,"./_typed":121}],121:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var uid = require('./_uid');
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"./_global":41,"./_hide":43,"./_uid":122}],122:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],123:[function(require,module,exports){
var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":41}],124:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":52}],125:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":24,"./_global":41,"./_library":60,"./_object-dp":72,"./_wks-ext":126}],126:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":127}],127:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":41,"./_shared":101,"./_uid":122}],128:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
};

},{"./_classof":18,"./_core":24,"./_iterators":59,"./_wks":127}],129:[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export');
var $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) {
    return $re(it);
  } });

},{"./_export":34,"./_replacer":93}],130:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });

require('./_add-to-unscopables')('copyWithin');

},{"./_add-to-unscopables":6,"./_array-copy-within":9,"./_export":34}],131:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $every = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":13,"./_export":34,"./_strict-method":103}],132:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { fill: require('./_array-fill') });

require('./_add-to-unscopables')('fill');

},{"./_add-to-unscopables":6,"./_array-fill":10,"./_export":34}],133:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":13,"./_export":34,"./_strict-method":103}],134:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":6,"./_array-methods":13,"./_export":34}],135:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":6,"./_array-methods":13,"./_export":34}],136:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $forEach = require('./_array-methods')(0);
var STRICT = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":13,"./_export":34,"./_strict-method":103}],137:[function(require,module,exports){
'use strict';

var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) {
  Array.from(iter);
}), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":25,"./_ctx":26,"./_export":34,"./_is-array-iter":49,"./_iter-call":54,"./_iter-detect":57,"./_to-length":116,"./_to-object":117,"./core.get-iterator-method":128}],138:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $indexOf = require('./_array-includes')(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
    // convert -0 to +0
    ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"./_array-includes":12,"./_export":34,"./_strict-method":103}],139:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', { isArray: require('./_is-array') });

},{"./_export":34,"./_is-array":50}],140:[function(require,module,exports){
'use strict';

var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0; // next index
  this._k = kind; // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":6,"./_iter-define":56,"./_iter-step":58,"./_iterators":59,"./_to-iobject":115}],141:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)

var $export = require('./_export');
var toIObject = require('./_to-iobject');
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

},{"./_export":34,"./_iobject":48,"./_strict-method":103,"./_to-iobject":115}],142:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (; index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

},{"./_export":34,"./_strict-method":103,"./_to-integer":114,"./_to-iobject":115,"./_to-length":116}],143:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $map = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":13,"./_export":34,"./_strict-method":103}],144:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() {/* empty */}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of() /* ...args */{
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_create-property":25,"./_export":34,"./_fails":36}],145:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

},{"./_array-reduce":14,"./_export":34,"./_strict-method":103}],146:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

},{"./_array-reduce":14,"./_export":34,"./_strict-method":103}],147:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var html = require('./_html');
var cof = require('./_cof');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
    return cloned;
  }
});

},{"./_cof":19,"./_export":34,"./_fails":36,"./_html":44,"./_to-absolute-index":112,"./_to-length":116}],148:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $some = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":13,"./_export":34,"./_strict-method":103}],149:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"./_a-function":4,"./_export":34,"./_fails":36,"./_strict-method":103,"./_to-object":117}],150:[function(require,module,exports){
require('./_set-species')('Array');

},{"./_set-species":98}],151:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', { now: function () {
    return new Date().getTime();
  } });

},{"./_export":34}],152:[function(require,module,exports){
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export');
var toISOString = require('./_date-to-iso-string');

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

},{"./_date-to-iso-string":27,"./_export":34}],153:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function () {
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({ toISOString: function () {
      return 1;
    } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"./_export":34,"./_fails":36,"./_to-object":117,"./_to-primitive":118}],154:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

},{"./_date-to-primitive":28,"./_hide":43,"./_wks":127}],155:[function(require,module,exports){
var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  require('./_redefine')(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

},{"./_redefine":92}],156:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', { bind: require('./_bind') });

},{"./_bind":17,"./_export":34}],157:[function(require,module,exports){
'use strict';

var isObject = require('./_is-object');
var getPrototypeOf = require('./_object-gpo');
var HAS_INSTANCE = require('./_wks')('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
    if (typeof this != 'function' || !isObject(O)) return false;
    if (!isObject(this.prototype)) return O instanceof this;
    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
    while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
    return false;
  } });

},{"./_is-object":52,"./_object-dp":72,"./_object-gpo":79,"./_wks":127}],158:[function(require,module,exports){
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"./_descriptors":30,"./_object-dp":72}],159:[function(require,module,exports){
'use strict';

var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection":23,"./_collection-strong":20,"./_validate-collection":124}],160:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
// V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
&& Math.floor($acosh(Number.MAX_VALUE)) == 710
// Tor Browser bug: Math.acosh(Infinity) -> NaN
&& $acosh(Infinity) == Infinity), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":34,"./_math-log1p":63}],161:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"./_export":34}],162:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"./_export":34}],163:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export');
var sign = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"./_export":34,"./_math-sign":65}],164:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"./_export":34}],165:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"./_export":34}],166:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":34,"./_math-expm1":61}],167:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export = require('./_export');

$export($export.S, 'Math', { fround: require('./_math-fround') });

},{"./_export":34,"./_math-fround":62}],168:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export');
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) {
    // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"./_export":34}],169:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"./_export":34,"./_fails":36}],170:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"./_export":34}],171:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":34,"./_math-log1p":63}],172:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"./_export":34}],173:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', { sign: require('./_math-sign') });

},{"./_export":34,"./_math-sign":65}],174:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":34,"./_fails":36,"./_math-expm1":61}],175:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"./_export":34,"./_math-expm1":61}],176:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"./_export":34}],177:[function(require,module,exports){
'use strict';

var global = require('./_global');
var has = require('./_has');
var cof = require('./_cof');
var inheritIfRequired = require('./_inherit-if-required');
var toPrimitive = require('./_to-primitive');
var fails = require('./_fails');
var gOPN = require('./_object-gopn').f;
var gOPD = require('./_object-gopd').f;
var dP = require('./_object-dp').f;
var $trim = require('./_string-trim').trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66:case 98:
          radix = 2;maxCode = 49;break; // fast equal /^0b[01]+$/i
        case 79:case 111:
          radix = 8;maxCode = 55;break; // fast equal /^0o[0-7]+$/i
        default:
          return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      }return parseInt(digits, radix);
    }
  }return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
    // check on 1..constructor(foo) case
    && (BROKEN_COF ? fails(function () {
      proto.valueOf.call(that);
    }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = require('./_descriptors') ? gOPN(Base) : (
  // ES3:
  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
  // ES6 (in case, if modules with ES6 Number statics required before):
  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}

},{"./_cof":19,"./_descriptors":30,"./_fails":36,"./_global":41,"./_has":42,"./_inherit-if-required":46,"./_object-create":71,"./_object-dp":72,"./_object-gopd":75,"./_object-gopn":77,"./_redefine":92,"./_string-trim":109,"./_to-primitive":118}],178:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"./_export":34}],179:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export = require('./_export');
var _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"./_export":34,"./_global":41}],180:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":34,"./_is-integer":51}],181:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"./_export":34}],182:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"./_export":34,"./_is-integer":51}],183:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"./_export":34}],184:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"./_export":34}],185:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"./_export":34,"./_parse-float":86}],186:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"./_export":34,"./_parse-int":87}],187:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toInteger = require('./_to-integer');
var aNumberValue = require('./_a-number-value');
var repeat = require('./_string-repeat');
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = c % n * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  }return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  }return n;
};

$export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !require('./_fails')(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    }return m;
  }
});

},{"./_a-number-value":5,"./_export":34,"./_fails":36,"./_string-repeat":108,"./_to-integer":114}],188:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $fails = require('./_fails');
var aNumberValue = require('./_a-number-value');
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

},{"./_a-number-value":5,"./_export":34,"./_fails":36}],189:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":34,"./_object-assign":70}],190:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":34,"./_object-create":71}],191:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });

},{"./_descriptors":30,"./_export":34,"./_object-dps":73}],192:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_descriptors":30,"./_export":34,"./_object-dp":72}],193:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"./_is-object":52,"./_meta":66,"./_object-sap":83}],194:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_object-gopd":75,"./_object-sap":83,"./_to-iobject":115}],195:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-gopn-ext":76,"./_object-sap":83}],196:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_object-gpo":79,"./_object-sap":83,"./_to-object":117}],197:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"./_is-object":52,"./_object-sap":83}],198:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"./_is-object":52,"./_object-sap":83}],199:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"./_is-object":52,"./_object-sap":83}],200:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', { is: require('./_same-value') });

},{"./_export":34,"./_same-value":94}],201:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_object-keys":81,"./_object-sap":83,"./_to-object":117}],202:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"./_is-object":52,"./_meta":66,"./_object-sap":83}],203:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"./_is-object":52,"./_meta":66,"./_object-sap":83}],204:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":34,"./_set-proto":97}],205:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()

var classof = require('./_classof');
var test = {};
test[require('./_wks')('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  require('./_redefine')(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"./_classof":18,"./_redefine":92,"./_wks":127}],206:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });

},{"./_export":34,"./_parse-float":86}],207:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });

},{"./_export":34,"./_parse-int":87}],208:[function(require,module,exports){
'use strict';

var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () {/* empty */};
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise
    // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // we can't detect it synchronously, so just check versions
    && v8.indexOf('6.6') !== 0 && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) {/* empty */}
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    }promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = []; // <- awaiting reactions
    this._a = undefined; // <- checked in isUnhandled reactions
    this._s = 0; // <- state
    this._d = false; // <- done
    this._v = undefined; // <- value
    this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false; // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":4,"./_an-instance":7,"./_classof":18,"./_core":24,"./_ctx":26,"./_export":34,"./_for-of":40,"./_global":41,"./_is-object":52,"./_iter-detect":57,"./_library":60,"./_microtask":68,"./_new-promise-capability":69,"./_perform":88,"./_promise-resolve":89,"./_redefine-all":91,"./_set-species":98,"./_set-to-string-tag":99,"./_species-constructor":102,"./_task":111,"./_user-agent":123,"./_wks":127}],209:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function () {
  rApply(function () {/* empty */});
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"./_a-function":4,"./_an-object":8,"./_export":34,"./_fails":36,"./_global":41}],210:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() {/* empty */}
  return !(rConstruct(function () {/* empty */}, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () {/* empty */});
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0:
          return new Target();
        case 1:
          return new Target(args[0]);
        case 2:
          return new Target(args[0], args[1]);
        case 3:
          return new Target(args[0], args[1], args[2]);
        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"./_a-function":4,"./_an-object":8,"./_bind":17,"./_export":34,"./_fails":36,"./_global":41,"./_is-object":52,"./_object-create":71}],211:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":8,"./_export":34,"./_fails":36,"./_object-dp":72,"./_to-primitive":118}],212:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = require('./_export');
var gOPD = require('./_object-gopd').f;
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"./_an-object":8,"./_export":34,"./_object-gopd":75}],213:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)

var $export = require('./_export');
var anObject = require('./_an-object');
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0; // next index
  var keys = this._k = []; // keys
  var key;
  for (key in iterated) keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

},{"./_an-object":8,"./_export":34,"./_iter-create":55}],214:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = require('./_object-gopd');
var $export = require('./_export');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"./_an-object":8,"./_export":34,"./_object-gopd":75}],215:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = require('./_export');
var getProto = require('./_object-gpo');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"./_an-object":8,"./_export":34,"./_object-gpo":79}],216:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var isObject = require('./_is-object');
var anObject = require('./_an-object');

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"./_an-object":8,"./_export":34,"./_has":42,"./_is-object":52,"./_object-gopd":75,"./_object-gpo":79}],217:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"./_export":34}],218:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"./_an-object":8,"./_export":34}],219:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });

},{"./_export":34,"./_own-keys":85}],220:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":8,"./_export":34}],221:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = require('./_export');
var setProto = require('./_set-proto');

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":34,"./_set-proto":97}],222:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = require('./_object-dp');
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var createDesc = require('./_property-desc');
var anObject = require('./_an-object');
var isObject = require('./_is-object');

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"./_an-object":8,"./_export":34,"./_has":42,"./_is-object":52,"./_object-dp":72,"./_object-gopd":75,"./_object-gpo":79,"./_property-desc":90}],223:[function(require,module,exports){
var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () {
        return Base[key];
      },
      set: function (it) {
        Base[key] = it;
      }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');

},{"./_descriptors":30,"./_fails":36,"./_flags":38,"./_global":41,"./_inherit-if-required":46,"./_is-regexp":53,"./_object-dp":72,"./_object-gopn":77,"./_redefine":92,"./_set-species":98,"./_wks":127}],224:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});

},{"./_descriptors":30,"./_flags":38,"./_object-dp":72}],225:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';

    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});

},{"./_fix-re-wks":37}],226:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';

    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});

},{"./_fix-re-wks":37}],227:[function(require,module,exports){
// @@search logic
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    'use strict';

    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});

},{"./_fix-re-wks":37}],228:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {
  'use strict';

  var isRegExp = require('./_is-regexp');
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
    // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});

},{"./_fix-re-wks":37,"./_is-regexp":53}],229:[function(require,module,exports){
'use strict';

require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function () {
  return $toString.call({ source: 'a', flags: 'b' }) != '/a/b';
})) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
  // FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"./_an-object":8,"./_descriptors":30,"./_fails":36,"./_flags":38,"./_redefine":92,"./es6.regexp.flags":224}],230:[function(require,module,exports){
'use strict';

var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection":23,"./_collection-strong":20,"./_validate-collection":124}],231:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)

require('./_string-html')('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"./_string-html":106}],232:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()

require('./_string-html')('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"./_string-html":106}],233:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()

require('./_string-html')('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"./_string-html":106}],234:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()

require('./_string-html')('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"./_string-html":106}],235:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"./_export":34,"./_string-at":104}],236:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';

var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
  }
});

},{"./_export":34,"./_fails-is-regexp":35,"./_string-context":105,"./_to-length":116}],237:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()

require('./_string-html')('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"./_string-html":106}],238:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)

require('./_string-html')('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"./_string-html":106}],239:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)

require('./_string-html')('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"./_string-html":106}],240:[function(require,module,exports){
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) {
    // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
    }return res.join('');
  }
});

},{"./_export":34,"./_to-absolute-index":112}],241:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';

var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":34,"./_fails-is-regexp":35,"./_string-context":105}],242:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()

require('./_string-html')('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"./_string-html":106}],243:[function(require,module,exports){
'use strict';

var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0; // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":56,"./_string-at":104}],244:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)

require('./_string-html')('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"./_string-html":106}],245:[function(require,module,exports){
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    }return res.join('');
  }
});

},{"./_export":34,"./_to-iobject":115,"./_to-length":116}],246:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});

},{"./_export":34,"./_string-repeat":108}],247:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()

require('./_string-html')('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"./_string-html":106}],248:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';

var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
  }
});

},{"./_export":34,"./_fails-is-regexp":35,"./_string-context":105,"./_to-length":116}],249:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()

require('./_string-html')('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"./_string-html":106}],250:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()

require('./_string-html')('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"./_string-html":106}],251:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()

require('./_string-html')('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"./_string-html":106}],252:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()

require('./_string-trim')('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

},{"./_string-trim":109}],253:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim

var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () {
      return dP(this, 'a', { value: 7 }).a;
    }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    }return setSymbolDesc(it, key, D);
  }return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  }return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  }return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols =
// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () {
    setter = true;
  },
  useSimple: function () {
    setter = false;
  }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":8,"./_descriptors":30,"./_enum-keys":33,"./_export":34,"./_fails":36,"./_global":41,"./_has":42,"./_hide":43,"./_is-array":50,"./_is-object":52,"./_library":60,"./_meta":66,"./_object-create":71,"./_object-dp":72,"./_object-gopd":75,"./_object-gopn":77,"./_object-gopn-ext":76,"./_object-gops":78,"./_object-keys":81,"./_object-pie":82,"./_property-desc":90,"./_redefine":92,"./_set-to-string-tag":99,"./_shared":101,"./_to-iobject":115,"./_to-primitive":118,"./_uid":122,"./_wks":127,"./_wks-define":125,"./_wks-ext":126}],254:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    }return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);

},{"./_an-object":8,"./_export":34,"./_fails":36,"./_global":41,"./_is-object":52,"./_set-species":98,"./_species-constructor":102,"./_to-absolute-index":112,"./_to-length":116,"./_typed":121,"./_typed-buffer":120}],255:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});

},{"./_export":34,"./_typed":121,"./_typed-buffer":120}],256:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],257:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],258:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],259:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],260:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],261:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],262:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],263:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],264:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"./_typed-array":119}],265:[function(require,module,exports){
'use strict';

var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var fails = require('./_fails');
var validate = require('./_validate-collection');
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () {
  return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7;
})) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
        // store all the rest on native weakmap
      }return method.call(this, a, b);
    });
  });
}

},{"./_array-methods":13,"./_collection":23,"./_collection-weak":22,"./_fails":36,"./_is-object":52,"./_meta":66,"./_object-assign":70,"./_redefine":92,"./_validate-collection":124}],266:[function(require,module,exports){
'use strict';

var weak = require('./_collection-weak');
var validate = require('./_validate-collection');
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
require('./_collection')(WEAK_SET, function (get) {
  return function WeakSet() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"./_collection":23,"./_collection-weak":22,"./_validate-collection":124}],267:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var aFunction = require('./_a-function');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

require('./_add-to-unscopables')('flatMap');

},{"./_a-function":4,"./_add-to-unscopables":6,"./_array-species-create":16,"./_export":34,"./_flatten-into-array":39,"./_to-length":116,"./_to-object":117}],268:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten

var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatten: function flatten() /* depthArg = 1 */{
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

require('./_add-to-unscopables')('flatten');

},{"./_add-to-unscopables":6,"./_array-species-create":16,"./_export":34,"./_flatten-into-array":39,"./_to-integer":114,"./_to-length":116,"./_to-object":117}],269:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes

var $export = require('./_export');
var $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');

},{"./_add-to-unscopables":6,"./_array-includes":12,"./_export":34}],270:[function(require,module,exports){
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = require('./_export');
var microtask = require('./_microtask')();
var process = require('./_global').process;
var isNode = require('./_cof')(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});

},{"./_cof":19,"./_export":34,"./_global":41,"./_microtask":68}],271:[function(require,module,exports){
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export');
var cof = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});

},{"./_cof":19,"./_export":34}],272:[function(require,module,exports){
// https://github.com/tc39/proposal-global
var $export = require('./_export');

$export($export.G, { global: require('./_global') });

},{"./_export":34,"./_global":41}],273:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
require('./_set-collection-from')('Map');

},{"./_set-collection-from":95}],274:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
require('./_set-collection-of')('Map');

},{"./_set-collection-of":96}],275:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });

},{"./_collection-to-json":21,"./_export":34}],276:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});

},{"./_export":34}],277:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });

},{"./_export":34}],278:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});

},{"./_export":34}],279:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var scale = require('./_math-scale');
var fround = require('./_math-fround');

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});

},{"./_export":34,"./_math-fround":62,"./_math-scale":64}],280:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});

},{"./_export":34}],281:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});

},{"./_export":34}],282:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});

},{"./_export":34}],283:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });

},{"./_export":34}],284:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});

},{"./_export":34}],285:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { scale: require('./_math-scale') });

},{"./_export":34,"./_math-scale":64}],286:[function(require,module,exports){
// http://jfbastien.github.io/papers/Math.signbit.html
var $export = require('./_export');

$export($export.S, 'Math', { signbit: function signbit(x) {
    // eslint-disable-next-line no-self-compare
    return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
  } });

},{"./_export":34}],287:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});

},{"./_export":34}],288:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});

},{"./_a-function":4,"./_descriptors":30,"./_export":34,"./_object-dp":72,"./_object-forced-pam":74,"./_to-object":117}],289:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});

},{"./_a-function":4,"./_descriptors":30,"./_export":34,"./_object-dp":72,"./_object-forced-pam":74,"./_to-object":117}],290:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":34,"./_object-to-array":84}],291:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = require('./_export');
var ownKeys = require('./_own-keys');
var toIObject = require('./_to-iobject');
var gOPD = require('./_object-gopd');
var createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"./_create-property":25,"./_export":34,"./_object-gopd":75,"./_own-keys":85,"./_to-iobject":115}],292:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_descriptors":30,"./_export":34,"./_object-forced-pam":74,"./_object-gopd":75,"./_object-gpo":79,"./_to-object":117,"./_to-primitive":118}],293:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_descriptors":30,"./_export":34,"./_object-forced-pam":74,"./_object-gopd":75,"./_object-gpo":79,"./_to-object":117,"./_to-primitive":118}],294:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"./_export":34,"./_object-to-array":84}],295:[function(require,module,exports){
'use strict';
// https://github.com/zenparsing/es-observable

var $export = require('./_export');
var global = require('./_global');
var core = require('./_core');
var microtask = require('./_microtask')();
var OBSERVABLE = require('./_wks')('observable');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var anInstance = require('./_an-instance');
var redefineAll = require('./_redefine-all');
var hide = require('./_hide');
var forOf = require('./_for-of');
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () {
        subscription.unsubscribe();
      };else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  }if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() {
    closeSubscription(this);
  }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    }cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      }cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          }observer.complete();
        }
      });
      return function () {
        done = true;
      };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          }observer.complete();
        }
      });
      return function () {
        done = true;
      };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () {
  return this;
});

$export($export.G, { Observable: $Observable });

require('./_set-species')('Observable');

},{"./_a-function":4,"./_an-instance":7,"./_an-object":8,"./_core":24,"./_export":34,"./_for-of":40,"./_global":41,"./_hide":43,"./_microtask":68,"./_redefine-all":91,"./_set-species":98,"./_wks":127}],296:[function(require,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';

var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
    var C = speciesConstructor(this, core.Promise || global.Promise);
    var isFunction = typeof onFinally == 'function';
    return this.then(isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () {
        return x;
      });
    } : onFinally, isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () {
        throw e;
      });
    } : onFinally);
  } });

},{"./_core":24,"./_export":34,"./_global":41,"./_promise-resolve":89,"./_species-constructor":102}],297:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-promise-try

var $export = require('./_export');
var newPromiseCapability = require('./_new-promise-capability');
var perform = require('./_perform');

$export($export.S, 'Promise', { 'try': function (callbackfn) {
    var promiseCapability = newPromiseCapability.f(this);
    var result = perform(callbackfn);
    (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
    return promiseCapability.promise;
  } });

},{"./_export":34,"./_new-promise-capability":69,"./_perform":88}],298:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
    ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
  } });

},{"./_an-object":8,"./_metadata":67}],299:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
    var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
    var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
    if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
    if (metadataMap.size) return true;
    var targetMetadata = store.get(target);
    targetMetadata['delete'](targetKey);
    return !!targetMetadata.size || store['delete'](target);
  } });

},{"./_an-object":8,"./_metadata":67}],300:[function(require,module,exports){
var Set = require('./es6.set');
var from = require('./_array-from-iterable');
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
    return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
  } });

},{"./_an-object":8,"./_array-from-iterable":11,"./_metadata":67,"./_object-gpo":79,"./es6.set":230}],301:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
    return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  } });

},{"./_an-object":8,"./_metadata":67,"./_object-gpo":79}],302:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
    return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
  } });

},{"./_an-object":8,"./_metadata":67}],303:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
    return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  } });

},{"./_an-object":8,"./_metadata":67}],304:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
    return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  } });

},{"./_an-object":8,"./_metadata":67,"./_object-gpo":79}],305:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
    return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  } });

},{"./_an-object":8,"./_metadata":67}],306:[function(require,module,exports){
var $metadata = require('./_metadata');
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
    return function decorator(target, targetKey) {
      ordinaryDefineOwnMetadata(metadataKey, metadataValue, (targetKey !== undefined ? anObject : aFunction)(target), toMetaKey(targetKey));
    };
  } });

},{"./_a-function":4,"./_an-object":8,"./_metadata":67}],307:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
require('./_set-collection-from')('Set');

},{"./_set-collection-from":95}],308:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
require('./_set-collection-of')('Set');

},{"./_set-collection-of":96}],309:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });

},{"./_collection-to-json":21,"./_export":34}],310:[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at

var $export = require('./_export');
var $at = require('./_string-at')(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});

},{"./_export":34,"./_string-at":104}],311:[function(require,module,exports){
'use strict';
// https://tc39.github.io/String.prototype.matchAll/

var $export = require('./_export');
var defined = require('./_defined');
var toLength = require('./_to-length');
var isRegExp = require('./_is-regexp');
var getFlags = require('./_flags');
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});

},{"./_defined":29,"./_export":34,"./_flags":38,"./_is-regexp":53,"./_iter-create":55,"./_to-length":116}],312:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end

var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"./_export":34,"./_string-pad":107,"./_user-agent":123}],313:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end

var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"./_export":34,"./_string-pad":107,"./_user-agent":123}],314:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

require('./_string-trim')('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

},{"./_string-trim":109}],315:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

require('./_string-trim')('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

},{"./_string-trim":109}],316:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":125}],317:[function(require,module,exports){
require('./_wks-define')('observable');

},{"./_wks-define":125}],318:[function(require,module,exports){
// https://github.com/tc39/proposal-global
var $export = require('./_export');

$export($export.S, 'System', { global: require('./_global') });

},{"./_export":34,"./_global":41}],319:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
require('./_set-collection-from')('WeakMap');

},{"./_set-collection-from":95}],320:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
require('./_set-collection-of')('WeakMap');

},{"./_set-collection-of":96}],321:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
require('./_set-collection-from')('WeakSet');

},{"./_set-collection-from":95}],322:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
require('./_set-collection-of')('WeakSet');

},{"./_set-collection-of":96}],323:[function(require,module,exports){
var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./_global":41,"./_hide":43,"./_iterators":59,"./_object-keys":81,"./_redefine":92,"./_wks":127,"./es6.array.iterator":140}],324:[function(require,module,exports){
var $export = require('./_export');
var $task = require('./_task');
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"./_export":34,"./_task":111}],325:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global = require('./_global');
var $export = require('./_export');
var userAgent = require('./_user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"./_export":34,"./_global":41,"./_user-agent":123}],326:[function(require,module,exports){
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.array.flat-map');
require('./modules/es7.array.flatten');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.map.of');
require('./modules/es7.set.of');
require('./modules/es7.weak-map.of');
require('./modules/es7.weak-set.of');
require('./modules/es7.map.from');
require('./modules/es7.set.from');
require('./modules/es7.weak-map.from');
require('./modules/es7.weak-set.from');
require('./modules/es7.global');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.clamp');
require('./modules/es7.math.deg-per-rad');
require('./modules/es7.math.degrees');
require('./modules/es7.math.fscale');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.rad-per-deg');
require('./modules/es7.math.radians');
require('./modules/es7.math.scale');
require('./modules/es7.math.umulh');
require('./modules/es7.math.signbit');
require('./modules/es7.promise.finally');
require('./modules/es7.promise.try');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');

},{"./modules/_core":24,"./modules/es6.array.copy-within":130,"./modules/es6.array.every":131,"./modules/es6.array.fill":132,"./modules/es6.array.filter":133,"./modules/es6.array.find":135,"./modules/es6.array.find-index":134,"./modules/es6.array.for-each":136,"./modules/es6.array.from":137,"./modules/es6.array.index-of":138,"./modules/es6.array.is-array":139,"./modules/es6.array.iterator":140,"./modules/es6.array.join":141,"./modules/es6.array.last-index-of":142,"./modules/es6.array.map":143,"./modules/es6.array.of":144,"./modules/es6.array.reduce":146,"./modules/es6.array.reduce-right":145,"./modules/es6.array.slice":147,"./modules/es6.array.some":148,"./modules/es6.array.sort":149,"./modules/es6.array.species":150,"./modules/es6.date.now":151,"./modules/es6.date.to-iso-string":152,"./modules/es6.date.to-json":153,"./modules/es6.date.to-primitive":154,"./modules/es6.date.to-string":155,"./modules/es6.function.bind":156,"./modules/es6.function.has-instance":157,"./modules/es6.function.name":158,"./modules/es6.map":159,"./modules/es6.math.acosh":160,"./modules/es6.math.asinh":161,"./modules/es6.math.atanh":162,"./modules/es6.math.cbrt":163,"./modules/es6.math.clz32":164,"./modules/es6.math.cosh":165,"./modules/es6.math.expm1":166,"./modules/es6.math.fround":167,"./modules/es6.math.hypot":168,"./modules/es6.math.imul":169,"./modules/es6.math.log10":170,"./modules/es6.math.log1p":171,"./modules/es6.math.log2":172,"./modules/es6.math.sign":173,"./modules/es6.math.sinh":174,"./modules/es6.math.tanh":175,"./modules/es6.math.trunc":176,"./modules/es6.number.constructor":177,"./modules/es6.number.epsilon":178,"./modules/es6.number.is-finite":179,"./modules/es6.number.is-integer":180,"./modules/es6.number.is-nan":181,"./modules/es6.number.is-safe-integer":182,"./modules/es6.number.max-safe-integer":183,"./modules/es6.number.min-safe-integer":184,"./modules/es6.number.parse-float":185,"./modules/es6.number.parse-int":186,"./modules/es6.number.to-fixed":187,"./modules/es6.number.to-precision":188,"./modules/es6.object.assign":189,"./modules/es6.object.create":190,"./modules/es6.object.define-properties":191,"./modules/es6.object.define-property":192,"./modules/es6.object.freeze":193,"./modules/es6.object.get-own-property-descriptor":194,"./modules/es6.object.get-own-property-names":195,"./modules/es6.object.get-prototype-of":196,"./modules/es6.object.is":200,"./modules/es6.object.is-extensible":197,"./modules/es6.object.is-frozen":198,"./modules/es6.object.is-sealed":199,"./modules/es6.object.keys":201,"./modules/es6.object.prevent-extensions":202,"./modules/es6.object.seal":203,"./modules/es6.object.set-prototype-of":204,"./modules/es6.object.to-string":205,"./modules/es6.parse-float":206,"./modules/es6.parse-int":207,"./modules/es6.promise":208,"./modules/es6.reflect.apply":209,"./modules/es6.reflect.construct":210,"./modules/es6.reflect.define-property":211,"./modules/es6.reflect.delete-property":212,"./modules/es6.reflect.enumerate":213,"./modules/es6.reflect.get":216,"./modules/es6.reflect.get-own-property-descriptor":214,"./modules/es6.reflect.get-prototype-of":215,"./modules/es6.reflect.has":217,"./modules/es6.reflect.is-extensible":218,"./modules/es6.reflect.own-keys":219,"./modules/es6.reflect.prevent-extensions":220,"./modules/es6.reflect.set":222,"./modules/es6.reflect.set-prototype-of":221,"./modules/es6.regexp.constructor":223,"./modules/es6.regexp.flags":224,"./modules/es6.regexp.match":225,"./modules/es6.regexp.replace":226,"./modules/es6.regexp.search":227,"./modules/es6.regexp.split":228,"./modules/es6.regexp.to-string":229,"./modules/es6.set":230,"./modules/es6.string.anchor":231,"./modules/es6.string.big":232,"./modules/es6.string.blink":233,"./modules/es6.string.bold":234,"./modules/es6.string.code-point-at":235,"./modules/es6.string.ends-with":236,"./modules/es6.string.fixed":237,"./modules/es6.string.fontcolor":238,"./modules/es6.string.fontsize":239,"./modules/es6.string.from-code-point":240,"./modules/es6.string.includes":241,"./modules/es6.string.italics":242,"./modules/es6.string.iterator":243,"./modules/es6.string.link":244,"./modules/es6.string.raw":245,"./modules/es6.string.repeat":246,"./modules/es6.string.small":247,"./modules/es6.string.starts-with":248,"./modules/es6.string.strike":249,"./modules/es6.string.sub":250,"./modules/es6.string.sup":251,"./modules/es6.string.trim":252,"./modules/es6.symbol":253,"./modules/es6.typed.array-buffer":254,"./modules/es6.typed.data-view":255,"./modules/es6.typed.float32-array":256,"./modules/es6.typed.float64-array":257,"./modules/es6.typed.int16-array":258,"./modules/es6.typed.int32-array":259,"./modules/es6.typed.int8-array":260,"./modules/es6.typed.uint16-array":261,"./modules/es6.typed.uint32-array":262,"./modules/es6.typed.uint8-array":263,"./modules/es6.typed.uint8-clamped-array":264,"./modules/es6.weak-map":265,"./modules/es6.weak-set":266,"./modules/es7.array.flat-map":267,"./modules/es7.array.flatten":268,"./modules/es7.array.includes":269,"./modules/es7.asap":270,"./modules/es7.error.is-error":271,"./modules/es7.global":272,"./modules/es7.map.from":273,"./modules/es7.map.of":274,"./modules/es7.map.to-json":275,"./modules/es7.math.clamp":276,"./modules/es7.math.deg-per-rad":277,"./modules/es7.math.degrees":278,"./modules/es7.math.fscale":279,"./modules/es7.math.iaddh":280,"./modules/es7.math.imulh":281,"./modules/es7.math.isubh":282,"./modules/es7.math.rad-per-deg":283,"./modules/es7.math.radians":284,"./modules/es7.math.scale":285,"./modules/es7.math.signbit":286,"./modules/es7.math.umulh":287,"./modules/es7.object.define-getter":288,"./modules/es7.object.define-setter":289,"./modules/es7.object.entries":290,"./modules/es7.object.get-own-property-descriptors":291,"./modules/es7.object.lookup-getter":292,"./modules/es7.object.lookup-setter":293,"./modules/es7.object.values":294,"./modules/es7.observable":295,"./modules/es7.promise.finally":296,"./modules/es7.promise.try":297,"./modules/es7.reflect.define-metadata":298,"./modules/es7.reflect.delete-metadata":299,"./modules/es7.reflect.get-metadata":301,"./modules/es7.reflect.get-metadata-keys":300,"./modules/es7.reflect.get-own-metadata":303,"./modules/es7.reflect.get-own-metadata-keys":302,"./modules/es7.reflect.has-metadata":304,"./modules/es7.reflect.has-own-metadata":305,"./modules/es7.reflect.metadata":306,"./modules/es7.set.from":307,"./modules/es7.set.of":308,"./modules/es7.set.to-json":309,"./modules/es7.string.at":310,"./modules/es7.string.match-all":311,"./modules/es7.string.pad-end":312,"./modules/es7.string.pad-start":313,"./modules/es7.string.trim-left":314,"./modules/es7.string.trim-right":315,"./modules/es7.symbol.async-iterator":316,"./modules/es7.symbol.observable":317,"./modules/es7.system.global":318,"./modules/es7.weak-map.from":319,"./modules/es7.weak-map.of":320,"./modules/es7.weak-set.from":321,"./modules/es7.weak-set.of":322,"./modules/web.dom.iterable":323,"./modules/web.immediate":324,"./modules/web.timers":325}],327:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('./elemental');

var _reactRouter = require('react-router');

var _glamor = require('glamor');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Mobile = require('./components/Navigation/Mobile');

var _Mobile2 = _interopRequireDefault(_Mobile);

var _Primary = require('./components/Navigation/Primary');

var _Primary2 = _interopRequireDefault(_Primary);

var _Secondary = require('./components/Navigation/Secondary');

var _Secondary2 = _interopRequireDefault(_Secondary);

var _Footer = require('./components/Footer');

var _Footer2 = _interopRequireDefault(_Footer);

var _IframeContent = require('./shared/IframeContent');

var _IframeContent2 = _interopRequireDefault(_IframeContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The App component is the component that is rendered around all views, and
 * contains common things like navigation, footer, etc.
 */

var classes = {
	wrapper: {
		display: 'flex',
		flexDirection: 'column',
		minHeight: '100vh'
	},
	body: {
		flexGrow: 1
	}
};

var App = function App(props) {
	var listsByPath = require('../utils/lists').listsByPath;
	var children = props.children;
	// If we're on either a list or an item view
	var currentList = void 0,
	    currentSection = void 0;
	if (props.params.listId) {
		currentList = listsByPath[props.params.listId];
		// If we're on a list path that doesn't exist (e.g. /keystone/gibberishasfw34afsd) this will
		// be undefined
		if (!currentList) {
			var section = _lodash2.default.find(Keystone.nav.sections, { lists: [{ path: props.location.pathname, external: true }] });
			if (section) {
				var path = _lodash2.default.find(section.lists, { path: props.location.pathname, external: true });
				console.log(path);
				children = _react2.default.createElement(_IframeContent2.default, { src: path.href, show: true, onCancel: function onCancel() {
						console.log('frame cancel');
					}, onSave: function onSave() {
						console.log('frame save');
					} });
			} else {
				children = _react2.default.createElement(
					_elemental.Container,
					null,
					_react2.default.createElement(
						'p',
						null,
						'List not found!'
					),
					_react2.default.createElement(
						_reactRouter.Link,
						{ to: '' + Keystone.adminPath },
						'Go back home'
					)
				);
			}
		} else {
			// Get the current section we're in for the navigation
			currentSection = Keystone.nav.by.list[currentList.key];
		}
	}
	// Default current section key to dashboard
	var currentSectionKey = currentSection && currentSection.key || 'dashboard';
	return _react2.default.createElement(
		'div',
		{ className: (0, _glamor.css)(classes.wrapper) },
		_react2.default.createElement(
			'header',
			null,
			_react2.default.createElement(_Mobile2.default, {
				brand: Keystone.brand,
				currentListKey: props.params.listId,
				currentSectionKey: currentSectionKey,
				sections: Keystone.nav.sections,
				signoutUrl: Keystone.signoutUrl
			}),
			_react2.default.createElement(_Primary2.default, {
				currentSectionKey: currentSectionKey,
				brand: Keystone.brand,
				sections: Keystone.nav.sections,
				signoutUrl: Keystone.signoutUrl
			}),
			currentSection ? _react2.default.createElement(_Secondary2.default, {
				currentListKey: props.params.listId,
				lists: currentSection.lists,
				itemId: props.params.itemId
			}) : null
		),
		_react2.default.createElement(
			'main',
			{ className: (0, _glamor.css)(classes.body) },
			children
		),
		_react2.default.createElement(_Footer2.default, {
			appversion: Keystone.appversion,
			backUrl: Keystone.backUrl,
			brand: Keystone.brand,
			User: Keystone.User,
			user: Keystone.user,
			version: Keystone.version
		})
	);
};

module.exports = App;

},{"../utils/lists":482,"./components/Footer":328,"./components/Navigation/Mobile":331,"./components/Navigation/Primary":333,"./components/Navigation/Secondary":335,"./elemental":399,"./shared/IframeContent":463,"glamor":undefined,"lodash":undefined,"react":undefined,"react-router":undefined}],328:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _elemental = require('../../elemental');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The global Footer, displays a link to the website and the current Keystone
 * version in use
 */

var Footer = _react2.default.createClass({
	displayName: 'Footer',
	propTypes: {
		appversion: _react2.default.PropTypes.string,
		backUrl: _react2.default.PropTypes.string,
		brand: _react2.default.PropTypes.string,
		user: _react2.default.PropTypes.object,
		User: _react2.default.PropTypes.object, // eslint-disable-line react/sort-prop-types
		version: _react2.default.PropTypes.string
	},
	// Render the user
	renderUser: function renderUser() {
		var _props = this.props,
		    User = _props.User,
		    user = _props.user;

		if (!user) return null;

		return _react2.default.createElement(
			'span',
			null,
			_react2.default.createElement(
				'span',
				null,
				' Signed in as '
			),
			_react2.default.createElement(
				'a',
				{ href: Keystone.adminPath + '/' + User.path + '/' + user.id, tabIndex: '-1', className: (0, _glamor.css)(classes.link) },
				user.name
			),
			_react2.default.createElement(
				'span',
				null,
				'.'
			)
		);
	},
	render: function render() {
		var _props2 = this.props,
		    backUrl = _props2.backUrl,
		    brand = _props2.brand,
		    appversion = _props2.appversion,
		    version = _props2.version;


		return _react2.default.createElement(
			'footer',
			{ className: (0, _glamor.css)(classes.footer), 'data-keystone-footer': true },
			_react2.default.createElement(
				_elemental.Container,
				null,
				_react2.default.createElement(
					'a',
					{
						href: backUrl,
						tabIndex: '-1',
						className: (0, _glamor.css)(classes.link)
					},
					brand + (appversion ? ' ' + appversion : '')
				),
				_react2.default.createElement(
					'span',
					null,
					' powered by '
				),
				_react2.default.createElement(
					'a',
					{
						href: 'http://keystonejs.com',
						target: '_blank',
						className: (0, _glamor.css)(classes.link),
						tabIndex: '-1'
					},
					'KeystoneJS'
				),
				_react2.default.createElement(
					'span',
					null,
					' version ',
					version,
					'.'
				),
				this.renderUser()
			)
		);
	}
});

/* eslint quote-props: ["error", "as-needed"] */
var linkHoverAndFocus = {
	color: _theme2.default.color.gray60,
	outline: 'none'
};
var classes = {
	footer: {
		boxShadow: '0 -1px 0 rgba(0, 0, 0, 0.1)',
		color: _theme2.default.color.gray40,
		fontSize: _theme2.default.font.size.small,
		paddingBottom: 30,
		paddingTop: 40,
		textAlign: 'center',
		display: 'none'
	},
	link: {
		color: _theme2.default.color.gray60,

		':hover': linkHoverAndFocus,
		':focus': linkHoverAndFocus
	}
};

module.exports = Footer;

},{"../../../theme":477,"../../elemental":399,"glamor":undefined,"react":undefined}],329:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A list item of the mobile navigation
 */

var MobileListItem = _react2.default.createClass({
	displayName: 'MobileListItem',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string,
		href: _react2.default.PropTypes.string.isRequired,
		onClick: _react2.default.PropTypes.func
	},
	render: function render() {
		return _react2.default.createElement(
			_reactRouter.Link,
			{
				className: this.props.className,
				to: this.props.href,
				onClick: this.props.onClick,
				tabIndex: '-1'
			},
			this.props.children
		);
	}
});

module.exports = MobileListItem;

},{"react":undefined,"react-router":undefined}],330:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ListItem = require('./ListItem');

var _ListItem2 = _interopRequireDefault(_ListItem);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MobileSectionItem = _react2.default.createClass({
	displayName: 'MobileSectionItem',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string,
		currentListKey: _react2.default.PropTypes.string,
		href: _react2.default.PropTypes.string.isRequired,
		lists: _react2.default.PropTypes.array
	},
	// Render the lists
	renderLists: function renderLists() {
		var _this = this;

		if (!this.props.lists || this.props.lists.length <= 1) return null;

		var navLists = this.props.lists.map(function (item) {
			// Get the link and the classname
			var href = item.external ? item.path : Keystone.adminPath + '/' + item.path;
			var className = _this.props.currentListKey && _this.props.currentListKey === item.path ? 'MobileNavigation__list-item is-active' : 'MobileNavigation__list-item';

			return _react2.default.createElement(
				_ListItem2.default,
				{ key: item.path, href: href, className: className, onClick: _this.props.onClick },
				item.label
			);
		});

		return _react2.default.createElement(
			'div',
			{ className: 'MobileNavigation__lists' },
			navLists
		);
	},
	render: function render() {
		return _react2.default.createElement(
			'div',
			{ className: this.props.className },
			_react2.default.createElement(
				_reactRouter.Link,
				{
					className: 'MobileNavigation__section-item',
					to: this.props.href,
					tabIndex: '-1',
					onClick: this.props.onClick
				},
				this.props.children
			),
			this.renderLists()
		);
	}
}); /**
     * A mobile section
     */

module.exports = MobileSectionItem;

},{"./ListItem":329,"react":undefined,"react-router":undefined}],331:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _SectionItem = require('./SectionItem');

var _SectionItem2 = _interopRequireDefault(_SectionItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ESCAPE_KEY_CODE = 27; /**
                           * The mobile navigation, displayed on screens < 768px
                           */

var MobileNavigation = _react2.default.createClass({
	displayName: 'MobileNavigation',
	propTypes: {
		brand: _react2.default.PropTypes.string,
		currentListKey: _react2.default.PropTypes.string,
		currentSectionKey: _react2.default.PropTypes.string,
		sections: _react2.default.PropTypes.array.isRequired,
		signoutUrl: _react2.default.PropTypes.string
	},
	getInitialState: function getInitialState() {
		return {
			barIsVisible: false
		};
	},

	// Handle showing and hiding the menu based on the window size when
	// resizing
	componentDidMount: function componentDidMount() {
		this.handleResize();
		window.addEventListener('resize', this.handleResize);
	},
	componentWillUnmount: function componentWillUnmount() {
		window.removeEventListener('resize', this.handleResize);
	},
	handleResize: function handleResize() {
		this.setState({
			barIsVisible: window.innerWidth < 768
		});
	},

	// Toggle the menu
	toggleMenu: function toggleMenu() {
		this[this.state.menuIsVisible ? 'hideMenu' : 'showMenu']();
	},

	// Show the menu
	showMenu: function showMenu() {
		this.setState({
			menuIsVisible: true
		});

		// Make the body unscrollable, so you can only scroll in the menu
		document.body.style.overflow = 'hidden';
		document.body.addEventListener('keyup', this.handleEscapeKey, false);
	},

	// Hide the menu
	hideMenu: function hideMenu() {
		this.setState({
			menuIsVisible: false
		});

		// Make the body scrollable again
		document.body.style.overflow = null;
		document.body.removeEventListener('keyup', this.handleEscapeKey, false);
	},

	// If the escape key was pressed, hide the menu
	handleEscapeKey: function handleEscapeKey(event) {
		if (event.which === ESCAPE_KEY_CODE) {
			this.hideMenu();
		}
	},
	renderNavigation: function renderNavigation() {
		var _this = this;

		if (!this.props.sections || !this.props.sections.length) return null;

		return this.props.sections.map(function (section) {
			// Get the link and the classname
			var href = section.lists[0].external ? section.lists[0].path : Keystone.adminPath + '/' + section.lists[0].path;
			var className = _this.props.currentSectionKey && _this.props.currentSectionKey === section.key ? 'MobileNavigation__section is-active' : 'MobileNavigation__section';

			// Render a SectionItem
			return _react2.default.createElement(
				_SectionItem2.default,
				{
					key: section.key,
					className: className,
					href: href,
					lists: section.lists,
					currentListKey: _this.props.currentListKey,
					onClick: _this.toggleMenu
				},
				section.label
			);
		});
	},

	// Render a blockout
	renderBlockout: function renderBlockout() {
		if (!this.state.menuIsVisible) return null;

		return _react2.default.createElement('div', { className: 'MobileNavigation__blockout', onClick: this.toggleMenu });
	},

	// Render the sidebar menu
	renderMenu: function renderMenu() {
		if (!this.state.menuIsVisible) return null;

		return _react2.default.createElement(
			'nav',
			{ className: 'MobileNavigation__menu' },
			_react2.default.createElement(
				'div',
				{ className: 'MobileNavigation__sections' },
				this.renderNavigation()
			)
		);
	},
	render: function render() {
		if (!this.state.barIsVisible) return null;

		return _react2.default.createElement(
			'div',
			{ className: 'MobileNavigation' },
			_react2.default.createElement(
				'div',
				{ className: 'MobileNavigation__bar' },
				_react2.default.createElement(
					'button',
					{
						type: 'button',
						onClick: this.toggleMenu,
						className: 'MobileNavigation__bar__button MobileNavigation__bar__button--menu'
					},
					_react2.default.createElement('span', { className: 'MobileNavigation__bar__icon octicon octicon-' + (this.state.menuIsVisible ? 'x' : 'three-bars') })
				),
				_react2.default.createElement(
					'span',
					{ className: 'MobileNavigation__bar__label' },
					this.props.brand
				),
				_react2.default.createElement(
					'a',
					{
						href: this.props.signoutUrl,
						className: 'MobileNavigation__bar__button MobileNavigation__bar__button--signout'
					},
					_react2.default.createElement('span', { className: 'MobileNavigation__bar__icon octicon octicon-sign-out' })
				)
			),
			_react2.default.createElement('div', { className: 'MobileNavigation__bar--placeholder' }),
			_react2.default.createElement(
				_reactAddonsCssTransitionGroup2.default,
				{
					transitionName: 'MobileNavigation__menu',
					transitionEnterTimeout: 260,
					transitionLeaveTimeout: 200
				},
				this.renderMenu()
			),
			_react2.default.createElement(
				_reactAddonsCssTransitionGroup2.default,
				{
					transitionName: 'react-transitiongroup-fade',
					transitionEnterTimeout: 0,
					transitionLeaveTimeout: 0
				},
				this.renderBlockout()
			)
		);
	}
});

module.exports = MobileNavigation;

},{"./SectionItem":330,"react":undefined,"react-addons-css-transition-group":undefined}],332:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimaryNavItem = function PrimaryNavItem(_ref) {
	var children = _ref.children,
	    className = _ref.className,
	    href = _ref.href,
	    label = _ref.label,
	    title = _ref.title,
	    to = _ref.to,
	    active = _ref.active;

	var itemClassName = (0, _classnames2.default)('primary-navbar__item', className);

	var Button = to ? _react2.default.createElement(
		_reactRouter.Link,
		{
			className: 'primary-navbar__link',
			key: title,
			tabIndex: '-1',
			title: title,
			to: to
			// Block clicks on active link
			, onClick: function onClick(evt) {
				if (active) evt.preventDefault();
			}
		},
		children
	) : _react2.default.createElement(
		'a',
		{
			className: 'primary-navbar__link',
			href: href,
			key: title,
			tabIndex: '-1',
			title: title
		},
		children
	);

	return _react2.default.createElement(
		'li',
		{
			className: itemClassName,
			'data-section-label': label
		},
		Button
	);
}; /**
    * A item in the primary navigation. If it has a "to" prop it'll render a
    * react-router "Link", if it has a "href" prop it'll render a simple "a" tag
    */

PrimaryNavItem.displayName = 'PrimaryNavItem';
PrimaryNavItem.propTypes = {
	children: _react.PropTypes.node.isRequired,
	className: _react.PropTypes.string,
	href: _react.PropTypes.string,
	label: _react.PropTypes.string,
	title: _react.PropTypes.string,
	to: _react.PropTypes.string
};

module.exports = PrimaryNavItem;

},{"classnames":undefined,"react":undefined,"react-router":undefined}],333:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../../elemental');

var _NavItem = require('./NavItem');

var _NavItem2 = _interopRequireDefault(_NavItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimaryNavigation = _react2.default.createClass({
	displayName: 'PrimaryNavigation',
	propTypes: {
		brand: _react2.default.PropTypes.string,
		currentSectionKey: _react2.default.PropTypes.string,
		sections: _react2.default.PropTypes.array.isRequired,
		signoutUrl: _react2.default.PropTypes.string
	},
	getInitialState: function getInitialState() {
		return {};
	},

	// Handle resizing, hide this navigation on mobile (i.e. < 768px) screens
	componentDidMount: function componentDidMount() {
		this.handleResize();
		window.addEventListener('resize', this.handleResize);
	},
	componentWillUnmount: function componentWillUnmount() {
		window.removeEventListener('resize', this.handleResize);
	},
	handleResize: function handleResize() {
		this.setState({
			navIsVisible: window.innerWidth >= 768
		});
	},

	// Render the sign out button
	renderSignout: function renderSignout() {
		if (!this.props.signoutUrl) return null;

		return _react2.default.createElement(
			_NavItem2.default,
			{
				label: 'glyphicon glyphicon-log',
				href: this.props.signoutUrl,
				title: 'Sign Out'
			},
			'Sign Out'
		);
	},

	// Render the back button
	renderBackButton: function renderBackButton() {
		if (!Keystone.backUrl) return null;

		return _react2.default.createElement(
			_NavItem2.default,
			{
				label: 'octicon-globe',
				href: Keystone.backUrl,
				title: 'Front page - ' + this.props.brand
			},
			_react2.default.createElement('span', { className: 'octicon octicon-globe' })
		);
	},

	// Render the link to the webpage
	renderFrontLink: function renderFrontLink() {
		return _react2.default.createElement(
			'ul',
			{ className: 'app-nav app-nav--primary app-nav--right' },
			this.renderSignout()
		);
	},
	renderBrand: function renderBrand() {
		// TODO: support navbarLogo from keystone config
		if (!Keystone.backUrl) return null;

		var _props = this.props,
		    brand = _props.brand,
		    currentSectionKey = _props.currentSectionKey;

		var className = currentSectionKey === 'dashboard' ? 'primary-navbar__brand primary-navbar__item--active' : 'primary-navbar__brand';
		return _react2.default.createElement(
			_NavItem2.default,
			{
				className: className,
				href: Keystone.backUrl,
				label: 'octicon-home',
				title: 'Front page - ' + this.props.brand
			},
			'Home'
		);
	},

	// Render the navigation
	renderNavigation: function renderNavigation() {
		var _this = this;

		if (!this.props.sections || !this.props.sections.length) return null;

		return this.props.sections.map(function (section) {
			// Get the link and the class name
			var href = section.lists[0].external ? section.lists[0].path : Keystone.adminPath + '/' + section.lists[0].path;
			var isActive = _this.props.currentSectionKey && _this.props.currentSectionKey === section.key;
			var className = isActive ? 'primary-navbar__item--active' : null;

			return _react2.default.createElement(
				_NavItem2.default,
				{
					active: isActive,
					key: section.key,
					label: section.label,
					className: className,
					to: href
				},
				section.label
			);
		});
	},
	render: function render() {
		if (!this.state.navIsVisible) return null;

		return _react2.default.createElement(
			'nav',
			{ className: 'primary-navbar' },
			_react2.default.createElement(
				'ul',
				{ className: 'app-nav app-nav--primary app-nav--left' },
				this.renderBrand(),
				this.renderNavigation()
			),
			this.renderFrontLink()
		);
	}
}); /**
     * The primary (i.e. uppermost) navigation on desktop. Renders all sections and
     * the home-, website- and signout buttons.
     */

module.exports = PrimaryNavigation;

},{"../../../elemental":399,"./NavItem":332,"react":undefined}],334:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A navigation item of the secondary navigation
 */

var SecondaryNavItem = _react2.default.createClass({
	displayName: 'SecondaryNavItem',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string,
		href: _react2.default.PropTypes.string.isRequired,
		onClick: _react2.default.PropTypes.func,
		path: _react2.default.PropTypes.string,
		title: _react2.default.PropTypes.string
	},
	render: function render() {
		return _react2.default.createElement(
			'li',
			{ className: this.props.className, 'data-list-path': this.props.path },
			_react2.default.createElement(
				_reactRouter.Link,
				{
					to: this.props.href,
					onClick: this.props.onClick,
					title: this.props.title,
					tabIndex: '-1'
				},
				this.props.children
			)
		);
	}
});

module.exports = SecondaryNavItem;

},{"react":undefined,"react-router":undefined}],335:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _elemental = require('../../../elemental');

var _active = require('../../../screens/List/actions/active');

var _NavItem = require('./NavItem');

var _NavItem2 = _interopRequireDefault(_NavItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SecondaryNavigation = _react2.default.createClass({
	displayName: 'SecondaryNavigation',
	propTypes: {
		currentListKey: _react2.default.PropTypes.string,
		lists: _react2.default.PropTypes.array.isRequired
	},
	getInitialState: function getInitialState() {
		return {};
	},

	// Handle resizing and hide this nav on mobile (i.e. < 768px) screens
	componentDidMount: function componentDidMount() {
		this.handleResize();
		window.addEventListener('resize', this.handleResize);
	},
	componentWillUnmount: function componentWillUnmount() {
		window.removeEventListener('resize', this.handleResize);
	},
	handleResize: function handleResize() {
		this.setState({
			navIsVisible: this.props.lists && Object.keys(this.props.lists).length > 0 && window.innerWidth >= 768
		});
	},

	// Render the navigation
	renderNavigation: function renderNavigation(lists) {
		var _this = this;

		var navigation = Object.keys(lists).map(function (key) {
			var list = lists[key];
			// Get the link and the classname
			var href = list.external ? list.path : Keystone.adminPath + '/' + list.path;
			var isActive = _this.props.currentListKey && _this.props.currentListKey === list.path;
			var className = isActive ? 'active' : null;
			var onClick = function onClick(evt) {
				// If it's the currently active navigation item and we're not on the item view,
				// clear the query params on click
				if (isActive && !_this.props.itemId) {
					evt.preventDefault();
					_this.props.dispatch((0, _active.setActiveList)(_this.props.currentList, _this.props.currentListKey));
				}
			};

			return _react2.default.createElement(
				_NavItem2.default,
				{
					key: list.path,
					path: list.path,
					className: className,
					href: href,
					onClick: onClick
				},
				list.label
			);
		});

		return _react2.default.createElement(
			'ul',
			{ className: 'app-nav app-nav--secondary app-nav--left' },
			navigation
		);
	},
	render: function render() {
		if (!this.state.navIsVisible) return null;

		return _react2.default.createElement(
			'nav',
			{ className: 'secondary-navbar' },
			_react2.default.createElement(
				_elemental.Container,
				{ clearFloatingChildren: true },
				this.renderNavigation(this.props.lists)
			)
		);
	}
}); /**
     * The secondary navigation links to inidvidual lists of a section
     */

module.exports = (0, _reactRedux.connect)(function (state) {
	return {
		currentList: state.lists.currentList
	};
})(SecondaryNavigation);

},{"../../../elemental":399,"../../../screens/List/actions/active":430,"./NavItem":334,"react":undefined,"react-redux":undefined}],336:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	danger: _theme2.default.alert.color.danger,
	error: _theme2.default.alert.color.danger,
	info: _theme2.default.alert.color.info,
	success: _theme2.default.alert.color.success,
	warning: _theme2.default.alert.color.warning
};

},{"../../../theme":477}],337:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// clone children if a class exists for the tagname
var cloneWithClassnames = function cloneWithClassnames(c) {
	var type = c.type && c.type.displayName ? c.type.displayName : c.type || null;

	if (!type || !_styles2.default[type]) return c;

	return (0, _react.cloneElement)(c, {
		className: (0, _glamor.css)(_styles2.default[type])
	});
};

function Alert(_ref) {
	var children = _ref.children,
	    className = _ref.className,
	    color = _ref.color,
	    Component = _ref.component,
	    props = _objectWithoutProperties(_ref, ['children', 'className', 'color', 'component']);

	props.className = (0, _glamor.css)(_styles2.default.alert, _styles2.default[color], className);
	props.children = _react.Children.map(children, cloneWithClassnames);

	return _react2.default.createElement(Component, _extends({}, props, { 'data-alert-type': color }));
};

Alert.propTypes = {
	color: _react.PropTypes.oneOf(Object.keys(_colors2.default)).isRequired,
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string])
};
Alert.defaultProps = {
	component: 'div'
};

module.exports = Alert;

},{"./colors":336,"./styles":338,"glamor":undefined,"react":undefined}],338:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Alert
// ==============================

/* eslint quote-props: ["error", "as-needed"] */

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Prepare variants
var colorVariants = {};
Object.keys(_colors2.default).forEach(function (color) {
	colorVariants[color] = {
		backgroundColor: _colors2.default[color].background,
		borderColor: _colors2.default[color].border,
		color: _colors2.default[color].text
	};
});

// Prepare headings
var headingTagnames = {};
['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].forEach(function (tag) {
	headingTagnames[tag] = { color: 'inherit' };
});

var linkStyles = {
	color: 'inherit',
	textDecoration: 'underline',

	':hover': { color: 'inherit' },
	':focus': { color: 'inherit' }
};

module.exports = _extends({
	alert: {
		borderColor: 'transparent',
		borderRadius: _theme2.default.alert.borderRadius,
		borderStyle: 'solid',
		borderWidth: _theme2.default.alert.borderWidth,
		margin: _theme2.default.alert.margin,
		padding: _theme2.default.alert.padding
	},

	// tagnames
	a: linkStyles,
	Link: linkStyles,
	strong: {
		fontWeight: 500
	}

}, headingTagnames, colorVariants);

},{"../../../theme":477,"./colors":336}],339:[function(require,module,exports){
'use strict';

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function BlankState(_ref) {
	var className = _ref.className,
	    children = _ref.children,
	    heading = _ref.heading,
	    Component = _ref.component,
	    props = _objectWithoutProperties(_ref, ['className', 'children', 'heading', 'component']);

	props.className = (0, _glamor.css)(classes.container, className);

	return _react2.default.createElement(
		Component,
		props,
		!!heading && _react2.default.createElement(
			'h2',
			{ 'data-e2e-blank-state-heading': true, className: (0, _glamor.css)(classes.heading) },
			heading
		),
		children
	);
};

BlankState.propTypes = {
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]).isRequired,
	heading: _react.PropTypes.string
};
BlankState.defaultProps = {
	component: 'div'
};

/* eslint quote-props: ["error", "as-needed"] */

var classes = {
	container: {
		backgroundColor: _theme2.default.blankstate.background,
		borderRadius: _theme2.default.blankstate.borderRadius,
		color: _theme2.default.blankstate.color,
		paddingBottom: _theme2.default.blankstate.paddingVertical,
		paddingLeft: _theme2.default.blankstate.paddingHorizontal,
		paddingRight: _theme2.default.blankstate.paddingHorizontal,
		paddingTop: _theme2.default.blankstate.paddingVertical,
		textAlign: 'center'
	},

	heading: {
		color: 'inherit',

		':last-child': {
			marginBottom: 0
		}
	}
};

module.exports = BlankState;

},{"../../../theme":477,"glamor":undefined,"react":undefined}],340:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var commonClasses = _styles2.default.common;
var stylesheetCache = {};
function getStyleSheet(variant, color) {
	var cacheKey = variant + '-' + color;
	if (!stylesheetCache[cacheKey]) {
		var variantStyles = _styles2.default[variant](color);
		stylesheetCache[cacheKey] = variantStyles;
	}
	return stylesheetCache[cacheKey];
}

var BUTTON_SIZES = ['large', 'medium', 'small', 'xsmall'];
var BUTTON_VARIANTS = ['fill', 'hollow', 'link'];
var BUTTON_COLORS = ['default', 'primary', 'success', 'warning', 'danger', 'cancel', 'delete'];

// NOTE must NOT be functional component to allow `refs`

var Button = function (_Component) {
	_inherits(Button, _Component);

	function Button() {
		_classCallCheck(this, Button);

		return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
	}

	_createClass(Button, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    active = _props.active,
			    aphroditeStyles = _props.aphroditeStyles,
			    block = _props.block,
			    className = _props.className,
			    color = _props.color,
			    Tag = _props.component,
			    disabled = _props.disabled,
			    size = _props.size,
			    variant = _props.variant,
			    props = _objectWithoutProperties(_props, ['active', 'aphroditeStyles', 'block', 'className', 'color', 'component', 'disabled', 'size', 'variant']);

			// get the styles


			var variantClasses = getStyleSheet(variant, color);
			props.className = _glamor.css.apply(undefined, [commonClasses.base, commonClasses[size], variantClasses.base, block ? commonClasses.block : null, disabled ? commonClasses.disabled : null, active ? variantClasses.active : null].concat(_toConsumableArray(aphroditeStyles)));
			if (className) {
				props.className += ' ' + className;
			}

			// return an anchor or button
			if (!Tag) {
				Tag = props.href ? 'a' : 'button';
			}
			// Ensure buttons don't submit by default
			if (Tag === 'button' && !props.type) {
				props.type = 'button';
			}

			return _react2.default.createElement(Tag, props);
		}
	}]);

	return Button;
}(_react.Component);

;

Button.propTypes = {
	active: _react.PropTypes.bool,
	aphroditeStyles: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		_definition: _react.PropTypes.object,
		_name: _react.PropTypes.string
	})),
	block: _react.PropTypes.bool,
	color: _react.PropTypes.oneOf(BUTTON_COLORS),
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
	disabled: _react.PropTypes.bool,
	href: _react.PropTypes.string,
	size: _react.PropTypes.oneOf(BUTTON_SIZES),
	variant: _react.PropTypes.oneOf(BUTTON_VARIANTS)
};
Button.defaultProps = {
	aphroditeStyles: [],
	color: 'default',
	variant: 'fill'
};

module.exports = Button;

},{"./styles":341,"glamor":undefined,"react":undefined}],341:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Button
// ==============================

var _css = require('../../../utils/css');

var _color = require('../../../utils/color');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Common Styles
// ----------------

exports.common = {
	// Base Button
	// ----------------
	base: {
		'appearance': 'none',
		'background': 'none',
		'borderWidth': _theme2.default.button.borderWidth,
		'borderStyle': 'solid',
		'borderColor': 'transparent',
		'borderRadius': _theme2.default.button.borderRadius,
		'cursor': 'pointer',
		'display': 'inline-block',
		'fontWeight': _theme2.default.button.font.weight,
		'height': _theme2.default.component.height,
		'lineHeight': _theme2.default.component.lineHeight,
		'marginBottom': 0,
		'padding': '0 ' + _theme2.default.button.paddingHorizontal,
		'outline': 0,
		'textAlign': 'center',
		'touchAction': 'manipulation',
		'userSelect': 'none',
		'verticalAlign': 'middle',
		'whiteSpace': 'nowrap',

		':hover': {
			color: _theme2.default.button.default.textColor,
			textDecoration: 'none'
		},
		':focus': {
			color: _theme2.default.button.default.textColor,
			textDecoration: 'none'
		}
	},
	// Block Display
	// ----------------
	block: {
		display: 'block',
		width: '100%'
	},
	// Disabled
	// ----------------
	disabled: {
		opacity: 0.4,
		pointerEvents: 'none'
	},
	// Sizes
	// ----------------
	large: {
		fontSize: _theme2.default.font.size.large
	},
	default: {
		fontSize: _theme2.default.font.size.default
	},
	small: {
		fontSize: _theme2.default.font.size.small
	},
	xsmall: {
		fontSize: _theme2.default.font.size.xsmall,
		lineHeight: '1.9',
		paddingLeft: '.66em',
		paddingRight: '.66em'
	}
};

// Fill Variant
// ----------------
function buttonFillVariant(textColor, bgColor) {
	var hoverStyles = _extends({}, (0, _css.gradientVertical)((0, _color.lighten)(bgColor, 10), (0, _color.darken)(bgColor, 5)), {
		borderColor: (0, _color.darken)(bgColor, 5) + ' ' + (0, _color.darken)(bgColor, 10) + ' ' + (0, _color.darken)(bgColor, 15),
		boxShadow: '0 1px 0 rgba(0,0,0,0.1)',
		color: textColor,
		outline: 'none'
	});
	var focusStyles = _extends({}, (0, _css.gradientVertical)((0, _color.lighten)(bgColor, 10), (0, _color.darken)(bgColor, 5)), {
		borderColor: (0, _color.darken)(bgColor, 5) + ' ' + (0, _color.darken)(bgColor, 10) + ' ' + (0, _color.darken)(bgColor, 15),
		boxShadow: '0 0 0 3px ' + (0, _color.fade)(bgColor, 25),
		color: textColor,
		outline: 'none'
	});
	var activeStyles = {
		backgroundColor: (0, _color.darken)(bgColor, 10),
		backgroundImage: 'none',
		borderColor: (0, _color.darken)(bgColor, 25) + ' ' + (0, _color.darken)(bgColor, 15) + ' ' + (0, _color.darken)(bgColor, 10),
		boxShadow: 'inset 0 1px 2px rgba(0, 0, 0, 0.1)'
	};
	return {
		base: _extends({}, (0, _css.gradientVertical)((0, _color.lighten)(bgColor, 5), (0, _color.darken)(bgColor, 10), bgColor), {
			'borderColor': (0, _color.darken)(bgColor, 10) + ' ' + (0, _color.darken)(bgColor, 20) + ' ' + (0, _color.darken)(bgColor, 25),
			'boxShadow': 'inset 0 1px 0 rgba(255, 255, 255, 0.1)',
			'color': textColor,
			'fontWeight': 400,
			'textShadow': '0 -1px 0 rgba(0, 0, 0, 0.25)',

			':hover': hoverStyles,
			':focus': focusStyles,
			':active': activeStyles
		}),
		active: activeStyles
	};
}
// TODO: This is pretty hacky, needs to be consolidated with the Variant() method
// above (needs more theme variables to be implemented though)
function buttonFillDefault() {
	var borderColor = _theme2.default.input.border.color.default;
	var hoverStyles = _extends({}, (0, _css.gradientVertical)('#fff', '#eee'), {
		borderColor: (0, _color.darken)(borderColor, 5) + ' ' + (0, _color.darken)(borderColor, 5) + ' ' + (0, _color.darken)(borderColor, 10),
		boxShadow: '0 1px 0 rgba(0,0,0,0.1)',
		color: _theme2.default.color.text
	});
	var focusStyles = {
		borderColor: _theme2.default.color.primary,
		boxShadow: '0 0 0 3px ' + (0, _color.fade)(_theme2.default.color.primary, 10),
		color: _theme2.default.color.text,
		outline: 'none'
	};
	var activeStyles = {
		background: '#e6e6e6',
		borderColor: (0, _color.darken)(borderColor, 10),
		boxShadow: 'inset 0 1px 2px rgba(0, 0, 0, 0.1)',
		color: _theme2.default.color.text
	};
	return {
		base: _extends({}, (0, _css.gradientVertical)('#fafafa', '#eaeaea'), {
			'borderColor': borderColor + ' ' + (0, _color.darken)(borderColor, 6) + ' ' + (0, _color.darken)(borderColor, 12),
			'color': _theme2.default.color.text,
			'textShadow': '0 1px 0 white',

			':hover': hoverStyles,
			':focus': focusStyles,
			':active': activeStyles
		}),

		// gross hack
		active: _extends({}, activeStyles, {

			':hover': activeStyles,
			':focus': _extends({}, activeStyles, focusStyles, {
				boxShadow: '0 0 0 3px ' + (0, _color.fade)(_theme2.default.color.primary, 10) + ', inset 0 1px 2px rgba(0, 0, 0, 0.1)'
			}),
			':active': activeStyles
		})
	};
}
exports.fill = function (color) {
	switch (color) {
		case 'default':
			return buttonFillDefault();
		case 'cancel':
		case 'delete':
			return buttonFillVariant('white', _theme2.default.button.danger.bgColor);
		default:
			return buttonFillVariant('white', _theme2.default.button[color].bgColor);
	}
};

// Hollow Variant
// ----------------
function buttonHollowVariant(textColor, borderColor) {
	var focusAndHoverStyles = {
		backgroundImage: 'none',
		backgroundColor: (0, _color.fade)(borderColor, 15),
		borderColor: (0, _color.darken)(borderColor, 15),
		boxShadow: 'none',
		color: textColor,
		outline: 'none'
	};
	var focusOnlyStyles = {
		boxShadow: '0 0 0 3px ' + (0, _color.fade)(borderColor, 10)
	};
	var activeStyles = {
		backgroundColor: (0, _color.fade)(borderColor, 35),
		borderColor: (0, _color.darken)(borderColor, 25),
		boxShadow: 'none'
	};

	return {
		base: {
			'background': 'none',
			'borderColor': borderColor,
			'color': textColor,

			':hover': focusAndHoverStyles,
			':focus ': _extends({}, focusAndHoverStyles, focusOnlyStyles),
			':active': activeStyles
		},
		active: activeStyles
	};
};
exports.hollow = function (color) {
	// TODO: better handling of cancel and delete colors
	if (color === 'cancel' || color === 'delete') color = 'danger';

	return buttonHollowVariant(_theme2.default.button[color].bgColor, _theme2.default.button[color].borderColor);
};

// Link Variant
// ----------------
function buttonLinkVariant(textColor, hoverColor) {
	var hoverStyles = {
		color: hoverColor,
		textDecoration: 'underline'
	};
	return {
		base: {
			'background': 'none',
			'border': 0,
			'boxShadow': 'none',
			'color': textColor,
			'fontWeight': 'normal',
			'outline': 'none',

			':hover': hoverStyles,
			':focus': hoverStyles,
			':active': hoverStyles
		},
		active: hoverStyles
	};
};
function buttonLinkDelete() {
	var styles = buttonLinkVariant(_theme2.default.color.gray40, _theme2.default.color.danger);
	var hoverStyles = _extends({}, (0, _css.gradientVertical)((0, _color.lighten)(_theme2.default.color.danger, 10), (0, _color.darken)(_theme2.default.color.danger, 10)), {
		backgroundColor: _theme2.default.color.danger,
		borderColor: (0, _color.darken)(_theme2.default.color.danger, 4) + ' ' + (0, _color.darken)(_theme2.default.color.danger, 8) + ' ' + (0, _color.darken)(_theme2.default.color.danger, 12),
		boxShadow: '0 1px 0 rgba(0,0,0,0.1)',
		color: 'white',
		textDecoration: 'none'
	});
	var activeStyles = {
		backgroundColor: (0, _color.darken)(_theme2.default.color.danger, 4),
		backgroundImage: 'none',
		borderColor: (0, _color.darken)(_theme2.default.color.danger, 12) + ' ' + (0, _color.darken)(_theme2.default.color.danger, 8) + ' ' + (0, _color.darken)(_theme2.default.color.danger, 8),
		boxShadow: 'inset 0 1px 2px rgba(0, 0, 0, 0.1)',
		color: 'white'
	};
	return {
		base: _extends({}, styles.base, {
			':hover': hoverStyles,
			':focus': hoverStyles,
			':active': activeStyles
		}),
		active: activeStyles
	};
}

exports.link = function (color) {
	switch (color) {
		case 'default':
			return buttonLinkVariant(_theme2.default.color.link, _theme2.default.color.linkHover);
		case 'cancel':
			return buttonLinkVariant(_theme2.default.color.gray40, _theme2.default.color.danger);
		case 'delete':
			return buttonLinkDelete();
		default:
			return buttonLinkVariant(_theme2.default.color[color], _theme2.default.color[color]);
	}
};

},{"../../../theme":477,"../../../utils/color":479,"../../../utils/css":481}],342:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Center(_ref) {
	var className = _ref.className,
	    Component = _ref.component,
	    height = _ref.height,
	    style = _ref.style,
	    props = _objectWithoutProperties(_ref, ['className', 'component', 'height', 'style']);

	props.className = (0, _glamor.css)(_styles2.default.center, className);
	props.style = _extends({ height: height }, style);

	return _react2.default.createElement(Component, props);
};
Center.propTypes = {
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
	height: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};
Center.defaultProps = {
	component: 'div',
	height: 'auto'
};

module.exports = Center;

},{"./styles":343,"glamor":undefined,"react":undefined}],343:[function(require,module,exports){
'use strict';

// ==============================
// Center
// ==============================

module.exports = {
	center: {
		display: 'flex',
		alignItems: 'center',
		justifyContent: 'center'
	}
};

},{}],344:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _color = require('../../../utils/color');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var baseColors = {};
['danger', 'info', 'primary', 'success', 'warning'].forEach(function (color) {
	baseColors[color] = {
		background: (0, _color.fade)(_theme2.default.color[color], 10),
		backgroundActive: (0, _color.fade)(_theme2.default.color[color], 20),
		backgroundHover: (0, _color.fade)(_theme2.default.color[color], 15),
		text: _theme2.default.color[color]
	};
});
var invertedColors = {};
['danger', 'info', 'primary', 'success', 'warning'].forEach(function (color) {
	invertedColors[color + '__inverted'] = {
		background: _theme2.default.color[color],
		backgroundActive: (0, _color.lighten)(_theme2.default.color[color], 5),
		backgroundHover: (0, _color.lighten)(_theme2.default.color[color], 15),
		text: 'white'
	};
});

module.exports = _extends({
	default: {
		background: _theme2.default.color.gray10,
		backgroundActive: _theme2.default.color.gray20,
		backgroundHover: _theme2.default.color.gray15,
		text: _theme2.default.color.gray60
	}
}, baseColors, {

	// inverted
	default__inverted: {
		background: _theme2.default.color.gray60,
		backgroundActive: (0, _color.lighten)(_theme2.default.color.gray60, 5),
		backgroundHover: (0, _color.lighten)(_theme2.default.color.gray60, 15),
		text: 'white'
	}
}, invertedColors);

},{"../../../theme":477,"../../../utils/color":479}],345:[function(require,module,exports){
'use strict';

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Chip(_ref) {
	var className = _ref.className,
	    children = _ref.children,
	    color = _ref.color,
	    inverted = _ref.inverted,
	    label = _ref.label,
	    onClear = _ref.onClear,
	    onClick = _ref.onClick,
	    props = _objectWithoutProperties(_ref, ['className', 'children', 'color', 'inverted', 'label', 'onClear', 'onClick']);

	props.className = (0, _glamor.css)(_styles2.default.chip, className);
	var labelClassName = (0, _glamor.css)(_styles2.default.button, _styles2.default.label, _styles2.default['button__' + color + (inverted ? '__inverted' : '')]);
	var clearClassName = (0, _glamor.css)(_styles2.default.button, _styles2.default.clear, _styles2.default['button__' + color + (inverted ? '__inverted' : '')]);

	return _react2.default.createElement(
		'div',
		props,
		_react2.default.createElement(
			'button',
			{ type: 'button', onClick: onClick, className: labelClassName },
			label,
			children
		),
		!!onClear && _react2.default.createElement(
			'button',
			{ type: 'button', onClick: onClear, className: clearClassName },
			'\xD7'
		)
	);
};

Chip.propTypes = {
	color: _react.PropTypes.oneOf(Object.keys(_colors2.default)).isRequired,
	inverted: _react.PropTypes.bool,
	label: _react2.default.PropTypes.string.isRequired,
	onClear: _react2.default.PropTypes.func,
	onClick: _react2.default.PropTypes.func
};
Chip.defaultProps = {
	color: 'default'
};

module.exports = Chip;

},{"./colors":344,"./styles":346,"glamor":undefined,"react":undefined}],346:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Alert
// ==============================

/* eslint quote-props: ["error", "as-needed"] */

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _css = require('../../../utils/css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Prepare variants
var colorVariants = {};
Object.keys(_colors2.default).forEach(function (color) {
	var hoverStyles = {
		backgroundColor: _colors2.default[color].backgroundHover
	};

	colorVariants['button__' + color] = {
		backgroundColor: _colors2.default[color].background,
		color: _colors2.default[color].text,

		':hover': hoverStyles,
		':focus': hoverStyles,
		':active': {
			backgroundColor: _colors2.default[color].backgroundActive
		}
	};
});

module.exports = _extends({
	chip: {
		display: 'inline-block',
		fontSize: _theme2.default.font.size.small,
		fontWeight: 500,
		marginRight: '0.5em',
		overflow: 'hidden',
		lineHeight: '2.2em'
	},

	// tagnames
	button: {
		appearance: 'none',
		background: 'none',
		border: 'none',
		cursor: 'pointer',
		display: 'block',
		float: 'left',
		padding: '0 .9em',
		outline: 'none',

		// make pills - exaggerate the padding toward the radii so it looks even
		':first-child': _extends({}, (0, _css.borderLeftRadius)('3em'), {
			paddingLeft: '1.1em'
		}),
		':last-child': _extends({}, (0, _css.borderRightRadius)('3em'), {
			paddingRight: '1.1em'
		})
	},

	// provide separation between the label and clear buttons
	// floating stops the margins from collapsing into eaching

	label: { marginRight: 1 },
	clear: { marginLeft: 1 }

}, colorVariants);

},{"../../../theme":477,"../../../utils/css":481,"./colors":344}],347:[function(require,module,exports){
'use strict';

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _sizes = require('./sizes');

var _sizes2 = _interopRequireDefault(_sizes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Container(_ref) {
	var className = _ref.className,
	    clearFloatingChildren = _ref.clearFloatingChildren,
	    Component = _ref.component,
	    width = _ref.width,
	    props = _objectWithoutProperties(_ref, ['className', 'clearFloatingChildren', 'component', 'width']);

	props.className = (0, _glamor.css)(_styles2.default.container, _styles2.default[width], clearFloatingChildren ? _styles2.default.clearfix : null);
	props.className = props.className + ' ' + className;
	return _react2.default.createElement(Component, props);
};

Container.propTypes = {
	clearFloatingChildren: _react.PropTypes.bool,
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]).isRequired,
	width: _react.PropTypes.oneOf(Object.keys(_sizes2.default)).isRequired
};
Container.defaultProps = {
	component: 'div',
	width: 'large'
};

module.exports = Container;

},{"./sizes":348,"./styles":349,"glamor":undefined,"react":undefined}],348:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	small: _theme2.default.container.size.small,
	medium: _theme2.default.container.size.medium,
	large: _theme2.default.container.size.large
};

},{"../../../theme":477}],349:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Container
// ==============================

/* eslint quote-props: ["error", "as-needed"] */

var _sizes = require('./sizes');

var _sizes2 = _interopRequireDefault(_sizes);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Prepare sizes
var sizeVariants = {};
Object.keys(_sizes2.default).forEach(function (size) {
	sizeVariants[size] = {
		maxWidth: _sizes2.default[size]
	};
});

/*
	Micro clearfix hack
	1.	The space content is one way to avoid an Opera bug when the
			contenteditable attribute is included anywhere else in the document.
			Otherwise it causes space to appear at the top and bottom of elements
			that are clearfixed.
	2.	The use of `table` rather than `block` is only necessary if using
			`:before` to contain the top-margins of child elements.
*/
var clearfixStyles = {
	clear: 'both',
	content: '" "', // 1
	display: 'table' // 2
};

module.exports = _extends({
	container: {
		marginLeft: 'auto',
		marginRight: 'auto',
		paddingLeft: _theme2.default.container.gutter,
		paddingRight: _theme2.default.container.gutter
	},

	// clear floating children
	clearfix: {
		':before': clearfixStyles,
		':after': clearfixStyles
	}

}, sizeVariants);

},{"../../../theme":477,"./sizes":348}],350:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /* eslint quote-props: ["error", "as-needed"] */

function DropdownButton(_ref) {
	var children = _ref.children,
	    props = _objectWithoutProperties(_ref, ['children']);

	return _react2.default.createElement(
		_Button2.default,
		props,
		children,
		_react2.default.createElement('span', { className: (0, _glamor.css)(classes.arrow) })
	);
};

// NOTE
// 1: take advantage of `currentColor` by leaving border top color undefined
// 2: even though the arrow is vertically centered, visually it appears too low
//    because of lowercase characters beside it
var classes = {
	arrow: {
		borderLeft: '0.3em solid transparent',
		borderRight: '0.3em solid transparent',
		borderTop: '0.3em solid', // 1
		display: 'inline-block',
		height: 0,
		marginTop: '-0.125em', // 2
		verticalAlign: 'middle',
		width: 0,

		// add spacing
		':first-child': {
			marginRight: '0.5em'
		},
		':last-child': {
			marginLeft: '0.5em'
		}
	}
};

module.exports = DropdownButton;

},{"../Button":340,"glamor":undefined,"react":undefined}],351:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _FormLabel = require('../FormLabel');

var _FormLabel2 = _interopRequireDefault(_FormLabel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FormField = function (_Component) {
	_inherits(FormField, _Component);

	function FormField() {
		_classCallCheck(this, FormField);

		var _this = _possibleConstructorReturn(this, (FormField.__proto__ || Object.getPrototypeOf(FormField)).call(this));

		_this.formFieldId = generateId();
		return _this;
	}

	_createClass(FormField, [{
		key: 'getChildContext',
		value: function getChildContext() {
			return {
				formFieldId: this.formFieldId
			};
		}
	}, {
		key: 'render',
		value: function render() {
			var _context = this.context,
			    _context$formLayout = _context.formLayout,
			    formLayout = _context$formLayout === undefined ? 'basic' : _context$formLayout,
			    labelWidth = _context.labelWidth;

			var _props = this.props,
			    aphroditeStyles = _props.aphroditeStyles,
			    children = _props.children,
			    className = _props.className,
			    cropLabel = _props.cropLabel,
			    htmlFor = _props.htmlFor,
			    label = _props.label,
			    offsetAbsentLabel = _props.offsetAbsentLabel,
			    props = _objectWithoutProperties(_props, ['aphroditeStyles', 'children', 'className', 'cropLabel', 'htmlFor', 'label', 'offsetAbsentLabel']);

			props.className = (0, _glamor.css)(_styles2.default.FormField, _styles2.default['FormField--form-layout-' + formLayout], offsetAbsentLabel ? _styles2.default['FormField--offset-absent-label'] : null, aphroditeStyles);
			if (className) {
				props.className += ' ' + className;
			}
			if (offsetAbsentLabel && labelWidth) {
				props.style = _extends({
					paddingLeft: labelWidth
				}, props.style);
			}

			// elements
			var componentLabel = label ? _react2.default.createElement(
				_FormLabel2.default,
				{ htmlFor: htmlFor, cropText: cropLabel },
				label
			) : null;

			return _react2.default.createElement(
				'div',
				_extends({}, props, { htmlFor: htmlFor }),
				componentLabel,
				children
			);
		}
	}]);

	return FormField;
}(_react.Component);

;

var stylesShape = {
	_definition: _react.PropTypes.object,
	_name: _react.PropTypes.string
};

FormField.contextTypes = {
	formLayout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline']),
	labelWidth: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};
FormField.childContextTypes = {
	formFieldId: _react.PropTypes.string
};
FormField.propTypes = {
	aphroditeStyles: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.shape(stylesShape)), _react.PropTypes.shape(stylesShape)]),
	children: _react.PropTypes.node,
	cropLabel: _react.PropTypes.bool,
	htmlFor: _react2.default.PropTypes.string,
	label: _react2.default.PropTypes.string,
	offsetAbsentLabel: _react2.default.PropTypes.bool
};

function generateId() {
	return Math.random().toString(36).substr(2, 9);
};

module.exports = FormField;

},{"../FormLabel":356,"./styles":352,"glamor":undefined,"react":undefined}],352:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } // ==============================
// Form Field
// ==============================

module.exports = {
	'FormField': {
		marginBottom: '1em',
		position: 'relative'
	},

	// when inside a horizontal form

	'FormField--form-layout-horizontal': _defineProperty({}, '@media (min-width: ' + _theme2.default.breakpoint.tabletLandscapeMin + ')', {
		display: 'table',
		tableLayout: 'fixed',
		width: '100%'
	}),

	// inside horizontal form
	// typically for use with submit button inside
	'FormField--offset-absent-label': {
		paddingLeft: _theme2.default.form.label.width
	},

	// when inside an inline form

	'FormField--form-layout-inline': {
		'display': 'inline-block',
		'paddingLeft': '0.25em',
		'paddingRight': '0.25em',
		'verticalAlign': 'top',

		':first-child': { paddingLeft: 0 },
		':last-child': { paddingRight: 0 }
	}
};

},{"../../../theme":477}],353:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _concatClassnames = require('../../../utils/concatClassnames');

var _concatClassnames2 = _interopRequireDefault(_concatClassnames);

var _noedit = require('./noedit');

var _noedit2 = _interopRequireDefault(_noedit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// NOTE must NOT be functional component to allow `refs`

var FormInput = function (_Component) {
	_inherits(FormInput, _Component);

	function FormInput() {
		_classCallCheck(this, FormInput);

		return _possibleConstructorReturn(this, (FormInput.__proto__ || Object.getPrototypeOf(FormInput)).apply(this, arguments));
	}

	_createClass(FormInput, [{
		key: 'blur',
		value: function blur() {
			this.target.blur();
		}
	}, {
		key: 'focus',
		value: function focus() {
			this.target.focus();
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    aphroditeStyles = _props.aphroditeStyles,
			    className = _props.className,
			    disabled = _props.disabled,
			    id = _props.id,
			    multiline = _props.multiline,
			    noedit = _props.noedit,
			    size = _props.size,
			    props = _objectWithoutProperties(_props, ['aphroditeStyles', 'className', 'disabled', 'id', 'multiline', 'noedit', 'size']);

			// NOTE return a different component for `noedit`


			if (noedit) return _react2.default.createElement(_noedit2.default, this.props);

			var _context = this.context,
			    formFieldId = _context.formFieldId,
			    formLayout = _context.formLayout;


			props.id = id || formFieldId;
			props.className = _glamor.css.apply(undefined, [_styles2.default.FormInput, _styles2.default['FormInput__size--' + size], disabled ? _styles2.default['FormInput--disabled'] : null, formLayout ? _styles2.default['FormInput--form-layout-' + formLayout] : null].concat(_toConsumableArray((0, _concatClassnames2.default)(aphroditeStyles))));
			if (className) {
				props.className += ' ' + className;
			}

			var setRef = function setRef(n) {
				return _this2.target = n;
			};
			var Tag = multiline ? 'textarea' : 'input';

			return _react2.default.createElement(Tag, _extends({
				ref: setRef,
				disabled: props.disabled
			}, props));
		}
	}]);

	return FormInput;
}(_react.Component);

;

var stylesShape = {
	_definition: _react.PropTypes.object,
	_name: _react.PropTypes.string
};

FormInput.propTypes = {
	aphroditeStyles: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.shape(stylesShape)), _react.PropTypes.shape(stylesShape)]),
	multiline: _react.PropTypes.bool,
	size: _react.PropTypes.oneOf(['default', 'small', 'large']),
	type: _react.PropTypes.string
};
FormInput.defaultProps = {
	size: 'default',
	type: 'text'
};
FormInput.contextTypes = {
	formLayout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline']),
	formFieldId: _react.PropTypes.string
};

module.exports = FormInput;

},{"../../../utils/concatClassnames":480,"./noedit":354,"./styles":355,"glamor":undefined,"react":undefined}],354:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _color = require('../../../utils/color');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/* eslint quote-props: ["error", "as-needed"] */

function FormInputNoedit(_ref) {
	var className = _ref.className,
	    Component = _ref.component,
	    cropText = _ref.cropText,
	    multiline = _ref.multiline,
	    noedit = _ref.noedit,
	    type = _ref.type,
	    props = _objectWithoutProperties(_ref, ['className', 'component', 'cropText', 'multiline', 'noedit', 'type']);

	props.className = (0, _glamor.css)(classes.noedit, cropText ? classes.cropText : null, multiline ? classes.multiline : null, props.href || props.onClick ? classes.anchor : null, className);

	return _react2.default.createElement(Component, props);
};

FormInputNoedit.propTypes = {
	component: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
	cropText: _react.PropTypes.bool
};
FormInputNoedit.defaultProps = {
	component: 'span'
};

var anchorHoverAndFocusStyles = {
	backgroundColor: (0, _color.fade)(_theme2.default.color.link, 10),
	borderColor: (0, _color.fade)(_theme2.default.color.link, 10),
	color: _theme2.default.color.link,
	outline: 'none',
	textDecoration: 'underline'
};

var classes = {
	noedit: {
		appearance: 'none',
		backgroundColor: _theme2.default.input.background.noedit,
		backgroundImage: 'none',
		borderColor: _theme2.default.input.border.color.noedit,
		borderRadius: _theme2.default.input.border.radius,
		borderStyle: 'solid',
		borderWidth: _theme2.default.input.border.width,
		color: _theme2.default.color.gray80,
		display: 'inline-block',
		height: _theme2.default.input.height,
		lineHeight: _theme2.default.input.lineHeight,
		padding: '0 ' + _theme2.default.input.paddingHorizontal,
		transition: 'border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s',
		verticalAlign: 'middle',

		// prevent empty inputs from collapsing by adding content
		':empty:before': {
			color: _theme2.default.color.gray40,
			content: '"(no value)"'
		}
	},

	multiline: {
		display: 'block',
		height: 'auto',
		lineHeight: '1.4',
		paddingBottom: '0.6em',
		paddingTop: '0.6em'
	},

	// indicate clickability when using an anchor
	anchor: {
		backgroundColor: (0, _color.fade)(_theme2.default.color.link, 5),
		borderColor: (0, _color.fade)(_theme2.default.color.link, 10),
		color: _theme2.default.color.link,
		marginRight: 5,
		minWidth: 0,
		textDecoration: 'none',

		':hover': anchorHoverAndFocusStyles,
		':focus': anchorHoverAndFocusStyles
	}
};

module.exports = FormInputNoedit;

},{"../../../theme":477,"../../../utils/color":479,"glamor":undefined,"react":undefined}],355:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	'FormInput': {
		'appearance': 'none',
		'backgroundColor': _theme2.default.input.background.default,
		'backgroundImage': 'none',
		'borderColor': _theme2.default.input.border.color.default,
		'borderRadius': _theme2.default.input.border.radius,
		'borderStyle': 'solid',
		'borderWidth': _theme2.default.input.border.width,
		'boxShadow': _theme2.default.input.boxShadow,
		'color': 'inherit', // FIXME
		'display': 'block',
		'height': _theme2.default.input.height,
		'lineHeight': _theme2.default.input.lineHeight,
		'padding': '0 ' + _theme2.default.input.paddingHorizontal,
		'transition': 'border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s',
		'width': '100%',

		':hover': {
			borderColor: _theme2.default.input.border.color.hover,
			outline: 0
		},
		':focus': {
			borderColor: _theme2.default.input.border.color.focus,
			boxShadow: _theme2.default.input.boxShadowFocus,
			outline: 0
		}
	},
	'FormInput--disabled': {
		backgroundColor: _theme2.default.input.background.disabled,
		pointerEvents: 'none'
	},

	// sizes
	'FormInput__size--small': {
		fontSize: _theme2.default.font.size.small
	},
	'FormInput__size--large': {
		fontSize: _theme2.default.font.size.large
	}
}; // ==============================
// Form Input
// ==============================

},{"../../../theme":477}],356:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function FormLabel(_ref, _ref2) {
	var formFieldId = _ref2.formFieldId,
	    formLayout = _ref2.formLayout,
	    labelWidth = _ref2.labelWidth;

	var aphroditeStyles = _ref.aphroditeStyles,
	    className = _ref.className,
	    Component = _ref.component,
	    cropText = _ref.cropText,
	    htmlFor = _ref.htmlFor,
	    props = _objectWithoutProperties(_ref, ['aphroditeStyles', 'className', 'component', 'cropText', 'htmlFor']);

	props.htmlFor = htmlFor || formFieldId;
	props.className = (0, _glamor.css)(_styles2.default.FormLabel, formLayout ? _styles2.default['FormLabel--form-layout-' + formLayout] : null, cropText ? _styles2.default['FormLabel--crop-text'] : null, aphroditeStyles);
	if (className) {
		props.className += ' ' + className;
	}
	if (labelWidth) {
		props.style = _extends({
			width: labelWidth
		}, props.style);
	}

	return _react2.default.createElement(Component, props);
};

var stylesShape = {
	_definition: _react.PropTypes.object,
	_name: _react.PropTypes.string
};

FormLabel.propTypes = {
	aphroditeStyles: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.shape(stylesShape)), _react.PropTypes.shape(stylesShape)]),
	component: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
	cropText: _react.PropTypes.bool
};
FormLabel.defaultProps = {
	component: 'label'
};
FormLabel.contextTypes = {
	formLayout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline']),
	formFieldId: _react.PropTypes.string,
	labelWidth: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};

module.exports = FormLabel;

},{"./styles":357,"glamor":undefined,"react":undefined}],357:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } // ==============================
// Form Label
// ==============================

module.exports = {
	'FormLabel': {
		color: _theme2.default.form.label.color,
		fontSize: _theme2.default.form.label.fontSize,
		fontWeight: _theme2.default.form.label.fontWeight,
		display: 'inline-block',
		marginBottom: '0.5em'
	},

	// when inside a horizontal form

	'FormLabel--form-layout-horizontal': _defineProperty({}, '@media (min-width: ' + _theme2.default.breakpoint.tabletLandscapeMin + ')', {
		display: 'table-cell',
		lineHeight: _theme2.default.component.lineHeight, // fix
		marginBottom: 0,
		paddingRight: 5,
		verticalAlign: 'top',
		width: _theme2.default.form.label.width
	}),

	// crop long text

	'FormLabel--crop-text': {
		overflow: 'hidden',
		textOverflow: 'ellipsis',
		whiteSpace: 'nowrap'
	}
};

},{"../../../theme":477}],358:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function FormNote(_ref) {
	var className = _ref.className,
	    children = _ref.children,
	    Component = _ref.component,
	    html = _ref.html,
	    props = _objectWithoutProperties(_ref, ['className', 'children', 'component', 'html']);

	props.className = (0, _glamor.css)(_styles2.default.note, className);

	// Property Violation
	if (children && html) {
		console.error('Warning: FormNote cannot render `children` and `html`. You must provide one or the other.');
	}

	return html ? _react2.default.createElement(Component, _extends({}, props, { dangerouslySetInnerHTML: { __html: html } })) : _react2.default.createElement(
		Component,
		props,
		children
	);
};
FormNote.propTypes = {
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
	html: _react.PropTypes.string
};
FormNote.defaultProps = {
	component: 'div'
};

module.exports = FormNote;

},{"./styles":359,"glamor":undefined,"react":undefined}],359:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	note: {
		color: _theme2.default.form.note.color,
		fontSize: _theme2.default.form.note.fontSize,
		marginTop: _theme2.default.spacing.small
	}
}; // ==============================
// Form Note
// ==============================

},{"../../../theme":477}],360:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FormSelect = function (_Component) {
	_inherits(FormSelect, _Component);

	function FormSelect() {
		_classCallCheck(this, FormSelect);

		return _possibleConstructorReturn(this, (FormSelect.__proto__ || Object.getPrototypeOf(FormSelect)).apply(this, arguments));
	}

	_createClass(FormSelect, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    children = _props.children,
			    id = _props.id,
			    options = _props.options,
			    props = _objectWithoutProperties(_props, ['children', 'id', 'options']);

			var formFieldId = this.context.formFieldId;


			props.className = (0, _glamor.css)(_styles2.default.select, props.disabled ? _styles2.default['select--disabled'] : null);
			props.id = id || formFieldId;

			// Property Violation
			if (options && children) {
				console.error('Warning: FormSelect cannot render `children` and `options`. You must provide one or the other.');
			}

			return _react2.default.createElement(
				'div',
				{ className: (0, _glamor.css)(_styles2.default.container) },
				options ? _react2.default.createElement(
					'select',
					props,
					options.map(function (opt) {
						return _react2.default.createElement(
							'option',
							{ key: opt.value, value: opt.value },
							opt.label
						);
					})
				) : _react2.default.createElement(
					'select',
					props,
					children
				),
				_react2.default.createElement(
					'span',
					{ className: (0, _glamor.css)(_styles2.default.arrows, props.disabled ? _styles2.default['arrows--disabled'] : null) },
					_react2.default.createElement('span', { className: (0, _glamor.css)(_styles2.default.arrow, _styles2.default.arrowTop) }),
					_react2.default.createElement('span', { className: (0, _glamor.css)(_styles2.default.arrow, _styles2.default.arrowBottom) })
				)
			);
		}
	}]);

	return FormSelect;
}(_react.Component);

;

FormSelect.contextTypes = {
	formFieldId: _react.PropTypes.string
};
FormSelect.propTypes = {
	onChange: _react.PropTypes.func.isRequired,
	options: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
		label: _react2.default.PropTypes.string,
		value: _react2.default.PropTypes.string
	})),
	value: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};

module.exports = FormSelect;

},{"./styles":361,"glamor":undefined,"react":undefined}],361:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _color = require('../../../utils/color');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// ==============================
// Form Select
// ==============================

/* eslint quote-props: ["error", "as-needed"] */

module.exports = {
	container: {
		position: 'relative'
	},

	// select node
	select: {
		appearance: 'none',
		backgroundColor: _theme2.default.input.background.default,
		backgroundImage: 'none',
		borderColor: _theme2.default.input.border.color.default,
		borderBottomColor: (0, _color.darken)(_theme2.default.input.border.color.default, 4),
		borderTopColor: (0, _color.lighten)(_theme2.default.input.border.color.default, 4),
		borderRadius: _theme2.default.input.border.radius,
		borderStyle: 'solid',
		borderWidth: _theme2.default.input.border.width,
		boxShadow: _theme2.default.select.boxShadow,
		color: 'inherit', // FIXME
		display: 'block',
		height: _theme2.default.input.height,
		lineHeight: _theme2.default.input.lineHeight,
		padding: '0 ' + _theme2.default.input.paddingHorizontal,
		transition: 'border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s',
		width: '100%',

		':hover': {
			borderColor: _theme2.default.input.border.color.hover,
			outline: 0
		},
		':focus': {
			borderColor: _theme2.default.input.border.color.focus,
			boxShadow: _theme2.default.input.boxShadowFocus,
			outline: 0
		}
	},
	'select--disabled': {
		backgroundColor: _theme2.default.input.background.disabled,
		pointerEvents: 'none'
	},

	// arrows
	arrows: {
		alignItems: 'center',
		display: 'flex',
		flexDirection: 'column',
		height: _theme2.default.input.height,
		justifyContent: 'center',
		pointerEvents: 'none',
		position: 'absolute',
		right: 0,
		top: 0,
		width: _theme2.default.input.height
	},
	arrow: {
		borderLeft: '0.3em solid transparent',
		borderRight: '0.3em solid transparent',
		display: 'inline-block',
		height: 0,
		verticalAlign: 'middle',
		width: 0,
		zIndex: 1
	},
	arrowTop: {
		borderBottom: '0.3em solid',
		marginBottom: '0.1em'
	},
	arrowBottom: {
		borderTop: '0.3em solid',
		marginTop: '0.1em'
	}
};

},{"../../../theme":477,"../../../utils/color":479}],362:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Form = function (_Component) {
	_inherits(Form, _Component);

	function Form() {
		_classCallCheck(this, Form);

		return _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).apply(this, arguments));
	}

	_createClass(Form, [{
		key: 'getChildContext',
		value: function getChildContext() {
			return {
				formLayout: this.props.layout,
				labelWidth: this.props.labelWidth
			};
		}
	}, {
		key: 'render',
		value: function render() {
			// NOTE `labelWidth` is declared to remove it from `props`, though never used
			var _props = this.props,
			    className = _props.className,
			    Component = _props.component,
			    labelWidth = _props.labelWidth,
			    layout = _props.layout,
			    props = _objectWithoutProperties(_props, ['className', 'component', 'labelWidth', 'layout']);

			props.className = (0, _glamor.css)(_styles2.default.Form, _styles2.default['Form__' + layout], className);

			return _react2.default.createElement(Component, props);
		}
	}]);

	return Form;
}(_react.Component);

;

Form.childContextTypes = {
	formLayout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline']),
	labelWidth: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};
Form.propTypes = {
	children: _react.PropTypes.node.isRequired,
	component: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
	layout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline'])
};
Form.defaultProps = {
	component: 'form',
	layout: 'basic'
};

module.exports = Form;

},{"./styles":363,"glamor":undefined,"react":undefined}],363:[function(require,module,exports){
"use strict";

// ==============================
// Form
// ==============================

module.exports = {
	Form: {}
};

},{}],364:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _Glyph = require('../Glyph');

var _Glyph2 = _interopRequireDefault(_Glyph);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /* eslint quote-props: ["error", "as-needed"] */

function GlyphButton(_ref) {
	var children = _ref.children,
	    glyph = _ref.glyph,
	    glyphColor = _ref.glyphColor,
	    glyphSize = _ref.glyphSize,
	    glyphStyle = _ref.glyphStyle,
	    position = _ref.position,
	    props = _objectWithoutProperties(_ref, ['children', 'glyph', 'glyphColor', 'glyphSize', 'glyphStyle', 'position']);

	var isDefault = position === 'default';
	var isLeft = position === 'left';
	var isRight = position === 'right';

	var offset = {};
	if (isLeft) offset.marginRight = '0.5em';
	if (isRight) offset.marginLeft = '0.5em';

	var glyphStyles = _extends({}, offset, glyphStyle);

	var icon = _react2.default.createElement(_Glyph2.default, {
		aphroditeStyles: classes.glyph,
		color: glyphColor,
		name: glyph,
		size: glyphSize,
		style: glyphStyles
	});

	return _react2.default.createElement(
		_Button2.default,
		props,
		(isDefault || isLeft) && icon,
		children,
		isRight && icon
	);
};

// For props "glyph", "glyphColor", and "glyphSize":
// prop type validation will occur within the Glyph component, no need to
// duplicate, just pass it through.
GlyphButton.propTypes = {
	glyph: _react.PropTypes.string,
	glyphColor: _react.PropTypes.string,
	glyphSize: _react.PropTypes.string,
	glyphStyle: _react.PropTypes.object,
	position: _react.PropTypes.oneOf(['default', 'left', 'right'])
};
GlyphButton.defaultProps = {
	glyphStyle: {},
	position: 'default' // no margin, assumes no children
};

var classes = {
	glyph: {
		display: 'inline-block',
		marginTop: '-0.125em', // fix icon alignment
		verticalAlign: 'middle'
	}
};

module.exports = GlyphButton;

},{"../Button":340,"../Glyph":367,"react":undefined}],365:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FormField = require('../FormField');

var _FormField2 = _interopRequireDefault(_FormField);

var _Glyph = require('../Glyph');

var _Glyph2 = _interopRequireDefault(_Glyph);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /* eslint quote-props: ["error", "as-needed"] */

function GlyphField(_ref) {
	var children = _ref.children,
	    glyph = _ref.glyph,
	    glyphColor = _ref.glyphColor,
	    glyphSize = _ref.glyphSize,
	    position = _ref.position,
	    props = _objectWithoutProperties(_ref, ['children', 'glyph', 'glyphColor', 'glyphSize', 'position']);

	var isLeft = position === 'left';
	var isRight = position === 'right';

	var glyphStyles = {};
	if (isLeft) glyphStyles.marginRight = '0.5em';
	if (isRight) glyphStyles.marginLeft = '0.5em';

	var icon = _react2.default.createElement(_Glyph2.default, {
		aphroditeStyles: classes.glyph,
		color: glyphColor,
		name: glyph,
		size: glyphSize,
		style: glyphStyles
	});

	return _react2.default.createElement(
		_FormField2.default,
		_extends({ aphroditeStyles: classes.wrapper }, props),
		isLeft && icon,
		children,
		isRight && icon
	);
};

// For props "glyph", "glyphColor", and "glyphSize":
// prop type validation will occur within the Glyph component, no need to
// duplicate, just pass it through.
GlyphField.propTypes = {
	glyph: _react.PropTypes.string,
	glyphColor: _react.PropTypes.string,
	glyphSize: _react.PropTypes.string,
	position: _react.PropTypes.oneOf(['left', 'right'])
};
GlyphField.defaultProps = {
	position: 'left'
};

var classes = {
	wrapper: {
		alignItems: 'center',
		display: 'flex'
	},
	glyph: {
		display: 'inline-block',
		marginTop: '-0.125em', // fix icon alignment
		verticalAlign: 'middle'
	}
};

module.exports = GlyphField;

},{"../FormField":351,"../Glyph":367,"react":undefined}],366:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	danger: _theme2.default.glyph.color.danger,
	inherit: _theme2.default.glyph.color.inherit,
	inverted: _theme2.default.glyph.color.inverted,
	primary: _theme2.default.glyph.color.primary,
	success: _theme2.default.glyph.color.success,
	warning: _theme2.default.glyph.color.warning
};

},{"../../../theme":477}],367:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _octicons = require('./octicons');

var _octicons2 = _interopRequireDefault(_octicons);

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _sizes = require('./sizes');

var _sizes2 = _interopRequireDefault(_sizes);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// FIXME static octicon classes leaning on Elemental to avoid duplicate
// font and CSS; inflating the project size

function Glyph(_ref) {
	var aphroditeStyles = _ref.aphroditeStyles,
	    className = _ref.className,
	    color = _ref.color,
	    Component = _ref.component,
	    name = _ref.name,
	    size = _ref.size,
	    style = _ref.style,
	    props = _objectWithoutProperties(_ref, ['aphroditeStyles', 'className', 'color', 'component', 'name', 'size', 'style']);

	var colorIsValidType = Object.keys(_colors2.default).includes(color);
	props.className = (0, _glamor.css)(_styles2.default.glyph, colorIsValidType && _styles2.default['color__' + color], _styles2.default['size__' + size], aphroditeStyles) + (' ' + _octicons2.default[name]);
	if (className) {
		props.className += ' ' + className;
	}

	// support random color strings
	props.style = _extends({
		color: !colorIsValidType ? color : null
	}, style);

	return _react2.default.createElement(Component, props);
};

Glyph.propTypes = {
	aphroditeStyles: _react.PropTypes.shape({
		_definition: _react.PropTypes.object,
		_name: _react.PropTypes.string
	}),
	color: _react.PropTypes.oneOfType([_react.PropTypes.oneOf(Object.keys(_colors2.default)), _react.PropTypes.string] // support random color strings
	),
	name: _react.PropTypes.oneOf(Object.keys(_octicons2.default)).isRequired,
	size: _react.PropTypes.oneOf(Object.keys(_sizes2.default))
};
Glyph.defaultProps = {
	component: 'i',
	color: 'inherit',
	size: 'small'
};

module.exports = Glyph;

},{"./colors":366,"./octicons":368,"./sizes":369,"./styles":370,"glamor":undefined,"react":undefined}],368:[function(require,module,exports){
'use strict';

/* eslint quote-props: ["error", "as-needed"] */

module.exports = {
	alert: 'octicon octicon-alert',
	'arrow-down': 'octicon octicon-arrow-down',
	'arrow-left': 'octicon octicon-arrow-left',
	'arrow-right': 'octicon octicon-arrow-right',
	'arrow-small-down': 'octicon octicon-arrow-small-down',
	'arrow-small-left': 'octicon octicon-arrow-small-left',
	'arrow-small-right': 'octicon octicon-arrow-small-right',
	'arrow-small-up': 'octicon octicon-arrow-small-up',
	'arrow-up': 'octicon octicon-arrow-up',
	microscope: 'octicon octicon-microscope',
	beaker: 'octicon octicon-beaker',
	bell: 'octicon octicon-bell',
	book: 'octicon octicon-book',
	bookmark: 'octicon octicon-bookmark',
	briefcase: 'octicon octicon-briefcase',
	broadcast: 'octicon octicon-broadcast',
	browser: 'octicon octicon-browser',
	bug: 'octicon octicon-bug',
	calendar: 'octicon octicon-calendar',
	check: 'octicon octicon-check',
	checklist: 'octicon octicon-checklist',
	'chevron-down': 'octicon octicon-chevron-down',
	'chevron-left': 'octicon octicon-chevron-left',
	'chevron-right': 'octicon octicon-chevron-right',
	'chevron-up': 'octicon octicon-chevron-up',
	'circle-slash': 'octicon octicon-circle-slash',
	'circuit-board': 'octicon octicon-circuit-board',
	clippy: 'octicon octicon-clippy',
	clock: 'octicon octicon-clock',
	'cloud-download': 'octicon octicon-cloud-download',
	'cloud-upload': 'octicon octicon-cloud-upload',
	code: 'octicon octicon-code',
	'color-mode': 'octicon octicon-color-mode',
	'comment-add': 'octicon octicon-comment-add',
	comment: 'octicon octicon-comment',
	'comment-discussion': 'octicon octicon-comment-discussion',
	'credit-card': 'octicon octicon-credit-card',
	dash: 'octicon octicon-dash',
	dashboard: 'octicon octicon-dashboard',
	database: 'octicon octicon-database',
	clone: 'octicon octicon-clone',
	'desktop-download': 'octicon octicon-desktop-download',
	'device-camera': 'octicon octicon-device-camera',
	'device-camera-video': 'octicon octicon-device-camera-video',
	'device-desktop': 'octicon octicon-device-desktop',
	'device-mobile': 'octicon octicon-device-mobile',
	diff: 'octicon octicon-diff',
	'diff-added': 'octicon octicon-diff-added',
	'diff-ignored': 'octicon octicon-diff-ignored',
	'diff-modified': 'octicon octicon-diff-modified',
	'diff-removed': 'octicon octicon-diff-removed',
	'diff-renamed': 'octicon octicon-diff-renamed',
	ellipsis: 'octicon octicon-ellipsis',
	'eye-unwatch': 'octicon octicon-eye-unwatch',
	'eye-watch': 'octicon octicon-eye-watch',
	eye: 'octicon octicon-eye',
	'file-binary': 'octicon octicon-file-binary',
	'file-code': 'octicon octicon-file-code',
	'file-directory': 'octicon octicon-file-directory',
	'file-media': 'octicon octicon-file-media',
	'file-pdf': 'octicon octicon-file-pdf',
	'file-submodule': 'octicon octicon-file-submodule',
	'file-symlink-directory': 'octicon octicon-file-symlink-directory',
	'file-symlink-file': 'octicon octicon-file-symlink-file',
	'file-text': 'octicon octicon-file-text',
	'file-zip': 'octicon octicon-file-zip',
	flame: 'octicon octicon-flame',
	fold: 'octicon octicon-fold',
	gear: 'octicon octicon-gear',
	gift: 'octicon octicon-gift',
	gist: 'octicon octicon-gist',
	'gist-secret': 'octicon octicon-gist-secret',
	'git-branch-create': 'octicon octicon-git-branch-create',
	'git-branch-delete': 'octicon octicon-git-branch-delete',
	'git-branch': 'octicon octicon-git-branch',
	'git-commit': 'octicon octicon-git-commit',
	'git-compare': 'octicon octicon-git-compare',
	'git-merge': 'octicon octicon-git-merge',
	'git-pull-request-abandoned': 'octicon octicon-git-pull-request-abandoned',
	'git-pull-request': 'octicon octicon-git-pull-request',
	globe: 'octicon octicon-globe',
	graph: 'octicon octicon-graph',
	heart: 'octicon octicon-heart',
	history: 'octicon octicon-history',
	home: 'octicon octicon-home',
	'horizontal-rule': 'octicon octicon-horizontal-rule',
	hubot: 'octicon octicon-hubot',
	inbox: 'octicon octicon-inbox',
	info: 'octicon octicon-info',
	'issue-closed': 'octicon octicon-issue-closed',
	'issue-opened': 'octicon octicon-issue-opened',
	'issue-reopened': 'octicon octicon-issue-reopened',
	jersey: 'octicon octicon-jersey',
	key: 'octicon octicon-key',
	keyboard: 'octicon octicon-keyboard',
	law: 'octicon octicon-law',
	'light-bulb': 'octicon octicon-light-bulb',
	link: 'octicon octicon-link',
	'link-external': 'octicon octicon-link-external',
	'list-ordered': 'octicon octicon-list-ordered',
	'list-unordered': 'octicon octicon-list-unordered',
	location: 'octicon octicon-location',
	'gist-private': 'octicon octicon-gist-private',
	'mirror-private': 'octicon octicon-mirror-private',
	'git-fork-private': 'octicon octicon-git-fork-private',
	lock: 'octicon octicon-lock',
	'logo-github': 'octicon octicon-logo-github',
	mail: 'octicon octicon-mail',
	'mail-read': 'octicon octicon-mail-read',
	'mail-reply': 'octicon octicon-mail-reply',
	'mark-github': 'octicon octicon-mark-github',
	markdown: 'octicon octicon-markdown',
	megaphone: 'octicon octicon-megaphone',
	mention: 'octicon octicon-mention',
	milestone: 'octicon octicon-milestone',
	'mirror-public': 'octicon octicon-mirror-public',
	mirror: 'octicon octicon-mirror',
	'mortar-board': 'octicon octicon-mortar-board',
	mute: 'octicon octicon-mute',
	'no-newline': 'octicon octicon-no-newline',
	octoface: 'octicon octicon-octoface',
	organization: 'octicon octicon-organization',
	package: 'octicon octicon-package',
	paintcan: 'octicon octicon-paintcan',
	pencil: 'octicon octicon-pencil',
	'person-add': 'octicon octicon-person-add',
	'person-follow': 'octicon octicon-person-follow',
	person: 'octicon octicon-person',
	pin: 'octicon octicon-pin',
	plug: 'octicon octicon-plug',
	'repo-create': 'octicon octicon-repo-create',
	'gist-new': 'octicon octicon-gist-new',
	'file-directory-create': 'octicon octicon-file-directory-create',
	'file-add': 'octicon octicon-file-add',
	plus: 'octicon octicon-plus',
	'primitive-dot': 'octicon octicon-primitive-dot',
	'primitive-square': 'octicon octicon-primitive-square',
	pulse: 'octicon octicon-pulse',
	question: 'octicon octicon-question',
	quote: 'octicon octicon-quote',
	'radio-tower': 'octicon octicon-radio-tower',
	'repo-delete': 'octicon octicon-repo-delete',
	repo: 'octicon octicon-repo',
	'repo-clone': 'octicon octicon-repo-clone',
	'repo-force-push': 'octicon octicon-repo-force-push',
	'gist-fork': 'octicon octicon-gist-fork',
	'repo-forked': 'octicon octicon-repo-forked',
	'repo-pull': 'octicon octicon-repo-pull',
	'repo-push': 'octicon octicon-repo-push',
	rocket: 'octicon octicon-rocket',
	rss: 'octicon octicon-rss',
	ruby: 'octicon octicon-ruby',
	'screen-full': 'octicon octicon-screen-full',
	'screen-normal': 'octicon octicon-screen-normal',
	'search-save': 'octicon octicon-search-save',
	search: 'octicon octicon-search',
	server: 'octicon octicon-server',
	settings: 'octicon octicon-settings',
	shield: 'octicon octicon-shield',
	'log-in': 'octicon octicon-log-in',
	'sign-in': 'octicon octicon-sign-in',
	'log-out': 'octicon octicon-log-out',
	'sign-out': 'octicon octicon-sign-out',
	squirrel: 'octicon octicon-squirrel',
	'star-add': 'octicon octicon-star-add',
	'star-delete': 'octicon octicon-star-delete',
	star: 'octicon octicon-star',
	stop: 'octicon octicon-stop',
	'repo-sync': 'octicon octicon-repo-sync',
	sync: 'octicon octicon-sync',
	'tag-remove': 'octicon octicon-tag-remove',
	'tag-add': 'octicon octicon-tag-add',
	tag: 'octicon octicon-tag',
	telescope: 'octicon octicon-telescope',
	terminal: 'octicon octicon-terminal',
	'three-bars': 'octicon octicon-three-bars',
	thumbsdown: 'octicon octicon-thumbsdown',
	thumbsup: 'octicon octicon-thumbsup',
	tools: 'octicon octicon-tools',
	trashcan: 'octicon octicon-trashcan',
	'triangle-down': 'octicon octicon-triangle-down',
	'triangle-left': 'octicon octicon-triangle-left',
	'triangle-right': 'octicon octicon-triangle-right',
	'triangle-up': 'octicon octicon-triangle-up',
	unfold: 'octicon octicon-unfold',
	unmute: 'octicon octicon-unmute',
	versions: 'octicon octicon-versions',
	watch: 'octicon octicon-watch',
	'remove-close': 'octicon octicon-remove-close',
	x: 'octicon octicon-x',
	zap: 'octicon octicon-zap'
};

},{}],369:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	small: _theme2.default.glyph.size.small,
	medium: _theme2.default.glyph.size.medium,
	large: _theme2.default.glyph.size.large
};

},{"../../../theme":477}],370:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Glyph
// ==============================

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _sizes = require('./sizes');

var _sizes2 = _interopRequireDefault(_sizes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Prepare variants
var colorVariants = {};
Object.keys(_colors2.default).forEach(function (color) {
	colorVariants['color__' + color] = {
		color: _colors2.default[color]
	};
});

// Prepare sizes
var sizeVariants = {};
Object.keys(_sizes2.default).forEach(function (size) {
	sizeVariants['size__' + size] = {
		fontSize: _sizes2.default[size]
	};
});

module.exports = _extends({
	glyph: {}

}, colorVariants, sizeVariants);

},{"./colors":366,"./sizes":369}],371:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WIDTHS = {
	'one-whole': '100%',
	'one-half': '50%',
	'one-third': '33.33%',
	'two-thirds': '66.66%',
	'one-quarter': '25%',
	'three-quarters': '75%',

	'one-fifth': '20%',
	'two-fifths': '40%',
	'three-fifths': '60%',
	'four-fifths': '80%',

	'one-sixth': '16.66%',
	'five-sixths': '83.33%'
};

var GridCol = function GridCol(props, context) {
	var gutter = props.gutter || context.gutter;
	var xsmall = props.xsmall || context.xsmall;
	var small = props.small || context.small;
	var medium = props.medium || context.medium;
	var large = props.large || context.large;

	var className = (0, _glamor.css)(classes['xsmall-' + xsmall], classes['small-' + small], classes['medium-' + medium], classes['large-' + large]);

	var componentClassName = '' + className + (props.className ? ' ' + props.className : '');
	var componentStyles = gutter ? {
		paddingLeft: gutter / 2,
		paddingRight: gutter / 2
	} : {};

	return _react2.default.createElement(
		'div',
		{ className: componentClassName, style: componentStyles },
		props.children
	);
};

GridCol.contextTypes = {
	gutter: _react.PropTypes.number,
	large: _react.PropTypes.string,
	medium: _react.PropTypes.string,
	small: _react.PropTypes.string,
	xsmall: _react.PropTypes.string
};

GridCol.propTypes = {
	gutter: _react.PropTypes.number,
	large: _react.PropTypes.string,
	medium: _react.PropTypes.string,
	small: _react.PropTypes.string,
	xsmall: _react.PropTypes.string
};

var classes = _extends({}, prepareWidths('xsmall', WIDTHS), prepareWidths('small', WIDTHS), prepareWidths('medium', WIDTHS), prepareWidths('large', WIDTHS));

/* eslint-disable guard-for-in */
function prepareWidths(prefix, obj) {
	var classes = {};
	switch (prefix) {
		case 'small':
			for (var prop in obj) {
				classes[prefix + '-' + prop] = _defineProperty({}, '@media (min-width: ' + _theme2.default.breakpoint.tabletPortraitMin + ')', {
					width: obj[prop]
				});
			}
			break;
		case 'medium':
			for (var _prop in obj) {
				classes[prefix + '-' + _prop] = _defineProperty({}, '@media (min-width: ' + _theme2.default.breakpoint.tabletLandscapeMin + ')', {
					width: obj[_prop]
				});
			}
			break;
		case 'large':
			for (var _prop2 in obj) {
				classes[prefix + '-' + _prop2] = _defineProperty({}, '@media (min-width: ' + _theme2.default.breakpoint.desktopMin + ')', {
					width: obj[_prop2]
				});
			}
			break;
		default:
			for (var _prop3 in obj) {
				classes[prefix + '-' + _prop3] = {
					width: obj[_prop3]
				};
			}

	}

	return classes;
};

module.exports = GridCol;

},{"../../../theme":477,"glamor":undefined,"react":undefined}],372:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GridRow = function (_Component) {
	_inherits(GridRow, _Component);

	function GridRow() {
		_classCallCheck(this, GridRow);

		return _possibleConstructorReturn(this, (GridRow.__proto__ || Object.getPrototypeOf(GridRow)).apply(this, arguments));
	}

	_createClass(GridRow, [{
		key: 'getChildContext',
		value: function getChildContext() {
			return {
				gutter: this.props.gutter,
				xsmall: this.props.xsmall,
				small: this.props.small,
				medium: this.props.medium,
				large: this.props.large
			};
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    children = _props.children,
			    className = _props.className,
			    gutter = _props.gutter,
			    _props$styles = _props.styles,
			    styles = _props$styles === undefined ? {} : _props$styles;


			var componentClassName = '' + (0, _glamor.css)(classes.grid) + (className ? ' ' + className : '');
			var componentStyles = _extends(styles, {
				marginLeft: gutter / -2,
				marginRight: gutter / -2
			});

			return _react2.default.createElement(
				'div',
				{ className: componentClassName, style: componentStyles },
				children
			);
		}
	}]);

	return GridRow;
}(_react.Component);

;

GridRow.childContextTypes = {
	gutter: _react.PropTypes.number,
	xsmall: _react.PropTypes.string,
	small: _react.PropTypes.string,
	medium: _react.PropTypes.string,
	large: _react.PropTypes.string
};

GridRow.propTypes = {
	gutter: _react.PropTypes.number,
	large: _react.PropTypes.string,
	medium: _react.PropTypes.string,
	small: _react.PropTypes.string,
	xsmall: _react.PropTypes.string
};

GridRow.defaultProps = {
	gutter: 0,
	xsmall: 'one-whole'
};

var classes = {
	grid: {
		display: 'flex',
		flexWrap: 'wrap'
	}
};

module.exports = GridRow;

},{"glamor":undefined,"react":undefined}],373:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Row = exports.Col = undefined;

var _GridCol = require('../GridCol');

var _GridCol2 = _interopRequireDefault(_GridCol);

var _GridRow = require('../GridRow');

var _GridRow2 = _interopRequireDefault(_GridRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.Col = _GridCol2.default;
exports.Row = _GridRow2.default;

},{"../GridCol":371,"../GridRow":372}],374:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// NOTE: Inline Group Section accepts a single child

function InlineGroupSection(_ref) {
	var active = _ref.active,
	    aphroditeStyles = _ref.aphroditeStyles,
	    children = _ref.children,
	    className = _ref.className,
	    contiguous = _ref.contiguous,
	    grow = _ref.grow,
	    position = _ref.position,
	    props = _objectWithoutProperties(_ref, ['active', 'aphroditeStyles', 'children', 'className', 'contiguous', 'grow', 'position']);

	// evaluate position
	var separate = position === 'last' || position === 'middle';

	// A `contiguous` section must manipulate it's child directly
	// A separate (default) section just wraps the child
	return contiguous ? (0, _react.cloneElement)(children, _extends({
		aphroditeStyles: [_styles2.default.contiguous, _styles2.default['contiguous__' + position], active ? _styles2.default.active : null, grow ? _styles2.default.grow : null, aphroditeStyles]
	}, props)) : _react2.default.createElement(
		'div',
		_extends({ className: (0, _glamor.css)(!!grow && _styles2.default.grow, !!separate && _styles2.default.separate, aphroditeStyles) }, props),
		children
	);
};

InlineGroupSection.propTypes = {
	active: _react.PropTypes.bool, // buttons only
	children: _react.PropTypes.element.isRequired,
	contiguous: _react.PropTypes.bool,
	grow: _react.PropTypes.bool,
	position: _react.PropTypes.oneOf(['first', 'last', 'middle', 'only'])
};

module.exports = InlineGroupSection;

},{"./styles":375,"glamor":undefined,"react":undefined}],375:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	// pull active elements up
	active: {
		position: 'relative'
	},

	// stretch to fill available width
	grow: {
		flex: '1 1 0'
	},

	// separate applicable non-contiguous elements
	separate: {
		paddingLeft: '0.75em'
	},

	// Contiguous: manipulate children directly

	// pull focused contiguous elements up
	contiguous: {
		':focus': {
			position: 'relative',
			zIndex: 1
		}
	},

	// position
	contiguous__middle: {
		borderRadius: 0,
		marginLeft: _theme2.default.button.borderWidth * -1
	},
	contiguous__first: {
		borderBottomRightRadius: '0 !important',
		borderTopRightRadius: '0 !important'
	},
	contiguous__last: {
		borderBottomLeftRadius: '0 !important',
		borderTopLeftRadius: '0 !important',
		marginLeft: _theme2.default.button.borderWidth * -1
	}
}; // ==============================
// Inline Group: Section
// ==============================

// Takes only FormInput and Button as children, rendering them as a
// tidy inline array

},{"../../../theme":477}],376:[function(require,module,exports){
'use strict';

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// NOTE: only accepts InlineGroupSection as a single child

function InlineGroup(_ref) {
	var aphroditeStyles = _ref.aphroditeStyles,
	    block = _ref.block,
	    children = _ref.children,
	    className = _ref.className,
	    Component = _ref.component,
	    contiguous = _ref.contiguous,
	    props = _objectWithoutProperties(_ref, ['aphroditeStyles', 'block', 'children', 'className', 'component', 'contiguous']);

	// prepare group className
	props.className = (0, _glamor.css)(classes.group, !!block && classes.block, aphroditeStyles);
	if (className) {
		props.className += ' ' + className;
	}

	// convert children to an array and filter out falsey values
	var buttons = _react.Children.toArray(children).filter(function (i) {
		return i;
	});

	// normalize the count
	var count = buttons.length - 1;

	// clone children and apply classNames that aphrodite can target
	props.children = buttons.map(function (c, idx) {
		if (!c) return null;

		var isOnlyChild = !count;
		var isFirstChild = !isOnlyChild && idx === 0;
		var isLastChild = !isOnlyChild && idx === count;
		var isMiddleChild = !isOnlyChild && !isFirstChild && !isLastChild;

		var position = void 0;
		if (isOnlyChild) position = 'only';
		if (isFirstChild) position = 'first';
		if (isLastChild) position = 'last';
		if (isMiddleChild) position = 'middle';

		return (0, _react.cloneElement)(c, {
			contiguous: contiguous,
			position: position
		});
	});

	return _react2.default.createElement(Component, props);
};

InlineGroup.propTypes = {
	aphroditeStyles: _react.PropTypes.shape({
		_definition: _react.PropTypes.object,
		_name: _react.PropTypes.string
	}),
	block: _react.PropTypes.bool,
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
	contiguous: _react.PropTypes.bool
};
InlineGroup.defaultProps = {
	component: 'div'
};

var classes = {
	group: {
		display: 'inline-flex'
	},
	block: {
		display: 'flex'
	}
};

module.exports = InlineGroup;

},{"glamor":undefined,"react":undefined}],377:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function LabelledControl(_ref) {
	var className = _ref.className,
	    inline = _ref.inline,
	    label = _ref.label,
	    title = _ref.title,
	    props = _objectWithoutProperties(_ref, ['className', 'inline', 'label', 'title']);

	var labelClassName = (0, _glamor.css)(_styles2.default.wrapper, inline && _styles2.default.wrapper__inline, className);

	return _react2.default.createElement(
		'label',
		{ title: title, className: labelClassName },
		_react2.default.createElement('input', _extends({}, props, { className: (0, _glamor.css)(_styles2.default.control) })),
		_react2.default.createElement(
			'span',
			{ className: (0, _glamor.css)(_styles2.default.label) },
			label
		)
	);
};

LabelledControl.propTypes = {
	inline: _react.PropTypes.bool,
	title: _react.PropTypes.string,
	type: _react.PropTypes.oneOf(['checkbox', 'radio']).isRequired
};

module.exports = LabelledControl;

},{"./styles":378,"glamor":undefined,"react":undefined}],378:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	wrapper: {
		display: 'block',
		height: _theme2.default.input.height,
		lineHeight: _theme2.default.input.lineHeight
	},
	wrapper__inline: {
		display: 'inline'
	},

	// checkbox or radio
	control: {
		marginRight: '0.5em'
	}
}; // ==============================
// Alert
// ==============================

/* eslint quote-props: ["error", "as-needed"] */

},{"../../../theme":477}],379:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _Spinner = require('../Spinner');

var _Spinner2 = _interopRequireDefault(_Spinner);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function LoadingButton(_ref) {
	var children = _ref.children,
	    loading = _ref.loading,
	    props = _objectWithoutProperties(_ref, ['children', 'loading']);

	// determine the correct variant for the spinner,
	// fill is the default variant on Button
	var variant = props.variant || 'fill';

	// determine the correct color for the spinner,
	// cancel and delete alias to "danger"
	var color = void 0;
	if (props.color === 'cancel' || props.color === 'delete') color = 'danger';

	// merge all the variant/color together
	var formattedColor = variant === 'fill' && props.color !== 'default' ? 'inverted' : color;

	// render the spinner if required
	var spinner = loading && _react2.default.createElement(_Spinner2.default, {
		size: 'small',
		color: formattedColor
	});

	// slide the spinner in and out of view
	var spinnerStyles = {
		width: loading ? _theme2.default.spinner.size.small * 5 + _theme2.default.spacing.small : 0
	};

	// render all that shit
	return _react2.default.createElement(
		_Button2.default,
		props,
		_react2.default.createElement(
			'span',
			{ className: (0, _glamor.css)(classes.spinner), style: spinnerStyles },
			spinner
		),
		children
	);
};

LoadingButton.propTypes = {
	loading: _react.PropTypes.bool
};
LoadingButton.defaultProps = {
	loading: false
};

var classes = {
	spinner: {
		display: 'inline-block',
		overflow: 'hidden',
		textAlign: 'left',
		transition: 'width 200ms ease-out',
		verticalAlign: 'middle'
	}
};

module.exports = LoadingButton;

},{"../../../theme":477,"../Button":340,"../Spinner":396,"glamor":undefined,"react":undefined}],380:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ModalBody(_ref) {
	var className = _ref.className,
	    props = _objectWithoutProperties(_ref, ['className']);

	return _react2.default.createElement('div', _extends({
		className: (0, _glamor.css)(classes.body, className)
	}, props));
};

var classes = {
	body: {
		paddingBottom: _theme2.default.modal.padding.body.vertical,
		paddingLeft: _theme2.default.modal.padding.body.horizontal,
		paddingRight: _theme2.default.modal.padding.body.horizontal,
		paddingTop: _theme2.default.modal.padding.body.vertical
	}
};

module.exports = ModalBody;

},{"../../../theme":477,"glamor":undefined,"react":undefined}],381:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _ScrollLock = require('../ScrollLock');

var _ScrollLock2 = _interopRequireDefault(_ScrollLock);

var _Portal = require('../Portal');

var _Portal2 = _interopRequireDefault(_Portal);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var canUseDom = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var ModalDialog = function (_Component) {
	_inherits(ModalDialog, _Component);

	function ModalDialog() {
		_classCallCheck(this, ModalDialog);

		var _this = _possibleConstructorReturn(this, (ModalDialog.__proto__ || Object.getPrototypeOf(ModalDialog)).call(this));

		_this.handleBackdropClick = _this.handleBackdropClick.bind(_this);
		_this.handleKeyboardInput = _this.handleKeyboardInput.bind(_this);
		return _this;
	}

	_createClass(ModalDialog, [{
		key: 'getChildContext',
		value: function getChildContext() {
			return {
				onClose: this.props.onClose
			};
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			if (!canUseDom) return;

			// add event listeners
			if (nextProps.isOpen && nextProps.enableKeyboardInput) {
				window.addEventListener('keydown', this.handleKeyboardInput);
			}
			if (!nextProps.isOpen && nextProps.enableKeyboardInput) {
				window.removeEventListener('keydown', this.handleKeyboardInput);
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			if (this.props.enableKeyboardInput) {
				window.removeEventListener('keydown', this.handleKeyboardInput);
			}
		}

		// ==============================
		// Methods
		// ==============================

	}, {
		key: 'handleKeyboardInput',
		value: function handleKeyboardInput(event) {
			if (event.keyCode === 27) this.props.onClose();

			return false;
		}
	}, {
		key: 'handleBackdropClick',
		value: function handleBackdropClick(e) {
			if (e.target !== this.refs.container) return;

			this.props.onClose();
		}

		// ==============================
		// Renderers
		// ==============================

	}, {
		key: 'renderDialog',
		value: function renderDialog() {
			var _props = this.props,
			    backdropClosesModal = _props.backdropClosesModal,
			    children = _props.children,
			    isOpen = _props.isOpen,
			    width = _props.width;


			if (!isOpen) return _react2.default.createElement('span', { key: 'closed' });

			return _react2.default.createElement(
				'div',
				{
					className: (0, _glamor.css)(classes.container),
					key: 'open',
					ref: 'container',
					onClick: !!backdropClosesModal && this.handleBackdropClick,
					onTouchEnd: !!backdropClosesModal && this.handleBackdropClick
				},
				_react2.default.createElement(
					'div',
					{ className: (0, _glamor.css)(classes.dialog), style: { width: width }, 'data-screen-id': 'modal-dialog' },
					children
				),
				_react2.default.createElement(_ScrollLock2.default, null)
			);
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				_Portal2.default,
				null,
				this.renderDialog()
			);
		}
	}]);

	return ModalDialog;
}(_react.Component);

;

ModalDialog.propTypes = {
	backdropClosesModal: _react.PropTypes.bool,
	enableKeyboardInput: _react.PropTypes.bool,
	isOpen: _react.PropTypes.bool,
	onClose: _react.PropTypes.func.isRequired,
	width: _react.PropTypes.number
};
ModalDialog.defaultProps = {
	enableKeyboardInput: true,
	width: 768
};
ModalDialog.childContextTypes = {
	onClose: _react.PropTypes.func.isRequired
};

var classes = {
	container: {
		alignItems: 'center',
		backgroundColor: _theme2.default.modal.background,
		boxSizing: 'border-box',
		display: 'flex',
		height: '100%',
		justifyContent: 'center',
		left: 0,
		position: 'fixed',
		top: 0,
		width: '100%',
		zIndex: _theme2.default.modal.zIndex
	},
	dialog: {
		maxHeight: '90%',
		overflow: 'scroll',
		backgroundColor: 'white',
		borderRadius: _theme2.default.borderRadius.default,
		paddingBottom: _theme2.default.modal.padding.dialog.vertical,
		paddingLeft: _theme2.default.modal.padding.dialog.horizontal,
		paddingRight: _theme2.default.modal.padding.dialog.horizontal,
		paddingTop: '5px',
		position: 'relative'
	}
};

exports.default = ModalDialog;

},{"../../../theme":477,"../Portal":388,"../ScrollLock":391,"glamor":undefined,"react":undefined}],382:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ModalFooter(_ref) {
	var align = _ref.align,
	    className = _ref.className,
	    props = _objectWithoutProperties(_ref, ['align', 'className']);

	return _react2.default.createElement('div', _extends({}, props, { className: (0, _glamor.css)(classes.footer, classes['align__' + align], className) }));
};

ModalFooter.propTypes = {
	align: _react.PropTypes.oneOf(['center', 'left', 'right']),
	children: _react.PropTypes.node,
	onClose: _react.PropTypes.func,
	showCloseButton: _react.PropTypes.bool,
	text: _react.PropTypes.string
};
ModalFooter.defaultProps = {
	align: 'left'
};

var classes = {
	footer: {
		borderTop: '2px solid ' + _theme2.default.color.gray10,
		display: 'flex',
		paddingBottom: _theme2.default.modal.padding.footer.vertical,
		paddingLeft: _theme2.default.modal.padding.footer.horizontal,
		paddingRight: _theme2.default.modal.padding.footer.horizontal,
		paddingTop: _theme2.default.modal.padding.footer.vertical
	},

	// alignment
	align__left: {
		justifyContent: 'flex-start'
	},
	align__center: {
		justifyContent: 'center'
	},
	align__right: {
		justifyContent: 'flex-end'
	}
};

module.exports = ModalFooter;

},{"../../../theme":477,"glamor":undefined,"react":undefined}],383:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _GlyphButton = require('../GlyphButton');

var _GlyphButton2 = _interopRequireDefault(_GlyphButton);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ModalHeader(_ref, _ref2) {
	var onClose = _ref2.onClose;

	var children = _ref.children,
	    className = _ref.className,
	    showCloseButton = _ref.showCloseButton,
	    text = _ref.text,
	    props = _objectWithoutProperties(_ref, ['children', 'className', 'showCloseButton', 'text']);

	// Property Violation
	if (children && text) {
		console.error('Warning: ModalHeader cannot render `children` and `text`. You must provide one or the other.');
	}

	return _react2.default.createElement(
		'div',
		_extends({}, props, { className: (0, _glamor.css)(classes.header, className) }),
		_react2.default.createElement(
			'div',
			{ className: (0, _glamor.css)(classes.grow) },
			text ? _react2.default.createElement(
				'h4',
				{ className: (0, _glamor.css)(classes.text) },
				text
			) : children
		),
		!!onClose && showCloseButton && _react2.default.createElement(_GlyphButton2.default, {
			aphroditeStyles: classes.close,
			color: 'cancel',
			glyph: 'x',
			onClick: onClose,
			variant: 'link'
		})
	);
};

ModalHeader.propTypes = {
	children: _react.PropTypes.node,
	onClose: _react.PropTypes.func,
	showCloseButton: _react.PropTypes.bool,
	text: _react.PropTypes.string
};
ModalHeader.contextTypes = {
	onClose: _react.PropTypes.func.isRequired
};

var classes = {
	header: {
		alignItems: 'center',
		borderBottom: '2px solid ' + _theme2.default.color.gray10,
		display: 'flex',
		paddingBottom: _theme2.default.modal.padding.header.vertical,
		paddingLeft: _theme2.default.modal.padding.header.horizontal,
		paddingRight: _theme2.default.modal.padding.header.horizontal,
		paddingTop: _theme2.default.modal.padding.header.vertical
	},

	// fill space to push the close button right
	grow: {
		flexGrow: 1
	},

	// title text
	text: {
		color: 'inherit',
		fontSize: 18,
		fontWeight: 500,
		lineHeight: 1,
		margin: 0
	}
};

module.exports = ModalHeader;

},{"../../../theme":477,"../GlyphButton":364,"glamor":undefined,"react":undefined}],384:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Header = exports.Footer = exports.Dialog = exports.Body = undefined;

var _body = require('./body');

var _body2 = _interopRequireDefault(_body);

var _dialog = require('./dialog');

var _dialog2 = _interopRequireDefault(_dialog);

var _footer = require('./footer');

var _footer2 = _interopRequireDefault(_footer);

var _header = require('./header');

var _header2 = _interopRequireDefault(_header);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.Body = _body2.default;
exports.Dialog = _dialog2.default;
exports.Footer = _footer2.default;
exports.Header = _header2.default;

},{"./body":380,"./dialog":381,"./footer":382,"./header":383}],385:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _page = require('./page');

var _page2 = _interopRequireDefault(_page);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pagination = function (_Component) {
	_inherits(Pagination, _Component);

	function Pagination() {
		_classCallCheck(this, Pagination);

		return _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).apply(this, arguments));
	}

	_createClass(Pagination, [{
		key: 'renderCount',
		value: function renderCount() {
			var count = '';
			var _props = this.props,
			    currentPage = _props.currentPage,
			    pageSize = _props.pageSize,
			    plural = _props.plural,
			    singular = _props.singular,
			    total = _props.total;

			if (!total) {
				count = 'No ' + (plural || 'records');
			} else if (total > pageSize) {
				var start = pageSize * (currentPage - 1) + 1;
				var end = Math.min(start + pageSize - 1, total);
				count = 'Showing ' + start + ' to ' + end + ' of ' + total;
			} else {
				count = 'Showing ' + total;
				if (total > 1 && plural) {
					count += ' ' + plural;
				} else if (total === 1 && singular) {
					count += ' ' + singular;
				}
			}
			return _react2.default.createElement(
				'div',
				{ className: (0, _glamor.css)(classes.count), 'data-e2e-pagination-count': true },
				count
			);
		}
	}, {
		key: 'renderPages',
		value: function renderPages() {
			var _props2 = this.props,
			    currentPage = _props2.currentPage,
			    limit = _props2.limit,
			    onPageSelect = _props2.onPageSelect,
			    pageSize = _props2.pageSize,
			    total = _props2.total;


			if (total <= pageSize) return null;

			var pages = [];
			var totalPages = Math.ceil(total / pageSize);
			var minPage = 1;
			var maxPage = totalPages;

			if (limit && limit < totalPages) {
				var rightLimit = Math.floor(limit / 2);
				var leftLimit = rightLimit + limit % 2 - 1;
				minPage = currentPage - leftLimit;
				maxPage = currentPage + rightLimit;

				if (minPage < 1) {
					maxPage = limit;
					minPage = 1;
				}
				if (maxPage > totalPages) {
					minPage = totalPages - limit + 1;
					maxPage = totalPages;
				}
			}
			if (minPage > 1) {
				pages.push(_react2.default.createElement(
					_page2.default,
					{ key: 'page_start', onClick: function onClick() {
							return onPageSelect(1);
						} },
					'...'
				));
			}

			var _loop = function _loop(page) {
				var selected = page === currentPage;
				/* eslint-disable no-loop-func */
				pages.push(_react2.default.createElement(
					_page2.default,
					{ key: 'page_' + page, selected: selected, onClick: function onClick() {
							return onPageSelect(page);
						} },
					page
				));
				/* eslint-enable */
			};

			for (var page = minPage; page <= maxPage; page++) {
				_loop(page);
			}
			if (maxPage < totalPages) {
				pages.push(_react2.default.createElement(
					_page2.default,
					{ key: 'page_end', onClick: function onClick() {
							return onPageSelect(totalPages);
						} },
					'...'
				));
			}
			return _react2.default.createElement(
				'div',
				{ className: (0, _glamor.css)(classes.list) },
				pages
			);
		}
	}, {
		key: 'render',
		value: function render() {
			var className = (0, _glamor.css)(classes.container, this.props.className);
			return _react2.default.createElement(
				'div',
				{ className: className, style: this.props.style },
				this.renderCount(),
				this.renderPages()
			);
		}
	}]);

	return Pagination;
}(_react.Component);

;

var classes = {
	container: {
		display: 'block',
		lineHeight: _theme2.default.component.lineHeight,
		marginBottom: '2em'
	},
	count: {
		display: 'inline-block',
		marginRight: '1em',
		verticalAlign: 'middle'
	},
	list: {
		display: 'inline-block',
		verticalAlign: 'middle'
	}
};

Pagination.propTypes = {
	className: _react.PropTypes.string,
	currentPage: _react.PropTypes.number.isRequired,
	limit: _react.PropTypes.number,
	onPageSelect: _react.PropTypes.func,
	pageSize: _react.PropTypes.number.isRequired,
	plural: _react.PropTypes.string,
	singular: _react.PropTypes.string,
	style: _react.PropTypes.object,
	total: _react.PropTypes.number.isRequired
};

module.exports = Pagination;

},{"../../../theme":477,"./page":386,"glamor":undefined,"react":undefined}],386:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Page(_ref) {
	var disabled = _ref.disabled,
	    selected = _ref.selected,
	    props = _objectWithoutProperties(_ref, ['disabled', 'selected']);

	props.className = (0, _glamor.css)(classes.page, !!disabled && classes.disabled, !!selected && classes.selected);
	return _react2.default.createElement('button', props);
};

Page.propTypes = {
	disabled: _react.PropTypes.bool,
	onClick: _react.PropTypes.func.isRequired,
	selected: _react.PropTypes.bool
};

/* eslint quote-props: ["error", "as-needed"] */

var selectedStyle = {
	backgroundColor: _theme2.default.pagination.selected.background,
	borderColor: _theme2.default.pagination.selected.border,
	color: _theme2.default.pagination.selected.color,
	cursor: 'default',
	zIndex: 2
};
var pseudoStyle = {
	backgroundColor: _theme2.default.pagination.hover.background,
	borderColor: _theme2.default.pagination.hover.border,
	color: _theme2.default.pagination.hover.color,
	outline: 'none'
};

var classes = {
	page: {
		appearance: 'none',
		background: 'none',
		border: '1px solid transparent',
		borderRadius: _theme2.default.borderRadius.default,
		color: _theme2.default.pagination.color,
		cursor: 'pointer',
		display: 'inline-block',
		float: 'left', // Collapse white-space
		marginRight: '0.25em',
		padding: '0 .7em',
		position: 'relative',
		textDecoration: 'none',

		// handle hover and focus
		':hover': pseudoStyle,
		':focus': pseudoStyle
	},

	// selected page
	selected: _extends({}, selectedStyle, {

		':hover': selectedStyle,
		':focus': selectedStyle
	}),

	// disabled page

	disabled: {
		backgroundColor: _theme2.default.pagination.disabled.background,
		borderColor: _theme2.default.pagination.disabled.background,
		color: _theme2.default.pagination.disabled.color,
		cursor: 'default'
	}
};

exports.default = Page;

},{"../../../theme":477,"glamor":undefined,"react":undefined}],387:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Pass the Lightbox context through to the Portal's descendents
// StackOverflow discussion http://goo.gl/oclrJ9

var PassContext = function (_Component) {
	_inherits(PassContext, _Component);

	function PassContext() {
		_classCallCheck(this, PassContext);

		return _possibleConstructorReturn(this, (PassContext.__proto__ || Object.getPrototypeOf(PassContext)).apply(this, arguments));
	}

	_createClass(PassContext, [{
		key: 'getChildContext',
		value: function getChildContext() {
			return this.props.context;
		}
	}, {
		key: 'render',
		value: function render() {
			return _react.Children.only(this.props.children);
		}
	}]);

	return PassContext;
}(_react.Component);

;

PassContext.propTypes = {
	context: _react.PropTypes.object.isRequired
};
PassContext.childContextTypes = {
	onClose: _react.PropTypes.func
};

exports.default = PassContext;

},{"react":undefined}],388:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _reactDom = require('react-dom');

var _PassContext = require('../PassContext');

var _PassContext2 = _interopRequireDefault(_PassContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Portal = function (_Component) {
	_inherits(Portal, _Component);

	function Portal() {
		_classCallCheck(this, Portal);

		var _this = _possibleConstructorReturn(this, (Portal.__proto__ || Object.getPrototypeOf(Portal)).call(this));

		_this.portalElement = null;
		return _this;
	}

	_createClass(Portal, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var p = document.createElement('div');
			document.body.appendChild(p);
			this.portalElement = p;
			this.componentDidUpdate();
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			// Animate fade on mount/unmount
			var duration = 200;
			var styles = '\n\t\t\t\t.fade-enter { opacity: 0.01; }\n\t\t\t\t.fade-enter.fade-enter-active { opacity: 1; transition: opacity ' + duration + 'ms; }\n\t\t\t\t.fade-leave { opacity: 1; }\n\t\t\t\t.fade-leave.fade-leave-active { opacity: 0.01; transition: opacity ' + duration + 'ms; }\n\t\t';
			(0, _reactDom.render)(_react2.default.createElement(
				_PassContext2.default,
				{ context: this.context },
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'style',
						null,
						styles
					),
					_react2.default.createElement(_reactAddonsCssTransitionGroup2.default, _extends({
						component: 'div',
						transitionName: 'fade',
						transitionEnterTimeout: duration,
						transitionLeaveTimeout: duration
					}, this.props))
				)
			), this.portalElement);
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			document.body.removeChild(this.portalElement);
		}
	}, {
		key: 'render',
		value: function render() {
			return null;
		}
	}]);

	return Portal;
}(_react.Component);

exports.default = Portal;


Portal.contextTypes = {
	onClose: _react.PropTypes.func
};

},{"../PassContext":387,"react":undefined,"react-addons-css-transition-group":undefined,"react-dom":undefined}],389:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Using window.innerWidth and state instead of CSS media breakpoints
// because we want to render null rather than an empty span. Allowing for
// CSS pseudo classes like :only-child to behave as expected.

// Return true if window + document
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var ResponsiveText = function (_Component) {
	_inherits(ResponsiveText, _Component);

	function ResponsiveText() {
		_classCallCheck(this, ResponsiveText);

		var _this = _possibleConstructorReturn(this, (ResponsiveText.__proto__ || Object.getPrototypeOf(ResponsiveText)).call(this));

		_this.handleResize = _this.handleResize.bind(_this);
		_this.state = {
			windowWidth: canUseDOM ? window.innerWidth : 0
		};
		return _this;
	}

	_createClass(ResponsiveText, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (canUseDOM) {
				window.addEventListener('resize', this.handleResize);
				this.handleResize();
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			if (canUseDOM) {
				window.removeEventListener('resize', this.handleResize);
			}
		}
	}, {
		key: 'handleResize',
		value: function handleResize() {
			this.setState({
				windowWidth: canUseDOM ? window.innerWidth : 0
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    Component = _props.component,
			    hiddenLG = _props.hiddenLG,
			    hiddenMD = _props.hiddenMD,
			    hiddenSM = _props.hiddenSM,
			    hiddenXS = _props.hiddenXS,
			    visibleLG = _props.visibleLG,
			    visibleMD = _props.visibleMD,
			    visibleSM = _props.visibleSM,
			    visibleXS = _props.visibleXS,
			    props = _objectWithoutProperties(_props, ['component', 'hiddenLG', 'hiddenMD', 'hiddenSM', 'hiddenXS', 'visibleLG', 'visibleMD', 'visibleSM', 'visibleXS']);

			var windowWidth = this.state.windowWidth;


			var text = void 0;

			// set text value from breakpoint; attempt XS --> LG
			if (windowWidth < _theme2.default.breakpointNumeric.mobile) {
				text = visibleXS || hiddenSM || hiddenMD || hiddenLG;
			} else if (windowWidth < _theme2.default.breakpointNumeric.tabletPortrait) {
				text = hiddenXS || visibleSM || hiddenMD || hiddenLG;
			} else if (windowWidth < _theme2.default.breakpointNumeric.tabletLandscape) {
				text = hiddenXS || hiddenSM || visibleMD || hiddenLG;
			} else {
				text = hiddenXS || hiddenSM || hiddenMD || visibleLG;
			}

			return text ? _react2.default.createElement(
				Component,
				props,
				text
			) : null;
		}
	}]);

	return ResponsiveText;
}(_react.Component);

;

ResponsiveText.propTypes = {
	hiddenLG: _react.PropTypes.string,
	hiddenMD: _react.PropTypes.string,
	hiddenSM: _react.PropTypes.string,
	hiddenXS: _react.PropTypes.string,
	visibleLG: _react.PropTypes.string,
	visibleMD: _react.PropTypes.string,
	visibleSM: _react.PropTypes.string,
	visibleXS: _react.PropTypes.string
};
ResponsiveText.defaultProps = {
	component: 'span'
};

module.exports = ResponsiveText;

},{"../../../theme":477,"react":undefined}],390:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ScreenReaderOnly(_ref) {
	var className = _ref.className,
	    props = _objectWithoutProperties(_ref, ['className']);

	props.className = (0, _glamor.css)(classes.srOnly, className);

	return _react2.default.createElement('span', props);
};

var classes = {
	srOnly: {
		border: 0,
		clip: 'rect(0,0,0,0)',
		height: 1,
		margin: -1,
		overflow: 'hidden',
		padding: 0,
		position: 'absolute',
		width: 1
	}
};

module.exports = ScreenReaderOnly;

},{"glamor":undefined,"react":undefined}],391:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ScrollLock = function (_Component) {
	_inherits(ScrollLock, _Component);

	function ScrollLock() {
		_classCallCheck(this, ScrollLock);

		var _this = _possibleConstructorReturn(this, (ScrollLock.__proto__ || Object.getPrototypeOf(ScrollLock)).call(this));

		_this.lockCount = 0;
		return _this;
	}

	_createClass(ScrollLock, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			if (typeof window === 'undefined') return;

			this.lockCount++;
			if (this.lockCount > 1) return;

			//	FIXME iOS ignores overflow on body
			try {
				var scrollBarWidth = window.innerWidth - document.body.clientWidth;

				var target = document.body;

				target.style.paddingRight = scrollBarWidth + 'px';
				target.style.overflowY = 'hidden';
			} catch (err) {
				console.error('Failed to find body element. Err:', err);
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			if (typeof window === 'undefined' || this.lockCount === 0) return;

			this.lockCount--;
			if (this.lockCount > 0) return; // Still locked

			//	FIXME iOS ignores overflow on body
			try {
				var target = document.body;

				target.style.paddingRight = '';
				target.style.overflowY = '';
			} catch (err) {
				console.error('Failed to find body element. Err:', err);
			}
		}
	}, {
		key: 'render',
		value: function render() {
			return null;
		}
	}]);

	return ScrollLock;
}(_react.Component);

exports.default = ScrollLock;

},{"react":undefined}],392:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	danger: _theme2.default.color.danger,
	default: _theme2.default.color.gray80,
	error: _theme2.default.color.danger,
	info: _theme2.default.color.info,
	primary: _theme2.default.color.primary,
	success: _theme2.default.color.success,
	warning: _theme2.default.color.warning
};

},{"../../../theme":477}],393:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function SegmentedControl(_ref) {
	var className = _ref.className,
	    color = _ref.color,
	    cropText = _ref.cropText,
	    equalWidthSegments = _ref.equalWidthSegments,
	    inline = _ref.inline,
	    onChange = _ref.onChange,
	    options = _ref.options,
	    value = _ref.value,
	    props = _objectWithoutProperties(_ref, ['className', 'color', 'cropText', 'equalWidthSegments', 'inline', 'onChange', 'options', 'value']);

	props.className = (0, _glamor.css)(_styles2.default.control, inline ? _styles2.default.control__inline : null, className);

	return _react2.default.createElement(
		'div',
		props,
		options.map(function (opt) {
			var buttonClassName = (0, _glamor.css)(_styles2.default.button, opt.disabled ? _styles2.default.button__disabled : null, opt.value === value ? _styles2.default['button__' + color] : null, cropText ? _styles2.default.button__cropText : null, equalWidthSegments ? _styles2.default.button__equalWidth : null);

			return _react2.default.createElement(
				'button',
				{
					className: buttonClassName,
					key: opt.value,
					onClick: !opt.disabled && function () {
						return onChange(opt.value);
					},
					type: 'button',
					title: cropText ? opt.label : null,
					tabIndex: opt.disabled ? '-1' : ''
				},
				opt.label
			);
		})
	);
};

var valuePropShape = [_react.PropTypes.bool, _react.PropTypes.number, _react.PropTypes.string];

SegmentedControl.propTypes = {
	color: _react.PropTypes.oneOf(Object.keys(_colors2.default)),
	cropText: _react.PropTypes.bool, // when `inline && equalWidthSegments` crops to the next largest option length
	equalWidthSegments: _react.PropTypes.bool, // only relevant when `inline === false`
	inline: _react.PropTypes.bool,
	onChange: _react.PropTypes.func.isRequired,
	options: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		disabled: _react.PropTypes.bool,
		label: _react.PropTypes.string,
		value: _react.PropTypes.oneOfType(valuePropShape)
	})).isRequired,
	value: _react.PropTypes.oneOfType(valuePropShape)
};
SegmentedControl.defaultProps = {
	color: 'default'
};

module.exports = SegmentedControl;

},{"./colors":392,"./styles":394,"glamor":undefined,"react":undefined}],394:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Segmented Control
// ==============================

/* eslint quote-props: ["error", "as-needed"] */

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Prepare variants
var colorVariants = {};
Object.keys(_colors2.default).forEach(function (color) {
	var pseudoStyles = {
		backgroundColor: _colors2.default[color],
		color: 'white'
	};
	colorVariants['button__' + color] = {
		backgroundColor: _colors2.default[color],
		color: 'white',

		':hover': pseudoStyles,
		':focus': pseudoStyles,
		':active': pseudoStyles
	};
});

module.exports = _extends({
	control: {
		borderWidth: 1,
		borderStyle: 'solid',
		borderColor: _theme2.default.input.border.color.default,
		borderRadius: '0.4em',
		display: 'flex',
		fontSize: _theme2.default.font.size.small,
		paddingLeft: 1,
		paddingRight: 1
	},
	control__inline: {
		display: 'inline-flex'
	},

	// buttons
	button: {
		background: 'none',
		border: 0,
		borderRadius: '0.25em',
		flexGrow: 1,
		margin: '2px 1px',
		padding: '0.3em 0.9em',
		outline: 0,

		':hover': { backgroundColor: 'rgba(0, 0, 0, 0.05)' },
		':focus': { backgroundColor: 'rgba(0, 0, 0, 0.05)' },
		':active': { backgroundColor: 'rgba(0, 0, 0, 0.1)' }
	},
	button__equalWidth: {
		flex: '1 1 0'
	},
	button__cropText: {
		overflow: 'hidden',
		textOverflow: 'ellipsis',
		whiteSpace: 'nowrap'
	},
	button__disabled: {
		opacity: 0.6,
		pointerEvents: 'none'
	}

}, colorVariants);

},{"../../../theme":477,"./colors":392}],395:[function(require,module,exports){
'use strict';

module.exports = ['danger', 'default', 'inverted', 'primary', 'success', 'warning'];

},{}],396:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _ScreenReaderOnly = require('../ScreenReaderOnly');

var _ScreenReaderOnly2 = _interopRequireDefault(_ScreenReaderOnly);

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _sizes = require('./sizes');

var _sizes2 = _interopRequireDefault(_sizes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Spinner(_ref) {
	var className = _ref.className,
	    size = _ref.size,
	    color = _ref.color,
	    props = _objectWithoutProperties(_ref, ['className', 'size', 'color']);

	props.className = (0, _glamor.css)(_styles2.default.base, _styles2.default[size], className);

	return _react2.default.createElement(
		'div',
		props,
		_react2.default.createElement('span', { className: '' + (0, _glamor.css)(_styles2.default.dot, _styles2.default['size__' + size], _styles2.default['color__' + color], _styles2.default.dot__first) }),
		_react2.default.createElement('span', { className: '' + (0, _glamor.css)(_styles2.default.dot, _styles2.default['size__' + size], _styles2.default['color__' + color], _styles2.default.dot__second) }),
		_react2.default.createElement('span', { className: '' + (0, _glamor.css)(_styles2.default.dot, _styles2.default['size__' + size], _styles2.default['color__' + color], _styles2.default.dot__third) }),
		_react2.default.createElement(
			_ScreenReaderOnly2.default,
			null,
			'Loading...'
		)
	);
};

Spinner.propTypes = {
	color: _react.PropTypes.oneOf(_colors2.default),
	size: _react.PropTypes.oneOf(_sizes2.default)
};
Spinner.defaultProps = {
	size: 'medium',
	color: 'default'
};

module.exports = Spinner;

},{"../ScreenReaderOnly":390,"./colors":395,"./sizes":397,"./styles":398,"glamor":undefined,"react":undefined}],397:[function(require,module,exports){
'use strict';

module.exports = ['small', 'medium', 'large'];

},{}],398:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Spinner
// ==============================

var _glamor = require('glamor');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _sizes = require('./sizes');

var _sizes2 = _interopRequireDefault(_sizes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Prepare variants
var colorVariants = {};
_colors2.default.forEach(function (color) {
	colorVariants['color__' + color] = {
		backgroundColor: _theme2.default.spinner.color[color]
	};
});

// Prepare sizes
var sizeVariants = {};
_sizes2.default.forEach(function (size) {
	sizeVariants['size__' + size] = {
		fontSize: _theme2.default.spinner.size[size]
	};
});

// Declare animation keyframes

var keyframes = _glamor.compose.keyframes('pulse', {
	'0%, 80%, 100%': { opacity: 0 },
	'40%': { opacity: 1 }
});

module.exports = _extends({
	base: {
		display: 'inline-block',
		lineHeight: 1,
		textAlign: 'center',
		verticalAlign: 'middle',
		width: '5em'
	},
	small: { fontSize: 4 },
	medium: { fontSize: 8 },
	large: { fontSize: 16 },

	// text
	text: {
		border: 0,
		clip: 'rect(0,0,0,0)',
		height: 1,
		margin: -1,
		overflow: 'hidden',
		padding: 0,
		position: 'absolute',
		width: 1
	},

	// dots
	dot: {
		animationName: keyframes,
		animationDuration: '1s',
		animationIterationCount: 'infinite',
		borderRadius: '1em',
		display: 'inline-block',
		height: '1em',
		verticalAlign: 'top',
		width: '1em'
	},
	dot__second: {
		animationDelay: '160ms',
		marginLeft: '1em'
	},
	dot__third: {
		animationDelay: '320ms',
		marginLeft: '1em'
	}

}, colorVariants, sizeVariants);

},{"../../../theme":477,"./colors":395,"./sizes":397,"glamor":undefined}],399:[function(require,module,exports){
'use strict';

module.exports = {
	Alert: require('./Alert'),
	BlankState: require('./BlankState'),
	Button: require('./Button'),
	Center: require('./Center'),
	Chip: require('./Chip'),
	Container: require('./Container'),
	DropdownButton: require('./DropdownButton'),
	Form: require('./Form'),
	FormField: require('./FormField'),
	FormInput: require('./FormInput'),
	FormLabel: require('./FormLabel'),
	FormNote: require('./FormNote'),
	FormSelect: require('./FormSelect'),
	Glyph: require('./Glyph'),
	GlyphButton: require('./GlyphButton'),
	GlyphField: require('./GlyphField'),
	Grid: require('./Grid'),
	InlineGroup: require('./InlineGroup'),
	InlineGroupSection: require('./InlineGroupSection'),
	LabelledControl: require('./LabelledControl'),
	LoadingButton: require('./LoadingButton'),
	Modal: require('./Modal'),
	Pagination: require('./Pagination'),
	ResponsiveText: require('./ResponsiveText'),
	ScreenReaderOnly: require('./ScreenReaderOnly'),
	SegmentedControl: require('./SegmentedControl'),
	Spinner: require('./Spinner')
};

},{"./Alert":337,"./BlankState":339,"./Button":340,"./Center":342,"./Chip":345,"./Container":347,"./DropdownButton":350,"./Form":362,"./FormField":351,"./FormInput":353,"./FormLabel":356,"./FormNote":358,"./FormSelect":360,"./Glyph":367,"./GlyphButton":364,"./GlyphField":365,"./Grid":373,"./InlineGroup":376,"./InlineGroupSection":374,"./LabelledControl":377,"./LoadingButton":379,"./Modal":384,"./Pagination":385,"./ResponsiveText":389,"./ScreenReaderOnly":390,"./SegmentedControl":393,"./Spinner":396}],400:[function(require,module,exports){
'use strict';

require('babel-polyfill');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactRouter = require('react-router');

var _reactRedux = require('react-redux');

var _reactRouterRedux = require('react-router-redux');

var _App = require('./App');

var _App2 = _interopRequireDefault(_App);

var _Home = require('./screens/Home');

var _Home2 = _interopRequireDefault(_Home);

var _Item = require('./screens/Item');

var _Item2 = _interopRequireDefault(_Item);

var _List = require('./screens/List');

var _List2 = _interopRequireDefault(_List);

var _store = require('./store');

var _store2 = _interopRequireDefault(_store);

var _lists = require('../utils/lists');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Sync the browser history to the Redux store
var history = (0, _reactRouterRedux.syncHistoryWithStore)(_reactRouter.browserHistory, _store2.default);

// Initialise Keystone.User list
/**
 * This is the main entry file, which we compile the main JS bundle from. It
 * only contains the client side routing setup.
 */

// Needed for ES6 generators (redux-saga) to work

Keystone.User = _lists.listsByKey[Keystone.userList];

_reactDom2.default.render(_react2.default.createElement(
	_reactRedux.Provider,
	{ store: _store2.default },
	_react2.default.createElement(
		_reactRouter.Router,
		{ history: history },
		_react2.default.createElement(
			_reactRouter.Route,
			{ path: Keystone.adminPath, component: _App2.default },
			_react2.default.createElement(_reactRouter.IndexRoute, { component: _Home2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: ':listId', component: _List2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: ':listId/:itemId', component: _Item2.default })
		)
	)
), document.getElementById('react-root'));

},{"../utils/lists":482,"./App":327,"./screens/Home":410,"./screens/Item":428,"./screens/List":455,"./store":475,"babel-polyfill":1,"react":undefined,"react-dom":undefined,"react-redux":undefined,"react-router":undefined,"react-router-redux":undefined}],401:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.filtersParser = filtersParser;
exports.filterParser = filterParser;
exports.createFilterObject = createFilterObject;

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _isObject = require('lodash/isObject');

var _isObject2 = _interopRequireDefault(_isObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns an array of expanded filter objects,
 * given (a string representation | an array of filters) and a currentList object.
 *
 * @param { String|Array } Either a string representation of an array of filter objects, or an array of filter objects.
 * @param { Object } the current instantiation of the List prototype used for the <List/> scene
 * @return { Array } of { Objects } as an expanded representation of the filters passed in.
 **/

function filtersParser(filters, currentList) {
	if (typeof filters === 'string') {
		try {
			filters = JSON.parse(filters);
		} catch (e) {
			console.warn('Invalid filters provided', filters);
			filters = void 0;
		}
	}

	if (!filters) return [];

	var assembledFilters = filters.map(function (filter) {
		var path = filter.path;
		var value = _extends({}, filter);
		delete value.path;
		return createFilterObject(path, value, currentList.fields);
	});

	filters = assembledFilters.filter(function (filter) {
		return filter;
	});
	return filters;
}

/**
 * Returns an array of expanded filter objects,
 * given (a string representation | an array of filters) and a currentList object.
 *
 * @param { Object } Filter object  containing the following key value pairs {path} and {value}.
 * @param { Array } of { Objects } an array of the currently active filters.
 * @param { Object } the current instantiation of the List prototype used for the <List/> scene
 * @return { Object } an expanded representation of the passed in filter { Object }.
 **/

function filterParser(_ref, activeFilters, currentList) {
	var path = _ref.path,
	    value = _ref.value;

	if (!activeFilters || !(0, _isArray2.default)(activeFilters)) {
		throw new Error('activeFilters must be an array');
	}
	if (!currentList) {
		throw new Error('No currentList selected');
	}

	if (!(0, _isObject2.default)(currentList) || (0, _isArray2.default)(currentList)) {
		throw new Error('currentList is expected to be an { Object }', currentList);
	}

	var filter = activeFilters.filter(function (i) {
		return i.field.path === path;
	})[0];
	if (filter) {
		filter.value = value;
	} else {
		filter = createFilterObject(path, value, currentList.fields);
		if (!filter) {
			return void 0;
		}
	}
	return filter;
}

/*
* This method is a util, but has such a specific use that it is being left within
* the file that uses it.
*/

/**
 * Returns a filter object
 * given a path, a value, and the fields within an instance of the List prototype.
 *
 * @param { String } filter path
 * @param { Object } of filter values.
 * @param { Object } of fields from the current instance of the List prototype.
 * @return { Object } a filter comprised of the:filters.js
 *	- corresponding field value within the current List,
 *	- and the passed in value { Object }.
 **/

function createFilterObject(path, value, currentListFields) {
	if (!currentListFields || !(0, _isPlainObject2.default)(currentListFields)) {
		console.warn('currentListFields must be a plain object', currentListFields);
		return;
	}

	var field = currentListFields[path];

	if (!field) {
		console.warn('Invalid Filter path specified:', path);
		return;
	}

	return {
		field: field,
		value: value
	};
}

},{"lodash/isArray":564,"lodash/isObject":570,"lodash/isPlainObject":572}],402:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.columnsParser = exports.sortParser = exports.filterParser = exports.filtersParser = exports.createFilterObject = undefined;

var _filters = require('./filters.js');

/**
 * Returns an array of expanded columns object, given a list of columns and currentList object.
 *
 * @param { String } columns, a string representation of a list of columns.
 * @param { Object } the current instantiation of the List prototype used for the <List/> scene
 * @return { Array } of { Objects } as an expanded representation of the column values passed in.
 */

function columnsParser(columns, currentList) {
	if (!currentList) {
		throw new Error('No currentList selected');
	}
	if (!columns || columns.length === 0) {
		return currentList.expandColumns(currentList.defaultColumns);
	}
	return currentList.expandColumns(columns);
};

/**
 * Returns an expanded sort object, given a sort path and currentList object.
 *
 * @param { String } path, a string representation of a list of columns.
 * @param { Object } the current instantiation of the List prototype used for the <List/> scene
 * @return { Object } an expanded representation of the sort path passed in.
 */

function sortParser(path, currentList) {
	if (!currentList) {
		throw new Error('No currentList selected');
	}
	if (!path) return currentList.expandSort(currentList.defaultSort);
	return currentList.expandSort(path);
}

exports.createFilterObject = _filters.createFilterObject;
exports.filtersParser = _filters.filtersParser;
exports.filterParser = _filters.filterParser;
exports.sortParser = sortParser;
exports.columnsParser = columnsParser;

},{"./filters.js":401}],403:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.setActiveColumnsSaga = setActiveColumnsSaga;
exports.setActiveSortSaga = setActiveSortSaga;
exports.setActiveFilterSaga = setActiveFilterSaga;

var _reduxSaga = require('redux-saga');

var _effects = require('redux-saga/effects');

var _constants = require('../screens/List/constants');

var actions = _interopRequireWildcard(_constants);

var _queryParamsSagas = require('./queryParamsSagas');

var _parsers = require('../parsers');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(debouncedSearch),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(setActiveColumnsSaga),
    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(setActiveSortSaga),
    _marked4 = /*#__PURE__*/regeneratorRuntime.mark(setActiveFilterSaga),
    _marked5 = /*#__PURE__*/regeneratorRuntime.mark(rootSaga);

/**
 * Debounce the search loading new items by 500ms
 */

function debouncedSearch() {
	var searchString;
	return regeneratorRuntime.wrap(function debouncedSearch$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					_context.next = 2;
					return (0, _effects.select)(function (state) {
						return state.active.search;
					});

				case 2:
					searchString = _context.sent;

					if (!searchString) {
						_context.next = 6;
						break;
					}

					_context.next = 6;
					return (0, _reduxSaga.delay)(500);

				case 6:
					_context.next = 8;
					return (0, _effects.call)(_queryParamsSagas.updateParams);

				case 8:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

function setActiveColumnsSaga() {
	var _ref, columns, _ref2, currentList, newColumns;

	return regeneratorRuntime.wrap(function setActiveColumnsSaga$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					if (!true) {
						_context2.next = 16;
						break;
					}

					_context2.next = 3;
					return (0, _effects.take)(actions.SELECT_ACTIVE_COLUMNS);

				case 3:
					_ref = _context2.sent;
					columns = _ref.columns;
					_context2.next = 7;
					return (0, _effects.select)(function (state) {
						return state.lists;
					});

				case 7:
					_ref2 = _context2.sent;
					currentList = _ref2.currentList;
					_context2.next = 11;
					return (0, _effects.call)(_parsers.columnsParser, columns, currentList);

				case 11:
					newColumns = _context2.sent;
					_context2.next = 14;
					return (0, _effects.put)({ type: actions.SET_ACTIVE_COLUMNS, columns: newColumns });

				case 14:
					_context2.next = 0;
					break;

				case 16:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}

function setActiveSortSaga() {
	var _ref3, path, _ref4, _currentList, sort;

	return regeneratorRuntime.wrap(function setActiveSortSaga$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					if (!true) {
						_context3.next = 16;
						break;
					}

					_context3.next = 3;
					return (0, _effects.take)(actions.SELECT_ACTIVE_SORT);

				case 3:
					_ref3 = _context3.sent;
					path = _ref3.path;
					_context3.next = 7;
					return (0, _effects.select)(function (state) {
						return state.lists;
					});

				case 7:
					_ref4 = _context3.sent;
					_currentList = _ref4.currentList;
					_context3.next = 11;
					return (0, _effects.call)(_parsers.sortParser, path, _currentList);

				case 11:
					sort = _context3.sent;
					_context3.next = 14;
					return (0, _effects.put)({ type: actions.SET_ACTIVE_SORT, sort: sort });

				case 14:
					_context3.next = 0;
					break;

				case 16:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked3, this);
}

function setActiveFilterSaga() {
	var _ref5, filter, _ref6, _currentList2, activeFilters, updatedFilter;

	return regeneratorRuntime.wrap(function setActiveFilterSaga$(_context4) {
		while (1) {
			switch (_context4.prev = _context4.next) {
				case 0:
					if (!true) {
						_context4.next = 19;
						break;
					}

					_context4.next = 3;
					return (0, _effects.take)(actions.SELECT_FILTER);

				case 3:
					_ref5 = _context4.sent;
					filter = _ref5.filter;
					_context4.next = 7;
					return (0, _effects.select)(function (state) {
						return state.lists;
					});

				case 7:
					_ref6 = _context4.sent;
					_currentList2 = _ref6.currentList;
					_context4.next = 11;
					return (0, _effects.select)(function (state) {
						return state.active.filters;
					});

				case 11:
					activeFilters = _context4.sent;
					_context4.next = 14;
					return (0, _effects.call)(_parsers.filterParser, filter, activeFilters, _currentList2);

				case 14:
					updatedFilter = _context4.sent;
					_context4.next = 17;
					return (0, _effects.put)({ type: actions.ADD_FILTER, filter: updatedFilter });

				case 17:
					_context4.next = 0;
					break;

				case 19:
				case 'end':
					return _context4.stop();
			}
		}
	}, _marked4, this);
}

function rootSaga() {
	return regeneratorRuntime.wrap(function rootSaga$(_context5) {
		while (1) {
			switch (_context5.prev = _context5.next) {
				case 0:
					_context5.next = 2;
					return (0, _effects.fork)(_reduxSaga.takeLatest, actions.SET_ACTIVE_SEARCH, debouncedSearch);

				case 2:
					_context5.next = 4;
					return (0, _effects.fork)(_reduxSaga.takeLatest, actions.SET_ACTIVE_LIST, _queryParamsSagas.evalQueryParams);

				case 4:
					_context5.next = 6;
					return (0, _effects.fork)(setActiveSortSaga);

				case 6:
					_context5.next = 8;
					return (0, _effects.fork)(setActiveColumnsSaga);

				case 8:
					_context5.next = 10;
					return (0, _effects.fork)(setActiveFilterSaga);

				case 10:
					_context5.next = 12;
					return (0, _effects.fork)(_reduxSaga.takeLatest, [actions.QUERY_HAS_CHANGED, actions.ADD_FILTER, actions.SET_ACTIVE_COLUMNS, actions.SET_ACTIVE_SORT, actions.SET_CURRENT_PAGE, actions.CLEAR_FILTER, actions.CLEAR_ALL_FILTERS], _queryParamsSagas.updateParams);

				case 12:
				case 'end':
					return _context5.stop();
			}
		}
	}, _marked5, this);
}

exports.default = rootSaga;

},{"../parsers":402,"../screens/List/constants":454,"./queryParamsSagas":404,"redux-saga":undefined,"redux-saga/effects":579}],404:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.urlUpdate = urlUpdate;
exports.updateParams = updateParams;
exports.evalQueryParams = evalQueryParams;
exports.parseQueryParams = parseQueryParams;

var _queryParams = require('../../utils/queryParams');

var _reactRouterRedux = require('react-router-redux');

var _effects = require('redux-saga/effects');

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _constants = require('../screens/List/constants');

var actions = _interopRequireWildcard(_constants);

var _actions = require('../screens/List/actions');

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _parsers = require('../parsers');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(urlUpdate),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(updateParams),
    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(evalQueryParams);

function urlUpdate(query, cache, pathname) {
	var blacklistedField, attenuatedQuery, attenuatedCache;
	return regeneratorRuntime.wrap(function urlUpdate$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					blacklistedField = 'search';
					attenuatedQuery = (0, _blacklist2.default)(query, blacklistedField);
					attenuatedCache = (0, _blacklist2.default)(cache, blacklistedField);

					if ((0, _isEqual2.default)(attenuatedQuery, attenuatedCache)) {
						_context.next = 8;
						break;
					}

					_context.next = 6;
					return (0, _effects.put)((0, _reactRouterRedux.push)({
						pathname: pathname,
						query: query
					}));

				case 6:
					_context.next = 10;
					break;

				case 8:
					_context.next = 10;
					return (0, _effects.put)((0, _reactRouterRedux.replace)({
						pathname: pathname,
						query: query
					}));

				case 10:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}
/**
 * Update the query params based on the current state
 */
function updateParams() {
	var activeState, currentList, location, _ref, index, sort, page, columns, search, filters, newParams;

	return regeneratorRuntime.wrap(function updateParams$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					_context2.next = 2;
					return (0, _effects.select)(function (state) {
						return state.active;
					});

				case 2:
					activeState = _context2.sent;
					_context2.next = 5;
					return (0, _effects.select)(function (state) {
						return state.lists.currentList;
					});

				case 5:
					currentList = _context2.sent;
					_context2.next = 8;
					return (0, _effects.select)(function (state) {
						return state.routing.locationBeforeTransitions;
					});

				case 8:
					location = _context2.sent;
					_context2.next = 11;
					return (0, _effects.select)(function (state) {
						return state.lists.page;
					});

				case 11:
					_ref = _context2.sent;
					index = _ref.index;


					// Get the data into the right format, set the defaults
					sort = (0, _queryParams.createSortQueryParams)(activeState.sort.rawInput, currentList.defaultSort);
					page = (0, _queryParams.createPageQueryParams)(index, 1);
					columns = (0, _queryParams.stringifyColumns)(activeState.columns, currentList.defaultColumnPaths);
					search = activeState.search;
					filters = (0, _queryParams.parametizeFilters)(activeState.filters);
					newParams = (0, _queryParams.updateQueryParams)({
						page: page,
						columns: columns,
						sort: sort,
						search: search,
						filters: filters
					}, location);

					// TODO: Starting or clearing a search pushes a new history state, but updating
					// the current search replaces it for nicer history navigation support

					_context2.next = 21;
					return (0, _effects.put)({ type: actions.REPLACE_CACHED_QUERY, cachedQuery: newParams });

				case 21:
					return _context2.delegateYield(urlUpdate(newParams, activeState.cachedQuery, location.pathname), 't0', 22);

				case 22:
					_context2.next = 24;
					return (0, _effects.put)((0, _actions.loadItems)());

				case 24:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}

function evalQueryParams() {
	var _ref2, pathname, query, _ref3, cachedQuery, _ref4, currentList, parsedQuery;

	return regeneratorRuntime.wrap(function evalQueryParams$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					_context3.next = 2;
					return (0, _effects.select)(function (state) {
						return state.routing.locationBeforeTransitions;
					});

				case 2:
					_ref2 = _context3.sent;
					pathname = _ref2.pathname;
					query = _ref2.query;
					_context3.next = 7;
					return (0, _effects.select)(function (state) {
						return state.active;
					});

				case 7:
					_ref3 = _context3.sent;
					cachedQuery = _ref3.cachedQuery;
					_context3.next = 11;
					return (0, _effects.select)(function (state) {
						return state.lists;
					});

				case 11:
					_ref4 = _context3.sent;
					currentList = _ref4.currentList;

					if (!(pathname !== Keystone.adminPath + '/' + currentList.id)) {
						_context3.next = 15;
						break;
					}

					return _context3.abrupt('return');

				case 15:
					if (!(0, _isEqual2.default)(query, cachedQuery)) {
						_context3.next = 22;
						break;
					}

					_context3.next = 18;
					return (0, _effects.put)({ type: actions.QUERY_HAS_NOT_CHANGED });

				case 18:
					_context3.next = 20;
					return (0, _effects.put)((0, _actions.loadItems)());

				case 20:
					_context3.next = 27;
					break;

				case 22:
					_context3.next = 24;
					return (0, _effects.call)(parseQueryParams, query, currentList);

				case 24:
					parsedQuery = _context3.sent;
					_context3.next = 27;
					return (0, _effects.put)({ type: actions.QUERY_HAS_CHANGED, parsedQuery: parsedQuery });

				case 27:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked3, this);
}

function parseQueryParams(query, currentList) {
	var columns = (0, _parsers.columnsParser)(query.columns, currentList);
	var sort = (0, _parsers.sortParser)(query.sort, currentList);
	var filters = (0, _parsers.filtersParser)(query.filters, currentList);
	var currentPage = query.page || 1;
	var search = query.search || '';

	return {
		columns: columns,
		sort: sort,
		filters: filters,
		currentPage: currentPage,
		search: search
	};
}

},{"../../utils/queryParams":483,"../parsers":402,"../screens/List/actions":432,"../screens/List/constants":454,"blacklist":undefined,"lodash/isEqual":567,"react-router-redux":undefined,"redux-saga/effects":579}],405:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.loadCounts = loadCounts;
exports.countsLoaded = countsLoaded;
exports.countsLoadingError = countsLoadingError;

var _xhr = require('xhr');

var _xhr2 = _interopRequireDefault(_xhr);

var _constants = require('./constants');

var _constants2 = require('../../../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Load the counts of all lists
 */
function loadCounts() {
	return function (dispatch) {
		dispatch({
			type: _constants.LOAD_COUNTS
		});
		(0, _xhr2.default)({
			url: Keystone.adminPath + '/api/counts'
		}, function (err, resp, body) {
			if (err) {
				dispatch(countsLoadingError(err));
				return;
			}
			try {
				body = JSON.parse(body);
				if (body.counts) {
					dispatch(countsLoaded(body.counts));
				}
			} catch (e) {
				console.log('Error parsing results json:', e, body);
				dispatch(countsLoadingError(e));
				return;
			}
		});
	};
}

/**
 * Dispatched when the counts were loaded
 *
 * @param  {Object} counts The counts object as returned by the API
 */
function countsLoaded(counts) {
	return {
		type: _constants.COUNTS_LOADING_SUCCESS,
		counts: counts
	};
}

/**
 * Dispatched when unsuccessfully trying to load the counts, will redispatch
 * loadCounts after NETWORK_ERROR_RETRY_DELAY until we get counts back
 *
 * @param  {object} error The error
 */
function countsLoadingError(error) {
	return function (dispatch, getState) {
		dispatch({
			type: _constants.COUNTS_LOADING_ERROR,
			error: error
		});
		setTimeout(function () {
			dispatch(loadCounts());
		}, _constants2.NETWORK_ERROR_RETRY_DELAY);
	};
}

},{"../../../constants":476,"./constants":409,"xhr":undefined}],406:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Displays information about a list and lets you create a new one.
 */
var ListTile = _react2.default.createClass({
	displayName: 'ListTile',

	propTypes: {
		count: _react2.default.PropTypes.string,
		hideCreateButton: _react2.default.PropTypes.bool,
		href: _react2.default.PropTypes.string,
		label: _react2.default.PropTypes.string,
		path: _react2.default.PropTypes.string,
		spinner: _react2.default.PropTypes.object
	},
	render: function render() {
		var opts = {
			'data-list-path': this.props.path
		};
		return _react2.default.createElement(
			'div',
			_extends({ className: 'dashboard-group__list' }, opts),
			_react2.default.createElement(
				'span',
				{ className: 'dashboard-group__list-inner' },
				_react2.default.createElement(
					_reactRouter.Link,
					{ to: this.props.href, className: 'dashboard-group__list-tile' },
					_react2.default.createElement(
						'div',
						{ className: 'dashboard-group__list-label' },
						this.props.label
					),
					_react2.default.createElement(
						'div',
						{ className: 'dashboard-group__list-count' },
						this.props.spinner || this.props.count
					)
				),
				!this.props.hideCreateButton && _react2.default.createElement(_reactRouter.Link, {
					to: this.props.href + '?create',
					className: 'dashboard-group__list-create octicon octicon-plus',
					title: 'Create',
					tabIndex: '-1'
				})
			)
		);
	}
});

module.exports = ListTile;

},{"react":undefined,"react-router":undefined}],407:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Lists = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _reactRedux = require('react-redux');

var _string = require('../../../../utils/string');

var _ListTile = require('./ListTile');

var _ListTile2 = _interopRequireDefault(_ListTile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Lists = exports.Lists = function (_React$Component) {
	_inherits(Lists, _React$Component);

	function Lists() {
		_classCallCheck(this, Lists);

		return _possibleConstructorReturn(this, (Lists.__proto__ || Object.getPrototypeOf(Lists)).apply(this, arguments));
	}

	_createClass(Lists, [{
		key: 'render',
		value: function render() {
			var _this2 = this;

			return _react2.default.createElement(
				'div',
				{ className: 'dashboard-group__lists' },
				_lodash2.default.map(this.props.lists, function (list, key) {
					// If an object is passed in the key is the index,
					// if an array is passed in the key is at list.key
					var listKey = list.key || key;
					var href = list.external ? list.path : Keystone.adminPath + '/' + list.path;
					var listData = _this2.props.listsData[list.path];
					var isNoCreate = listData ? listData.nocreate : false;
					return _react2.default.createElement(_ListTile2.default, {
						key: list.path,
						path: list.path,
						label: list.label,
						hideCreateButton: isNoCreate,
						href: href,
						count: (0, _string.plural)(_this2.props.counts[listKey], '* Item', '* Items'),
						spinner: _this2.props.spinner
					});
				})
			);
		}
	}]);

	return Lists;
}(_react2.default.Component);

Lists.propTypes = {
	counts: _react2.default.PropTypes.object.isRequired,
	lists: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.array, _react2.default.PropTypes.object]).isRequired,
	spinner: _react2.default.PropTypes.node
};

exports.default = (0, _reactRedux.connect)(function (state) {
	return {
		listsData: state.lists.data
	};
})(Lists);

},{"../../../../utils/string":484,"./ListTile":406,"lodash":undefined,"react":undefined,"react-redux":undefined}],408:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getRelatedIconClass = require('../utils/getRelatedIconClass');

var _getRelatedIconClass2 = _interopRequireDefault(_getRelatedIconClass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Section = function (_React$Component) {
	_inherits(Section, _React$Component);

	function Section() {
		_classCallCheck(this, Section);

		return _possibleConstructorReturn(this, (Section.__proto__ || Object.getPrototypeOf(Section)).apply(this, arguments));
	}

	_createClass(Section, [{
		key: 'render',
		value: function render() {
			var iconClass = this.props.icon || (0, _getRelatedIconClass2.default)(this.props.id);
			return _react2.default.createElement(
				'div',
				{ className: 'dashboard-group', 'data-section-label': this.props.label },
				_react2.default.createElement(
					'div',
					{ className: 'dashboard-group__heading' },
					_react2.default.createElement('span', { className: 'dashboard-group__heading-icon ' + iconClass }),
					this.props.label
				),
				this.props.children
			);
		}
	}]);

	return Section;
}(_react2.default.Component);

Section.propTypes = {
	children: _react2.default.PropTypes.element.isRequired,
	icon: _react2.default.PropTypes.string,
	id: _react2.default.PropTypes.string,
	label: _react2.default.PropTypes.string.isRequired
};

exports.default = Section;

},{"../utils/getRelatedIconClass":412,"react":undefined}],409:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var LOAD_COUNTS = exports.LOAD_COUNTS = 'app/Home/LOAD_COUNTS';
var COUNTS_LOADING_SUCCESS = exports.COUNTS_LOADING_SUCCESS = 'app/Home/COUNTS_LOADING_SUCCESS';
var COUNTS_LOADING_ERROR = exports.COUNTS_LOADING_ERROR = 'app/Home/COUNTS_LOADING_ERROR';

},{}],410:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.HomeView = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../elemental');

var _reactRedux = require('react-redux');

var _Lists = require('./components/Lists');

var _Lists2 = _interopRequireDefault(_Lists);

var _Section = require('./components/Section');

var _Section2 = _interopRequireDefault(_Section);

var _AlertMessages = require('../../shared/AlertMessages');

var _AlertMessages2 = _interopRequireDefault(_AlertMessages);

var _actions = require('./actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HomeView = _react2.default.createClass({
	displayName: 'HomeView',
	getInitialState: function getInitialState() {
		return {
			modalIsOpen: true
		};
	},

	// When everything is rendered, start loading the item counts of the lists
	// from the API
	componentDidMount: function componentDidMount() {
		this.props.dispatch((0, _actions.loadCounts)());
	},
	getSpinner: function getSpinner() {
		if (this.props.counts && Object.keys(this.props.counts).length === 0 && (this.props.error || this.props.loading)) {
			return _react2.default.createElement(_elemental.Spinner, null);
		}
		return null;
	},
	render: function render() {
		var _this = this;

		var spinner = this.getSpinner();
		return _react2.default.createElement(
			_elemental.Container,
			{ 'data-screen-id': 'home' },
			_react2.default.createElement(
				'div',
				{ className: 'dashboard-header' },
				_react2.default.createElement(
					'div',
					{ className: 'dashboard-heading' },
					Keystone.brand
				)
			),
			_react2.default.createElement(
				'div',
				{ className: 'dashboard-groups' },
				this.props.error && _react2.default.createElement(_AlertMessages2.default, {
					alerts: { error: { error: "There is a problem with the network, we're trying to reconnect..."
						} }
				}),
				Keystone.nav.flat ? _react2.default.createElement(_Lists2.default, {
					counts: this.props.counts,
					lists: Keystone.lists,
					spinner: spinner
				}) : _react2.default.createElement(
					'div',
					null,
					Keystone.nav.sections.map(function (navSection) {
						return _react2.default.createElement(
							_Section2.default,
							{ key: navSection.key, id: navSection.key, label: navSection.label },
							_react2.default.createElement(_Lists2.default, {
								counts: _this.props.counts,
								lists: navSection.lists,
								spinner: spinner
							})
						);
					}),
					Keystone.orphanedLists.length ? _react2.default.createElement(
						_Section2.default,
						{ label: 'Other', icon: 'octicon-database' },
						_react2.default.createElement(_Lists2.default, {
							counts: this.props.counts,
							lists: Keystone.orphanedLists,
							spinner: spinner
						})
					) : null
				)
			)
		);
	}
}); /**
     * The Home view is the view one sees at /keystone. It shows a list of all lists,
     * grouped by their section.
     */

exports.HomeView = HomeView;
exports.default = (0, _reactRedux.connect)(function (state) {
	return {
		counts: state.home.counts,
		loading: state.home.loading,
		error: state.home.error
	};
})(HomeView);

},{"../../elemental":399,"../../shared/AlertMessages":458,"./actions":405,"./components/Lists":407,"./components/Section":408,"react":undefined,"react-redux":undefined}],411:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialState = {
	counts: {},
	loading: false,
	error: null
};

function home() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	var action = arguments[1];

	switch (action.type) {
		case _constants.LOAD_COUNTS:
			return (0, _objectAssign2.default)({}, state, {
				loading: true
			});
		case _constants.COUNTS_LOADING_SUCCESS:
			return (0, _objectAssign2.default)({}, state, {
				loading: false,
				counts: action.counts,
				error: null
			});
		case _constants.COUNTS_LOADING_ERROR:
			return (0, _objectAssign2.default)({}, state, {
				loading: false,
				error: action.error
			});
		default:
			return state;
	}
}

exports.default = home;

},{"./constants":409,"object-assign":577}],412:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = getRelatedIconClass;
/**
 * Gets a related icon for a string, returned as a classname to be applied to a span. If no related
 * icon is found, returns a classname for a dot icon
 *
 * @param  [String] string
 * @return [String]        The classname of the icon
 */
function getRelatedIconClass(string) {
	var icons = [{ icon: 'book', sections: ['books', 'posts', 'blog', 'blog-posts', 'stories', 'news-stories', 'content'] }, { icon: 'briefcase', sections: ['businesses', 'companies', 'listings', 'organizations', 'partners'] }, { icon: 'calendar', sections: ['events', 'dates'] }, { icon: 'clock', sections: ['classes', 'hours', 'times'] }, { icon: 'file-media', sections: ['gallery', 'galleries', 'images', 'photos', 'pictures'] }, { icon: 'file-text', sections: ['attachments', 'docs', 'documents', 'files'] }, { icon: 'location', sections: ['locations', 'markers', 'places'] }, { icon: 'mail', sections: ['emails', 'enquiries'] }, { icon: 'megaphone', sections: ['broadcasts', 'jobs', 'talks'] }, { icon: 'organization', sections: ['contacts', 'customers', 'groups', 'members', 'people', 'speakers', 'teams', 'users'] }, { icon: 'package', sections: ['boxes', 'items', 'packages', 'parcels'] }, { icon: 'tag', sections: ['tags'] }];
	var classes = icons.filter(function (obj) {
		return obj.sections.indexOf(string) !== -1;
	}).map(function (obj) {
		return 'octicon octicon-' + obj.icon;
	});

	if (!classes.length) {
		classes.push('octicon octicon-primitive-dot');
	}

	return classes.join(' ');
}

},{}],413:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.selectItem = selectItem;
exports.loadItemData = loadItemData;
exports.loadRelationshipItemData = loadRelationshipItemData;
exports.dataLoaded = dataLoaded;
exports.relationshipDataLoaded = relationshipDataLoaded;
exports.dataLoadingError = dataLoadingError;
exports.deleteItem = deleteItem;
exports.reorderItems = reorderItems;
exports.moveItem = moveItem;
exports.resetItems = resetItems;

var _constants = require('./constants');

var _actions = require('../List/actions');

/**
 * Select an item
 *
 * @param  {String} itemId The item ID
 */
function selectItem(itemId) {
	return {
		type: _constants.SELECT_ITEM,
		id: itemId
	};
}

/**
 * Load the item data of the current item
 */
function loadItemData() {
	return function (dispatch, getState) {
		// Hold on to the id of the item we currently want to load.
		// Dispatch this reference to our redux store to hold on to as a 'loadingRef'.
		var currentItemID = getState().item.id;
		dispatch({
			type: _constants.LOAD_DATA
		});
		var state = getState();
		var list = state.lists.currentList;

		// const itemID = state.item.id;
		// Load a specific item with the utils/List.js helper
		list.loadItem(state.item.id, { drilldown: true }, function (err, itemData) {

			// Once this async request has fired this callback, check that
			// the item id referenced by thisLoadRef is the same id
			// referenced by loadingRef in the redux store.

			// If it is, then this is the latest request, and it is safe to resolve it normally.
			// If it is not the same id however,
			// this means that this request is NOT the latest fired request,
			// and so we'll bail out of it early.

			if (getState().item.id !== currentItemID) return;
			if (err || !itemData) {
				dispatch(dataLoadingError(err));
			} else {
				dispatch(dataLoaded(itemData));
			}
		});
	};
}

function loadRelationshipItemData(_ref) {
	var columns = _ref.columns,
	    refList = _ref.refList,
	    relationship = _ref.relationship,
	    relatedItemId = _ref.relatedItemId;

	return function (dispatch, getState) {
		refList.loadItems({
			columns: columns,
			filters: [{
				field: refList.fields[relationship.refPath],
				value: { value: relatedItemId }
			}]
		}, function (err, items) {
			// // TODO: indicate pagination & link to main list view
			// this.setState({ items });
			dispatch(relationshipDataLoaded(relationship.path, items));
		});
	};
}

/**
 * Called when data of the current item is loaded
 *
 * @param  {Object} data The item data
 */
function dataLoaded(data) {
	return {
		type: _constants.DATA_LOADING_SUCCESS,
		loadingRef: null,
		data: data
	};
}

function relationshipDataLoaded(path, data) {
	return {
		type: _constants.LOAD_RELATIONSHIP_DATA,
		relationshipPath: path,
		data: data
	};
};

/**
 * Called when there was an error during the loading of the current item data,
 * will retry loading the data ever NETWORK_ERROR_RETRY_DELAY milliseconds
 *
 * @param  {Object} error The error
 */
function dataLoadingError(err) {
	return {
		type: _constants.DATA_LOADING_ERROR,
		loadingRef: null,
		error: err
	};
}

/**
 * Deletes an item and optionally redirects to the current list URL
 *
 * @param  {String} id     The ID of the item we want to delete
 * @param  {Object} router A react-router router object. If this is passed, we
 *                         redirect to Keystone.adminPath/currentList.path!
 */
function deleteItem(id, router) {
	return function (dispatch, getState) {
		var state = getState();
		var list = state.lists.currentList;
		list.deleteItem(id, function (err) {
			// If a router is passed, redirect to the current list path,
			// otherwise stay where we are
			if (router) {
				var redirectUrl = Keystone.adminPath + '/' + list.path;
				if (state.lists.page.index && state.lists.page.index > 1) {
					redirectUrl = redirectUrl + '?page=' + state.lists.page.index;
				}
				router.push(redirectUrl);
			}
			// TODO Proper error handling
			if (err) {
				alert('Error deleting item, please try again!');
			} else {
				dispatch((0, _actions.loadItems)());
			}
		});
	};
}

function reorderItems(_ref2) {
	var columns = _ref2.columns,
	    refList = _ref2.refList,
	    relationship = _ref2.relationship,
	    relatedItemId = _ref2.relatedItemId,
	    item = _ref2.item,
	    prevSortOrder = _ref2.prevSortOrder,
	    newSortOrder = _ref2.newSortOrder;

	return function (dispatch, getState) {
		// Send the item, previous sortOrder and the new sortOrder
		// we should get the proper list and new page results in return
		refList.reorderItems(item, prevSortOrder, newSortOrder, {
			columns: columns,
			filters: [{
				field: refList.fields[relationship.refPath],
				value: { value: relatedItemId }
			}]
		}, function (err, items) {
			dispatch(relationshipDataLoaded(relationship.path, items));
			// If err, flash the row alert
			// if (err) {
			// 	dispatch(resetItems(item.id));
			// 	// return this.resetItems(this.findItemById[item.id]);
			// } else {
			// 	dispatch(itemsLoaded(items));
			// 	dispatch(setRowAlert({
			// 		success: item.id,
			// 		fail: false,
			// 	}));
			// }
		});
	};
}

function moveItem(_ref3) {
	var prevIndex = _ref3.prevIndex,
	    newIndex = _ref3.newIndex,
	    relationshipPath = _ref3.relationshipPath,
	    newSortOrder = _ref3.newSortOrder;

	return {
		type: _constants.DRAG_MOVE_ITEM,
		prevIndex: prevIndex,
		newIndex: newIndex,
		relationshipPath: relationshipPath,
		newSortOrder: newSortOrder
	};
}

function resetItems() {
	return {
		type: _constants.DRAG_RESET_ITEMS
	};
}

},{"../List/actions":432,"./constants":427}],414:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _vkey = require('vkey');

var _vkey2 = _interopRequireDefault(_vkey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AltText = function (_Component) {
	_inherits(AltText, _Component);

	function AltText() {
		_classCallCheck(this, AltText);

		var _this = _possibleConstructorReturn(this, (AltText.__proto__ || Object.getPrototypeOf(AltText)).call(this));

		_this.handleKeyDown = _this.handleKeyDown.bind(_this);
		_this.handleKeyUp = _this.handleKeyUp.bind(_this);

		_this.state = {
			modified: false
		};
		return _this;
	}

	_createClass(AltText, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			document.body.addEventListener('keydown', this.handleKeyDown, false);
			document.body.addEventListener('keyup', this.handleKeyUp, false);
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			document.body.removeEventListener('keydown', this.handleKeyDown);
			document.body.removeEventListener('keyup', this.handleKeyUp);
		}
	}, {
		key: 'handleKeyDown',
		value: function handleKeyDown(e) {
			if (_vkey2.default[e.keyCode] !== this.props.modifier) return;
			this.setState({
				modified: true
			});
		}
	}, {
		key: 'handleKeyUp',
		value: function handleKeyUp(e) {
			if (_vkey2.default[e.keyCode] !== this.props.modifier) return;
			this.setState({
				modified: false
			});
		}
	}, {
		key: 'render',
		value: function render() {
			// NOTE `modifier` is declared to remove it from `props`, though never used
			var _props = this.props,
			    Component = _props.component,
			    modified = _props.modified,
			    modifier = _props.modifier,
			    normal = _props.normal,
			    props = _objectWithoutProperties(_props, ['component', 'modified', 'modifier', 'normal']);

			props.children = this.state.modified ? modified : normal;

			return _react2.default.createElement(Component, props);
		}
	}]);

	return AltText;
}(_react.Component);

;

var SUPPORTED_KEYS = ['<alt>', '<control>', '<meta>', '<shift>'];

AltText.propTypes = {
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
	modified: _react.PropTypes.oneOfType([_react.PropTypes.element, _react.PropTypes.string]),
	modifier: _react.PropTypes.oneOf(SUPPORTED_KEYS),
	normal: _react.PropTypes.oneOfType([_react.PropTypes.element, _react.PropTypes.string])
};
AltText.defaultProps = {
	component: 'span',
	modifier: '<alt>'
};

module.exports = AltText;

},{"react":undefined,"vkey":undefined}],415:[function(require,module,exports){
'use strict';

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _DrilldownItem = require('./DrilldownItem');

var _DrilldownItem2 = _interopRequireDefault(_DrilldownItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Drilldown(_ref) {
	var className = _ref.className,
	    items = _ref.items,
	    props = _objectWithoutProperties(_ref, ['className', 'items']);

	props.className = (0, _glamor.css)(classes.drilldown, className);

	return _react2.default.createElement(
		'ul',
		props,
		items.map(function (item, idx) {
			return _react2.default.createElement(_DrilldownItem2.default, {
				href: item.href,
				key: idx,
				label: item.label,
				separate: idx < items.length - 1
			});
		})
	);
};

Drilldown.propTypes = {
	items: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		href: _react.PropTypes.string.isRequired,
		label: _react.PropTypes.string.isRequired,
		separate: _react.PropTypes.bool // FIXME verb; could be better
	})).isRequired
};

var classes = {
	drilldown: {
		display: 'inline-block',
		listStyle: 'none',
		margin: 0,
		padding: 0
	}
};

module.exports = Drilldown;

},{"./DrilldownItem":416,"glamor":undefined,"react":undefined}],416:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _elemental = require('../../../elemental');

var _theme = require('../../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function DrilldownItem(_ref) {
	var className = _ref.className,
	    href = _ref.href,
	    label = _ref.label,
	    separate = _ref.separate,
	    separator = _ref.separator,
	    style = _ref.style,
	    props = _objectWithoutProperties(_ref, ['className', 'href', 'label', 'separate', 'separator', 'style']);

	props.className = (0, _glamor.css)(classes.item, className);

	// remove horizontal padding
	var styles = _extends({
		paddingLeft: 0,
		paddingRight: 0
	}, style);

	return _react2.default.createElement(
		'li',
		props,
		_react2.default.createElement(
			_elemental.Button,
			{
				component: _reactRouter.Link,
				style: styles,
				to: href,
				variant: 'link'
			},
			label
		),
		separate && _react2.default.createElement(
			'span',
			{ className: (0, _glamor.css)(classes.separator) },
			separator
		)
	);
};

DrilldownItem.propTypes = {
	href: _react.PropTypes.string.isRequired,
	label: _react.PropTypes.string.isRequired,
	separate: _react.PropTypes.bool, // FIXME verb; could be better
	separator: _react.PropTypes.oneOfType([_react.PropTypes.element, _react.PropTypes.string])
};
DrilldownItem.defaultProps = {
	separator: _react2.default.createElement(_elemental.Glyph, { name: 'chevron-right' })
};

var classes = {
	item: {
		display: 'inline-block',
		margin: 0,
		padding: 0,
		verticalAlign: 'middle'
	},
	separator: {
		color: _theme2.default.color.gray40,
		marginLeft: '0.5em',
		marginRight: '0.5em'
	}
};

module.exports = DrilldownItem;

},{"../../../../theme":477,"../../../elemental":399,"glamor":undefined,"react":undefined,"react-router":undefined}],417:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _elemental = require('../../../elemental');

var _FieldTypes = require('FieldTypes');

var _color = require('../../../../utils/color');

var _theme = require('../../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _AlertMessages = require('../../../shared/AlertMessages');

var _AlertMessages2 = _interopRequireDefault(_AlertMessages);

var _ConfirmationDialog = require('./../../../shared/ConfirmationDialog');

var _ConfirmationDialog2 = _interopRequireDefault(_ConfirmationDialog);

var _FormHeading = require('./FormHeading');

var _FormHeading2 = _interopRequireDefault(_FormHeading);

var _AltText = require('./AltText');

var _AltText2 = _interopRequireDefault(_AltText);

var _FooterBar = require('./FooterBar');

var _FooterBar2 = _interopRequireDefault(_FooterBar);

var _InvalidFieldType = require('../../../shared/InvalidFieldType');

var _InvalidFieldType2 = _interopRequireDefault(_InvalidFieldType);

var _actions = require('../actions');

var _string = require('../../../../utils/string');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getNameFromData(data) {
	if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
		if (typeof data.first === 'string' && typeof data.last === 'string') {
			return data.first + ' ' + data.last;
		} else if (data.id) {
			return data.id;
		}
	}
	return data;
}

function smoothScrollTop() {
	if (document.body.scrollTop || document.documentElement.scrollTop) {
		window.scrollBy(0, -50);
		var timeOut = setTimeout(smoothScrollTop, 20);
	} else {
		clearTimeout(timeOut);
	}
}

function quickScrollTop() {
	if (document.body.scrollTop || document.documentElement.scrollTop) {
		window.scrollBy(0, -50);
		quickScrollTop();
	}
}

var EditForm = _react2.default.createClass({
	displayName: 'EditForm',
	propTypes: {
		data: _react2.default.PropTypes.object,
		list: _react2.default.PropTypes.object
	},
	getInitialState: function getInitialState() {
		return {
			values: (0, _objectAssign2.default)({}, this.props.data.fields),
			confirmationDialog: null,
			loading: false,
			lastValues: null, // used for resetting
			focusFirstField: !this.props.list.nameField && !this.props.list.nameFieldIsFormHeader
		};
	},
	componentDidMount: function componentDidMount() {
		this.__isMounted = true;
	},
	componentWillUnmount: function componentWillUnmount() {
		this.__isMounted = false;
	},
	getFieldProps: function getFieldProps(field) {
		var props = (0, _objectAssign2.default)({}, field);
		var alerts = this.state.alerts;
		// Display validation errors inline
		if (alerts && alerts.error && alerts.error.error === 'validation errors') {
			if (alerts.error.detail[field.path]) {
				// NOTE: This won't work yet, as ElementalUI doesn't allow
				// passed in isValid, only invalidates via internal state.
				// PR to fix that: https://github.com/elementalui/elemental/pull/149
				props.isValid = false;
			}
		}
		props.value = this.state.values[field.path];
		props.values = this.state.values;
		props.onChange = this.handleChange;
		props.mode = 'edit';
		return props;
	},
	handleChange: function handleChange(event) {
		var values = (0, _objectAssign2.default)({}, this.state.values);

		values[event.path] = event.value;
		this.setState({ values: values });
	},
	toggleDeleteDialog: function toggleDeleteDialog() {
		this.setState({
			deleteDialogIsOpen: !this.state.deleteDialogIsOpen
		});
	},
	toggleResetDialog: function toggleResetDialog() {
		this.setState({
			resetDialogIsOpen: !this.state.resetDialogIsOpen
		});
	},
	handleReset: function handleReset() {
		this.setState({
			values: (0, _objectAssign2.default)({}, this.state.lastValues || this.props.data.fields),
			resetDialogIsOpen: false
		});
	},
	handleDelete: function handleDelete() {
		var data = this.props.data;

		this.props.dispatch((0, _actions.deleteItem)(data.id, this.props.router));
	},
	handleKeyFocus: function handleKeyFocus() {
		var input = this.refs.keyOrIdInput;
		input.select();
	},
	removeConfirmationDialog: function removeConfirmationDialog() {
		this.setState({
			confirmationDialog: null
		});
	},
	updateItem: function updateItem() {
		var _this = this;

		var _props = this.props,
		    data = _props.data,
		    list = _props.list;

		var editForm = this.refs.editForm;
		var formData = new FormData(editForm);
		// Show loading indicator
		this.setState({
			loading: true
		});

		list.updateItem(data.id, formData, function (err, data) {

			//  smoothScrollTop();
			quickScrollTop();
			if (err) {
				_this.setState({
					alerts: {
						error: err
					},
					loading: false
				});
			} else {
				// Success, display success flash messages, replace values
				// TODO: Update key value
				_this.setState({
					alerts: {
						success: {
							success: 'Your changes have been saved successfully'
						}
					},
					lastValues: _this.state.values,
					values: data.fields,
					loading: false
				});
			}
		});
	},
	renderKeyOrId: function renderKeyOrId() {
		var className = 'EditForm__key-or-id';
		var list = this.props.list;

		if (list.nameField && list.autokey && this.props.data[list.autokey.path]) {
			return _react2.default.createElement(
				'div',
				{ className: className },
				_react2.default.createElement(_AltText2.default, {
					modified: 'ID:',
					normal: (0, _string.upcase)(list.autokey.path) + ': ',
					title: 'Press <alt> to reveal the ID',
					className: 'EditForm__key-or-id__label' }),
				_react2.default.createElement(_AltText2.default, {
					modified: _react2.default.createElement('input', { ref: 'keyOrIdInput', onFocus: this.handleKeyFocus, value: this.props.data.id, className: 'EditForm__key-or-id__input', readOnly: true }),
					normal: _react2.default.createElement('input', { ref: 'keyOrIdInput', onFocus: this.handleKeyFocus, value: this.props.data[list.autokey.path], className: 'EditForm__key-or-id__input', readOnly: true }),
					title: 'Press <alt> to reveal the ID',
					className: 'EditForm__key-or-id__field' })
			);
		} else if (list.autokey && this.props.data[list.autokey.path]) {
			return _react2.default.createElement(
				'div',
				{ className: className },
				_react2.default.createElement(
					'span',
					{ className: 'EditForm__key-or-id__label' },
					list.autokey.path,
					': '
				),
				_react2.default.createElement(
					'div',
					{ className: 'EditForm__key-or-id__field' },
					_react2.default.createElement('input', { ref: 'keyOrIdInput', onFocus: this.handleKeyFocus, value: this.props.data[list.autokey.path], className: 'EditForm__key-or-id__input', readOnly: true })
				)
			);
		} else if (list.nameField) {
			return _react2.default.createElement(
				'div',
				{ className: className },
				_react2.default.createElement(
					'span',
					{ className: 'EditForm__key-or-id__label' },
					'ID: '
				),
				_react2.default.createElement(
					'div',
					{ className: 'EditForm__key-or-id__field' },
					_react2.default.createElement('input', { ref: 'keyOrIdInput', onFocus: this.handleKeyFocus, value: this.props.data.id, className: 'EditForm__key-or-id__input', readOnly: true })
				)
			);
		}
	},
	renderNameField: function renderNameField() {
		var nameField = this.props.list.nameField;
		var nameFieldIsFormHeader = this.props.list.nameFieldIsFormHeader;
		var wrapNameField = function wrapNameField(field) {
			return _react2.default.createElement(
				'div',
				{ className: 'EditForm__name-field' },
				field
			);
		};
		if (nameFieldIsFormHeader) {
			var nameFieldProps = this.getFieldProps(nameField);
			nameFieldProps.label = null;
			nameFieldProps.size = 'full';
			nameFieldProps.autoFocus = true;
			nameFieldProps.inputProps = {
				className: 'item-name-field',
				placeholder: nameField.label,
				size: 'large'
			};
			return wrapNameField(_react2.default.createElement(_FieldTypes.Fields[nameField.type], nameFieldProps));
		} else {
			return wrapNameField(_react2.default.createElement(
				'h2',
				null,
				this.props.data.name.replace(/&quot;/g, '"') || '(no" name)'
			));
		}
	},
	renderFormElements: function renderFormElements() {
		var _this2 = this;

		var headings = 0;

		return this.props.list.uiElements.map(function (el, index) {
			// Don't render the name field if it is the header since it'll be rendered in BIG above
			// the list. (see renderNameField method, this is the reverse check of the one it does)
			if (_this2.props.list.nameField && el.field === _this2.props.list.nameField.path && _this2.props.list.nameFieldIsFormHeader) return;

			if (el.type === 'heading') {
				headings++;
				el.options.values = _this2.state.values;
				el.key = 'h-' + headings;
				return _react2.default.createElement(_FormHeading2.default, el);
			}

			if (el.type === 'field') {
				var field = _this2.props.list.fields[el.field];
				var props = _this2.getFieldProps(field);
				if (typeof _FieldTypes.Fields[field.type] !== 'function') {
					return _react2.default.createElement(_InvalidFieldType2.default, { type: field.type, path: field.path, key: field.path });
				}
				props.key = field.path;
				if (index === 0 && _this2.state.focusFirstField) {
					props.autoFocus = true;
				}
				return _react2.default.createElement(_FieldTypes.Fields[field.type], props);
			}
		}, this);
	},
	renderFooterBar: function renderFooterBar() {
		if (this.props.list.noedit && this.props.list.nodelete) {
			return null;
		}

		var loading = this.state.loading;

		var loadingButtonText = loading ? 'Saving' : 'Save';

		// Padding must be applied inline so the FooterBar can determine its
		// innerHeight at runtime. Aphrodite's styling comes later...

		return _react2.default.createElement(
			_FooterBar2.default,
			{ style: _extends({}, styles.footerbarInner, { 'background': '#e8e4e4' }) },
			_react2.default.createElement(
				'div',
				{ style: _extends({}, styles.footerbarInner) },
				!this.props.list.noedit && _react2.default.createElement(
					_elemental.LoadingButton,
					{
						color: 'primary',
						disabled: loading,
						loading: loading,
						onClick: this.updateItem,
						'data-button': 'update'
					},
					loadingButtonText
				),
				!this.props.list.noedit && _react2.default.createElement(
					_elemental.Button,
					{ disabled: loading, onClick: this.toggleResetDialog, variant: 'link', color: 'cancel', 'data-button': 'reset' },
					_react2.default.createElement(_elemental.ResponsiveText, {
						hiddenXS: 'reset changes',
						visibleXS: 'reset'
					})
				),
				!this.props.list.nodelete && _react2.default.createElement(
					_elemental.Button,
					{ disabled: loading, onClick: this.toggleDeleteDialog, variant: 'link', color: 'delete', style: styles.deleteButton, 'data-button': 'delete' },
					_react2.default.createElement(_elemental.ResponsiveText, {
						hiddenXS: 'delete ' + this.props.list.singular.toLowerCase(),
						visibleXS: 'delete'
					})
				)
			)
		);
	},
	renderTrackingMeta: function renderTrackingMeta() {
		// TODO: These fields are visible now, so we don't want this. We may revisit
		// it when we have more granular control over hiding fields in certain
		// contexts, so I'm leaving this code here as a reference for now - JW
		if (true) return null; // if (true) prevents unreachable code linter errpr

		if (!this.props.list.tracking) return null;

		var elements = [];
		var data = {};

		if (this.props.list.tracking.createdAt) {
			data.createdAt = this.props.data.fields[this.props.list.tracking.createdAt];
			if (data.createdAt) {
				elements.push(_react2.default.createElement(
					_elemental.FormField,
					{ key: 'createdAt', label: 'Created on' },
					_react2.default.createElement(
						_elemental.FormInput,
						{ noedit: true, title: (0, _moment2.default)(data.createdAt).format('DD/MM/YYYY h:mm:ssa') },
						(0, _moment2.default)(data.createdAt).format('Do MMM YYYY')
					)
				));
			}
		}

		if (this.props.list.tracking.createdBy) {
			data.createdBy = this.props.data.fields[this.props.list.tracking.createdBy];
			if (data.createdBy && data.createdBy.name) {
				var createdByName = getNameFromData(data.createdBy.name);
				if (createdByName) {
					elements.push(_react2.default.createElement(
						_elemental.FormField,
						{ key: 'createdBy', label: 'Created by' },
						_react2.default.createElement(
							_elemental.FormInput,
							{ noedit: true },
							data.createdBy.name.first,
							' ',
							data.createdBy.name.last
						)
					));
				}
			}
		}

		if (this.props.list.tracking.updatedAt) {
			data.updatedAt = this.props.data.fields[this.props.list.tracking.updatedAt];
			if (data.updatedAt && (!data.createdAt || data.createdAt !== data.updatedAt)) {
				elements.push(_react2.default.createElement(
					_elemental.FormField,
					{ key: 'updatedAt', label: 'Updated on' },
					_react2.default.createElement(
						_elemental.FormInput,
						{ noedit: true, title: (0, _moment2.default)(data.updatedAt).format('DD/MM/YYYY h:mm:ssa') },
						(0, _moment2.default)(data.updatedAt).format('Do MMM YYYY')
					)
				));
			}
		}

		if (this.props.list.tracking.updatedBy) {
			data.updatedBy = this.props.data.fields[this.props.list.tracking.updatedBy];
			if (data.updatedBy && data.updatedBy.name) {
				var updatedByName = getNameFromData(data.updatedBy.name);
				if (updatedByName) {
					elements.push(_react2.default.createElement(
						_elemental.FormField,
						{ key: 'updatedBy', label: 'Updated by' },
						_react2.default.createElement(
							_elemental.FormInput,
							{ noedit: true },
							data.updatedBy.name.first,
							' ',
							data.updatedBy.name.last
						)
					));
				}
			}
		}

		return Object.keys(elements).length ? _react2.default.createElement(
			'div',
			{ className: 'EditForm__meta' },
			_react2.default.createElement(
				'h3',
				{ className: 'form-heading' },
				'Meta'
			),
			elements
		) : null;
	},
	render: function render() {
		var list = this.props.list;

		var message = 'Are you sure you want to delete <strong>' + this.props.data.name + '?</strong>';

		if (list.deletePrompt) {
			message = list.deletePrompt;
		}
		return _react2.default.createElement(
			'form',
			{ ref: 'editForm', className: 'EditForm-container' },
			this.state.alerts ? _react2.default.createElement(_AlertMessages2.default, { alerts: this.state.alerts }) : null,
			_react2.default.createElement(
				_elemental.Grid.Row,
				null,
				_react2.default.createElement(
					_elemental.Grid.Col,
					{ large: 'three-quarters' },
					_react2.default.createElement(
						_elemental.Form,
						{ layout: 'horizontal', component: 'div' },
						this.renderNameField(),
						this.renderKeyOrId(),
						this.renderFormElements(),
						this.renderTrackingMeta()
					)
				),
				_react2.default.createElement(
					_elemental.Grid.Col,
					{ large: 'one-quarter' },
					_react2.default.createElement('span', null)
				)
			),
			this.renderFooterBar(),
			_react2.default.createElement(
				_ConfirmationDialog2.default,
				{
					confirmationLabel: 'Reset',
					isOpen: this.state.resetDialogIsOpen,
					onCancel: this.toggleResetDialog,
					onConfirmation: this.handleReset
				},
				_react2.default.createElement(
					'p',
					null,
					'Reset your changes to ',
					_react2.default.createElement(
						'strong',
						null,
						this.props.data.name
					),
					'?'
				)
			),
			_react2.default.createElement(
				_ConfirmationDialog2.default,
				{
					confirmationLabel: 'Delete',
					isOpen: this.state.deleteDialogIsOpen,
					onCancel: this.toggleDeleteDialog,
					onConfirmation: this.handleDelete
				},
				_react2.default.createElement('span', { dangerouslySetInnerHTML: { __html: message } }),
				_react2.default.createElement('br', null),
				_react2.default.createElement('br', null),
				'This cannot be undone.'
			)
		);
	}
});

var styles = {
	footerbar: {
		backgroundColor: (0, _color.fade)(_theme2.default.color.body, 93),
		boxShadow: '0 -2px 0 rgba(0, 0, 0, 0.1)',
		paddingBottom: 20,
		paddingTop: 20,
		zIndex: 99
	},
	footerbarInner: {
		height: _theme2.default.component.height // FIXME aphrodite bug
	},
	deleteButton: {
		float: 'right'
	}
};

module.exports = EditForm;

},{"../../../../theme":477,"../../../../utils/color":479,"../../../../utils/string":484,"../../../elemental":399,"../../../shared/AlertMessages":458,"../../../shared/InvalidFieldType":464,"../actions":413,"./../../../shared/ConfirmationDialog":459,"./AltText":414,"./FooterBar":420,"./FormHeading":421,"FieldTypes":undefined,"moment":undefined,"object-assign":577,"react":undefined}],418:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.EditFormHeader = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactRedux = require('react-redux');

var _Toolbar = require('./Toolbar');

var _Toolbar2 = _interopRequireDefault(_Toolbar);

var _ToolbarSection = require('./Toolbar/ToolbarSection');

var _ToolbarSection2 = _interopRequireDefault(_ToolbarSection);

var _EditFormHeaderSearch = require('./EditFormHeaderSearch');

var _EditFormHeaderSearch2 = _interopRequireDefault(_EditFormHeaderSearch);

var _reactRouter = require('react-router');

var _Drilldown = require('./Drilldown');

var _Drilldown2 = _interopRequireDefault(_Drilldown);

var _elemental = require('../../../elemental');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EditFormHeader = exports.EditFormHeader = _react2.default.createClass({
	displayName: 'EditFormHeader',
	propTypes: {
		data: _react2.default.PropTypes.object,
		list: _react2.default.PropTypes.object,
		toggleCreate: _react2.default.PropTypes.func
	},
	getInitialState: function getInitialState() {
		return {
			searchString: ''
		};
	},
	toggleCreate: function toggleCreate(visible) {
		this.props.toggleCreate(visible);
	},
	searchStringChanged: function searchStringChanged(event) {
		this.setState({
			searchString: event.target.value
		});
	},
	handleEscapeKey: function handleEscapeKey(event) {
		var escapeKeyCode = 27;

		if (event.which === escapeKeyCode) {
			(0, _reactDom.findDOMNode)(this.refs.searchField).blur();
		}
	},
	renderDrilldown: function renderDrilldown() {
		return _react2.default.createElement(
			_ToolbarSection2.default,
			{ left: true },
			this.renderDrilldownItems(),
			this.renderSearch()
		);
	},
	renderDrilldownItems: function renderDrilldownItems() {
		var _props = this.props,
		    data = _props.data,
		    list = _props.list;

		var items = data.drilldown ? data.drilldown.items : [];

		var backPath = Keystone.adminPath + '/' + list.path;
		var backStyles = { paddingLeft: 0, paddingRight: 0 };
		// Link to the list page the user came from
		if (this.props.listActivePage && this.props.listActivePage > 1) {
			backPath = backPath + '?page=' + this.props.listActivePage;
		}

		// return a single back button when no drilldown exists
		if (!items.length) {
			return _react2.default.createElement(
				_elemental.GlyphButton,
				{
					component: _reactRouter.Link,
					'data-e2e-editform-header-back': true,
					glyph: 'chevron-left',
					position: 'left',
					style: backStyles,
					to: backPath,
					variant: 'link'
				},
				list.plural
			);
		}

		// prepare the drilldown elements
		var drilldown = [];
		items.forEach(function (item, idx) {
			// FIXME @jedwatson
			// we used to support relationships of type MANY where items were
			// represented as siblings inside a single list item; this got a
			// bit messy...
			item.items.forEach(function (link) {
				drilldown.push({
					href: link.href,
					label: link.label,
					title: item.list.singular
				});
			});
		});

		// add the current list to the drilldown
		drilldown.push({
			href: backPath,
			label: list.plural
		});

		return _react2.default.createElement(_Drilldown2.default, { items: drilldown });
	},
	renderSearch: function renderSearch() {
		var list = this.props.list;
		return _react2.default.createElement(
			'form',
			{ action: Keystone.adminPath + '/' + list.path, className: 'EditForm__header__search' },
			_react2.default.createElement(_EditFormHeaderSearch2.default, {
				value: this.state.searchString,
				onChange: this.searchStringChanged,
				onKeyUp: this.handleEscapeKey
			})
		);
	},
	renderInfo: function renderInfo() {
		return _react2.default.createElement(
			_ToolbarSection2.default,
			{ right: true },
			this.renderCreateButton()
		);
	},
	renderCreateButton: function renderCreateButton() {
		var _this = this;

		var _props$list = this.props.list,
		    nocreate = _props$list.nocreate,
		    autocreate = _props$list.autocreate,
		    singular = _props$list.singular;


		if (nocreate) return null;

		var props = {};
		if (autocreate) {
			props.href = '?new' + Keystone.csrf.query;
		} else {
			props.onClick = function () {
				_this.toggleCreate(true);
			};
		}
		return _react2.default.createElement(
			_elemental.GlyphButton,
			_extends({ 'data-e2e-item-create-button': 'true', color: 'success', glyph: 'plus', position: 'left' }, props),
			_react2.default.createElement(_elemental.ResponsiveText, { hiddenXS: 'New ' + singular, visibleXS: 'Create' })
		);
	},
	render: function render() {
		return _react2.default.createElement(
			_Toolbar2.default,
			null,
			this.renderDrilldown(),
			this.renderInfo()
		);
	}
});

exports.default = (0, _reactRedux.connect)(function (state) {
	return {
		listActivePage: state.lists.page.index
	};
})(EditFormHeader);

},{"../../../elemental":399,"./Drilldown":415,"./EditFormHeaderSearch":419,"./Toolbar":426,"./Toolbar/ToolbarSection":425,"react":undefined,"react-dom":undefined,"react-redux":undefined,"react-router":undefined}],419:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _glamor = require('glamor');

var _elemental = require('../../../elemental');

var _theme = require('../../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint quote-props: ["error", "as-needed"] */

var EditFormHeaderSearch = function (_Component) {
	_inherits(EditFormHeaderSearch, _Component);

	function EditFormHeaderSearch() {
		_classCallCheck(this, EditFormHeaderSearch);

		var _this = _possibleConstructorReturn(this, (EditFormHeaderSearch.__proto__ || Object.getPrototypeOf(EditFormHeaderSearch)).call(this));

		_this.focusField = _this.focusField.bind(_this);
		_this.state = { focused: false };
		return _this;
	}

	_createClass(EditFormHeaderSearch, [{
		key: 'focusField',
		value: function focusField() {
			var _this2 = this;

			this.setState({ focused: true }, function () {
				(0, _reactDom.findDOMNode)(_this2.refs.target).focus();
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this3 = this;

			var focused = this.state.focused;

			var _props = this.props,
			    onChange = _props.onChange,
			    onKeyUp = _props.onKeyUp,
			    value = _props.value,
			    props = _objectWithoutProperties(_props, ['onChange', 'onKeyUp', 'value']);

			return focused ? _react2.default.createElement(
				'div',
				{ className: (0, _glamor.css)(classes.wrapper) },
				_react2.default.createElement(_elemental.Glyph, {
					aphroditeStyles: classes.glyph,
					color: _theme2.default.color.gray40,
					name: 'search',
					'data-e2e-search-icon': true
				}),
				_react2.default.createElement(_elemental.FormInput, _extends({
					aphroditeStyles: classes.input,
					name: 'search',
					onBlur: function onBlur() {
						return _this3.setState({ focused: false });
					},
					onChange: onChange,
					onKeyUp: onKeyUp,
					placeholder: 'Search',
					ref: 'target',
					type: 'search',
					value: value
				}, props))
			) : _react2.default.createElement(
				_elemental.GlyphButton,
				{
					color: 'primary',
					glyph: 'search',
					glyphStyle: { marginRight: '0.4em' },
					onClick: this.focusField,
					onFocus: this.focusField,
					position: 'left',
					variant: 'link',
					style: { paddingLeft: '0.7em' },
					'data-e2e-search-icon': true
				},
				'Search'
			);
		}
	}]);

	return EditFormHeaderSearch;
}(_react.Component);

;

// For props "glyph", "glyphColor", and "glyphSize":
// prop type validation will occur within the Glyph component, no need to
// duplicate, just pass it through.
EditFormHeaderSearch.propTypes = {
	onChange: _react.PropTypes.func.isRequired,
	value: _react.PropTypes.string
};

var classes = {
	wrapper: {
		display: 'inline-block',
		position: 'relative',
		verticalAlign: 'middle'
	},

	// input
	input: {
		paddingLeft: '2.2em',
		// opacity: 0,
		transition: 'all 240ms',
		width: 100,

		':focus': {
			// opacity: 1,
			width: 240
		}
	},

	// glyph
	glyph: {
		alignItems: 'center',
		display: 'flex',
		height: '100%',
		justifyContent: 'center',
		position: 'absolute',
		width: '2.2em'
	}
};

module.exports = EditFormHeaderSearch;

// Search
// ------------------------------

// .EditForm__header__search {
// 	display: inline-block;
// 	margin-left: 1em;
// }
// .EditForm__header__search-field {
// 	margin-bottom: 0;
//
// 	.IconField__icon {
// 		color: @app-primary;
// 	}
// }
//
// // make the input appear as a button link until focused
// .EditForm__header__search-input {
// 	// override elemental's transition to catch the width or it looks weird
// 	.transition( all 0.15s ease-in-out );
// 	.placeholder(@link-color);
// 	background: transparent;
// 	border-color: transparent;
// 	box-shadow: none;
// 	display: inline-block;
//
// 	// set the width to only be as long as if it were a button initially
// 	// this is updated on focus to a more comfortable typing length
// 	width: 100px;
//
// 	// decorate the input as a link
// 	&:hover {
// 		.placeholder(@link-hover-color);
// 		border-color: transparent;
// 		cursor: pointer;
//
// 		// handle placeholder text
// 		&::-moz-placeholder { text-decoration: underline; }
// 		&:-ms-input-placeholder { text-decoration: underline; }
// 		&::-webkit-input-placeholder  { text-decoration: underline; }
//
// 		+ .IconField__icon {
// 			color: @link-hover-color;
// 		}
// 	}
//
// 	// return the input to it's natural appearance on focus
// 	&:focus {
// 		.placeholder(@input-placeholder-color);
// 		background: white;
// 		border-color: @input-border-color-focus;
// 		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 0 3px fade(@input-border-color-focus, 10%);
// 		cursor: auto;
// 		outline: 0;
// 		width: 240px;
//
// 		// handle placeholder text
// 		&::-moz-placeholder { text-decoration: none; }
// 		&:-ms-input-placeholder { text-decoration: none; }
// 		&::-webkit-input-placeholder  { text-decoration: none; }
//
// 		+ .IconField__icon {
// 			color: @input-placeholder-color;
// 		}
// 	}
// }
// // hide the search field on small devices
// @media (max-width: 480px) {
// 	.EditForm__header__search {
// 		display: none;
// 	}
// }

},{"../../../../theme":477,"../../../elemental":399,"glamor":undefined,"react":undefined,"react-dom":undefined}],420:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FooterBar = _react2.default.createClass({
	displayName: 'FooterBar',

	propTypes: {
		style: _react2.default.PropTypes.object
	},
	getDefaultProps: function getDefaultProps() {
		return {
			style: {}
		};
	},
	getInitialState: function getInitialState() {
		return {
			position: 'relative',
			width: 'auto',
			height: 'auto',
			top: 0
		};
	},
	componentDidMount: function componentDidMount() {
		// Bail in IE8 because React doesn't support the onScroll event in that browser
		// Conveniently (!) IE8 doesn't have window.getComputedStyle which we also use here
		if (!window.getComputedStyle) return;
		var footer = this.refs.footer;
		this.windowSize = this.getWindowSize();
		var footerStyle = window.getComputedStyle(footer);
		this.footerSize = {
			x: footer.offsetWidth,
			y: footer.offsetHeight + parseInt(footerStyle.marginTop || '0')
		};
		window.addEventListener('scroll', this.recalcPosition, false);
		window.addEventListener('resize', this.recalcPosition, false);
		this.recalcPosition();
	},
	componentWillUnmount: function componentWillUnmount() {
		window.removeEventListener('scroll', this.recalcPosition, false);
		window.removeEventListener('resize', this.recalcPosition, false);
	},
	getWindowSize: function getWindowSize() {
		return {
			x: window.innerWidth,
			y: window.innerHeight
		};
	},
	recalcPosition: function recalcPosition() {
		var wrapper = this.refs.wrapper;

		this.footerSize.x = wrapper.offsetWidth;

		var offsetTop = 0;
		var offsetEl = wrapper;

		while (offsetEl) {
			offsetTop += offsetEl.offsetTop;
			offsetEl = offsetEl.offsetParent;
		}

		var maxY = offsetTop + this.footerSize.y;
		var viewY = window.scrollY + window.innerHeight;

		var newSize = this.getWindowSize();
		var sizeChanged = newSize.x !== this.windowSize.x || newSize.y !== this.windowSize.y;
		this.windowSize = newSize;

		var newState = {
			width: this.footerSize.x,
			height: this.footerSize.y
		};

		if (viewY > maxY && (sizeChanged || this.mode !== 'inline')) {
			this.mode = 'inline';
			newState.top = 0;
			newState.position = 'absolute';
			this.setState(newState);
		} else if (viewY <= maxY && (sizeChanged || this.mode !== 'fixed')) {
			this.mode = 'fixed';
			newState.top = window.innerHeight - this.footerSize.y;
			newState.position = 'fixed';
			this.setState(newState);
		}
	},
	render: function render() {
		var wrapperStyle = {
			height: this.state.height,
			marginTop: 60,
			position: 'relative'
		};
		var footerProps = (0, _blacklist2.default)(this.props, 'children', 'style');
		var footerStyle = (0, _objectAssign2.default)({}, this.props.style, {
			position: this.state.position,
			top: this.state.top,
			width: this.state.width,
			height: this.state.height
		});
		return _react2.default.createElement(
			'div',
			{ ref: 'wrapper', style: wrapperStyle },
			_react2.default.createElement(
				'div',
				_extends({ ref: 'footer', style: footerStyle }, footerProps),
				this.props.children
			)
		);
	}
});

module.exports = FooterBar;

},{"blacklist":undefined,"object-assign":577,"react":undefined}],421:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _evalDependsOn = require('../../../../../../fields/utils/evalDependsOn');

var _evalDependsOn2 = _interopRequireDefault(_evalDependsOn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = _react2.default.createClass({
	displayName: 'FormHeading',
	propTypes: {
		options: _react2.default.PropTypes.object
	},
	render: function render() {
		if (!(0, _evalDependsOn2.default)(this.props.options.dependsOn, this.props.options.values)) {
			return null;
		}
		return _react2.default.createElement(
			'h3',
			{ className: 'form-heading' },
			this.props.content
		);
	}
});

},{"../../../../../../fields/utils/evalDependsOn":485,"react":undefined}],422:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _elemental = require('../../../../elemental');

var _RelatedItemsListDragDrop = require('./RelatedItemsListDragDrop');

var _RelatedItemsListDragDrop2 = _interopRequireDefault(_RelatedItemsListDragDrop);

var _RelatedItemsListRow = require('./RelatedItemsListRow');

var _RelatedItemsListRow2 = _interopRequireDefault(_RelatedItemsListRow);

var _actions = require('../../actions');

var _constants = require('../../../../../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RelatedItemsList = _react2.default.createClass({
	displayName: 'RelatedItemsList',

	propTypes: {
		dispatch: _react2.default.PropTypes.func.isRequired,
		dragNewSortOrder: _react2.default.PropTypes.number,
		items: _react2.default.PropTypes.array,
		list: _react2.default.PropTypes.object.isRequired,
		refList: _react2.default.PropTypes.object.isRequired,
		relatedItemId: _react2.default.PropTypes.string.isRequired,
		relationship: _react2.default.PropTypes.object.isRequired
	},
	getInitialState: function getInitialState() {
		return {
			columns: this.getColumns(),
			err: null,
			items: null
		};
	},
	componentDidMount: function componentDidMount() {
		this.__isMounted = true;
		this.loadItems();
	},
	componentWillUnmount: function componentWillUnmount() {
		this.__isMounted = false;
	},
	isSortable: function isSortable() {
		// Check if the related items should be sortable. The referenced list has to
		//   be sortable and it has to set the current list as it's sortContext.
		var _props = this.props,
		    refList = _props.refList,
		    list = _props.list,
		    relationship = _props.relationship;

		var sortContext = refList.sortContext;
		if (refList.sortable && sortContext) {
			var parts = sortContext.split(':');
			if (parts[0] === list.key && parts[1] === relationship.path) {
				return true;
			}
		}
		return false;
	},
	getColumns: function getColumns() {
		var _props2 = this.props,
		    relationship = _props2.relationship,
		    refList = _props2.refList;

		var columns = refList.expandColumns(refList.defaultColumns);
		return columns.filter(function (i) {
			return i.path !== relationship.refPath;
		});
	},
	loadItems: function loadItems() {
		var _props3 = this.props,
		    refList = _props3.refList,
		    relatedItemId = _props3.relatedItemId,
		    relationship = _props3.relationship;
		var columns = this.state.columns;
		// TODO: Move error to redux store

		if (!refList.fields[relationship.refPath]) {
			var err = _react2.default.createElement(
				_elemental.Alert,
				{ color: 'danger' },
				_react2.default.createElement(
					'strong',
					null,
					'Error:'
				),
				' Related List ',
				_react2.default.createElement(
					'strong',
					null,
					refList.label
				),
				' has no field ',
				_react2.default.createElement(
					'strong',
					null,
					relationship.refPath
				)
			);
			return this.setState({ err: err });
		}
		this.props.dispatch((0, _actions.loadRelationshipItemData)({ columns: columns, refList: refList, relatedItemId: relatedItemId, relationship: relationship }));
	},
	renderItems: function renderItems() {
		var _this = this;

		var tableBody = this.isSortable() ? _react2.default.createElement(_RelatedItemsListDragDrop2.default, _extends({
			columns: this.state.columns,
			items: this.props.items
		}, this.props)) : _react2.default.createElement(
			'tbody',
			null,
			this.props.items.results.map(function (item) {
				return _react2.default.createElement(_RelatedItemsListRow2.default, {
					key: item.id,
					columns: _this.state.columns,
					item: item,
					refList: _this.props.refList
				});
			})
		);
		return this.props.items.results.length ? _react2.default.createElement(
			'div',
			{ className: 'ItemList-wrapper' },
			_react2.default.createElement(
				'table',
				{ cellPadding: '0', cellSpacing: '0', className: 'Table ItemList' },
				this.renderTableCols(),
				this.renderTableHeaders(),
				tableBody
			)
		) : _react2.default.createElement(_elemental.BlankState, {
			heading: 'No related ' + this.props.refList.plural.toLowerCase() + '...',
			style: { marginBottom: '3em' }
		});
	},
	renderTableCols: function renderTableCols() {
		var cols = this.state.columns.map(function (col) {
			return _react2.default.createElement('col', { width: col.width, key: col.path });
		});
		return _react2.default.createElement(
			'colgroup',
			null,
			cols
		);
	},
	renderTableHeaders: function renderTableHeaders() {
		var cells = this.state.columns.map(function (col) {
			return _react2.default.createElement(
				'th',
				{ key: col.path },
				col.label
			);
		});

		// add sort col when available
		if (this.isSortable()) {
			cells.unshift(_react2.default.createElement('th', { width: _constants.TABLE_CONTROL_COLUMN_WIDTH, key: 'sortable' }));
		}

		return _react2.default.createElement(
			'thead',
			null,
			_react2.default.createElement(
				'tr',
				null,
				cells
			)
		);
	},
	render: function render() {
		if (this.state.err) {
			return _react2.default.createElement(
				'div',
				{ className: 'Relationship' },
				this.state.err
			);
		}

		var listHref = Keystone.adminPath + '/' + this.props.refList.path;
		var loadingElement = _react2.default.createElement(
			_elemental.Center,
			{ height: 100 },
			_react2.default.createElement(_elemental.Spinner, null)
		);

		return _react2.default.createElement(
			'div',
			{ className: 'Relationship' },
			_react2.default.createElement(
				'h3',
				{ className: 'Relationship__link' },
				_react2.default.createElement(
					_reactRouter.Link,
					{ to: listHref },
					this.props.refList.label
				)
			),
			this.props.items ? this.renderItems() : loadingElement
		);
	}
});

module.exports = RelatedItemsList;

},{"../../../../../constants":476,"../../../../elemental":399,"../../actions":413,"./RelatedItemsListDragDrop":423,"./RelatedItemsListRow":424,"react":undefined,"react-router":undefined}],423:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDnd = require('react-dnd');

var _reactDndHtml5Backend = require('react-dnd-html5-backend');

var _reactDndHtml5Backend2 = _interopRequireDefault(_reactDndHtml5Backend);

var _RelatedItemsListRow = require('./RelatedItemsListRow');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RelatedItemsListDragDrop = function (_Component) {
	_inherits(RelatedItemsListDragDrop, _Component);

	function RelatedItemsListDragDrop() {
		_classCallCheck(this, RelatedItemsListDragDrop);

		return _possibleConstructorReturn(this, (RelatedItemsListDragDrop.__proto__ || Object.getPrototypeOf(RelatedItemsListDragDrop)).apply(this, arguments));
	}

	_createClass(RelatedItemsListDragDrop, [{
		key: 'render',
		value: function render() {
			var _this2 = this;

			var items = this.props.items;

			return _react2.default.createElement(
				'tbody',
				null,
				items.results.map(function (item, i) {
					return _react2.default.createElement(_RelatedItemsListRow.Sortable, _extends({
						key: item.id,
						index: i,
						item: item
					}, _this2.props));
				})
			);
		}
	}]);

	return RelatedItemsListDragDrop;
}(_react.Component);

;
RelatedItemsListDragDrop.propTypes = {
	columns: _react.PropTypes.array.isRequired,
	dispatch: _react2.default.PropTypes.func.isRequired,
	dragNewSortOrder: _react2.default.PropTypes.number,
	items: _react.PropTypes.array.isRequired,
	list: _react.PropTypes.object.isRequired,
	refList: _react.PropTypes.object.isRequired,
	relatedItemId: _react.PropTypes.string.isRequired,
	relationship: _react.PropTypes.object.isRequired
};

module.exports = (0, _reactDnd.DragDropContext)(_reactDndHtml5Backend2.default)(RelatedItemsListDragDrop);

},{"./RelatedItemsListRow":424,"react":undefined,"react-dnd":undefined,"react-dnd-html5-backend":undefined}],424:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDnd = require('react-dnd');

var _FieldTypes = require('FieldTypes');

var _actions = require('../../actions');

var _ListControl = require('../../../List/components/ListControl');

var _ListControl2 = _interopRequireDefault(_ListControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RelatedItemsListRow = function (_Component) {
	_inherits(RelatedItemsListRow, _Component);

	function RelatedItemsListRow() {
		_classCallCheck(this, RelatedItemsListRow);

		return _possibleConstructorReturn(this, (RelatedItemsListRow.__proto__ || Object.getPrototypeOf(RelatedItemsListRow)).apply(this, arguments));
	}

	_createClass(RelatedItemsListRow, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    columns = _props.columns,
			    item = _props.item,
			    connectDragSource = _props.connectDragSource,
			    connectDropTarget = _props.connectDropTarget,
			    refList = _props.refList;

			var cells = columns.map(function (col, i) {
				var ColumnType = _FieldTypes.Columns[col.type] || _FieldTypes.Columns.__unrecognised__;
				var linkTo = !i ? Keystone.adminPath + '/' + refList.path + '/' + item.id : undefined;
				return _react2.default.createElement(ColumnType, { key: col.path, list: refList, col: col, data: item, linkTo: linkTo });
			});

			// add sortable icon when applicable
			if (connectDragSource) {
				cells.unshift(_react2.default.createElement(_ListControl2.default, { key: '_sort', type: 'sortable', dragSource: connectDragSource }));
			}

			var row = _react2.default.createElement(
				'tr',
				{ key: 'i' + item.id },
				cells
			);

			if (connectDropTarget) {
				return connectDropTarget(row);
			} else {
				return row;
			}
		}
	}]);

	return RelatedItemsListRow;
}(_react.Component);

RelatedItemsListRow.propTypes = {
	columns: _react.PropTypes.array.isRequired,
	dispatch: _react.PropTypes.func.isRequired,
	dragNewSortOrder: _react2.default.PropTypes.number,
	index: _react.PropTypes.number,
	item: _react.PropTypes.object.isRequired,
	refList: _react.PropTypes.object.isRequired,
	relatedItemId: _react.PropTypes.string.isRequired,
	relationship: _react.PropTypes.object.isRequired,
	// Injected by React DnD:
	isDragging: _react.PropTypes.bool, // eslint-disable-line react/sort-prop-types
	connectDragSource: _react.PropTypes.func, // eslint-disable-line react/sort-prop-types
	connectDropTarget: _react.PropTypes.func, // eslint-disable-line react/sort-prop-types
	connectDragPreview: _react.PropTypes.func // eslint-disable-line react/sort-prop-types
};

module.exports = exports = RelatedItemsListRow;

// Expose Sortable

/**
 * Implements drag source.
 */
var dragItem = {
	beginDrag: function beginDrag(props) {
		var send = _extends({}, props);
		// props.dispatch(setDragBase(props.item, props.index));
		return _extends({}, send);
	},
	endDrag: function endDrag(props, monitor, component) {
		// Dropped outside of the drop target, reset rows
		if (!monitor.didDrop()) {
			props.dispatch((0, _actions.resetItems)());
			return;
		}

		var draggedItem = props.item;
		var prevSortOrder = draggedItem.sortOrder;
		var newSortOrder = props.dragNewSortOrder;

		// Dropping on self
		if (prevSortOrder === newSortOrder) {
			props.dispatch((0, _actions.resetItems)());
			return;
		}

		// dropped on a target
		var columns = props.columns,
		    refList = props.refList,
		    relationship = props.relationship,
		    relatedItemId = props.relatedItemId,
		    item = props.item;

		props.dispatch((0, _actions.reorderItems)({ columns: columns, refList: refList, relationship: relationship, relatedItemId: relatedItemId, item: item, prevSortOrder: prevSortOrder, newSortOrder: newSortOrder }));
	}
};

/**
 * Implements drag target.
 */
var dropItem = {
	drop: function drop(props, monitor, component) {
		return _extends({}, props);
	},
	hover: function hover(props, monitor, component) {
		// reset row alerts
		// if (props.rowAlert.success || props.rowAlert.fail) {
		// props.dispatch(setRowAlert({
		// 	reset: true,
		// }));
		// }

		var dragged = monitor.getItem().index;
		var over = props.index;

		// self
		if (dragged === over) {
			return;
		}

		// Since the items are moved on hover, we need to store the new sort order from the dragged over item so we can use it to reorder when the item is dropped.
		props.dispatch((0, _actions.moveItem)({
			prevIndex: dragged,
			newIndex: over,
			relationshipPath: props.relationship.path,
			newSortOrder: props.item.sortOrder
		}));
		monitor.getItem().index = over;
	}
};

/**
 * Specifies the props to inject into your component.
 */
function dragProps(connect, monitor) {
	return {
		connectDragSource: connect.dragSource(),
		isDragging: monitor.isDragging(),
		connectDragPreview: connect.dragPreview()
	};
}

function dropProps(connect) {
	return {
		connectDropTarget: connect.dropTarget()
	};
};

// exports.Sortable = RelatedItemsListRow;
exports.Sortable = (0, _reactDnd.DragSource)('item', dragItem, dragProps)((0, _reactDnd.DropTarget)('item', dropItem, dropProps)(RelatedItemsListRow));

},{"../../../List/components/ListControl":445,"../../actions":413,"FieldTypes":undefined,"react":undefined,"react-dnd":undefined}],425:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ToolbarSection(_ref) {
	var className = _ref.className,
	    left = _ref.left,
	    right = _ref.right,
	    props = _objectWithoutProperties(_ref, ['className', 'left', 'right']);

	props.className = (0, _classnames2.default)('Toolbar__section', {
		'Toolbar__section--left': left,
		'Toolbar__section--right': right
	}, className);

	return _react2.default.createElement('div', props);
};

ToolbarSection.propTypes = {
	left: _react.PropTypes.bool,
	right: _react.PropTypes.bool
};

module.exports = ToolbarSection;

},{"classnames":undefined,"react":undefined}],426:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Toolbar = function Toolbar(props) {
	return _react2.default.createElement('div', _extends({}, props, { className: 'Toolbar' }));
};

Toolbar.displayName = 'Toolbar';
Toolbar.propTypes = {
	children: _react.PropTypes.node.isRequired
};

module.exports = Toolbar;

},{"react":undefined}],427:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var SELECT_ITEM = exports.SELECT_ITEM = 'app/Item/SELECT_ITEM';
var LOAD_DATA = exports.LOAD_DATA = 'app/Item/LOAD_DATA';
var DATA_LOADING_SUCCESS = exports.DATA_LOADING_SUCCESS = 'app/Item/DATA_LOADING_SUCCESS';
var DATA_LOADING_ERROR = exports.DATA_LOADING_ERROR = 'app/Item/DATA_LOADING_ERROR';
var DRAG_MOVE_ITEM = exports.DRAG_MOVE_ITEM = 'app/Item/DRAG_MOVE_ITEM';
var DRAG_RESET_ITEMS = exports.DRAG_RESET_ITEMS = 'app/Item/DRAG_RESET_ITEMS';
var LOAD_RELATIONSHIP_DATA = exports.LOAD_RELATIONSHIP_DATA = 'app/Item/LOAD_RELATIONSHIP_DATA';

},{}],428:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../elemental');

var _reactRedux = require('react-redux');

var _reactRouter = require('react-router');

var _lists = require('../../../utils/lists');

var _CreateForm = require('../../shared/CreateForm');

var _CreateForm2 = _interopRequireDefault(_CreateForm);

var _Alert = require('../../elemental/Alert');

var _Alert2 = _interopRequireDefault(_Alert);

var _EditForm = require('./components/EditForm');

var _EditForm2 = _interopRequireDefault(_EditForm);

var _EditFormHeader = require('./components/EditFormHeader');

var _EditFormHeader2 = _interopRequireDefault(_EditFormHeader);

var _RelatedItemsList = require('./components/RelatedItemsList/RelatedItemsList');

var _RelatedItemsList2 = _interopRequireDefault(_RelatedItemsList);

var _IframeContent = require('../../shared/IframeContent');

var _IframeContent2 = _interopRequireDefault(_IframeContent);

var _actions = require('./actions');

var _actions2 = require('../List/actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ItemView = _react2.default.createClass({
	displayName: 'ItemView',
	contextTypes: {
		router: _react2.default.PropTypes.object.isRequired
	},
	getInitialState: function getInitialState() {
		return {
			createIsOpen: false,
			showIframe: false
		};
	},
	componentDidMount: function componentDidMount() {
		// When we directly navigate to an item without coming from another client
		// side routed page before, we need to select the list before initializing the item
		// We also need to update when the list id has changed
		if (!this.props.currentList || this.props.currentList.id !== this.props.params.listId) {
			this.props.dispatch((0, _actions2.selectList)(this.props.params.listId));
		}
		this.initializeItem(this.props.params.itemId);
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		// We've opened a new item from the client side routing, so initialize
		// again with the new item id
		if (nextProps.params.itemId !== this.props.params.itemId) {
			this.props.dispatch((0, _actions2.selectList)(nextProps.params.listId));
			this.initializeItem(nextProps.params.itemId);
		}
	},

	// Initialize an item
	initializeItem: function initializeItem(itemId) {
		var listItem = this.props.lists.data[this.props.params.listId];
		if (listItem.link.edit) {
			var editLink = listItem.link.edit;
			editLink = editLink.replace(':id', itemId);
			var iframeURL = '' + Keystone.externalHost + editLink;
			this.setState({
				showIframe: true,
				iframeURL: iframeURL
			});
		}
		this.props.dispatch((0, _actions.selectItem)(itemId));
		this.props.dispatch((0, _actions.loadItemData)());
	},

	// Called when a new item is created
	onCreate: function onCreate(item) {
		// Hide the create form
		this.toggleCreateModal(false);
		// Redirect to newly created item path
		var list = this.props.currentList;
		this.context.router.push(Keystone.adminPath + '/' + list.path + '/' + item.id);
	},
	cancelIframe: function cancelIframe() {
		var list = this.props.currentList;
		this.context.router.push(Keystone.adminPath + '/' + list.path);
	},

	// Open and close the create new item modal
	toggleCreateModal: function toggleCreateModal(visible) {
		this.setState({
			createIsOpen: visible
		});
	},

	// Render this items relationships
	renderRelationships: function renderRelationships() {
		var _this = this;

		var relationships = this.props.currentList.relationships;

		var keys = Object.keys(relationships);
		if (!keys.length) return;
		return _react2.default.createElement(
			'div',
			{ className: 'Relationships' },
			_react2.default.createElement(
				_elemental.Container,
				null,
				_react2.default.createElement(
					'h2',
					null,
					'Relationships'
				),
				keys.map(function (key) {
					var relationship = relationships[key];
					var refList = _lists.listsByKey[relationship.ref];
					var _props = _this.props,
					    currentList = _props.currentList,
					    params = _props.params,
					    relationshipData = _props.relationshipData,
					    drag = _props.drag;

					return _react2.default.createElement(_RelatedItemsList2.default, {
						key: relationship.path,
						list: currentList,
						refList: refList,
						relatedItemId: params.itemId,
						relationship: relationship,
						items: relationshipData[relationship.path],
						dragNewSortOrder: drag.newSortOrder,
						dispatch: _this.props.dispatch
					});
				})
			)
		);
	},

	// Handle errors
	handleError: function handleError(error) {
		var detail = error.detail;
		if (detail) {
			// Item not found
			if (detail.name === 'CastError' && detail.path === '_id') {
				return _react2.default.createElement(
					_elemental.Container,
					null,
					_react2.default.createElement(
						_Alert2.default,
						{ color: 'danger', style: { marginTop: '2em' } },
						'No item matching id "',
						this.props.routeParams.itemId,
						'".\xA0',
						_react2.default.createElement(
							_reactRouter.Link,
							{ to: Keystone.adminPath + '/' + this.props.routeParams.listId },
							'Got back to ',
							this.props.routeParams.listId,
							'?'
						)
					)
				);
			}
		}
		if (error.message) {
			// Server down + possibly other errors
			if (error.message === 'Internal XMLHttpRequest Error') {
				return _react2.default.createElement(
					_elemental.Container,
					null,
					_react2.default.createElement(
						_Alert2.default,
						{ color: 'danger', style: { marginTop: '2em' } },
						'We encountered some network problems, please refresh.'
					)
				);
			}
		}
		return _react2.default.createElement(
			_elemental.Container,
			null,
			_react2.default.createElement(
				_Alert2.default,
				{ color: 'danger', style: { marginTop: '2em' } },
				'An unknown error has ocurred, please refresh.'
			)
		);
	},
	render: function render() {
		var _this2 = this;

		// If we don't have any data yet, show the loading indicator
		if (!this.props.ready) {
			return _react2.default.createElement(
				_elemental.Center,
				{ height: '50vh', 'data-screen-id': 'item' },
				_react2.default.createElement(_elemental.Spinner, null)
			);
		}

		var _state = this.state,
		    showIframe = _state.showIframe,
		    iframeURL = _state.iframeURL;

		// When we have the data, render the item view with it

		return _react2.default.createElement(
			'div',
			{ 'data-screen-id': 'item', className: 'flex-column' },
			this.props.error ? this.handleError(this.props.error) : _react2.default.createElement(
				'div',
				{ className: 'flex-column' },
				_react2.default.createElement(
					_elemental.Container,
					{ className: "flex-column" },
					_react2.default.createElement(_EditFormHeader2.default, {
						list: this.props.currentList,
						data: this.props.data,
						toggleCreate: this.toggleCreateModal
					}),
					_react2.default.createElement(_CreateForm2.default, {
						list: this.props.currentList,
						isOpen: this.state.createIsOpen,
						onCancel: function onCancel() {
							return _this2.toggleCreateModal(false);
						},
						onCreate: function onCreate(item) {
							return _this2.onCreate(item);
						}
					}),
					showIframe && iframeURL ? _react2.default.createElement(_IframeContent2.default, { src: iframeURL, show: true, onCancel: this.cancelIframe }) : _react2.default.createElement(_EditForm2.default, {
						list: this.props.currentList,
						data: this.props.data,
						dispatch: this.props.dispatch,
						router: this.context.router
					})
				),
				this.renderRelationships()
			)
		);
	}
});
// import FlashMessages from '../../shared/FlashMessages';

/**
 * Item View
 *
 * This is the item view, it is rendered when users visit a page of a specific
 * item. This mainly renders the form to edit the item content in.
 */

module.exports = (0, _reactRedux.connect)(function (state) {
	return {
		lists: state.lists,
		data: state.item.data,
		loading: state.item.loading,
		ready: state.item.ready,
		error: state.item.error,
		currentList: state.lists.currentList,
		relationshipData: state.item.relationshipData,
		drag: state.item.drag
	};
})(ItemView);

},{"../../../utils/lists":482,"../../elemental":399,"../../elemental/Alert":337,"../../shared/CreateForm":460,"../../shared/IframeContent":463,"../List/actions":432,"./actions":413,"./components/EditForm":417,"./components/EditFormHeader":418,"./components/RelatedItemsList/RelatedItemsList":422,"react":undefined,"react-redux":undefined,"react-router":undefined}],429:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Item reducer, handles the item data and loading
                                                                                                                                                                                                                                                                   */


var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = {
	data: null,
	id: null,
	loading: false,
	ready: false,
	error: null,
	relationshipData: {},
	drag: {
		clonedItems: false,
		newSortOrder: null,
		relationshipPath: false
	}
};

function item() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	var action = arguments[1];

	switch (action.type) {
		case _constants.SELECT_ITEM:
			return (0, _objectAssign2.default)({}, state, {
				ready: false,
				id: action.id,
				data: null
			});
		case _constants.LOAD_DATA:
			return (0, _objectAssign2.default)({}, state, {
				loading: true
			});
		case _constants.DATA_LOADING_SUCCESS:
			return (0, _objectAssign2.default)({}, state, {
				data: action.data,
				loading: false,
				ready: true,
				error: null
			});
		case _constants.DATA_LOADING_ERROR:
			return (0, _objectAssign2.default)({}, state, {
				data: null,
				loading: false,
				ready: true,
				error: action.error
			});
		case _constants.DRAG_MOVE_ITEM:
			var currentItems = state.relationshipData[action.relationshipPath].results;
			// Cache a copy of the current items to reset the items when dismissing a drag and drop if a cached copy doesn't already exist
			var clonedItems = state.drag.clonedItems || currentItems;
			var _item = currentItems[action.prevIndex];
			// Remove item at prevIndex from array and save that array in
			// itemsWithoutItem
			var itemsWithoutItem = currentItems.slice(0, action.prevIndex).concat(currentItems.slice(action.prevIndex + 1, currentItems.length));
			// Add item back in at new index
			itemsWithoutItem.splice(action.newIndex, 0, _item);
			var newRelationshipData = (0, _objectAssign2.default)({}, state.relationshipData[action.relationshipPath], {
				results: itemsWithoutItem
			});
			return (0, _objectAssign2.default)({}, state, {
				drag: {
					newSortOrder: action.newSortOrder,
					clonedItems: clonedItems,
					relationshipPath: action.relationshipPath
				},
				relationshipData: _extends({}, state.relationshipData, _defineProperty({}, action.relationshipPath, newRelationshipData))
			});
		case _constants.DRAG_RESET_ITEMS:
			var originalRelationshipData = (0, _objectAssign2.default)({}, state.relationshipData[state.drag.relationshipPath], {
				results: state.drag.clonedItems
			});
			return (0, _objectAssign2.default)({}, state, {
				drag: {
					newSortOrder: null,
					clonedItems: false,
					relationshipPath: false
				},
				relationshipData: _extends({}, state.relationshipData, _defineProperty({}, state.drag.relationshipPath, originalRelationshipData))
			});
		case _constants.LOAD_RELATIONSHIP_DATA:
			return (0, _objectAssign2.default)({}, state, {
				// Reset drag and drop when relationship data is loaded
				drag: {
					newSortOrder: null,
					clonedItems: false,
					relationshipPath: false
				},
				relationshipData: _extends({}, state.relationshipData, _defineProperty({}, action.relationshipPath, action.data))
			});
		default:
			return state;
	}
}

exports.default = item;

},{"./constants":427,"object-assign":577}],430:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.setActiveSearch = setActiveSearch;
exports.setActiveSort = setActiveSort;
exports.setActiveColumns = setActiveColumns;
exports.setActiveList = setActiveList;
exports.clearFilter = clearFilter;
exports.clearAllFilters = clearAllFilters;
exports.setFilter = setFilter;
exports.clearCachedQuery = clearCachedQuery;

var _constants = require('../constants');

/**
 * Active actions
 */

function setActiveSearch(searchString) {
	return {
		type: _constants.SET_ACTIVE_SEARCH,
		searchString: searchString
	};
}

function setActiveSort(path) {
	return {
		type: _constants.SELECT_ACTIVE_SORT,
		path: path
	};
}

function setActiveColumns(columns) {
	return {
		type: _constants.SELECT_ACTIVE_COLUMNS,
		columns: columns
	};
}

function setActiveList(list, id) {
	return {
		type: _constants.SET_ACTIVE_LIST,
		list: list,
		id: id
	};
}

/**
 * Filtering actions
 */

function clearFilter(path) {
	return {
		type: _constants.CLEAR_FILTER,
		path: path
	};
}

function clearAllFilters() {
	return {
		type: _constants.CLEAR_ALL_FILTERS
	};
}

function setFilter(path, value) {
	return {
		type: _constants.SELECT_FILTER,
		filter: { path: path, value: value }
	};
}

function clearCachedQuery() {
	return {
		type: _constants.CLEAR_CACHED_QUERY
	};
}

},{"../constants":454}],431:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.setDragBase = setDragBase;
exports.resetDragPage = resetDragPage;
exports.resetDragItems = resetDragItems;
exports.setDragItem = setDragItem;
exports.setDragIndex = setDragIndex;
exports.setRowAlert = setRowAlert;
exports.moveItem = moveItem;
exports.reorderItems = reorderItems;
exports.resetItems = resetItems;

var _constants = require('../constants');

var _actions = require('../actions');

function setDragBase(item, index) {
	return function (dispatch) {
		dispatch(resetDragPage());
		dispatch(resetDragItems());
		if (item) {
			dispatch(setDragItem(item));
			if (index) {
				dispatch(setDragIndex(index));
			}
		}
	};
};

function resetDragPage() {
	return {
		type: _constants.RESET_DRAG_PAGE
	};
}

function resetDragItems() {
	return {
		type: _constants.RESET_DRAG_ITEMS
	};
}

function setDragItem(item) {
	return {
		type: _constants.SET_DRAG_ITEM,
		item: item
	};
}

function setDragIndex(index) {
	return {
		type: _constants.SET_DRAG_INDEX,
		index: index
	};
}

function setRowAlert(data) {
	return {
		type: _constants.SET_ROW_ALERT,
		data: data
	};
}

function moveItem(prevIndex, newIndex, options) {
	return {
		type: _constants.DRAG_MOVE_ITEM,
		prevIndex: prevIndex,
		newIndex: newIndex,
		options: options
	};
}

function reorderItems(item, prevSortOrder, newSortOrder, goToPage) {
	// // reset drag
	// defaultDrag();
	return function (dispatch, getState) {
		if (goToPage) {
			// TODO FIGURE OUT IF THIS IS A RACE CONDITION
			dispatch((0, _actions.setCurrentPage)(goToPage));
		}
		var state = getState();
		var list = state.lists.currentList;

		// Send the item, previous sortOrder and the new sortOrder
		// we should get the proper list and new page results in return
		list.reorderItems(item, prevSortOrder, newSortOrder, {
			search: state.active.search,
			filters: state.active.filters,
			sort: state.active.sort,
			columns: state.active.columns,
			page: state.lists.page
		}, function (err, items) {
			// If err, flash the row alert
			if (err) {
				dispatch(resetItems(item.id));
				// return this.resetItems(this.findItemById[item.id]);
			} else {
				dispatch((0, _actions.itemsLoaded)(items));
				dispatch(setRowAlert({
					success: item.id,
					fail: false
				}));
			}
		});
	};
}

function resetItems(itemId) {
	return function (dispatch, getState) {
		var state = getState();
		var _state$lists = state.lists,
		    page = _state$lists.page,
		    drag = _state$lists.drag;


		if (page.index !== drag.page) {
			// We are not on the original page so we need to move back to it
			dispatch((0, _actions.setCurrentPage)(drag.page));
			dispatch((0, _actions.loadItems)({
				fail: true,
				id: itemId
			}));
			// reset drag
			// return defaultDrag();
		}

		// Reset the list if dragout or error
		dispatch(setRowAlert({
			success: false,
			fail: itemId
		}));
		// we use the cached clone since this is the same page
		// the clone contains the proper index numbers which get overwritten on drag
		// _items.results = drag.clonedItems;
		// defaultDrag();
		// this.notifyChange();
	};
}

},{"../actions":432,"../constants":454}],432:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.customActionDownload = exports.customAction = exports.downloadItems = exports.moveItem = exports.setRowAlert = exports.reorderItems = exports.resetItems = exports.setDragBase = exports.deleteItems = exports.itemLoadingError = exports.itemsLoaded = exports.loadItems = exports.clearCachedQuery = exports.setActiveSort = exports.setActiveColumns = exports.setActiveSearch = exports.setActiveFilters = exports.clearAllFilters = exports.clearFilter = exports.setFilter = undefined;
exports.selectList = selectList;
exports.loadInitialItems = loadInitialItems;
exports.setCurrentPage = setCurrentPage;

var _constants = require('../constants');

var _active = require('./active');

var _items = require('./items');

var _dragdrop = require('./dragdrop');

/**
 * Select a list, and set it as the active list. Called whenever the main
 * List component mounts or the list changes.
 *
 * @param  {String} id The list ID, passed via this.props.params.listId
 */
function selectList(id) {
	return function (dispatch, getState) {
		dispatch({
			type: _constants.SELECT_LIST,
			id: id
		});
		dispatch((0, _active.setActiveList)(getState().lists.data[id], id));
	};
}

function loadInitialItems() {
	return {
		type: _constants.INITIAL_LIST_LOAD
	};
}

/**
 * Set the current page
 *
 * @param {Number} index The page number we want to be on
 */
function setCurrentPage(index) {
	return {
		type: _constants.SET_CURRENT_PAGE,
		index: parseInt(index)
	};
}

// Export all actions from here again for easier usability, that they're split up
// should be an implementation detail of List

exports.setFilter = _active.setFilter;
exports.clearFilter = _active.clearFilter;
exports.clearAllFilters = _active.clearAllFilters;
exports.setActiveFilters = _active.setActiveFilters;
exports.setActiveSearch = _active.setActiveSearch;
exports.setActiveColumns = _active.setActiveColumns;
exports.setActiveSort = _active.setActiveSort;
exports.clearCachedQuery = _active.clearCachedQuery;
exports.loadItems = _items.loadItems;
exports.itemsLoaded = _items.itemsLoaded;
exports.itemLoadingError = _items.itemLoadingError;
exports.deleteItems = _items.deleteItems;
exports.setDragBase = _dragdrop.setDragBase;
exports.resetItems = _dragdrop.resetItems;
exports.reorderItems = _dragdrop.reorderItems;
exports.setRowAlert = _dragdrop.setRowAlert;
exports.moveItem = _dragdrop.moveItem;
exports.downloadItems = _items.downloadItems;
exports.customAction = _items.customAction;
exports.customActionDownload = _items.customActionDownload;

},{"../constants":454,"./active":430,"./dragdrop":431,"./items":433}],433:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.loadItems = loadItems;
exports.downloadItems = downloadItems;
exports.itemsLoaded = itemsLoaded;
exports.itemLoadingError = itemLoadingError;
exports.deleteItems = deleteItems;
exports.customAction = customAction;
exports.customActionDownload = customActionDownload;

var _constants = require('../constants');

var _constants2 = require('../../../../constants');

var xhr = require('xhr');
var assign = require('object-assign');
function loadItems() {
	var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	return function (dispatch, getState) {
		var currentLoadCounter = getState().lists.loadCounter + 1;

		dispatch({
			type: _constants.LOAD_ITEMS,
			loadCounter: currentLoadCounter
		});

		// Take a snapshot of the current redux state.
		var state = getState();
		// Hold a reference to the currentList in state.
		var currentList = state.lists.currentList;

		currentList.loadItems({
			search: state.active.search,
			filters: state.active.filters,
			sort: state.active.sort,
			columns: state.active.columns,
			page: state.lists.page
		}, function (err, items) {

			// Create a new state snapshot and compare the current active list id
			// to the id of the currentList referenced above.
			// If they are the same, then this is the latest fetch request, we may resolve this normally.
			// If these are not the same, then it means that this is not the latest fetch request.
			// BAIL OUT!

			if (getState().active.id !== currentList.id) return;
			if (getState().lists.loadCounter > currentLoadCounter) return;
			if (items) {

				// if (page.index !== drag.page && drag.item) {
				// 	// add the dragging item
				// 	if (page.index > drag.page) {
				// 		_items.results.unshift(drag.item);
				// 	} else {
				// 		_items.results.push(drag.item);
				// 	}
				// }
				// _itemsResultsClone = items.results.slice(0);
				//

				// TODO Reenable this
				// if (options.success && options.id) {
				// 	// flashes a success background on the row
				// 	_rowAlert.success = options.id;
				// }
				// if (options.fail && options.id) {
				// 	// flashes a failure background on the row
				// 	_rowAlert.fail = options.id;
				// }

				// Successfully resolve this request in redux and set the loadCounter back to zero.
				dispatch(itemsLoaded(items));
			} else {
				// Catch this error in redux and set the loadCounter back to zero.
				dispatch(itemLoadingError(err));
			}
		});
	};
}

function downloadItems(format, columns) {
	return function (dispatch, getState) {
		var state = getState();
		var active = state.active;
		var currentList = state.lists.currentList;
		var url = currentList.getDownloadURL({
			search: active.search,
			filters: active.filters,
			sort: active.sort,
			columns: columns ? currentList.expandColumns(columns) : active.columns,
			format: format
		});
		window.open(url);
	};
}

function itemsLoaded(items) {
	return {
		type: _constants.ITEMS_LOADED,
		items: items
	};
}

/**
 * Dispatched when unsuccessfully trying to load the items, will redispatch
 * loadItems after NETWORK_ERROR_RETRY_DELAY milliseconds until we get items back
 */

function itemLoadingError() {
	return function (dispatch) {
		dispatch({
			type: _constants.ITEM_LOADING_ERROR,
			err: 'Network request failed'
		});
		setTimeout(function () {
			dispatch(loadItems());
		}, _constants2.NETWORK_ERROR_RETRY_DELAY);
	};
}

function deleteItems(ids) {
	return function (dispatch, getState) {
		var list = getState().lists.currentList;
		list.deleteItems(ids, function (err, data) {
			// TODO ERROR HANDLING
			dispatch(loadItems());
		});
	};
}

function customAction(ids, action, customUpdateValue) {
	return function (dispatch, getState) {

		var formData = new FormData();
		formData.append('ids', ids);
		formData.append('customUpdateValue', customUpdateValue);

		xhr({
			url: '/app/' + action,
			responseType: 'json',
			method: 'PUT',
			headers: assign({}, Keystone.csrf.header),
			body: formData
		}, function (err, resp, data) {
			if (err) return callback(err);

			if (resp.statusCode === 200) {
				dispatch(loadItems());
			} else {
				callback(data);
			}
		});
	};
}

function customActionDownload(id, action) {
	return function (dispatch, getState) {
		var url = '/app/' + action + '?id=' + id;
		window.open(url);
	};
}

},{"../../../../constants":476,"../constants":454,"object-assign":577,"xhr":undefined}],434:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FieldTypes = require('FieldTypes');

var _elemental = require('../../../../elemental');

var _Popout = require('../../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _actions = require('../../actions');

var _getFilterLabel = require('./getFilterLabel');

var _getFilterLabel2 = _interopRequireDefault(_getFilterLabel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Filter = function (_Component) {
	_inherits(Filter, _Component);

	function Filter() {
		_classCallCheck(this, Filter);

		var _this = _possibleConstructorReturn(this, (Filter.__proto__ || Object.getPrototypeOf(Filter)).call(this));

		_this.open = _this.open.bind(_this);
		_this.close = _this.close.bind(_this);
		_this.updateValue = _this.updateValue.bind(_this);
		_this.updateFilter = _this.updateFilter.bind(_this);
		_this.removeFilter = _this.removeFilter.bind(_this);

		_this.state = {
			isOpen: false
		};
		return _this;
	}

	_createClass(Filter, [{
		key: 'open',
		value: function open() {
			this.setState({
				isOpen: true,
				filterValue: this.props.filter.value
			});
		}
	}, {
		key: 'close',
		value: function close() {
			this.setState({
				isOpen: false
			});
		}
	}, {
		key: 'updateValue',
		value: function updateValue(filterValue) {
			this.setState({
				filterValue: filterValue
			});
		}
	}, {
		key: 'updateFilter',
		value: function updateFilter(e) {
			var _props = this.props,
			    dispatch = _props.dispatch,
			    filter = _props.filter;

			dispatch((0, _actions.setFilter)(filter.field.path, this.state.filterValue));
			this.close();
			e.preventDefault();
		}
	}, {
		key: 'removeFilter',
		value: function removeFilter() {
			this.props.dispatch((0, _actions.clearFilter)(this.props.filter.field.path));
		}
	}, {
		key: 'render',
		value: function render() {
			var filter = this.props.filter;

			var filterId = 'activeFilter__' + filter.field.path;
			var FilterComponent = _FieldTypes.Filters[filter.field.type];

			return _react2.default.createElement(
				'span',
				null,
				_react2.default.createElement(_elemental.Chip, {
					label: (0, _getFilterLabel2.default)(filter.field, filter.value),
					onClick: this.open,
					onClear: this.removeFilter,
					color: 'primary',
					id: filterId
				}),
				_react2.default.createElement(
					_Popout2.default,
					{ isOpen: this.state.isOpen, onCancel: this.close, relativeToID: filterId },
					_react2.default.createElement(
						'form',
						{ onSubmit: this.updateFilter },
						_react2.default.createElement(_Popout2.default.Header, { title: 'Edit Filter' }),
						_react2.default.createElement(
							_Popout2.default.Body,
							null,
							_react2.default.createElement(FilterComponent, {
								field: filter.field,
								filter: this.state.filterValue,
								onChange: this.updateValue
							})
						),
						_react2.default.createElement(_Popout2.default.Footer, {
							ref: 'footer',
							primaryButtonIsSubmit: true,
							primaryButtonLabel: 'Apply',
							secondaryButtonAction: this.close,
							secondaryButtonLabel: 'Cancel' })
					)
				)
			);
		}
	}]);

	return Filter;
}(_react.Component);

;

Filter.propTypes = {
	dispatch: _react.PropTypes.func.isRequired,
	filter: _react.PropTypes.shape({
		field: _react.PropTypes.object.isRequired,
		value: _react.PropTypes.object.isRequired
	}).isRequired
};

module.exports = Filter;

},{"../../../../elemental":399,"../../../../shared/Popout":473,"../../actions":432,"./getFilterLabel":438,"FieldTypes":undefined,"react":undefined}],435:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../../../elemental');

var _Filter = require('./Filter');

var _Filter2 = _interopRequireDefault(_Filter);

var _actions = require('../../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListFilters = function ListFilters(_ref) {
	var dispatch = _ref.dispatch,
	    filters = _ref.filters;


	if (!filters.length) return _react2.default.createElement('div', null);

	var dispatchClearAllFilters = function dispatchClearAllFilters() {
		dispatch((0, _actions.clearAllFilters)());
	};

	// Generate the list of filter pills
	var currentFilters = filters.map(function (filter, i) {
		return _react2.default.createElement(_Filter2.default, {
			key: 'f' + i,
			filter: filter,
			dispatch: dispatch
		});
	});

	// When more than 1, append the clear button
	if (currentFilters.length > 1) {
		currentFilters.push(_react2.default.createElement(_elemental.Chip, {
			key: 'listFilters__clear',
			label: 'Clear All',
			onClick: dispatchClearAllFilters
		}));
	}

	var styles = {
		marginBottom: '1em',
		marginTop: '1em'
	};

	return _react2.default.createElement(
		'div',
		{ style: styles },
		currentFilters
	);
};

ListFilters.propTypes = {
	dispatch: _react.PropTypes.func.isRequired,
	filters: _react.PropTypes.array.isRequired
};

module.exports = ListFilters;

},{"../../../../elemental":399,"../../actions":432,"./Filter":434,"react":undefined}],436:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ListFiltersAddForm = require('./ListFiltersAddForm');

var _ListFiltersAddForm2 = _interopRequireDefault(_ListFiltersAddForm);

var _Popout = require('../../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _PopoutList = require('../../../../shared/Popout/PopoutList');

var _PopoutList2 = _interopRequireDefault(_PopoutList);

var _elemental = require('../../../../elemental');

var _ListHeaderButton = require('../ListHeaderButton');

var _ListHeaderButton2 = _interopRequireDefault(_ListHeaderButton);

var _actions = require('../../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListFiltersAdd = _react2.default.createClass({
	displayName: 'ListFiltersAdd',
	propTypes: {
		maxHeight: _react2.default.PropTypes.number
	},
	getDefaultProps: function getDefaultProps() {
		return {
			maxHeight: 360
		};
	},
	getInitialState: function getInitialState() {
		return {
			innerHeight: 0,
			isOpen: false,
			searchString: '',
			selectedField: false
		};
	},
	updateSearch: function updateSearch(e) {
		this.setState({ searchString: e.target.value });
	},
	openPopout: function openPopout() {
		this.setState({ isOpen: true }, this.focusSearch);
	},
	closePopout: function closePopout() {
		this.setState({
			innerHeight: 0,
			isOpen: false,
			searchString: '',
			selectedField: false
		});
	},
	setPopoutHeight: function setPopoutHeight(height) {
		this.setState({ innerHeight: Math.min(this.props.maxHeight, height) });
	},
	navigateBack: function navigateBack() {
		this.setState({
			selectedField: false,
			searchString: '',
			innerHeight: 0
		}, this.focusSearch);
	},
	focusSearch: function focusSearch() {
		(0, _reactDom.findDOMNode)(this.refs.search).focus();
	},
	selectField: function selectField(field) {
		this.setState({
			selectedField: field
		});
	},
	applyFilter: function applyFilter(value) {
		this.props.dispatch((0, _actions.setFilter)(this.state.selectedField.path, value));
		this.closePopout();
	},
	renderList: function renderList() {
		var _this = this;

		var activeFilterFields = this.props.activeFilters.map(function (obj) {
			return obj.field;
		});
		var activeFilterPaths = activeFilterFields.map(function (obj) {
			return obj.path;
		});
		var searchString = this.state.searchString;

		var filteredFilters = this.props.availableFilters;

		if (searchString) {
			filteredFilters = filteredFilters.filter(function (filter) {
				return filter.type !== 'heading';
			}).filter(function (filter) {
				return new RegExp(searchString).test(filter.field.label.toLowerCase());
			});
		}

		var popoutList = filteredFilters.map(function (el, i) {
			if (el.type === 'heading') {
				return _react2.default.createElement(
					_PopoutList2.default.Heading,
					{ key: 'heading_' + i },
					el.content
				);
			}

			var filterIsActive = activeFilterPaths.length && activeFilterPaths.indexOf(el.field.path) > -1;

			return _react2.default.createElement(_PopoutList2.default.Item, {
				key: 'item_' + el.field.path,
				icon: filterIsActive ? 'check' : 'chevron-right',
				iconHover: filterIsActive ? 'check' : 'chevron-right',
				isSelected: !!filterIsActive,
				label: el.field.label,
				onClick: function onClick() {
					_this.selectField(el.field);
				} });
		});

		var formFieldStyles = {
			borderBottom: '1px dashed rgba(0, 0, 0, 0.1)',
			marginBottom: '1em',
			paddingBottom: '1em'
		};

		return _react2.default.createElement(
			_Popout2.default.Pane,
			{ onLayout: this.setPopoutHeight, key: 'list' },
			_react2.default.createElement(
				_Popout2.default.Body,
				null,
				_react2.default.createElement(
					'div',
					{ style: formFieldStyles },
					_react2.default.createElement(_elemental.FormInput, {
						onChange: this.updateSearch,
						placeholder: 'Find a filter...',
						ref: 'search',
						value: this.state.searchString
					})
				),
				popoutList
			)
		);
	},
	renderForm: function renderForm() {
		return _react2.default.createElement(
			_Popout2.default.Pane,
			{ onLayout: this.setPopoutHeight, key: 'form' },
			_react2.default.createElement(_ListFiltersAddForm2.default, {
				activeFilters: this.props.activeFilters,
				field: this.state.selectedField,
				onApply: this.applyFilter,
				onCancel: this.closePopout,
				onBack: this.navigateBack,
				maxHeight: this.props.maxHeight,
				onHeightChange: this.setPopoutHeight,
				dispatch: this.props.dispatch
			})
		);
	},
	render: function render() {
		var _state = this.state,
		    isOpen = _state.isOpen,
		    selectedField = _state.selectedField;

		var popoutBodyStyle = this.state.innerHeight ? { height: this.state.innerHeight } : null;
		var popoutPanesClassname = (0, _classnames2.default)('Popout__panes', {
			'Popout__scrollable-area': !selectedField
		});

		return _react2.default.createElement(
			'div',
			null,
			_react2.default.createElement(_ListHeaderButton2.default, {
				active: isOpen,
				glyph: 'eye',
				id: 'listHeaderFilterButton',
				label: 'Filter',
				onClick: isOpen ? this.closePopout : this.openPopout
			}),
			_react2.default.createElement(
				_Popout2.default,
				{ isOpen: isOpen, onCancel: this.closePopout, relativeToID: 'listHeaderFilterButton' },
				_react2.default.createElement(_Popout2.default.Header, {
					leftAction: selectedField ? this.navigateBack : null,
					leftIcon: selectedField ? 'chevron-left' : null,
					title: selectedField ? selectedField.label : 'Filter',
					transitionDirection: selectedField ? 'next' : 'prev' }),
				_react2.default.createElement(
					_reactAddonsCssTransitionGroup2.default,
					{
						className: popoutPanesClassname,
						component: 'div',
						style: popoutBodyStyle,
						transitionName: selectedField ? 'Popout__pane-next' : 'Popout__pane-prev',
						transitionEnterTimeout: 360,
						transitionLeaveTimeout: 360
					},
					selectedField ? this.renderForm() : this.renderList()
				)
			)
		);
	}
});

module.exports = ListFiltersAdd;

},{"../../../../elemental":399,"../../../../shared/Popout":473,"../../../../shared/Popout/PopoutList":469,"../../actions":432,"../ListHeaderButton":447,"./ListFiltersAddForm":437,"classnames":undefined,"react":undefined,"react-addons-css-transition-group":undefined,"react-dom":undefined}],437:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _Popout = require('../../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _FieldTypes = require('FieldTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListFiltersAddForm = _react2.default.createClass({
	displayName: 'ListFiltersAddForm',

	propTypes: {
		field: _react2.default.PropTypes.object.isRequired,
		maxHeight: _react2.default.PropTypes.number,
		onApply: _react2.default.PropTypes.func,
		onCancel: _react2.default.PropTypes.func,
		onHeightChange: _react2.default.PropTypes.func
	},
	getInitialState: function getInitialState() {
		var _this = this;

		var filterComponent = _FieldTypes.Filters[this.props.field.type];
		var filterValue = this.props.activeFilters.filter(function (i) {
			return i.field.path === _this.props.field.path;
		})[0];
		if (filterValue) {
			filterValue = filterValue.value;
		} else {
			filterValue = filterComponent && filterComponent.getDefaultValue ? filterComponent.getDefaultValue() : {};
		}
		return {
			filterComponent: filterComponent,
			filterValue: filterValue
		};
	},
	updateHeight: function updateHeight(bodyHeight) {
		var _this2 = this;

		bodyHeight += 40; // TODO: remove magic number, currently accounts for padding
		var footerHeight = (0, _reactDom.findDOMNode)(this.refs.footer).offsetHeight;
		var maxBodyHeight = this.props.maxHeight - footerHeight;
		var newHeight = bodyHeight + footerHeight;
		// console.log(bodyHeight, maxBodyHeight, '|', newHeight, this.props.maxHeight);
		this.setState({
			bodyHeight: Math.min(bodyHeight, maxBodyHeight)
		}, function () {
			_this2.props.onHeightChange(Math.min(newHeight, _this2.props.maxHeight));
		});
	},
	updateValue: function updateValue(filterValue) {
		this.setState({
			filterValue: filterValue
		});
	},
	handleFormSubmit: function handleFormSubmit(e) {
		e.preventDefault();
		this.props.onApply(this.state.filterValue);
	},
	renderInvalidFilter: function renderInvalidFilter() {
		return _react2.default.createElement(
			'div',
			null,
			'Error: type ',
			this.props.field.type,
			' has no filter UI.'
		);
	},
	render: function render() {
		var FilterComponent = this.state.filterComponent;
		return _react2.default.createElement(
			'form',
			{ onSubmit: this.handleFormSubmit },
			_react2.default.createElement(
				_Popout2.default.Body,
				{ ref: 'body', scrollable: true, style: { height: this.state.bodyHeight } },
				FilterComponent ? _react2.default.createElement(FilterComponent, { field: this.props.field, filter: this.state.filterValue, onChange: this.updateValue, onHeightChange: this.updateHeight }) : this.renderInvalidFilter()
			),
			_react2.default.createElement(_Popout2.default.Footer, {
				ref: 'footer',
				primaryButtonIsSubmit: true,
				primaryButtonLabel: 'Apply',
				secondaryButtonAction: this.props.onCancel,
				secondaryButtonLabel: 'Cancel' })
		);
	}
});

module.exports = ListFiltersAddForm;

},{"../../../../shared/Popout":473,"FieldTypes":undefined,"react":undefined,"react-dom":undefined}],438:[function(require,module,exports){
'use strict';

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DATE_FORMAT = 'YYYY-MM-DD';
var DATETIME_FORMAT = 'YYYY-MM-DD h:mm:ss a';

function getFilterLabel(field, value) {
	var label = field.label;

	switch (field.type) {
		// BOOLEAN
		case 'boolean':
			{
				return value.value ? label : 'NOT ' + label;
			}

		// DATE
		case 'date':
			{
				return label + ' ' + resolveDateFormat(value, DATE_FORMAT);
			}

		// DATE ARRAY
		case 'datearray':
			{
				var presence = value.presence === 'some' ? 'Some' : 'No';

				return presence + ' ' + label + ' ' + resolveDateFormat(value, DATETIME_FORMAT, 'are');
			}

		// DATETIME
		case 'datetime':
			{
				return label + ' ' + resolveDateFormat(value, DATETIME_FORMAT);
			}

		// GEOPOINT
		// TODO distance needs a qualifier, currently defaults to "km"?
		case 'geopoint':
			{
				var mode = value.distance.mode === 'max' ? 'is within' : 'is at least';
				var distance = value.distance.value + 'km';
				var conjunction = value.distance.mode === 'max' ? 'of' : 'from';
				var latlong = value.lat + ', ' + value.lon;

				return label + ' ' + mode + ' ' + distance + ' ' + conjunction + ' ' + latlong;
			}

		// LOCATION
		case 'location':
			{
				var joiner = value.inverted ? 'does NOT match' : 'matches';

				// Remove undefined values before rendering the template literal
				var formattedValue = [value.street, value.city, value.state, value.code, value.country].join(' ').trim();

				return label + ' ' + joiner + ' "' + formattedValue + '"';
			}

		// NUMBER & MONEY
		case 'number':
		case 'money':
			{
				return label + ' ' + resolveNumberFormat(value);
			}

		// NUMBER ARRAY
		case 'numberarray':
			{
				var _presence = value.presence === 'some' ? 'Some' : 'No';

				return _presence + ' ' + label + ' ' + resolveNumberFormat(value, 'are');
			}

		// PASSWORD
		case 'password':
			{
				return value.exists ? label + ' is set' : label + ' is NOT set';
			}

		// RELATIONSHIP
		// TODO populate relationship, currently rendering an ID
		case 'relationship':
			{
				var _joiner = value.inverted ? 'is NOT' : 'is';
				var _formattedValue = value.value.length > 1 ? value.value.join(', or ') : value.value[0];

				return label + ' ' + _joiner + ' ' + _formattedValue;
			}

		// SELECT
		case 'select':
			{
				var _joiner2 = value.inverted ? 'is NOT' : 'is';
				var _formattedValue2 = value.value.length > 1 ? value.value.join(', or ') : value.value[0];

				return label + ' ' + _joiner2 + ' ' + _formattedValue2;
			}

		// TEXT-LIKE
		case 'code':
		case 'color':
		case 'email':
		case 'html':
		case 'key':
		case 'markdown':
		case 'name':
		case 'text':
		case 'textarea':
		case 'url':
			{
				var _mode = '';
				if (value.mode === 'beginsWith') {
					_mode = value.inverted ? 'does NOT begin with' : 'begins with';
				} else if (value.mode === 'endsWith') {
					_mode = value.inverted ? 'does NOT end with' : 'ends with';
				} else if (value.mode === 'exactly') {
					_mode = value.inverted ? 'is NOT exactly' : 'is exactly';
				} else if (value.mode === 'contains') {
					_mode = value.inverted ? 'does NOT contain' : 'contains';
				}

				return label + ' ' + _mode + ' "' + value.value + '"';
			}

		// TEXTARRAY
		case 'textarray':
			{
				var _presence2 = value.presence === 'some' ? 'Some' : 'No';
				var _mode2 = '';
				if (value.mode === 'beginsWith') {
					_mode2 = value.inverted ? 'do NOT begin with' : 'begin with';
				} else if (value.mode === 'endsWith') {
					_mode2 = value.inverted ? 'do NOT end with' : 'end with';
				} else if (value.mode === 'exactly') {
					_mode2 = value.inverted ? 'are NOT exactly' : 'are exactly';
				} else if (value.mode === 'contains') {
					_mode2 = value.inverted ? 'do NOT contain' : 'contain';
				}

				return _presence2 + ' ' + label + ' ' + _mode2 + ' "' + value.value + '"';
			}

		// CATCHALL
		default:
			{
				return label + ' "' + value.value + '"';
			}
	}
};

function resolveNumberFormat(value) {
	var conjunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'is';

	var mode = '';
	if (value.mode === 'equals') mode = conjunction;else if (value.mode === 'gt') mode = conjunction + ' greater than';else if (value.mode === 'lt') mode = conjunction + ' less than';

	var formattedValue = value.mode === 'between' ? 'is between ' + value.value.min + ' and ' + value.value.max : value.value;

	return mode + ' ' + formattedValue;
}

function resolveDateFormat(value, format) {
	var conjunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is';

	var joiner = value.inverted ? conjunction + ' NOT' : conjunction;
	var mode = value.mode === 'on' ? '' : value.mode;
	var formattedValue = value.mode === 'between' ? (0, _moment2.default)(value.after).format(format) + ' and ' + (0, _moment2.default)(value.before).format(format) : (0, _moment2.default)(value.value).format(format);

	return joiner + ' ' + mode + ' ' + formattedValue;
}

module.exports = getFilterLabel;

},{"moment":undefined}],439:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ItemsTableRow = require('./ItemsTableRow');

var _ItemsTableRow2 = _interopRequireDefault(_ItemsTableRow);

var _ItemsTableDragDrop = require('./ItemsTableDragDrop');

var _ItemsTableDragDrop2 = _interopRequireDefault(_ItemsTableDragDrop);

var _constants = require('../../../../../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ItemsTable = _react2.default.createClass({
	displayName: 'ItemsTable',

	propTypes: {
		checkedItems: _react.PropTypes.object.isRequired,
		columns: _react.PropTypes.array.isRequired,
		deleteTableItem: _react.PropTypes.func.isRequired,
		handleSortSelect: _react.PropTypes.func.isRequired,
		items: _react.PropTypes.object.isRequired,
		list: _react.PropTypes.object.isRequired,
		manageMode: _react.PropTypes.bool.isRequired,
		rowAlert: _react.PropTypes.object.isRequired
	},
	renderCols: function renderCols() {
		var cols = this.props.columns.map(function (col) {
			return _react2.default.createElement('col', { key: col.path, width: col.width });
		});

		// add delete col when available
		if (!this.props.list.nodelete) {
			cols.unshift(_react2.default.createElement('col', { width: _constants.TABLE_CONTROL_COLUMN_WIDTH, key: 'delete' }));
		}

		// add sort col when available
		if (this.props.list.sortable) {
			cols.unshift(_react2.default.createElement('col', { width: _constants.TABLE_CONTROL_COLUMN_WIDTH, key: 'sortable' }));
		}

		return _react2.default.createElement(
			'colgroup',
			null,
			cols
		);
	},
	renderHeaders: function renderHeaders() {
		var _this = this;

		var listControlCount = 0;

		if (this.props.list.sortable) listControlCount++;
		if (!this.props.list.nodelete) listControlCount++;

		// set active sort
		var activeSortPath = this.props.activeSort.paths[0];

		// pad first col when controls are available
		var cellPad = listControlCount ? _react2.default.createElement('th', { colSpan: listControlCount }) : null;

		// map each heading column
		var cellMap = this.props.columns.map(function (col) {
			var isSelected = activeSortPath && activeSortPath.path === col.path;
			var isInverted = isSelected && activeSortPath.invert;
			var buttonTitle = 'Sort by ' + col.label + (isSelected && !isInverted ? ' (desc)' : '');
			var colClassName = (0, _classnames2.default)('ItemList__sort-button th-sort', {
				'th-sort--asc': isSelected && !isInverted,
				'th-sort--desc': isInverted
			});

			return _react2.default.createElement(
				'th',
				{ key: col.path, colSpan: '1' },
				_react2.default.createElement(
					'button',
					{
						className: colClassName,
						onClick: function onClick() {
							_this.props.handleSortSelect(col.path, isSelected && !isInverted);
						},
						title: buttonTitle },
					col.label,
					_react2.default.createElement('span', { className: 'th-sort__icon' })
				)
			);
		});

		return _react2.default.createElement(
			'thead',
			null,
			_react2.default.createElement(
				'tr',
				null,
				cellPad,
				cellMap
			)
		);
	},
	render: function render() {
		var _this2 = this;

		var items = this.props.items;

		if (!items.results.length) return null;

		var tableBody = this.props.list.sortable ? _react2.default.createElement(_ItemsTableDragDrop2.default, this.props) : _react2.default.createElement(
			'tbody',
			null,
			items.results.map(function (item, i) {
				return _react2.default.createElement(_ItemsTableRow2.default, _extends({ key: item.id,
					deleteTableItem: _this2.props.deleteTableItem,
					index: i,
					sortOrder: item.sortOrder || 0,
					id: item.id,
					item: item
				}, _this2.props));
			})
		);
		/** TO ADD SCROLL ON DIRECTORIES PAGES */
		var directory_div_class = !this.props.list.scrollable ? 'ItemList-wrapper' : 'ItemList-wrapper-with-scroll';
		var table_class = !this.props.list.scrollable ? 'Table ItemList' : 'Table ItemList-with-scroll';
		return _react2.default.createElement(
			'div',
			{ className: directory_div_class },
			_react2.default.createElement(
				'table',
				{ cellPadding: '0', cellSpacing: '0', className: table_class },
				this.renderCols(),
				this.renderHeaders(),
				tableBody
			)
		);
	}
});

module.exports = exports = ItemsTable;

},{"../../../../../constants":476,"./ItemsTableDragDrop":440,"./ItemsTableRow":443,"classnames":undefined,"react":undefined}],440:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDnd = require('react-dnd');

var _reactDndHtml5Backend = require('react-dnd-html5-backend');

var _reactDndHtml5Backend2 = _interopRequireDefault(_reactDndHtml5Backend);

var _ItemsTableRow = require('./ItemsTableRow');

var _ItemsTableDragDropZone = require('./ItemsTableDragDropZone');

var _ItemsTableDragDropZone2 = _interopRequireDefault(_ItemsTableDragDropZone);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ItemsTableDragDrop = _react2.default.createClass({
	displayName: 'ItemsTableDragDrop',
	propTypes: {
		columns: _react2.default.PropTypes.array,
		id: _react2.default.PropTypes.any,
		index: _react2.default.PropTypes.number,
		items: _react2.default.PropTypes.object,
		list: _react2.default.PropTypes.object
	},
	render: function render() {
		var _this = this;

		return _react2.default.createElement(
			'tbody',
			null,
			this.props.items.results.map(function (item, i) {
				return _react2.default.createElement(_ItemsTableRow.Sortable, _extends({ key: item.id,
					index: i,
					sortOrder: item.sortOrder || 0,
					id: item.id,
					item: item
				}, _this.props));
			}),
			_react2.default.createElement(_ItemsTableDragDropZone2.default, this.props)
		);
	}
});

module.exports = (0, _reactDnd.DragDropContext)(_reactDndHtml5Backend2.default)(ItemsTableDragDrop);

},{"./ItemsTableDragDropZone":441,"./ItemsTableRow":443,"react":undefined,"react-dnd":undefined,"react-dnd-html5-backend":undefined}],441:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ItemsTableDragDropZoneTarget = require('./ItemsTableDragDropZoneTarget');

var _ItemsTableDragDropZoneTarget2 = _interopRequireDefault(_ItemsTableDragDropZoneTarget);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ItemsTableDragDropZone = _react2.default.createClass({
	displayName: 'ItemsTableDragDropZone',
	propTypes: {
		columns: _react2.default.PropTypes.array,
		connectDropTarget: _react2.default.PropTypes.func,
		items: _react2.default.PropTypes.object,
		list: _react2.default.PropTypes.object
	},
	renderPageDrops: function renderPageDrops() {
		var _props = this.props,
		    items = _props.items,
		    currentPage = _props.currentPage,
		    pageSize = _props.pageSize;


		var totalPages = Math.ceil(items.count / pageSize);
		var style = { display: totalPages > 1 ? null : 'none' };

		var pages = [];
		for (var i = 0; i < totalPages; i++) {
			var page = i + 1;
			var pageItems = '' + (page * pageSize - (pageSize - 1)) + ' - ' + page * pageSize;
			var current = page === currentPage;
			var className = (0, _classnames2.default)('ItemList__dropzone--page', {
				'is-active': current
			});
			pages.push(_react2.default.createElement(_ItemsTableDragDropZoneTarget2.default, {
				key: 'page_' + page,
				page: page,
				className: className,
				pageItems: pageItems,
				pageSize: pageSize,
				currentPage: currentPage,
				drag: this.props.drag,
				dispatch: this.props.dispatch
			}));
		}

		var cols = this.props.columns.length;
		if (this.props.list.sortable) cols++;
		if (!this.props.list.nodelete) cols++;
		return _react2.default.createElement(
			'tr',
			{ style: style },
			_react2.default.createElement(
				'td',
				{ colSpan: cols },
				_react2.default.createElement(
					'div',
					{ className: 'ItemList__dropzone' },
					pages,
					_react2.default.createElement('div', { className: 'clearfix' })
				)
			)
		);
	},
	render: function render() {
		return this.renderPageDrops();
	}
}); /**
     * THIS IS ORPHANED AND ISN'T RENDERED AT THE MOMENT
     * THIS WAS DONE TO FINISH THE REDUX INTEGRATION, WILL REWRITE SOON
     * - @mxstbr
     */

module.exports = ItemsTableDragDropZone;

},{"./ItemsTableDragDropZoneTarget":442,"classnames":undefined,"react":undefined}],442:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDnd = require('react-dnd');

var _actions = require('../../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var timeoutID = false;

// drop target
/**
 * THIS IS ORPHANED AND ISN'T RENDERED AT THE MOMENT
 * THIS WAS DONE TO FINISH THE REDUX INTEGRATION, WILL REWRITE SOON
 * - @mxstbr
 */

var ItemsTableDragDropZoneTarget = _react2.default.createClass({
	displayName: 'ItemsTableDragDropZoneTarget',
	propTypes: {
		className: _react2.default.PropTypes.string,
		connectDropTarget: _react2.default.PropTypes.func,
		isOver: _react2.default.PropTypes.bool,
		pageItems: _react2.default.PropTypes.string
	},
	componentDidUpdate: function componentDidUpdate() {
		if (timeoutID && !this.props.isOver) {
			clearTimeout(timeoutID);
			timeoutID = false;
		}
	},
	render: function render() {
		var _props = this.props,
		    pageItems = _props.pageItems,
		    page = _props.page,
		    isOver = _props.isOver,
		    dispatch = _props.dispatch;
		var className = this.props.className;

		if (isOver) {
			className += page === this.props.currentPage ? ' is-available ' : ' is-waiting ';
		}
		return this.props.connectDropTarget(_react2.default.createElement(
			'div',
			{
				className: className,
				onClick: function onClick(e) {
					dispatch((0, _actions.setCurrentPage)(page));
				}
			},
			pageItems
		));
	}
});

/**
 * Implements drag target.
 */
var dropTarget = {
	drop: function drop(props, monitor, component) {
		// we send manual data to endDrag to send this item to the correct page
		var page = props.drag.page;

		var targetPage = props.page;
		var pageSize = props.pageSize;

		var item = monitor.getItem();
		item.goToPage = props.page;
		item.prevSortOrder = item.sortOrder;
		// Work out the new sort order. If the new page is greater, we'll put it at the start of the page, and
		// if it's smaller we'll put it at the end of the page.
		item.newSortOrder = targetPage < page ? targetPage * pageSize : targetPage * pageSize - (pageSize - 1);
		return item;
	}
};
/**
 * Specifies the props to inject into your component.
 */
function dropProps(connect, monitor) {
	return {
		connectDropTarget: connect.dropTarget(),
		isOver: monitor.isOver()
	};
};

module.exports = (0, _reactDnd.DropTarget)('item', dropTarget, dropProps)(ItemsTableDragDropZoneTarget);

},{"../../actions":432,"react":undefined,"react-dnd":undefined}],443:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ListControl = require('../ListControl');

var _ListControl2 = _interopRequireDefault(_ListControl);

var _FieldTypes = require('FieldTypes');

var _reactDnd = require('react-dnd');

var _actions = require('../../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ItemsRow = _react2.default.createClass({
	displayName: 'ItemsRow',

	propTypes: {
		columns: _react2.default.PropTypes.array,
		id: _react2.default.PropTypes.any,
		index: _react2.default.PropTypes.number,
		items: _react2.default.PropTypes.object,
		list: _react2.default.PropTypes.object,
		// Injected by React DnD:
		isDragging: _react2.default.PropTypes.bool, // eslint-disable-line react/sort-prop-types
		connectDragSource: _react2.default.PropTypes.func, // eslint-disable-line react/sort-prop-types
		connectDropTarget: _react2.default.PropTypes.func, // eslint-disable-line react/sort-prop-types
		connectDragPreview: _react2.default.PropTypes.func // eslint-disable-line react/sort-prop-types
	},
	renderRow: function renderRow(item) {
		var _this = this;

		var itemId = item.id;
		var rowClassname = (0, _classnames2.default)({
			'ItemList__row--dragging': this.props.isDragging,
			'ItemList__row--selected': this.props.checkedItems[itemId],
			'ItemList__row--manage': this.props.manageMode,
			'ItemList__row--success': this.props.rowAlert.success === itemId,
			'ItemList__row--failure': this.props.rowAlert.fail === itemId
		});
		// item fields
		var cells = this.props.columns.map(function (col, i) {
			var ColumnType = _FieldTypes.Columns[col.type] || _FieldTypes.Columns.__unrecognised__;
			var linkTo = !i ? Keystone.adminPath + '/' + _this.props.list.path + '/' + itemId : undefined;
			return _react2.default.createElement(ColumnType, { key: col.path, list: _this.props.list, col: col, data: item, linkTo: linkTo });
		});

		// add sortable icon when applicable
		if (this.props.list.sortable) {
			cells.unshift(_react2.default.createElement(_ListControl2.default, { key: '_sort', type: 'sortable', dragSource: this.props.connectDragSource }));
		}

		// add delete/check icon when applicable
		if (!this.props.list.nodelete) {
			cells.unshift(this.props.manageMode ? _react2.default.createElement(_ListControl2.default, { key: '_check', type: 'check', active: this.props.checkedItems[itemId] }) : _react2.default.createElement(_ListControl2.default, { key: '_delete', onClick: function onClick(e) {
					return _this.props.deleteTableItem(item, e);
				}, type: 'delete' }));
		}

		var addRow = _react2.default.createElement(
			'tr',
			{ key: 'i' + item.id, onClick: this.props.manageMode ? function (e) {
					return _this.props.checkTableItem(item, e);
				} : null, className: rowClassname },
			cells
		);

		if (this.props.list.sortable) {
			return (
				// we could add a preview container/image
				// this.props.connectDragPreview(this.props.connectDropTarget(addRow))
				this.props.connectDropTarget(addRow)
			);
		} else {
			return addRow;
		}
	},
	render: function render() {
		return this.renderRow(this.props.item);
	}
});

module.exports = exports = ItemsRow;

// Expose Sortable

/**
 * Implements drag source.
 */
var dragItem = {
	beginDrag: function beginDrag(props) {
		var send = _extends({}, props);
		props.dispatch((0, _actions.setDragBase)(props.item, props.index));
		return _extends({}, send);
	},
	endDrag: function endDrag(props, monitor, component) {
		if (!monitor.didDrop()) {
			props.dispatch((0, _actions.resetItems)(props.id));
			return;
		}
		var page = props.currentPage;
		var pageSize = props.pageSize;

		// If we were dropped onto a page change target, then droppedOn.prevSortOrder etc will be
		// set by that target, and we should use those values. If we were just dropped onto a new row
		// then we need to calculate these values ourselves.
		var droppedOn = monitor.getDropResult();

		var prevSortOrder = droppedOn.prevSortOrder || props.sortOrder;
		// To explain the following line, suppose we are on page 3 and there are 10 items per page.
		// Previous to this page, there are (3 - 1)*10 = 20 items before us. If we have index 6
		// on this page, then we're the 7th item to display (index starts from 0), and so we
		// want to update the display order to 20 + 7 = 27.
		var newSortOrder = droppedOn.newSortOrder || (page - 1) * pageSize + droppedOn.index + 1;

		// If we were dropped on a page change target, then droppedOn.gotToPage will be set, and we should
		// pass this to reorderItems, which will then change the page for the user.
		props.dispatch((0, _actions.reorderItems)(props.item, prevSortOrder, newSortOrder, Number(droppedOn.goToPage)));
	}
};
/**
 * Implements drag target.
 */
var dropItem = {
	drop: function drop(props, monitor, component) {
		return _extends({}, props);
	},
	hover: function hover(props, monitor, component) {
		// reset row alerts
		if (props.rowAlert.success || props.rowAlert.fail) {
			props.dispatch((0, _actions.setRowAlert)({
				reset: true
			}));
		}

		var dragged = monitor.getItem().index;
		var over = props.index;

		// self
		if (dragged === over) {
			return;
		}

		props.dispatch((0, _actions.moveItem)(dragged, over, props));
		monitor.getItem().index = over;
	}
};

/**
 * Specifies the props to inject into your component.
 */
function dragProps(connect, monitor) {
	return {
		connectDragSource: connect.dragSource(),
		isDragging: monitor.isDragging(),
		connectDragPreview: connect.dragPreview()
	};
}

function dropProps(connect) {
	return {
		connectDropTarget: connect.dropTarget()
	};
};

exports.Sortable = (0, _reactDnd.DragSource)('item', dragItem, dragProps)((0, _reactDnd.DropTarget)('item', dropItem, dropProps)(ItemsRow));

},{"../../actions":432,"../ListControl":445,"FieldTypes":undefined,"classnames":undefined,"react":undefined,"react-dnd":undefined}],444:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _Popout = require('../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _PopoutList = require('../../../shared/Popout/PopoutList');

var _PopoutList2 = _interopRequireDefault(_PopoutList);

var _elemental = require('../../../elemental');

var _ListHeaderButton = require('./ListHeaderButton');

var _ListHeaderButton2 = _interopRequireDefault(_ListHeaderButton);

var _actions = require('../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListColumnsForm = _react2.default.createClass({
	displayName: 'ListColumnsForm',
	getInitialState: function getInitialState() {
		return {
			selectedColumns: {},
			searchString: ''
		};
	},
	getSelectedColumnsFromStore: function getSelectedColumnsFromStore() {
		var selectedColumns = {};
		this.props.activeColumns.forEach(function (col) {
			selectedColumns[col.path] = true;
		});
		return selectedColumns;
	},
	togglePopout: function togglePopout(visible) {
		this.setState({
			selectedColumns: this.getSelectedColumnsFromStore(),
			isOpen: visible,
			searchString: ''
		});
	},
	toggleColumn: function toggleColumn(path, value) {
		var newColumns = (0, _objectAssign2.default)({}, this.state.selectedColumns);

		if (value) {
			newColumns[path] = value;
		} else {
			delete newColumns[path];
		}

		this.setState({
			selectedColumns: newColumns
		});
	},
	applyColumns: function applyColumns() {
		this.props.dispatch((0, _actions.setActiveColumns)(Object.keys(this.state.selectedColumns)));
		this.togglePopout(false);
	},
	updateSearch: function updateSearch(e) {
		this.setState({ searchString: e.target.value });
	},
	renderColumns: function renderColumns() {
		var _this = this;

		var availableColumns = this.props.availableColumns;
		var searchString = this.state.searchString;

		var filteredColumns = availableColumns;

		if (searchString) {
			filteredColumns = filteredColumns.filter(function (column) {
				return column.type !== 'heading';
			}).filter(function (column) {
				return new RegExp(searchString).test(column.field.label.toLowerCase());
			});
		}

		return filteredColumns.map(function (el, i) {
			if (el.type === 'heading') {
				return _react2.default.createElement(
					_PopoutList2.default.Heading,
					{ key: 'heading_' + i },
					el.content
				);
			}

			var path = el.field.path;
			var selected = _this.state.selectedColumns[path];

			return _react2.default.createElement(_PopoutList2.default.Item, {
				key: 'column_' + el.field.path,
				icon: selected ? 'check' : 'dash',
				iconHover: selected ? 'dash' : 'check',
				isSelected: !!selected,
				label: el.field.label,
				onClick: function onClick() {
					_this.toggleColumn(path, !selected);
				} });
		});
	},
	render: function render() {
		var _this2 = this;

		var formFieldStyles = {
			borderBottom: '1px dashed rgba(0,0,0,0.1)',
			marginBottom: '1em',
			paddingBottom: '1em'
		};
		return _react2.default.createElement(
			'div',
			null,
			_react2.default.createElement(_ListHeaderButton2.default, {
				active: this.state.isOpen,
				id: 'listHeaderColumnButton',
				glyph: 'list-unordered',
				label: 'Columns',
				onClick: function onClick() {
					return _this2.togglePopout(!_this2.state.isOpen);
				}
			}),
			_react2.default.createElement(
				_Popout2.default,
				{ isOpen: this.state.isOpen, onCancel: function onCancel() {
						return _this2.togglePopout(false);
					}, relativeToID: 'listHeaderColumnButton' },
				_react2.default.createElement(_Popout2.default.Header, { title: 'Columns' }),
				_react2.default.createElement(
					_Popout2.default.Body,
					{ scrollable: true },
					_react2.default.createElement(
						'div',
						{ style: formFieldStyles },
						_react2.default.createElement(_elemental.FormInput, {
							autoFocus: true,
							onChange: this.updateSearch,
							placeholder: 'Find a column...',
							value: this.state.searchString
						})
					),
					_react2.default.createElement(
						_PopoutList2.default,
						null,
						this.renderColumns()
					)
				),
				_react2.default.createElement(_Popout2.default.Footer, {
					primaryButtonAction: this.applyColumns,
					primaryButtonLabel: 'Apply',
					secondaryButtonAction: function secondaryButtonAction() {
						return _this2.togglePopout(false);
					},
					secondaryButtonLabel: 'Cancel' })
			)
		);
	}
});

module.exports = ListColumnsForm;

},{"../../../elemental":399,"../../../shared/Popout":473,"../../../shared/Popout/PopoutList":469,"../actions":432,"./ListHeaderButton":447,"object-assign":577,"react":undefined}],445:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListControl = _react2.default.createClass({
	displayName: 'ListControl',

	propTypes: {
		dragSource: _react2.default.PropTypes.func,
		onClick: _react2.default.PropTypes.func,
		type: _react2.default.PropTypes.oneOf(['check', 'delete', 'sortable']).isRequired
	},
	renderControl: function renderControl() {
		var icon = 'octicon octicon-';
		var className = (0, _classnames2.default)('ItemList__control ItemList__control--' + this.props.type, {
			'is-active': this.props.active
		});
		var tabindex = this.props.type === 'sortable' ? -1 : null;

		if (this.props.type === 'check') {
			icon += 'check';
		}
		if (this.props.type === 'delete') {
			icon += 'trashcan';
		}
		if (this.props.type === 'sortable') {
			icon += 'three-bars';
		}

		var renderButton = _react2.default.createElement(
			'button',
			{ type: 'button', onClick: this.props.onClick, className: className, tabIndex: tabindex },
			_react2.default.createElement('span', { className: icon })
		);
		if (this.props.dragSource) {
			return this.props.dragSource(renderButton);
		} else {
			return renderButton;
		}
	},
	render: function render() {
		var className = 'ItemList__col--control ItemList__col--' + this.props.type;

		return _react2.default.createElement(
			'td',
			{ className: className },
			this.renderControl()
		);
	}
});

module.exports = ListControl;

},{"classnames":undefined,"react":undefined}],446:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _Popout = require('../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _PopoutList = require('../../../shared/Popout/PopoutList');

var _PopoutList2 = _interopRequireDefault(_PopoutList);

var _ListHeaderButton = require('./ListHeaderButton');

var _ListHeaderButton2 = _interopRequireDefault(_ListHeaderButton);

var _elemental = require('../../../elemental');

var _actions = require('../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FORMAT_OPTIONS = [{ label: 'EXCEL', value: 'csv' }, { label: 'JSON', value: 'json' }];

var ListDownloadForm = _react2.default.createClass({
	displayName: 'ListDownloadForm',

	propTypes: {
		activeColumns: _react.PropTypes.array,
		dispatch: _react.PropTypes.func.isRequired,
		list: _react.PropTypes.object
	},
	getInitialState: function getInitialState() {
		return {
			format: FORMAT_OPTIONS[0].value,
			isOpen: false,
			useCurrentColumns: true,
			selectedColumns: this.getDefaultSelectedColumns()
		};
	},
	getDefaultSelectedColumns: function getDefaultSelectedColumns() {
		var selectedColumns = {};
		this.props.activeColumns.forEach(function (col) {
			selectedColumns[col.path] = true;
		});
		return selectedColumns;
	},
	getListUIElements: function getListUIElements() {
		var _this = this;

		return this.props.list.uiElements.map(function (el) {
			return el.type === 'field' ? {
				type: 'field',
				field: _this.props.list.fields[el.field]
			} : el;
		});
	},
	allColumnsSelected: function allColumnsSelected() {
		var selectedColumns = Object.keys(this.state.selectedColumns).length;
		var columnAmount = this.getListUIElements().filter(function (el) {
			return el.type !== 'heading';
		}).length;
		return selectedColumns === columnAmount;
	},
	togglePopout: function togglePopout(visible) {
		this.setState({
			isOpen: visible
		});
	},
	toggleColumn: function toggleColumn(column, value) {
		var newColumns = (0, _objectAssign2.default)({}, this.state.selectedColumns);
		if (value) {
			newColumns[column] = value;
		} else {
			delete newColumns[column];
		}
		this.setState({
			selectedColumns: newColumns
		});
	},
	changeFormat: function changeFormat(value) {
		this.setState({
			format: value
		});
	},
	toggleCurrentlySelectedColumns: function toggleCurrentlySelectedColumns(e) {
		var newState = {
			useCurrentColumns: e.target.checked,
			selectedColumns: this.getDefaultSelectedColumns()
		};
		this.setState(newState);
	},
	clickSelectAll: function clickSelectAll() {
		if (this.allColumnsSelected()) {
			this.selectNoColumns();
		} else {
			this.selectAllColumns();
		}
	},
	selectAllColumns: function selectAllColumns() {
		var newColumns = {};
		this.getListUIElements().map(function (el) {
			if (el.type !== 'heading') {
				newColumns[el.field.path] = true;
			}
		});
		this.setState({
			selectedColumns: newColumns
		});
	},
	selectNoColumns: function selectNoColumns() {
		this.setState({
			selectedColumns: {}
		});
	},
	handleDownloadRequest: function handleDownloadRequest() {
		this.props.dispatch((0, _actions.downloadItems)(this.state.format, Object.keys(this.state.selectedColumns)));
		this.togglePopout(false);
	},
	renderColumnSelect: function renderColumnSelect() {
		var _this2 = this;

		if (this.state.useCurrentColumns) return null;

		var possibleColumns = this.getListUIElements().map(function (el, i) {
			if (el.type === 'heading') {
				return _react2.default.createElement(
					_PopoutList2.default.Heading,
					{ key: 'heading_' + i },
					el.content
				);
			}

			var columnKey = el.field.path;
			var columnValue = _this2.state.selectedColumns[columnKey];

			return _react2.default.createElement(_PopoutList2.default.Item, {
				key: 'item_' + el.field.path,
				icon: columnValue ? 'check' : 'dash',
				iconHover: columnValue ? 'dash' : 'check',
				isSelected: columnValue,
				label: el.field.label,
				onClick: function onClick() {
					return _this2.toggleColumn(columnKey, !columnValue);
				} });
		});

		var allColumnsSelected = this.allColumnsSelected();
		var checkboxLabel = allColumnsSelected ? 'Select None' : 'Select All';

		return _react2.default.createElement(
			'div',
			null,
			_react2.default.createElement(
				_elemental.FormField,
				{ offsetAbsentLabel: true },
				_react2.default.createElement(_elemental.LabelledControl, {
					checked: allColumnsSelected,
					label: checkboxLabel,
					onChange: this.clickSelectAll,
					type: 'checkbox',
					value: true
				})
			),
			_react2.default.createElement(
				'div',
				{ style: { borderTop: '1px dashed rgba(0,0,0,0.1)', marginTop: '1em', paddingTop: '1em' } },
				possibleColumns
			)
		);
	},
	render: function render() {
		var _this3 = this;

		var useCurrentColumns = this.state.useCurrentColumns;


		return _react2.default.createElement(
			'div',
			null,
			_react2.default.createElement(_ListHeaderButton2.default, {
				active: this.state.isOpen,
				id: 'listHeaderDownloadButton',
				glyph: 'cloud-download',
				label: 'Download',
				onClick: function onClick() {
					return _this3.togglePopout(!_this3.state.isOpen);
				}
			}),
			_react2.default.createElement(
				_Popout2.default,
				{ isOpen: this.state.isOpen, onCancel: function onCancel() {
						return _this3.togglePopout(false);
					}, relativeToID: 'listHeaderDownloadButton' },
				_react2.default.createElement(_Popout2.default.Header, { title: 'Download' }),
				_react2.default.createElement(
					_Popout2.default.Body,
					{ scrollable: true },
					_react2.default.createElement(
						_elemental.Form,
						{ layout: 'horizontal', labelWidth: 100, component: 'div' },
						_react2.default.createElement(
							_elemental.FormField,
							{ label: 'File format:' },
							_react2.default.createElement(_elemental.SegmentedControl, {
								equalWidthSegments: true,
								onChange: this.changeFormat,
								options: FORMAT_OPTIONS,
								value: this.state.format
							})
						),
						_react2.default.createElement(
							_elemental.FormField,
							{ label: 'Columns:', style: { marginBottom: 0 } },
							_react2.default.createElement(_elemental.LabelledControl, {
								autoFocus: true,
								checked: useCurrentColumns,
								label: 'Use currently selected',
								onChange: this.toggleCurrentlySelectedColumns,
								type: 'checkbox',
								value: true
							})
						),
						this.renderColumnSelect()
					)
				),
				_react2.default.createElement(_Popout2.default.Footer, {
					primaryButtonAction: this.handleDownloadRequest,
					primaryButtonLabel: 'Download',
					secondaryButtonAction: function secondaryButtonAction() {
						return _this3.togglePopout(false);
					},
					secondaryButtonLabel: 'Cancel' })
			)
		);
	}
});

module.exports = ListDownloadForm;

},{"../../../elemental":399,"../../../shared/Popout":473,"../../../shared/Popout/PopoutList":469,"../actions":432,"./ListHeaderButton":447,"object-assign":577,"react":undefined}],447:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../../elemental');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ListHeaderButton(_ref) {
	var className = _ref.className,
	    label = _ref.label,
	    glyph = _ref.glyph,
	    props = _objectWithoutProperties(_ref, ['className', 'label', 'glyph']);

	return _react2.default.createElement(
		_elemental.DropdownButton,
		_extends({ block: true }, props),
		_react2.default.createElement(_elemental.Glyph, { name: glyph, aphroditeStyles: classes.glyph }),
		_react2.default.createElement(
			'span',
			{ className: (0, _glamor.css)(classes.label) },
			label
		)
	);
};

ListHeaderButton.propTypes = {
	glyph: _react.PropTypes.string.isRequired
};

// show an icon on small screens where real estate is precious
// otherwise render the label
var classes = {
	glyph: {
		'display': 'none',

		'@media (max-width: 500px)': {
			display: 'inline-block'
		}
	},
	label: {
		'display': 'inline-block',

		'@media (max-width: 500px)': {
			display: 'none'
		}
	}
};

module.exports = ListHeaderButton;

},{"../../../elemental":399,"glamor":undefined,"react":undefined}],448:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _theme = require('../../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _color = require('../../../../utils/color');

var _elemental = require('../../../elemental');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ListHeaderSearch(_ref) {
	var focusInput = _ref.focusInput,
	    handleChange = _ref.handleChange,
	    handleClear = _ref.handleClear,
	    handleKeyup = _ref.handleKeyup,
	    value = _ref.value,
	    props = _objectWithoutProperties(_ref, ['focusInput', 'handleChange', 'handleClear', 'handleKeyup', 'value']);

	return _react2.default.createElement(
		'div',
		_extends({}, props, { className: (0, _glamor.css)(classes.wrapper) }),
		_react2.default.createElement(_elemental.FormInput, {
			'data-search-input-field': true,
			onChange: handleChange,
			onKeyUp: handleKeyup,
			placeholder: 'Search',
			value: value
		}),
		_react2.default.createElement(
			'button',
			{
				className: (0, _glamor.css)(classes.icon, !!value.length && classes.iconWhenClear),
				'data-search-input-field-clear-icon': true,
				disabled: !value.length,
				onClick: value.length && handleClear,
				title: 'Clear search query',
				type: 'button'
			},
			_react2.default.createElement(_elemental.Glyph, { name: value.length ? 'x' : 'search' })
		)
	);
};

ListHeaderSearch.propTypes = {
	focusInput: _react.PropTypes.bool,
	handleChange: _react.PropTypes.func.isRequired,
	handleClear: _react.PropTypes.func.isRequired,
	handleKeyup: _react.PropTypes.func.isRequired,
	value: _react.PropTypes.string
};

var clearHoverAndFocusStyles = {
	color: _theme2.default.color.danger,
	outline: 0,
	textDecoration: 'none'
};

var classes = {
	wrapper: {
		position: 'relative'
	},
	icon: {
		background: 'none',
		border: 'none',
		color: _theme2.default.color.gray40,
		height: '100%',
		position: 'absolute',
		right: 0,
		textAlign: 'center',
		top: 0,
		width: '2.2em',
		zIndex: 2 // above the form field on focus
	},
	iconWhenClear: {
		':hover': clearHoverAndFocusStyles,
		':focus': clearHoverAndFocusStyles,
		':active': {
			color: (0, _color.darken)(_theme2.default.color.danger, 10)
		}
	}
};

module.exports = ListHeaderSearch;

},{"../../../../theme":477,"../../../../utils/color":479,"../../../elemental":399,"glamor":undefined,"react":undefined}],449:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _theme = require('../../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _ListSort = require('./ListSort');

var _ListSort2 = _interopRequireDefault(_ListSort);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ListHeaderTitle(_ref) {
	var activeSort = _ref.activeSort,
	    availableColumns = _ref.availableColumns,
	    handleSortSelect = _ref.handleSortSelect,
	    title = _ref.title,
	    props = _objectWithoutProperties(_ref, ['activeSort', 'availableColumns', 'handleSortSelect', 'title']);

	return _react2.default.createElement(
		'h2',
		_extends({ className: (0, _glamor.css)(classes.heading) }, props),
		title,
		_react2.default.createElement(_ListSort2.default, {
			activeSort: activeSort,
			availableColumns: availableColumns,
			handleSortSelect: handleSortSelect
		})
	);
};

ListHeaderTitle.propTypes = {
	activeSort: _react.PropTypes.object,
	availableColumns: _react.PropTypes.arrayOf(_react.PropTypes.object),
	handleSortSelect: _react.PropTypes.func.isRequired,
	title: _react.PropTypes.string
};

var classes = {
	heading: _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.mobileMax + ')', {
		fontSize: '1.25em',
		fontWeight: 500
	})
};

module.exports = ListHeaderTitle;

},{"../../../../theme":477,"./ListSort":452,"glamor":undefined,"react":undefined}],450:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../../elemental');

var _theme = require('../../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _Popout = require('../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _PopoutList = require('../../../shared/Popout/PopoutList');

var _PopoutList2 = _interopRequireDefault(_PopoutList);

var _ListColumnsForm = require('./ListColumnsForm');

var _ListColumnsForm2 = _interopRequireDefault(_ListColumnsForm);

var _ListDownloadForm = require('./ListDownloadForm');

var _ListDownloadForm2 = _interopRequireDefault(_ListDownloadForm);

var _ListHeaderSearch = require('./ListHeaderSearch');

var _ListHeaderSearch2 = _interopRequireDefault(_ListHeaderSearch);

var _ListFiltersAdd = require('./Filtering/ListFiltersAdd');

var _ListFiltersAdd2 = _interopRequireDefault(_ListFiltersAdd);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ButtonDivider(_ref) {
	var style = _ref.style,
	    props = _objectWithoutProperties(_ref, ['style']);

	props.style = _extends({
		borderLeft: '1px solid rgba(0, 0, 0, 0.1)',
		paddingLeft: '0.75em'
	}, style);

	return _react2.default.createElement('div', props);
};

function CreateButton(_ref2) {
	var listName = _ref2.listName,
	    onClick = _ref2.onClick,
	    props = _objectWithoutProperties(_ref2, ['listName', 'onClick']);

	return _react2.default.createElement(
		_elemental.GlyphButton,
		_extends({
			block: true,
			color: 'success',
			'data-e2e-list-create-button': 'header',
			glyph: 'plus',
			onClick: onClick,
			position: 'left',
			title: 'Create ' + listName
		}, props),
		_react2.default.createElement(_elemental.ResponsiveText, {
			visibleSM: 'Create',
			visibleMD: 'Create',
			visibleLG: 'Create ' + listName
		})
	);
};

var ListHeaderToolbar = _react2.default.createClass({
	displayName: 'ListHeaderToolbar',
	propTypes: {
		columnsActive: _react.PropTypes.array,
		columnsAvailable: _react.PropTypes.array,
		createIsAvailable: _react.PropTypes.bool,
		createListName: _react.PropTypes.string,
		createOnClick: _react.PropTypes.func.isRequired,
		dispatch: _react.PropTypes.func.isRequired,
		expandIsActive: _react.PropTypes.bool,
		expandOnClick: _react.PropTypes.func.isRequired,
		filtersActive: _react.PropTypes.array,
		filtersAvailable: _react.PropTypes.array,
		list: _react.PropTypes.object,
		searchHandleChange: _react.PropTypes.func.isRequired,
		searchHandleClear: _react.PropTypes.func.isRequired,
		searchHandleKeyup: _react.PropTypes.func.isRequired,
		customCreateButton: _react.PropTypes.func.isRequired,
		searchValue: _react.PropTypes.string
	},
	getInitialState: function getInitialState() {
		return {
			popoutIsOpen: false
		};
	},
	closePopout: function closePopout() {
		this.setState({
			popoutIsOpen: false
		});
	},
	handleCreateButtonOptions: function handleCreateButtonOptions(action_type) {
		this.props.customCreateButton(action_type);
		this.setState({
			popoutIsOpen: false
		});
	},
	render: function render() {
		var _this = this;

		console.log('props', this.props.list);
		return _react2.default.createElement(
			'span',
			null,
			_react2.default.createElement(
				_elemental.InlineGroup,
				{ block: true, aphroditeStyles: classes.wrapper },
				_react2.default.createElement(
					_elemental.InlineGroupSection,
					{ grow: true, aphroditeStyles: classes.search },
					_react2.default.createElement(_ListHeaderSearch2.default, {
						handleChange: this.props.searchHandleChange,
						handleClear: this.props.searchHandleClear,
						handleKeyup: this.props.searchHandleKeyup,
						value: this.props.searchValue
					})
				),
				_react2.default.createElement(
					_elemental.InlineGroupSection,
					{ grow: true, aphroditeStyles: classes.buttons },
					_react2.default.createElement(
						_elemental.InlineGroup,
						{ block: true },
						_react2.default.createElement(
							_elemental.InlineGroupSection,
							{ aphroditeStyles: classes.filter },
							_react2.default.createElement(_ListFiltersAdd2.default, {
								dispatch: this.props.dispatch,
								activeFilters: this.props.filtersActive,
								availableFilters: this.props.filtersAvailable
							})
						),
						_react2.default.createElement(
							_elemental.InlineGroupSection,
							{ aphroditeStyles: classes.columns },
							_react2.default.createElement(_ListColumnsForm2.default, {
								availableColumns: this.props.columnsAvailable,
								activeColumns: this.props.columnsActive,
								dispatch: this.props.dispatch
							})
						),
						_react2.default.createElement(
							_elemental.InlineGroupSection,
							{ aphroditeStyles: classes.download },
							_react2.default.createElement(_ListDownloadForm2.default, {
								activeColumns: this.props.columnsActive,
								dispatch: this.props.dispatch,
								list: this.props.list
							})
						),
						_react2.default.createElement(
							_elemental.InlineGroupSection,
							{ aphroditeStyles: classes.expand },
							_react2.default.createElement(
								ButtonDivider,
								null,
								_react2.default.createElement(_elemental.GlyphButton, {
									active: this.props.expandIsActive,
									glyph: 'mirror',
									onClick: this.props.expandOnClick,
									title: 'Expand table width'
								})
							)
						),
						this.props.createIsAvailable && _react2.default.createElement(
							'span',
							{ id: 'listCreateHeaderButton' },
							_react2.default.createElement(
								_elemental.InlineGroupSection,
								{ aphroditeStyles: classes.create },
								_react2.default.createElement(
									ButtonDivider,
									null,
									_react2.default.createElement(CreateButton, {
										listName: this.props.createListName,
										onClick: this.props.list.customCreateButton ? function () {
											return _this.setState({
												popoutIsOpen: true
											});
										} : this.props.createOnClick
									})
								)
							)
						)
					)
				)
			),
			_react2.default.createElement(
				_Popout2.default,
				{ isOpen: this.state.popoutIsOpen, onCancel: this.closePopout, relativeToID: 'listCreateHeaderButton' },
				_react2.default.createElement(_Popout2.default.Header, {
					title: 'Select ' + this.props.createListName + ' Type'
				}),
				_react2.default.createElement(
					_Popout2.default.Body,
					null,
					this.props.list.customButtonOptions && this.props.list.customButtonOptions.map(function (item) {
						return _react2.default.createElement(
							'button',
							{
								type: 'button',
								title: item.label,
								className: 'PopoutList__item',
								key: item.key,
								onClick: function onClick() {
									return _this.handleCreateButtonOptions(item.key);
								}
							},
							_react2.default.createElement('span', { className: 'PopoutList__item__icon octicon octicon-chevron-right' }),
							_react2.default.createElement(
								'span',
								{ className: 'PopoutList__item__label' },
								item.label
							)
						);
					})
				)
			)
		);
	}
});

var tabletGrowStyles = _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.tabletPortraitMax + ')', {
	flexGrow: 1
});

var classes = {
	// main wrapper
	wrapper: _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.tabletPortraitMax + ')', {
		flexWrap: 'wrap'
	}),

	// button wrapper
	buttons: _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.tabletPortraitMax + ')', {
		paddingLeft: 0
	}),

	// cols
	expand: _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.desktopMax + ')', {
		display: 'none'
	}),
	filter: _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.tabletPortraitMax + ')', {
		paddingLeft: 0,
		flexGrow: 1
	}),
	columns: tabletGrowStyles,
	create: tabletGrowStyles,
	download: tabletGrowStyles,
	search: _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.tabletPortraitMax + ')', {
		marginBottom: '0.75em',
		minWidth: '100%'
	})
};

module.exports = ListHeaderToolbar;

},{"../../../../theme":477,"../../../elemental":399,"../../../shared/Popout":473,"../../../shared/Popout/PopoutList":469,"./Filtering/ListFiltersAdd":436,"./ListColumnsForm":444,"./ListDownloadForm":446,"./ListHeaderSearch":448,"react":undefined}],451:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../../elemental');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ListManagement(_ref) {
	var checkedItemCount = _ref.checkedItemCount,
	    handleDelete = _ref.handleDelete,
	    handleSelect = _ref.handleSelect,
	    handleToggle = _ref.handleToggle,
	    isOpen = _ref.isOpen,
	    itemCount = _ref.itemCount,
	    itemsPerPage = _ref.itemsPerPage,
	    nodelete = _ref.nodelete,
	    noedit = _ref.noedit,
	    selectAllItemsLoading = _ref.selectAllItemsLoading,
	    currentList = _ref.currentList,
	    handleCustomAction = _ref.handleCustomAction,
	    props = _objectWithoutProperties(_ref, ['checkedItemCount', 'handleDelete', 'handleSelect', 'handleToggle', 'isOpen', 'itemCount', 'itemsPerPage', 'nodelete', 'noedit', 'selectAllItemsLoading', 'currentList', 'handleCustomAction']);

	// do not render if there's no results
	// or if edit/delete unavailable on the list
	if (!itemCount || nodelete && noedit) return null;

	var buttonNoteStyles = { color: '#999', fontWeight: 'normal' };
	var customActionButtons = [];
	if (isOpen && currentList && currentList.customAction) {
		// SHOW DROPDOWN OPTION FOR CUSTOM ACTIONS IF  customActionType === 'dropdown'
		if (currentList.customActionType === 'dropdown') {
			var options = [];

			options.push(_react2.default.createElement(
				'option',
				null,
				'Select Action'
			));
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = currentList.customAction[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var customAction = _step.value;

					options.push(_react2.default.createElement(
						'option',
						{ value: customAction.key },
						customAction.label,
						' '
					));
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			customActionButtons.push(_react2.default.createElement(
				_elemental.InlineGroupSection,
				null,
				_react2.default.createElement(
					'select',
					{
						style: { width: 200, height: 33, borderWidth: 1, borderRadius: '0.3rem' }
						// disabled={!checkedItemCount}
						, onChange: function onChange(event) {
							var selectedAction = _lodash2.default.find(currentList.customAction, { key: event.target.value });
							if (selectedAction) {
								handleCustomAction(selectedAction);
							}
						}
					},
					options
				)
			));
		} else {
			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				var _loop = function _loop() {
					var customAction = _step2.value;

					customActionButtons.push(_react2.default.createElement(
						_elemental.InlineGroupSection,
						null,
						_react2.default.createElement(
							_elemental.GlyphButton,
							{
								color: 'info',
								disabled: !checkedItemCount,
								glyph: 'download',
								onClick: function onClick() {
									return handleCustomAction(customAction);
								},
								position: 'left',
								variant: 'link' },
							customAction.label
						)
					));
				};

				for (var _iterator2 = currentList.customAction[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					_loop();
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}
		}
	}

	// delete button
	var actionButtons = isOpen && _react2.default.createElement(
		_elemental.InlineGroupSection,
		null,
		_react2.default.createElement(
			_elemental.GlyphButton,
			{
				color: 'cancel',
				disabled: !checkedItemCount,
				glyph: 'trashcan',
				onClick: handleDelete,
				position: 'left',
				variant: 'link' },
			'Delete'
		)
	);

	// select buttons
	var allVisibleButtonIsActive = checkedItemCount === itemCount;
	var pageVisibleButtonIsActive = checkedItemCount === itemsPerPage;
	var noneButtonIsActive = !checkedItemCount;
	var selectAllButton = itemCount > itemsPerPage && _react2.default.createElement(
		_elemental.InlineGroupSection,
		null,
		_react2.default.createElement(
			_elemental.Button,
			{
				active: allVisibleButtonIsActive,
				onClick: function onClick() {
					return handleSelect('all');
				},
				title: 'Select all rows (including those not visible)' },
			selectAllItemsLoading ? _react2.default.createElement(_elemental.Spinner, null) : 'All',
			' ',
			_react2.default.createElement(
				'small',
				{ style: buttonNoteStyles },
				'(',
				itemCount,
				')'
			)
		)
	);

	var selectButtons = isOpen ? _react2.default.createElement(
		_elemental.InlineGroupSection,
		null,
		_react2.default.createElement(
			_elemental.InlineGroup,
			{ contiguous: true },
			selectAllButton,
			_react2.default.createElement(
				_elemental.InlineGroupSection,
				null,
				_react2.default.createElement(
					_elemental.Button,
					{ active: pageVisibleButtonIsActive, onClick: function onClick() {
							return handleSelect('visible');
						}, title: 'Select all rows' },
					itemCount > itemsPerPage ? 'Page ' : 'All ',
					_react2.default.createElement(
						'small',
						{ style: buttonNoteStyles },
						'(',
						itemCount > itemsPerPage ? itemsPerPage : itemCount,
						')'
					)
				)
			),
			_react2.default.createElement(
				_elemental.InlineGroupSection,
				null,
				_react2.default.createElement(
					_elemental.Button,
					{ active: noneButtonIsActive, onClick: function onClick() {
							return handleSelect('none');
						}, title: 'Deselect all rows' },
					'None'
				)
			)
		)
	) : null;

	// selected count text
	var selectedCountText = isOpen ? _react2.default.createElement(
		_elemental.InlineGroupSection,
		null,
		_react2.default.createElement(
			'span',
			{ style: { color: '#666', display: 'inline-block', lineHeight: '2.4em', margin: 1 } },
			checkedItemCount,
			' selected'
		)
	) : null;

	// put it all together
	return _react2.default.createElement(
		'div',
		null,
		_react2.default.createElement(
			_elemental.InlineGroup,
			{ style: { float: 'left', marginRight: '.75em', marginBottom: 0 } },
			_react2.default.createElement(
				_elemental.InlineGroupSection,
				null,
				_react2.default.createElement(
					_elemental.Button,
					{ active: isOpen, onClick: function onClick() {
							return handleToggle(!isOpen);
						} },
					'Manage'
				)
			),
			selectButtons,
			actionButtons,
			customActionButtons,
			selectedCountText
		)
	);
};

ListManagement.propTypes = {
	checkedItems: _react.PropTypes.number,
	handleCustomAction: _react.PropTypes.func.isRequired,
	handleDelete: _react.PropTypes.func.isRequired,
	handleSelect: _react.PropTypes.func.isRequired,
	handleToggle: _react.PropTypes.func.isRequired,
	isOpen: _react.PropTypes.bool,
	itemCount: _react.PropTypes.number,
	itemsPerPage: _react.PropTypes.number,
	nodelete: _react.PropTypes.bool,
	noedit: _react.PropTypes.bool,
	selectAllItemsLoading: _react.PropTypes.bool
};

module.exports = ListManagement;

},{"../../../elemental":399,"lodash":undefined,"react":undefined}],452:[function(require,module,exports){
'use strict';

var _elemental = require('../../../elemental');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _vkey = require('vkey');

var _vkey2 = _interopRequireDefault(_vkey);

var _Kbd = require('../../../shared/Kbd');

var _Kbd2 = _interopRequireDefault(_Kbd);

var _Popout = require('../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _PopoutList = require('../../../shared/Popout/PopoutList');

var _PopoutList2 = _interopRequireDefault(_PopoutList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListSort = _react2.default.createClass({
	displayName: 'ListSort',
	propTypes: {
		handleSortSelect: _react.PropTypes.func.isRequired
	},
	getInitialState: function getInitialState() {
		return {
			altDown: false,
			popoutIsOpen: false,
			searchString: ''
		};
	},
	componentDidMount: function componentDidMount() {
		document.body.addEventListener('keydown', this.handleKeyDown, false);
		document.body.addEventListener('keyup', this.handleKeyUp, false);
	},
	componentWillUnmount: function componentWillUnmount() {
		document.body.removeEventListener('keydown', this.handleKeyDown);
		document.body.removeEventListener('keyup', this.handleKeyUp);
	},
	handleKeyDown: function handleKeyDown(e) {
		if (_vkey2.default[e.keyCode] !== '<alt>') return;
		this.setState({
			altDown: true
		});
	},
	handleKeyUp: function handleKeyUp(e) {
		if (_vkey2.default[e.keyCode] !== '<alt>') return;
		this.setState({
			altDown: false
		});
	},
	handleSortSelect: function handleSortSelect(path, inverted) {
		if (this.state.altDown) inverted = true;
		this.props.handleSortSelect(path, inverted);
		this.closePopout();
	},
	openPopout: function openPopout() {
		this.setState({
			popoutIsOpen: true
		});
	},
	closePopout: function closePopout() {
		this.setState({
			popoutIsOpen: false,
			searchString: ''
		});
	},
	updateSearch: function updateSearch(e) {
		this.setState({ searchString: e.target.value });
	},
	renderSortOptions: function renderSortOptions() {
		var _this = this;

		// TODO: Handle multiple sort paths
		var activeSortPath = this.props.activeSort.paths[0];
		var availibleColumns = this.props.availableColumns;
		var searchString = this.state.searchString;

		var filteredColumns = availibleColumns;

		if (searchString) {
			filteredColumns = filteredColumns.filter(function (column) {
				return column.type !== 'heading';
			}).filter(function (column) {
				return new RegExp(searchString).test(column.field.label.toLowerCase());
			});
		}

		return filteredColumns.map(function (el, i) {
			if (el.type === 'heading') {
				return _react2.default.createElement(
					_PopoutList2.default.Heading,
					{ key: 'heading_' + i },
					el.content
				);
			}

			var path = el.field.path;
			var isSelected = activeSortPath && activeSortPath.path === path;
			var isInverted = isSelected && activeSortPath.invert;
			var icon = _this.state.altDown || isSelected && !isInverted ? 'chevron-up' : 'chevron-down';

			return _react2.default.createElement(_PopoutList2.default.Item, {
				key: 'column_' + el.field.path,
				icon: icon,
				isSelected: isSelected,
				label: el.field.label,
				onClick: function onClick() {
					_this.handleSortSelect(path, isSelected && !isInverted);
				} });
		});
	},
	render: function render() {
		// TODO: Handle multiple sort paths
		var activeSortPath = this.props.activeSort.paths[0];
		var formFieldStyles = { borderBottom: '1px dashed rgba(0,0,0,0.1)', paddingBottom: '1em' };

		return _react2.default.createElement(
			'span',
			null,
			activeSortPath && _react2.default.createElement(
				'span',
				null,
				_react2.default.createElement(
					'span',
					{ style: { color: '#999' } },
					' sorted by '
				),
				_react2.default.createElement(
					'a',
					{ id: 'listHeaderSortButton', href: 'javascript:;', onClick: this.openPopout },
					activeSortPath.label.toLowerCase(),
					activeSortPath.invert ? ' (descending)' : '',
					_react2.default.createElement('span', { className: 'disclosure-arrow' })
				)
			),
			_react2.default.createElement(
				_Popout2.default,
				{ isOpen: this.state.popoutIsOpen, onCancel: this.closePopout, relativeToID: 'listHeaderSortButton' },
				_react2.default.createElement(_Popout2.default.Header, { title: 'Sort' }),
				_react2.default.createElement(
					_Popout2.default.Body,
					{ scrollable: true },
					_react2.default.createElement(
						_elemental.FormField,
						{ style: formFieldStyles },
						_react2.default.createElement(_elemental.FormInput, {
							autoFocus: true,
							value: this.state.searchString,
							onChange: this.updateSearch,
							placeholder: 'Find a field...'
						})
					),
					_react2.default.createElement(
						_PopoutList2.default,
						null,
						this.renderSortOptions()
					)
				),
				_react2.default.createElement(
					_Popout2.default.Footer,
					null,
					_react2.default.createElement(
						_elemental.FormNote,
						null,
						'Hold ',
						_react2.default.createElement(
							_Kbd2.default,
							null,
							'alt'
						),
						' to toggle ascending/descending'
					)
				)
			)
		);
	}
});

module.exports = ListSort;

},{"../../../elemental":399,"../../../shared/Kbd":465,"../../../shared/Popout":473,"../../../shared/Popout/PopoutList":469,"react":undefined,"vkey":undefined}],453:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactSelect = require('react-select');

var _reactSelect2 = _interopRequireDefault(_reactSelect);

var _reactDom = require('react-dom');

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _FieldTypes = require('FieldTypes');

var _InvalidFieldType = require('../../../shared/InvalidFieldType');

var _InvalidFieldType2 = _interopRequireDefault(_InvalidFieldType);

var _string = require('../../../../utils/string');

var _elemental = require('../../../elemental');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UpdateForm = _react2.default.createClass({
	displayName: 'UpdateForm',
	propTypes: {
		isOpen: _react2.default.PropTypes.bool,
		itemIds: _react2.default.PropTypes.array,
		list: _react2.default.PropTypes.object,
		onCancel: _react2.default.PropTypes.func
	},
	getDefaultProps: function getDefaultProps() {
		return {
			isOpen: false
		};
	},
	getInitialState: function getInitialState() {
		return {
			fields: []
		};
	},
	componentDidMount: function componentDidMount() {
		this.doFocus();
	},
	componentDidUpdate: function componentDidUpdate() {
		this.doFocus();
	},
	doFocus: function doFocus() {
		if (this.refs.focusTarget) {
			(0, _reactDom.findDOMNode)(this.refs.focusTarget).focus();
		}
	},
	getOptions: function getOptions() {
		var fields = this.props.list.fields;

		return Object.keys(fields).map(function (key) {
			return { value: fields[key].path, label: fields[key].label };
		});
	},
	getFieldProps: function getFieldProps(field) {
		var props = (0, _objectAssign2.default)({}, field);
		props.value = this.state.fields[field.path];
		props.values = this.state.fields;
		props.onChange = this.handleChange;
		props.mode = 'create';
		props.key = field.path;
		return props;
	},
	updateOptions: function updateOptions(fields) {
		this.setState({
			fields: fields
		}, this.doFocus);
	},
	handleChange: function handleChange(value) {
		console.log('handleChange:', value);
	},
	handleClose: function handleClose() {
		this.setState({
			fields: []
		});
		this.props.onCancel();
	},
	renderFields: function renderFields() {
		var _this = this;

		var list = this.props.list;
		var fields = this.state.fields;

		var formFields = [];
		var focusRef = void 0;

		fields.forEach(function (fieldOption) {
			var field = list.fields[fieldOption.value];

			if (typeof _FieldTypes.Fields[field.type] !== 'function') {
				formFields.push(_react2.default.createElement(_InvalidFieldType2.default, { type: field.type, path: field.path, key: field.path }));
				return;
			}
			var fieldProps = _this.getFieldProps(field);
			if (!focusRef) {
				fieldProps.ref = focusRef = 'focusTarget';
			}
			formFields.push(_react2.default.createElement(_FieldTypes.Fields[field.type], fieldProps));
		});

		var fieldsUI = formFields.length ? formFields : _react2.default.createElement(_elemental.BlankState, {
			heading: 'Choose a field above to begin',
			style: { padding: '3em 2em' }
		});

		return _react2.default.createElement(
			'div',
			{ style: { borderTop: '1px dashed rgba(0,0,0,0.1)', marginTop: 20, paddingTop: 20 } },
			fieldsUI
		);
	},
	renderForm: function renderForm() {
		var _props = this.props,
		    itemIds = _props.itemIds,
		    list = _props.list;

		var itemCount = (0, _string.plural)(itemIds, '* ' + list.singular, '* ' + list.plural);
		var formAction = Keystone.adminPath + '/' + list.path;

		return _react2.default.createElement(
			_elemental.Form,
			{ layout: 'horizontal', action: formAction, noValidate: 'true' },
			_react2.default.createElement(_elemental.Modal.Header, {
				onClose: this.handleClose,
				showCloseButton: true,
				text: 'Update ' + itemCount
			}),
			_react2.default.createElement(
				_elemental.Modal.Body,
				null,
				_react2.default.createElement(_reactSelect2.default, {
					key: 'field-select',
					multi: true,
					onChange: this.updateOptions,
					options: this.getOptions(),
					ref: 'initialFocusTarget',
					value: this.state.fields
				}),
				this.renderFields()
			),
			_react2.default.createElement(
				_elemental.Modal.Footer,
				null,
				_react2.default.createElement(
					_elemental.Button,
					{ color: 'primary', submit: true },
					'Update'
				),
				_react2.default.createElement(
					_elemental.Button,
					{ color: 'cancel', variant: 'link', onClick: this.handleClose },
					'Cancel'
				)
			)
		);
	},
	render: function render() {
		return _react2.default.createElement(
			_elemental.Modal.Dialog,
			{ isOpen: this.props.isOpen, onClose: this.handleClose, backdropClosesModal: true },
			this.renderForm()
		);
	}
});

module.exports = UpdateForm;

},{"../../../../utils/string":484,"../../../elemental":399,"../../../shared/InvalidFieldType":464,"FieldTypes":undefined,"object-assign":577,"react":undefined,"react-dom":undefined,"react-select":undefined}],454:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
// General
var SELECT_LIST = exports.SELECT_LIST = 'app/List/SELECT_LIST';
var SET_CURRENT_PAGE = exports.SET_CURRENT_PAGE = 'app/List/SET_CURRENT_PAGE';
var INITIAL_LIST_LOAD = exports.INITIAL_LIST_LOAD = 'app/List/INITIAL_LIST_LOAD';
// Items
var LOAD_ITEMS = exports.LOAD_ITEMS = 'app/List/LOAD_ITEMS';
var LOADING_ITEMS = exports.LOADING_ITEMS = 'app/List/LOADING_ITEMS';
var ITEMS_LOADED = exports.ITEMS_LOADED = 'app/List/ITEMS_LOADED';
var ITEM_LOADING_ERROR = exports.ITEM_LOADING_ERROR = 'app/List/ITEM_LOADING_ERROR';
// Active
var SELECT_ACTIVE_SORT = exports.SELECT_ACTIVE_SORT = 'app/List/SELECT_ACTIVE_SORT';
var SELECT_ACTIVE_COLUMNS = exports.SELECT_ACTIVE_COLUMNS = 'app/List/SELECT_ACTIVE_COLUMNS';
var SELECT_FILTER = exports.SELECT_FILTER = 'app/List/SELECT_FILTER';

var SET_ACTIVE_SEARCH = exports.SET_ACTIVE_SEARCH = 'app/List/SET_ACTIVE_SEARCH';
var SET_ACTIVE_SORT = exports.SET_ACTIVE_SORT = 'app/List/SET_ACTIVE_SORT';
var SET_ACTIVE_COLUMNS = exports.SET_ACTIVE_COLUMNS = 'app/List/SET_ACTIVE_COLUMNS';
var SET_ACTIVE_LIST = exports.SET_ACTIVE_LIST = 'app/List/SET_ACTIVE_LIST';

// Query Params
var QUERY_HAS_CHANGED = exports.QUERY_HAS_CHANGED = 'app/List/QUERY_HAS_CHANGED';
var QUERY_HAS_NOT_CHANGED = exports.QUERY_HAS_NOT_CHANGED = 'app/List/QUERY_HAS_NOT_CHANGED';
var REPLACE_CACHED_QUERY = exports.REPLACE_CACHED_QUERY = 'app/List/REPLACE_CACHED_QUERY';
var CLEAR_CACHED_QUERY = exports.CLEAR_CACHED_QUERY = 'app/List/CLEAR_CACHED_QUERY';

// Filtering
var ADD_FILTER = exports.ADD_FILTER = 'app/List/ADD_FILTER';
var CLEAR_FILTER = exports.CLEAR_FILTER = 'app/List/CLEAR_FILTER';
var CLEAR_ALL_FILTERS = exports.CLEAR_ALL_FILTERS = 'app/List/CLEAR_ALL_FILTERS';
var SET_FILTERS = exports.SET_FILTERS = 'app/List/SET_FILTERS';
// Drag
var SET_ROW_ALERT = exports.SET_ROW_ALERT = 'app/List/SET_ROW_ALERT';
var RESET_DRAG_PAGE = exports.RESET_DRAG_PAGE = 'app/List/RESET_DRAG_PAGE';
var RESET_DRAG_ITEMS = exports.RESET_DRAG_ITEMS = 'app/List/RESET_DRAG_ITEMS';
var SET_DRAG_ITEM = exports.SET_DRAG_ITEM = 'app/List/SET_DRAG_ITEM';
var SET_DRAG_INDEX = exports.SET_DRAG_INDEX = 'app/List/SET_DRAG_INDEX';
var DRAG_MOVE_ITEM = exports.DRAG_MOVE_ITEM = 'app/List/DRAG_MOVE_ITEM';

},{}],455:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * The list view is a paginated table of all items in the list. It can show a
                                                                                                                                                                                                                                                                   * variety of information about the individual items in columns.
                                                                                                                                                                                                                                                                   */

// import { findDOMNode } from 'react-dom'; // TODO re-implement focus when ready


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _numeral = require('numeral');

var _numeral2 = _interopRequireDefault(_numeral);

var _reactRedux = require('react-redux');

var _elemental = require('../../elemental');

var _ListFilters = require('./components/Filtering/ListFilters');

var _ListFilters2 = _interopRequireDefault(_ListFilters);

var _ListHeaderTitle = require('./components/ListHeaderTitle');

var _ListHeaderTitle2 = _interopRequireDefault(_ListHeaderTitle);

var _ListHeaderToolbar = require('./components/ListHeaderToolbar');

var _ListHeaderToolbar2 = _interopRequireDefault(_ListHeaderToolbar);

var _ListManagement = require('./components/ListManagement');

var _ListManagement2 = _interopRequireDefault(_ListManagement);

var _ConfirmationDialog = require('../../shared/ConfirmationDialog');

var _ConfirmationDialog2 = _interopRequireDefault(_ConfirmationDialog);

var _AlertMessages = require('../../shared/AlertMessages');

var _AlertMessages2 = _interopRequireDefault(_AlertMessages);

var _CreateForm = require('../../shared/CreateForm');

var _CreateForm2 = _interopRequireDefault(_CreateForm);

var _FlashMessages = require('../../shared/FlashMessages');

var _FlashMessages2 = _interopRequireDefault(_FlashMessages);

var _ItemsTable = require('./components/ItemsTable/ItemsTable');

var _ItemsTable2 = _interopRequireDefault(_ItemsTable);

var _UpdateForm = require('./components/UpdateForm');

var _UpdateForm2 = _interopRequireDefault(_UpdateForm);

var _string = require('../../../utils/string');

var _lists = require('../../../utils/lists');

var _queryParams = require('../../../utils/queryParams');

var _IframeContent = require('../../../App/shared/IframeContent');

var _IframeContent2 = _interopRequireDefault(_IframeContent);

var _actions = require('./actions');

var _actions2 = require('../Item/actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ESC_KEY_CODE = 27;

var ListView = _react2.default.createClass({
	displayName: 'ListView',

	contextTypes: {
		router: _react2.default.PropTypes.object.isRequired
	},
	getInitialState: function getInitialState() {
		return {
			confirmationDialog: {
				isOpen: false
			},
			checkedItems: {},
			constrainTableWidth: true,
			manageMode: false,
			showCreateForm: false,
			showUpdateForm: false,
			alerts: {},
			// Custom Action View
			showIframe: false,
			action_url: null,
			id: null,
			customUpdateValue: null
		};
	},
	componentWillMount: function componentWillMount() {
		// When we directly navigate to a list without coming from another client
		// side routed page before, we need to initialize the list and parse
		// possibly specified query parameters

		this.props.dispatch((0, _actions.selectList)(this.props.params.listId));

		var isNoCreate = this.props.lists.data[this.props.params.listId].nocreate;
		var shouldOpenCreate = this.props.location.search === '?create';

		this.setState({
			showCreateForm: shouldOpenCreate && !isNoCreate || Keystone.createFormErrors
		});
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		// Review and make it more generic to clear custom action view on link change
		if (this.props && this.props.lists.currentList && this.props.lists.currentList.id !== 'list_items') {
			this.setState({ showIframe: false, action_url: null, id: null, showCreateForm: false });
		}

		// We've opened a new list from the client side routing, so initialize
		// again with the new list id
		this.setState({
			alerts: {}
		});
		var isReady = this.props.lists.ready && nextProps.lists.ready;
		if (isReady && (0, _queryParams.checkForQueryChange)(nextProps, this.props)) {
			this.props.dispatch((0, _actions.selectList)(nextProps.params.listId));
		}
	},
	componentWillUnmount: function componentWillUnmount() {
		this.setState({ showIframe: false, action_url: null, id: null }); // Custom Action View
		this.props.dispatch((0, _actions.clearCachedQuery)());
	},


	// ==============================
	// HEADER
	// ==============================
	// Called when a new item is created
	onCreate: function onCreate(item) {
		// Hide the create form
		this.toggleCreateModal(false);
		// Redirect to newly created item path
		var list = this.props.currentList;
		this.context.router.push(Keystone.adminPath + '/' + list.path + '/' + item.id);
	},
	createAutocreate: function createAutocreate() {
		var _this = this;

		var list = this.props.currentList;
		list.createItem(null, function (err, data) {
			if (err) {
				// TODO Proper error handling
				alert('Something went wrong, please try again!');
				console.log(err);
			} else {
				_this.context.router.push(Keystone.adminPath + '/' + list.path + '/' + data.id);
			}
		});
	},
	updateSearch: function updateSearch(e) {
		this.props.dispatch((0, _actions.setActiveSearch)(e.target.value));
	},
	handleSearchClear: function handleSearchClear() {
		this.props.dispatch((0, _actions.setActiveSearch)(''));

		// TODO re-implement focus when ready
		// findDOMNode(this.refs.listSearchInput).focus();
	},
	handleSearchKey: function handleSearchKey(e) {
		// clear on esc
		if (e.which === ESC_KEY_CODE) {
			this.handleSearchClear();
		}
	},
	handlePageSelect: function handlePageSelect(i) {
		// If the current page index is the same as the index we are intending to pass to redux, bail out.
		if (i === this.props.lists.page.index) return;
		return this.props.dispatch((0, _actions.setCurrentPage)(i));
	},
	toggleManageMode: function toggleManageMode() {
		var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.state.manageMode;

		this.setState({
			manageMode: filter,
			checkedItems: {}
		});
	},
	toggleUpdateModal: function toggleUpdateModal() {
		var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.state.showUpdateForm;

		this.setState({
			showUpdateForm: filter
		});
	},
	handlePromptInputChange: function handlePromptInputChange(event) {
		this.setState({
			customUpdateValue: event.target.value
		});
	},
	massUpdate: function massUpdate() {
		// TODO: Implement update multi-item
		console.log('Update ALL the things!');
	},
	massDelete: function massDelete() {
		var _this2 = this;

		var checkedItems = this.state.checkedItems;

		var list = this.props.currentList;
		var itemCount = (0, _string.plural)(checkedItems, '* ' + list.singular.toLowerCase(), '* ' + list.plural.toLowerCase());
		var itemIds = Object.keys(checkedItems);

		var message = 'Are you sure you want to delete ' + itemCount + '?';

		if (list.deletePrompt) {
			message = list.deletePrompt;
		}

		this.setState({
			confirmationDialog: {
				isOpen: true,
				label: 'Delete',
				body: _react2.default.createElement(
					'div',
					null,
					message,
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'This cannot be undone.'
				),
				onConfirmation: function onConfirmation() {
					_this2.props.dispatch((0, _actions.deleteItems)(itemIds));
					_this2.toggleManageMode();
					_this2.removeConfirmationDialog();
				}
			}
		});
	},
	isMultipleAllowed: function isMultipleAllowed(itemIds, multiple) {
		if (!multiple && itemIds.length > 1) {
			this.setState({
				alerts: {
					error: {
						error: 'Please select only one Record to complete this task.'
					}
				}
			});
			return false;
		}
		return true;
	},
	customAction: function customAction(customActionData) {
		var _this3 = this;

		var action = customActionData.action,
		    type = customActionData.type,
		    multiple = customActionData.multiple,
		    data = customActionData.data,
		    status = customActionData.status;
		var checkedItems = this.state.checkedItems;

		var itemIds = Object.keys(checkedItems);
		if (type === 'download') {
			if (this.isMultipleAllowed(itemIds, multiple)) {
				this.props.dispatch((0, _actions.customActionDownload)(itemIds, action));
				this.toggleManageMode();
				this.setState({
					alerts: {}
				});
			}
		} else if (type === 'view') {
			// Custom Action View

			if (this.isMultipleAllowed(itemIds, multiple)) {
				var iframeURL = Keystone.externalHost + '/' + action + '/' + itemIds;
				this.setState({
					showIframe: true,
					action_url: action,
					id: itemIds
				});
				this.toggleManageMode();
				this.setState({
					alerts: {}
				});
			}
		} else if (type === 'prompt') {
			if (this.isMultipleAllowed(itemIds, multiple)) {
				this.setState({
					confirmationDialog: {
						isOpen: true,
						label: 'Save',
						body: _react2.default.createElement(
							'div',
							null,
							_react2.default.createElement(
								'lable',
								{ style: { color: '#7F7F7F' } },
								'Enter a Value: '
							),
							_react2.default.createElement('input', { style: { padding: '0.75em', height: '2.0em', borderColor: '#ccc', borderWidth: 1, borderRadius: '0.3rem', borderStyle: 'solid' }, type: 'text', onChange: this.handlePromptInputChange })
						),
						onConfirmation: function onConfirmation() {
							_this3.props.dispatch((0, _actions.customAction)(itemIds, action, _this3.state.customUpdateValue));
							_this3.toggleManageMode();
							_this3.removeConfirmationDialog();
						}
					}
				});
			}
		} else {
			// simple event trigger
			if (this.isMultipleAllowed(itemIds, multiple)) {
				this.props.dispatch((0, _actions.customAction)(itemIds, action, status));
				this.toggleManageMode();
			}
		}
	},
	handleManagementSelect: function handleManagementSelect(selection) {
		if (selection === 'all') this.checkAllItems();
		if (selection === 'none') this.uncheckAllTableItems();
		if (selection === 'visible') this.checkAllTableItems();
		return false;
	},
	renderConfirmationDialog: function renderConfirmationDialog() {
		var props = this.state.confirmationDialog;
		return _react2.default.createElement(
			_ConfirmationDialog2.default,
			{
				confirmationLabel: props.label,
				isOpen: props.isOpen,
				onCancel: this.removeConfirmationDialog,
				onConfirmation: props.onConfirmation
			},
			props.body
		);
	},
	renderManagement: function renderManagement() {
		var _this4 = this;

		var _state = this.state,
		    checkedItems = _state.checkedItems,
		    manageMode = _state.manageMode,
		    selectAllItemsLoading = _state.selectAllItemsLoading;
		var currentList = this.props.currentList;


		return _react2.default.createElement(_ListManagement2.default, {
			checkedItemCount: Object.keys(checkedItems).length,
			handleDelete: this.massDelete,
			handleSelect: this.handleManagementSelect,
			handleToggle: function handleToggle() {
				return _this4.toggleManageMode(!manageMode);
			},
			isOpen: manageMode,
			itemCount: this.props.items.count,
			itemsPerPage: this.props.lists.page.size,
			nodelete: currentList.nodelete,
			noedit: currentList.noedit,
			selectAllItemsLoading: selectAllItemsLoading,
			currentList: currentList,
			handleCustomAction: this.customAction,
			handleCustomActionDownload: this.customActionDownload
		});
	},
	renderPagination: function renderPagination() {
		var items = this.props.items;
		if (this.state.manageMode || !items.count) return;

		var list = this.props.currentList;
		var currentPage = this.props.lists.page.index;
		var pageSize = this.props.lists.page.size;

		return _react2.default.createElement(_elemental.Pagination, {
			currentPage: currentPage,
			onPageSelect: this.handlePageSelect,
			pageSize: pageSize,
			plural: list.plural,
			singular: list.singular,
			style: { marginBottom: 0 },
			total: items.count,
			limit: 10
		});
	},
	renderHeader: function renderHeader() {
		var items = this.props.items;
		var _props$currentList = this.props.currentList,
		    autocreate = _props$currentList.autocreate,
		    nocreate = _props$currentList.nocreate,
		    plural = _props$currentList.plural,
		    singular = _props$currentList.singular;


		return _react2.default.createElement(
			_elemental.Container,
			{ style: { paddingTop: '2em' } },
			_react2.default.createElement(_ListHeaderTitle2.default, {
				activeSort: this.props.active.sort,
				availableColumns: this.props.currentList.columns,
				handleSortSelect: this.handleSortSelect,
				title: '\n\t\t\t\t\t\t' + (0, _numeral2.default)(items.count).format() + '\n\t\t\t\t\t\t' + (0, _string.plural)(items.count, ' ' + singular, ' ' + plural) + '\n\t\t\t\t\t'
			}),
			_react2.default.createElement(_ListHeaderToolbar2.default
			// common
			, { dispatch: this.props.dispatch,
				list: _lists.listsByPath[this.props.params.listId]

				// expand
				, expandIsActive: !this.state.constrainTableWidth,
				expandOnClick: this.toggleTableWidth

				// create
				, createIsAvailable: !nocreate,
				createListName: singular,
				createOnClick: autocreate ? this.createAutocreate : this.openCreateModal

				// search
				, searchHandleChange: this.updateSearch,
				searchHandleClear: this.handleSearchClear,
				searchHandleKeyup: this.handleSearchKey,
				searchValue: this.props.active.search

				// filters
				, filtersActive: this.props.active.filters,
				filtersAvailable: this.props.currentList.columns.filter(function (col) {
					return col.field && col.field.hasFilterMethod || col.type === 'heading';
				})

				// columns
				, columnsActive: this.props.active.columns,
				columnsAvailable: this.props.currentList.columns

				// Custom Create Button
				, customCreateButton: this.customCreateButton
			}),
			_react2.default.createElement(_ListFilters2.default, {
				dispatch: this.props.dispatch,
				filters: this.props.active.filters
			})
		);
	},


	// ==============================
	// TABLE
	// ==============================

	checkTableItem: function checkTableItem(item, e) {
		e.preventDefault();
		var newCheckedItems = _extends({}, this.state.checkedItems);
		var itemId = item.id;
		if (this.state.checkedItems[itemId]) {
			delete newCheckedItems[itemId];
		} else {
			newCheckedItems[itemId] = true;
		}
		this.setState({
			checkedItems: newCheckedItems
		});
	},
	checkAllTableItems: function checkAllTableItems() {
		var checkedItems = {};
		this.props.items.results.forEach(function (item) {
			checkedItems[item.id] = true;
		});
		this.setState({
			checkedItems: checkedItems
		});
	},
	checkAllItems: function checkAllItems() {
		var checkedItems = _extends({}, this.state.checkedItems);
		// Just in case this API call takes a long time, we'll update the select all button with
		// a spinner.
		this.setState({ selectAllItemsLoading: true });
		var self = this;
		this.props.currentList.loadItems({
			expandRelationshipFilters: false,
			filters: {
				fetch_all_data: true,
				item_count: this.props.currentList && this.props.currentList.items && this.props.currentList.items.count
			}
		}, function (err, data) {
			data.results.forEach(function (item) {
				checkedItems[item.id] = true;
			});
			self.setState({
				checkedItems: checkedItems,
				selectAllItemsLoading: false
			});
		});
	},
	uncheckAllTableItems: function uncheckAllTableItems() {
		this.setState({
			checkedItems: {}
		});
	},
	deleteTableItem: function deleteTableItem(item, e) {
		var _this5 = this;

		if (e.altKey) {
			this.props.dispatch((0, _actions2.deleteItem)(item.id));
			return;
		}

		e.preventDefault();

		var list = this.props.currentList;

		var message = 'Are you sure you want to delete <strong>' + item.name + '</strong>?';

		if (list.deletePrompt) {
			message = list.deletePrompt;
		}

		this.setState({
			confirmationDialog: {
				isOpen: true,
				label: 'Delete',
				body: _react2.default.createElement(
					'div',
					null,
					_react2.default.createElement('span', { dangerouslySetInnerHTML: { __html: message } }),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'This cannot be undone.'
				),
				onConfirmation: function onConfirmation() {
					_this5.props.dispatch((0, _actions2.deleteItem)(item.id));
					_this5.removeConfirmationDialog();
				}
			}
		});
	},
	removeConfirmationDialog: function removeConfirmationDialog() {
		this.setState({
			confirmationDialog: {
				isOpen: false
			}
		});
	},
	toggleTableWidth: function toggleTableWidth() {
		this.setState({
			constrainTableWidth: !this.state.constrainTableWidth
		});
	},


	// ==============================
	// COMMON
	// ==============================

	handleSortSelect: function handleSortSelect(path, inverted) {
		if (inverted) path = '-' + path;
		this.props.dispatch((0, _actions.setActiveSort)(path));
	},
	toggleCreateModal: function toggleCreateModal(visible) {
		this.setState({
			showCreateForm: visible,
			showIframe: visible // Custom Action View
		});
	},
	openCreateModal: function openCreateModal() {
		this.toggleCreateModal(true);
	},
	closeCreateModal: function closeCreateModal() {
		this.toggleCreateModal(false);
	},
	showBlankState: function showBlankState() {
		return !this.props.loading && !this.props.items.results.length && !this.props.active.search && !this.props.active.filters.length;
	},
	renderBlankState: function renderBlankState() {
		var currentList = this.props.currentList;


		if (!this.showBlankState()) return null;

		// create and nav directly to the item view, or open the create modal
		var onClick = currentList.autocreate ? this.createAutocreate : this.openCreateModal;

		// display the button if create allowed
		var button = !currentList.nocreate ? _react2.default.createElement(
			_elemental.GlyphButton,
			{ color: 'success', glyph: 'plus', position: 'left', onClick: onClick, 'data-e2e-list-create-button': 'no-results' },
			'Create ',
			currentList.singular
		) : null;

		return _react2.default.createElement(
			_elemental.Container,
			null,
			this.props.error ? _react2.default.createElement(_FlashMessages2.default, {
				messages: {
					error: [{
						title: "There is a problem with the network, we're trying to reconnect..."
					}]
				}
			}) : null,
			_react2.default.createElement(
				_elemental.BlankState,
				{ heading: 'No ' + this.props.currentList.plural.toLowerCase() + ' found...', style: { marginTop: 40 } },
				button
			)
		);
	},
	renderActiveState: function renderActiveState() {
		if (this.showBlankState()) return null;

		var containerStyle = {
			transition: 'max-width 160ms ease-out',
			msTransition: 'max-width 160ms ease-out',
			MozTransition: 'max-width 160ms ease-out',
			WebkitTransition: 'max-width 160ms ease-out'
		};
		if (!this.state.constrainTableWidth) {
			containerStyle.maxWidth = '100%';
		}
		return _react2.default.createElement(
			'div',
			null,
			this.renderHeader(),
			_react2.default.createElement(
				_elemental.Container,
				null,
				_react2.default.createElement(
					'div',
					{ style: { height: 35, marginBottom: '1em', marginTop: '1em' } },
					this.renderManagement(),
					this.renderPagination(),
					_react2.default.createElement('span', { style: { clear: 'both', display: 'table' } })
				)
			),
			_react2.default.createElement(
				_elemental.Container,
				{ style: containerStyle },
				this.props.error ? _react2.default.createElement(_FlashMessages2.default, {
					messages: {
						error: [{
							title: "There is a problem with the network, we're trying to reconnect.."
						}]
					}
				}) : null,
				this.props.loading ? _react2.default.createElement(
					_elemental.Center,
					{ height: '50vh' },
					_react2.default.createElement(_elemental.Spinner, null)
				) : _react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(_ItemsTable2.default, {
						activeSort: this.props.active.sort,
						checkedItems: this.state.checkedItems,
						checkTableItem: this.checkTableItem,
						columns: this.props.active.columns,
						deleteTableItem: this.deleteTableItem,
						handleSortSelect: this.handleSortSelect,
						items: this.props.items,
						list: this.props.currentList,
						manageMode: this.state.manageMode,
						rowAlert: this.props.rowAlert,
						currentPage: this.props.lists.page.index,
						pageSize: this.props.lists.page.size,
						drag: this.props.lists.drag,
						dispatch: this.props.dispatch
					}),
					this.renderNoSearchResults()
				)
			)
		);
	},
	renderNoSearchResults: function renderNoSearchResults() {
		if (this.props.items.results.length) return null;
		var matching = this.props.active.search;
		if (this.props.active.filters.length) {
			matching += (matching ? ' and ' : '') + (0, _string.plural)(this.props.active.filters.length, '* filter', '* filters');
		}
		matching = matching ? ' found matching ' + matching : '.';
		return _react2.default.createElement(
			_elemental.BlankState,
			{ style: { marginTop: 20, marginBottom: 20 } },
			_react2.default.createElement(_elemental.Glyph, {
				name: 'search',
				size: 'medium',
				style: { marginBottom: 20 }
			}),
			_react2.default.createElement(
				'h2',
				{ style: { color: 'inherit' } },
				'No ',
				this.props.currentList.plural.toLowerCase(),
				matching
			)
		);
	},
	customCreateButton: function customCreateButton(action_type) {
		var action = this.props.lists.currentList && this.props.lists.currentList.link && this.props.lists.currentList.link.create;
		action = action.length && action[0] === '/' ? action.slice(1) : action;
		this.setState({
			showIframe: true,
			action_url: action,
			id: action_type
		});
	},
	renderIframeView: function renderIframeView() {
		// Custom Action View
		var _state2 = this.state,
		    action_url = _state2.action_url,
		    id = _state2.id;

		var iframeURL = Keystone.externalHost + '/' + action_url + '/' + id;
		return _react2.default.createElement(_IframeContent2.default, { src: iframeURL, show: this.state.showIframe, onCancel: this.closeCreateModal, onSave: this.onCreate, className: "full-screen" });
	},
	render: function render() {
		var _this6 = this;

		if (!this.props.ready) {
			return _react2.default.createElement(
				_elemental.Center,
				{ height: '50vh', 'data-screen-id': 'list' },
				_react2.default.createElement(_elemental.Spinner, null)
			);
		}
		return _react2.default.createElement(
			'div',
			{ 'data-screen-id': 'list' },
			this.renderIframeView(),
			this.state.alerts ? _react2.default.createElement(_AlertMessages2.default, { alerts: this.state.alerts }) : null,
			this.renderBlankState(),
			this.renderActiveState(),
			_react2.default.createElement(_CreateForm2.default, {
				err: Keystone.createFormErrors,
				isOpen: this.state.showCreateForm,
				list: this.props.currentList,
				onCancel: this.closeCreateModal,
				onCreate: this.onCreate
			}),
			_react2.default.createElement(_UpdateForm2.default, {
				isOpen: this.state.showUpdateForm,
				itemIds: Object.keys(this.state.checkedItems),
				list: this.props.currentList,
				onCancel: function onCancel() {
					return _this6.toggleUpdateModal(false);
				}
			}),
			this.renderConfirmationDialog()
		);
	}
});

module.exports = (0, _reactRedux.connect)(function (state) {
	return {
		lists: state.lists,
		loading: state.lists.loading,
		error: state.lists.error,
		currentList: state.lists.currentList,
		items: state.lists.items,
		page: state.lists.page,
		ready: state.lists.ready,
		rowAlert: state.lists.rowAlert,
		active: state.active
	};
})(ListView);

},{"../../../App/shared/IframeContent":463,"../../../utils/lists":482,"../../../utils/queryParams":483,"../../../utils/string":484,"../../elemental":399,"../../shared/AlertMessages":458,"../../shared/ConfirmationDialog":459,"../../shared/CreateForm":460,"../../shared/FlashMessages":462,"../Item/actions":413,"./actions":432,"./components/Filtering/ListFilters":435,"./components/ItemsTable/ItemsTable":439,"./components/ListHeaderTitle":449,"./components/ListHeaderToolbar":450,"./components/ListManagement":451,"./components/UpdateForm":453,"numeral":undefined,"react":undefined,"react-redux":undefined}],456:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialState = {
	columns: [],
	filters: [],
	search: '',
	sort: {
		input: '',
		isDefaultSort: false,
		paths: [],
		rawInput: ''
	},
	cachedQuery: {}
};

/**
 * Manage the active state
 */
function active() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	var action = arguments[1];

	switch (action.type) {
		case _constants.SET_ACTIVE_LIST:
			return (0, _objectAssign2.default)({}, state, {
				id: action.id,
				columns: action.list.expandColumns(action.list.defaultColumns),
				filters: [],
				search: '',
				sort: action.list.expandSort(action.list.defaultSort)
			});
		case _constants.SET_ACTIVE_SEARCH:
			return (0, _objectAssign2.default)({}, state, {
				search: action.searchString
			});
		case _constants.SET_ACTIVE_SORT:
			return (0, _objectAssign2.default)({}, state, {
				sort: action.sort
			});
		case _constants.SET_ACTIVE_COLUMNS:
			return (0, _objectAssign2.default)({}, state, {
				columns: action.columns
			});
		case _constants.ADD_FILTER:
			return (0, _objectAssign2.default)({}, state, {
				// Override existing filter with field path,
				// otherwise add to filters array
				filters: _lodash2.default.unionWith([action.filter], state.filters, function (stateFilter, actionFilter) {
					return stateFilter.field.path === actionFilter.field.path;
				})
			});
		case _constants.SET_FILTERS:
			return (0, _objectAssign2.default)({}, state, {
				filters: action.filters
			});
		case _constants.CLEAR_FILTER:
			var newFilters = _lodash2.default.filter(state.filters, function (filter) {
				return filter.field.path !== action.path;
			});
			return (0, _objectAssign2.default)({}, state, {
				filters: newFilters
			});
		case _constants.CLEAR_ALL_FILTERS:
			return (0, _objectAssign2.default)({}, state, {
				filters: []
			});
		case _constants.QUERY_HAS_CHANGED:
			var _action$parsedQuery = action.parsedQuery,
			    search = _action$parsedQuery.search,
			    sort = _action$parsedQuery.sort,
			    filters = _action$parsedQuery.filters,
			    columns = _action$parsedQuery.columns;


			return (0, _objectAssign2.default)({}, state, {
				search: search,
				sort: sort || initialState.sort,
				filters: filters || initialState.filters,
				columns: columns || initialState.columns
			});
		case _constants.REPLACE_CACHED_QUERY:
			return (0, _objectAssign2.default)({}, state, {
				cachedQuery: action.cachedQuery
			});
		case _constants.CLEAR_CACHED_QUERY:
			return (0, _objectAssign2.default)({}, state, {
				cachedQuery: {}
			});
		default:
			return state;
	}
}

exports.default = active;

},{"../constants":454,"lodash":undefined,"object-assign":577}],457:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _List = require('../../../../utils/List');

var _List2 = _interopRequireDefault(_List);

var _constants = require('../constants');

var _constants2 = require('../../Item/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = {
	loadingRef: null,
	loadCounter: 0,
	currentList: null,
	loading: false,
	ready: false,
	error: null,
	data: {},
	items: {
		results: [],
		count: null
	},
	page: {
		size: null,
		index: undefined
	},
	rowAlert: {
		success: false,
		fail: false
	},
	drag: {
		page: 1,
		item: false,
		clonedItems: false,
		index: false
	}
};

// Rekey the lists in the state with their paths for easier matching with the
// URL parameters
var initialLists = Keystone.lists;
for (var name in initialLists) {
	if ({}.hasOwnProperty.call(initialLists, name)) {
		var currentList = initialLists[name];
		initialState.data[currentList.path] = new _List2.default(currentList);
		initialState.data[currentList.path].items = {
			results: [],
			count: null
		};
	}
}

/**
 * Manage all lists
 */
function lists() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	var action = arguments[1];

	switch (action.type) {
		case _constants.SELECT_LIST:
			var list = state.data[action.id];
			list.id = action.id;
			var items = {
				results: [],
				count: null
			};
			// If we have cached items, instead of resetting state.items put the
			// cached items in the state
			if (list.items.count !== null) {
				items = list.items;
			}
			return (0, _objectAssign2.default)({}, state, {
				currentList: list,
				ready: false,
				items: items,
				page: _extends({}, state.page, {
					index: 1,
					size: list.perPage
				})
			});
		case _constants.LOAD_ITEMS:
			var loading = true;
			var ready = state.ready;
			// If we have cached items ready, don't show a loading indicator
			// while we fetch the new items in the background
			if (state.items.count !== null && loading === false) {
				loading = false;
				ready = true;
			}
			return (0, _objectAssign2.default)({}, state, {
				loading: loading,
				ready: ready,
				loadCounter: action.loadCounter
			});
		case _constants.ITEMS_LOADED:
			// Cache the items in state.data so we can show the already existing
			// items on the next round trip while fetching the new items in the
			// background
			var cachedList = state.data[state.currentList.id];
			cachedList.items = action.items;
			return (0, _objectAssign2.default)({}, state, {
				loading: false,
				ready: true,
				error: null,
				items: action.items,
				data: _extends({}, state.data, _defineProperty({}, state.currentList.id, cachedList)),
				loadCounter: 0
			});
		case _constants.ITEM_LOADING_ERROR:
			return (0, _objectAssign2.default)({}, state, {
				loading: true,
				ready: true,
				error: action.err,
				loadCounter: 0
			});
		case _constants2.DELETE_ITEM:
			var newItems = {
				results: state.items.results.filter(function (el) {
					return el.id !== action.id;
				}),
				count: state.items.count - 1
			};
			var newCachedList = state.data[state.currentList.id];
			newCachedList.items = newItems;
			return (0, _objectAssign2.default)({}, state, {
				items: newItems,
				data: _extends({}, state.data, _defineProperty({}, state.currentList.id, newCachedList))
			});
		case _constants.SET_CURRENT_PAGE:
			console.log(action.index);
			return (0, _objectAssign2.default)({}, state, {
				loading: true,
				page: _extends({}, state.page, {
					index: action.index
				})
			});
		case _constants.SET_ROW_ALERT:
			if (action.data.reset === true) {
				return (0, _objectAssign2.default)({}, state, {
					rowAlert: {
						success: false,
						fail: false
					}
				});
			}
			return (0, _objectAssign2.default)({}, state, {
				rowAlert: _extends({}, state.rowAlert, action.data)
			});
		case _constants.RESET_DRAG_PAGE:
			return (0, _objectAssign2.default)({}, state, {
				drag: _extends({}, state.drag, {
					page: state.page.index
				})
			});
		case _constants.RESET_DRAG_ITEMS:
			return (0, _objectAssign2.default)({}, state, {
				drag: _extends({}, state.drag, {
					clonedItems: state.items
				})
			});
		case _constants.SET_DRAG_ITEM:
			return (0, _objectAssign2.default)({}, state, {
				drag: _extends({}, state.drag, {
					item: action.item
				})
			});
		case _constants.SET_DRAG_INDEX:
			return (0, _objectAssign2.default)({}, state, {
				drag: _extends({}, state.drag, {
					index: action.index
				})
			});
		case _constants.QUERY_HAS_CHANGED:
			var index = parseInt(action.parsedQuery.currentPage) || 1;
			return (0, _objectAssign2.default)({}, state, {
				loading: true,
				page: _extends({}, state.page, {
					index: index
				})
			});
		case _constants.DRAG_MOVE_ITEM:
			// TODO: option to use manageMode for sortOrder
			var currentItems = state.items.results;
			var item = currentItems[action.prevIndex];
			// Remove item at prevIndex from array and save that array in
			// itemsWithoutItem
			var itemsWithoutItem = currentItems.slice(0, action.prevIndex).concat(currentItems.slice(action.prevIndex + 1, currentItems.length));
			// Add item back in at new index
			itemsWithoutItem.splice(action.newIndex, 0, item);
			return (0, _objectAssign2.default)({}, state, {
				items: _extends({}, state.items, {
					results: itemsWithoutItem
				})
			});
		default:
			return state;
	}
}

exports.default = lists;

},{"../../../../utils/List":478,"../../Item/constants":427,"../constants":454,"object-assign":577}],458:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../elemental');

var _string = require('../../utils/string');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This renders alerts for API success and error responses.
 *   Error format: {
 *     error: 'validation errors' // The unique error type identifier
 *     detail: { ... } // Optional details specific to that error type
 *   }
 *   Success format: {
 *     success: 'item updated', // The unique success type identifier
 *     details: { ... } // Optional details specific to that success type
 *   }
 *   Eventually success and error responses should be handled individually
 *   based on their type. For example: validation errors should be displayed next
 *   to each invalid field and signin errors should promt the user to sign in.
 */
var AlertMessages = _react2.default.createClass({
	displayName: 'AlertMessages',
	propTypes: {
		alerts: _react2.default.PropTypes.shape({
			error: _react2.default.PropTypes.Object,
			success: _react2.default.PropTypes.Object
		})
	},
	getDefaultProps: function getDefaultProps() {
		return {
			alerts: {}
		};
	},
	renderValidationErrors: function renderValidationErrors() {
		var errors = this.props.alerts.error.detail;
		if (errors.name === 'ValidationError') {
			errors = errors.errors;
		}
		var errorCount = Object.keys(errors).length;
		var alertContent = void 0;
		var messages = Object.keys(errors).map(function (path) {
			if (errorCount > 1) {
				return _react2.default.createElement(
					'li',
					{ key: path },
					(0, _string.upcase)(errors[path].error || errors[path].message)
				);
			} else {
				return _react2.default.createElement(
					'div',
					{ key: path },
					(0, _string.upcase)(errors[path].error || errors[path].message)
				);
			}
		});

		if (errorCount > 1) {
			alertContent = _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(
					'h4',
					null,
					'There were ',
					errorCount,
					' errors creating the new item:'
				),
				_react2.default.createElement(
					'ul',
					null,
					messages
				)
			);
		} else {
			alertContent = messages;
		}

		return _react2.default.createElement(
			_elemental.Alert,
			{ color: 'danger' },
			alertContent
		);
	},
	render: function render() {
		var _props$alerts = this.props.alerts,
		    error = _props$alerts.error,
		    success = _props$alerts.success;

		if (error) {
			// Render error alerts
			switch (error.error) {
				case 'validation errors':
					return this.renderValidationErrors();
				case 'error':
					if (error.detail.name === 'ValidationError') {
						return this.renderValidationErrors();
					} else {
						return _react2.default.createElement(
							_elemental.Alert,
							{ color: 'danger' },
							(0, _string.upcase)(error.error)
						);
					}
				default:
					return _react2.default.createElement(
						_elemental.Alert,
						{ color: 'danger' },
						(0, _string.upcase)(error.error)
					);
			}
		}

		if (success) {
			// Render success alerts
			return _react2.default.createElement(
				_elemental.Alert,
				{ color: 'success' },
				(0, _string.upcase)(success.success)
			);
		}

		return null; // No alerts, render nothing
	}
});

module.exports = AlertMessages;

},{"../../utils/string":484,"../elemental":399,"react":undefined}],459:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../elemental');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /**
                                                                                                                                                                                                                              * Renders a confirmation dialog modal
                                                                                                                                                                                                                              */

function ConfirmationDialog(_ref) {
	var cancelLabel = _ref.cancelLabel,
	    children = _ref.children,
	    confirmationLabel = _ref.confirmationLabel,
	    confirmationType = _ref.confirmationType,
	    html = _ref.html,
	    isOpen = _ref.isOpen,
	    onCancel = _ref.onCancel,
	    onConfirmation = _ref.onConfirmation,
	    props = _objectWithoutProperties(_ref, ['cancelLabel', 'children', 'confirmationLabel', 'confirmationType', 'html', 'isOpen', 'onCancel', 'onConfirmation']);

	// Property Violation
	if (children && html) {
		console.error('Warning: FormNote cannot render `children` and `html`. You must provide one or the other.');
	}

	return _react2.default.createElement(
		_elemental.Modal.Dialog,
		{
			backdropClosesModal: true,
			isOpen: isOpen,
			onClose: onCancel,
			width: 400
		},
		html ? _react2.default.createElement(_elemental.Modal.Body, _extends({}, props, { dangerouslySetInnerHTML: { __html: html } })) : _react2.default.createElement(
			_elemental.Modal.Body,
			props,
			children
		),
		_react2.default.createElement(
			_elemental.Modal.Footer,
			null,
			_react2.default.createElement(
				_elemental.Button,
				{ autoFocus: true, size: 'small', 'data-button-type': 'confirm', color: confirmationType, onClick: onConfirmation },
				confirmationLabel
			),
			_react2.default.createElement(
				_elemental.Button,
				{ size: 'small', 'data-button-type': 'cancel', variant: 'link', color: 'cancel', onClick: onCancel },
				cancelLabel
			)
		)
	);
};
ConfirmationDialog.propTypes = {
	body: _react.PropTypes.string,
	cancelLabel: _react.PropTypes.string,
	confirmationLabel: _react.PropTypes.string,
	confirmationType: _react.PropTypes.oneOf(['danger', 'primary', 'success', 'warning']),
	onCancel: _react.PropTypes.func,
	onConfirmation: _react.PropTypes.func
};
ConfirmationDialog.defaultProps = {
	cancelLabel: 'Cancel',
	confirmationLabel: 'Okay',
	confirmationType: 'danger',
	isOpen: false
};

exports.default = ConfirmationDialog;

},{"../elemental":399,"react":undefined}],460:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _vkey = require('vkey');

var _vkey2 = _interopRequireDefault(_vkey);

var _AlertMessages = require('./AlertMessages');

var _AlertMessages2 = _interopRequireDefault(_AlertMessages);

var _FieldTypes = require('FieldTypes');

var _InvalidFieldType = require('./InvalidFieldType');

var _InvalidFieldType2 = _interopRequireDefault(_InvalidFieldType);

var _elemental = require('../elemental');

var _IframeContent = require('./IframeContent');

var _IframeContent2 = _interopRequireDefault(_IframeContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The form that's visible when "Create <ItemName>" is clicked on either the
 * List screen or the Item screen
 */

var CreateForm = _react2.default.createClass({
	displayName: 'CreateForm',
	propTypes: {
		err: _react2.default.PropTypes.object,
		isOpen: _react2.default.PropTypes.bool,
		list: _react2.default.PropTypes.object,
		onCancel: _react2.default.PropTypes.func,
		onCreate: _react2.default.PropTypes.func
	},
	getDefaultProps: function getDefaultProps() {
		return {
			err: null,
			isOpen: false
		};
	},
	getInitialState: function getInitialState() {
		var _this = this;

		// Set the field values to their default values when first rendering the
		// form. (If they have a default value, that is)
		var values = {};
		Object.keys(this.props.list.fields).forEach(function (key) {
			var field = _this.props.list.fields[key];
			var FieldComponent = _FieldTypes.Fields[field.type];
			values[field.path] = FieldComponent.getDefaultValue(field);
		});
		return {
			values: values,
			alerts: {},
			showIframe: false
		};
	},
	componentDidMount: function componentDidMount() {
		if (this.props.list.link.create) {
			this.setState({
				showIframe: true
			});
		} else {
			document.body.addEventListener('keyup', this.handleKeyPress, false);
		}
	},
	componentWillUnmount: function componentWillUnmount() {
		if (!this.state.showIframe) {
			document.body.removeEventListener('keyup', this.handleKeyPress, false);
		}
	},
	handleKeyPress: function handleKeyPress(evt) {
		if (_vkey2.default[evt.keyCode] === '<escape>') {
			this.props.onCancel();
		}
	},

	// Handle input change events
	handleChange: function handleChange(event) {
		var values = (0, _objectAssign2.default)({}, this.state.values);
		values[event.path] = event.value;
		this.setState({
			values: values
		});
	},

	// Set the props of a field
	getFieldProps: function getFieldProps(field) {
		var props = (0, _objectAssign2.default)({}, field);
		props.value = this.state.values[field.path];
		props.values = this.state.values;
		props.onChange = this.handleChange;
		props.mode = 'create';
		props.key = field.path;
		return props;
	},

	// Create a new item when the form is submitted
	submitForm: function submitForm(event) {
		var _this2 = this;

		event.preventDefault();
		var createForm = event.target;
		var formData = new FormData(createForm);
		this.props.list.createItem(formData, function (err, data) {
			if (data) {
				if (_this2.props.onCreate) {
					_this2.props.onCreate(data);
				} else {
					// Clear form
					_this2.setState({
						values: {},
						alerts: {
							success: {
								success: 'Item created'
							}
						}
					});
				}
			} else {
				if (!err) {
					err = {
						error: 'connection error'
					};
				}
				// If we get a database error, show the database error message
				// instead of only saying "Database error"
				if (err.error === 'database error') {
					err.error = err.detail.errmsg;
				}
				_this2.setState({
					alerts: {
						error: err
					}
				});
			}
		});
	},

	// Render the form itself
	renderForm: function renderForm() {
		var _this3 = this;

		if (!this.props.isOpen) return;

		var form = [];
		var list = this.props.list;
		var nameField = this.props.list.nameField;
		var focusWasSet;

		// If the name field is an initial one, we need to render a proper
		// input for it
		if (list.nameIsInitial) {
			var nameFieldProps = this.getFieldProps(nameField);
			nameFieldProps.autoFocus = focusWasSet = true;
			if (nameField.type === 'text') {
				nameFieldProps.className = 'item-name-field';
				nameFieldProps.placeholder = nameField.label;
				nameFieldProps.label = '';
			}
			form.push(_react2.default.createElement(_FieldTypes.Fields[nameField.type], nameFieldProps));
		}

		// Render inputs for all initial fields
		Object.keys(list.initialFields).forEach(function (key) {
			var field = list.fields[list.initialFields[key]];
			// If there's something weird passed in as field type, render the
			// invalid field type component
			if (typeof _FieldTypes.Fields[field.type] !== 'function') {
				form.push(_react2.default.createElement(_InvalidFieldType2.default, { type: field.type, path: field.path, key: field.path }));
				return;
			}
			// Get the props for the input field
			var fieldProps = _this3.getFieldProps(field);
			// If there was no focusRef set previously, set the current field to
			// be the one to be focussed. Generally the first input field, if
			// there's an initial name field that takes precedence.
			if (!focusWasSet) {
				fieldProps.autoFocus = focusWasSet = true;
			}
			form.push(_react2.default.createElement(_FieldTypes.Fields[field.type], fieldProps));
		});

		return _react2.default.createElement(
			_elemental.Form,
			{ layout: 'horizontal', onSubmit: this.submitForm },
			_react2.default.createElement(_elemental.Modal.Header, {
				text: 'Create a new ' + list.singular,
				showCloseButton: true
			}),
			_react2.default.createElement(
				_elemental.Modal.Body,
				null,
				_react2.default.createElement(_AlertMessages2.default, { alerts: this.state.alerts }),
				form
			),
			_react2.default.createElement(
				_elemental.Modal.Footer,
				null,
				_react2.default.createElement(
					_elemental.Button,
					{ color: 'success', type: 'submit', 'data-button-type': 'submit' },
					'Create'
				),
				_react2.default.createElement(
					_elemental.Button,
					{
						variant: 'link',
						color: 'cancel',
						'data-button-type': 'cancel',
						onClick: this.props.onCancel
					},
					'Cancel'
				)
			)
		);
	},
	renderContent: function renderContent() {
		var showIframe = this.state.showIframe;

		var iframeURL = '' + Keystone.externalHost + this.props.list.link.create;

		return showIframe && this.props.isOpen ? _react2.default.createElement(_IframeContent2.default, { src: iframeURL, show: this.props.isOpen, onCancel: this.props.onCancel, onSave: this.props.onCreate, className: "full-screen" }) : _react2.default.createElement(
			_elemental.Modal.Dialog,
			{ isOpen: this.props.isOpen, onClose: this.props.onCancel, backdropClosesModal: true },
			this.renderForm()
		);
	},
	render: function render() {
		return this.renderContent();
	}
});

module.exports = CreateForm;

},{"../elemental":399,"./AlertMessages":458,"./IframeContent":463,"./InvalidFieldType":464,"FieldTypes":undefined,"object-assign":577,"react":undefined,"vkey":undefined}],461:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../elemental');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A single flash message component. Used by FlashMessages.js
 */

var FlashMessage = _react2.default.createClass({
	displayName: 'FlashMessage',

	propTypes: {
		message: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.string]).isRequired,
		type: _react.PropTypes.string
	},
	// Render the message
	renderMessage: function renderMessage(message) {
		// If the message is only a string, render the string
		if (typeof message === 'string') {
			return _react2.default.createElement(
				'span',
				null,
				message
			);
		}

		// Get the title and the detail of the message
		var title = message.title ? _react2.default.createElement(
			'h4',
			null,
			message.title
		) : null;
		var detail = message.detail ? _react2.default.createElement(
			'p',
			null,
			message.detail
		) : null;
		// If the message has a list attached, render a <ul>
		var list = message.list ? _react2.default.createElement(
			'ul',
			{ style: { marginBottom: 0 } },
			message.list.map(function (item, i) {
				return _react2.default.createElement(
					'li',
					{ key: 'i' + i },
					item
				);
			})
		) : null;

		return _react2.default.createElement(
			'span',
			null,
			title,
			detail,
			list
		);
	},
	render: function render() {
		var _props = this.props,
		    message = _props.message,
		    type = _props.type;


		return _react2.default.createElement(
			_elemental.Alert,
			{ color: type },
			this.renderMessage(message)
		);
	}
});

module.exports = FlashMessage;

},{"../elemental":399,"react":undefined}],462:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _FlashMessage = require('./FlashMessage');

var _FlashMessage2 = _interopRequireDefault(_FlashMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FlashMessages = _react2.default.createClass({
	displayName: 'FlashMessages',
	propTypes: {
		messages: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.bool, _react2.default.PropTypes.shape({
			error: _react2.default.PropTypes.array,
			hilight: _react2.default.PropTypes.array,
			info: _react2.default.PropTypes.array,
			success: _react2.default.PropTypes.array,
			warning: _react2.default.PropTypes.array
		})])
	},
	// Render messages by their type
	renderMessages: function renderMessages(messages, type) {
		if (!messages || !messages.length) return null;

		return messages.map(function (message, i) {
			return _react2.default.createElement(_FlashMessage2.default, { message: message, type: type, key: 'i' + i });
		});
	},

	// Render the individual messages based on their type
	renderTypes: function renderTypes(types) {
		var _this = this;

		return Object.keys(types).map(function (type) {
			return _this.renderMessages(types[type], type);
		});
	},
	render: function render() {
		if (!this.props.messages) return null;

		return _react2.default.createElement(
			'div',
			{ className: 'flash-messages' },
			_lodash2.default.isPlainObject(this.props.messages) && this.renderTypes(this.props.messages)
		);
	}
}); /**
     * Render a few flash messages, e.g. errors, success messages, warnings,...
     *
     * Use like this:
     * <FlashMessages
     *   messages={{
     *	   error: [{
     *	     title: 'There is a network problem',
     *	     detail: 'Please try again later...',
     *	   }],
     *   }}
     * />
     *
     * Instead of error, it can also be hilight, info, success or warning
     */

module.exports = FlashMessages;

},{"./FlashMessage":461,"lodash":undefined,"react":undefined}],463:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IframeContent = _react2.default.createClass({
	displayName: 'IframeContent',
	propTypes: {
		show: _react2.default.PropTypes.bool,
		src: _react2.default.PropTypes.string,
		className: _react2.default.PropTypes.string,
		onCancel: _react2.default.PropTypes.func,
		onSave: _react2.default.PropTypes.func
	},
	getDefaultProps: function getDefaultProps() {
		return {
			show: false
		};
	},
	getInitialState: function getInitialState() {
		return {};
	},
	componentDidMount: function componentDidMount() {
		window.addEventListener("message", this.handleFrameTasks, this);
	},
	componentWillUnmount: function componentWillUnmount() {
		window.removeEventListener("message", this.handleFrameTasks, this);
	},
	handleFrameTasks: function handleFrameTasks(e) {
		try {
			var message = JSON.parse(e.data);
			switch (message.type) {
				case 'contentUpdate':
					this.setState({
						contentHeight: message.data
					});
					break;
				case 'onSave':
					if (this.props.onSave) {
						this.props.onSave(message.data);
					}
					break;
				case 'onCancel':
					if (this.props.onCancel) {
						this.props.onCancel();
					}
					break;
			}
		} catch (err) {
			console.error(err);
		}
	},
	renderContent: function renderContent() {
		var _this = this;

		var _props = this.props,
		    src = _props.src,
		    show = _props.show,
		    _props$className = _props.className,
		    className = _props$className === undefined ? '' : _props$className;

		var iframeURL = src + '?token=' + Keystone.user.token;
		return show ? _react2.default.createElement('iframe', { className: 'content-frame ' + className, style: { height: this.state.contentHeight }, ref: function ref(f) {
				return _this.ifr = f;
			}, src: iframeURL }) : _react2.default.createElement('div', null);
	},
	render: function render() {
		return this.renderContent();
	}
}); /**
     * The form that's visible when "Create <ItemName>" is clicked on either the
     * List screen or the Item screen
     */

module.exports = IframeContent;

},{"react":undefined}],464:[function(require,module,exports){
"use strict";

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InvalidFieldType = function InvalidFieldType(props) {
	return _react2.default.createElement(
		"div",
		{ className: "alert alert-danger" },
		"Invalid field type ",
		_react2.default.createElement(
			"strong",
			null,
			props.type
		),
		" at path ",
		_react2.default.createElement(
			"strong",
			null,
			props.path
		)
	);
}; /**
    * Renders an "Invalid Field Type" error
    */

InvalidFieldType.propTypes = {
	path: _react2.default.PropTypes.string,
	type: _react2.default.PropTypes.string
};

module.exports = InvalidFieldType;

},{"react":undefined}],465:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _theme = require('../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _color = require('../../utils/color');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Kbd(_ref) {
	var className = _ref.className,
	    props = _objectWithoutProperties(_ref, ['className']);

	props.className = (0, _glamor.css)(classes.kbd);

	return _react2.default.createElement('kbd', props);
};

var classes = {
	kbd: {
		backgroundColor: _theme2.default.color.body,
		borderRadius: 3,
		border: '1px solid #ccc',
		borderBottomColor: (0, _color.darken)('#ccc', 4),
		borderTopColor: (0, _color.lighten)('#ccc', 4),
		boxShadow: '0 1px 1px rgba(0, 0, 0, 0.12), 0 2px 0 0 rgba(255, 255, 255, 0.7) inset',
		display: 'inline-block',
		fontFamily: 'Consolas, "Liberation Mono", Courier, monospace',
		fontSize: '0.85em',
		fontWeight: 700,
		lineHeight: 'inherit',
		padding: '1px 4px',
		whiteSpace: 'nowrap',

		// little hack to tweak "visual-middle" alignment
		position: 'relative',
		top: -1
	}
};

module.exports = Kbd;

},{"../../theme":477,"../../utils/color":479,"glamor":undefined,"react":undefined}],466:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Render the body of a popout
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PopoutBody = _react2.default.createClass({
	displayName: 'PopoutBody',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string,
		scrollable: _react2.default.PropTypes.bool
	},
	render: function render() {
		var className = (0, _classnames2.default)('Popout__body', {
			'Popout__scrollable-area': this.props.scrollable
		}, this.props.className);
		var props = (0, _blacklist2.default)(this.props, 'className', 'scrollable');

		return _react2.default.createElement('div', _extends({ className: className }, props));
	}
});

module.exports = PopoutBody;

},{"blacklist":undefined,"classnames":undefined,"react":undefined}],467:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BUTTON_BASE_CLASSNAME = 'Popout__footer__button Popout__footer__button--'; /**
                                                                                * Render a footer for a popout
                                                                                */

var PopoutFooter = _react2.default.createClass({
	displayName: 'PopoutFooter',
	propTypes: {
		children: _react2.default.PropTypes.node,
		primaryButtonAction: _react2.default.PropTypes.func,
		primaryButtonIsSubmit: _react2.default.PropTypes.bool,
		primaryButtonLabel: _react2.default.PropTypes.string,
		secondaryButtonAction: _react2.default.PropTypes.func,
		secondaryButtonLabel: _react2.default.PropTypes.string
	},
	// Render a primary button
	renderPrimaryButton: function renderPrimaryButton() {
		if (!this.props.primaryButtonLabel) return null;

		return _react2.default.createElement(
			'button',
			{
				type: this.props.primaryButtonIsSubmit ? 'submit' : 'button',
				className: BUTTON_BASE_CLASSNAME + 'primary',
				onClick: this.props.primaryButtonAction
			},
			this.props.primaryButtonLabel
		);
	},

	// Render a secondary button
	renderSecondaryButton: function renderSecondaryButton() {
		if (!this.props.secondaryButtonAction || !this.props.secondaryButtonLabel) return null;

		return _react2.default.createElement(
			'button',
			{
				type: 'button',
				className: BUTTON_BASE_CLASSNAME + 'secondary',
				onClick: this.props.secondaryButtonAction
			},
			this.props.secondaryButtonLabel
		);
	},
	render: function render() {
		return _react2.default.createElement(
			'div',
			{ className: 'Popout__footer' },
			this.renderPrimaryButton(),
			this.renderSecondaryButton(),
			this.props.children
		);
	}
});

module.exports = PopoutFooter;

},{"react":undefined}],468:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Render a header for a popout
 */

var PopoutHeader = _react2.default.createClass({
	displayName: 'PopoutHeader',
	propTypes: {
		leftAction: _react2.default.PropTypes.func,
		leftIcon: _react2.default.PropTypes.string,
		title: _react2.default.PropTypes.string.isRequired,
		transitionDirection: _react2.default.PropTypes.oneOf(['next', 'prev'])
	},
	render: function render() {
		// If we have a left action and a left icon, render a header button
		var headerButton = this.props.leftAction && this.props.leftIcon ? _react2.default.createElement('button', {
			key: 'button_' + this.props.transitionDirection,
			type: 'button',
			className: 'Popout__header__button octicon octicon-' + this.props.leftIcon,
			onClick: this.props.leftAction
		}) : null;
		// If we have a title, render it
		var headerTitle = this.props.title ? _react2.default.createElement(
			'span',
			{
				key: 'title_' + this.props.transitionDirection,
				className: 'Popout__header__label'
			},
			this.props.title
		) : null;

		return _react2.default.createElement(
			'div',
			{ className: 'Popout__header' },
			_react2.default.createElement(
				_reactAddonsCssTransitionGroup2.default,
				{
					transitionName: 'Popout__header__button',
					transitionEnterTimeout: 200,
					transitionLeaveTimeout: 200
				},
				headerButton
			),
			_react2.default.createElement(
				_reactAddonsCssTransitionGroup2.default,
				{
					transitionName: 'Popout__pane-' + this.props.transitionDirection,
					transitionEnterTimeout: 360,
					transitionLeaveTimeout: 360
				},
				headerTitle
			)
		);
	}
});

module.exports = PopoutHeader;

},{"react":undefined,"react-addons-css-transition-group":undefined}],469:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Render a popout list. Can also use PopoutListItem and PopoutListHeading
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PopoutList = _react2.default.createClass({
	displayName: 'PopoutList',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string
	},
	render: function render() {
		var className = (0, _classnames2.default)('PopoutList', this.props.className);
		var props = (0, _blacklist2.default)(this.props, 'className');

		return _react2.default.createElement('div', _extends({ className: className }, props));
	}
});

module.exports = PopoutList;

// expose the child to the top level export
module.exports.Item = require('./PopoutListItem');
module.exports.Heading = require('./PopoutListHeading');

},{"./PopoutListHeading":470,"./PopoutListItem":471,"blacklist":undefined,"classnames":undefined,"react":undefined}],470:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Render a popout list heading
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PopoutListHeading = _react2.default.createClass({
	displayName: 'PopoutListHeading',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string
	},
	render: function render() {
		var className = (0, _classnames2.default)('PopoutList__heading', this.props.className);
		var props = (0, _blacklist2.default)(this.props, 'className');

		return _react2.default.createElement('div', _extends({ className: className }, props));
	}
});

module.exports = PopoutListHeading;

},{"blacklist":undefined,"classnames":undefined,"react":undefined}],471:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Render a popout list item
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PopoutListItem = _react2.default.createClass({
	displayName: 'PopoutListItem',
	propTypes: {
		icon: _react2.default.PropTypes.string,
		iconHover: _react2.default.PropTypes.string,
		isSelected: _react2.default.PropTypes.bool,
		label: _react2.default.PropTypes.string.isRequired,
		onClick: _react2.default.PropTypes.func
	},
	getInitialState: function getInitialState() {
		return {
			hover: false
		};
	},
	hover: function hover() {
		this.setState({ hover: true });
	},
	unhover: function unhover() {
		this.setState({ hover: false });
	},

	// Render an icon
	renderIcon: function renderIcon() {
		if (!this.props.icon) return null;
		var icon = this.state.hover && this.props.iconHover ? this.props.iconHover : this.props.icon;
		var iconClassname = (0, _classnames2.default)('PopoutList__item__icon octicon', 'octicon-' + icon);

		return _react2.default.createElement('span', { className: iconClassname });
	},
	render: function render() {
		var itemClassname = (0, _classnames2.default)('PopoutList__item', {
			'is-selected': this.props.isSelected
		});
		var props = (0, _blacklist2.default)(this.props, 'className', 'icon', 'iconHover', 'isSelected', 'label');
		return _react2.default.createElement(
			'button',
			_extends({
				type: 'button',
				title: this.props.label,
				className: itemClassname,
				onFocus: this.hover,
				onBlur: this.unhover,
				onMouseOver: this.hover,
				onMouseOut: this.unhover
			}, props),
			this.renderIcon(),
			_react2.default.createElement(
				'span',
				{ className: 'PopoutList__item__label' },
				this.props.label
			)
		);
	}
});

module.exports = PopoutListItem;

},{"blacklist":undefined,"classnames":undefined,"react":undefined}],472:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Render a popout pane, calls props.onLayout when the component mounts
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PopoutPane = _react2.default.createClass({
	displayName: 'PopoutPane',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string,
		onLayout: _react2.default.PropTypes.func
	},
	getDefaultProps: function getDefaultProps() {
		return {
			onLayout: function onLayout() {}
		};
	},
	componentDidMount: function componentDidMount() {
		this.props.onLayout(this.refs.el.offsetHeight);
	},
	render: function render() {
		var className = (0, _classnames2.default)('Popout__pane', this.props.className);
		var props = (0, _blacklist2.default)(this.props, 'className', 'onLayout');

		return _react2.default.createElement('div', _extends({ ref: 'el', className: className }, props));
	}
});

module.exports = PopoutPane;

},{"blacklist":undefined,"classnames":undefined,"react":undefined}],473:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Portal = require('../Portal');

var _Portal2 = _interopRequireDefault(_Portal);

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SIZES = {
	arrowHeight: 12,
	arrowWidth: 16,
	horizontalMargin: 20
}; /**
    * A Popout component.
    * One can also add a Header (Popout/Header), a Footer
    * (Popout/Footer), a Body (Popout/Body) and a Pan (Popout/Pane).
    */

var Popout = _react2.default.createClass({
	displayName: 'Popout',
	propTypes: {
		isOpen: _react2.default.PropTypes.bool,
		onCancel: _react2.default.PropTypes.func,
		onSubmit: _react2.default.PropTypes.func,
		relativeToID: _react2.default.PropTypes.string.isRequired,
		width: _react2.default.PropTypes.number
	},
	getDefaultProps: function getDefaultProps() {
		return {
			width: 320
		};
	},
	getInitialState: function getInitialState() {
		return {};
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		if (!this.props.isOpen && nextProps.isOpen) {
			window.addEventListener('resize', this.calculatePosition);
			this.calculatePosition(nextProps.isOpen);
		} else if (this.props.isOpen && !nextProps.isOpen) {
			window.removeEventListener('resize', this.calculatePosition);
		}
	},
	getPortalDOMNode: function getPortalDOMNode() {
		return this.refs.portal.getPortalDOMNode();
	},
	calculatePosition: function calculatePosition(isOpen) {
		if (!isOpen) return;
		var posNode = document.getElementById(this.props.relativeToID);

		var pos = {
			top: 0,
			left: 0,
			width: posNode.offsetWidth,
			height: posNode.offsetHeight
		};
		while (posNode.offsetParent) {
			pos.top += posNode.offsetTop;
			pos.left += posNode.offsetLeft;
			posNode = posNode.offsetParent;
		}

		var leftOffset = Math.max(pos.left + pos.width / 2 - this.props.width / 2, SIZES.horizontalMargin);
		var topOffset = pos.top + pos.height + SIZES.arrowHeight;

		var spaceOnRight = window.innerWidth - (leftOffset + this.props.width + SIZES.horizontalMargin);
		if (spaceOnRight < 0) {
			leftOffset = leftOffset + spaceOnRight;
		}

		var arrowLeftOffset = leftOffset === SIZES.horizontalMargin ? pos.left + pos.width / 2 - SIZES.arrowWidth / 2 - SIZES.horizontalMargin : null;

		var newStateAvaliable = this.state.leftOffset !== leftOffset || this.state.topOffset !== topOffset || this.state.arrowLeftOffset !== arrowLeftOffset;

		if (newStateAvaliable) {
			this.setState({
				leftOffset: leftOffset,
				topOffset: topOffset,
				arrowLeftOffset: arrowLeftOffset
			});
		}
	},
	renderPopout: function renderPopout() {
		if (!this.props.isOpen) return null;

		var width = this.props.width;
		var _state = this.state,
		    arrowLeftOffset = _state.arrowLeftOffset,
		    left = _state.leftOffset,
		    top = _state.topOffset;


		var arrowStyles = arrowLeftOffset ? { left: 0, marginLeft: arrowLeftOffset } : null;

		return _react2.default.createElement(
			'div',
			{ className: 'Popout', style: { left: left, top: top, width: width } },
			_react2.default.createElement('span', { className: 'Popout__arrow', style: arrowStyles }),
			_react2.default.createElement(
				'div',
				{ className: 'Popout__inner' },
				this.props.children
			)
		);
	},
	renderBlockout: function renderBlockout() {
		if (!this.props.isOpen) return;
		return _react2.default.createElement('div', { className: 'blockout', onClick: this.props.onCancel });
	},
	render: function render() {
		return _react2.default.createElement(
			_Portal2.default,
			{ className: 'Popout-wrapper', ref: 'portal' },
			_react2.default.createElement(
				_reactAddonsCssTransitionGroup2.default,
				{
					transitionEnterTimeout: 200,
					transitionLeaveTimeout: 200,
					transitionName: 'Popout'
				},
				this.renderPopout()
			),
			this.renderBlockout()
		);
	}
});

module.exports = Popout;

// expose the child to the top level export
module.exports.Header = require('./PopoutHeader');
module.exports.Body = require('./PopoutBody');
module.exports.Footer = require('./PopoutFooter');
module.exports.Pane = require('./PopoutPane');

},{"../Portal":474,"./PopoutBody":466,"./PopoutFooter":467,"./PopoutHeader":468,"./PopoutPane":472,"react":undefined,"react-addons-css-transition-group":undefined}],474:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Used by the Popout component and the Lightbox component of the fields for
 * popouts. Renders a non-react DOM node.
 */

module.exports = _react2.default.createClass({
	displayName: 'Portal',
	portalElement: null, // eslint-disable-line react/sort-comp
	componentDidMount: function componentDidMount() {
		var el = document.createElement('div');
		document.body.appendChild(el);
		this.portalElement = el;
		this.componentDidUpdate();
	},
	componentWillUnmount: function componentWillUnmount() {
		document.body.removeChild(this.portalElement);
	},
	componentDidUpdate: function componentDidUpdate() {
		_reactDom2.default.render(_react2.default.createElement('div', this.props), this.portalElement);
	},
	getPortalDOMNode: function getPortalDOMNode() {
		return this.portalElement;
	},
	render: function render() {
		return null;
	}
});

},{"react":undefined,"react-dom":undefined}],475:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRouterRedux = require('react-router-redux');

var _redux = require('redux');

var _reactRouter = require('react-router');

var _reduxThunk = require('redux-thunk');

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

var _reduxSaga = require('redux-saga');

var _reduxSaga2 = _interopRequireDefault(_reduxSaga);

var _main = require('./screens/List/reducers/main');

var _main2 = _interopRequireDefault(_main);

var _active = require('./screens/List/reducers/active');

var _active2 = _interopRequireDefault(_active);

var _reducer = require('./screens/Item/reducer');

var _reducer2 = _interopRequireDefault(_reducer);

var _reducer3 = require('./screens/Home/reducer');

var _reducer4 = _interopRequireDefault(_reducer3);

var _sagas = require('./sagas');

var _sagas2 = _interopRequireDefault(_sagas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Combine the reducers to one state
var reducers = (0, _redux.combineReducers)({
	lists: _main2.default,
	active: _active2.default,
	item: _reducer2.default,
	home: _reducer4.default,
	routing: _reactRouterRedux.routerReducer
});

var sagaMiddleware = (0, _reduxSaga2.default)();

// Create the store
var store = (0, _redux.createStore)(reducers, (0, _redux.compose)((0, _redux.applyMiddleware)(
// Support thunked actions and react-router-redux
_reduxThunk2.default, (0, _reactRouterRedux.routerMiddleware)(_reactRouter.browserHistory), sagaMiddleware),
// Support the Chrome DevTools extension
window.devToolsExtension ? window.devToolsExtension() : function (f) {
	return f;
}));

sagaMiddleware.run(_sagas2.default);

exports.default = store;

},{"./sagas":403,"./screens/Home/reducer":411,"./screens/Item/reducer":429,"./screens/List/reducers/active":456,"./screens/List/reducers/main":457,"react-router":undefined,"react-router-redux":undefined,"redux":undefined,"redux-saga":undefined,"redux-thunk":undefined}],476:[function(require,module,exports){
'use strict';

/**
 * Constants
 */

// breakpoints
exports.breakpoint = {
	xs: 480,
	sm: 768,
	md: 992,
	lg: 1200
};

// border radii
exports.borderRadius = {
	xs: 2,
	sm: 4,
	md: 8,
	lg: 16,
	xl: 32
};

// color
exports.color = {
	appDanger: '#d64242',
	appInfo: '#56cdfc',
	appPrimary: '#1385e5',
	appSuccess: '#34c240',
	appWarning: '#fa9f47'
};

// spacing
exports.spacing = {
	xs: 5,
	sm: 10,
	md: 20,
	lg: 40,
	xl: 80
};

// table constants

exports.TABLE_CONTROL_COLUMN_WIDTH = 26; // icon + padding
exports.NETWORK_ERROR_RETRY_DELAY = 500; // in ms

},{}],477:[function(require,module,exports){
'use strict';

/* eslint-disable key-spacing */
var theme = {};

var _require = require('./utils/color'),
    blend = _require.blend,
    darken = _require.darken,
    fade = _require.fade,
    lighten = _require.lighten;

// ==============================
// COMMON
// ==============================

// breakpoint

theme.breakpointNumeric = {
	mobile: 480,
	tabletPortrait: 768,
	tabletLandscape: 992,
	desktop: 1200
};
theme.breakpoint = {
	tabletPortraitMin: theme.breakpointNumeric.mobile + 1 + 'px',
	tabletLandscapeMin: theme.breakpointNumeric.tabletPortrait + 1 + 'px',
	desktopMin: theme.breakpointNumeric.tabletLandscape + 1 + 'px',
	desktopLargeMin: theme.breakpointNumeric.desktop + 1 + 'px',

	mobileMax: theme.breakpointNumeric.mobile + 'px',
	tabletPortraitMax: theme.breakpointNumeric.tabletPortrait + 'px',
	tabletLandscapeMax: theme.breakpointNumeric.tabletLandscape + 'px',
	desktopMax: theme.breakpointNumeric.desktop + 'px'
};

// container

theme.container = {
	gutter: 20,
	size: {
		small: 750,
		medium: 970,
		large: 1170
	}
};

// color

theme.color = {
	body: '#fafafa',
	link: '#1385e5',
	linkHover: lighten('#1385e5', 10),
	text: '#1A1A1A',

	// contextual
	success: '#34c240',
	create: '#34c240', // alias for success
	primary: '#1385e5',
	info: '#1385e5', // alias for primary
	warning: '#FA3',
	danger: '#d64242',
	error: '#d64242', // alias for danger

	// neutrals
	gray90: '#1A1A1A',
	gray80: '#333',
	gray70: '#4D4D4D',
	gray60: '#666',
	gray50: '#7F7F7F',
	gray40: '#999',
	gray30: '#B3B3B3',
	gray20: '#CCC',
	gray15: '#D9D9D9',
	gray10: '#E5E5E5',
	gray05: '#F2F2F2',

	// social
	facebook: '#3B5998',
	google: '#DC4E41',
	instagram: '#3f729b',
	pinterest: '#bd081c',
	tumblr: '#35465c',
	twitter: '#55ACEE',
	youtube: '#cd201f',
	vimeo: '#1ab7ea'
};

// border radii

theme.borderRadius = {
	small: '0.125rem',
	default: '0.3rem',
	large: '0.5rem'
};

// spacing

theme.spacing = {
	xsmall: 5,
	small: 10,
	default: 20,
	large: 30,
	xlarge: 40,
	xxlarge: 60
};

// ==============================
// ELEMENTAL SPECIFIC
// ==============================

// button

theme.button = {
	borderRadius: theme.borderRadius.default,
	borderWidth: 1,
	font: {
		weight: 500
	},
	paddingHorizontal: '1em',
	default: {
		bgColor: theme.color.primary,
		borderColor: blend(theme.color.primary, theme.color.body, 60),
		textColor: theme.color.primary
	},
	primary: {
		bgColor: theme.color.primary,
		borderColor: blend(theme.color.primary, theme.color.body, 60),
		textColor: theme.color.primary
	},
	success: {
		bgColor: theme.color.success,
		borderColor: blend(theme.color.success, theme.color.body, 60),
		textColor: theme.color.success
	},
	warning: {
		bgColor: theme.color.warning,
		borderColor: blend(theme.color.warning, theme.color.body, 60),
		textColor: theme.color.warning
	},
	danger: {
		bgColor: theme.color.danger,
		borderColor: blend(theme.color.danger, theme.color.body, 60),
		textColor: theme.color.danger
	}
};

// blank state

theme.blankstate = {
	background: darken(theme.color.body, 4),
	borderRadius: theme.borderRadius.default,
	color: theme.color.gray40,
	paddingHorizontal: '2em',
	paddingVertical: '4em'
};

// font

theme.font = {
	family: {
		mono: 'Menlo, Monaco, Consolas, "Courier New", monospace',
		sansSerif: '"Helvetica Neue", Helvetica, Arial, sans-serif',
		serif: 'Georgia, Times New Roman, Times, serif'
	},
	size: {
		xxsmall: '0.65rem',
		xsmall: '0.75rem',
		small: '0.85rem',
		default: '1rem',
		medium: '1.2rem',
		large: '1.6rem',
		xlarge: '2.4rem',
		xxlarge: '3.2rem'
	}
};

// form

theme.form = {
	label: {
		color: theme.color.gray50,
		fontSize: '1rem',
		fontWeight: 'normal',
		width: 180
	},
	note: {
		color: theme.color.gray40,
		fontSize: '0.9em'
	}
};

// component

theme.component = {
	lineHeight: '2.3em',
	height: '2.4em',
	padding: '1em'
};

// input

theme.input = {
	background: {
		default: 'white',
		disabled: '#fafafa',
		noedit: darken(theme.color.body, 2)
	},
	placeholderColor: '#aaa',
	lineHeight: theme.component.lineHeight,
	height: theme.component.height,
	border: {
		color: {
			default: '#ccc',
			focus: theme.color.info,
			hover: '#bbb',
			noedit: darken(theme.color.body, 8)
		},
		radius: theme.borderRadius.default,
		width: 1
	},
	boxShadow: 'inset 0 1px 1px rgba(0, 0, 0, 0.075)',
	boxShadowFocus: 'inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 0 3px ' + fade(theme.color.info, 10),
	paddingHorizontal: '.75em'
};

// select

theme.select = {
	boxShadow: '0 1px 1px rgba(0, 0, 0, 0.075)'
};

// alert

theme.alert = {
	padding: '0.75em  1em',
	margin: '0 0 1em',
	borderWidth: 1,
	borderRadius: theme.borderRadius.default,

	color: {
		danger: {
			background: fade(theme.color.danger, 10),
			border: fade(theme.color.danger, 10),
			text: theme.color.danger
		},
		info: {
			background: fade(theme.color.primary, 10),
			border: fade(theme.color.primary, 10),
			text: theme.color.primary
		},
		success: {
			background: fade(theme.color.success, 10),
			border: fade(theme.color.success, 10),
			text: theme.color.success
		},
		warning: {
			background: fade(theme.color.warning, 10),
			border: fade(theme.color.warning, 10),
			text: theme.color.warning
		}
	}
};

// glyph

theme.glyph = {
	color: {
		danger: theme.color.danger,
		inherit: 'inherit',
		inverted: 'white',
		primary: theme.color.primary,
		success: theme.color.success,
		warning: theme.color.warning
	},
	size: {
		small: 16,
		medium: 32,
		large: 64
	}
};

// modal

theme.modal = {
	background: 'rgba(0, 0, 0, 0.8)',
	zIndex: 100,
	padding: {
		dialog: {
			horizontal: '1em',
			vertical: 0
		},
		body: {
			horizontal: 0,
			vertical: '1em'
		},
		footer: {
			horizontal: 0,
			vertical: '1em'
		},
		header: {
			horizontal: 0,
			vertical: '0.6em'
		}
	}
};

// pagination

theme.pagination = {
	color: theme.color.gray60,

	hover: {
		background: 'white',
		border: 'rgba(0, 0, 0, 0.1)',
		color: theme.color.gray60
	},
	selected: {
		background: 'rgba(0, 0, 0, 0.05)',
		border: 'transparent',
		color: theme.color.gray60
	},
	disabled: {
		background: 'transparent',
		color: theme.color.gray40
	}
};

// spinner

theme.spinner = {
	color: {
		danger: theme.color.danger,
		default: theme.color.gray40,
		inverted: 'white',
		primary: theme.color.primary,
		success: theme.color.success,
		warning: theme.color.warning
	},
	size: {
		small: 4,
		medium: 8,
		large: 16
	}
};

module.exports = theme;

},{"./utils/color":479}],478:[function(require,module,exports){
'use strict';

/**
 * Helper method to handle List operations, e.g. creating items, deleting items,
 * getting information about those lists, etc.
 */

var listToArray = require('list-to-array');
var qs = require('qs');
var xhr = require('xhr');
var assign = require('object-assign');
// Filters for truthy elements in an array
var truthy = function truthy(i) {
	return i;
};

/**
 * Get the columns of a list, structured by fields and headings
 *
 * @param  {Object} list The list we want the columns of
 *
 * @return {Array}       The columns
 */
function getColumns(list) {
	return list.uiElements.map(function (col) {
		if (col.type === 'heading') {
			return { type: 'heading', content: col.content };
		} else {
			var field = list.fields[col.field];
			return field ? { type: 'field', field: field, title: field.label, path: field.path } : null;
		}
	}).filter(truthy);
}

/**
 * Make an array of filters an object keyed by the filtering path
 *
 * @param  {Array} filterArray The array of filters
 *
 * @return {Object}            The corrected filters, keyed by path
 */
function getFilters(filterArray) {
	var filters = {};
	filterArray.forEach(function (filter) {
		filters[filter.field.path] = filter.value;
	});
	return filters;
};

/**
 * Get the sorting string for the URI
 *
 * @param  {Array} sort.paths The paths we want to sort
 *
 * @return {String}           All the sorting queries we want as a string
 */
function getSortString(sort) {
	return sort.paths.map(function (i) {
		// If we want to sort inverted, we prefix a "-" before the sort path
		return i.invert ? '-' + i.path : i.path;
	}).filter(truthy).join(',');
};

/**
 * Build a query string from a bunch of options
 */
function buildQueryString(options) {
	var query = {};
	if (options.search) query.search = options.search;
	if (options.filters.length) query.filters = JSON.stringify(getFilters(options.filters));
	if (options.columns) query.fields = options.columns.map(function (i) {
		return i.path;
	}).join(',');
	if (options.page && options.page.size) query.limit = options.page.size;
	if (options.page && options.page.index > 1) query.skip = (options.page.index - 1) * options.page.size;
	if (options.sort) query.sort = getSortString(options.sort);
	query.expandRelationshipFields = true;

	// Custom Filter to Fetch all Records While Selecting Manage All

	if (options.filters.fetch_all_data) {
		query.limit = options.filters.item_count;
	}

	return '?' + qs.stringify(query);
};

/**
 * The main list helper class
 *
 * @param {Object} options
 */
var List = function List(options) {
	// TODO these options are possibly unused
	assign(this, options);
	this.columns = getColumns(this);
	this.expandedDefaultColumns = this.expandColumns(this.defaultColumns);
	this.defaultColumnPaths = this.expandedDefaultColumns.map(function (i) {
		return i.path;
	}).join(',');
};

/**
 * Create an item via the API
 *
 * @param  {FormData} formData The submitted form data
 * @param  {Function} callback Called after the API call
 */
List.prototype.createItem = function (formData, callback) {
	xhr({
		url: Keystone.adminPath + '/api/' + this.path + '/create',
		responseType: 'json',
		method: 'POST',
		headers: assign({}, Keystone.csrf.header),
		body: formData
	}, function (err, resp, data) {
		if (err) callback(err);
		if (resp.statusCode === 200) {
			callback(null, data);
		} else {
			// NOTE: xhr callback will be called with an Error if
			//  there is an error in the browser that prevents
			//  sending the request. A HTTP 500 response is not
			//  going to cause an error to be returned.
			callback(data, null);
		}
	});
};

/**
 * Update a specific item
 *
 * @param  {String}   id       The id of the item we want to update
 * @param  {FormData} formData The submitted form data
 * @param  {Function} callback Called after the API call
 */
List.prototype.updateItem = function (id, formData, callback) {
	xhr({
		url: Keystone.adminPath + '/api/' + this.path + '/' + id,
		responseType: 'json',
		method: 'POST',
		headers: assign({}, Keystone.csrf.header),
		body: formData
	}, function (err, resp, data) {
		if (err) return callback(err);
		if (resp.statusCode === 200) {
			callback(null, data);
		} else {
			callback(data);
		}
	});
};

List.prototype.expandColumns = function (input) {
	var _this = this;

	var nameIncluded = false;
	var cols = listToArray(input).map(function (i) {
		var split = i.split('|');
		var path = split[0];
		var width = split[1];
		if (path === '__name__') {
			path = _this.namePath;
		}
		var field = _this.fields[path];
		if (!field) {
			// TODO: Support arbitary document paths
			if (!_this.hidden) {
				if (path === _this.namePath) {
					console.warn('List ' + _this.key + ' did not specify any default columns or a name field');
				} else {
					console.warn('List ' + _this.key + ' specified an invalid default column: ' + path);
				}
			}
			return;
		}
		if (path === _this.namePath) {
			nameIncluded = true;
		}
		return {
			field: field,
			label: field.label,
			path: field.path,
			type: field.type,
			width: width
		};
	}).filter(truthy);
	if (!nameIncluded) {
		cols.unshift({
			type: 'id',
			label: 'ID',
			path: 'id'
		});
	}
	return cols;
};

List.prototype.expandSort = function (input) {
	var _this2 = this;

	var sort = {
		rawInput: input || this.defaultSort,
		isDefaultSort: false
	};
	sort.input = sort.rawInput;
	if (sort.input === '__default__') {
		sort.isDefaultSort = true;
		sort.input = this.sortable ? 'sortOrder' : this.namePath;
	}
	sort.paths = listToArray(sort.input).map(function (path) {
		var invert = false;
		if (path.charAt(0) === '-') {
			invert = true;
			path = path.substr(1);
		} else if (path.charAt(0) === '+') {
			path = path.substr(1);
		}
		var field = _this2.fields[path];
		if (!field) {
			// TODO: Support arbitary document paths
			console.warn('Invalid Sort specified:', path);
			return;
		}
		return {
			field: field,
			type: field.type,
			label: field.label,
			path: field.path,
			invert: invert
		};
	}).filter(truthy);
	return sort;
};

/**
 * Load a specific item via the API
 *
 * @param  {String}   itemId   The id of the item we want to load
 * @param  {Object}   options
 * @param  {Function} callback
 */
List.prototype.loadItem = function (itemId, options, callback) {
	if (arguments.length === 2 && typeof options === 'function') {
		callback = options;
		options = null;
	}
	var url = Keystone.adminPath + '/api/' + this.path + '/' + itemId;
	var query = qs.stringify(options);
	if (query.length) url += '?' + query;
	xhr({
		url: url,
		responseType: 'json'
	}, function (err, resp, data) {
		if (err) return callback(err);
		// Pass the data as result or error, depending on the statusCode
		if (resp.statusCode === 200) {
			callback(null, data);
		} else {
			callback(data);
		}
	});
};

/**
 * Load all items of a list, optionally passing objects to build a query string
 * for sorting or searching
 *
 * @param  {Object}   options
 * @param  {Function} callback
 */
List.prototype.loadItems = function (options, callback) {
	var url = Keystone.adminPath + '/api/' + this.path + buildQueryString(options);
	xhr({
		url: url,
		responseType: 'json'
	}, function (err, resp, data) {
		if (err) callback(err);
		// Pass the data as result or error, depending on the statusCode
		if (resp.statusCode === 200) {
			callback(null, data);
		} else {
			callback(data);
		}
	});
};

/**
 * Constructs a download URL to download a list with the current sorting, filtering,
 * selection and searching options
 *
 * @param  {Object} options
 *
 * @return {String}         The download URL
 */
List.prototype.getDownloadURL = function (options) {
	var url = Keystone.adminPath + '/api/' + this.path;
	var parts = [];
	if (options.format !== 'json') {
		options.format = 'csv';
	}
	parts.push(options.search ? 'search=' + options.search : '');
	parts.push(options.filters.length ? 'filters=' + JSON.stringify(getFilters(options.filters)) : '');
	parts.push(options.columns ? 'select=' + options.columns.map(function (i) {
		return i.path;
	}).join(',') : '');
	parts.push(options.sort ? 'sort=' + getSortString(options.sort) : '');
	parts.push('expandRelationshipFields=true');
	return url + '/export.' + options.format + '?' + parts.filter(truthy).join('&');
};

/**
 * Delete a specific item via the API
 *
 * @param  {String}   itemId   The id of the item we want to delete
 * @param  {Function} callback
 */
List.prototype.deleteItem = function (itemId, callback) {
	this.deleteItems([itemId], callback);
};

/**
 * Delete multiple items at once via the API
 *
 * @param  {Array}   itemIds  An array of ids of items we want to delete
 * @param  {Function} callback
 */
List.prototype.deleteItems = function (itemIds, callback) {
	var url = Keystone.adminPath + '/api/' + this.path + '/delete';
	xhr({
		url: url,
		method: 'POST',
		headers: assign({}, Keystone.csrf.header),
		json: {
			ids: itemIds
		}
	}, function (err, resp, body) {
		if (err) return callback(err);
		// Pass the body as result or error, depending on the statusCode
		if (resp.statusCode === 200) {
			callback(null, body);
		} else {
			callback(body);
		}
	});
};

List.prototype.reorderItems = function (item, oldSortOrder, newSortOrder, pageOptions, callback) {
	var url = Keystone.adminPath + '/api/' + this.path + '/' + item.id + '/sortOrder/' + oldSortOrder + '/' + newSortOrder + '/' + buildQueryString(pageOptions);
	xhr({
		url: url,
		method: 'POST',
		headers: assign({}, Keystone.csrf.header)
	}, function (err, resp, body) {
		if (err) return callback(err);
		try {
			body = JSON.parse(body);
		} catch (e) {
			console.log('Error parsing results json:', e, body);
			return callback(e);
		}
		// Pass the body as result or error, depending on the statusCode
		if (resp.statusCode === 200) {
			callback(null, body);
		} else {
			callback(body);
		}
	});
};

module.exports = List;

},{"list-to-array":undefined,"object-assign":577,"qs":undefined,"xhr":undefined}],479:[function(require,module,exports){
'use strict';

/**
	Validate Hex
	==============================

	@param {String} hex

	1. remove hash if present
	2. convert from 3 to 6 digit color code & ensure valid hex
*/

function validateHex(color) {
	var hex = color.replace('#', '');

	if (hex.length === 3) {
		return hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
	}
	if (hex.length !== 6) {
		throw new Error('Invalid color value provided: "' + color + '"');
	}

	return hex;
};

/**
	Fade Color
	==============================

	Takes a hexidecimal color, converts it to RGB and applies an alpha value.

	@param {String} color
	@param {Number} opacity (0-100)

	1. convert hex to RGB
	2. combine and add alpha channel
*/

function fade(color) {
	var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;

	var decimalFraction = opacity / 100;
	var hex = validateHex(color);

	// 1.
	var r = parseInt(hex.substring(0, 2), 16);
	var g = parseInt(hex.substring(2, 4), 16);
	var b = parseInt(hex.substring(4, 6), 16);

	// 2.
	var result = 'rgba(' + r + ',' + g + ',' + b + ',' + decimalFraction + ')';

	return result;
};

/**
	Shade Color
	==============================

	Takes a hexidecimal color, converts it to RGB and lightens or darkens

	@param {String} color
	@param {Number} opacity (0-100)

	1. do fancy RGB bitwise operations
	2. combine back into a hex value
*/

function shade(color, percent) {
	var decimalFraction = percent / 100;
	var hex = validateHex(color);

	// 1.
	var f = parseInt(hex, 16);
	var t = decimalFraction < 0 ? 0 : 255;
	var p = decimalFraction < 0 ? decimalFraction * -1 : decimalFraction;

	var R = f >> 16;
	var G = f >> 8 & 0x00FF;
	var B = f & 0x0000FF;

	// 2.
	return '#' + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);
};

// shade helpers
var lighten = shade;
function darken(color, percent) {
	return shade(color, percent * -1);
};

/**
	Blend Color
	==============================

	Takes two hexidecimal colors and blend them together

	@param {String} color1
	@param {String} color2
	@param {Number} percent (0-100)

	1. do fancy RGB bitwise operations
	2. combine back into a hex value
*/

function blend(color1, color2, percent) {
	var decimalFraction = percent / 100;
	var hex1 = validateHex(color1);
	var hex2 = validateHex(color2);

	// 1.
	var f = parseInt(hex1, 16);
	var t = parseInt(hex2, 16);

	var R1 = f >> 16;
	var G1 = f >> 8 & 0x00FF;
	var B1 = f & 0x0000FF;

	var R2 = t >> 16;
	var G2 = t >> 8 & 0x00FF;
	var B2 = t & 0x0000FF;

	// 2.
	return '#' + (0x1000000 + (Math.round((R2 - R1) * decimalFraction) + R1) * 0x10000 + (Math.round((G2 - G1) * decimalFraction) + G1) * 0x100 + (Math.round((B2 - B1) * decimalFraction) + B1)).toString(16).slice(1);
}

module.exports = {
	blend: blend,
	darken: darken,
	fade: fade,
	lighten: lighten
};

},{}],480:[function(require,module,exports){
"use strict";

// ======================
// Concatenate Classnames
// ======================
//
// Support className as an array:
// force classname prop into an array (possibly of arrays) then flatten

/*
	// To use spread the new array into aphrodite's `css` function

	function Component ({ className, ...props }) {
		props.className = css(
			classes.component,
			...concatClassnames(className)
		);

		return <Component {...props} />;
	};
*/

module.exports = function concatClassnames(className) {
	return [className].reduce(function (a, b) {
		return a.concat(b);
	}, []);
};

},{}],481:[function(require,module,exports){
'use strict';

/**
	Linear Gradient
	==============================

	Short-hand helper for adding a linear gradient to your component.

	- @param {String} sideOrCorner
	- @param {String} top
	- @param {String} bottom
	- @param {String} base (optional)
	- @returns {Object} css linear gradient declaration

	Spread the declaration into your component class:
	------------------------------

	myComponentClass: {
		...linearGradient(red, blue),
	}
*/

function linearGradient(direction, top, bottom) {
	var base = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

	return {
		background: 'linear-gradient(' + direction + ', ' + top + ' 0%, ' + bottom + ' 100%) ' + base
	};
}

// Vertical Gradient
function gradientVertical(top, bottom, base) {
	return linearGradient('to bottom', top, bottom, base);
}

// Horizontal Gradient
function gradientHorizontal(top, bottom, base) {
	return linearGradient('to right', top, bottom, base);
}

/**
	Border Radius
	==============================

	Short-hand helper for border radii
*/

// top
function borderTopRadius(radius) {
	return {
		borderTopLeftRadius: radius,
		borderTopRightRadius: radius
	};
}

// right
function borderRightRadius(radius) {
	return {
		borderBottomRightRadius: radius,
		borderTopRightRadius: radius
	};
}

// bottom
function borderBottomRadius(radius) {
	return {
		borderBottomLeftRadius: radius,
		borderBottomRightRadius: radius
	};
}

// left
function borderLeftRadius(radius) {
	return {
		borderBottomLeftRadius: radius,
		borderTopLeftRadius: radius
	};
}

// Return

module.exports = {
	borderTopRadius: borderTopRadius,
	borderRightRadius: borderRightRadius,
	borderBottomRadius: borderBottomRadius,
	borderLeftRadius: borderLeftRadius,

	gradientHorizontal: gradientHorizontal,
	gradientVertical: gradientVertical
};

},{}],482:[function(require,module,exports){
'use strict';

var _List = require('./List');

var _List2 = _interopRequireDefault(_List);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.listsByKey = {}; /**
                          * Exports an object of lists, keyed with their key instead of their name and
                          * wrapped with the List helper (./List.js)
                          */

exports.listsByPath = {};

for (var key in Keystone.lists) {
	// Guard for-ins
	if ({}.hasOwnProperty.call(Keystone.lists, key)) {
		var list = new _List2.default(Keystone.lists[key]);
		exports.listsByKey[key] = list;
		exports.listsByPath[list.path] = list;
	}
}

},{"./List":478}],483:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.checkForQueryChange = checkForQueryChange;
exports.normaliseValue = normaliseValue;
exports.createSortQueryParams = createSortQueryParams;
exports.createPageQueryParams = createPageQueryParams;
exports.updateQueryParams = updateQueryParams;
exports.stringifyColumns = stringifyColumns;
exports.parametizeFilters = parametizeFilters;

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function checkForQueryChange(nextProps, thisProps) {
	var query = nextProps.location.query;
	var cachedQuery = nextProps.active.cachedQuery;


	var parsedQuery = _extends({}, query, { page: parseInt(query.page) });

	if (!parsedQuery.page) delete parsedQuery.page;

	var attenuatedQuery = (0, _blacklist2.default)(parsedQuery, 'search');
	var attenuatedCache = (0, _blacklist2.default)(cachedQuery, 'search');

	if (nextProps.location.pathname !== thisProps.location.pathname) return true;

	if (!(0, _isEqual2.default)(attenuatedQuery, attenuatedCache)) return true;

	return false;
}

function normaliseValue(value, benchmark) {
	if (value === benchmark) return void 0;
	return value;
}

function createSortQueryParams(rawInput, defaultSort) {
	return normaliseValue(rawInput, defaultSort);
}

function createPageQueryParams(page, defaultValue) {
	return normaliseValue(page, defaultValue);
}

/**
 * Updates the query parameters with the ones passed as the first argument
 *
 * @param  {Object} params         The new parameters to be added
 * @param  {Object} location       The current location object
 */
function updateQueryParams(params, location) {
	if (!location) return;
	var newParams = (0, _objectAssign2.default)({}, location.query);
	// Stringify nested objects inside the parameters
	Object.keys(params).forEach(function (i) {
		if (params[i]) {
			newParams[i] = params[i];
			if (_typeof(newParams[i]) === 'object') {
				newParams[i] = JSON.stringify(newParams[i]);
			}
		} else {
			delete newParams[i];
		}
	});

	return newParams;
}

/**
 * Stringify the columns array from the state
 *
 * @param  {Array}  columns            The columns from the active state
 * @param  {String} defaultColumnPaths The default column paths of the current list
 *
 * @return {String}                    The column array, stringified
 */
function stringifyColumns(columns, defaultColumnPaths) {
	if (!columns) {
		return;
	}
	// Turns [{ path: 'someColumn' }, { path: 'someOtherColumn' }]
	// into ['someColumn', 'someOtherColumn']
	var columnString = columns.map(function (column) {
		return column.path;
	});
	// Turns that array into 'someColumn,someOtherColumn'
	if (Array.isArray(columnString)) columnString = columnString.join(',');
	// If that is the same as the default columns, don't set the query param
	if (columnString === defaultColumnPaths) columnString = undefined;
	return columnString;
}

/**
 * Flattens filters from state into the minimum needed object to be used as a url
 * param
 *
 * @param  {Object} filterArray         The array of filters from state
 */
function parametizeFilters(filterArray) {
	if (!filterArray || filterArray.length === 0) {
		return;
	}
	return filterArray.map(function (filter) {
		return _extends({
			path: filter.field.path
		}, filter.value);
	});
}

},{"blacklist":undefined,"lodash/isEqual":567,"object-assign":577}],484:[function(require,module,exports){
'use strict';

var _i = require('i');

var _i2 = _interopRequireDefault(_i);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Displays the singular or plural of a string based on a number
 * or number of items in an array.
 *
 * If arity is 1, returns the plural form of the word.
 *
 * @param {String} count
 * @param {String} singular string
 * @param {String} plural string
 * @return {String} singular or plural, * is replaced with count
 * @api public
 */

/**
 * A few helper methods for strings
 */

exports.plural = function (count, sn, pl) {
  if (arguments.length === 1) {
    return _i2.default.pluralize(count);
  }
  if (typeof sn !== 'string') sn = '';
  if (!pl) {
    pl = _i2.default.pluralize(sn);
  }
  if (typeof count === 'string') {
    count = Number(count);
  } else if (typeof count !== 'number') {
    count = (0, _lodash.size)(count);
  }
  return (count === 1 ? sn : pl).replace('*', count);
};

/**
 * Converts the first letter in a string to uppercase
 *
 * @param {String} str
 * @return {String} Str
 * @api public
 */

exports.upcase = function (str) {
  if (str && str.toString) str = str.toString();
  if (typeof str !== 'string' || !str.length) return '';
  return str.substr(0, 1).toUpperCase() + str.substr(1);
};

/**
 * Converts the first letter in a string to lowercase
 *
 * @param {String} Str
 * @return {String} str
 * @api public
 */

exports.downcase = function (str) {
  if (str && str.toString) str = str.toString();
  if (typeof str !== 'string' || !str.length) return '';
  return str.substr(0, 1).toLowerCase() + str.substr(1);
};

/**
 * Converts a string to title case
 *
 * @param {String} str
 * @return {String} Title Case form of str
 * @api public
 */

exports.titlecase = function (str) {
  if (str && str.toString) str = str.toString();
  if (typeof str !== 'string' || !str.length) return '';
  str = str.replace(/([a-z])([A-Z])/g, '$1 $2');
  var parts = str.split(/\s|_|\-/);
  for (var i = 0; i < parts.length; i++) {
    if (parts[i] && !/^[A-Z0-9]+$/.test(parts[i])) {
      parts[i] = exports.upcase(parts[i]);
    }
  }
  return (0, _lodash.compact)(parts).join(' ');
};

/**
 * Converts a string to camel case
 *
 * @param {String} str
 * @param {Boolean} lowercaseFirstWord
 * @return {String} camel-case form of str
 * @api public
 */

exports.camelcase = function (str, lc) {
  return _i2.default.camelize(str, !lc);
};

},{"i":undefined,"lodash":undefined}],485:[function(require,module,exports){
'use strict';

var ExMatch = require('expression-match'); // Matches objects with expressions

/**
 * Checks if something is an object
 *
 * @param  {Any} arg   The something we want to check the type of
 * @return {Boolean} If arg is an object or not
 */
function isObject(arg) {
  return Object.prototype.toString.call(arg) === '[object Object]';
};

/**
 * Evaluates the visibility of a field based on its dependencies and their values
 *
 * @param  {Object|Any} dependsOn The dependsOn variable we get from the field
 * @param  {Object}		values    The values currently in the fields
 * @return {Boolean}			  If the current field should be displayed based
 *                          	  on it's dependencies and their values
 */
module.exports = function evalDependsOn(dependsOn, values) {
  if (!isObject(dependsOn) || !Object.keys(dependsOn).length) {
    return true;
  }

  // Checks if the current field should be displayed, based on the values of
  // other fields and the dependsOn configuration of this field
  var Match = new ExMatch(dependsOn, values, false);
  return Match.match();
};

},{"expression-match":undefined}],486:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

},{"./_getNative":521,"./_root":552}],487:[function(require,module,exports){
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

},{"./_hashClear":527,"./_hashDelete":528,"./_hashGet":529,"./_hashHas":530,"./_hashSet":531}],488:[function(require,module,exports){
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

},{"./_listCacheClear":536,"./_listCacheDelete":537,"./_listCacheGet":538,"./_listCacheHas":539,"./_listCacheSet":540}],489:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":521,"./_root":552}],490:[function(require,module,exports){
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

},{"./_mapCacheClear":541,"./_mapCacheDelete":542,"./_mapCacheGet":543,"./_mapCacheHas":544,"./_mapCacheSet":545}],491:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

},{"./_getNative":521,"./_root":552}],492:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

},{"./_getNative":521,"./_root":552}],493:[function(require,module,exports){
var MapCache = require('./_MapCache'),
    setCacheAdd = require('./_setCacheAdd'),
    setCacheHas = require('./_setCacheHas');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache();
    while (++index < length) {
        this.add(values[index]);
    }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

},{"./_MapCache":490,"./_setCacheAdd":553,"./_setCacheHas":554}],494:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_ListCache":488,"./_stackClear":556,"./_stackDelete":557,"./_stackGet":558,"./_stackHas":559,"./_stackSet":560}],495:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":552}],496:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":552}],497:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

},{"./_getNative":521,"./_root":552}],498:[function(require,module,exports){
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

},{}],499:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
    // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' ||
    // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') ||
    // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
    // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":511,"./_isIndex":532,"./isArguments":563,"./isArray":564,"./isBuffer":566,"./isTypedArray":573}],500:[function(require,module,exports){
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

},{}],501:[function(require,module,exports){
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],502:[function(require,module,exports){
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":562}],503:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isArray = require('./isArray');

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

},{"./_arrayPush":500,"./isArray":564}],504:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":495,"./_getRawTag":523,"./_objectToString":550}],505:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":504,"./isObjectLike":571}],506:[function(require,module,exports){
var baseIsEqualDeep = require('./_baseIsEqualDeep'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":507,"./isObjectLike":571}],507:[function(require,module,exports){
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

},{"./_Stack":494,"./_equalArrays":515,"./_equalByTag":516,"./_equalObjects":517,"./_getTag":525,"./isArray":564,"./isBuffer":566,"./isTypedArray":573}],508:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

},{"./_isMasked":534,"./_toSource":561,"./isFunction":568,"./isObject":570}],509:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":504,"./isLength":569,"./isObjectLike":571}],510:[function(require,module,exports){
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

},{"./_isPrototype":535,"./_nativeKeys":548}],511:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],512:[function(require,module,exports){
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],513:[function(require,module,exports){
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

},{}],514:[function(require,module,exports){
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

},{"./_root":552}],515:[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arraySome = require('./_arraySome'),
    cacheHas = require('./_cacheHas');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

},{"./_SetCache":493,"./_arraySome":501,"./_cacheHas":513}],516:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    eq = require('./eq'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == other + '';

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

},{"./_Symbol":495,"./_Uint8Array":496,"./_equalArrays":515,"./_mapToArray":546,"./_setToArray":555,"./eq":562}],517:[function(require,module,exports){
var getAllKeys = require('./_getAllKeys');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

},{"./_getAllKeys":519}],518:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],519:[function(require,module,exports){
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbols = require('./_getSymbols'),
    keys = require('./keys');

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

},{"./_baseGetAllKeys":503,"./_getSymbols":524,"./keys":574}],520:[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

module.exports = getMapData;

},{"./_isKeyable":533}],521:[function(require,module,exports){
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./_baseIsNative":508,"./_getValue":526}],522:[function(require,module,exports){
var overArg = require('./_overArg');

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;

},{"./_overArg":551}],523:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":495}],524:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    stubArray = require('./stubArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function (symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;

},{"./_arrayFilter":498,"./stubArray":575}],525:[function(require,module,exports){
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function (value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
            switch (ctorString) {
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
        }
        return result;
    };
}

module.exports = getTag;

},{"./_DataView":486,"./_Map":489,"./_Promise":491,"./_Set":492,"./_WeakMap":497,"./_baseGetTag":504,"./_toSource":561}],526:[function(require,module,exports){
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

},{}],527:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

},{"./_nativeCreate":547}],528:[function(require,module,exports){
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

},{}],529:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":547}],530:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

},{"./_nativeCreate":547}],531:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

},{"./_nativeCreate":547}],532:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;

},{}],533:[function(require,module,exports){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

module.exports = isKeyable;

},{}],534:[function(require,module,exports){
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

module.exports = isMasked;

},{"./_coreJsData":514}],535:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],536:[function(require,module,exports){
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

},{}],537:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

},{"./_assocIndexOf":502}],538:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

},{"./_assocIndexOf":502}],539:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

},{"./_assocIndexOf":502}],540:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

},{"./_assocIndexOf":502}],541:[function(require,module,exports){
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}

module.exports = mapCacheClear;

},{"./_Hash":487,"./_ListCache":488,"./_Map":489}],542:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

},{"./_getMapData":520}],543:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

},{"./_getMapData":520}],544:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

},{"./_getMapData":520}],545:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

},{"./_getMapData":520}],546:[function(require,module,exports){
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function (value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

},{}],547:[function(require,module,exports){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":521}],548:[function(require,module,exports){
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

},{"./_overArg":551}],549:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = function () {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();

module.exports = nodeUtil;

},{"./_freeGlobal":518}],550:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],551:[function(require,module,exports){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],552:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":518}],553:[function(require,module,exports){
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

},{}],554:[function(require,module,exports){
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

},{}],555:[function(require,module,exports){
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

},{}],556:[function(require,module,exports){
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}

module.exports = stackClear;

},{"./_ListCache":488}],557:[function(require,module,exports){
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

},{}],558:[function(require,module,exports){
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

},{}],559:[function(require,module,exports){
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

},{}],560:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

},{"./_ListCache":488,"./_Map":489,"./_MapCache":490}],561:[function(require,module,exports){
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return func + '';
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],562:[function(require,module,exports){
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

module.exports = eq;

},{}],563:[function(require,module,exports){
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function () {
    return arguments;
}()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":505,"./isObjectLike":571}],564:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],565:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":568,"./isLength":569}],566:[function(require,module,exports){
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":552,"./stubFalse":576}],567:[function(require,module,exports){
var baseIsEqual = require('./_baseIsEqual');

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;

},{"./_baseIsEqual":506}],568:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
    if (!isObject(value)) {
        return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":504,"./isObject":570}],569:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],570:[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],571:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],572:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    getPrototype = require('./_getPrototype'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

},{"./_baseGetTag":504,"./_getPrototype":522,"./isObjectLike":571}],573:[function(require,module,exports){
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":509,"./_baseUnary":512,"./_nodeUtil":549}],574:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{"./_arrayLikeKeys":499,"./_baseKeys":510,"./isArrayLike":565}],575:[function(require,module,exports){
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

},{}],576:[function(require,module,exports){
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}],577:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],578:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],579:[function(require,module,exports){
module.exports = require('./lib/effects');

},{"./lib/effects":580}],580:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _io = require('./internal/io');

Object.defineProperty(exports, 'take', {
  enumerable: true,
  get: function get() {
    return _io.take;
  }
});
Object.defineProperty(exports, 'takem', {
  enumerable: true,
  get: function get() {
    return _io.takem;
  }
});
Object.defineProperty(exports, 'put', {
  enumerable: true,
  get: function get() {
    return _io.put;
  }
});
Object.defineProperty(exports, 'race', {
  enumerable: true,
  get: function get() {
    return _io.race;
  }
});
Object.defineProperty(exports, 'call', {
  enumerable: true,
  get: function get() {
    return _io.call;
  }
});
Object.defineProperty(exports, 'apply', {
  enumerable: true,
  get: function get() {
    return _io.apply;
  }
});
Object.defineProperty(exports, 'cps', {
  enumerable: true,
  get: function get() {
    return _io.cps;
  }
});
Object.defineProperty(exports, 'fork', {
  enumerable: true,
  get: function get() {
    return _io.fork;
  }
});
Object.defineProperty(exports, 'spawn', {
  enumerable: true,
  get: function get() {
    return _io.spawn;
  }
});
Object.defineProperty(exports, 'join', {
  enumerable: true,
  get: function get() {
    return _io.join;
  }
});
Object.defineProperty(exports, 'cancel', {
  enumerable: true,
  get: function get() {
    return _io.cancel;
  }
});
Object.defineProperty(exports, 'select', {
  enumerable: true,
  get: function get() {
    return _io.select;
  }
});
Object.defineProperty(exports, 'actionChannel', {
  enumerable: true,
  get: function get() {
    return _io.actionChannel;
  }
});
Object.defineProperty(exports, 'cancelled', {
  enumerable: true,
  get: function get() {
    return _io.cancelled;
  }
});
Object.defineProperty(exports, 'flush', {
  enumerable: true,
  get: function get() {
    return _io.flush;
  }
});
Object.defineProperty(exports, 'takeEvery', {
  enumerable: true,
  get: function get() {
    return _io.takeEvery;
  }
});
Object.defineProperty(exports, 'takeLatest', {
  enumerable: true,
  get: function get() {
    return _io.takeLatest;
  }
});
Object.defineProperty(exports, 'throttle', {
  enumerable: true,
  get: function get() {
    return _io.throttle;
  }
});

},{"./internal/io":583}],581:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buffers = exports.BUFFER_OVERFLOW = undefined;

var _utils = require('./utils');

var BUFFER_OVERFLOW = exports.BUFFER_OVERFLOW = 'Channel\'s Buffer overflow!';

var ON_OVERFLOW_THROW = 1;
var ON_OVERFLOW_DROP = 2;
var ON_OVERFLOW_SLIDE = 3;
var ON_OVERFLOW_EXPAND = 4;

var zeroBuffer = { isEmpty: _utils.kTrue, put: _utils.noop, take: _utils.noop };

function ringBuffer() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
  var overflowAction = arguments[1];

  var arr = new Array(limit);
  var length = 0;
  var pushIndex = 0;
  var popIndex = 0;

  var push = function push(it) {
    arr[pushIndex] = it;
    pushIndex = (pushIndex + 1) % limit;
    length++;
  };

  var take = function take() {
    if (length != 0) {
      var it = arr[popIndex];
      arr[popIndex] = null;
      length--;
      popIndex = (popIndex + 1) % limit;
      return it;
    }
  };

  var flush = function flush() {
    var items = [];
    while (length) {
      items.push(take());
    }
    return items;
  };

  return {
    isEmpty: function isEmpty() {
      return length == 0;
    },
    put: function put(it) {
      if (length < limit) {
        push(it);
      } else {
        var doubledLimit = void 0;
        switch (overflowAction) {
          case ON_OVERFLOW_THROW:
            throw new Error(BUFFER_OVERFLOW);
          case ON_OVERFLOW_SLIDE:
            arr[pushIndex] = it;
            pushIndex = (pushIndex + 1) % limit;
            popIndex = pushIndex;
            break;
          case ON_OVERFLOW_EXPAND:
            doubledLimit = 2 * limit;

            arr = flush();

            length = arr.length;
            pushIndex = arr.length;
            popIndex = 0;

            arr.length = doubledLimit;
            limit = doubledLimit;

            push(it);
            break;
          default:
          // DROP
        }
      }
    },
    take: take, flush: flush
  };
}

var buffers = exports.buffers = {
  none: function none() {
    return zeroBuffer;
  },
  fixed: function fixed(limit) {
    return ringBuffer(limit, ON_OVERFLOW_THROW);
  },
  dropping: function dropping(limit) {
    return ringBuffer(limit, ON_OVERFLOW_DROP);
  },
  sliding: function sliding(limit) {
    return ringBuffer(limit, ON_OVERFLOW_SLIDE);
  },
  expanding: function expanding(initialSize) {
    return ringBuffer(initialSize, ON_OVERFLOW_EXPAND);
  }
};

},{"./utils":586}],582:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UNDEFINED_INPUT_ERROR = exports.INVALID_BUFFER = exports.isEnd = exports.END = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.emitter = emitter;
exports.channel = channel;
exports.eventChannel = eventChannel;
exports.stdChannel = stdChannel;

var _utils = require('./utils');

var _buffers = require('./buffers');

var _scheduler = require('./scheduler');

var CHANNEL_END_TYPE = '@@redux-saga/CHANNEL_END';
var END = exports.END = { type: CHANNEL_END_TYPE };
var isEnd = exports.isEnd = function isEnd(a) {
  return a && a.type === CHANNEL_END_TYPE;
};

function emitter() {
  var subscribers = [];

  function subscribe(sub) {
    subscribers.push(sub);
    return function () {
      return (0, _utils.remove)(subscribers, sub);
    };
  }

  function emit(item) {
    var arr = subscribers.slice();
    for (var i = 0, len = arr.length; i < len; i++) {
      arr[i](item);
    }
  }

  return {
    subscribe: subscribe,
    emit: emit
  };
}

var INVALID_BUFFER = exports.INVALID_BUFFER = 'invalid buffer passed to channel factory function';
var UNDEFINED_INPUT_ERROR = exports.UNDEFINED_INPUT_ERROR = 'Saga was provided with an undefined action';

if (process.env.NODE_ENV !== 'production') {
  exports.UNDEFINED_INPUT_ERROR = UNDEFINED_INPUT_ERROR += '\nHints:\n    - check that your Action Creator returns a non-undefined value\n    - if the Saga was started using runSaga, check that your subscribe source provides the action to its listeners\n  ';
}

function channel() {
  var buffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _buffers.buffers.fixed();

  var closed = false;
  var takers = [];

  (0, _utils.check)(buffer, _utils.is.buffer, INVALID_BUFFER);

  function checkForbiddenStates() {
    if (closed && takers.length) {
      throw (0, _utils.internalErr)('Cannot have a closed channel with pending takers');
    }
    if (takers.length && !buffer.isEmpty()) {
      throw (0, _utils.internalErr)('Cannot have pending takers with non empty buffer');
    }
  }

  function put(input) {
    checkForbiddenStates();
    (0, _utils.check)(input, _utils.is.notUndef, UNDEFINED_INPUT_ERROR);
    if (closed) {
      return;
    }
    if (!takers.length) {
      return buffer.put(input);
    }
    for (var i = 0; i < takers.length; i++) {
      var cb = takers[i];
      if (!cb[_utils.MATCH] || cb[_utils.MATCH](input)) {
        takers.splice(i, 1);
        return cb(input);
      }
    }
  }

  function take(cb) {
    checkForbiddenStates();
    (0, _utils.check)(cb, _utils.is.func, 'channel.take\'s callback must be a function');

    if (closed && buffer.isEmpty()) {
      cb(END);
    } else if (!buffer.isEmpty()) {
      cb(buffer.take());
    } else {
      takers.push(cb);
      cb.cancel = function () {
        return (0, _utils.remove)(takers, cb);
      };
    }
  }

  function flush(cb) {
    checkForbiddenStates(); // TODO: check if some new state should be forbidden now
    (0, _utils.check)(cb, _utils.is.func, 'channel.flush\' callback must be a function');
    if (closed && buffer.isEmpty()) {
      cb(END);
      return;
    }
    cb(buffer.flush());
  }

  function close() {
    checkForbiddenStates();
    if (!closed) {
      closed = true;
      if (takers.length) {
        var arr = takers;
        takers = [];
        for (var i = 0, len = arr.length; i < len; i++) {
          arr[i](END);
        }
      }
    }
  }

  return { take: take, put: put, flush: flush, close: close,
    get __takers__() {
      return takers;
    },
    get __closed__() {
      return closed;
    }
  };
}

function eventChannel(subscribe) {
  var buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _buffers.buffers.none();
  var matcher = arguments[2];

  /**
    should be if(typeof matcher !== undefined) instead?
    see PR #273 for a background discussion
  **/
  if (arguments.length > 2) {
    (0, _utils.check)(matcher, _utils.is.func, 'Invalid match function passed to eventChannel');
  }

  var chan = channel(buffer);
  var unsubscribe = subscribe(function (input) {
    if (isEnd(input)) {
      chan.close();
      return;
    }
    if (matcher && !matcher(input)) {
      return;
    }
    chan.put(input);
  });

  if (!_utils.is.func(unsubscribe)) {
    throw new Error('in eventChannel: subscribe should return a function to unsubscribe');
  }

  return {
    take: chan.take,
    flush: chan.flush,
    close: function close() {
      if (!chan.__closed__) {
        chan.close();
        unsubscribe();
      }
    }
  };
}

function stdChannel(subscribe) {
  var chan = eventChannel(function (cb) {
    return subscribe(function (input) {
      if (input[_utils.SAGA_ACTION]) {
        cb(input);
        return;
      }
      (0, _scheduler.asap)(function () {
        return cb(input);
      });
    });
  });

  return _extends({}, chan, {
    take: function take(cb, matcher) {
      if (arguments.length > 1) {
        (0, _utils.check)(matcher, _utils.is.func, 'channel.take\'s matcher argument must be a function');
        cb[_utils.MATCH] = matcher;
      }
      chan.take(cb);
    }
  });
}

}).call(this,require('_process'))

},{"./buffers":581,"./scheduler":585,"./utils":586,"_process":578}],583:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asEffect = exports.takem = undefined;

var _slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;_e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }return _arr;
  }return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

exports.take = take;
exports.put = put;
exports.race = race;
exports.call = call;
exports.apply = apply;
exports.cps = cps;
exports.fork = fork;
exports.spawn = spawn;
exports.join = join;
exports.cancel = cancel;
exports.select = select;
exports.actionChannel = actionChannel;
exports.cancelled = cancelled;
exports.flush = flush;
exports.takeEvery = takeEvery;
exports.takeLatest = takeLatest;
exports.throttle = throttle;

var _utils = require('./utils');

var _sagaHelpers = require('./sagaHelpers');

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var IO = (0, _utils.sym)('IO');
var TAKE = 'TAKE';
var PUT = 'PUT';
var RACE = 'RACE';
var CALL = 'CALL';
var CPS = 'CPS';
var FORK = 'FORK';
var JOIN = 'JOIN';
var CANCEL = 'CANCEL';
var SELECT = 'SELECT';
var ACTION_CHANNEL = 'ACTION_CHANNEL';
var CANCELLED = 'CANCELLED';
var FLUSH = 'FLUSH';

var deprecationWarning = function deprecationWarning(deprecated, preferred) {
  return deprecated + ' has been deprecated in favor of ' + preferred + ', please update your code';
};

var effect = function effect(type, payload) {
  var _ref;

  return _ref = {}, _defineProperty(_ref, IO, true), _defineProperty(_ref, type, payload), _ref;
};

function take() {
  var patternOrChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';

  if (arguments.length) {
    (0, _utils.check)(arguments[0], _utils.is.notUndef, 'take(patternOrChannel): patternOrChannel is undefined');
  }
  if (_utils.is.pattern(patternOrChannel)) {
    return effect(TAKE, { pattern: patternOrChannel });
  }
  if (_utils.is.channel(patternOrChannel)) {
    return effect(TAKE, { channel: patternOrChannel });
  }
  throw new Error('take(patternOrChannel): argument ' + String(patternOrChannel) + ' is not valid channel or a valid pattern');
}

take.maybe = function () {
  var eff = take.apply(undefined, arguments);
  eff[TAKE].maybe = true;
  return eff;
};

var takem = exports.takem = (0, _utils.deprecate)(take.maybe, deprecationWarning('takem', 'take.maybe'));

function put(channel, action) {
  if (arguments.length > 1) {
    (0, _utils.check)(channel, _utils.is.notUndef, 'put(channel, action): argument channel is undefined');
    (0, _utils.check)(channel, _utils.is.channel, 'put(channel, action): argument ' + channel + ' is not a valid channel');
    (0, _utils.check)(action, _utils.is.notUndef, 'put(channel, action): argument action is undefined');
  } else {
    (0, _utils.check)(channel, _utils.is.notUndef, 'put(action): argument action is undefined');
    action = channel;
    channel = null;
  }
  return effect(PUT, { channel: channel, action: action });
}

put.resolve = function () {
  var eff = put.apply(undefined, arguments);
  eff[PUT].resolve = true;
  return eff;
};

put.sync = (0, _utils.deprecate)(put.resolve, deprecationWarning('put.sync', 'put.resolve'));

function race(effects) {
  return effect(RACE, effects);
}

function getFnCallDesc(meth, fn, args) {
  (0, _utils.check)(fn, _utils.is.notUndef, meth + ': argument fn is undefined');

  var context = null;
  if (_utils.is.array(fn)) {
    var _fn = fn;

    var _fn2 = _slicedToArray(_fn, 2);

    context = _fn2[0];
    fn = _fn2[1];
  } else if (fn.fn) {
    var _fn3 = fn;
    context = _fn3.context;
    fn = _fn3.fn;
  }
  (0, _utils.check)(fn, _utils.is.func, meth + ': argument ' + fn + ' is not a function');

  return { context: context, fn: fn, args: args };
}

function call(fn) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return effect(CALL, getFnCallDesc('call', fn, args));
}

function apply(context, fn) {
  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  return effect(CALL, getFnCallDesc('apply', { context: context, fn: fn }, args));
}

function cps(fn) {
  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  return effect(CPS, getFnCallDesc('cps', fn, args));
}

function fork(fn) {
  for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return effect(FORK, getFnCallDesc('fork', fn, args));
}

function spawn(fn) {
  for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  var eff = fork.apply(undefined, [fn].concat(args));
  eff[FORK].detached = true;
  return eff;
}

var isForkedTask = function isForkedTask(task) {
  return task[_utils.TASK];
};

function join(task) {
  if (_utils.is.array(task)) {
    return task.map(join);
  }
  (0, _utils.check)(task, _utils.is.notUndef, 'join(task): argument task is undefined');
  if (!isForkedTask(task)) {
    throw new Error('join(task): argument ' + task + ' is not a valid Task object \n(HINT: if you are getting this errors in tests, consider using createMockTask from redux-saga/utils)');
  }

  return effect(JOIN, task);
}

function cancel(task) {
  (0, _utils.check)(task, _utils.is.notUndef, 'cancel(task): argument task is undefined');
  if (!isForkedTask(task)) {
    throw new Error('cancel(task): argument ' + task + ' is not a valid Task object \n(HINT: if you are getting this errors in tests, consider using createMockTask from redux-saga/utils)');
  }

  return effect(CANCEL, task);
}

function select(selector) {
  for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }

  if (arguments.length === 0) {
    selector = _utils.ident;
  } else {
    (0, _utils.check)(selector, _utils.is.notUndef, 'select(selector,[...]): argument selector is undefined');
    (0, _utils.check)(selector, _utils.is.func, 'select(selector,[...]): argument ' + selector + ' is not a function');
  }
  return effect(SELECT, { selector: selector, args: args });
}

/**
  channel(pattern, [buffer])    => creates an event channel for store actions
**/
function actionChannel(pattern, buffer) {
  (0, _utils.check)(pattern, _utils.is.notUndef, 'actionChannel(pattern,...): argument pattern is undefined');
  if (arguments.length > 1) {
    (0, _utils.check)(buffer, _utils.is.notUndef, 'actionChannel(pattern, buffer): argument buffer is undefined');
    (0, _utils.check)(buffer, _utils.is.buffer, 'actionChannel(pattern, buffer): argument ' + buffer + ' is not a valid buffer');
  }
  return effect(ACTION_CHANNEL, { pattern: pattern, buffer: buffer });
}

function cancelled() {
  return effect(CANCELLED, {});
}

function flush(channel) {
  (0, _utils.check)(channel, _utils.is.channel, 'flush(channel): argument ' + channel + ' is not valid channel');
  return effect(FLUSH, channel);
}

function takeEvery(patternOrChannel, worker) {
  for (var _len6 = arguments.length, args = Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
    args[_key6 - 2] = arguments[_key6];
  }

  return fork.apply(undefined, [_sagaHelpers.takeEveryHelper, patternOrChannel, worker].concat(args));
}

function takeLatest(patternOrChannel, worker) {
  for (var _len7 = arguments.length, args = Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {
    args[_key7 - 2] = arguments[_key7];
  }

  return fork.apply(undefined, [_sagaHelpers.takeLatestHelper, patternOrChannel, worker].concat(args));
}

function throttle(ms, pattern, worker) {
  for (var _len8 = arguments.length, args = Array(_len8 > 3 ? _len8 - 3 : 0), _key8 = 3; _key8 < _len8; _key8++) {
    args[_key8 - 3] = arguments[_key8];
  }

  return fork.apply(undefined, [_sagaHelpers.throttleHelper, ms, pattern, worker].concat(args));
}

var createAsEffectType = function createAsEffectType(type) {
  return function (effect) {
    return effect && effect[IO] && effect[type];
  };
};

var asEffect = exports.asEffect = {
  take: createAsEffectType(TAKE),
  put: createAsEffectType(PUT),
  race: createAsEffectType(RACE),
  call: createAsEffectType(CALL),
  cps: createAsEffectType(CPS),
  fork: createAsEffectType(FORK),
  join: createAsEffectType(JOIN),
  cancel: createAsEffectType(CANCEL),
  select: createAsEffectType(SELECT),
  actionChannel: createAsEffectType(ACTION_CHANNEL),
  cancelled: createAsEffectType(CANCELLED),
  flush: createAsEffectType(FLUSH)
};

},{"./sagaHelpers":584,"./utils":586}],584:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throttle = exports.takeLatest = exports.takeEvery = undefined;

var _slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;_e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }return _arr;
  }return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

exports.takeEveryHelper = takeEveryHelper;
exports.takeLatestHelper = takeLatestHelper;
exports.throttleHelper = throttleHelper;

var _channel = require('./channel');

var _utils = require('./utils');

var _io = require('./io');

var _buffers = require('./buffers');

var done = { done: true, value: undefined };
var qEnd = {};

function fsmIterator(fsm, q0) {
  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'iterator';

  var updateState = void 0,
      qNext = q0;

  function next(arg, error) {
    if (qNext === qEnd) {
      return done;
    }

    if (error) {
      qNext = qEnd;
      throw error;
    } else {
      updateState && updateState(arg);

      var _fsm$qNext = fsm[qNext](),
          _fsm$qNext2 = _slicedToArray(_fsm$qNext, 3),
          q = _fsm$qNext2[0],
          output = _fsm$qNext2[1],
          _updateState = _fsm$qNext2[2];

      qNext = q;
      updateState = _updateState;
      return qNext === qEnd ? done : output;
    }
  }

  return (0, _utils.makeIterator)(next, function (error) {
    return next(null, error);
  }, name, true);
}

function safeName(patternOrChannel) {
  if (_utils.is.channel(patternOrChannel)) {
    return 'channel';
  } else if (Array.isArray(patternOrChannel)) {
    return String(patternOrChannel.map(function (entry) {
      return String(entry);
    }));
  } else {
    return String(patternOrChannel);
  }
}

function takeEveryHelper(patternOrChannel, worker) {
  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var yTake = { done: false, value: (0, _io.take)(patternOrChannel) };
  var yFork = function yFork(ac) {
    return { done: false, value: _io.fork.apply(undefined, [worker].concat(args, [ac])) };
  };

  var action = void 0,
      setAction = function setAction(ac) {
    return action = ac;
  };

  return fsmIterator({
    q1: function q1() {
      return ['q2', yTake, setAction];
    },
    q2: function q2() {
      return action === _channel.END ? [qEnd] : ['q1', yFork(action)];
    }
  }, 'q1', 'takeEvery(' + safeName(patternOrChannel) + ', ' + worker.name + ')');
}

function takeLatestHelper(patternOrChannel, worker) {
  for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    args[_key2 - 2] = arguments[_key2];
  }

  var yTake = { done: false, value: (0, _io.take)(patternOrChannel) };
  var yFork = function yFork(ac) {
    return { done: false, value: _io.fork.apply(undefined, [worker].concat(args, [ac])) };
  };
  var yCancel = function yCancel(task) {
    return { done: false, value: (0, _io.cancel)(task) };
  };

  var task = void 0,
      action = void 0;
  var setTask = function setTask(t) {
    return task = t;
  };
  var setAction = function setAction(ac) {
    return action = ac;
  };

  return fsmIterator({
    q1: function q1() {
      return ['q2', yTake, setAction];
    },
    q2: function q2() {
      return action === _channel.END ? [qEnd] : task ? ['q3', yCancel(task)] : ['q1', yFork(action), setTask];
    },
    q3: function q3() {
      return ['q1', yFork(action), setTask];
    }
  }, 'q1', 'takeLatest(' + safeName(patternOrChannel) + ', ' + worker.name + ')');
}

function throttleHelper(delayLength, pattern, worker) {
  for (var _len3 = arguments.length, args = Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
    args[_key3 - 3] = arguments[_key3];
  }

  var action = void 0,
      channel = void 0;

  var yActionChannel = { done: false, value: (0, _io.actionChannel)(pattern, _buffers.buffers.sliding(1)) };
  var yTake = function yTake() {
    return { done: false, value: (0, _io.take)(channel, pattern) };
  };
  var yFork = function yFork(ac) {
    return { done: false, value: _io.fork.apply(undefined, [worker].concat(args, [ac])) };
  };
  var yDelay = { done: false, value: (0, _io.call)(_utils.delay, delayLength) };

  var setAction = function setAction(ac) {
    return action = ac;
  };
  var setChannel = function setChannel(ch) {
    return channel = ch;
  };

  return fsmIterator({
    q1: function q1() {
      return ['q2', yActionChannel, setChannel];
    },
    q2: function q2() {
      return ['q3', yTake(), setAction];
    },
    q3: function q3() {
      return action === _channel.END ? [qEnd] : ['q4', yFork(action)];
    },
    q4: function q4() {
      return ['q2', yDelay];
    }
  }, 'q1', 'throttle(' + safeName(pattern) + ', ' + worker.name + ')');
}

var deprecationWarning = function deprecationWarning(helperName) {
  return 'import ' + helperName + ' from \'redux-saga\' has been deprecated in favor of import ' + helperName + ' from \'redux-saga/effects\'.\nThe latter will not work with yield*, as helper effects are wrapped automatically for you in fork effect.\nTherefore yield ' + helperName + ' will return task descriptor to your saga and execute next lines of code.';
};
var takeEvery = exports.takeEvery = (0, _utils.deprecate)(takeEveryHelper, deprecationWarning('takeEvery'));
var takeLatest = exports.takeLatest = (0, _utils.deprecate)(takeLatestHelper, deprecationWarning('takeLatest'));
var throttle = exports.throttle = (0, _utils.deprecate)(throttleHelper, deprecationWarning('throttle'));

},{"./buffers":581,"./channel":582,"./io":583,"./utils":586}],585:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asap = asap;
exports.suspend = suspend;
exports.flush = flush;

var queue = [];
/**
  Variable to hold a counting semaphore
  - Incrementing adds a lock and puts the scheduler in a `suspended` state (if it's not
    already suspended)
  - Decrementing releases a lock. Zero locks puts the scheduler in a `released` state. This
    triggers flushing the queued tasks.
**/
var semaphore = 0;

/**
  Executes a task 'atomically'. Tasks scheduled during this execution will be queued
  and flushed after this task has finished (assuming the scheduler endup in a released
  state).
**/
function exec(task) {
  try {
    suspend();
    task();
  } finally {
    flush();
  }
}

/**
  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)
**/
function asap(task) {
  if (!semaphore) {
    exec(task);
  } else {
    queue.push(task);
  }
}

/**
  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the
  scheduler is released.
**/
function suspend() {
  semaphore++;
}

/**
  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.
**/
function flush() {
  semaphore--;
  if (!semaphore && queue.length) {
    exec(queue.shift());
  }
}

},{}],586:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

exports.check = check;
exports.hasOwn = hasOwn;
exports.remove = remove;
exports.deferred = deferred;
exports.arrayOfDeffered = arrayOfDeffered;
exports.delay = delay;
exports.createMockTask = createMockTask;
exports.autoInc = autoInc;
exports.makeIterator = makeIterator;
exports.log = log;
exports.deprecate = deprecate;
exports.wrapSagaDispatch = wrapSagaDispatch;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var sym = exports.sym = function sym(id) {
  return '@@redux-saga/' + id;
};
var TASK = exports.TASK = sym('TASK');
var HELPER = exports.HELPER = sym('HELPER');
var MATCH = exports.MATCH = sym('MATCH');
var CANCEL = exports.CANCEL = sym('cancelPromise');
var SAGA_ACTION = exports.SAGA_ACTION = sym('SAGA_ACTION');
var konst = exports.konst = function konst(v) {
  return function () {
    return v;
  };
};
var kTrue = exports.kTrue = konst(true);
var kFalse = exports.kFalse = konst(false);
var noop = exports.noop = function noop() {};
var ident = exports.ident = function ident(v) {
  return v;
};

var isDev = exports.isDev = process.env.NODE_ENV === 'development';

function check(value, predicate, error) {
  if (!predicate(value)) {
    log('error', 'uncaught at check', error);
    throw new Error(error);
  }
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn(object, property) {
  return is.notUndef(object) && hasOwnProperty.call(object, property);
}

var is = exports.is = {
  undef: function undef(v) {
    return v === null || v === undefined;
  },
  notUndef: function notUndef(v) {
    return v !== null && v !== undefined;
  },
  func: function func(f) {
    return typeof f === 'function';
  },
  number: function number(n) {
    return typeof n === 'number';
  },
  array: Array.isArray,
  promise: function promise(p) {
    return p && is.func(p.then);
  },
  iterator: function iterator(it) {
    return it && is.func(it.next) && is.func(it.throw);
  },
  task: function task(t) {
    return t && t[TASK];
  },
  observable: function observable(ob) {
    return ob && is.func(ob.subscribe);
  },
  buffer: function buffer(buf) {
    return buf && is.func(buf.isEmpty) && is.func(buf.take) && is.func(buf.put);
  },
  pattern: function pattern(pat) {
    return pat && (typeof pat === 'string' || (typeof pat === 'undefined' ? 'undefined' : _typeof(pat)) === 'symbol' || is.func(pat) || is.array(pat));
  },
  channel: function channel(ch) {
    return ch && is.func(ch.take) && is.func(ch.close);
  },
  helper: function helper(it) {
    return it && it[HELPER];
  },
  stringableFunc: function stringableFunc(f) {
    return is.func(f) && hasOwn(f, 'toString');
  }
};

function remove(array, item) {
  var index = array.indexOf(item);
  if (index >= 0) {
    array.splice(index, 1);
  }
}

function deferred() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var def = _extends({}, props);
  var promise = new Promise(function (resolve, reject) {
    def.resolve = resolve;
    def.reject = reject;
  });
  def.promise = promise;
  return def;
}

function arrayOfDeffered(length) {
  var arr = [];
  for (var i = 0; i < length; i++) {
    arr.push(deferred());
  }
  return arr;
}

function delay(ms) {
  var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  var timeoutId = void 0;
  var promise = new Promise(function (resolve) {
    timeoutId = setTimeout(function () {
      return resolve(val);
    }, ms);
  });

  promise[CANCEL] = function () {
    return clearTimeout(timeoutId);
  };

  return promise;
}

function createMockTask() {
  var _ref;

  var running = true;
  var _result = void 0,
      _error = void 0;

  return _ref = {}, _defineProperty(_ref, TASK, true), _defineProperty(_ref, 'isRunning', function isRunning() {
    return running;
  }), _defineProperty(_ref, 'result', function result() {
    return _result;
  }), _defineProperty(_ref, 'error', function error() {
    return _error;
  }), _defineProperty(_ref, 'setRunning', function setRunning(b) {
    return running = b;
  }), _defineProperty(_ref, 'setResult', function setResult(r) {
    return _result = r;
  }), _defineProperty(_ref, 'setError', function setError(e) {
    return _error = e;
  }), _ref;
}

function autoInc() {
  var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  return function () {
    return ++seed;
  };
}

var uid = exports.uid = autoInc();

var kThrow = function kThrow(err) {
  throw err;
};
var kReturn = function kReturn(value) {
  return { value: value, done: true };
};
function makeIterator(next) {
  var thro = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : kThrow;
  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var isHelper = arguments[3];

  var iterator = { name: name, next: next, throw: thro, return: kReturn };

  if (isHelper) {
    iterator[HELPER] = true;
  }
  if (typeof Symbol !== 'undefined') {
    iterator[Symbol.iterator] = function () {
      return iterator;
    };
  }
  return iterator;
}

/**
  Print error in a useful way whether in a browser environment
  (with expandable error stack traces), or in a node.js environment
  (text-only log output)
 **/
function log(level, message) {
  var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  /*eslint-disable no-console*/
  if (typeof window === 'undefined') {
    console.log('redux-saga ' + level + ': ' + message + '\n' + (error && error.stack || error));
  } else {
    console[level](message, error);
  }
}

function deprecate(fn, deprecationWarning) {
  return function () {
    if (isDev) log('warn', deprecationWarning);
    return fn.apply(undefined, arguments);
  };
}

var internalErr = exports.internalErr = function internalErr(err) {
  return new Error('\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project\'s github repo.\n  Error: ' + err + '\n');
};

function wrapSagaDispatch(dispatch) {
  return function sagaDispatch(action) {
    var wrappedAction = Object.defineProperty(action, SAGA_ACTION, { value: true });
    return dispatch(wrappedAction);
  };
}

}).call(this,require('_process'))

},{"_process":578}]},{},[400])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi4uLy4uLy4uL2JhYmVsLXBvbHlmaWxsL2xpYi9pbmRleC5qcyIsIi4uLy4uLy4uL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWNvcHktd2l0aGluLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fYmluZC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLWlzby1zdHJpbmcuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2NhbGUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fbWV0YWRhdGEuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZm9yY2VkLXBhbS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fcmVwbGFjZXIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLWZyb20uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5tYXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zZXQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ibGluay5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5mcm9tLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmltdWxoLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5vZi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5hdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQub2YuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL3NoaW0uanMiLCJBcHAvQXBwLmpzIiwiQXBwL2NvbXBvbmVudHMvRm9vdGVyL2luZGV4LmpzIiwiQXBwL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9Nb2JpbGUvTGlzdEl0ZW0uanMiLCJBcHAvY29tcG9uZW50cy9OYXZpZ2F0aW9uL01vYmlsZS9TZWN0aW9uSXRlbS5qcyIsIkFwcC9jb21wb25lbnRzL05hdmlnYXRpb24vTW9iaWxlL2luZGV4LmpzIiwiQXBwL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9QcmltYXJ5L05hdkl0ZW0uanMiLCJBcHAvY29tcG9uZW50cy9OYXZpZ2F0aW9uL1ByaW1hcnkvaW5kZXguanMiLCJBcHAvY29tcG9uZW50cy9OYXZpZ2F0aW9uL1NlY29uZGFyeS9OYXZJdGVtLmpzIiwiQXBwL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9TZWNvbmRhcnkvaW5kZXguanMiLCJBcHAvZWxlbWVudGFsL0FsZXJ0L2NvbG9ycy5qcyIsIkFwcC9lbGVtZW50YWwvQWxlcnQvaW5kZXguanMiLCJBcHAvZWxlbWVudGFsL0FsZXJ0L3N0eWxlcy5qcyIsIkFwcC9lbGVtZW50YWwvQmxhbmtTdGF0ZS9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvQnV0dG9uL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9CdXR0b24vc3R5bGVzLmpzIiwiQXBwL2VsZW1lbnRhbC9DZW50ZXIvaW5kZXguanMiLCJBcHAvZWxlbWVudGFsL0NlbnRlci9zdHlsZXMuanMiLCJBcHAvZWxlbWVudGFsL0NoaXAvY29sb3JzLmpzIiwiQXBwL2VsZW1lbnRhbC9DaGlwL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9DaGlwL3N0eWxlcy5qcyIsIkFwcC9lbGVtZW50YWwvQ29udGFpbmVyL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9Db250YWluZXIvc2l6ZXMuanMiLCJBcHAvZWxlbWVudGFsL0NvbnRhaW5lci9zdHlsZXMuanMiLCJBcHAvZWxlbWVudGFsL0Ryb3Bkb3duQnV0dG9uL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9Gb3JtRmllbGQvaW5kZXguanMiLCJBcHAvZWxlbWVudGFsL0Zvcm1GaWVsZC9zdHlsZXMuanMiLCJBcHAvZWxlbWVudGFsL0Zvcm1JbnB1dC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvRm9ybUlucHV0L25vZWRpdC5qcyIsIkFwcC9lbGVtZW50YWwvRm9ybUlucHV0L3N0eWxlcy5qcyIsIkFwcC9lbGVtZW50YWwvRm9ybUxhYmVsL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9Gb3JtTGFiZWwvc3R5bGVzLmpzIiwiQXBwL2VsZW1lbnRhbC9Gb3JtTm90ZS9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvRm9ybU5vdGUvc3R5bGVzLmpzIiwiQXBwL2VsZW1lbnRhbC9Gb3JtU2VsZWN0L2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9Gb3JtU2VsZWN0L3N0eWxlcy5qcyIsIkFwcC9lbGVtZW50YWwvRm9ybS9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvRm9ybS9zdHlsZXMuanMiLCJBcHAvZWxlbWVudGFsL0dseXBoQnV0dG9uL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9HbHlwaEZpZWxkL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9HbHlwaC9jb2xvcnMuanMiLCJBcHAvZWxlbWVudGFsL0dseXBoL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9HbHlwaC9vY3RpY29ucy5qcyIsIkFwcC9lbGVtZW50YWwvR2x5cGgvc2l6ZXMuanMiLCJBcHAvZWxlbWVudGFsL0dseXBoL3N0eWxlcy5qcyIsIkFwcC9lbGVtZW50YWwvR3JpZENvbC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvR3JpZFJvdy9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvR3JpZC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvSW5saW5lR3JvdXBTZWN0aW9uL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9JbmxpbmVHcm91cFNlY3Rpb24vc3R5bGVzLmpzIiwiQXBwL2VsZW1lbnRhbC9JbmxpbmVHcm91cC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvTGFiZWxsZWRDb250cm9sL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9MYWJlbGxlZENvbnRyb2wvc3R5bGVzLmpzIiwiQXBwL2VsZW1lbnRhbC9Mb2FkaW5nQnV0dG9uL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9Nb2RhbC9ib2R5LmpzIiwiQXBwL2VsZW1lbnRhbC9Nb2RhbC9kaWFsb2cuanMiLCJBcHAvZWxlbWVudGFsL01vZGFsL2Zvb3Rlci5qcyIsIkFwcC9lbGVtZW50YWwvTW9kYWwvaGVhZGVyLmpzIiwiQXBwL2VsZW1lbnRhbC9Nb2RhbC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvUGFnaW5hdGlvbi9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvUGFnaW5hdGlvbi9wYWdlLmpzIiwiQXBwL2VsZW1lbnRhbC9QYXNzQ29udGV4dC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvUG9ydGFsL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9SZXNwb25zaXZlVGV4dC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvU2NyZWVuUmVhZGVyT25seS9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvU2Nyb2xsTG9jay9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvU2VnbWVudGVkQ29udHJvbC9jb2xvcnMuanMiLCJBcHAvZWxlbWVudGFsL1NlZ21lbnRlZENvbnRyb2wvaW5kZXguanMiLCJBcHAvZWxlbWVudGFsL1NlZ21lbnRlZENvbnRyb2wvc3R5bGVzLmpzIiwiQXBwL2VsZW1lbnRhbC9TcGlubmVyL2NvbG9ycy5qcyIsIkFwcC9lbGVtZW50YWwvU3Bpbm5lci9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvU3Bpbm5lci9zaXplcy5qcyIsIkFwcC9lbGVtZW50YWwvU3Bpbm5lci9zdHlsZXMuanMiLCJBcHAvZWxlbWVudGFsL2luZGV4LmpzIiwiQXBwL2luZGV4LmpzIiwiQXBwL3BhcnNlcnMvZmlsdGVycy5qcyIsIkFwcC9wYXJzZXJzL2luZGV4LmpzIiwiQXBwL3NhZ2FzL2luZGV4LmpzIiwiQXBwL3NhZ2FzL3F1ZXJ5UGFyYW1zU2FnYXMuanMiLCJBcHAvc2NyZWVucy9Ib21lL2FjdGlvbnMuanMiLCJBcHAvc2NyZWVucy9Ib21lL2NvbXBvbmVudHMvTGlzdFRpbGUuanMiLCJBcHAvc2NyZWVucy9Ib21lL2NvbXBvbmVudHMvTGlzdHMuanMiLCJBcHAvc2NyZWVucy9Ib21lL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIkFwcC9zY3JlZW5zL0hvbWUvY29uc3RhbnRzLmpzIiwiQXBwL3NjcmVlbnMvSG9tZS9pbmRleC5qcyIsIkFwcC9zY3JlZW5zL0hvbWUvcmVkdWNlci5qcyIsIkFwcC9zY3JlZW5zL0hvbWUvdXRpbHMvZ2V0UmVsYXRlZEljb25DbGFzcy5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vYWN0aW9ucy5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vY29tcG9uZW50cy9BbHRUZXh0LmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0RyaWxsZG93bi5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vY29tcG9uZW50cy9EcmlsbGRvd25JdGVtLmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0VkaXRGb3JtLmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0VkaXRGb3JtSGVhZGVyLmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0VkaXRGb3JtSGVhZGVyU2VhcmNoLmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0Zvb3RlckJhci5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vY29tcG9uZW50cy9Gb3JtSGVhZGluZy5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vY29tcG9uZW50cy9SZWxhdGVkSXRlbXNMaXN0L1JlbGF0ZWRJdGVtc0xpc3QuanMiLCJBcHAvc2NyZWVucy9JdGVtL2NvbXBvbmVudHMvUmVsYXRlZEl0ZW1zTGlzdC9SZWxhdGVkSXRlbXNMaXN0RHJhZ0Ryb3AuanMiLCJBcHAvc2NyZWVucy9JdGVtL2NvbXBvbmVudHMvUmVsYXRlZEl0ZW1zTGlzdC9SZWxhdGVkSXRlbXNMaXN0Um93LmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL1Rvb2xiYXIvVG9vbGJhclNlY3Rpb24uanMiLCJBcHAvc2NyZWVucy9JdGVtL2NvbXBvbmVudHMvVG9vbGJhci9pbmRleC5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vY29uc3RhbnRzLmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9pbmRleC5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vcmVkdWNlci5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvYWN0aW9ucy9hY3RpdmUuanMiLCJBcHAvc2NyZWVucy9MaXN0L2FjdGlvbnMvZHJhZ2Ryb3AuanMiLCJBcHAvc2NyZWVucy9MaXN0L2FjdGlvbnMvaW5kZXguanMiLCJBcHAvc2NyZWVucy9MaXN0L2FjdGlvbnMvaXRlbXMuanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvRmlsdGVyaW5nL0ZpbHRlci5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9GaWx0ZXJpbmcvTGlzdEZpbHRlcnMuanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvRmlsdGVyaW5nL0xpc3RGaWx0ZXJzQWRkLmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0ZpbHRlcmluZy9MaXN0RmlsdGVyc0FkZEZvcm0uanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvRmlsdGVyaW5nL2dldEZpbHRlckxhYmVsLmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0l0ZW1zVGFibGUvSXRlbXNUYWJsZS5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9JdGVtc1RhYmxlL0l0ZW1zVGFibGVEcmFnRHJvcC5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9JdGVtc1RhYmxlL0l0ZW1zVGFibGVEcmFnRHJvcFpvbmUuanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvSXRlbXNUYWJsZS9JdGVtc1RhYmxlRHJhZ0Ryb3Bab25lVGFyZ2V0LmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0l0ZW1zVGFibGUvSXRlbXNUYWJsZVJvdy5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9MaXN0Q29sdW1uc0Zvcm0uanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvTGlzdENvbnRyb2wuanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvTGlzdERvd25sb2FkRm9ybS5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9MaXN0SGVhZGVyQnV0dG9uLmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0xpc3RIZWFkZXJTZWFyY2guanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvTGlzdEhlYWRlclRpdGxlLmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0xpc3RIZWFkZXJUb29sYmFyLmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0xpc3RNYW5hZ2VtZW50LmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0xpc3RTb3J0LmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL1VwZGF0ZUZvcm0uanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbnN0YW50cy5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvaW5kZXguanMiLCJBcHAvc2NyZWVucy9MaXN0L3JlZHVjZXJzL2FjdGl2ZS5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvcmVkdWNlcnMvbWFpbi5qcyIsIkFwcC9zaGFyZWQvQWxlcnRNZXNzYWdlcy5qcyIsIkFwcC9zaGFyZWQvQ29uZmlybWF0aW9uRGlhbG9nLmpzIiwiQXBwL3NoYXJlZC9DcmVhdGVGb3JtLmpzIiwiQXBwL3NoYXJlZC9GbGFzaE1lc3NhZ2UuanMiLCJBcHAvc2hhcmVkL0ZsYXNoTWVzc2FnZXMuanMiLCJBcHAvc2hhcmVkL0lmcmFtZUNvbnRlbnQuanMiLCJBcHAvc2hhcmVkL0ludmFsaWRGaWVsZFR5cGUuanMiLCJBcHAvc2hhcmVkL0tiZC5qcyIsIkFwcC9zaGFyZWQvUG9wb3V0L1BvcG91dEJvZHkuanMiLCJBcHAvc2hhcmVkL1BvcG91dC9Qb3BvdXRGb290ZXIuanMiLCJBcHAvc2hhcmVkL1BvcG91dC9Qb3BvdXRIZWFkZXIuanMiLCJBcHAvc2hhcmVkL1BvcG91dC9Qb3BvdXRMaXN0LmpzIiwiQXBwL3NoYXJlZC9Qb3BvdXQvUG9wb3V0TGlzdEhlYWRpbmcuanMiLCJBcHAvc2hhcmVkL1BvcG91dC9Qb3BvdXRMaXN0SXRlbS5qcyIsIkFwcC9zaGFyZWQvUG9wb3V0L1BvcG91dFBhbmUuanMiLCJBcHAvc2hhcmVkL1BvcG91dC9pbmRleC5qcyIsIkFwcC9zaGFyZWQvUG9ydGFsLmpzIiwiQXBwL3N0b3JlLmpzIiwiY29uc3RhbnRzLmpzIiwidGhlbWUuanMiLCJ1dGlscy9MaXN0LmpzIiwidXRpbHMvY29sb3IuanMiLCJ1dGlscy9jb25jYXRDbGFzc25hbWVzLmpzIiwidXRpbHMvY3NzLmpzIiwidXRpbHMvbGlzdHMuanMiLCJ1dGlscy9xdWVyeVBhcmFtcy5qcyIsInV0aWxzL3N0cmluZy5qcyIsIi4uLy4uL2ZpZWxkcy91dGlscy9ldmFsRGVwZW5kc09uLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19EYXRhVmlldy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fSGFzaC5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fTGlzdENhY2hlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19NYXAuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX01hcENhY2hlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19Qcm9taXNlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19TZXQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX1NldENhY2hlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19TdGFjay5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fU3ltYm9sLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19VaW50OEFycmF5LmpzIiwiLi4vLi4vLi4vbG9kYXNoL19XZWFrTWFwLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19hcnJheUZpbHRlci5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fYXJyYXlQdXNoLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19hcnJheVNvbWUuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2Jhc2VJc0VxdWFsRGVlcC5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19iYXNlSXNUeXBlZEFycmF5LmpzIiwiLi4vLi4vLi4vbG9kYXNoL19iYXNlS2V5cy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fYmFzZVRpbWVzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19iYXNlVW5hcnkuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2NhY2hlSGFzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fZXF1YWxCeVRhZy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fZXF1YWxPYmplY3RzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19nZXRBbGxLZXlzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19nZXROYXRpdmUuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2dldFByb3RvdHlwZS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19nZXRTeW1ib2xzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19nZXRUYWcuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2dldFZhbHVlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19oYXNoQ2xlYXIuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2hhc2hEZWxldGUuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2hhc2hHZXQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2hhc2hIYXMuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2hhc2hTZXQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2lzSW5kZXguanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9faXNNYXNrZWQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19saXN0Q2FjaGVHZXQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwiLi4vLi4vLi4vbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fbWFwVG9BcnJheS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19ub2RlVXRpbC5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX292ZXJBcmcuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX3Jvb3QuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX3NldENhY2hlQWRkLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19zZXRDYWNoZUhhcy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fc2V0VG9BcnJheS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fc3RhY2tEZWxldGUuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX3N0YWNrR2V0LmpzIiwiLi4vLi4vLi4vbG9kYXNoL19zdGFja0hhcy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fc3RhY2tTZXQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX3RvU291cmNlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL2VxLmpzIiwiLi4vLi4vLi4vbG9kYXNoL2lzQXJndW1lbnRzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL2lzQXJyYXkuanMiLCIuLi8uLi8uLi9sb2Rhc2gvaXNBcnJheUxpa2UuanMiLCIuLi8uLi8uLi9sb2Rhc2gvaXNCdWZmZXIuanMiLCIuLi8uLi8uLi9sb2Rhc2gvaXNFcXVhbC5qcyIsIi4uLy4uLy4uL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwiLi4vLi4vLi4vbG9kYXNoL2lzTGVuZ3RoLmpzIiwiLi4vLi4vLi4vbG9kYXNoL2lzT2JqZWN0LmpzIiwiLi4vLi4vLi4vbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9pc1BsYWluT2JqZWN0LmpzIiwiLi4vLi4vLi4vbG9kYXNoL2lzVHlwZWRBcnJheS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9rZXlzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL3N0dWJBcnJheS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9zdHViRmFsc2UuanMiLCIuLi8uLi8uLi9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwiLi4vLi4vLi4vcHJvY2Vzcy9icm93c2VyLmpzIiwiLi4vLi4vLi4vcmVkdXgtc2FnYS9lZmZlY3RzLmpzIiwiLi4vLi4vLi4vcmVkdXgtc2FnYS9saWIvZWZmZWN0cy5qcyIsIi4uLy4uLy4uL3JlZHV4LXNhZ2EvbGliL2ludGVybmFsL2J1ZmZlcnMuanMiLCIuLi8uLi8uLi9yZWR1eC1zYWdhL2xpYi9pbnRlcm5hbC9jaGFubmVsLmpzIiwiLi4vLi4vLi4vcmVkdXgtc2FnYS9saWIvaW50ZXJuYWwvaW8uanMiLCIuLi8uLi8uLi9yZWR1eC1zYWdhL2xpYi9pbnRlcm5hbC9zYWdhSGVscGVycy5qcyIsIi4uLy4uLy4uL3JlZHV4LXNhZ2EvbGliL2ludGVybmFsL3NjaGVkdWxlci5qcyIsIi4uLy4uLy4uL3JlZHV4LXNhZ2EvbGliL2ludGVybmFsL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBOztBQUVBLFFBQVEsY0FBUjs7QUFFQSxRQUFRLDZCQUFSOztBQUVBLFFBQVEsMEJBQVI7O0FBRUEsSUFBSSxPQUFPLGNBQVgsRUFBMkI7QUFDekIsUUFBTSxJQUFJLEtBQUosQ0FBVSxnREFBVixDQUFOO0FBQ0Q7QUFDRCxPQUFPLGNBQVAsR0FBd0IsSUFBeEI7O0FBRUEsSUFBSSxrQkFBa0IsZ0JBQXRCO0FBQ0EsU0FBUyxNQUFULENBQWdCLENBQWhCLEVBQW1CLEdBQW5CLEVBQXdCLEtBQXhCLEVBQStCO0FBQzdCLElBQUUsR0FBRixLQUFVLE9BQU8sZUFBUCxFQUF3QixDQUF4QixFQUEyQixHQUEzQixFQUFnQztBQUN4QyxjQUFVLElBRDhCO0FBRXhDLGtCQUFjLElBRjBCO0FBR3hDLFdBQU87QUFIaUMsR0FBaEMsQ0FBVjtBQUtEOztBQUVELE9BQU8sT0FBTyxTQUFkLEVBQXlCLFNBQXpCLEVBQW9DLEdBQUcsUUFBdkM7QUFDQSxPQUFPLE9BQU8sU0FBZCxFQUF5QixVQUF6QixFQUFxQyxHQUFHLE1BQXhDOztBQUVBLGdNQUFnTSxLQUFoTSxDQUFzTSxHQUF0TSxFQUEyTSxPQUEzTSxDQUFtTixVQUFVLEdBQVYsRUFBZTtBQUNoTyxLQUFHLEdBQUgsS0FBVyxPQUFPLEtBQVAsRUFBYyxHQUFkLEVBQW1CLFNBQVMsSUFBVCxDQUFjLElBQWQsQ0FBbUIsR0FBRyxHQUFILENBQW5CLENBQW5CLENBQVg7QUFDRCxDQUZEOzs7Ozs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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LGlCQUFpQixJQUFqQixDQUFzQixJQUF0QixFQUE0QixRQUFRLENBQVIsQ0FBNUIsQ0FBSixFQUE2QztBQUM1QyxRQUFHLFFBQVEsQ0FBUixDQUFILElBQWlCLEtBQUssUUFBUSxDQUFSLENBQUwsQ0FBakI7QUFDQTtBQUNEO0FBQ0Q7QUFDRDs7QUFFRCxRQUFPLEVBQVA7QUFDQSxDQXpCRDs7O0FDaEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeExBLE9BQU8sT0FBUCxHQUFpQixRQUFRLGVBQVIsQ0FBakI7OztBQ0FBOztBQUVBLE9BQU8sY0FBUCxDQUFzQixPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQyxTQUFPO0FBRG9DLENBQTdDOztBQUlBLElBQUksTUFBTSxRQUFRLGVBQVIsQ0FBVjs7QUFFQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsTUFBL0IsRUFBdUM7QUFDckMsY0FBWSxJQUR5QjtBQUVyQyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxJQUFYO0FBQ0Q7QUFKb0MsQ0FBdkM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsT0FBL0IsRUFBd0M7QUFDdEMsY0FBWSxJQUQwQjtBQUV0QyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxLQUFYO0FBQ0Q7QUFKcUMsQ0FBeEM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsS0FBL0IsRUFBc0M7QUFDcEMsY0FBWSxJQUR3QjtBQUVwQyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxHQUFYO0FBQ0Q7QUFKbUMsQ0FBdEM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsTUFBL0IsRUFBdUM7QUFDckMsY0FBWSxJQUR5QjtBQUVyQyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxJQUFYO0FBQ0Q7QUFKb0MsQ0FBdkM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsTUFBL0IsRUFBdUM7QUFDckMsY0FBWSxJQUR5QjtBQUVyQyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxJQUFYO0FBQ0Q7QUFKb0MsQ0FBdkM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsT0FBL0IsRUFBd0M7QUFDdEMsY0FBWSxJQUQwQjtBQUV0QyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxLQUFYO0FBQ0Q7QUFKcUMsQ0FBeEM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsS0FBL0IsRUFBc0M7QUFDcEMsY0FBWSxJQUR3QjtBQUVwQyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxHQUFYO0FBQ0Q7QUFKbUMsQ0FBdEM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsTUFBL0IsRUFBdUM7QUFDckMsY0FBWSxJQUR5QjtBQUVyQyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxJQUFYO0FBQ0Q7QUFKb0MsQ0FBdkM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsT0FBL0IsRUFBd0M7QUFDdEMsY0FBWSxJQUQwQjtBQUV0QyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxLQUFYO0FBQ0Q7QUFKcUMsQ0FBeEM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsTUFBL0IsRUFBdUM7QUFDckMsY0FBWSxJQUR5QjtBQUVyQyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxJQUFYO0FBQ0Q7QUFKb0MsQ0FBdkM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsUUFBL0IsRUFBeUM7QUFDdkMsY0FBWSxJQUQyQjtBQUV2QyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxNQUFYO0FBQ0Q7QUFKc0MsQ0FBekM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsUUFBL0IsRUFBeUM7QUFDdkMsY0FBWSxJQUQyQjtBQUV2QyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxNQUFYO0FBQ0Q7QUFKc0MsQ0FBekM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsZUFBL0IsRUFBZ0Q7QUFDOUMsY0FBWSxJQURrQztBQUU5QyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxhQUFYO0FBQ0Q7QUFKNkMsQ0FBaEQ7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsV0FBL0IsRUFBNEM7QUFDMUMsY0FBWSxJQUQ4QjtBQUUxQyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxTQUFYO0FBQ0Q7QUFKeUMsQ0FBNUM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsT0FBL0IsRUFBd0M7QUFDdEMsY0FBWSxJQUQwQjtBQUV0QyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxLQUFYO0FBQ0Q7QUFKcUMsQ0FBeEM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsV0FBL0IsRUFBNEM7QUFDMUMsY0FBWSxJQUQ4QjtBQUUxQyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxTQUFYO0FBQ0Q7QUFKeUMsQ0FBNUM7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0MsY0FBWSxJQUQrQjtBQUUzQyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxVQUFYO0FBQ0Q7QUFKMEMsQ0FBN0M7QUFNQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsVUFBL0IsRUFBMkM7QUFDekMsY0FBWSxJQUQ2QjtBQUV6QyxPQUFLLFNBQVMsR0FBVCxHQUFlO0FBQ2xCLFdBQU8sSUFBSSxRQUFYO0FBQ0Q7QUFKd0MsQ0FBM0M7OztBQzlHQTs7QUFFQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0MsU0FBTztBQURvQyxDQUE3QztBQUdBLFFBQVEsT0FBUixHQUFrQixRQUFRLGVBQVIsR0FBMEIsU0FBNUM7O0FBRUEsSUFBSSxTQUFTLFFBQVEsU0FBUixDQUFiOztBQUVBLElBQUksa0JBQWtCLFFBQVEsZUFBUixHQUEwQiw2QkFBaEQ7O0FBRUEsSUFBSSxvQkFBb0IsQ0FBeEI7QUFDQSxJQUFJLG1CQUFtQixDQUF2QjtBQUNBLElBQUksb0JBQW9CLENBQXhCO0FBQ0EsSUFBSSxxQkFBcUIsQ0FBekI7O0FBRUEsSUFBSSxhQUFhLEVBQUUsU0FBUyxPQUFPLEtBQWxCLEVBQXlCLEtBQUssT0FBTyxJQUFyQyxFQUEyQyxNQUFNLE9BQU8sSUFBeEQsRUFBakI7O0FBRUEsU0FBUyxVQUFULEdBQXNCO0FBQ3BCLE1BQUksUUFBUSxVQUFVLE1BQVYsR0FBbUIsQ0FBbkIsSUFBd0IsVUFBVSxDQUFWLE1BQWlCLFNBQXpDLEdBQXFELFVBQVUsQ0FBVixDQUFyRCxHQUFvRSxFQUFoRjtBQUNBLE1BQUksaUJBQWlCLFVBQVUsQ0FBVixDQUFyQjs7QUFFQSxNQUFJLE1BQU0sSUFBSSxLQUFKLENBQVUsS0FBVixDQUFWO0FBQ0EsTUFBSSxTQUFTLENBQWI7QUFDQSxNQUFJLFlBQVksQ0FBaEI7QUFDQSxNQUFJLFdBQVcsQ0FBZjs7QUFFQSxNQUFJLE9BQU8sU0FBUyxJQUFULENBQWMsRUFBZCxFQUFrQjtBQUMzQixRQUFJLFNBQUosSUFBaUIsRUFBakI7QUFDQSxnQkFBWSxDQUFDLFlBQVksQ0FBYixJQUFrQixLQUE5QjtBQUNBO0FBQ0QsR0FKRDs7QUFNQSxNQUFJLE9BQU8sU0FBUyxJQUFULEdBQWdCO0FBQ3pCLFFBQUksVUFBVSxDQUFkLEVBQWlCO0FBQ2YsVUFBSSxLQUFLLElBQUksUUFBSixDQUFUO0FBQ0EsVUFBSSxRQUFKLElBQWdCLElBQWhCO0FBQ0E7QUFDQSxpQkFBVyxDQUFDLFdBQVcsQ0FBWixJQUFpQixLQUE1QjtBQUNBLGFBQU8sRUFBUDtBQUNEO0FBQ0YsR0FSRDs7QUFVQSxNQUFJLFFBQVEsU0FBUyxLQUFULEdBQWlCO0FBQzNCLFFBQUksUUFBUSxFQUFaO0FBQ0EsV0FBTyxNQUFQLEVBQWU7QUFDYixZQUFNLElBQU4sQ0FBVyxNQUFYO0FBQ0Q7QUFDRCxXQUFPLEtBQVA7QUFDRCxHQU5EOztBQVFBLFNBQU87QUFDTCxhQUFTLFNBQVMsT0FBVCxHQUFtQjtBQUMxQixhQUFPLFVBQVUsQ0FBakI7QUFDRCxLQUhJO0FBSUwsU0FBSyxTQUFTLEdBQVQsQ0FBYSxFQUFiLEVBQWlCO0FBQ3BCLFVBQUksU0FBUyxLQUFiLEVBQW9CO0FBQ2xCLGFBQUssRUFBTDtBQUNELE9BRkQsTUFFTztBQUNMLFlBQUksZUFBZSxLQUFLLENBQXhCO0FBQ0EsZ0JBQVEsY0FBUjtBQUNFLGVBQUssaUJBQUw7QUFDRSxrQkFBTSxJQUFJLEtBQUosQ0FBVSxlQUFWLENBQU47QUFDRixlQUFLLGlCQUFMO0FBQ0UsZ0JBQUksU0FBSixJQUFpQixFQUFqQjtBQUNBLHdCQUFZLENBQUMsWUFBWSxDQUFiLElBQWtCLEtBQTlCO0FBQ0EsdUJBQVcsU0FBWDtBQUNBO0FBQ0YsZUFBSyxrQkFBTDtBQUNFLDJCQUFlLElBQUksS0FBbkI7O0FBRUEsa0JBQU0sT0FBTjs7QUFFQSxxQkFBUyxJQUFJLE1BQWI7QUFDQSx3QkFBWSxJQUFJLE1BQWhCO0FBQ0EsdUJBQVcsQ0FBWDs7QUFFQSxnQkFBSSxNQUFKLEdBQWEsWUFBYjtBQUNBLG9CQUFRLFlBQVI7O0FBRUEsaUJBQUssRUFBTDtBQUNBO0FBQ0Y7QUFDQTtBQXZCRjtBQXlCRDtBQUNGLEtBbkNJO0FBb0NMLFVBQU0sSUFwQ0QsRUFvQ08sT0FBTztBQXBDZCxHQUFQO0FBc0NEOztBQUVELElBQUksVUFBVSxRQUFRLE9BQVIsR0FBa0I7QUFDOUIsUUFBTSxTQUFTLElBQVQsR0FBZ0I7QUFDcEIsV0FBTyxVQUFQO0FBQ0QsR0FINkI7QUFJOUIsU0FBTyxTQUFTLEtBQVQsQ0FBZSxLQUFmLEVBQXNCO0FBQzNCLFdBQU8sV0FBVyxLQUFYLEVBQWtCLGlCQUFsQixDQUFQO0FBQ0QsR0FONkI7QUFPOUIsWUFBVSxTQUFTLFFBQVQsQ0FBa0IsS0FBbEIsRUFBeUI7QUFDakMsV0FBTyxXQUFXLEtBQVgsRUFBa0IsZ0JBQWxCLENBQVA7QUFDRCxHQVQ2QjtBQVU5QixXQUFTLFNBQVMsT0FBVCxDQUFpQixLQUFqQixFQUF3QjtBQUMvQixXQUFPLFdBQVcsS0FBWCxFQUFrQixpQkFBbEIsQ0FBUDtBQUNELEdBWjZCO0FBYTlCLGFBQVcsU0FBUyxTQUFULENBQW1CLFdBQW5CLEVBQWdDO0FBQ3pDLFdBQU8sV0FBVyxXQUFYLEVBQXdCLGtCQUF4QixDQUFQO0FBQ0Q7QUFmNkIsQ0FBaEM7Ozs7QUMzRkE7O0FBRUEsT0FBTyxjQUFQLENBQXNCLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDLFNBQU87QUFEb0MsQ0FBN0M7QUFHQSxRQUFRLHFCQUFSLEdBQWdDLFFBQVEsY0FBUixHQUF5QixRQUFRLEtBQVIsR0FBZ0IsUUFBUSxHQUFSLEdBQWMsU0FBdkY7O0FBRUEsSUFBSSxXQUFXLE9BQU8sTUFBUCxJQUFpQixVQUFVLE1BQVYsRUFBa0I7QUFBRSxPQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksVUFBVSxNQUE5QixFQUFzQyxHQUF0QyxFQUEyQztBQUFFLFFBQUksU0FBUyxVQUFVLENBQVYsQ0FBYixDQUEyQixLQUFLLElBQUksR0FBVCxJQUFnQixNQUFoQixFQUF3QjtBQUFFLFVBQUksT0FBTyxTQUFQLENBQWlCLGNBQWpCLENBQWdDLElBQWhDLENBQXFDLE1BQXJDLEVBQTZDLEdBQTdDLENBQUosRUFBdUQ7QUFBRSxlQUFPLEdBQVAsSUFBYyxPQUFPLEdBQVAsQ0FBZDtBQUE0QjtBQUFFO0FBQUUsR0FBQyxPQUFPLE1BQVA7QUFBZ0IsQ0FBaFE7O0FBRUEsUUFBUSxPQUFSLEdBQWtCLE9BQWxCO0FBQ0EsUUFBUSxPQUFSLEdBQWtCLE9BQWxCO0FBQ0EsUUFBUSxZQUFSLEdBQXVCLFlBQXZCO0FBQ0EsUUFBUSxVQUFSLEdBQXFCLFVBQXJCOztBQUVBLElBQUksU0FBUyxRQUFRLFNBQVIsQ0FBYjs7QUFFQSxJQUFJLFdBQVcsUUFBUSxXQUFSLENBQWY7O0FBRUEsSUFBSSxhQUFhLFFBQVEsYUFBUixDQUFqQjs7QUFFQSxJQUFJLG1CQUFtQiwwQkFBdkI7QUFDQSxJQUFJLE1BQU0sUUFBUSxHQUFSLEdBQWMsRUFBRSxNQUFNLGdCQUFSLEVBQXhCO0FBQ0EsSUFBSSxRQUFRLFFBQVEsS0FBUixHQUFnQixTQUFTLEtBQVQsQ0FBZSxDQUFmLEVBQWtCO0FBQzVDLFNBQU8sS0FBSyxFQUFFLElBQUYsS0FBVyxnQkFBdkI7QUFDRCxDQUZEOztBQUlBLFNBQVMsT0FBVCxHQUFtQjtBQUNqQixNQUFJLGNBQWMsRUFBbEI7O0FBRUEsV0FBUyxTQUFULENBQW1CLEdBQW5CLEVBQXdCO0FBQ3RCLGdCQUFZLElBQVosQ0FBaUIsR0FBakI7QUFDQSxXQUFPLFlBQVk7QUFDakIsYUFBTyxDQUFDLEdBQUcsT0FBTyxNQUFYLEVBQW1CLFdBQW5CLEVBQWdDLEdBQWhDLENBQVA7QUFDRCxLQUZEO0FBR0Q7O0FBRUQsV0FBUyxJQUFULENBQWMsSUFBZCxFQUFvQjtBQUNsQixRQUFJLE1BQU0sWUFBWSxLQUFaLEVBQVY7QUFDQSxTQUFLLElBQUksSUFBSSxDQUFSLEVBQVcsTUFBTSxJQUFJLE1BQTFCLEVBQWtDLElBQUksR0FBdEMsRUFBMkMsR0FBM0MsRUFBZ0Q7QUFDOUMsVUFBSSxDQUFKLEVBQU8sSUFBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBTztBQUNMLGVBQVcsU0FETjtBQUVMLFVBQU07QUFGRCxHQUFQO0FBSUQ7O0FBRUQsSUFBSSxpQkFBaUIsUUFBUSxjQUFSLEdBQXlCLG1EQUE5QztBQUNBLElBQUksd0JBQXdCLFFBQVEscUJBQVIsR0FBZ0MsNENBQTVEOztBQUVBLElBQUksUUFBUSxHQUFSLENBQVksUUFBWixLQUF5QixZQUE3QixFQUEyQztBQUN6QyxVQUFRLHFCQUFSLEdBQWdDLHlCQUF5QixzTUFBekQ7QUFDRDs7QUFFRCxTQUFTLE9BQVQsR0FBbUI7QUFDakIsTUFBSSxTQUFTLFVBQVUsTUFBVixHQUFtQixDQUFuQixJQUF3QixVQUFVLENBQVYsTUFBaUIsU0FBekMsR0FBcUQsVUFBVSxDQUFWLENBQXJELEdBQW9FLFNBQVMsT0FBVCxDQUFpQixLQUFqQixFQUFqRjs7QUFFQSxNQUFJLFNBQVMsS0FBYjtBQUNBLE1BQUksU0FBUyxFQUFiOztBQUVBLEdBQUMsR0FBRyxPQUFPLEtBQVgsRUFBa0IsTUFBbEIsRUFBMEIsT0FBTyxFQUFQLENBQVUsTUFBcEMsRUFBNEMsY0FBNUM7O0FBRUEsV0FBUyxvQkFBVCxHQUFnQztBQUM5QixRQUFJLFVBQVUsT0FBTyxNQUFyQixFQUE2QjtBQUMzQixZQUFNLENBQUMsR0FBRyxPQUFPLFdBQVgsRUFBd0Isa0RBQXhCLENBQU47QUFDRDtBQUNELFFBQUksT0FBTyxNQUFQLElBQWlCLENBQUMsT0FBTyxPQUFQLEVBQXRCLEVBQXdDO0FBQ3RDLFlBQU0sQ0FBQyxHQUFHLE9BQU8sV0FBWCxFQUF3QixrREFBeEIsQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQsV0FBUyxHQUFULENBQWEsS0FBYixFQUFvQjtBQUNsQjtBQUNBLEtBQUMsR0FBRyxPQUFPLEtBQVgsRUFBa0IsS0FBbEIsRUFBeUIsT0FBTyxFQUFQLENBQVUsUUFBbkMsRUFBNkMscUJBQTdDO0FBQ0EsUUFBSSxNQUFKLEVBQVk7QUFDVjtBQUNEO0FBQ0QsUUFBSSxDQUFDLE9BQU8sTUFBWixFQUFvQjtBQUNsQixhQUFPLE9BQU8sR0FBUCxDQUFXLEtBQVgsQ0FBUDtBQUNEO0FBQ0QsU0FBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLE9BQU8sTUFBM0IsRUFBbUMsR0FBbkMsRUFBd0M7QUFDdEMsVUFBSSxLQUFLLE9BQU8sQ0FBUCxDQUFUO0FBQ0EsVUFBSSxDQUFDLEdBQUcsT0FBTyxLQUFWLENBQUQsSUFBcUIsR0FBRyxPQUFPLEtBQVYsRUFBaUIsS0FBakIsQ0FBekIsRUFBa0Q7QUFDaEQsZUFBTyxNQUFQLENBQWMsQ0FBZCxFQUFpQixDQUFqQjtBQUNBLGVBQU8sR0FBRyxLQUFILENBQVA7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsV0FBUyxJQUFULENBQWMsRUFBZCxFQUFrQjtBQUNoQjtBQUNBLEtBQUMsR0FBRyxPQUFPLEtBQVgsRUFBa0IsRUFBbEIsRUFBc0IsT0FBTyxFQUFQLENBQVUsSUFBaEMsRUFBc0MsNkNBQXRDOztBQUVBLFFBQUksVUFBVSxPQUFPLE9BQVAsRUFBZCxFQUFnQztBQUM5QixTQUFHLEdBQUg7QUFDRCxLQUZELE1BRU8sSUFBSSxDQUFDLE9BQU8sT0FBUCxFQUFMLEVBQXVCO0FBQzVCLFNBQUcsT0FBTyxJQUFQLEVBQUg7QUFDRCxLQUZNLE1BRUE7QUFDTCxhQUFPLElBQVAsQ0FBWSxFQUFaO0FBQ0EsU0FBRyxNQUFILEdBQVksWUFBWTtBQUN0QixlQUFPLENBQUMsR0FBRyxPQUFPLE1BQVgsRUFBbUIsTUFBbkIsRUFBMkIsRUFBM0IsQ0FBUDtBQUNELE9BRkQ7QUFHRDtBQUNGOztBQUVELFdBQVMsS0FBVCxDQUFlLEVBQWYsRUFBbUI7QUFDakIsMkJBRGlCLENBQ087QUFDeEIsS0FBQyxHQUFHLE9BQU8sS0FBWCxFQUFrQixFQUFsQixFQUFzQixPQUFPLEVBQVAsQ0FBVSxJQUFoQyxFQUFzQyw2Q0FBdEM7QUFDQSxRQUFJLFVBQVUsT0FBTyxPQUFQLEVBQWQsRUFBZ0M7QUFDOUIsU0FBRyxHQUFIO0FBQ0E7QUFDRDtBQUNELE9BQUcsT0FBTyxLQUFQLEVBQUg7QUFDRDs7QUFFRCxXQUFTLEtBQVQsR0FBaUI7QUFDZjtBQUNBLFFBQUksQ0FBQyxNQUFMLEVBQWE7QUFDWCxlQUFTLElBQVQ7QUFDQSxVQUFJLE9BQU8sTUFBWCxFQUFtQjtBQUNqQixZQUFJLE1BQU0sTUFBVjtBQUNBLGlCQUFTLEVBQVQ7QUFDQSxhQUFLLElBQUksSUFBSSxDQUFSLEVBQVcsTUFBTSxJQUFJLE1BQTFCLEVBQWtDLElBQUksR0FBdEMsRUFBMkMsR0FBM0MsRUFBZ0Q7QUFDOUMsY0FBSSxDQUFKLEVBQU8sR0FBUDtBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQUVELFNBQU8sRUFBRSxNQUFNLElBQVIsRUFBYyxLQUFLLEdBQW5CLEVBQXdCLE9BQU8sS0FBL0IsRUFBc0MsT0FBTyxLQUE3QztBQUNMLFFBQUksVUFBSixHQUFpQjtBQUNmLGFBQU8sTUFBUDtBQUNELEtBSEk7QUFJTCxRQUFJLFVBQUosR0FBaUI7QUFDZixhQUFPLE1BQVA7QUFDRDtBQU5JLEdBQVA7QUFRRDs7QUFFRCxTQUFTLFlBQVQsQ0FBc0IsU0FBdEIsRUFBaUM7QUFDL0IsTUFBSSxTQUFTLFVBQVUsTUFBVixHQUFtQixDQUFuQixJQUF3QixVQUFVLENBQVYsTUFBaUIsU0FBekMsR0FBcUQsVUFBVSxDQUFWLENBQXJELEdBQW9FLFNBQVMsT0FBVCxDQUFpQixJQUFqQixFQUFqRjtBQUNBLE1BQUksVUFBVSxVQUFVLENBQVYsQ0FBZDs7QUFFQTs7OztBQUlBLE1BQUksVUFBVSxNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3hCLEtBQUMsR0FBRyxPQUFPLEtBQVgsRUFBa0IsT0FBbEIsRUFBMkIsT0FBTyxFQUFQLENBQVUsSUFBckMsRUFBMkMsK0NBQTNDO0FBQ0Q7O0FBRUQsTUFBSSxPQUFPLFFBQVEsTUFBUixDQUFYO0FBQ0EsTUFBSSxjQUFjLFVBQVUsVUFBVSxLQUFWLEVBQWlCO0FBQzNDLFFBQUksTUFBTSxLQUFOLENBQUosRUFBa0I7QUFDaEIsV0FBSyxLQUFMO0FBQ0E7QUFDRDtBQUNELFFBQUksV0FBVyxDQUFDLFFBQVEsS0FBUixDQUFoQixFQUFnQztBQUM5QjtBQUNEO0FBQ0QsU0FBSyxHQUFMLENBQVMsS0FBVDtBQUNELEdBVGlCLENBQWxCOztBQVdBLE1BQUksQ0FBQyxPQUFPLEVBQVAsQ0FBVSxJQUFWLENBQWUsV0FBZixDQUFMLEVBQWtDO0FBQ2hDLFVBQU0sSUFBSSxLQUFKLENBQVUsb0VBQVYsQ0FBTjtBQUNEOztBQUVELFNBQU87QUFDTCxVQUFNLEtBQUssSUFETjtBQUVMLFdBQU8sS0FBSyxLQUZQO0FBR0wsV0FBTyxTQUFTLEtBQVQsR0FBaUI7QUFDdEIsVUFBSSxDQUFDLEtBQUssVUFBVixFQUFzQjtBQUNwQixhQUFLLEtBQUw7QUFDQTtBQUNEO0FBQ0Y7QUFSSSxHQUFQO0FBVUQ7O0FBRUQsU0FBUyxVQUFULENBQW9CLFNBQXBCLEVBQStCO0FBQzdCLE1BQUksT0FBTyxhQUFhLFVBQVUsRUFBVixFQUFjO0FBQ3BDLFdBQU8sVUFBVSxVQUFVLEtBQVYsRUFBaUI7QUFDaEMsVUFBSSxNQUFNLE9BQU8sV0FBYixDQUFKLEVBQStCO0FBQzdCLFdBQUcsS0FBSDtBQUNBO0FBQ0Q7QUFDRCxPQUFDLEdBQUcsV0FBVyxJQUFmLEVBQXFCLFlBQVk7QUFDL0IsZUFBTyxHQUFHLEtBQUgsQ0FBUDtBQUNELE9BRkQ7QUFHRCxLQVJNLENBQVA7QUFTRCxHQVZVLENBQVg7O0FBWUEsU0FBTyxTQUFTLEVBQVQsRUFBYSxJQUFiLEVBQW1CO0FBQ3hCLFVBQU0sU0FBUyxJQUFULENBQWMsRUFBZCxFQUFrQixPQUFsQixFQUEyQjtBQUMvQixVQUFJLFVBQVUsTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUN4QixTQUFDLEdBQUcsT0FBTyxLQUFYLEVBQWtCLE9BQWxCLEVBQTJCLE9BQU8sRUFBUCxDQUFVLElBQXJDLEVBQTJDLHFEQUEzQztBQUNBLFdBQUcsT0FBTyxLQUFWLElBQW1CLE9BQW5CO0FBQ0Q7QUFDRCxXQUFLLElBQUwsQ0FBVSxFQUFWO0FBQ0Q7QUFQdUIsR0FBbkIsQ0FBUDtBQVNEOzs7OztBQzNNRDs7QUFFQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0MsU0FBTztBQURvQyxDQUE3QztBQUdBLFFBQVEsUUFBUixHQUFtQixRQUFRLEtBQVIsR0FBZ0IsU0FBbkM7O0FBRUEsSUFBSSxpQkFBaUIsWUFBWTtBQUFFLFdBQVMsYUFBVCxDQUF1QixHQUF2QixFQUE0QixDQUE1QixFQUErQjtBQUFFLFFBQUksT0FBTyxFQUFYLENBQWUsSUFBSSxLQUFLLElBQVQsQ0FBZSxJQUFJLEtBQUssS0FBVCxDQUFnQixJQUFJLEtBQUssU0FBVCxDQUFvQixJQUFJO0FBQUUsV0FBSyxJQUFJLEtBQUssSUFBSSxPQUFPLFFBQVgsR0FBVCxFQUFpQyxFQUF0QyxFQUEwQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSCxFQUFOLEVBQWlCLElBQXhCLENBQTFDLEVBQXlFLEtBQUssSUFBOUUsRUFBb0Y7QUFBRSxhQUFLLElBQUwsQ0FBVSxHQUFHLEtBQWIsRUFBcUIsSUFBSSxLQUFLLEtBQUssTUFBTCxLQUFnQixDQUF6QixFQUE0QjtBQUFRO0FBQUUsS0FBdkosQ0FBd0osT0FBTyxHQUFQLEVBQVk7QUFBRSxXQUFLLElBQUwsQ0FBVyxLQUFLLEdBQUw7QUFBVyxLQUE1TCxTQUFxTTtBQUFFLFVBQUk7QUFBRSxZQUFJLENBQUMsRUFBRCxJQUFPLEdBQUcsUUFBSCxDQUFYLEVBQXlCLEdBQUcsUUFBSDtBQUFpQixPQUFoRCxTQUF5RDtBQUFFLFlBQUksRUFBSixFQUFRLE1BQU0sRUFBTjtBQUFXO0FBQUUsS0FBQyxPQUFPLElBQVA7QUFBYyxHQUFDLE9BQU8sVUFBVSxHQUFWLEVBQWUsQ0FBZixFQUFrQjtBQUFFLFFBQUksTUFBTSxPQUFOLENBQWMsR0FBZCxDQUFKLEVBQXdCO0FBQUUsYUFBTyxHQUFQO0FBQWEsS0FBdkMsTUFBNkMsSUFBSSxPQUFPLFFBQVAsSUFBbUIsT0FBTyxHQUFQLENBQXZCLEVBQW9DO0FBQUUsYUFBTyxjQUFjLEdBQWQsRUFBbUIsQ0FBbkIsQ0FBUDtBQUErQixLQUFyRSxNQUEyRTtBQUFFLFlBQU0sSUFBSSxTQUFKLENBQWMsc0RBQWQsQ0FBTjtBQUE4RTtBQUFFLEdBQXJPO0FBQXdPLENBQWhvQixFQUFyQjs7QUFFQSxRQUFRLElBQVIsR0FBZSxJQUFmO0FBQ0EsUUFBUSxHQUFSLEdBQWMsR0FBZDtBQUNBLFFBQVEsSUFBUixHQUFlLElBQWY7QUFDQSxRQUFRLElBQVIsR0FBZSxJQUFmO0FBQ0EsUUFBUSxLQUFSLEdBQWdCLEtBQWhCO0FBQ0EsUUFBUSxHQUFSLEdBQWMsR0FBZDtBQUNBLFFBQVEsSUFBUixHQUFlLElBQWY7QUFDQSxRQUFRLEtBQVIsR0FBZ0IsS0FBaEI7QUFDQSxRQUFRLElBQVIsR0FBZSxJQUFmO0FBQ0EsUUFBUSxNQUFSLEdBQWlCLE1BQWpCO0FBQ0EsUUFBUSxNQUFSLEdBQWlCLE1BQWpCO0FBQ0EsUUFBUSxhQUFSLEdBQXdCLGFBQXhCO0FBQ0EsUUFBUSxTQUFSLEdBQW9CLFNBQXBCO0FBQ0EsUUFBUSxLQUFSLEdBQWdCLEtBQWhCO0FBQ0EsUUFBUSxTQUFSLEdBQW9CLFNBQXBCO0FBQ0EsUUFBUSxVQUFSLEdBQXFCLFVBQXJCO0FBQ0EsUUFBUSxRQUFSLEdBQW1CLFFBQW5COztBQUVBLElBQUksU0FBUyxRQUFRLFNBQVIsQ0FBYjs7QUFFQSxJQUFJLGVBQWUsUUFBUSxlQUFSLENBQW5COztBQUVBLFNBQVMsZUFBVCxDQUF5QixHQUF6QixFQUE4QixHQUE5QixFQUFtQyxLQUFuQyxFQUEwQztBQUFFLE1BQUksT0FBTyxHQUFYLEVBQWdCO0FBQUUsV0FBTyxjQUFQLENBQXNCLEdBQXRCLEVBQTJCLEdBQTNCLEVBQWdDLEVBQUUsT0FBTyxLQUFULEVBQWdCLFlBQVksSUFBNUIsRUFBa0MsY0FBYyxJQUFoRCxFQUFzRCxVQUFVLElBQWhFLEVBQWhDO0FBQTBHLEdBQTVILE1BQWtJO0FBQUUsUUFBSSxHQUFKLElBQVcsS0FBWDtBQUFtQixHQUFDLE9BQU8sR0FBUDtBQUFhOztBQUVqTixJQUFJLEtBQUssQ0FBQyxHQUFHLE9BQU8sR0FBWCxFQUFnQixJQUFoQixDQUFUO0FBQ0EsSUFBSSxPQUFPLE1BQVg7QUFDQSxJQUFJLE1BQU0sS0FBVjtBQUNBLElBQUksT0FBTyxNQUFYO0FBQ0EsSUFBSSxPQUFPLE1BQVg7QUFDQSxJQUFJLE1BQU0sS0FBVjtBQUNBLElBQUksT0FBTyxNQUFYO0FBQ0EsSUFBSSxPQUFPLE1BQVg7QUFDQSxJQUFJLFNBQVMsUUFBYjtBQUNBLElBQUksU0FBUyxRQUFiO0FBQ0EsSUFBSSxpQkFBaUIsZ0JBQXJCO0FBQ0EsSUFBSSxZQUFZLFdBQWhCO0FBQ0EsSUFBSSxRQUFRLE9BQVo7O0FBRUEsSUFBSSxxQkFBcUIsU0FBUyxrQkFBVCxDQUE0QixVQUE1QixFQUF3QyxTQUF4QyxFQUFtRDtBQUMxRSxTQUFPLGFBQWEsbUNBQWIsR0FBbUQsU0FBbkQsR0FBK0QsMkJBQXRFO0FBQ0QsQ0FGRDs7QUFJQSxJQUFJLFNBQVMsU0FBUyxNQUFULENBQWdCLElBQWhCLEVBQXNCLE9BQXRCLEVBQStCO0FBQzFDLE1BQUksSUFBSjs7QUFFQSxTQUFPLE9BQU8sRUFBUCxFQUFXLGdCQUFnQixJQUFoQixFQUFzQixFQUF0QixFQUEwQixJQUExQixDQUFYLEVBQTRDLGdCQUFnQixJQUFoQixFQUFzQixJQUF0QixFQUE0QixPQUE1QixDQUE1QyxFQUFrRixJQUF6RjtBQUNELENBSkQ7O0FBTUEsU0FBUyxJQUFULEdBQWdCO0FBQ2QsTUFBSSxtQkFBbUIsVUFBVSxNQUFWLEdBQW1CLENBQW5CLElBQXdCLFVBQVUsQ0FBVixNQUFpQixTQUF6QyxHQUFxRCxVQUFVLENBQVYsQ0FBckQsR0FBb0UsR0FBM0Y7O0FBRUEsTUFBSSxVQUFVLE1BQWQsRUFBc0I7QUFDcEIsS0FBQyxHQUFHLE9BQU8sS0FBWCxFQUFrQixVQUFVLENBQVYsQ0FBbEIsRUFBZ0MsT0FBTyxFQUFQLENBQVUsUUFBMUMsRUFBb0QsdURBQXBEO0FBQ0Q7QUFDRCxNQUFJLE9BQU8sRUFBUCxDQUFVLE9BQVYsQ0FBa0IsZ0JBQWxCLENBQUosRUFBeUM7QUFDdkMsV0FBTyxPQUFPLElBQVAsRUFBYSxFQUFFLFNBQVMsZ0JBQVgsRUFBYixDQUFQO0FBQ0Q7QUFDRCxNQUFJLE9BQU8sRUFBUCxDQUFVLE9BQVYsQ0FBa0IsZ0JBQWxCLENBQUosRUFBeUM7QUFDdkMsV0FBTyxPQUFPLElBQVAsRUFBYSxFQUFFLFNBQVMsZ0JBQVgsRUFBYixDQUFQO0FBQ0Q7QUFDRCxRQUFNLElBQUksS0FBSixDQUFVLHNDQUFzQyxPQUFPLGdCQUFQLENBQXRDLEdBQWlFLDBDQUEzRSxDQUFOO0FBQ0Q7O0FBRUQsS0FBSyxLQUFMLEdBQWEsWUFBWTtBQUN2QixNQUFJLE1BQU0sS0FBSyxLQUFMLENBQVcsU0FBWCxFQUFzQixTQUF0QixDQUFWO0FBQ0EsTUFBSSxJQUFKLEVBQVUsS0FBVixHQUFrQixJQUFsQjtBQUNBLFNBQU8sR0FBUDtBQUNELENBSkQ7O0FBTUEsSUFBSSxRQUFRLFFBQVEsS0FBUixHQUFnQixDQUFDLEdBQUcsT0FBTyxTQUFYLEVBQXNCLEtBQUssS0FBM0IsRUFBa0MsbUJBQW1CLE9BQW5CLEVBQTRCLFlBQTVCLENBQWxDLENBQTVCOztBQUVBLFNBQVMsR0FBVCxDQUFhLE9BQWIsRUFBc0IsTUFBdEIsRUFBOEI7QUFDNUIsTUFBSSxVQUFVLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDeEIsS0FBQyxHQUFHLE9BQU8sS0FBWCxFQUFrQixPQUFsQixFQUEyQixPQUFPLEVBQVAsQ0FBVSxRQUFyQyxFQUErQyxxREFBL0M7QUFDQSxLQUFDLEdBQUcsT0FBTyxLQUFYLEVBQWtCLE9BQWxCLEVBQTJCLE9BQU8sRUFBUCxDQUFVLE9BQXJDLEVBQThDLG9DQUFvQyxPQUFwQyxHQUE4Qyx5QkFBNUY7QUFDQSxLQUFDLEdBQUcsT0FBTyxLQUFYLEVBQWtCLE1BQWxCLEVBQTBCLE9BQU8sRUFBUCxDQUFVLFFBQXBDLEVBQThDLG9EQUE5QztBQUNELEdBSkQsTUFJTztBQUNMLEtBQUMsR0FBRyxPQUFPLEtBQVgsRUFBa0IsT0FBbEIsRUFBMkIsT0FBTyxFQUFQLENBQVUsUUFBckMsRUFBK0MsMkNBQS9DO0FBQ0EsYUFBUyxPQUFUO0FBQ0EsY0FBVSxJQUFWO0FBQ0Q7QUFDRCxTQUFPLE9BQU8sR0FBUCxFQUFZLEVBQUUsU0FBUyxPQUFYLEVBQW9CLFFBQVEsTUFBNUIsRUFBWixDQUFQO0FBQ0Q7O0FBRUQsSUFBSSxPQUFKLEdBQWMsWUFBWTtBQUN4QixNQUFJLE1BQU0sSUFBSSxLQUFKLENBQVUsU0FBVixFQUFxQixTQUFyQixDQUFWO0FBQ0EsTUFBSSxHQUFKLEVBQVMsT0FBVCxHQUFtQixJQUFuQjtBQUNBLFNBQU8sR0FBUDtBQUNELENBSkQ7O0FBTUEsSUFBSSxJQUFKLEdBQVcsQ0FBQyxHQUFHLE9BQU8sU0FBWCxFQUFzQixJQUFJLE9BQTFCLEVBQW1DLG1CQUFtQixVQUFuQixFQUErQixhQUEvQixDQUFuQyxDQUFYOztBQUVBLFNBQVMsSUFBVCxDQUFjLE9BQWQsRUFBdUI7QUFDckIsU0FBTyxPQUFPLElBQVAsRUFBYSxPQUFiLENBQVA7QUFDRDs7QUFFRCxTQUFTLGFBQVQsQ0FBdUIsSUFBdkIsRUFBNkIsRUFBN0IsRUFBaUMsSUFBakMsRUFBdUM7QUFDckMsR0FBQyxHQUFHLE9BQU8sS0FBWCxFQUFrQixFQUFsQixFQUFzQixPQUFPLEVBQVAsQ0FBVSxRQUFoQyxFQUEwQyxPQUFPLDRCQUFqRDs7QUFFQSxNQUFJLFVBQVUsSUFBZDtBQUNBLE1BQUksT0FBTyxFQUFQLENBQVUsS0FBVixDQUFnQixFQUFoQixDQUFKLEVBQXlCO0FBQ3ZCLFFBQUksTUFBTSxFQUFWOztBQUVBLFFBQUksT0FBTyxlQUFlLEdBQWYsRUFBb0IsQ0FBcEIsQ0FBWDs7QUFFQSxjQUFVLEtBQUssQ0FBTCxDQUFWO0FBQ0EsU0FBSyxLQUFLLENBQUwsQ0FBTDtBQUNELEdBUEQsTUFPTyxJQUFJLEdBQUcsRUFBUCxFQUFXO0FBQ2hCLFFBQUksT0FBTyxFQUFYO0FBQ0EsY0FBVSxLQUFLLE9BQWY7QUFDQSxTQUFLLEtBQUssRUFBVjtBQUNEO0FBQ0QsR0FBQyxHQUFHLE9BQU8sS0FBWCxFQUFrQixFQUFsQixFQUFzQixPQUFPLEVBQVAsQ0FBVSxJQUFoQyxFQUFzQyxPQUFPLGFBQVAsR0FBdUIsRUFBdkIsR0FBNEIsb0JBQWxFOztBQUVBLFNBQU8sRUFBRSxTQUFTLE9BQVgsRUFBb0IsSUFBSSxFQUF4QixFQUE0QixNQUFNLElBQWxDLEVBQVA7QUFDRDs7QUFFRCxTQUFTLElBQVQsQ0FBYyxFQUFkLEVBQWtCO0FBQ2hCLE9BQUssSUFBSSxPQUFPLFVBQVUsTUFBckIsRUFBNkIsT0FBTyxNQUFNLE9BQU8sQ0FBUCxHQUFXLE9BQU8sQ0FBbEIsR0FBc0IsQ0FBNUIsQ0FBcEMsRUFBb0UsT0FBTyxDQUFoRixFQUFtRixPQUFPLElBQTFGLEVBQWdHLE1BQWhHLEVBQXdHO0FBQ3RHLFNBQUssT0FBTyxDQUFaLElBQWlCLFVBQVUsSUFBVixDQUFqQjtBQUNEOztBQUVELFNBQU8sT0FBTyxJQUFQLEVBQWEsY0FBYyxNQUFkLEVBQXNCLEVBQXRCLEVBQTBCLElBQTFCLENBQWIsQ0FBUDtBQUNEOztBQUVELFNBQVMsS0FBVCxDQUFlLE9BQWYsRUFBd0IsRUFBeEIsRUFBNEI7QUFDMUIsTUFBSSxPQUFPLFVBQVUsTUFBVixHQUFtQixDQUFuQixJQUF3QixVQUFVLENBQVYsTUFBaUIsU0FBekMsR0FBcUQsVUFBVSxDQUFWLENBQXJELEdBQW9FLEVBQS9FOztBQUVBLFNBQU8sT0FBTyxJQUFQLEVBQWEsY0FBYyxPQUFkLEVBQXVCLEVBQUUsU0FBUyxPQUFYLEVBQW9CLElBQUksRUFBeEIsRUFBdkIsRUFBcUQsSUFBckQsQ0FBYixDQUFQO0FBQ0Q7O0FBRUQsU0FBUyxHQUFULENBQWEsRUFBYixFQUFpQjtBQUNmLE9BQUssSUFBSSxRQUFRLFVBQVUsTUFBdEIsRUFBOEIsT0FBTyxNQUFNLFFBQVEsQ0FBUixHQUFZLFFBQVEsQ0FBcEIsR0FBd0IsQ0FBOUIsQ0FBckMsRUFBdUUsUUFBUSxDQUFwRixFQUF1RixRQUFRLEtBQS9GLEVBQXNHLE9BQXRHLEVBQStHO0FBQzdHLFNBQUssUUFBUSxDQUFiLElBQWtCLFVBQVUsS0FBVixDQUFsQjtBQUNEOztBQUVELFNBQU8sT0FBTyxHQUFQLEVBQVksY0FBYyxLQUFkLEVBQXFCLEVBQXJCLEVBQXlCLElBQXpCLENBQVosQ0FBUDtBQUNEOztBQUVELFNBQVMsSUFBVCxDQUFjLEVBQWQsRUFBa0I7QUFDaEIsT0FBSyxJQUFJLFFBQVEsVUFBVSxNQUF0QixFQUE4QixPQUFPLE1BQU0sUUFBUSxDQUFSLEdBQVksUUFBUSxDQUFwQixHQUF3QixDQUE5QixDQUFyQyxFQUF1RSxRQUFRLENBQXBGLEVBQXVGLFFBQVEsS0FBL0YsRUFBc0csT0FBdEcsRUFBK0c7QUFDN0csU0FBSyxRQUFRLENBQWIsSUFBa0IsVUFBVSxLQUFWLENBQWxCO0FBQ0Q7O0FBRUQsU0FBTyxPQUFPLElBQVAsRUFBYSxjQUFjLE1BQWQsRUFBc0IsRUFBdEIsRUFBMEIsSUFBMUIsQ0FBYixDQUFQO0FBQ0Q7O0FBRUQsU0FBUyxLQUFULENBQWUsRUFBZixFQUFtQjtBQUNqQixPQUFLLElBQUksUUFBUSxVQUFVLE1BQXRCLEVBQThCLE9BQU8sTUFBTSxRQUFRLENBQVIsR0FBWSxRQUFRLENBQXBCLEdBQXdCLENBQTlCLENBQXJDLEVBQXVFLFFBQVEsQ0FBcEYsRUFBdUYsUUFBUSxLQUEvRixFQUFzRyxPQUF0RyxFQUErRztBQUM3RyxTQUFLLFFBQVEsQ0FBYixJQUFrQixVQUFVLEtBQVYsQ0FBbEI7QUFDRDs7QUFFRCxNQUFJLE1BQU0sS0FBSyxLQUFMLENBQVcsU0FBWCxFQUFzQixDQUFDLEVBQUQsRUFBSyxNQUFMLENBQVksSUFBWixDQUF0QixDQUFWO0FBQ0EsTUFBSSxJQUFKLEVBQVUsUUFBVixHQUFxQixJQUFyQjtBQUNBLFNBQU8sR0FBUDtBQUNEOztBQUVELElBQUksZUFBZSxTQUFTLFlBQVQsQ0FBc0IsSUFBdEIsRUFBNEI7QUFDN0MsU0FBTyxLQUFLLE9BQU8sSUFBWixDQUFQO0FBQ0QsQ0FGRDs7QUFJQSxTQUFTLElBQVQsQ0FBYyxJQUFkLEVBQW9CO0FBQ2xCLE1BQUksT0FBTyxFQUFQLENBQVUsS0FBVixDQUFnQixJQUFoQixDQUFKLEVBQTJCO0FBQ3pCLFdBQU8sS0FBSyxHQUFMLENBQVMsSUFBVCxDQUFQO0FBQ0Q7QUFDRCxHQUFDLEdBQUcsT0FBTyxLQUFYLEVBQWtCLElBQWxCLEVBQXdCLE9BQU8sRUFBUCxDQUFVLFFBQWxDLEVBQTRDLHdDQUE1QztBQUNBLE1BQUksQ0FBQyxhQUFhLElBQWIsQ0FBTCxFQUF5QjtBQUN2QixVQUFNLElBQUksS0FBSixDQUFVLDBCQUEwQixJQUExQixHQUFpQyxvSUFBM0MsQ0FBTjtBQUNEOztBQUVELFNBQU8sT0FBTyxJQUFQLEVBQWEsSUFBYixDQUFQO0FBQ0Q7O0FBRUQsU0FBUyxNQUFULENBQWdCLElBQWhCLEVBQXNCO0FBQ3BCLEdBQUMsR0FBRyxPQUFPLEtBQVgsRUFBa0IsSUFBbEIsRUFBd0IsT0FBTyxFQUFQLENBQVUsUUFBbEMsRUFBNEMsMENBQTVDO0FBQ0EsTUFBSSxDQUFDLGFBQWEsSUFBYixDQUFMLEVBQXlCO0FBQ3ZCLFVBQU0sSUFBSSxLQUFKLENBQVUsNEJBQTRCLElBQTVCLEdBQW1DLG9JQUE3QyxDQUFOO0FBQ0Q7O0FBRUQsU0FBTyxPQUFPLE1BQVAsRUFBZSxJQUFmLENBQVA7QUFDRDs7QUFFRCxTQUFTLE1BQVQsQ0FBZ0IsUUFBaEIsRUFBMEI7QUFDeEIsT0FBSyxJQUFJLFFBQVEsVUFBVSxNQUF0QixFQUE4QixPQUFPLE1BQU0sUUFBUSxDQUFSLEdBQVksUUFBUSxDQUFwQixHQUF3QixDQUE5QixDQUFyQyxFQUF1RSxRQUFRLENBQXBGLEVBQXVGLFFBQVEsS0FBL0YsRUFBc0csT0FBdEcsRUFBK0c7QUFDN0csU0FBSyxRQUFRLENBQWIsSUFBa0IsVUFBVSxLQUFWLENBQWxCO0FBQ0Q7O0FBRUQsTUFBSSxVQUFVLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUIsZUFBVyxPQUFPLEtBQWxCO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsS0FBQyxHQUFHLE9BQU8sS0FBWCxFQUFrQixRQUFsQixFQUE0QixPQUFPLEVBQVAsQ0FBVSxRQUF0QyxFQUFnRCx3REFBaEQ7QUFDQSxLQUFDLEdBQUcsT0FBTyxLQUFYLEVBQWtCLFFBQWxCLEVBQTRCLE9BQU8sRUFBUCxDQUFVLElBQXRDLEVBQTRDLHNDQUFzQyxRQUF0QyxHQUFpRCxvQkFBN0Y7QUFDRDtBQUNELFNBQU8sT0FBTyxNQUFQLEVBQWUsRUFBRSxVQUFVLFFBQVosRUFBc0IsTUFBTSxJQUE1QixFQUFmLENBQVA7QUFDRDs7QUFFRDs7O0FBR0EsU0FBUyxhQUFULENBQXVCLE9BQXZCLEVBQWdDLE1BQWhDLEVBQXdDO0FBQ3RDLEdBQUMsR0FBRyxPQUFPLEtBQVgsRUFBa0IsT0FBbEIsRUFBMkIsT0FBTyxFQUFQLENBQVUsUUFBckMsRUFBK0MsMkRBQS9DO0FBQ0EsTUFBSSxVQUFVLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDeEIsS0FBQyxHQUFHLE9BQU8sS0FBWCxFQUFrQixNQUFsQixFQUEwQixPQUFPLEVBQVAsQ0FBVSxRQUFwQyxFQUE4Qyw4REFBOUM7QUFDQSxLQUFDLEdBQUcsT0FBTyxLQUFYLEVBQWtCLE1BQWxCLEVBQTBCLE9BQU8sRUFBUCxDQUFVLE1BQXBDLEVBQTRDLDhDQUE4QyxNQUE5QyxHQUF1RCx3QkFBbkc7QUFDRDtBQUNELFNBQU8sT0FBTyxjQUFQLEVBQXVCLEVBQUUsU0FBUyxPQUFYLEVBQW9CLFFBQVEsTUFBNUIsRUFBdkIsQ0FBUDtBQUNEOztBQUVELFNBQVMsU0FBVCxHQUFxQjtBQUNuQixTQUFPLE9BQU8sU0FBUCxFQUFrQixFQUFsQixDQUFQO0FBQ0Q7O0FBRUQsU0FBUyxLQUFULENBQWUsT0FBZixFQUF3QjtBQUN0QixHQUFDLEdBQUcsT0FBTyxLQUFYLEVBQWtCLE9BQWxCLEVBQTJCLE9BQU8sRUFBUCxDQUFVLE9BQXJDLEVBQThDLDhCQUE4QixPQUE5QixHQUF3Qyx1QkFBdEY7QUFDQSxTQUFPLE9BQU8sS0FBUCxFQUFjLE9BQWQsQ0FBUDtBQUNEOztBQUVELFNBQVMsU0FBVCxDQUFtQixnQkFBbkIsRUFBcUMsTUFBckMsRUFBNkM7QUFDM0MsT0FBSyxJQUFJLFFBQVEsVUFBVSxNQUF0QixFQUE4QixPQUFPLE1BQU0sUUFBUSxDQUFSLEdBQVksUUFBUSxDQUFwQixHQUF3QixDQUE5QixDQUFyQyxFQUF1RSxRQUFRLENBQXBGLEVBQXVGLFFBQVEsS0FBL0YsRUFBc0csT0FBdEcsRUFBK0c7QUFDN0csU0FBSyxRQUFRLENBQWIsSUFBa0IsVUFBVSxLQUFWLENBQWxCO0FBQ0Q7O0FBRUQsU0FBTyxLQUFLLEtBQUwsQ0FBVyxTQUFYLEVBQXNCLENBQUMsYUFBYSxlQUFkLEVBQStCLGdCQUEvQixFQUFpRCxNQUFqRCxFQUF5RCxNQUF6RCxDQUFnRSxJQUFoRSxDQUF0QixDQUFQO0FBQ0Q7O0FBRUQsU0FBUyxVQUFULENBQW9CLGdCQUFwQixFQUFzQyxNQUF0QyxFQUE4QztBQUM1QyxPQUFLLElBQUksUUFBUSxVQUFVLE1BQXRCLEVBQThCLE9BQU8sTUFBTSxRQUFRLENBQVIsR0FBWSxRQUFRLENBQXBCLEdBQXdCLENBQTlCLENBQXJDLEVBQXVFLFFBQVEsQ0FBcEYsRUFBdUYsUUFBUSxLQUEvRixFQUFzRyxPQUF0RyxFQUErRztBQUM3RyxTQUFLLFFBQVEsQ0FBYixJQUFrQixVQUFVLEtBQVYsQ0FBbEI7QUFDRDs7QUFFRCxTQUFPLEtBQUssS0FBTCxDQUFXLFNBQVgsRUFBc0IsQ0FBQyxhQUFhLGdCQUFkLEVBQWdDLGdCQUFoQyxFQUFrRCxNQUFsRCxFQUEwRCxNQUExRCxDQUFpRSxJQUFqRSxDQUF0QixDQUFQO0FBQ0Q7O0FBRUQsU0FBUyxRQUFULENBQWtCLEVBQWxCLEVBQXNCLE9BQXRCLEVBQStCLE1BQS9CLEVBQXVDO0FBQ3JDLE9BQUssSUFBSSxRQUFRLFVBQVUsTUFBdEIsRUFBOEIsT0FBTyxNQUFNLFFBQVEsQ0FBUixHQUFZLFFBQVEsQ0FBcEIsR0FBd0IsQ0FBOUIsQ0FBckMsRUFBdUUsUUFBUSxDQUFwRixFQUF1RixRQUFRLEtBQS9GLEVBQXNHLE9BQXRHLEVBQStHO0FBQzdHLFNBQUssUUFBUSxDQUFiLElBQWtCLFVBQVUsS0FBVixDQUFsQjtBQUNEOztBQUVELFNBQU8sS0FBSyxLQUFMLENBQVcsU0FBWCxFQUFzQixDQUFDLGFBQWEsY0FBZCxFQUE4QixFQUE5QixFQUFrQyxPQUFsQyxFQUEyQyxNQUEzQyxFQUFtRCxNQUFuRCxDQUEwRCxJQUExRCxDQUF0QixDQUFQO0FBQ0Q7O0FBRUQsSUFBSSxxQkFBcUIsU0FBUyxrQkFBVCxDQUE0QixJQUE1QixFQUFrQztBQUN6RCxTQUFPLFVBQVUsTUFBVixFQUFrQjtBQUN2QixXQUFPLFVBQVUsT0FBTyxFQUFQLENBQVYsSUFBd0IsT0FBTyxJQUFQLENBQS9CO0FBQ0QsR0FGRDtBQUdELENBSkQ7O0FBTUEsSUFBSSxXQUFXLFFBQVEsUUFBUixHQUFtQjtBQUNoQyxRQUFNLG1CQUFtQixJQUFuQixDQUQwQjtBQUVoQyxPQUFLLG1CQUFtQixHQUFuQixDQUYyQjtBQUdoQyxRQUFNLG1CQUFtQixJQUFuQixDQUgwQjtBQUloQyxRQUFNLG1CQUFtQixJQUFuQixDQUowQjtBQUtoQyxPQUFLLG1CQUFtQixHQUFuQixDQUwyQjtBQU1oQyxRQUFNLG1CQUFtQixJQUFuQixDQU4wQjtBQU9oQyxRQUFNLG1CQUFtQixJQUFuQixDQVAwQjtBQVFoQyxVQUFRLG1CQUFtQixNQUFuQixDQVJ3QjtBQVNoQyxVQUFRLG1CQUFtQixNQUFuQixDQVR3QjtBQVVoQyxpQkFBZSxtQkFBbUIsY0FBbkIsQ0FWaUI7QUFXaEMsYUFBVyxtQkFBbUIsU0FBbkIsQ0FYcUI7QUFZaEMsU0FBTyxtQkFBbUIsS0FBbkI7QUFaeUIsQ0FBbEM7OztBQ2hRQTs7QUFFQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0MsU0FBTztBQURvQyxDQUE3QztBQUdBLFFBQVEsUUFBUixHQUFtQixRQUFRLFVBQVIsR0FBcUIsUUFBUSxTQUFSLEdBQW9CLFNBQTVEOztBQUVBLElBQUksaUJBQWlCLFlBQVk7QUFBRSxXQUFTLGFBQVQsQ0FBdUIsR0FBdkIsRUFBNEIsQ0FBNUIsRUFBK0I7QUFBRSxRQUFJLE9BQU8sRUFBWCxDQUFlLElBQUksS0FBSyxJQUFULENBQWUsSUFBSSxLQUFLLEtBQVQsQ0FBZ0IsSUFBSSxLQUFLLFNBQVQsQ0FBb0IsSUFBSTtBQUFFLFdBQUssSUFBSSxLQUFLLElBQUksT0FBTyxRQUFYLEdBQVQsRUFBaUMsRUFBdEMsRUFBMEMsRUFBRSxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUgsRUFBTixFQUFpQixJQUF4QixDQUExQyxFQUF5RSxLQUFLLElBQTlFLEVBQW9GO0FBQUUsYUFBSyxJQUFMLENBQVUsR0FBRyxLQUFiLEVBQXFCLElBQUksS0FBSyxLQUFLLE1BQUwsS0FBZ0IsQ0FBekIsRUFBNEI7QUFBUTtBQUFFLEtBQXZKLENBQXdKLE9BQU8sR0FBUCxFQUFZO0FBQUUsV0FBSyxJQUFMLENBQVcsS0FBSyxHQUFMO0FBQVcsS0FBNUwsU0FBcU07QUFBRSxVQUFJO0FBQUUsWUFBSSxDQUFDLEVBQUQsSUFBTyxHQUFHLFFBQUgsQ0FBWCxFQUF5QixHQUFHLFFBQUg7QUFBaUIsT0FBaEQsU0FBeUQ7QUFBRSxZQUFJLEVBQUosRUFBUSxNQUFNLEVBQU47QUFBVztBQUFFLEtBQUMsT0FBTyxJQUFQO0FBQWMsR0FBQyxPQUFPLFVBQVUsR0FBVixFQUFlLENBQWYsRUFBa0I7QUFBRSxRQUFJLE1BQU0sT0FBTixDQUFjLEdBQWQsQ0FBSixFQUF3QjtBQUFFLGFBQU8sR0FBUDtBQUFhLEtBQXZDLE1BQTZDLElBQUksT0FBTyxRQUFQLElBQW1CLE9BQU8sR0FBUCxDQUF2QixFQUFvQztBQUFFLGFBQU8sY0FBYyxHQUFkLEVBQW1CLENBQW5CLENBQVA7QUFBK0IsS0FBckUsTUFBMkU7QUFBRSxZQUFNLElBQUksU0FBSixDQUFjLHNEQUFkLENBQU47QUFBOEU7QUFBRSxHQUFyTztBQUF3TyxDQUFob0IsRUFBckI7O0FBRUEsUUFBUSxlQUFSLEdBQTBCLGVBQTFCO0FBQ0EsUUFBUSxnQkFBUixHQUEyQixnQkFBM0I7QUFDQSxRQUFRLGNBQVIsR0FBeUIsY0FBekI7O0FBRUEsSUFBSSxXQUFXLFFBQVEsV0FBUixDQUFmOztBQUVBLElBQUksU0FBUyxRQUFRLFNBQVIsQ0FBYjs7QUFFQSxJQUFJLE1BQU0sUUFBUSxNQUFSLENBQVY7O0FBRUEsSUFBSSxXQUFXLFFBQVEsV0FBUixDQUFmOztBQUVBLElBQUksT0FBTyxFQUFFLE1BQU0sSUFBUixFQUFjLE9BQU8sU0FBckIsRUFBWDtBQUNBLElBQUksT0FBTyxFQUFYOztBQUVBLFNBQVMsV0FBVCxDQUFxQixHQUFyQixFQUEwQixFQUExQixFQUE4QjtBQUM1QixNQUFJLE9BQU8sVUFBVSxNQUFWLEdBQW1CLENBQW5CLElBQXdCLFVBQVUsQ0FBVixNQUFpQixTQUF6QyxHQUFxRCxVQUFVLENBQVYsQ0FBckQsR0FBb0UsVUFBL0U7O0FBRUEsTUFBSSxjQUFjLEtBQUssQ0FBdkI7QUFBQSxNQUNJLFFBQVEsRUFEWjs7QUFHQSxXQUFTLElBQVQsQ0FBYyxHQUFkLEVBQW1CLEtBQW5CLEVBQTBCO0FBQ3hCLFFBQUksVUFBVSxJQUFkLEVBQW9CO0FBQ2xCLGFBQU8sSUFBUDtBQUNEOztBQUVELFFBQUksS0FBSixFQUFXO0FBQ1QsY0FBUSxJQUFSO0FBQ0EsWUFBTSxLQUFOO0FBQ0QsS0FIRCxNQUdPO0FBQ0wscUJBQWUsWUFBWSxHQUFaLENBQWY7O0FBRUEsVUFBSSxhQUFhLElBQUksS0FBSixHQUFqQjtBQUFBLFVBQ0ksY0FBYyxlQUFlLFVBQWYsRUFBMkIsQ0FBM0IsQ0FEbEI7QUFBQSxVQUVJLElBQUksWUFBWSxDQUFaLENBRlI7QUFBQSxVQUdJLFNBQVMsWUFBWSxDQUFaLENBSGI7QUFBQSxVQUlJLGVBQWUsWUFBWSxDQUFaLENBSm5COztBQU1BLGNBQVEsQ0FBUjtBQUNBLG9CQUFjLFlBQWQ7QUFDQSxhQUFPLFVBQVUsSUFBVixHQUFpQixJQUFqQixHQUF3QixNQUEvQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBTyxDQUFDLEdBQUcsT0FBTyxZQUFYLEVBQXlCLElBQXpCLEVBQStCLFVBQVUsS0FBVixFQUFpQjtBQUNyRCxXQUFPLEtBQUssSUFBTCxFQUFXLEtBQVgsQ0FBUDtBQUNELEdBRk0sRUFFSixJQUZJLEVBRUUsSUFGRixDQUFQO0FBR0Q7O0FBRUQsU0FBUyxRQUFULENBQWtCLGdCQUFsQixFQUFvQztBQUNsQyxNQUFJLE9BQU8sRUFBUCxDQUFVLE9BQVYsQ0FBa0IsZ0JBQWxCLENBQUosRUFBeUM7QUFDdkMsV0FBTyxTQUFQO0FBQ0QsR0FGRCxNQUVPLElBQUksTUFBTSxPQUFOLENBQWMsZ0JBQWQsQ0FBSixFQUFxQztBQUMxQyxXQUFPLE9BQU8saUJBQWlCLEdBQWpCLENBQXFCLFVBQVUsS0FBVixFQUFpQjtBQUNsRCxhQUFPLE9BQU8sS0FBUCxDQUFQO0FBQ0QsS0FGYSxDQUFQLENBQVA7QUFHRCxHQUpNLE1BSUE7QUFDTCxXQUFPLE9BQU8sZ0JBQVAsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBUyxlQUFULENBQXlCLGdCQUF6QixFQUEyQyxNQUEzQyxFQUFtRDtBQUNqRCxPQUFLLElBQUksT0FBTyxVQUFVLE1BQXJCLEVBQTZCLE9BQU8sTUFBTSxPQUFPLENBQVAsR0FBVyxPQUFPLENBQWxCLEdBQXNCLENBQTVCLENBQXBDLEVBQW9FLE9BQU8sQ0FBaEYsRUFBbUYsT0FBTyxJQUExRixFQUFnRyxNQUFoRyxFQUF3RztBQUN0RyxTQUFLLE9BQU8sQ0FBWixJQUFpQixVQUFVLElBQVYsQ0FBakI7QUFDRDs7QUFFRCxNQUFJLFFBQVEsRUFBRSxNQUFNLEtBQVIsRUFBZSxPQUFPLENBQUMsR0FBRyxJQUFJLElBQVIsRUFBYyxnQkFBZCxDQUF0QixFQUFaO0FBQ0EsTUFBSSxRQUFRLFNBQVMsS0FBVCxDQUFlLEVBQWYsRUFBbUI7QUFDN0IsV0FBTyxFQUFFLE1BQU0sS0FBUixFQUFlLE9BQU8sSUFBSSxJQUFKLENBQVMsS0FBVCxDQUFlLFNBQWYsRUFBMEIsQ0FBQyxNQUFELEVBQVMsTUFBVCxDQUFnQixJQUFoQixFQUFzQixDQUFDLEVBQUQsQ0FBdEIsQ0FBMUIsQ0FBdEIsRUFBUDtBQUNELEdBRkQ7O0FBSUEsTUFBSSxTQUFTLEtBQUssQ0FBbEI7QUFBQSxNQUNJLFlBQVksU0FBUyxTQUFULENBQW1CLEVBQW5CLEVBQXVCO0FBQ3JDLFdBQU8sU0FBUyxFQUFoQjtBQUNELEdBSEQ7O0FBS0EsU0FBTyxZQUFZO0FBQ2pCLFFBQUksU0FBUyxFQUFULEdBQWM7QUFDaEIsYUFBTyxDQUFDLElBQUQsRUFBTyxLQUFQLEVBQWMsU0FBZCxDQUFQO0FBQ0QsS0FIZ0I7QUFJakIsUUFBSSxTQUFTLEVBQVQsR0FBYztBQUNoQixhQUFPLFdBQVcsU0FBUyxHQUFwQixHQUEwQixDQUFDLElBQUQsQ0FBMUIsR0FBbUMsQ0FBQyxJQUFELEVBQU8sTUFBTSxNQUFOLENBQVAsQ0FBMUM7QUFDRDtBQU5nQixHQUFaLEVBT0osSUFQSSxFQU9FLGVBQWUsU0FBUyxnQkFBVCxDQUFmLEdBQTRDLElBQTVDLEdBQW1ELE9BQU8sSUFBMUQsR0FBaUUsR0FQbkUsQ0FBUDtBQVFEOztBQUVELFNBQVMsZ0JBQVQsQ0FBMEIsZ0JBQTFCLEVBQTRDLE1BQTVDLEVBQW9EO0FBQ2xELE9BQUssSUFBSSxRQUFRLFVBQVUsTUFBdEIsRUFBOEIsT0FBTyxNQUFNLFFBQVEsQ0FBUixHQUFZLFFBQVEsQ0FBcEIsR0FBd0IsQ0FBOUIsQ0FBckMsRUFBdUUsUUFBUSxDQUFwRixFQUF1RixRQUFRLEtBQS9GLEVBQXNHLE9BQXRHLEVBQStHO0FBQzdHLFNBQUssUUFBUSxDQUFiLElBQWtCLFVBQVUsS0FBVixDQUFsQjtBQUNEOztBQUVELE1BQUksUUFBUSxFQUFFLE1BQU0sS0FBUixFQUFlLE9BQU8sQ0FBQyxHQUFHLElBQUksSUFBUixFQUFjLGdCQUFkLENBQXRCLEVBQVo7QUFDQSxNQUFJLFFBQVEsU0FBUyxLQUFULENBQWUsRUFBZixFQUFtQjtBQUM3QixXQUFPLEVBQUUsTUFBTSxLQUFSLEVBQWUsT0FBTyxJQUFJLElBQUosQ0FBUyxLQUFULENBQWUsU0FBZixFQUEwQixDQUFDLE1BQUQsRUFBUyxNQUFULENBQWdCLElBQWhCLEVBQXNCLENBQUMsRUFBRCxDQUF0QixDQUExQixDQUF0QixFQUFQO0FBQ0QsR0FGRDtBQUdBLE1BQUksVUFBVSxTQUFTLE9BQVQsQ0FBaUIsSUFBakIsRUFBdUI7QUFDbkMsV0FBTyxFQUFFLE1BQU0sS0FBUixFQUFlLE9BQU8sQ0FBQyxHQUFHLElBQUksTUFBUixFQUFnQixJQUFoQixDQUF0QixFQUFQO0FBQ0QsR0FGRDs7QUFJQSxNQUFJLE9BQU8sS0FBSyxDQUFoQjtBQUFBLE1BQ0ksU0FBUyxLQUFLLENBRGxCO0FBRUEsTUFBSSxVQUFVLFNBQVMsT0FBVCxDQUFpQixDQUFqQixFQUFvQjtBQUNoQyxXQUFPLE9BQU8sQ0FBZDtBQUNELEdBRkQ7QUFHQSxNQUFJLFlBQVksU0FBUyxTQUFULENBQW1CLEVBQW5CLEVBQXVCO0FBQ3JDLFdBQU8sU0FBUyxFQUFoQjtBQUNELEdBRkQ7O0FBSUEsU0FBTyxZQUFZO0FBQ2pCLFFBQUksU0FBUyxFQUFULEdBQWM7QUFDaEIsYUFBTyxDQUFDLElBQUQsRUFBTyxLQUFQLEVBQWMsU0FBZCxDQUFQO0FBQ0QsS0FIZ0I7QUFJakIsUUFBSSxTQUFTLEVBQVQsR0FBYztBQUNoQixhQUFPLFdBQVcsU0FBUyxHQUFwQixHQUEwQixDQUFDLElBQUQsQ0FBMUIsR0FBbUMsT0FBTyxDQUFDLElBQUQsRUFBTyxRQUFRLElBQVIsQ0FBUCxDQUFQLEdBQStCLENBQUMsSUFBRCxFQUFPLE1BQU0sTUFBTixDQUFQLEVBQXNCLE9BQXRCLENBQXpFO0FBQ0QsS0FOZ0I7QUFPakIsUUFBSSxTQUFTLEVBQVQsR0FBYztBQUNoQixhQUFPLENBQUMsSUFBRCxFQUFPLE1BQU0sTUFBTixDQUFQLEVBQXNCLE9BQXRCLENBQVA7QUFDRDtBQVRnQixHQUFaLEVBVUosSUFWSSxFQVVFLGdCQUFnQixTQUFTLGdCQUFULENBQWhCLEdBQTZDLElBQTdDLEdBQW9ELE9BQU8sSUFBM0QsR0FBa0UsR0FWcEUsQ0FBUDtBQVdEOztBQUVELFNBQVMsY0FBVCxDQUF3QixXQUF4QixFQUFxQyxPQUFyQyxFQUE4QyxNQUE5QyxFQUFzRDtBQUNwRCxPQUFLLElBQUksUUFBUSxVQUFVLE1BQXRCLEVBQThCLE9BQU8sTUFBTSxRQUFRLENBQVIsR0FBWSxRQUFRLENBQXBCLEdBQXdCLENBQTlCLENBQXJDLEVBQXVFLFFBQVEsQ0FBcEYsRUFBdUYsUUFBUSxLQUEvRixFQUFzRyxPQUF0RyxFQUErRztBQUM3RyxTQUFLLFFBQVEsQ0FBYixJQUFrQixVQUFVLEtBQVYsQ0FBbEI7QUFDRDs7QUFFRCxNQUFJLFNBQVMsS0FBSyxDQUFsQjtBQUFBLE1BQ0ksVUFBVSxLQUFLLENBRG5COztBQUdBLE1BQUksaUJBQWlCLEVBQUUsTUFBTSxLQUFSLEVBQWUsT0FBTyxDQUFDLEdBQUcsSUFBSSxhQUFSLEVBQXVCLE9BQXZCLEVBQWdDLFNBQVMsT0FBVCxDQUFpQixPQUFqQixDQUF5QixDQUF6QixDQUFoQyxDQUF0QixFQUFyQjtBQUNBLE1BQUksUUFBUSxTQUFTLEtBQVQsR0FBaUI7QUFDM0IsV0FBTyxFQUFFLE1BQU0sS0FBUixFQUFlLE9BQU8sQ0FBQyxHQUFHLElBQUksSUFBUixFQUFjLE9BQWQsRUFBdUIsT0FBdkIsQ0FBdEIsRUFBUDtBQUNELEdBRkQ7QUFHQSxNQUFJLFFBQVEsU0FBUyxLQUFULENBQWUsRUFBZixFQUFtQjtBQUM3QixXQUFPLEVBQUUsTUFBTSxLQUFSLEVBQWUsT0FBTyxJQUFJLElBQUosQ0FBUyxLQUFULENBQWUsU0FBZixFQUEwQixDQUFDLE1BQUQsRUFBUyxNQUFULENBQWdCLElBQWhCLEVBQXNCLENBQUMsRUFBRCxDQUF0QixDQUExQixDQUF0QixFQUFQO0FBQ0QsR0FGRDtBQUdBLE1BQUksU0FBUyxFQUFFLE1BQU0sS0FBUixFQUFlLE9BQU8sQ0FBQyxHQUFHLElBQUksSUFBUixFQUFjLE9BQU8sS0FBckIsRUFBNEIsV0FBNUIsQ0FBdEIsRUFBYjs7QUFFQSxNQUFJLFlBQVksU0FBUyxTQUFULENBQW1CLEVBQW5CLEVBQXVCO0FBQ3JDLFdBQU8sU0FBUyxFQUFoQjtBQUNELEdBRkQ7QUFHQSxNQUFJLGFBQWEsU0FBUyxVQUFULENBQW9CLEVBQXBCLEVBQXdCO0FBQ3ZDLFdBQU8sVUFBVSxFQUFqQjtBQUNELEdBRkQ7O0FBSUEsU0FBTyxZQUFZO0FBQ2pCLFFBQUksU0FBUyxFQUFULEdBQWM7QUFDaEIsYUFBTyxDQUFDLElBQUQsRUFBTyxjQUFQLEVBQXVCLFVBQXZCLENBQVA7QUFDRCxLQUhnQjtBQUlqQixRQUFJLFNBQVMsRUFBVCxHQUFjO0FBQ2hCLGFBQU8sQ0FBQyxJQUFELEVBQU8sT0FBUCxFQUFnQixTQUFoQixDQUFQO0FBQ0QsS0FOZ0I7QUFPakIsUUFBSSxTQUFTLEVBQVQsR0FBYztBQUNoQixhQUFPLFdBQVcsU0FBUyxHQUFwQixHQUEwQixDQUFDLElBQUQsQ0FBMUIsR0FBbUMsQ0FBQyxJQUFELEVBQU8sTUFBTSxNQUFOLENBQVAsQ0FBMUM7QUFDRCxLQVRnQjtBQVVqQixRQUFJLFNBQVMsRUFBVCxHQUFjO0FBQ2hCLGFBQU8sQ0FBQyxJQUFELEVBQU8sTUFBUCxDQUFQO0FBQ0Q7QUFaZ0IsR0FBWixFQWFKLElBYkksRUFhRSxjQUFjLFNBQVMsT0FBVCxDQUFkLEdBQWtDLElBQWxDLEdBQXlDLE9BQU8sSUFBaEQsR0FBdUQsR0FiekQsQ0FBUDtBQWNEOztBQUVELElBQUkscUJBQXFCLFNBQVMsa0JBQVQsQ0FBNEIsVUFBNUIsRUFBd0M7QUFDL0QsU0FBTyxZQUFZLFVBQVosR0FBeUIsOERBQXpCLEdBQTBGLFVBQTFGLEdBQXVHLDRKQUF2RyxHQUFzUSxVQUF0USxHQUFtUiwyRUFBMVI7QUFDRCxDQUZEO0FBR0EsSUFBSSxZQUFZLFFBQVEsU0FBUixHQUFvQixDQUFDLEdBQUcsT0FBTyxTQUFYLEVBQXNCLGVBQXRCLEVBQXVDLG1CQUFtQixXQUFuQixDQUF2QyxDQUFwQztBQUNBLElBQUksYUFBYSxRQUFRLFVBQVIsR0FBcUIsQ0FBQyxHQUFHLE9BQU8sU0FBWCxFQUFzQixnQkFBdEIsRUFBd0MsbUJBQW1CLFlBQW5CLENBQXhDLENBQXRDO0FBQ0EsSUFBSSxXQUFXLFFBQVEsUUFBUixHQUFtQixDQUFDLEdBQUcsT0FBTyxTQUFYLEVBQXNCLGNBQXRCLEVBQXNDLG1CQUFtQixVQUFuQixDQUF0QyxDQUFsQzs7O0FDL0tBOztBQUVBLE9BQU8sY0FBUCxDQUFzQixPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQyxTQUFPO0FBRG9DLENBQTdDO0FBR0EsUUFBUSxJQUFSLEdBQWUsSUFBZjtBQUNBLFFBQVEsT0FBUixHQUFrQixPQUFsQjtBQUNBLFFBQVEsS0FBUixHQUFnQixLQUFoQjs7QUFFQSxJQUFJLFFBQVEsRUFBWjtBQUNBOzs7Ozs7O0FBT0EsSUFBSSxZQUFZLENBQWhCOztBQUVBOzs7OztBQUtBLFNBQVMsSUFBVCxDQUFjLElBQWQsRUFBb0I7QUFDbEIsTUFBSTtBQUNGO0FBQ0E7QUFDRCxHQUhELFNBR1U7QUFDUjtBQUNEO0FBQ0Y7O0FBRUQ7OztBQUdBLFNBQVMsSUFBVCxDQUFjLElBQWQsRUFBb0I7QUFDbEIsTUFBSSxDQUFDLFNBQUwsRUFBZ0I7QUFDZCxTQUFLLElBQUw7QUFDRCxHQUZELE1BRU87QUFDTCxVQUFNLElBQU4sQ0FBVyxJQUFYO0FBQ0Q7QUFDRjs7QUFFRDs7OztBQUlBLFNBQVMsT0FBVCxHQUFtQjtBQUNqQjtBQUNEOztBQUVEOzs7QUFHQSxTQUFTLEtBQVQsR0FBaUI7QUFDZjtBQUNBLE1BQUksQ0FBQyxTQUFELElBQWMsTUFBTSxNQUF4QixFQUFnQztBQUM5QixTQUFLLE1BQU0sS0FBTixFQUFMO0FBQ0Q7QUFDRjs7OztBQzVERDs7QUFFQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0MsU0FBTztBQURvQyxDQUE3Qzs7QUFJQSxJQUFJLFdBQVcsT0FBTyxNQUFQLElBQWlCLFVBQVUsTUFBVixFQUFrQjtBQUFFLE9BQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxVQUFVLE1BQTlCLEVBQXNDLEdBQXRDLEVBQTJDO0FBQUUsUUFBSSxTQUFTLFVBQVUsQ0FBVixDQUFiLENBQTJCLEtBQUssSUFBSSxHQUFULElBQWdCLE1BQWhCLEVBQXdCO0FBQUUsVUFBSSxPQUFPLFNBQVAsQ0FBaUIsY0FBakIsQ0FBZ0MsSUFBaEMsQ0FBcUMsTUFBckMsRUFBNkMsR0FBN0MsQ0FBSixFQUF1RDtBQUFFLGVBQU8sR0FBUCxJQUFjLE9BQU8sR0FBUCxDQUFkO0FBQTRCO0FBQUU7QUFBRSxHQUFDLE9BQU8sTUFBUDtBQUFnQixDQUFoUTs7QUFFQSxJQUFJLFVBQVUsT0FBTyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU8sT0FBTyxRQUFkLEtBQTJCLFFBQTNELEdBQXNFLFVBQVUsR0FBVixFQUFlO0FBQUUsU0FBTyxPQUFPLEdBQWQ7QUFBb0IsQ0FBM0csR0FBOEcsVUFBVSxHQUFWLEVBQWU7QUFBRSxTQUFPLE9BQU8sT0FBTyxNQUFQLEtBQWtCLFVBQXpCLElBQXVDLElBQUksV0FBSixLQUFvQixNQUEzRCxJQUFxRSxRQUFRLE9BQU8sU0FBcEYsR0FBZ0csUUFBaEcsR0FBMkcsT0FBTyxHQUF6SDtBQUErSCxDQUE1UTs7QUFFQSxRQUFRLEtBQVIsR0FBZ0IsS0FBaEI7QUFDQSxRQUFRLE1BQVIsR0FBaUIsTUFBakI7QUFDQSxRQUFRLE1BQVIsR0FBaUIsTUFBakI7QUFDQSxRQUFRLFFBQVIsR0FBbUIsUUFBbkI7QUFDQSxRQUFRLGVBQVIsR0FBMEIsZUFBMUI7QUFDQSxRQUFRLEtBQVIsR0FBZ0IsS0FBaEI7QUFDQSxRQUFRLGNBQVIsR0FBeUIsY0FBekI7QUFDQSxRQUFRLE9BQVIsR0FBa0IsT0FBbEI7QUFDQSxRQUFRLFlBQVIsR0FBdUIsWUFBdkI7QUFDQSxRQUFRLEdBQVIsR0FBYyxHQUFkO0FBQ0EsUUFBUSxTQUFSLEdBQW9CLFNBQXBCO0FBQ0EsUUFBUSxnQkFBUixHQUEyQixnQkFBM0I7O0FBRUEsU0FBUyxlQUFULENBQXlCLEdBQXpCLEVBQThCLEdBQTlCLEVBQW1DLEtBQW5DLEVBQTBDO0FBQUUsTUFBSSxPQUFPLEdBQVgsRUFBZ0I7QUFBRSxXQUFPLGNBQVAsQ0FBc0IsR0FBdEIsRUFBMkIsR0FBM0IsRUFBZ0MsRUFBRSxPQUFPLEtBQVQsRUFBZ0IsWUFBWSxJQUE1QixFQUFrQyxjQUFjLElBQWhELEVBQXNELFVBQVUsSUFBaEUsRUFBaEM7QUFBMEcsR0FBNUgsTUFBa0k7QUFBRSxRQUFJLEdBQUosSUFBVyxLQUFYO0FBQW1CLEdBQUMsT0FBTyxHQUFQO0FBQWE7O0FBRWpOLElBQUksTUFBTSxRQUFRLEdBQVIsR0FBYyxTQUFTLEdBQVQsQ0FBYSxFQUFiLEVBQWlCO0FBQ3ZDLFNBQU8sa0JBQWtCLEVBQXpCO0FBQ0QsQ0FGRDtBQUdBLElBQUksT0FBTyxRQUFRLElBQVIsR0FBZSxJQUFJLE1BQUosQ0FBMUI7QUFDQSxJQUFJLFNBQVMsUUFBUSxNQUFSLEdBQWlCLElBQUksUUFBSixDQUE5QjtBQUNBLElBQUksUUFBUSxRQUFRLEtBQVIsR0FBZ0IsSUFBSSxPQUFKLENBQTVCO0FBQ0EsSUFBSSxTQUFTLFFBQVEsTUFBUixHQUFpQixJQUFJLGVBQUosQ0FBOUI7QUFDQSxJQUFJLGNBQWMsUUFBUSxXQUFSLEdBQXNCLElBQUksYUFBSixDQUF4QztBQUNBLElBQUksUUFBUSxRQUFRLEtBQVIsR0FBZ0IsU0FBUyxLQUFULENBQWUsQ0FBZixFQUFrQjtBQUM1QyxTQUFPLFlBQVk7QUFDakIsV0FBTyxDQUFQO0FBQ0QsR0FGRDtBQUdELENBSkQ7QUFLQSxJQUFJLFFBQVEsUUFBUSxLQUFSLEdBQWdCLE1BQU0sSUFBTixDQUE1QjtBQUNBLElBQUksU0FBUyxRQUFRLE1BQVIsR0FBaUIsTUFBTSxLQUFOLENBQTlCO0FBQ0EsSUFBSSxPQUFPLFFBQVEsSUFBUixHQUFlLFNBQVMsSUFBVCxHQUFnQixDQUFFLENBQTVDO0FBQ0EsSUFBSSxRQUFRLFFBQVEsS0FBUixHQUFnQixTQUFTLEtBQVQsQ0FBZSxDQUFmLEVBQWtCO0FBQzVDLFNBQU8sQ0FBUDtBQUNELENBRkQ7O0FBSUEsSUFBSSxRQUFRLFFBQVEsS0FBUixHQUFnQixRQUFRLEdBQVIsQ0FBWSxRQUFaLEtBQXlCLGFBQXJEOztBQUVBLFNBQVMsS0FBVCxDQUFlLEtBQWYsRUFBc0IsU0FBdEIsRUFBaUMsS0FBakMsRUFBd0M7QUFDdEMsTUFBSSxDQUFDLFVBQVUsS0FBVixDQUFMLEVBQXVCO0FBQ3JCLFFBQUksT0FBSixFQUFhLG1CQUFiLEVBQWtDLEtBQWxDO0FBQ0EsVUFBTSxJQUFJLEtBQUosQ0FBVSxLQUFWLENBQU47QUFDRDtBQUNGOztBQUVELElBQUksaUJBQWlCLE9BQU8sU0FBUCxDQUFpQixjQUF0QztBQUNBLFNBQVMsTUFBVCxDQUFnQixNQUFoQixFQUF3QixRQUF4QixFQUFrQztBQUNoQyxTQUFPLEdBQUcsUUFBSCxDQUFZLE1BQVosS0FBdUIsZUFBZSxJQUFmLENBQW9CLE1BQXBCLEVBQTRCLFFBQTVCLENBQTlCO0FBQ0Q7O0FBRUQsSUFBSSxLQUFLLFFBQVEsRUFBUixHQUFhO0FBQ3BCLFNBQU8sU0FBUyxLQUFULENBQWUsQ0FBZixFQUFrQjtBQUN2QixXQUFPLE1BQU0sSUFBTixJQUFjLE1BQU0sU0FBM0I7QUFDRCxHQUhtQjtBQUlwQixZQUFVLFNBQVMsUUFBVCxDQUFrQixDQUFsQixFQUFxQjtBQUM3QixXQUFPLE1BQU0sSUFBTixJQUFjLE1BQU0sU0FBM0I7QUFDRCxHQU5tQjtBQU9wQixRQUFNLFNBQVMsSUFBVCxDQUFjLENBQWQsRUFBaUI7QUFDckIsV0FBTyxPQUFPLENBQVAsS0FBYSxVQUFwQjtBQUNELEdBVG1CO0FBVXBCLFVBQVEsU0FBUyxNQUFULENBQWdCLENBQWhCLEVBQW1CO0FBQ3pCLFdBQU8sT0FBTyxDQUFQLEtBQWEsUUFBcEI7QUFDRCxHQVptQjtBQWFwQixTQUFPLE1BQU0sT0FiTztBQWNwQixXQUFTLFNBQVMsT0FBVCxDQUFpQixDQUFqQixFQUFvQjtBQUMzQixXQUFPLEtBQUssR0FBRyxJQUFILENBQVEsRUFBRSxJQUFWLENBQVo7QUFDRCxHQWhCbUI7QUFpQnBCLFlBQVUsU0FBUyxRQUFULENBQWtCLEVBQWxCLEVBQXNCO0FBQzlCLFdBQU8sTUFBTSxHQUFHLElBQUgsQ0FBUSxHQUFHLElBQVgsQ0FBTixJQUEwQixHQUFHLElBQUgsQ0FBUSxHQUFHLEtBQVgsQ0FBakM7QUFDRCxHQW5CbUI7QUFvQnBCLFFBQU0sU0FBUyxJQUFULENBQWMsQ0FBZCxFQUFpQjtBQUNyQixXQUFPLEtBQUssRUFBRSxJQUFGLENBQVo7QUFDRCxHQXRCbUI7QUF1QnBCLGNBQVksU0FBUyxVQUFULENBQW9CLEVBQXBCLEVBQXdCO0FBQ2xDLFdBQU8sTUFBTSxHQUFHLElBQUgsQ0FBUSxHQUFHLFNBQVgsQ0FBYjtBQUNELEdBekJtQjtBQTBCcEIsVUFBUSxTQUFTLE1BQVQsQ0FBZ0IsR0FBaEIsRUFBcUI7QUFDM0IsV0FBTyxPQUFPLEdBQUcsSUFBSCxDQUFRLElBQUksT0FBWixDQUFQLElBQStCLEdBQUcsSUFBSCxDQUFRLElBQUksSUFBWixDQUEvQixJQUFvRCxHQUFHLElBQUgsQ0FBUSxJQUFJLEdBQVosQ0FBM0Q7QUFDRCxHQTVCbUI7QUE2QnBCLFdBQVMsU0FBUyxPQUFULENBQWlCLEdBQWpCLEVBQXNCO0FBQzdCLFdBQU8sUUFBUSxPQUFPLEdBQVAsS0FBZSxRQUFmLElBQTJCLENBQUMsT0FBTyxHQUFQLEtBQWUsV0FBZixHQUE2QixXQUE3QixHQUEyQyxRQUFRLEdBQVIsQ0FBNUMsTUFBOEQsUUFBekYsSUFBcUcsR0FBRyxJQUFILENBQVEsR0FBUixDQUFyRyxJQUFxSCxHQUFHLEtBQUgsQ0FBUyxHQUFULENBQTdILENBQVA7QUFDRCxHQS9CbUI7QUFnQ3BCLFdBQVMsU0FBUyxPQUFULENBQWlCLEVBQWpCLEVBQXFCO0FBQzVCLFdBQU8sTUFBTSxHQUFHLElBQUgsQ0FBUSxHQUFHLElBQVgsQ0FBTixJQUEwQixHQUFHLElBQUgsQ0FBUSxHQUFHLEtBQVgsQ0FBakM7QUFDRCxHQWxDbUI7QUFtQ3BCLFVBQVEsU0FBUyxNQUFULENBQWdCLEVBQWhCLEVBQW9CO0FBQzFCLFdBQU8sTUFBTSxHQUFHLE1BQUgsQ0FBYjtBQUNELEdBckNtQjtBQXNDcEIsa0JBQWdCLFNBQVMsY0FBVCxDQUF3QixDQUF4QixFQUEyQjtBQUN6QyxXQUFPLEdBQUcsSUFBSCxDQUFRLENBQVIsS0FBYyxPQUFPLENBQVAsRUFBVSxVQUFWLENBQXJCO0FBQ0Q7QUF4Q21CLENBQXRCOztBQTJDQSxTQUFTLE1BQVQsQ0FBZ0IsS0FBaEIsRUFBdUIsSUFBdkIsRUFBNkI7QUFDM0IsTUFBSSxRQUFRLE1BQU0sT0FBTixDQUFjLElBQWQsQ0FBWjtBQUNBLE1BQUksU0FBUyxDQUFiLEVBQWdCO0FBQ2QsVUFBTSxNQUFOLENBQWEsS0FBYixFQUFvQixDQUFwQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBUyxRQUFULEdBQW9CO0FBQ2xCLE1BQUksUUFBUSxVQUFVLE1BQVYsR0FBbUIsQ0FBbkIsSUFBd0IsVUFBVSxDQUFWLE1BQWlCLFNBQXpDLEdBQXFELFVBQVUsQ0FBVixDQUFyRCxHQUFvRSxFQUFoRjs7QUFFQSxNQUFJLE1BQU0sU0FBUyxFQUFULEVBQWEsS0FBYixDQUFWO0FBQ0EsTUFBSSxVQUFVLElBQUksT0FBSixDQUFZLFVBQVUsT0FBVixFQUFtQixNQUFuQixFQUEyQjtBQUNuRCxRQUFJLE9BQUosR0FBYyxPQUFkO0FBQ0EsUUFBSSxNQUFKLEdBQWEsTUFBYjtBQUNELEdBSGEsQ0FBZDtBQUlBLE1BQUksT0FBSixHQUFjLE9BQWQ7QUFDQSxTQUFPLEdBQVA7QUFDRDs7QUFFRCxTQUFTLGVBQVQsQ0FBeUIsTUFBekIsRUFBaUM7QUFDL0IsTUFBSSxNQUFNLEVBQVY7QUFDQSxPQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksTUFBcEIsRUFBNEIsR0FBNUIsRUFBaUM7QUFDL0IsUUFBSSxJQUFKLENBQVMsVUFBVDtBQUNEO0FBQ0QsU0FBTyxHQUFQO0FBQ0Q7O0FBRUQsU0FBUyxLQUFULENBQWUsRUFBZixFQUFtQjtBQUNqQixNQUFJLE1BQU0sVUFBVSxNQUFWLEdBQW1CLENBQW5CLElBQXdCLFVBQVUsQ0FBVixNQUFpQixTQUF6QyxHQUFxRCxVQUFVLENBQVYsQ0FBckQsR0FBb0UsSUFBOUU7O0FBRUEsTUFBSSxZQUFZLEtBQUssQ0FBckI7QUFDQSxNQUFJLFVBQVUsSUFBSSxPQUFKLENBQVksVUFBVSxPQUFWLEVBQW1CO0FBQzNDLGdCQUFZLFdBQVcsWUFBWTtBQUNqQyxhQUFPLFFBQVEsR0FBUixDQUFQO0FBQ0QsS0FGVyxFQUVULEVBRlMsQ0FBWjtBQUdELEdBSmEsQ0FBZDs7QUFNQSxVQUFRLE1BQVIsSUFBa0IsWUFBWTtBQUM1QixXQUFPLGFBQWEsU0FBYixDQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPLE9BQVA7QUFDRDs7QUFFRCxTQUFTLGNBQVQsR0FBMEI7QUFDeEIsTUFBSSxJQUFKOztBQUVBLE1BQUksVUFBVSxJQUFkO0FBQ0EsTUFBSSxVQUFVLEtBQUssQ0FBbkI7QUFBQSxNQUNJLFNBQVMsS0FBSyxDQURsQjs7QUFHQSxTQUFPLE9BQU8sRUFBUCxFQUFXLGdCQUFnQixJQUFoQixFQUFzQixJQUF0QixFQUE0QixJQUE1QixDQUFYLEVBQThDLGdCQUFnQixJQUFoQixFQUFzQixXQUF0QixFQUFtQyxTQUFTLFNBQVQsR0FBcUI7QUFDM0csV0FBTyxPQUFQO0FBQ0QsR0FGb0QsQ0FBOUMsRUFFSCxnQkFBZ0IsSUFBaEIsRUFBc0IsUUFBdEIsRUFBZ0MsU0FBUyxNQUFULEdBQWtCO0FBQ3BELFdBQU8sT0FBUDtBQUNELEdBRkcsQ0FGRyxFQUlILGdCQUFnQixJQUFoQixFQUFzQixPQUF0QixFQUErQixTQUFTLEtBQVQsR0FBaUI7QUFDbEQsV0FBTyxNQUFQO0FBQ0QsR0FGRyxDQUpHLEVBTUgsZ0JBQWdCLElBQWhCLEVBQXNCLFlBQXRCLEVBQW9DLFNBQVMsVUFBVCxDQUFvQixDQUFwQixFQUF1QjtBQUM3RCxXQUFPLFVBQVUsQ0FBakI7QUFDRCxHQUZHLENBTkcsRUFRSCxnQkFBZ0IsSUFBaEIsRUFBc0IsV0FBdEIsRUFBbUMsU0FBUyxTQUFULENBQW1CLENBQW5CLEVBQXNCO0FBQzNELFdBQU8sVUFBVSxDQUFqQjtBQUNELEdBRkcsQ0FSRyxFQVVILGdCQUFnQixJQUFoQixFQUFzQixVQUF0QixFQUFrQyxTQUFTLFFBQVQsQ0FBa0IsQ0FBbEIsRUFBcUI7QUFDekQsV0FBTyxTQUFTLENBQWhCO0FBQ0QsR0FGRyxDQVZHLEVBWUgsSUFaSjtBQWFEOztBQUVELFNBQVMsT0FBVCxHQUFtQjtBQUNqQixNQUFJLE9BQU8sVUFBVSxNQUFWLEdBQW1CLENBQW5CLElBQXdCLFVBQVUsQ0FBVixNQUFpQixTQUF6QyxHQUFxRCxVQUFVLENBQVYsQ0FBckQsR0FBb0UsQ0FBL0U7O0FBRUEsU0FBTyxZQUFZO0FBQ2pCLFdBQU8sRUFBRSxJQUFUO0FBQ0QsR0FGRDtBQUdEOztBQUVELElBQUksTUFBTSxRQUFRLEdBQVIsR0FBYyxTQUF4Qjs7QUFFQSxJQUFJLFNBQVMsU0FBUyxNQUFULENBQWdCLEdBQWhCLEVBQXFCO0FBQ2hDLFFBQU0sR0FBTjtBQUNELENBRkQ7QUFHQSxJQUFJLFVBQVUsU0FBUyxPQUFULENBQWlCLEtBQWpCLEVBQXdCO0FBQ3BDLFNBQU8sRUFBRSxPQUFPLEtBQVQsRUFBZ0IsTUFBTSxJQUF0QixFQUFQO0FBQ0QsQ0FGRDtBQUdBLFNBQVMsWUFBVCxDQUFzQixJQUF0QixFQUE0QjtBQUMxQixNQUFJLE9BQU8sVUFBVSxNQUFWLEdBQW1CLENBQW5CLElBQXdCLFVBQVUsQ0FBVixNQUFpQixTQUF6QyxHQUFxRCxVQUFVLENBQVYsQ0FBckQsR0FBb0UsTUFBL0U7QUFDQSxNQUFJLE9BQU8sVUFBVSxNQUFWLEdBQW1CLENBQW5CLElBQXdCLFVBQVUsQ0FBVixNQUFpQixTQUF6QyxHQUFxRCxVQUFVLENBQVYsQ0FBckQsR0FBb0UsRUFBL0U7QUFDQSxNQUFJLFdBQVcsVUFBVSxDQUFWLENBQWY7O0FBRUEsTUFBSSxXQUFXLEVBQUUsTUFBTSxJQUFSLEVBQWMsTUFBTSxJQUFwQixFQUEwQixPQUFPLElBQWpDLEVBQXVDLFFBQVEsT0FBL0MsRUFBZjs7QUFFQSxNQUFJLFFBQUosRUFBYztBQUNaLGFBQVMsTUFBVCxJQUFtQixJQUFuQjtBQUNEO0FBQ0QsTUFBSSxPQUFPLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDakMsYUFBUyxPQUFPLFFBQWhCLElBQTRCLFlBQVk7QUFDdEMsYUFBTyxRQUFQO0FBQ0QsS0FGRDtBQUdEO0FBQ0QsU0FBTyxRQUFQO0FBQ0Q7O0FBRUQ7Ozs7O0FBS0EsU0FBUyxHQUFULENBQWEsS0FBYixFQUFvQixPQUFwQixFQUE2QjtBQUMzQixNQUFJLFFBQVEsVUFBVSxNQUFWLEdBQW1CLENBQW5CLElBQXdCLFVBQVUsQ0FBVixNQUFpQixTQUF6QyxHQUFxRCxVQUFVLENBQVYsQ0FBckQsR0FBb0UsRUFBaEY7O0FBRUE7QUFDQSxNQUFJLE9BQU8sTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUNqQyxZQUFRLEdBQVIsQ0FBWSxnQkFBZ0IsS0FBaEIsR0FBd0IsSUFBeEIsR0FBK0IsT0FBL0IsR0FBeUMsSUFBekMsSUFBaUQsU0FBUyxNQUFNLEtBQWYsSUFBd0IsS0FBekUsQ0FBWjtBQUNELEdBRkQsTUFFTztBQUNMLFlBQVEsS0FBUixFQUFlLE9BQWYsRUFBd0IsS0FBeEI7QUFDRDtBQUNGOztBQUVELFNBQVMsU0FBVCxDQUFtQixFQUFuQixFQUF1QixrQkFBdkIsRUFBMkM7QUFDekMsU0FBTyxZQUFZO0FBQ2pCLFFBQUksS0FBSixFQUFXLElBQUksTUFBSixFQUFZLGtCQUFaO0FBQ1gsV0FBTyxHQUFHLEtBQUgsQ0FBUyxTQUFULEVBQW9CLFNBQXBCLENBQVA7QUFDRCxHQUhEO0FBSUQ7O0FBRUQsSUFBSSxjQUFjLFFBQVEsV0FBUixHQUFzQixTQUFTLFdBQVQsQ0FBcUIsR0FBckIsRUFBMEI7QUFDaEUsU0FBTyxJQUFJLEtBQUosQ0FBVSx1TUFBdU0sR0FBdk0sR0FBNk0sSUFBdk4sQ0FBUDtBQUNELENBRkQ7O0FBSUEsU0FBUyxnQkFBVCxDQUEwQixRQUExQixFQUFvQztBQUNsQyxTQUFPLFNBQVMsWUFBVCxDQUFzQixNQUF0QixFQUE4QjtBQUNuQyxRQUFJLGdCQUFnQixPQUFPLGNBQVAsQ0FBc0IsTUFBdEIsRUFBOEIsV0FBOUIsRUFBMkMsRUFBRSxPQUFPLElBQVQsRUFBM0MsQ0FBcEI7QUFDQSxXQUFPLFNBQVMsYUFBVCxDQUFQO0FBQ0QsR0FIRDtBQUlEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3NoaW1cIik7XG5cbnJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGVcIik7XG5cbmlmIChnbG9iYWwuX2JhYmVsUG9seWZpbGwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwtcG9seWZpbGwgaXMgYWxsb3dlZFwiKTtcbn1cbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7XG5cbnZhciBERUZJTkVfUFJPUEVSVFkgPSBcImRlZmluZVByb3BlcnR5XCI7XG5mdW5jdGlvbiBkZWZpbmUoTywga2V5LCB2YWx1ZSkge1xuICBPW2tleV0gfHwgT2JqZWN0W0RFRklORV9QUk9QRVJUWV0oTywga2V5LCB7XG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9KTtcbn1cblxuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkTGVmdFwiLCBcIlwiLnBhZFN0YXJ0KTtcbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZFJpZ2h0XCIsIFwiXCIucGFkRW5kKTtcblxuXCJwb3AscmV2ZXJzZSxzaGlmdCxrZXlzLHZhbHVlcyxlbnRyaWVzLGluZGV4T2YsZXZlcnksc29tZSxmb3JFYWNoLG1hcCxmaWx0ZXIsZmluZCxmaW5kSW5kZXgsaW5jbHVkZXMsam9pbixzbGljZSxjb25jYXQscHVzaCxzcGxpY2UsdW5zaGlmdCxzb3J0LGxhc3RJbmRleE9mLHJlZHVjZSxyZWR1Y2VSaWdodCxjb3B5V2l0aGluLGZpbGxcIi5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIFtdW2tleV0gJiYgZGVmaW5lKEFycmF5LCBrZXksIEZ1bmN0aW9uLmNhbGwuYmluZChbXVtrZXldKSk7XG59KTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXG4gKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW5cbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbC5wcm9jZXNzID09PSBcIm9iamVjdFwiICYmIGdsb2JhbC5wcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gZ2xvYmFsLnByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWxcbiAgLy8gb2JqZWN0LCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBtb3N0IHJlbGlhYmxlIHRlY2huaXF1ZSB0aGF0IGRvZXMgbm90XG4gIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG4gIHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpc1xuKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5SZWdFeHAuZXNjYXBlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyLCBJVEVSQVRPUikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIGlmIChjbGFzc29mKHRoaXMpICE9IE5BTUUpIHRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuNycgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuICB2YXIgZm5zID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pO1xuICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gIHZhciByeGZuID0gZm5zWzFdO1xuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KSkge1xuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIHNwcmVhZGFibGU7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIHNwcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gICAgICAgIHNwcmVhZGFibGUgPSBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ByZWFkYWJsZSAmJiBkZXB0aCA+IDApIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MWZmZmZmZmZmZmZmZmYpIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNjYWxlIHx8IGZ1bmN0aW9uIHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICBpZiAoXG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgeCAhPSB4XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkxvdyAhPSBpbkxvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5IaWdoICE9IGluSGlnaFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0TG93ICE9IG91dExvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0SGlnaCAhPSBvdXRIaWdoXG4gICkgcmV0dXJuIE5hTjtcbiAgaWYgKHggPT09IEluZmluaXR5IHx8IHggPT09IC1JbmZpbml0eSkgcmV0dXJuIHg7XG4gIHJldHVybiAoeCAtIGluTG93KSAqIChvdXRIaWdoIC0gb3V0TG93KSAvIChpbkhpZ2ggLSBpbkxvdykgKyBvdXRMb3c7XG59O1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsInZhciBNYXAgPSByZXF1aXJlKCcuL2VzNi5tYXAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ21ldGFkYXRhJyk7XG52YXIgc3RvcmUgPSBzaGFyZWQuc3RvcmUgfHwgKHNoYXJlZC5zdG9yZSA9IG5ldyAocmVxdWlyZSgnLi9lczYud2Vhay1tYXAnKSkoKSk7XG5cbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5LCBjcmVhdGUpIHtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIGlmICghdGFyZ2V0TWV0YWRhdGEpIHtcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBzdG9yZS5zZXQodGFyZ2V0LCB0YXJnZXRNZXRhZGF0YSA9IG5ldyBNYXAoKSk7XG4gIH1cbiAgdmFyIGtleU1ldGFkYXRhID0gdGFyZ2V0TWV0YWRhdGEuZ2V0KHRhcmdldEtleSk7XG4gIGlmICgha2V5TWV0YWRhdGEpIHtcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB0YXJnZXRNZXRhZGF0YS5zZXQodGFyZ2V0S2V5LCBrZXlNZXRhZGF0YSA9IG5ldyBNYXAoKSk7XG4gIH0gcmV0dXJuIGtleU1ldGFkYXRhO1xufTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbWV0YWRhdGFNYXAuaGFzKE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBtZXRhZGF0YU1hcC5nZXQoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKSB7XG4gIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgdHJ1ZSkuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTtcbn07XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCh0YXJnZXQsIHRhcmdldEtleSwgZmFsc2UpO1xuICB2YXIga2V5cyA9IFtdO1xuICBpZiAobWV0YWRhdGFNYXApIG1ldGFkYXRhTWFwLmZvckVhY2goZnVuY3Rpb24gKF8sIGtleSkgeyBrZXlzLnB1c2goa2V5KTsgfSk7XG4gIHJldHVybiBrZXlzO1xufTtcbnZhciB0b01ldGFLZXkgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcbnZhciBleHAgPSBmdW5jdGlvbiAoTykge1xuICAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCBPKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdG9yZTogc3RvcmUsXG4gIG1hcDogZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCxcbiAgaGFzOiBvcmRpbmFyeUhhc093bk1ldGFkYXRhLFxuICBnZXQ6IG9yZGluYXJ5R2V0T3duTWV0YWRhdGEsXG4gIHNldDogb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSxcbiAga2V5czogb3JkaW5hcnlPd25NZXRhZGF0YUtleXMsXG4gIGtleTogdG9NZXRhS2V5LFxuICBleHA6IGV4cFxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5JykgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsInZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZWdFeHAsIHJlcGxhY2UpIHtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcbiAgfSA6IHJlcGxhY2U7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTtcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgZnJvbTogZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBGbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgbWFwcGluZywgQSwgbiwgY2I7XG4gICAgYUZ1bmN0aW9uKHRoaXMpO1xuICAgIG1hcHBpbmcgPSBtYXBGbiAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChtYXBwaW5nKSBhRnVuY3Rpb24obWFwRm4pO1xuICAgIGlmIChzb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IHRoaXMoKTtcbiAgICBBID0gW107XG4gICAgaWYgKG1hcHBpbmcpIHtcbiAgICAgIG4gPSAwO1xuICAgICAgY2IgPSBjdHgobWFwRm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBmdW5jdGlvbiAobmV4dEl0ZW0pIHtcbiAgICAgICAgQS5wdXNoKGNiKG5leHRJdGVtLCBuKyspKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBBLnB1c2gsIEEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIEEgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIEFbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE4IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZSA9IHJlcXVpcmUoJy4vX3JlcGxhY2VyJykoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywgeyBlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCkgeyByZXR1cm4gJHJlKGl0KTsgfSB9KTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciAkbmF0aXZlID0gW10uaW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCIvLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4vX2RhdGUtdG8taXNvLXN0cmluZycpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwiLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogcmVxdWlyZSgnLi9fYmluZCcpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywgeyBhc2luaDogYXNpbmggfSk7XG4iLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBmcm91bmQ6IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJykgfSk7XG4iLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG4iLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJykgfSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG4iLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcbiIsIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNQVhfU0FGRV9JTlRFR0VSOiAweDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICB2YXIgaSA9IC0xO1xuICB2YXIgYzIgPSBjO1xuICB3aGlsZSAoKytpIDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICB2YXIgaSA9IDY7XG4gIHZhciBjID0gMDtcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XG4gIHZhciBuID0gMDtcbiAgdmFyIHgyID0geDtcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUgKHgyID49IDIpIHtcbiAgICBuICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyICR0b1ByZWNpc2lvbiA9IDEuMC50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTtcbiAgfVxufSk7XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgdmFyIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpIH0pO1xuIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2MgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYgKCFvd25EZXNjKSB7XG4gICAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmIChoYXMob3duRGVzYywgJ3ZhbHVlJykpIHtcbiAgICBpZiAob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVEZXNjKDAsIFYpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBzZXQ6IHNldCB9KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKSB7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7XG4iLCIvLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSkge1xuICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpXG4gIHJldHVybiBbZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgfSwgJHJlcGxhY2VdO1xufSk7XG4iLCIvLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKSB7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJHNlYXJjaF07XG59KTtcbiIsIi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xuICB2YXIgX3NwbGl0ID0gJHNwbGl0O1xuICB2YXIgJHB1c2ggPSBbXS5wdXNoO1xuICB2YXIgJFNQTElUID0gJ3NwbGl0JztcbiAgdmFyIExFTkdUSCA9ICdsZW5ndGgnO1xuICB2YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIHZhciBOUENHID0gLygpPz8vLmV4ZWMoJycpWzFdID09PSB1bmRlZmluZWQ7IC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiBfc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIGlmICghTlBDRykgc2VwYXJhdG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yQ29weS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpKSB7XG4gICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBOUENHXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgICAgIGlmICghTlBDRyAmJiBtYXRjaFtMRU5HVEhdID4gMSkgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfVxuICAvLyAyMS4xLjMuMTcgU3RyaW5nLnByb3RvdHlwZS5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KVxuICByZXR1cm4gW2Z1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgfSwgJHNwbGl0XTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIEFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xudmFyICRzbGljZSA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbik7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1QgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW4pIHtcbiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciB0bXAgPSB7fTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDc7IH0pKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiwgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdE1hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXR0ZW5cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdHRlbjogZnVuY3Rpb24gZmxhdHRlbigvKiBkZXB0aEFyZyA9IDEgKi8pIHtcbiAgICB2YXIgZGVwdGhBcmcgPSBhcmd1bWVudHNbMF07XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCBkZXB0aEFyZyA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aEFyZykpO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXR0ZW4nKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcztcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCkge1xuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnTWFwJywgeyB0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdNYXAnKSB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2xhbXA6IGZ1bmN0aW9uIGNsYW1wKHgsIGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIHgpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNjYWxlID0gcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZnNjYWxlOiBmdW5jdGlvbiBmc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gICAgcmV0dXJuIGZyb3VuZChzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzY2FsZTogcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpIH0pO1xuIiwiLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG59IH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4yIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgc2V0OiBhRnVuY3Rpb24oc2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNCBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELmdldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNSBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELnNldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgT0JTRVJWQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdvYnNlcnZhYmxlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgUkVUVVJOID0gZm9yT2YuUkVUVVJOO1xuXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcbn07XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYztcbiAgaWYgKGNsZWFudXApIHtcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cCgpO1xuICB9XG59O1xuXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG59O1xuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzdWJzY3JpYmVyKSB7XG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fbyA9IG9ic2VydmVyO1xuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmIChjbGVhbnVwICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykgY2xlYW51cCA9IGZ1bmN0aW9uICgpIHsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgIHJldHVybjtcbiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHRoaXMuX3MgPSBzdWJzY3JpcHRpb247XG59O1xuXG5TdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIubmV4dCk7XG4gICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHRocm93IHZhbHVlO1xuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgIGlmICghbSkgdGhyb3cgdmFsdWU7XG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcbn07XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGFGdW5jdGlvbihmbik7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpO1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHRoaXMudGhlbihcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICB9IDogb25GaW5hbGx5LFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgfSA6IG9uRmluYWxseVxuICApO1xufSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUHJvbWlzZScsIHsgJ3RyeSc6IGZ1bmN0aW9uIChjYWxsYmFja2ZuKSB7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYodGhpcyk7XG4gIHZhciByZXN1bHQgPSBwZXJmb3JtKGNhbGxiYWNrZm4pO1xuICAocmVzdWx0LmUgPyBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3QgOiBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlKShyZXN1bHQudik7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHsgZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSkge1xuICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwO1xudmFyIHN0b3JlID0gbWV0YWRhdGEuc3RvcmU7XG5cbm1ldGFkYXRhLmV4cCh7IGRlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pO1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICBpZiAobWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCB8fCAhbWV0YWRhdGFNYXBbJ2RlbGV0ZSddKG1ldGFkYXRhS2V5KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAobWV0YWRhdGFNYXAuc2l6ZSkgcmV0dXJuIHRydWU7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICB0YXJnZXRNZXRhZGF0YVsnZGVsZXRlJ10odGFyZ2V0S2V5KTtcbiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcbn0gfSk7XG4iLCJ2YXIgU2V0ID0gcmVxdWlyZSgnLi9lczYuc2V0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbnZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlNZXRhZGF0YUtleXMgPSBmdW5jdGlvbiAoTywgUCkge1xuICB2YXIgb0tleXMgPSBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICBpZiAocGFyZW50ID09PSBudWxsKSByZXR1cm4gb0tleXM7XG4gIHZhciBwS2V5cyA9IG9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7XG4gIHJldHVybiBwS2V5cy5sZW5ndGggPyBvS2V5cy5sZW5ndGggPyBmcm9tKG5ldyBTZXQob0tleXMuY29uY2F0KHBLZXlzKSkpIDogcEtleXMgOiBvS2V5cztcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IGZhbHNlO1xufTtcblxubWV0YWRhdGEuZXhwKHsgaGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgaGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciAkbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvTWV0YUtleSA9ICRtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9ICRtZXRhZGF0YS5zZXQ7XG5cbiRtZXRhZGF0YS5leHAoeyBtZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSkge1xuICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoXG4gICAgICBtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSxcbiAgICAgICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLFxuICAgICAgdG9NZXRhS2V5KHRhcmdldEtleSlcbiAgICApO1xuICB9O1xufSB9KTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0JywgeyB0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdTZXQnKSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBhdDogZnVuY3Rpb24gYXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIFJlZ0V4cFByb3RvID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIChyZWdleHAsIHN0cmluZykge1xuICB0aGlzLl9yID0gcmVnZXhwO1xuICB0aGlzLl9zID0gc3RyaW5nO1xufTtcblxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmICghaXNSZWdFeHAocmVnZXhwKSkgdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcbiAgICB2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KSwgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrU2V0Jyk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHRhc2sgPSByZXF1aXJlKCcuL190YXNrJyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwge1xuICBzZXRJbW1lZGlhdGU6ICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCJyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1tYXAuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWctcGVyLXJhZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5mc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWQtcGVyLWRlZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5zY2FsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS50cnknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXNhcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbW9kdWxlcy9fY29yZScpO1xuIiwiLyoqXHJcbiAqIFRoZSBBcHAgY29tcG9uZW50IGlzIHRoZSBjb21wb25lbnQgdGhhdCBpcyByZW5kZXJlZCBhcm91bmQgYWxsIHZpZXdzLCBhbmRcclxuICogY29udGFpbnMgY29tbW9uIHRoaW5ncyBsaWtlIG5hdmlnYXRpb24sIGZvb3RlciwgZXRjLlxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJy4vZWxlbWVudGFsJztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XHJcblxyXG5pbXBvcnQgTW9iaWxlTmF2aWdhdGlvbiBmcm9tICcuL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9Nb2JpbGUnO1xyXG5pbXBvcnQgUHJpbWFyeU5hdmlnYXRpb24gZnJvbSAnLi9jb21wb25lbnRzL05hdmlnYXRpb24vUHJpbWFyeSc7XHJcbmltcG9ydCBTZWNvbmRhcnlOYXZpZ2F0aW9uIGZyb20gJy4vY29tcG9uZW50cy9OYXZpZ2F0aW9uL1NlY29uZGFyeSc7XHJcbmltcG9ydCBGb290ZXIgZnJvbSAnLi9jb21wb25lbnRzL0Zvb3Rlcic7XHJcblxyXG5pbXBvcnQgSWZyYW1lQ29udGVudCBmcm9tICcuL3NoYXJlZC9JZnJhbWVDb250ZW50JztcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0d3JhcHBlcjoge1xyXG5cdFx0ZGlzcGxheTogJ2ZsZXgnLFxyXG5cdFx0ZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXHJcblx0XHRtaW5IZWlnaHQ6ICcxMDB2aCcsXHJcblx0fSxcclxuXHRib2R5OiB7XHJcblx0XHRmbGV4R3JvdzogMSxcclxuXHR9LFxyXG59O1xyXG5cclxuY29uc3QgQXBwID0gKHByb3BzKSA9PiB7XHJcblx0Y29uc3QgbGlzdHNCeVBhdGggPSByZXF1aXJlKCcuLi91dGlscy9saXN0cycpLmxpc3RzQnlQYXRoO1xyXG5cdGxldCBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xyXG5cdC8vIElmIHdlJ3JlIG9uIGVpdGhlciBhIGxpc3Qgb3IgYW4gaXRlbSB2aWV3XHJcblx0bGV0IGN1cnJlbnRMaXN0LCBjdXJyZW50U2VjdGlvbjtcclxuXHRpZiAocHJvcHMucGFyYW1zLmxpc3RJZCkge1xyXG5cdFx0Y3VycmVudExpc3QgPSBsaXN0c0J5UGF0aFtwcm9wcy5wYXJhbXMubGlzdElkXTtcclxuXHRcdC8vIElmIHdlJ3JlIG9uIGEgbGlzdCBwYXRoIHRoYXQgZG9lc24ndCBleGlzdCAoZS5nLiAva2V5c3RvbmUvZ2liYmVyaXNoYXNmdzM0YWZzZCkgdGhpcyB3aWxsXHJcblx0XHQvLyBiZSB1bmRlZmluZWRcclxuXHRcdGlmICghY3VycmVudExpc3QpIHtcclxuXHRcdFx0Y29uc3Qgc2VjdGlvbiA9IF8uZmluZChLZXlzdG9uZS5uYXYuc2VjdGlvbnMsIHtsaXN0czogW3twYXRoOiBwcm9wcy5sb2NhdGlvbi5wYXRobmFtZSwgZXh0ZXJuYWw6IHRydWV9XSB9KVxyXG5cdFx0XHRpZiAoc2VjdGlvbikge1xyXG5cdFx0XHRcdGNvbnN0IHBhdGggPSBfLmZpbmQoc2VjdGlvbi5saXN0cywge3BhdGg6IHByb3BzLmxvY2F0aW9uLnBhdGhuYW1lLCBleHRlcm5hbDogdHJ1ZX0pO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHBhdGgpO1xyXG5cdFx0XHRcdGNoaWxkcmVuID0gKDxJZnJhbWVDb250ZW50IHNyYz17cGF0aC5ocmVmfSBzaG93PXt0cnVlfSBvbkNhbmNlbD17KCkgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ2ZyYW1lIGNhbmNlbCcpO1xyXG5cdFx0XHRcdH19IG9uU2F2ZT17KCkgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ2ZyYW1lIHNhdmUnKTtcclxuXHRcdFx0XHR9fSAvPilcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjaGlsZHJlbiA9IChcclxuXHRcdFx0XHRcdDxDb250YWluZXI+XHJcblx0XHRcdFx0XHRcdDxwPkxpc3Qgbm90IGZvdW5kITwvcD5cclxuXHRcdFx0XHRcdFx0PExpbmsgdG89e2Ake0tleXN0b25lLmFkbWluUGF0aH1gfT5cclxuXHRcdFx0XHRcdFx0XHRHbyBiYWNrIGhvbWVcclxuXHRcdFx0XHRcdFx0PC9MaW5rPlxyXG5cdFx0XHRcdFx0PC9Db250YWluZXI+XHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gR2V0IHRoZSBjdXJyZW50IHNlY3Rpb24gd2UncmUgaW4gZm9yIHRoZSBuYXZpZ2F0aW9uXHJcblx0XHRcdGN1cnJlbnRTZWN0aW9uID0gS2V5c3RvbmUubmF2LmJ5Lmxpc3RbY3VycmVudExpc3Qua2V5XTtcclxuXHRcdH1cclxuXHR9XHJcblx0Ly8gRGVmYXVsdCBjdXJyZW50IHNlY3Rpb24ga2V5IHRvIGRhc2hib2FyZFxyXG5cdGNvbnN0IGN1cnJlbnRTZWN0aW9uS2V5ID0gKGN1cnJlbnRTZWN0aW9uICYmIGN1cnJlbnRTZWN0aW9uLmtleSkgfHwgJ2Rhc2hib2FyZCc7XHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXYgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy53cmFwcGVyKX0+XHJcblx0XHRcdDxoZWFkZXI+XHJcblx0XHRcdFx0PE1vYmlsZU5hdmlnYXRpb25cclxuXHRcdFx0XHRcdGJyYW5kPXtLZXlzdG9uZS5icmFuZH1cclxuXHRcdFx0XHRcdGN1cnJlbnRMaXN0S2V5PXtwcm9wcy5wYXJhbXMubGlzdElkfVxyXG5cdFx0XHRcdFx0Y3VycmVudFNlY3Rpb25LZXk9e2N1cnJlbnRTZWN0aW9uS2V5fVxyXG5cdFx0XHRcdFx0c2VjdGlvbnM9e0tleXN0b25lLm5hdi5zZWN0aW9uc31cclxuXHRcdFx0XHRcdHNpZ25vdXRVcmw9e0tleXN0b25lLnNpZ25vdXRVcmx9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0XHQ8UHJpbWFyeU5hdmlnYXRpb25cclxuXHRcdFx0XHRcdGN1cnJlbnRTZWN0aW9uS2V5PXtjdXJyZW50U2VjdGlvbktleX1cclxuXHRcdFx0XHRcdGJyYW5kPXtLZXlzdG9uZS5icmFuZH1cclxuXHRcdFx0XHRcdHNlY3Rpb25zPXtLZXlzdG9uZS5uYXYuc2VjdGlvbnN9XHJcblx0XHRcdFx0XHRzaWdub3V0VXJsPXtLZXlzdG9uZS5zaWdub3V0VXJsfVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdFx0ey8qIElmIGEgc2VjdGlvbiBpcyBvcGVuIGN1cnJlbnRseSwgc2hvdyB0aGUgc2Vjb25kYXJ5IG5hdiAqL31cclxuXHRcdFx0XHR7KGN1cnJlbnRTZWN0aW9uKSA/IChcclxuXHRcdFx0XHRcdDxTZWNvbmRhcnlOYXZpZ2F0aW9uXHJcblx0XHRcdFx0XHRcdGN1cnJlbnRMaXN0S2V5PXtwcm9wcy5wYXJhbXMubGlzdElkfVxyXG5cdFx0XHRcdFx0XHRsaXN0cz17Y3VycmVudFNlY3Rpb24ubGlzdHN9XHJcblx0XHRcdFx0XHRcdGl0ZW1JZD17cHJvcHMucGFyYW1zLml0ZW1JZH1cclxuXHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0KSA6IG51bGx9XHJcblx0XHRcdDwvaGVhZGVyPlxyXG5cdFx0XHQ8bWFpbiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmJvZHkpfT5cclxuXHRcdFx0XHR7Y2hpbGRyZW59XHJcblx0XHRcdDwvbWFpbj5cclxuXHRcdFx0PEZvb3RlclxyXG5cdFx0XHRcdGFwcHZlcnNpb249e0tleXN0b25lLmFwcHZlcnNpb259XHJcblx0XHRcdFx0YmFja1VybD17S2V5c3RvbmUuYmFja1VybH1cclxuXHRcdFx0XHRicmFuZD17S2V5c3RvbmUuYnJhbmR9XHJcblx0XHRcdFx0VXNlcj17S2V5c3RvbmUuVXNlcn1cclxuXHRcdFx0XHR1c2VyPXtLZXlzdG9uZS51c2VyfVxyXG5cdFx0XHRcdHZlcnNpb249e0tleXN0b25lLnZlcnNpb259XHJcblx0XHRcdC8+XHJcblx0XHQ8L2Rpdj5cclxuXHQpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XHJcbiIsIi8qKlxyXG4gKiBUaGUgZ2xvYmFsIEZvb3RlciwgZGlzcGxheXMgYSBsaW5rIHRvIHRoZSB3ZWJzaXRlIGFuZCB0aGUgY3VycmVudCBLZXlzdG9uZVxyXG4gKiB2ZXJzaW9uIGluIHVzZVxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJy4uLy4uL2VsZW1lbnRhbCc7XHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG52YXIgRm9vdGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnRm9vdGVyJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGFwcHZlcnNpb246IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRiYWNrVXJsOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0YnJhbmQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHR1c2VyOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxyXG5cdFx0VXNlcjogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9zb3J0LXByb3AtdHlwZXNcclxuXHRcdHZlcnNpb246IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0fSxcclxuXHQvLyBSZW5kZXIgdGhlIHVzZXJcclxuXHRyZW5kZXJVc2VyICgpIHtcclxuXHRcdGNvbnN0IHsgVXNlciwgdXNlciB9ID0gdGhpcy5wcm9wcztcclxuXHRcdGlmICghdXNlcikgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PHNwYW4+XHJcblx0XHRcdFx0PHNwYW4+IFNpZ25lZCBpbiBhcyA8L3NwYW4+XHJcblx0XHRcdFx0PGEgaHJlZj17YCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke1VzZXIucGF0aH0vJHt1c2VyLmlkfWB9IHRhYkluZGV4PVwiLTFcIiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmxpbmspfT5cclxuXHRcdFx0XHRcdHt1c2VyLm5hbWV9XHJcblx0XHRcdFx0PC9hPlxyXG5cdFx0XHRcdDxzcGFuPi48L3NwYW4+XHJcblx0XHRcdDwvc3Bhbj5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgeyBiYWNrVXJsLCBicmFuZCwgYXBwdmVyc2lvbiwgdmVyc2lvbiB9ID0gdGhpcy5wcm9wcztcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8Zm9vdGVyIGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuZm9vdGVyKX0gZGF0YS1rZXlzdG9uZS1mb290ZXI+XHJcblx0XHRcdFx0PENvbnRhaW5lcj5cclxuXHRcdFx0XHRcdDxhXHJcblx0XHRcdFx0XHRcdGhyZWY9e2JhY2tVcmx9XHJcblx0XHRcdFx0XHRcdHRhYkluZGV4PVwiLTFcIlxyXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmxpbmspfVxyXG5cdFx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0XHR7YnJhbmQgKyAoYXBwdmVyc2lvbiA/ICgnICcgKyBhcHB2ZXJzaW9uKSA6ICcnKX1cclxuXHRcdFx0XHRcdDwvYT5cclxuXHRcdFx0XHRcdDxzcGFuPiBwb3dlcmVkIGJ5IDwvc3Bhbj5cclxuXHRcdFx0XHRcdDxhXHJcblx0XHRcdFx0XHRcdGhyZWY9XCJodHRwOi8va2V5c3RvbmVqcy5jb21cIlxyXG5cdFx0XHRcdFx0XHR0YXJnZXQ9XCJfYmxhbmtcIlxyXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmxpbmspfVxyXG5cdFx0XHRcdFx0XHR0YWJJbmRleD1cIi0xXCJcclxuXHRcdFx0XHRcdD5cclxuXHRcdFx0XHRcdFx0S2V5c3RvbmVKU1xyXG5cdFx0XHRcdFx0PC9hPlxyXG5cdFx0XHRcdFx0PHNwYW4+IHZlcnNpb24ge3ZlcnNpb259Ljwvc3Bhbj5cclxuXHRcdFx0XHRcdHt0aGlzLnJlbmRlclVzZXIoKX1cclxuXHRcdFx0XHQ8L0NvbnRhaW5lcj5cclxuXHRcdFx0PC9mb290ZXI+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxuLyogZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSAqL1xyXG5jb25zdCBsaW5rSG92ZXJBbmRGb2N1cyA9IHtcclxuXHRjb2xvcjogdGhlbWUuY29sb3IuZ3JheTYwLFxyXG5cdG91dGxpbmU6ICdub25lJyxcclxufTtcclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRmb290ZXI6IHtcclxuXHRcdGJveFNoYWRvdzogJzAgLTFweCAwIHJnYmEoMCwgMCwgMCwgMC4xKScsXHJcblx0XHRjb2xvcjogdGhlbWUuY29sb3IuZ3JheTQwLFxyXG5cdFx0Zm9udFNpemU6IHRoZW1lLmZvbnQuc2l6ZS5zbWFsbCxcclxuXHRcdHBhZGRpbmdCb3R0b206IDMwLFxyXG5cdFx0cGFkZGluZ1RvcDogNDAsXHJcblx0XHR0ZXh0QWxpZ246ICdjZW50ZXInLFxyXG5cdFx0ZGlzcGxheTogJ25vbmUnXHJcblx0fSxcclxuXHRsaW5rOiB7XHJcblx0XHRjb2xvcjogdGhlbWUuY29sb3IuZ3JheTYwLFxyXG5cclxuXHRcdCc6aG92ZXInOiBsaW5rSG92ZXJBbmRGb2N1cyxcclxuXHRcdCc6Zm9jdXMnOiBsaW5rSG92ZXJBbmRGb2N1cyxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGb290ZXI7XHJcbiIsIi8qKlxyXG4gKiBBIGxpc3QgaXRlbSBvZiB0aGUgbW9iaWxlIG5hdmlnYXRpb25cclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuXHJcbmNvbnN0IE1vYmlsZUxpc3RJdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnTW9iaWxlTGlzdEl0ZW0nLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0Y2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXHJcblx0XHRjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRocmVmOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcblx0XHRvbkNsaWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8TGlua1xyXG5cdFx0XHRcdGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9XHJcblx0XHRcdFx0dG89e3RoaXMucHJvcHMuaHJlZn1cclxuXHRcdFx0XHRvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xpY2t9XHJcblx0XHRcdFx0dGFiSW5kZXg9XCItMVwiXHJcblx0XHRcdD5cclxuXHRcdFx0XHR7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuXHRcdFx0PC9MaW5rPlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTW9iaWxlTGlzdEl0ZW07XHJcbiIsIi8qKlxyXG4gKiBBIG1vYmlsZSBzZWN0aW9uXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IE1vYmlsZUxpc3RJdGVtIGZyb20gJy4vTGlzdEl0ZW0nO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuXHJcbmNvbnN0IE1vYmlsZVNlY3Rpb25JdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnTW9iaWxlU2VjdGlvbkl0ZW0nLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0Y2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXHJcblx0XHRjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRjdXJyZW50TGlzdEtleTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdGhyZWY6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuXHRcdGxpc3RzOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXHJcblx0fSxcclxuXHQvLyBSZW5kZXIgdGhlIGxpc3RzXHJcblx0cmVuZGVyTGlzdHMgKCkge1xyXG5cdFx0aWYgKCF0aGlzLnByb3BzLmxpc3RzIHx8IHRoaXMucHJvcHMubGlzdHMubGVuZ3RoIDw9IDEpIHJldHVybiBudWxsO1xyXG5cclxuXHRcdGNvbnN0IG5hdkxpc3RzID0gdGhpcy5wcm9wcy5saXN0cy5tYXAoKGl0ZW0pID0+IHtcclxuXHRcdFx0Ly8gR2V0IHRoZSBsaW5rIGFuZCB0aGUgY2xhc3NuYW1lXHJcblx0XHRcdGNvbnN0IGhyZWYgPSBpdGVtLmV4dGVybmFsID8gaXRlbS5wYXRoIDogYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2l0ZW0ucGF0aH1gO1xyXG5cdFx0XHRjb25zdCBjbGFzc05hbWUgPSAodGhpcy5wcm9wcy5jdXJyZW50TGlzdEtleSAmJiB0aGlzLnByb3BzLmN1cnJlbnRMaXN0S2V5ID09PSBpdGVtLnBhdGgpID8gJ01vYmlsZU5hdmlnYXRpb25fX2xpc3QtaXRlbSBpcy1hY3RpdmUnIDogJ01vYmlsZU5hdmlnYXRpb25fX2xpc3QtaXRlbSc7XHJcblxyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdDxNb2JpbGVMaXN0SXRlbSBrZXk9e2l0ZW0ucGF0aH0gaHJlZj17aHJlZn0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IG9uQ2xpY2s9e3RoaXMucHJvcHMub25DbGlja30+XHJcblx0XHRcdFx0XHR7aXRlbS5sYWJlbH1cclxuXHRcdFx0XHQ8L01vYmlsZUxpc3RJdGVtPlxyXG5cdFx0XHQpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uX19saXN0c1wiPlxyXG5cdFx0XHRcdHtuYXZMaXN0c31cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX0+XHJcblx0XHRcdFx0PExpbmtcclxuXHRcdFx0XHRcdGNsYXNzTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25fX3NlY3Rpb24taXRlbVwiXHJcblx0XHRcdFx0XHR0bz17dGhpcy5wcm9wcy5ocmVmfVxyXG5cdFx0XHRcdFx0dGFiSW5kZXg9XCItMVwiXHJcblx0XHRcdFx0XHRvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xpY2t9XHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0e3RoaXMucHJvcHMuY2hpbGRyZW59XHJcblx0XHRcdFx0PC9MaW5rPlxyXG5cdFx0XHRcdHt0aGlzLnJlbmRlckxpc3RzKCl9XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTW9iaWxlU2VjdGlvbkl0ZW07XHJcbiIsIi8qKlxyXG4gKiBUaGUgbW9iaWxlIG5hdmlnYXRpb24sIGRpc3BsYXllZCBvbiBzY3JlZW5zIDwgNzY4cHhcclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgVHJhbnNpdGlvbiBmcm9tICdyZWFjdC1hZGRvbnMtY3NzLXRyYW5zaXRpb24tZ3JvdXAnO1xyXG5cclxuaW1wb3J0IE1vYmlsZVNlY3Rpb25JdGVtIGZyb20gJy4vU2VjdGlvbkl0ZW0nO1xyXG5cclxuY29uc3QgRVNDQVBFX0tFWV9DT0RFID0gMjc7XHJcblxyXG5jb25zdCBNb2JpbGVOYXZpZ2F0aW9uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnTW9iaWxlTmF2aWdhdGlvbicsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRicmFuZDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdGN1cnJlbnRMaXN0S2V5OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0Y3VycmVudFNlY3Rpb25LZXk6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRzZWN0aW9uczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXHJcblx0XHRzaWdub3V0VXJsOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdH0sXHJcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGJhcklzVmlzaWJsZTogZmFsc2UsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Ly8gSGFuZGxlIHNob3dpbmcgYW5kIGhpZGluZyB0aGUgbWVudSBiYXNlZCBvbiB0aGUgd2luZG93IHNpemUgd2hlblxyXG5cdC8vIHJlc2l6aW5nXHJcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xyXG5cdFx0dGhpcy5oYW5kbGVSZXNpemUoKTtcclxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XHJcblx0fSxcclxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XHJcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xyXG5cdH0sXHJcblx0aGFuZGxlUmVzaXplICgpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRiYXJJc1Zpc2libGU6IHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4LFxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHQvLyBUb2dnbGUgdGhlIG1lbnVcclxuXHR0b2dnbGVNZW51ICgpIHtcclxuXHRcdHRoaXNbdGhpcy5zdGF0ZS5tZW51SXNWaXNpYmxlID8gJ2hpZGVNZW51JyA6ICdzaG93TWVudSddKCk7XHJcblx0fSxcclxuXHQvLyBTaG93IHRoZSBtZW51XHJcblx0c2hvd01lbnUgKCkge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdG1lbnVJc1Zpc2libGU6IHRydWUsXHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBNYWtlIHRoZSBib2R5IHVuc2Nyb2xsYWJsZSwgc28geW91IGNhbiBvbmx5IHNjcm9sbCBpbiB0aGUgbWVudVxyXG5cdFx0ZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG5cdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuaGFuZGxlRXNjYXBlS2V5LCBmYWxzZSk7XHJcblx0fSxcclxuXHQvLyBIaWRlIHRoZSBtZW51XHJcblx0aGlkZU1lbnUgKCkge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdG1lbnVJc1Zpc2libGU6IGZhbHNlLFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gTWFrZSB0aGUgYm9keSBzY3JvbGxhYmxlIGFnYWluXHJcblx0XHRkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gbnVsbDtcclxuXHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmhhbmRsZUVzY2FwZUtleSwgZmFsc2UpO1xyXG5cdH0sXHJcblx0Ly8gSWYgdGhlIGVzY2FwZSBrZXkgd2FzIHByZXNzZWQsIGhpZGUgdGhlIG1lbnVcclxuXHRoYW5kbGVFc2NhcGVLZXkgKGV2ZW50KSB7XHJcblx0XHRpZiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlfQ09ERSkge1xyXG5cdFx0XHR0aGlzLmhpZGVNZW51KCk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRyZW5kZXJOYXZpZ2F0aW9uICgpIHtcclxuXHRcdGlmICghdGhpcy5wcm9wcy5zZWN0aW9ucyB8fCAhdGhpcy5wcm9wcy5zZWN0aW9ucy5sZW5ndGgpIHJldHVybiBudWxsO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnByb3BzLnNlY3Rpb25zLm1hcCgoc2VjdGlvbikgPT4ge1xyXG5cdFx0XHQvLyBHZXQgdGhlIGxpbmsgYW5kIHRoZSBjbGFzc25hbWVcclxuXHRcdFx0Y29uc3QgaHJlZiA9IHNlY3Rpb24ubGlzdHNbMF0uZXh0ZXJuYWwgPyBzZWN0aW9uLmxpc3RzWzBdLnBhdGggOiBgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7c2VjdGlvbi5saXN0c1swXS5wYXRofWA7XHJcblx0XHRcdGNvbnN0IGNsYXNzTmFtZSA9ICh0aGlzLnByb3BzLmN1cnJlbnRTZWN0aW9uS2V5ICYmIHRoaXMucHJvcHMuY3VycmVudFNlY3Rpb25LZXkgPT09IHNlY3Rpb24ua2V5KSA/ICdNb2JpbGVOYXZpZ2F0aW9uX19zZWN0aW9uIGlzLWFjdGl2ZScgOiAnTW9iaWxlTmF2aWdhdGlvbl9fc2VjdGlvbic7XHJcblxyXG5cdFx0XHQvLyBSZW5kZXIgYSBTZWN0aW9uSXRlbVxyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdDxNb2JpbGVTZWN0aW9uSXRlbVxyXG5cdFx0XHRcdFx0a2V5PXtzZWN0aW9uLmtleX1cclxuXHRcdFx0XHRcdGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxyXG5cdFx0XHRcdFx0aHJlZj17aHJlZn1cclxuXHRcdFx0XHRcdGxpc3RzPXtzZWN0aW9uLmxpc3RzfVxyXG5cdFx0XHRcdFx0Y3VycmVudExpc3RLZXk9e3RoaXMucHJvcHMuY3VycmVudExpc3RLZXl9XHJcblx0XHRcdFx0XHRvbkNsaWNrPXt0aGlzLnRvZ2dsZU1lbnV9XHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0e3NlY3Rpb24ubGFiZWx9XHJcblx0XHRcdFx0PC9Nb2JpbGVTZWN0aW9uSXRlbT5cclxuXHRcdFx0KTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0Ly8gUmVuZGVyIGEgYmxvY2tvdXRcclxuXHRyZW5kZXJCbG9ja291dCAoKSB7XHJcblx0XHRpZiAoIXRoaXMuc3RhdGUubWVudUlzVmlzaWJsZSkgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiTW9iaWxlTmF2aWdhdGlvbl9fYmxvY2tvdXRcIiBvbkNsaWNrPXt0aGlzLnRvZ2dsZU1lbnV9IC8+O1xyXG5cdH0sXHJcblx0Ly8gUmVuZGVyIHRoZSBzaWRlYmFyIG1lbnVcclxuXHRyZW5kZXJNZW51ICgpIHtcclxuXHRcdGlmICghdGhpcy5zdGF0ZS5tZW51SXNWaXNpYmxlKSByZXR1cm4gbnVsbDtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8bmF2IGNsYXNzTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25fX21lbnVcIj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25fX3NlY3Rpb25zXCI+XHJcblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJOYXZpZ2F0aW9uKCl9XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdDwvbmF2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRpZiAoIXRoaXMuc3RhdGUuYmFySXNWaXNpYmxlKSByZXR1cm4gbnVsbDtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25cIj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25fX2JhclwiPlxyXG5cdFx0XHRcdFx0PGJ1dHRvblxyXG5cdFx0XHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcclxuXHRcdFx0XHRcdFx0b25DbGljaz17dGhpcy50b2dnbGVNZW51fVxyXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uX19iYXJfX2J1dHRvbiBNb2JpbGVOYXZpZ2F0aW9uX19iYXJfX2J1dHRvbi0tbWVudVwiXHJcblx0XHRcdFx0XHQ+XHJcblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17J01vYmlsZU5hdmlnYXRpb25fX2Jhcl9faWNvbiBvY3RpY29uIG9jdGljb24tJyArICh0aGlzLnN0YXRlLm1lbnVJc1Zpc2libGUgPyAneCcgOiAndGhyZWUtYmFycycpfSAvPlxyXG5cdFx0XHRcdFx0PC9idXR0b24+XHJcblx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uX19iYXJfX2xhYmVsXCI+XHJcblx0XHRcdFx0XHRcdHt0aGlzLnByb3BzLmJyYW5kfVxyXG5cdFx0XHRcdFx0PC9zcGFuPlxyXG5cdFx0XHRcdFx0PGFcclxuXHRcdFx0XHRcdFx0aHJlZj17dGhpcy5wcm9wcy5zaWdub3V0VXJsfVxyXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uX19iYXJfX2J1dHRvbiBNb2JpbGVOYXZpZ2F0aW9uX19iYXJfX2J1dHRvbi0tc2lnbm91dFwiXHJcblx0XHRcdFx0XHQ+XHJcblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25fX2Jhcl9faWNvbiBvY3RpY29uIG9jdGljb24tc2lnbi1vdXRcIiAvPlxyXG5cdFx0XHRcdFx0PC9hPlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiTW9iaWxlTmF2aWdhdGlvbl9fYmFyLS1wbGFjZWhvbGRlclwiIC8+XHJcblx0XHRcdFx0PFRyYW5zaXRpb25cclxuXHRcdFx0XHRcdHRyYW5zaXRpb25OYW1lPVwiTW9iaWxlTmF2aWdhdGlvbl9fbWVudVwiXHJcblx0XHRcdFx0XHR0cmFuc2l0aW9uRW50ZXJUaW1lb3V0PXsyNjB9XHJcblx0XHRcdFx0XHR0cmFuc2l0aW9uTGVhdmVUaW1lb3V0PXsyMDB9XHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyTWVudSgpfVxyXG5cdFx0XHRcdDwvVHJhbnNpdGlvbj5cclxuXHRcdFx0XHQ8VHJhbnNpdGlvblxyXG5cdFx0XHRcdFx0dHJhbnNpdGlvbk5hbWU9XCJyZWFjdC10cmFuc2l0aW9uZ3JvdXAtZmFkZVwiXHJcblx0XHRcdFx0XHR0cmFuc2l0aW9uRW50ZXJUaW1lb3V0PXswfVxyXG5cdFx0XHRcdFx0dHJhbnNpdGlvbkxlYXZlVGltZW91dD17MH1cclxuXHRcdFx0XHQ+XHJcblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJCbG9ja291dCgpfVxyXG5cdFx0XHRcdDwvVHJhbnNpdGlvbj5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNb2JpbGVOYXZpZ2F0aW9uO1xyXG4iLCIvKipcclxuICogQSBpdGVtIGluIHRoZSBwcmltYXJ5IG5hdmlnYXRpb24uIElmIGl0IGhhcyBhIFwidG9cIiBwcm9wIGl0J2xsIHJlbmRlciBhXHJcbiAqIHJlYWN0LXJvdXRlciBcIkxpbmtcIiwgaWYgaXQgaGFzIGEgXCJocmVmXCIgcHJvcCBpdCdsbCByZW5kZXIgYSBzaW1wbGUgXCJhXCIgdGFnXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5cclxuY29uc3QgUHJpbWFyeU5hdkl0ZW0gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBocmVmLCBsYWJlbCwgdGl0bGUsIHRvLCBhY3RpdmUgfSkgPT4ge1xyXG5cdGNvbnN0IGl0ZW1DbGFzc05hbWUgPSBjbGFzc25hbWVzKCdwcmltYXJ5LW5hdmJhcl9faXRlbScsIGNsYXNzTmFtZSk7XHJcblxyXG5cdGNvbnN0IEJ1dHRvbiA9IHRvID8gKFxyXG5cdFx0PExpbmtcclxuXHRcdFx0Y2xhc3NOYW1lPVwicHJpbWFyeS1uYXZiYXJfX2xpbmtcIlxyXG5cdFx0XHRrZXk9e3RpdGxlfVxyXG5cdFx0XHR0YWJJbmRleD1cIi0xXCJcclxuXHRcdFx0dGl0bGU9e3RpdGxlfVxyXG5cdFx0XHR0bz17dG99XHJcblx0XHRcdC8vIEJsb2NrIGNsaWNrcyBvbiBhY3RpdmUgbGlua1xyXG5cdFx0XHRvbkNsaWNrPXsoZXZ0KSA9PiB7IGlmIChhY3RpdmUpIGV2dC5wcmV2ZW50RGVmYXVsdCgpOyB9fVxyXG5cdFx0PlxyXG5cdFx0XHR7Y2hpbGRyZW59XHJcblx0XHQ8L0xpbms+XHJcblx0KSA6IChcclxuXHRcdDxhXHJcblx0XHRcdGNsYXNzTmFtZT1cInByaW1hcnktbmF2YmFyX19saW5rXCJcclxuXHRcdFx0aHJlZj17aHJlZn1cclxuXHRcdFx0a2V5PXt0aXRsZX1cclxuXHRcdFx0dGFiSW5kZXg9XCItMVwiXHJcblx0XHRcdHRpdGxlPXt0aXRsZX1cclxuXHRcdD5cclxuXHRcdFx0e2NoaWxkcmVufVxyXG5cdFx0PC9hPlxyXG5cdCk7XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8bGlcclxuXHRcdFx0Y2xhc3NOYW1lPXtpdGVtQ2xhc3NOYW1lfVxyXG5cdFx0XHRkYXRhLXNlY3Rpb24tbGFiZWw9e2xhYmVsfVxyXG5cdFx0PlxyXG5cdFx0XHR7QnV0dG9ufVxyXG5cdFx0PC9saT5cclxuXHQpO1xyXG59O1xyXG5cclxuUHJpbWFyeU5hdkl0ZW0uZGlzcGxheU5hbWUgPSAnUHJpbWFyeU5hdkl0ZW0nO1xyXG5QcmltYXJ5TmF2SXRlbS5wcm9wVHlwZXMgPSB7XHJcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXHJcblx0Y2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0bGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0dGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0dG86IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFByaW1hcnlOYXZJdGVtO1xyXG4iLCIvKipcbiAqIFRoZSBwcmltYXJ5IChpLmUuIHVwcGVybW9zdCkgbmF2aWdhdGlvbiBvbiBkZXNrdG9wLiBSZW5kZXJzIGFsbCBzZWN0aW9ucyBhbmRcbiAqIHRoZSBob21lLSwgd2Vic2l0ZS0gYW5kIHNpZ25vdXQgYnV0dG9ucy5cbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcbmltcG9ydCBQcmltYXJ5TmF2SXRlbSBmcm9tICcuL05hdkl0ZW0nO1xuXG52YXIgUHJpbWFyeU5hdmlnYXRpb24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnUHJpbWFyeU5hdmlnYXRpb24nLFxuXHRwcm9wVHlwZXM6IHtcblx0XHRicmFuZDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0XHRjdXJyZW50U2VjdGlvbktleTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0XHRzZWN0aW9uczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG5cdFx0c2lnbm91dFVybDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0fSxcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcblx0XHRyZXR1cm4ge307XG5cdH0sXG5cdC8vIEhhbmRsZSByZXNpemluZywgaGlkZSB0aGlzIG5hdmlnYXRpb24gb24gbW9iaWxlIChpLmUuIDwgNzY4cHgpIHNjcmVlbnNcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xuXHRcdHRoaXMuaGFuZGxlUmVzaXplKCk7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcblx0fSxcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG5cdH0sXG5cdGhhbmRsZVJlc2l6ZSAoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRuYXZJc1Zpc2libGU6IHdpbmRvdy5pbm5lcldpZHRoID49IDc2OCxcblx0XHR9KTtcblx0fSxcblx0Ly8gUmVuZGVyIHRoZSBzaWduIG91dCBidXR0b25cblx0cmVuZGVyU2lnbm91dCAoKSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLnNpZ25vdXRVcmwpIHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxQcmltYXJ5TmF2SXRlbVxuXHRcdFx0XHRsYWJlbD1cImdseXBoaWNvbiBnbHlwaGljb24tbG9nXCJcblx0XHRcdFx0aHJlZj17dGhpcy5wcm9wcy5zaWdub3V0VXJsfVxuXHRcdFx0XHR0aXRsZT1cIlNpZ24gT3V0XCJcblx0XHRcdD5cblx0XHRcdFx0IFNpZ24gT3V0XG5cdFx0XHQ8L1ByaW1hcnlOYXZJdGVtPlxuXHRcdCk7XG5cdH0sXG5cdC8vIFJlbmRlciB0aGUgYmFjayBidXR0b25cblx0cmVuZGVyQmFja0J1dHRvbiAoKSB7XG5cdFx0aWYgKCFLZXlzdG9uZS5iYWNrVXJsKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8UHJpbWFyeU5hdkl0ZW1cblx0XHRcdFx0bGFiZWw9XCJvY3RpY29uLWdsb2JlXCJcblx0XHRcdFx0aHJlZj17S2V5c3RvbmUuYmFja1VybH1cblx0XHRcdFx0dGl0bGU9eydGcm9udCBwYWdlIC0gJyArIHRoaXMucHJvcHMuYnJhbmR9XG5cdFx0XHQ+XG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cIm9jdGljb24gb2N0aWNvbi1nbG9iZVwiIC8+XG5cdFx0XHQ8L1ByaW1hcnlOYXZJdGVtPlxuXHRcdCk7XG5cdH0sXG5cdC8vIFJlbmRlciB0aGUgbGluayB0byB0aGUgd2VicGFnZVxuXHRyZW5kZXJGcm9udExpbmsgKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8dWwgY2xhc3NOYW1lPVwiYXBwLW5hdiBhcHAtbmF2LS1wcmltYXJ5IGFwcC1uYXYtLXJpZ2h0XCI+XG5cdFx0XHRcdHsvKnRoaXMucmVuZGVyQmFja0J1dHRvbigpKi99XG5cdFx0XHRcdHt0aGlzLnJlbmRlclNpZ25vdXQoKX1cblx0XHRcdDwvdWw+XG5cdFx0KTtcblx0fSxcblx0cmVuZGVyQnJhbmQgKCkge1xuXHRcdC8vIFRPRE86IHN1cHBvcnQgbmF2YmFyTG9nbyBmcm9tIGtleXN0b25lIGNvbmZpZ1xuXHRcdGlmICghS2V5c3RvbmUuYmFja1VybCkgcmV0dXJuIG51bGw7XG5cblx0XHRjb25zdCB7IGJyYW5kLCBjdXJyZW50U2VjdGlvbktleSB9ID0gdGhpcy5wcm9wcztcblx0XHRjb25zdCBjbGFzc05hbWUgPSBjdXJyZW50U2VjdGlvbktleSA9PT0gJ2Rhc2hib2FyZCcgPyAncHJpbWFyeS1uYXZiYXJfX2JyYW5kIHByaW1hcnktbmF2YmFyX19pdGVtLS1hY3RpdmUnIDogJ3ByaW1hcnktbmF2YmFyX19icmFuZCc7XG5cdFx0cmV0dXJuIChcblx0XHQgXHQ8UHJpbWFyeU5hdkl0ZW1cblx0XHRcdFx0Y2xhc3NOYW1lPXtjbGFzc05hbWV9XG5cdFx0XHRcdGhyZWY9e0tleXN0b25lLmJhY2tVcmx9XG5cdFx0XHRcdGxhYmVsPVwib2N0aWNvbi1ob21lXCJcblx0XHRcdFx0dGl0bGU9eydGcm9udCBwYWdlIC0gJyArIHRoaXMucHJvcHMuYnJhbmR9XG5cdFx0IFx0PlxuXHRcdCBcdFx0SG9tZVxuXHRcdCBcdDwvUHJpbWFyeU5hdkl0ZW0+XG5cdCBcdCk7XG5cdH0sXG5cdC8vIFJlbmRlciB0aGUgbmF2aWdhdGlvblxuXHRyZW5kZXJOYXZpZ2F0aW9uICgpIHtcblx0XHRpZiAoIXRoaXMucHJvcHMuc2VjdGlvbnMgfHwgIXRoaXMucHJvcHMuc2VjdGlvbnMubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiB0aGlzLnByb3BzLnNlY3Rpb25zLm1hcCgoc2VjdGlvbikgPT4ge1xuXHRcdFx0Ly8gR2V0IHRoZSBsaW5rIGFuZCB0aGUgY2xhc3MgbmFtZVxuXHRcdFx0Y29uc3QgaHJlZiA9IHNlY3Rpb24ubGlzdHNbMF0uZXh0ZXJuYWwgPyBzZWN0aW9uLmxpc3RzWzBdLnBhdGggOiBgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7c2VjdGlvbi5saXN0c1swXS5wYXRofWA7XG5cdFx0XHRjb25zdCBpc0FjdGl2ZSA9IHRoaXMucHJvcHMuY3VycmVudFNlY3Rpb25LZXkgJiYgdGhpcy5wcm9wcy5jdXJyZW50U2VjdGlvbktleSA9PT0gc2VjdGlvbi5rZXk7XG5cdFx0XHRjb25zdCBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/ICdwcmltYXJ5LW5hdmJhcl9faXRlbS0tYWN0aXZlJyA6IG51bGw7XG5cblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDxQcmltYXJ5TmF2SXRlbVxuXHRcdFx0XHRcdGFjdGl2ZT17aXNBY3RpdmV9XG5cdFx0XHRcdFx0a2V5PXtzZWN0aW9uLmtleX1cblx0XHRcdFx0XHRsYWJlbD17c2VjdGlvbi5sYWJlbH1cblx0XHRcdFx0XHRjbGFzc05hbWU9e2NsYXNzTmFtZX1cblx0XHRcdFx0XHR0bz17aHJlZn1cblx0XHRcdFx0PlxuXHRcdFx0XHRcdHtzZWN0aW9uLmxhYmVsfVxuXHRcdFx0XHQ8L1ByaW1hcnlOYXZJdGVtPlxuXHRcdFx0KTtcblx0XHR9KTtcblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRpZiAoIXRoaXMuc3RhdGUubmF2SXNWaXNpYmxlKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8bmF2IGNsYXNzTmFtZT1cInByaW1hcnktbmF2YmFyXCI+XG5cdFx0XHRcdDx1bCBjbGFzc05hbWU9XCJhcHAtbmF2IGFwcC1uYXYtLXByaW1hcnkgYXBwLW5hdi0tbGVmdFwiPlxuXHRcdFx0XHRcdHt0aGlzLnJlbmRlckJyYW5kKCl9XG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyTmF2aWdhdGlvbigpfVxuXHRcdFx0XHQ8L3VsPlxuXHRcdFx0XHR7dGhpcy5yZW5kZXJGcm9udExpbmsoKX1cblx0XHRcdDwvbmF2PlxuXHRcdCk7XG5cdH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcmltYXJ5TmF2aWdhdGlvbjtcbiIsIi8qKlxyXG4gKiBBIG5hdmlnYXRpb24gaXRlbSBvZiB0aGUgc2Vjb25kYXJ5IG5hdmlnYXRpb25cclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuXHJcbmNvbnN0IFNlY29uZGFyeU5hdkl0ZW0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdTZWNvbmRhcnlOYXZJdGVtJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxyXG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0aHJlZjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG5cdFx0b25DbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcblx0XHRwYXRoOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0dGl0bGU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGxpIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9IGRhdGEtbGlzdC1wYXRoPXt0aGlzLnByb3BzLnBhdGh9PlxyXG5cdFx0XHRcdDxMaW5rXHJcblx0XHRcdFx0XHR0bz17dGhpcy5wcm9wcy5ocmVmfVxyXG5cdFx0XHRcdFx0b25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfVxyXG5cdFx0XHRcdFx0dGl0bGU9e3RoaXMucHJvcHMudGl0bGV9XHJcblx0XHRcdFx0XHR0YWJJbmRleD1cIi0xXCJcclxuXHRcdFx0XHQ+XHJcblx0XHRcdFx0XHR7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuXHRcdFx0XHQ8L0xpbms+XHJcblx0XHRcdDwvbGk+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTZWNvbmRhcnlOYXZJdGVtO1xyXG4iLCIvKipcclxuICogVGhlIHNlY29uZGFyeSBuYXZpZ2F0aW9uIGxpbmtzIHRvIGluaWR2aWR1YWwgbGlzdHMgb2YgYSBzZWN0aW9uXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcclxuXHJcbmltcG9ydCB7XHJcblx0c2V0QWN0aXZlTGlzdCxcclxufSBmcm9tICcuLi8uLi8uLi9zY3JlZW5zL0xpc3QvYWN0aW9ucy9hY3RpdmUnO1xyXG5pbXBvcnQgU2Vjb25kYXJ5TmF2SXRlbSBmcm9tICcuL05hdkl0ZW0nO1xyXG5cclxudmFyIFNlY29uZGFyeU5hdmlnYXRpb24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdTZWNvbmRhcnlOYXZpZ2F0aW9uJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGN1cnJlbnRMaXN0S2V5OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0bGlzdHM6IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxyXG5cdH0sXHJcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcclxuXHRcdHJldHVybiB7fTtcclxuXHR9LFxyXG5cdC8vIEhhbmRsZSByZXNpemluZyBhbmQgaGlkZSB0aGlzIG5hdiBvbiBtb2JpbGUgKGkuZS4gPCA3NjhweCkgc2NyZWVuc1xyXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuXHRcdHRoaXMuaGFuZGxlUmVzaXplKCk7XHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xyXG5cdH0sXHJcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xyXG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcclxuXHR9LFxyXG5cdGhhbmRsZVJlc2l6ZSAoKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0bmF2SXNWaXNpYmxlOiB0aGlzLnByb3BzLmxpc3RzICYmIE9iamVjdC5rZXlzKHRoaXMucHJvcHMubGlzdHMpLmxlbmd0aCA+IDAgJiYgd2luZG93LmlubmVyV2lkdGggPj0gNzY4LFxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHQvLyBSZW5kZXIgdGhlIG5hdmlnYXRpb25cclxuXHRyZW5kZXJOYXZpZ2F0aW9uIChsaXN0cykge1xyXG5cdFx0Y29uc3QgbmF2aWdhdGlvbiA9IE9iamVjdC5rZXlzKGxpc3RzKS5tYXAoKGtleSkgPT4ge1xyXG5cdFx0XHRjb25zdCBsaXN0ID0gbGlzdHNba2V5XTtcclxuXHRcdFx0Ly8gR2V0IHRoZSBsaW5rIGFuZCB0aGUgY2xhc3NuYW1lXHJcblx0XHRcdGNvbnN0IGhyZWYgPSBsaXN0LmV4dGVybmFsID8gbGlzdC5wYXRoIDogYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2xpc3QucGF0aH1gO1xyXG5cdFx0XHRjb25zdCBpc0FjdGl2ZSA9IHRoaXMucHJvcHMuY3VycmVudExpc3RLZXkgJiYgdGhpcy5wcm9wcy5jdXJyZW50TGlzdEtleSA9PT0gbGlzdC5wYXRoO1xyXG5cdFx0XHRjb25zdCBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/ICdhY3RpdmUnIDogbnVsbDtcclxuXHRcdFx0Y29uc3Qgb25DbGljayA9IChldnQpID0+IHtcclxuXHRcdFx0XHQvLyBJZiBpdCdzIHRoZSBjdXJyZW50bHkgYWN0aXZlIG5hdmlnYXRpb24gaXRlbSBhbmQgd2UncmUgbm90IG9uIHRoZSBpdGVtIHZpZXcsXHJcblx0XHRcdFx0Ly8gY2xlYXIgdGhlIHF1ZXJ5IHBhcmFtcyBvbiBjbGlja1xyXG5cdFx0XHRcdGlmIChpc0FjdGl2ZSAmJiAhdGhpcy5wcm9wcy5pdGVtSWQpIHtcclxuXHRcdFx0XHRcdGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChcclxuXHRcdFx0XHRcdFx0c2V0QWN0aXZlTGlzdCh0aGlzLnByb3BzLmN1cnJlbnRMaXN0LCB0aGlzLnByb3BzLmN1cnJlbnRMaXN0S2V5KVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdDxTZWNvbmRhcnlOYXZJdGVtXHJcblx0XHRcdFx0XHRrZXk9e2xpc3QucGF0aH1cclxuXHRcdFx0XHRcdHBhdGg9e2xpc3QucGF0aH1cclxuXHRcdFx0XHRcdGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxyXG5cdFx0XHRcdFx0aHJlZj17aHJlZn1cclxuXHRcdFx0XHRcdG9uQ2xpY2s9e29uQ2xpY2t9XHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0e2xpc3QubGFiZWx9XHJcblx0XHRcdFx0PC9TZWNvbmRhcnlOYXZJdGVtPlxyXG5cdFx0XHQpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PHVsIGNsYXNzTmFtZT1cImFwcC1uYXYgYXBwLW5hdi0tc2Vjb25kYXJ5IGFwcC1uYXYtLWxlZnRcIj5cclxuXHRcdFx0XHR7bmF2aWdhdGlvbn1cclxuXHRcdFx0PC91bD5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0aWYgKCF0aGlzLnN0YXRlLm5hdklzVmlzaWJsZSkgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PG5hdiBjbGFzc05hbWU9XCJzZWNvbmRhcnktbmF2YmFyXCI+XHJcblx0XHRcdFx0PENvbnRhaW5lciBjbGVhckZsb2F0aW5nQ2hpbGRyZW4+XHJcblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJOYXZpZ2F0aW9uKHRoaXMucHJvcHMubGlzdHMpfVxyXG5cdFx0XHRcdDwvQ29udGFpbmVyPlxyXG5cdFx0XHQ8L25hdj5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGNvbm5lY3QoKHN0YXRlKSA9PiB7XHJcblx0cmV0dXJuIHtcclxuXHRcdGN1cnJlbnRMaXN0OiBzdGF0ZS5saXN0cy5jdXJyZW50TGlzdCxcclxuXHR9O1xyXG59KShTZWNvbmRhcnlOYXZpZ2F0aW9uKTtcclxuIiwiaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdGRhbmdlcjogdGhlbWUuYWxlcnQuY29sb3IuZGFuZ2VyLFxyXG5cdGVycm9yOiB0aGVtZS5hbGVydC5jb2xvci5kYW5nZXIsXHJcblx0aW5mbzogdGhlbWUuYWxlcnQuY29sb3IuaW5mbyxcclxuXHRzdWNjZXNzOiB0aGVtZS5hbGVydC5jb2xvci5zdWNjZXNzLFxyXG5cdHdhcm5pbmc6IHRoZW1lLmFsZXJ0LmNvbG9yLndhcm5pbmcsXHJcbn07XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQsIENoaWxkcmVuLCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcclxuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XHJcblxyXG4vLyBjbG9uZSBjaGlsZHJlbiBpZiBhIGNsYXNzIGV4aXN0cyBmb3IgdGhlIHRhZ25hbWVcclxuY29uc3QgY2xvbmVXaXRoQ2xhc3NuYW1lcyA9IChjKSA9PiB7XHJcblx0Y29uc3QgdHlwZSA9IGMudHlwZSAmJiBjLnR5cGUuZGlzcGxheU5hbWVcclxuXHRcdD8gYy50eXBlLmRpc3BsYXlOYW1lXHJcblx0XHQ6IGMudHlwZSB8fCBudWxsO1xyXG5cclxuXHRpZiAoIXR5cGUgfHwgIWNsYXNzZXNbdHlwZV0pIHJldHVybiBjO1xyXG5cclxuXHRyZXR1cm4gY2xvbmVFbGVtZW50KGMsIHtcclxuXHRcdGNsYXNzTmFtZTogY3NzKGNsYXNzZXNbdHlwZV0pLFxyXG5cdH0pO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gQWxlcnQgKHtcclxuXHRjaGlsZHJlbixcclxuXHRjbGFzc05hbWUsXHJcblx0Y29sb3IsXHJcblx0Y29tcG9uZW50OiBDb21wb25lbnQsXHJcblx0Li4ucHJvcHNcclxufSkge1xyXG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdGNsYXNzZXMuYWxlcnQsXHJcblx0XHRjbGFzc2VzW2NvbG9yXSxcclxuXHRcdGNsYXNzTmFtZVxyXG5cdCk7XHJcblx0cHJvcHMuY2hpbGRyZW4gPSBDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGNsb25lV2l0aENsYXNzbmFtZXMpO1xyXG5cclxuXHRyZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IGRhdGEtYWxlcnQtdHlwZT17Y29sb3J9IC8+O1xyXG59O1xyXG5cclxuQWxlcnQucHJvcFR5cGVzID0ge1xyXG5cdGNvbG9yOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoY29sb3JzKSkuaXNSZXF1aXJlZCxcclxuXHRjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLmZ1bmMsXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdF0pLFxyXG59O1xyXG5BbGVydC5kZWZhdWx0UHJvcHMgPSB7XHJcblx0Y29tcG9uZW50OiAnZGl2JyxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQWxlcnQ7XHJcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBBbGVydFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cclxuXHJcbmltcG9ydCBjb2xvcnMgZnJvbSAnLi9jb2xvcnMnO1xyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxuLy8gUHJlcGFyZSB2YXJpYW50c1xyXG5jb25zdCBjb2xvclZhcmlhbnRzID0ge307XHJcbk9iamVjdC5rZXlzKGNvbG9ycykuZm9yRWFjaChjb2xvciA9PiB7XHJcblx0Y29sb3JWYXJpYW50c1tjb2xvcl0gPSB7XHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yc1tjb2xvcl0uYmFja2dyb3VuZCxcclxuXHRcdGJvcmRlckNvbG9yOiBjb2xvcnNbY29sb3JdLmJvcmRlcixcclxuXHRcdGNvbG9yOiBjb2xvcnNbY29sb3JdLnRleHQsXHJcblx0fTtcclxufSk7XHJcblxyXG4vLyBQcmVwYXJlIGhlYWRpbmdzXHJcbmNvbnN0IGhlYWRpbmdUYWduYW1lcyA9IHt9O1xyXG5bJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2J10uZm9yRWFjaCh0YWcgPT4ge1xyXG5cdGhlYWRpbmdUYWduYW1lc1t0YWddID0geyBjb2xvcjogJ2luaGVyaXQnIH07XHJcbn0pO1xyXG5cclxuY29uc3QgbGlua1N0eWxlcyA9IHtcclxuXHRjb2xvcjogJ2luaGVyaXQnLFxyXG5cdHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJyxcclxuXHJcblx0Jzpob3Zlcic6IHsgY29sb3I6ICdpbmhlcml0JyB9LFxyXG5cdCc6Zm9jdXMnOiB7IGNvbG9yOiAnaW5oZXJpdCcgfSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdGFsZXJ0OiB7XHJcblx0XHRib3JkZXJDb2xvcjogJ3RyYW5zcGFyZW50JyxcclxuXHRcdGJvcmRlclJhZGl1czogdGhlbWUuYWxlcnQuYm9yZGVyUmFkaXVzLFxyXG5cdFx0Ym9yZGVyU3R5bGU6ICdzb2xpZCcsXHJcblx0XHRib3JkZXJXaWR0aDogdGhlbWUuYWxlcnQuYm9yZGVyV2lkdGgsXHJcblx0XHRtYXJnaW46IHRoZW1lLmFsZXJ0Lm1hcmdpbixcclxuXHRcdHBhZGRpbmc6IHRoZW1lLmFsZXJ0LnBhZGRpbmcsXHJcblx0fSxcclxuXHJcblx0Ly8gdGFnbmFtZXNcclxuXHRhOiBsaW5rU3R5bGVzLFxyXG5cdExpbms6IGxpbmtTdHlsZXMsXHJcblx0c3Ryb25nOiB7XHJcblx0XHRmb250V2VpZ2h0OiA1MDAsXHJcblx0fSxcclxuXHJcblx0Ly8gaGVhZGluZ3NcclxuXHQuLi5oZWFkaW5nVGFnbmFtZXMsXHJcblxyXG5cdC8vIGNvbG9yc1xyXG5cdC4uLmNvbG9yVmFyaWFudHMsXHJcbn07XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5mdW5jdGlvbiBCbGFua1N0YXRlICh7XHJcblx0Y2xhc3NOYW1lLFxyXG5cdGNoaWxkcmVuLFxyXG5cdGhlYWRpbmcsXHJcblx0Y29tcG9uZW50OiBDb21wb25lbnQsXHJcblx0Li4ucHJvcHNcclxufSkge1xyXG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdGNsYXNzZXMuY29udGFpbmVyLFxyXG5cdFx0Y2xhc3NOYW1lXHJcblx0KTtcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxDb21wb25lbnQgey4uLnByb3BzfT5cclxuXHRcdFx0eyEhaGVhZGluZyAmJiA8aDIgZGF0YS1lMmUtYmxhbmstc3RhdGUtaGVhZGluZyBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmhlYWRpbmcpfT57aGVhZGluZ308L2gyPn1cclxuXHRcdFx0e2NoaWxkcmVufVxyXG5cdFx0PC9Db21wb25lbnQ+XHJcblx0KTtcclxufTtcclxuXHJcbkJsYW5rU3RhdGUucHJvcFR5cGVzID0ge1xyXG5cdGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMuZnVuYyxcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XSkuaXNSZXF1aXJlZCxcclxuXHRoZWFkaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5CbGFua1N0YXRlLmRlZmF1bHRQcm9wcyA9IHtcclxuXHRjb21wb25lbnQ6ICdkaXYnLFxyXG59O1xyXG5cclxuLyogZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSAqL1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRjb250YWluZXI6IHtcclxuXHRcdGJhY2tncm91bmRDb2xvcjogdGhlbWUuYmxhbmtzdGF0ZS5iYWNrZ3JvdW5kLFxyXG5cdFx0Ym9yZGVyUmFkaXVzOiB0aGVtZS5ibGFua3N0YXRlLmJvcmRlclJhZGl1cyxcclxuXHRcdGNvbG9yOiB0aGVtZS5ibGFua3N0YXRlLmNvbG9yLFxyXG5cdFx0cGFkZGluZ0JvdHRvbTogdGhlbWUuYmxhbmtzdGF0ZS5wYWRkaW5nVmVydGljYWwsXHJcblx0XHRwYWRkaW5nTGVmdDogdGhlbWUuYmxhbmtzdGF0ZS5wYWRkaW5nSG9yaXpvbnRhbCxcclxuXHRcdHBhZGRpbmdSaWdodDogdGhlbWUuYmxhbmtzdGF0ZS5wYWRkaW5nSG9yaXpvbnRhbCxcclxuXHRcdHBhZGRpbmdUb3A6IHRoZW1lLmJsYW5rc3RhdGUucGFkZGluZ1ZlcnRpY2FsLFxyXG5cdFx0dGV4dEFsaWduOiAnY2VudGVyJyxcclxuXHR9LFxyXG5cclxuXHRoZWFkaW5nOiB7XHJcblx0XHRjb2xvcjogJ2luaGVyaXQnLFxyXG5cclxuXHRcdCc6bGFzdC1jaGlsZCc6IHtcclxuXHRcdFx0bWFyZ2luQm90dG9tOiAwLFxyXG5cdFx0fSxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCbGFua1N0YXRlO1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMnO1xyXG5cclxuY29uc3QgY29tbW9uQ2xhc3NlcyA9IHN0eWxlcy5jb21tb247XHJcbmNvbnN0IHN0eWxlc2hlZXRDYWNoZSA9IHt9O1xyXG5mdW5jdGlvbiBnZXRTdHlsZVNoZWV0ICh2YXJpYW50LCBjb2xvcikge1xyXG5cdGNvbnN0IGNhY2hlS2V5ID0gYCR7dmFyaWFudH0tJHtjb2xvcn1gO1xyXG5cdGlmICghc3R5bGVzaGVldENhY2hlW2NhY2hlS2V5XSkge1xyXG5cdFx0Y29uc3QgdmFyaWFudFN0eWxlcyA9IHN0eWxlc1t2YXJpYW50XShjb2xvcik7XHJcblx0XHRzdHlsZXNoZWV0Q2FjaGVbY2FjaGVLZXldID0gdmFyaWFudFN0eWxlcztcclxuXHR9XHJcblx0cmV0dXJuIHN0eWxlc2hlZXRDYWNoZVtjYWNoZUtleV07XHJcbn1cclxuXHJcbmNvbnN0IEJVVFRPTl9TSVpFUyA9IFsnbGFyZ2UnLCAnbWVkaXVtJywgJ3NtYWxsJywgJ3hzbWFsbCddO1xyXG5jb25zdCBCVVRUT05fVkFSSUFOVFMgPSBbJ2ZpbGwnLCAnaG9sbG93JywgJ2xpbmsnXTtcclxuY29uc3QgQlVUVE9OX0NPTE9SUyA9IFsnZGVmYXVsdCcsICdwcmltYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZycsICdkYW5nZXInLCAnY2FuY2VsJywgJ2RlbGV0ZSddO1xyXG5cclxuLy8gTk9URSBtdXN0IE5PVCBiZSBmdW5jdGlvbmFsIGNvbXBvbmVudCB0byBhbGxvdyBgcmVmc2BcclxuXHJcbmNsYXNzIEJ1dHRvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHZhciB7XHJcblx0XHRcdGFjdGl2ZSxcclxuXHRcdFx0YXBocm9kaXRlU3R5bGVzLFxyXG5cdFx0XHRibG9jayxcclxuXHRcdFx0Y2xhc3NOYW1lLFxyXG5cdFx0XHRjb2xvcixcclxuXHRcdFx0Y29tcG9uZW50OiBUYWcsXHJcblx0XHRcdGRpc2FibGVkLFxyXG5cdFx0XHRzaXplLFxyXG5cdFx0XHR2YXJpYW50LFxyXG5cdFx0XHQuLi5wcm9wc1xyXG5cdFx0fSA9IHRoaXMucHJvcHM7XHJcblxyXG5cdFx0Ly8gZ2V0IHRoZSBzdHlsZXNcclxuXHRcdGNvbnN0IHZhcmlhbnRDbGFzc2VzID0gZ2V0U3R5bGVTaGVldCh2YXJpYW50LCBjb2xvcik7XHJcblx0XHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXHJcblx0XHRcdGNvbW1vbkNsYXNzZXMuYmFzZSxcclxuXHRcdFx0Y29tbW9uQ2xhc3Nlc1tzaXplXSxcclxuXHRcdFx0dmFyaWFudENsYXNzZXMuYmFzZSxcclxuXHRcdFx0YmxvY2sgPyBjb21tb25DbGFzc2VzLmJsb2NrIDogbnVsbCxcclxuXHRcdFx0ZGlzYWJsZWQgPyBjb21tb25DbGFzc2VzLmRpc2FibGVkIDogbnVsbCxcclxuXHRcdFx0YWN0aXZlID8gdmFyaWFudENsYXNzZXMuYWN0aXZlIDogbnVsbCxcclxuXHRcdFx0Li4uYXBocm9kaXRlU3R5bGVzXHJcblx0XHQpO1xyXG5cdFx0aWYgKGNsYXNzTmFtZSkge1xyXG5cdFx0XHRwcm9wcy5jbGFzc05hbWUgKz0gKCcgJyArIGNsYXNzTmFtZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gcmV0dXJuIGFuIGFuY2hvciBvciBidXR0b25cclxuXHRcdGlmICghVGFnKSB7XHJcblx0XHRcdFRhZyA9IHByb3BzLmhyZWYgPyAnYScgOiAnYnV0dG9uJztcclxuXHRcdH1cclxuXHRcdC8vIEVuc3VyZSBidXR0b25zIGRvbid0IHN1Ym1pdCBieSBkZWZhdWx0XHJcblx0XHRpZiAoVGFnID09PSAnYnV0dG9uJyAmJiAhcHJvcHMudHlwZSkge1xyXG5cdFx0XHRwcm9wcy50eXBlID0gJ2J1dHRvbic7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIDxUYWcgey4uLnByb3BzfSAvPjtcclxuXHR9XHJcbn07XHJcblxyXG5CdXR0b24ucHJvcFR5cGVzID0ge1xyXG5cdGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXHJcblx0YXBocm9kaXRlU3R5bGVzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoe1xyXG5cdFx0X2RlZmluaXRpb246IFByb3BUeXBlcy5vYmplY3QsXHJcblx0XHRfbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcclxuXHR9KSksXHJcblx0YmxvY2s6IFByb3BUeXBlcy5ib29sLFxyXG5cdGNvbG9yOiBQcm9wVHlwZXMub25lT2YoQlVUVE9OX0NPTE9SUyksXHJcblx0Y29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5mdW5jLFxyXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcclxuXHRdKSxcclxuXHRkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXHJcblx0aHJlZjogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRzaXplOiBQcm9wVHlwZXMub25lT2YoQlVUVE9OX1NJWkVTKSxcclxuXHR2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoQlVUVE9OX1ZBUklBTlRTKSxcclxufTtcclxuQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcclxuXHRhcGhyb2RpdGVTdHlsZXM6IFtdLFxyXG5cdGNvbG9yOiAnZGVmYXVsdCcsXHJcblx0dmFyaWFudDogJ2ZpbGwnLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCdXR0b247XHJcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBCdXR0b25cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5pbXBvcnQgeyBncmFkaWVudFZlcnRpY2FsIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY3NzJztcclxuaW1wb3J0IHsgZGFya2VuLCBmYWRlLCBsaWdodGVuIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY29sb3InO1xyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxuXHJcbi8vIENvbW1vbiBTdHlsZXNcclxuLy8gLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0cy5jb21tb24gPSB7XHJcblx0Ly8gQmFzZSBCdXR0b25cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tXHJcblx0YmFzZToge1xyXG5cdFx0J2FwcGVhcmFuY2UnOiAnbm9uZScsXHJcblx0XHQnYmFja2dyb3VuZCc6ICdub25lJyxcclxuXHRcdCdib3JkZXJXaWR0aCc6IHRoZW1lLmJ1dHRvbi5ib3JkZXJXaWR0aCxcclxuXHRcdCdib3JkZXJTdHlsZSc6ICdzb2xpZCcsXHJcblx0XHQnYm9yZGVyQ29sb3InOiAndHJhbnNwYXJlbnQnLFxyXG5cdFx0J2JvcmRlclJhZGl1cyc6IHRoZW1lLmJ1dHRvbi5ib3JkZXJSYWRpdXMsXHJcblx0XHQnY3Vyc29yJzogJ3BvaW50ZXInLFxyXG5cdFx0J2Rpc3BsYXknOiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdCdmb250V2VpZ2h0JzogdGhlbWUuYnV0dG9uLmZvbnQud2VpZ2h0LFxyXG5cdFx0J2hlaWdodCc6IHRoZW1lLmNvbXBvbmVudC5oZWlnaHQsXHJcblx0XHQnbGluZUhlaWdodCc6IHRoZW1lLmNvbXBvbmVudC5saW5lSGVpZ2h0LFxyXG5cdFx0J21hcmdpbkJvdHRvbSc6IDAsXHJcblx0XHQncGFkZGluZyc6IGAwICR7dGhlbWUuYnV0dG9uLnBhZGRpbmdIb3Jpem9udGFsfWAsXHJcblx0XHQnb3V0bGluZSc6IDAsXHJcblx0XHQndGV4dEFsaWduJzogJ2NlbnRlcicsXHJcblx0XHQndG91Y2hBY3Rpb24nOiAnbWFuaXB1bGF0aW9uJyxcclxuXHRcdCd1c2VyU2VsZWN0JzogJ25vbmUnLFxyXG5cdFx0J3ZlcnRpY2FsQWxpZ24nOiAnbWlkZGxlJyxcclxuXHRcdCd3aGl0ZVNwYWNlJzogJ25vd3JhcCcsXHJcblxyXG5cdFx0Jzpob3Zlcic6IHtcclxuXHRcdFx0Y29sb3I6IHRoZW1lLmJ1dHRvbi5kZWZhdWx0LnRleHRDb2xvcixcclxuXHRcdFx0dGV4dERlY29yYXRpb246ICdub25lJyxcclxuXHRcdH0sXHJcblx0XHQnOmZvY3VzJzoge1xyXG5cdFx0XHRjb2xvcjogdGhlbWUuYnV0dG9uLmRlZmF1bHQudGV4dENvbG9yLFxyXG5cdFx0XHR0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxyXG5cdFx0fSxcclxuXHR9LFxyXG5cdC8vIEJsb2NrIERpc3BsYXlcclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tXHJcblx0YmxvY2s6IHtcclxuXHRcdGRpc3BsYXk6ICdibG9jaycsXHJcblx0XHR3aWR0aDogJzEwMCUnLFxyXG5cdH0sXHJcblx0Ly8gRGlzYWJsZWRcclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tXHJcblx0ZGlzYWJsZWQ6IHtcclxuXHRcdG9wYWNpdHk6IDAuNCxcclxuXHRcdHBvaW50ZXJFdmVudHM6ICdub25lJyxcclxuXHR9LFxyXG5cdC8vIFNpemVzXHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLVxyXG5cdGxhcmdlOiB7XHJcblx0XHRmb250U2l6ZTogdGhlbWUuZm9udC5zaXplLmxhcmdlLFxyXG5cdH0sXHJcblx0ZGVmYXVsdDoge1xyXG5cdFx0Zm9udFNpemU6IHRoZW1lLmZvbnQuc2l6ZS5kZWZhdWx0LFxyXG5cdH0sXHJcblx0c21hbGw6IHtcclxuXHRcdGZvbnRTaXplOiB0aGVtZS5mb250LnNpemUuc21hbGwsXHJcblx0fSxcclxuXHR4c21hbGw6IHtcclxuXHRcdGZvbnRTaXplOiB0aGVtZS5mb250LnNpemUueHNtYWxsLFxyXG5cdFx0bGluZUhlaWdodDogJzEuOScsXHJcblx0XHRwYWRkaW5nTGVmdDogJy42NmVtJyxcclxuXHRcdHBhZGRpbmdSaWdodDogJy42NmVtJyxcclxuXHR9LFxyXG59O1xyXG5cclxuXHJcbi8vIEZpbGwgVmFyaWFudFxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tXHJcbmZ1bmN0aW9uIGJ1dHRvbkZpbGxWYXJpYW50ICh0ZXh0Q29sb3IsIGJnQ29sb3IpIHtcclxuXHRjb25zdCBob3ZlclN0eWxlcyA9IHtcclxuXHRcdC4uLmdyYWRpZW50VmVydGljYWwobGlnaHRlbihiZ0NvbG9yLCAxMCksIGRhcmtlbihiZ0NvbG9yLCA1KSksXHJcblx0XHRib3JkZXJDb2xvcjogYCR7ZGFya2VuKGJnQ29sb3IsIDUpfSAke2RhcmtlbihiZ0NvbG9yLCAxMCl9ICR7ZGFya2VuKGJnQ29sb3IsIDE1KX1gLFxyXG5cdFx0Ym94U2hhZG93OiAnMCAxcHggMCByZ2JhKDAsMCwwLDAuMSknLFxyXG5cdFx0Y29sb3I6IHRleHRDb2xvcixcclxuXHRcdG91dGxpbmU6ICdub25lJyxcclxuXHR9O1xyXG5cdGNvbnN0IGZvY3VzU3R5bGVzID0ge1xyXG5cdFx0Li4uZ3JhZGllbnRWZXJ0aWNhbChsaWdodGVuKGJnQ29sb3IsIDEwKSwgZGFya2VuKGJnQ29sb3IsIDUpKSxcclxuXHRcdGJvcmRlckNvbG9yOiBgJHtkYXJrZW4oYmdDb2xvciwgNSl9ICR7ZGFya2VuKGJnQ29sb3IsIDEwKX0gJHtkYXJrZW4oYmdDb2xvciwgMTUpfWAsXHJcblx0XHRib3hTaGFkb3c6IGAwIDAgMCAzcHggJHtmYWRlKGJnQ29sb3IsIDI1KX1gLFxyXG5cdFx0Y29sb3I6IHRleHRDb2xvcixcclxuXHRcdG91dGxpbmU6ICdub25lJyxcclxuXHR9O1xyXG5cdGNvbnN0IGFjdGl2ZVN0eWxlcyA9IHtcclxuXHRcdGJhY2tncm91bmRDb2xvcjogZGFya2VuKGJnQ29sb3IsIDEwKSxcclxuXHRcdGJhY2tncm91bmRJbWFnZTogJ25vbmUnLFxyXG5cdFx0Ym9yZGVyQ29sb3I6IGAke2RhcmtlbihiZ0NvbG9yLCAyNSl9ICR7ZGFya2VuKGJnQ29sb3IsIDE1KX0gJHtkYXJrZW4oYmdDb2xvciwgMTApfWAsXHJcblx0XHRib3hTaGFkb3c6ICdpbnNldCAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjEpJyxcclxuXHR9O1xyXG5cdHJldHVybiB7XHJcblx0XHRiYXNlOiB7XHJcblx0XHRcdC4uLmdyYWRpZW50VmVydGljYWwobGlnaHRlbihiZ0NvbG9yLCA1KSwgZGFya2VuKGJnQ29sb3IsIDEwKSwgYmdDb2xvciksXHJcblx0XHRcdCdib3JkZXJDb2xvcic6IGAke2RhcmtlbihiZ0NvbG9yLCAxMCl9ICR7ZGFya2VuKGJnQ29sb3IsIDIwKX0gJHtkYXJrZW4oYmdDb2xvciwgMjUpfWAsXHJcblx0XHRcdCdib3hTaGFkb3cnOiAnaW5zZXQgMCAxcHggMCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSknLFxyXG5cdFx0XHQnY29sb3InOiB0ZXh0Q29sb3IsXHJcblx0XHRcdCdmb250V2VpZ2h0JzogNDAwLFxyXG5cdFx0XHQndGV4dFNoYWRvdyc6ICcwIC0xcHggMCByZ2JhKDAsIDAsIDAsIDAuMjUpJyxcclxuXHJcblx0XHRcdCc6aG92ZXInOiBob3ZlclN0eWxlcyxcclxuXHRcdFx0Jzpmb2N1cyc6IGZvY3VzU3R5bGVzLFxyXG5cdFx0XHQnOmFjdGl2ZSc6IGFjdGl2ZVN0eWxlcyxcclxuXHRcdH0sXHJcblx0XHRhY3RpdmU6IGFjdGl2ZVN0eWxlcyxcclxuXHR9O1xyXG59XHJcbi8vIFRPRE86IFRoaXMgaXMgcHJldHR5IGhhY2t5LCBuZWVkcyB0byBiZSBjb25zb2xpZGF0ZWQgd2l0aCB0aGUgVmFyaWFudCgpIG1ldGhvZFxyXG4vLyBhYm92ZSAobmVlZHMgbW9yZSB0aGVtZSB2YXJpYWJsZXMgdG8gYmUgaW1wbGVtZW50ZWQgdGhvdWdoKVxyXG5mdW5jdGlvbiBidXR0b25GaWxsRGVmYXVsdCAoKSB7XHJcblx0Y29uc3QgYm9yZGVyQ29sb3IgPSB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuZGVmYXVsdDtcclxuXHRjb25zdCBob3ZlclN0eWxlcyA9IHtcclxuXHRcdC4uLmdyYWRpZW50VmVydGljYWwoJyNmZmYnLCAnI2VlZScpLFxyXG5cdFx0Ym9yZGVyQ29sb3I6IGAke2Rhcmtlbihib3JkZXJDb2xvciwgNSl9ICR7ZGFya2VuKGJvcmRlckNvbG9yLCA1KX0gJHtkYXJrZW4oYm9yZGVyQ29sb3IsIDEwKX1gLFxyXG5cdFx0Ym94U2hhZG93OiAnMCAxcHggMCByZ2JhKDAsMCwwLDAuMSknLFxyXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLnRleHQsXHJcblx0fTtcclxuXHRjb25zdCBmb2N1c1N0eWxlcyA9IHtcclxuXHRcdGJvcmRlckNvbG9yOiB0aGVtZS5jb2xvci5wcmltYXJ5LFxyXG5cdFx0Ym94U2hhZG93OiBgMCAwIDAgM3B4ICR7ZmFkZSh0aGVtZS5jb2xvci5wcmltYXJ5LCAxMCl9YCxcclxuXHRcdGNvbG9yOiB0aGVtZS5jb2xvci50ZXh0LFxyXG5cdFx0b3V0bGluZTogJ25vbmUnLFxyXG5cdH07XHJcblx0Y29uc3QgYWN0aXZlU3R5bGVzID0ge1xyXG5cdFx0YmFja2dyb3VuZDogJyNlNmU2ZTYnLFxyXG5cdFx0Ym9yZGVyQ29sb3I6IGRhcmtlbihib3JkZXJDb2xvciwgMTApLFxyXG5cdFx0Ym94U2hhZG93OiAnaW5zZXQgMCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4xKScsXHJcblx0XHRjb2xvcjogdGhlbWUuY29sb3IudGV4dCxcclxuXHR9O1xyXG5cdHJldHVybiB7XHJcblx0XHRiYXNlOiB7XHJcblx0XHRcdC4uLmdyYWRpZW50VmVydGljYWwoJyNmYWZhZmEnLCAnI2VhZWFlYScpLFxyXG5cdFx0XHQnYm9yZGVyQ29sb3InOiBgJHtib3JkZXJDb2xvcn0gJHtkYXJrZW4oYm9yZGVyQ29sb3IsIDYpfSAke2Rhcmtlbihib3JkZXJDb2xvciwgMTIpfWAsXHJcblx0XHRcdCdjb2xvcic6IHRoZW1lLmNvbG9yLnRleHQsXHJcblx0XHRcdCd0ZXh0U2hhZG93JzogJzAgMXB4IDAgd2hpdGUnLFxyXG5cclxuXHRcdFx0Jzpob3Zlcic6IGhvdmVyU3R5bGVzLFxyXG5cdFx0XHQnOmZvY3VzJzogZm9jdXNTdHlsZXMsXHJcblx0XHRcdCc6YWN0aXZlJzogYWN0aXZlU3R5bGVzLFxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBncm9zcyBoYWNrXHJcblx0XHRhY3RpdmU6IHtcclxuXHRcdFx0Li4uYWN0aXZlU3R5bGVzLFxyXG5cclxuXHRcdFx0Jzpob3Zlcic6IGFjdGl2ZVN0eWxlcyxcclxuXHRcdFx0Jzpmb2N1cyc6IHtcclxuXHRcdFx0XHQuLi5hY3RpdmVTdHlsZXMsXHJcblx0XHRcdFx0Li4uZm9jdXNTdHlsZXMsXHJcblx0XHRcdFx0Ym94U2hhZG93OiBgMCAwIDAgM3B4ICR7ZmFkZSh0aGVtZS5jb2xvci5wcmltYXJ5LCAxMCl9LCBpbnNldCAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjEpYCxcclxuXHRcdFx0fSxcclxuXHRcdFx0JzphY3RpdmUnOiBhY3RpdmVTdHlsZXMsXHJcblx0XHR9LFxyXG5cdH07XHJcbn1cclxuZXhwb3J0cy5maWxsID0gKGNvbG9yKSA9PiB7XHJcblx0c3dpdGNoIChjb2xvcikge1xyXG5cdFx0Y2FzZSAnZGVmYXVsdCc6XHJcblx0XHRcdHJldHVybiBidXR0b25GaWxsRGVmYXVsdCgpO1xyXG5cdFx0Y2FzZSAnY2FuY2VsJzpcclxuXHRcdGNhc2UgJ2RlbGV0ZSc6XHJcblx0XHRcdHJldHVybiBidXR0b25GaWxsVmFyaWFudCgnd2hpdGUnLCB0aGVtZS5idXR0b24uZGFuZ2VyLmJnQ29sb3IpO1xyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0cmV0dXJuIGJ1dHRvbkZpbGxWYXJpYW50KCd3aGl0ZScsIHRoZW1lLmJ1dHRvbltjb2xvcl0uYmdDb2xvcik7XHJcblx0fVxyXG59O1xyXG5cclxuXHJcbi8vIEhvbGxvdyBWYXJpYW50XHJcbi8vIC0tLS0tLS0tLS0tLS0tLS1cclxuZnVuY3Rpb24gYnV0dG9uSG9sbG93VmFyaWFudCAodGV4dENvbG9yLCBib3JkZXJDb2xvcikge1xyXG5cdGNvbnN0IGZvY3VzQW5kSG92ZXJTdHlsZXMgPSB7XHJcblx0XHRiYWNrZ3JvdW5kSW1hZ2U6ICdub25lJyxcclxuXHRcdGJhY2tncm91bmRDb2xvcjogZmFkZShib3JkZXJDb2xvciwgMTUpLFxyXG5cdFx0Ym9yZGVyQ29sb3I6IGRhcmtlbihib3JkZXJDb2xvciwgMTUpLFxyXG5cdFx0Ym94U2hhZG93OiAnbm9uZScsXHJcblx0XHRjb2xvcjogdGV4dENvbG9yLFxyXG5cdFx0b3V0bGluZTogJ25vbmUnLFxyXG5cdH07XHJcblx0Y29uc3QgZm9jdXNPbmx5U3R5bGVzID0ge1xyXG5cdFx0Ym94U2hhZG93OiBgMCAwIDAgM3B4ICR7ZmFkZShib3JkZXJDb2xvciwgMTApfWAsXHJcblx0fTtcclxuXHRjb25zdCBhY3RpdmVTdHlsZXMgPSB7XHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IGZhZGUoYm9yZGVyQ29sb3IsIDM1KSxcclxuXHRcdGJvcmRlckNvbG9yOiBkYXJrZW4oYm9yZGVyQ29sb3IsIDI1KSxcclxuXHRcdGJveFNoYWRvdzogJ25vbmUnLFxyXG5cdH07XHJcblxyXG5cdHJldHVybiB7XHJcblx0XHRiYXNlOiB7XHJcblx0XHRcdCdiYWNrZ3JvdW5kJzogJ25vbmUnLFxyXG5cdFx0XHQnYm9yZGVyQ29sb3InOiBib3JkZXJDb2xvcixcclxuXHRcdFx0J2NvbG9yJzogdGV4dENvbG9yLFxyXG5cclxuXHRcdFx0Jzpob3Zlcic6IGZvY3VzQW5kSG92ZXJTdHlsZXMsXHJcblx0XHRcdCc6Zm9jdXMgJzogT2JqZWN0LmFzc2lnbih7fSwgZm9jdXNBbmRIb3ZlclN0eWxlcywgZm9jdXNPbmx5U3R5bGVzKSxcclxuXHRcdFx0JzphY3RpdmUnOiBhY3RpdmVTdHlsZXMsXHJcblx0XHR9LFxyXG5cdFx0YWN0aXZlOiBhY3RpdmVTdHlsZXMsXHJcblx0fTtcclxufTtcclxuZXhwb3J0cy5ob2xsb3cgPSAoY29sb3IpID0+IHtcclxuXHQvLyBUT0RPOiBiZXR0ZXIgaGFuZGxpbmcgb2YgY2FuY2VsIGFuZCBkZWxldGUgY29sb3JzXHJcblx0aWYgKGNvbG9yID09PSAnY2FuY2VsJyB8fCBjb2xvciA9PT0gJ2RlbGV0ZScpIGNvbG9yID0gJ2Rhbmdlcic7XHJcblxyXG5cdHJldHVybiBidXR0b25Ib2xsb3dWYXJpYW50KHRoZW1lLmJ1dHRvbltjb2xvcl0uYmdDb2xvciwgdGhlbWUuYnV0dG9uW2NvbG9yXS5ib3JkZXJDb2xvcik7XHJcbn07XHJcblxyXG5cclxuLy8gTGluayBWYXJpYW50XHJcbi8vIC0tLS0tLS0tLS0tLS0tLS1cclxuZnVuY3Rpb24gYnV0dG9uTGlua1ZhcmlhbnQgKHRleHRDb2xvciwgaG92ZXJDb2xvcikge1xyXG5cdGNvbnN0IGhvdmVyU3R5bGVzID0ge1xyXG5cdFx0Y29sb3I6IGhvdmVyQ29sb3IsXHJcblx0XHR0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZScsXHJcblx0fTtcclxuXHRyZXR1cm4ge1xyXG5cdFx0YmFzZToge1xyXG5cdFx0XHQnYmFja2dyb3VuZCc6ICdub25lJyxcclxuXHRcdFx0J2JvcmRlcic6IDAsXHJcblx0XHRcdCdib3hTaGFkb3cnOiAnbm9uZScsXHJcblx0XHRcdCdjb2xvcic6IHRleHRDb2xvcixcclxuXHRcdFx0J2ZvbnRXZWlnaHQnOiAnbm9ybWFsJyxcclxuXHRcdFx0J291dGxpbmUnOiAnbm9uZScsXHJcblxyXG5cdFx0XHQnOmhvdmVyJzogaG92ZXJTdHlsZXMsXHJcblx0XHRcdCc6Zm9jdXMnOiBob3ZlclN0eWxlcyxcclxuXHRcdFx0JzphY3RpdmUnOiBob3ZlclN0eWxlcyxcclxuXHRcdH0sXHJcblx0XHRhY3RpdmU6IGhvdmVyU3R5bGVzLFxyXG5cdH07XHJcbn07XHJcbmZ1bmN0aW9uIGJ1dHRvbkxpbmtEZWxldGUgKCkge1xyXG5cdGNvbnN0IHN0eWxlcyA9IGJ1dHRvbkxpbmtWYXJpYW50KHRoZW1lLmNvbG9yLmdyYXk0MCwgdGhlbWUuY29sb3IuZGFuZ2VyKTtcclxuXHRjb25zdCBob3ZlclN0eWxlcyA9IHtcclxuXHRcdC4uLmdyYWRpZW50VmVydGljYWwobGlnaHRlbih0aGVtZS5jb2xvci5kYW5nZXIsIDEwKSwgZGFya2VuKHRoZW1lLmNvbG9yLmRhbmdlciwgMTApKSxcclxuXHRcdGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3IuZGFuZ2VyLFxyXG5cdFx0Ym9yZGVyQ29sb3I6IGAke2Rhcmtlbih0aGVtZS5jb2xvci5kYW5nZXIsIDQpfSAke2Rhcmtlbih0aGVtZS5jb2xvci5kYW5nZXIsIDgpfSAke2Rhcmtlbih0aGVtZS5jb2xvci5kYW5nZXIsIDEyKX1gLFxyXG5cdFx0Ym94U2hhZG93OiAnMCAxcHggMCByZ2JhKDAsMCwwLDAuMSknLFxyXG5cdFx0Y29sb3I6ICd3aGl0ZScsXHJcblx0XHR0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxyXG5cdH07XHJcblx0Y29uc3QgYWN0aXZlU3R5bGVzID0ge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCA0KSxcclxuXHRcdGJhY2tncm91bmRJbWFnZTogJ25vbmUnLFxyXG5cdFx0Ym9yZGVyQ29sb3I6IGAke2Rhcmtlbih0aGVtZS5jb2xvci5kYW5nZXIsIDEyKX0gJHtkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCA4KX0gJHtkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCA4KX1gLFxyXG5cdFx0Ym94U2hhZG93OiAnaW5zZXQgMCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4xKScsXHJcblx0XHRjb2xvcjogJ3doaXRlJyxcclxuXHR9O1xyXG5cdHJldHVybiB7XHJcblx0XHRiYXNlOiB7XHJcblx0XHRcdC4uLnN0eWxlcy5iYXNlLFxyXG5cdFx0XHQnOmhvdmVyJzogaG92ZXJTdHlsZXMsXHJcblx0XHRcdCc6Zm9jdXMnOiBob3ZlclN0eWxlcyxcclxuXHRcdFx0JzphY3RpdmUnOiBhY3RpdmVTdHlsZXMsXHJcblx0XHR9LFxyXG5cdFx0YWN0aXZlOiBhY3RpdmVTdHlsZXMsXHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0cy5saW5rID0gKGNvbG9yKSA9PiB7XHJcblx0c3dpdGNoIChjb2xvcikge1xyXG5cdFx0Y2FzZSAnZGVmYXVsdCc6XHJcblx0XHRcdHJldHVybiBidXR0b25MaW5rVmFyaWFudCh0aGVtZS5jb2xvci5saW5rLCB0aGVtZS5jb2xvci5saW5rSG92ZXIpO1xyXG5cdFx0Y2FzZSAnY2FuY2VsJzpcclxuXHRcdFx0cmV0dXJuIGJ1dHRvbkxpbmtWYXJpYW50KHRoZW1lLmNvbG9yLmdyYXk0MCwgdGhlbWUuY29sb3IuZGFuZ2VyKTtcclxuXHRcdGNhc2UgJ2RlbGV0ZSc6XHJcblx0XHRcdHJldHVybiBidXR0b25MaW5rRGVsZXRlKCk7XHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHRyZXR1cm4gYnV0dG9uTGlua1ZhcmlhbnQodGhlbWUuY29sb3JbY29sb3JdLCB0aGVtZS5jb2xvcltjb2xvcl0pO1xyXG5cdH1cclxufTtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9zdHlsZXMnO1xyXG5cclxuZnVuY3Rpb24gQ2VudGVyICh7XHJcblx0Y2xhc3NOYW1lLFxyXG5cdGNvbXBvbmVudDogQ29tcG9uZW50LFxyXG5cdGhlaWdodCxcclxuXHRzdHlsZSxcclxuXHQuLi5wcm9wc1xyXG59KSB7XHJcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKGNsYXNzZXMuY2VudGVyLCBjbGFzc05hbWUpO1xyXG5cdHByb3BzLnN0eWxlID0geyBoZWlnaHQsIC4uLnN0eWxlIH07XHJcblxyXG5cdHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz47XHJcbn07XHJcbkNlbnRlci5wcm9wVHlwZXMgPSB7XHJcblx0Y29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5mdW5jLFxyXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcclxuXHRdKSxcclxuXHRoZWlnaHQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLm51bWJlcixcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XSksXHJcbn07XHJcbkNlbnRlci5kZWZhdWx0UHJvcHMgPSB7XHJcblx0Y29tcG9uZW50OiAnZGl2JyxcclxuXHRoZWlnaHQ6ICdhdXRvJyxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQ2VudGVyO1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gQ2VudGVyXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0Y2VudGVyOiB7XHJcblx0XHRkaXNwbGF5OiAnZmxleCcsXHJcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuXHRcdGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcclxuXHR9LFxyXG59O1xyXG4iLCJpbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5pbXBvcnQgeyBmYWRlLCBsaWdodGVuIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY29sb3InO1xyXG5cclxuY29uc3QgYmFzZUNvbG9ycyA9IHt9O1xyXG5bJ2RhbmdlcicsICdpbmZvJywgJ3ByaW1hcnknLCAnc3VjY2VzcycsICd3YXJuaW5nJ10uZm9yRWFjaChjb2xvciA9PiB7XHJcblx0YmFzZUNvbG9yc1tjb2xvcl0gPSB7XHJcblx0XHRiYWNrZ3JvdW5kOiBmYWRlKHRoZW1lLmNvbG9yW2NvbG9yXSwgMTApLFxyXG5cdFx0YmFja2dyb3VuZEFjdGl2ZTogZmFkZSh0aGVtZS5jb2xvcltjb2xvcl0sIDIwKSxcclxuXHRcdGJhY2tncm91bmRIb3ZlcjogZmFkZSh0aGVtZS5jb2xvcltjb2xvcl0sIDE1KSxcclxuXHRcdHRleHQ6IHRoZW1lLmNvbG9yW2NvbG9yXSxcclxuXHR9O1xyXG59KTtcclxuY29uc3QgaW52ZXJ0ZWRDb2xvcnMgPSB7fTtcclxuWydkYW5nZXInLCAnaW5mbycsICdwcmltYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddLmZvckVhY2goY29sb3IgPT4ge1xyXG5cdGludmVydGVkQ29sb3JzW2NvbG9yICsgJ19faW52ZXJ0ZWQnXSA9IHtcclxuXHRcdGJhY2tncm91bmQ6IHRoZW1lLmNvbG9yW2NvbG9yXSxcclxuXHRcdGJhY2tncm91bmRBY3RpdmU6IGxpZ2h0ZW4odGhlbWUuY29sb3JbY29sb3JdLCA1KSxcclxuXHRcdGJhY2tncm91bmRIb3ZlcjogbGlnaHRlbih0aGVtZS5jb2xvcltjb2xvcl0sIDE1KSxcclxuXHRcdHRleHQ6ICd3aGl0ZScsXHJcblx0fTtcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRkZWZhdWx0OiB7XHJcblx0XHRiYWNrZ3JvdW5kOiB0aGVtZS5jb2xvci5ncmF5MTAsXHJcblx0XHRiYWNrZ3JvdW5kQWN0aXZlOiB0aGVtZS5jb2xvci5ncmF5MjAsXHJcblx0XHRiYWNrZ3JvdW5kSG92ZXI6IHRoZW1lLmNvbG9yLmdyYXkxNSxcclxuXHRcdHRleHQ6IHRoZW1lLmNvbG9yLmdyYXk2MCxcclxuXHR9LFxyXG5cdC4uLmJhc2VDb2xvcnMsXHJcblxyXG5cdC8vIGludmVydGVkXHJcblx0ZGVmYXVsdF9faW52ZXJ0ZWQ6IHtcclxuXHRcdGJhY2tncm91bmQ6IHRoZW1lLmNvbG9yLmdyYXk2MCxcclxuXHRcdGJhY2tncm91bmRBY3RpdmU6IGxpZ2h0ZW4odGhlbWUuY29sb3IuZ3JheTYwLCA1KSxcclxuXHRcdGJhY2tncm91bmRIb3ZlcjogbGlnaHRlbih0aGVtZS5jb2xvci5ncmF5NjAsIDE1KSxcclxuXHRcdHRleHQ6ICd3aGl0ZScsXHJcblx0fSxcclxuXHQuLi5pbnZlcnRlZENvbG9ycyxcclxufTtcclxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9zdHlsZXMnO1xyXG5pbXBvcnQgY29sb3JzIGZyb20gJy4vY29sb3JzJztcclxuXHJcbmZ1bmN0aW9uIENoaXAgKHtcclxuXHRjbGFzc05hbWUsXHJcblx0Y2hpbGRyZW4sXHJcblx0Y29sb3IsXHJcblx0aW52ZXJ0ZWQsXHJcblx0bGFiZWwsXHJcblx0b25DbGVhcixcclxuXHRvbkNsaWNrLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXHJcblx0XHRjbGFzc2VzLmNoaXAsXHJcblx0XHRjbGFzc05hbWVcclxuXHQpO1xyXG5cdGNvbnN0IGxhYmVsQ2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0Y2xhc3Nlcy5idXR0b24sXHJcblx0XHRjbGFzc2VzLmxhYmVsLFxyXG5cdFx0Y2xhc3Nlc1snYnV0dG9uX18nICsgY29sb3IgKyAoaW52ZXJ0ZWQgPyAnX19pbnZlcnRlZCcgOiAnJyldXHJcblx0KTtcclxuXHRjb25zdCBjbGVhckNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdGNsYXNzZXMuYnV0dG9uLFxyXG5cdFx0Y2xhc3Nlcy5jbGVhcixcclxuXHRcdGNsYXNzZXNbJ2J1dHRvbl9fJyArIGNvbG9yICsgKGludmVydGVkID8gJ19faW52ZXJ0ZWQnIDogJycpXVxyXG5cdCk7XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2IHsuLi5wcm9wc30+XHJcblx0XHRcdDxidXR0b24gdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9e29uQ2xpY2t9IGNsYXNzTmFtZT17bGFiZWxDbGFzc05hbWV9PlxyXG5cdFx0XHRcdHtsYWJlbH1cclxuXHRcdFx0XHR7Y2hpbGRyZW59XHJcblx0XHRcdDwvYnV0dG9uPlxyXG5cdFx0XHR7ISFvbkNsZWFyICYmIChcclxuXHRcdFx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXtvbkNsZWFyfSBjbGFzc05hbWU9e2NsZWFyQ2xhc3NOYW1lfT5cclxuXHRcdFx0XHRcdCZ0aW1lcztcclxuXHRcdFx0XHQ8L2J1dHRvbj5cclxuXHRcdFx0KX1cclxuXHRcdDwvZGl2PlxyXG5cdCk7XHJcbn07XHJcblxyXG5DaGlwLnByb3BUeXBlcyA9IHtcclxuXHRjb2xvcjogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKGNvbG9ycykpLmlzUmVxdWlyZWQsXHJcblx0aW52ZXJ0ZWQ6IFByb3BUeXBlcy5ib29sLFxyXG5cdGxhYmVsOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcblx0b25DbGVhcjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcblx0b25DbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcbn07XHJcbkNoaXAuZGVmYXVsdFByb3BzID0ge1xyXG5cdGNvbG9yOiAnZGVmYXVsdCcsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IENoaXA7XHJcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBBbGVydFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cclxuXHJcbmltcG9ydCBjb2xvcnMgZnJvbSAnLi9jb2xvcnMnO1xyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5pbXBvcnQgeyBib3JkZXJMZWZ0UmFkaXVzLCBib3JkZXJSaWdodFJhZGl1cyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2Nzcyc7XHJcblxyXG4vLyBQcmVwYXJlIHZhcmlhbnRzXHJcbmNvbnN0IGNvbG9yVmFyaWFudHMgPSB7fTtcclxuT2JqZWN0LmtleXMoY29sb3JzKS5mb3JFYWNoKGNvbG9yID0+IHtcclxuXHRjb25zdCBob3ZlclN0eWxlcyA9IHtcclxuXHRcdGJhY2tncm91bmRDb2xvcjogY29sb3JzW2NvbG9yXS5iYWNrZ3JvdW5kSG92ZXIsXHJcblx0fTtcclxuXHJcblx0Y29sb3JWYXJpYW50c1snYnV0dG9uX18nICsgY29sb3JdID0ge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBjb2xvcnNbY29sb3JdLmJhY2tncm91bmQsXHJcblx0XHRjb2xvcjogY29sb3JzW2NvbG9yXS50ZXh0LFxyXG5cclxuXHRcdCc6aG92ZXInOiBob3ZlclN0eWxlcyxcclxuXHRcdCc6Zm9jdXMnOiBob3ZlclN0eWxlcyxcclxuXHRcdCc6YWN0aXZlJzoge1xyXG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yc1tjb2xvcl0uYmFja2dyb3VuZEFjdGl2ZSxcclxuXHRcdH0sXHJcblx0fTtcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRjaGlwOiB7XHJcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdGZvbnRTaXplOiB0aGVtZS5mb250LnNpemUuc21hbGwsXHJcblx0XHRmb250V2VpZ2h0OiA1MDAsXHJcblx0XHRtYXJnaW5SaWdodDogJzAuNWVtJyxcclxuXHRcdG92ZXJmbG93OiAnaGlkZGVuJyxcclxuXHRcdGxpbmVIZWlnaHQ6ICcyLjJlbScsXHJcblx0fSxcclxuXHJcblx0Ly8gdGFnbmFtZXNcclxuXHRidXR0b246IHtcclxuXHRcdGFwcGVhcmFuY2U6ICdub25lJyxcclxuXHRcdGJhY2tncm91bmQ6ICdub25lJyxcclxuXHRcdGJvcmRlcjogJ25vbmUnLFxyXG5cdFx0Y3Vyc29yOiAncG9pbnRlcicsXHJcblx0XHRkaXNwbGF5OiAnYmxvY2snLFxyXG5cdFx0ZmxvYXQ6ICdsZWZ0JyxcclxuXHRcdHBhZGRpbmc6ICcwIC45ZW0nLFxyXG5cdFx0b3V0bGluZTogJ25vbmUnLFxyXG5cclxuXHRcdC8vIG1ha2UgcGlsbHMgLSBleGFnZ2VyYXRlIHRoZSBwYWRkaW5nIHRvd2FyZCB0aGUgcmFkaWkgc28gaXQgbG9va3MgZXZlblxyXG5cdFx0JzpmaXJzdC1jaGlsZCc6IHtcclxuXHRcdFx0Li4uYm9yZGVyTGVmdFJhZGl1cygnM2VtJyksXHJcblx0XHRcdHBhZGRpbmdMZWZ0OiAnMS4xZW0nLFxyXG5cdFx0fSxcclxuXHRcdCc6bGFzdC1jaGlsZCc6IHtcclxuXHRcdFx0Li4uYm9yZGVyUmlnaHRSYWRpdXMoJzNlbScpLFxyXG5cdFx0XHRwYWRkaW5nUmlnaHQ6ICcxLjFlbScsXHJcblx0XHR9LFxyXG5cdH0sXHJcblxyXG5cclxuXHQvLyBwcm92aWRlIHNlcGFyYXRpb24gYmV0d2VlbiB0aGUgbGFiZWwgYW5kIGNsZWFyIGJ1dHRvbnNcclxuXHQvLyBmbG9hdGluZyBzdG9wcyB0aGUgbWFyZ2lucyBmcm9tIGNvbGxhcHNpbmcgaW50byBlYWNoaW5nXHJcblxyXG5cdGxhYmVsOiB7IG1hcmdpblJpZ2h0OiAxIH0sXHJcblx0Y2xlYXI6IHsgbWFyZ2luTGVmdDogMSB9LFxyXG5cclxuXHQvLyBjb2xvcnNcclxuXHQuLi5jb2xvclZhcmlhbnRzLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XHJcbmltcG9ydCBzaXplcyBmcm9tICcuL3NpemVzJztcclxuXHJcbmZ1bmN0aW9uIENvbnRhaW5lciAoe1xyXG5cdGNsYXNzTmFtZSxcclxuXHRjbGVhckZsb2F0aW5nQ2hpbGRyZW4sXHJcblx0Y29tcG9uZW50OiBDb21wb25lbnQsXHJcblx0d2lkdGgsXHJcblx0Li4ucHJvcHNcclxufSkge1xyXG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdGNsYXNzZXMuY29udGFpbmVyLFxyXG5cdFx0Y2xhc3Nlc1t3aWR0aF0sXHJcblx0XHRjbGVhckZsb2F0aW5nQ2hpbGRyZW4gPyBjbGFzc2VzLmNsZWFyZml4IDogbnVsbFxyXG5cdCk7XHJcblx0cHJvcHMuY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lO1xyXG5cdHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz47XHJcbn07XHJcblxyXG5Db250YWluZXIucHJvcFR5cGVzID0ge1xyXG5cdGNsZWFyRmxvYXRpbmdDaGlsZHJlbjogUHJvcFR5cGVzLmJvb2wsXHJcblx0Y29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5mdW5jLFxyXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcclxuXHRdKS5pc1JlcXVpcmVkLFxyXG5cdHdpZHRoOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoc2l6ZXMpKS5pc1JlcXVpcmVkLFxyXG59O1xyXG5Db250YWluZXIuZGVmYXVsdFByb3BzID0ge1xyXG5cdGNvbXBvbmVudDogJ2RpdicsXHJcblx0d2lkdGg6ICdsYXJnZScsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRhaW5lcjtcclxuIiwiaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdHNtYWxsOiB0aGVtZS5jb250YWluZXIuc2l6ZS5zbWFsbCxcclxuXHRtZWRpdW06IHRoZW1lLmNvbnRhaW5lci5zaXplLm1lZGl1bSxcclxuXHRsYXJnZTogdGhlbWUuY29udGFpbmVyLnNpemUubGFyZ2UsXHJcbn07XHJcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBDb250YWluZXJcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXHJcblxyXG5pbXBvcnQgc2l6ZXMgZnJvbSAnLi9zaXplcyc7XHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG4vLyBQcmVwYXJlIHNpemVzXHJcbmNvbnN0IHNpemVWYXJpYW50cyA9IHt9O1xyXG5PYmplY3Qua2V5cyhzaXplcykuZm9yRWFjaChzaXplID0+IHtcclxuXHRzaXplVmFyaWFudHNbc2l6ZV0gPSB7XHJcblx0XHRtYXhXaWR0aDogc2l6ZXNbc2l6ZV0sXHJcblx0fTtcclxufSk7XHJcblxyXG4vKlxyXG5cdE1pY3JvIGNsZWFyZml4IGhhY2tcclxuXHQxLlx0VGhlIHNwYWNlIGNvbnRlbnQgaXMgb25lIHdheSB0byBhdm9pZCBhbiBPcGVyYSBidWcgd2hlbiB0aGVcclxuXHRcdFx0Y29udGVudGVkaXRhYmxlIGF0dHJpYnV0ZSBpcyBpbmNsdWRlZCBhbnl3aGVyZSBlbHNlIGluIHRoZSBkb2N1bWVudC5cclxuXHRcdFx0T3RoZXJ3aXNlIGl0IGNhdXNlcyBzcGFjZSB0byBhcHBlYXIgYXQgdGhlIHRvcCBhbmQgYm90dG9tIG9mIGVsZW1lbnRzXHJcblx0XHRcdHRoYXQgYXJlIGNsZWFyZml4ZWQuXHJcblx0Mi5cdFRoZSB1c2Ugb2YgYHRhYmxlYCByYXRoZXIgdGhhbiBgYmxvY2tgIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIHVzaW5nXHJcblx0XHRcdGA6YmVmb3JlYCB0byBjb250YWluIHRoZSB0b3AtbWFyZ2lucyBvZiBjaGlsZCBlbGVtZW50cy5cclxuKi9cclxuY29uc3QgY2xlYXJmaXhTdHlsZXMgPSB7XHJcblx0Y2xlYXI6ICdib3RoJyxcclxuXHRjb250ZW50OiAnXCIgXCInLCAvLyAxXHJcblx0ZGlzcGxheTogJ3RhYmxlJywgLy8gMlxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0Y29udGFpbmVyOiB7XHJcblx0XHRtYXJnaW5MZWZ0OiAnYXV0bycsXHJcblx0XHRtYXJnaW5SaWdodDogJ2F1dG8nLFxyXG5cdFx0cGFkZGluZ0xlZnQ6IHRoZW1lLmNvbnRhaW5lci5ndXR0ZXIsXHJcblx0XHRwYWRkaW5nUmlnaHQ6IHRoZW1lLmNvbnRhaW5lci5ndXR0ZXIsXHJcblx0fSxcclxuXHJcblx0Ly8gY2xlYXIgZmxvYXRpbmcgY2hpbGRyZW5cclxuXHRjbGVhcmZpeDoge1xyXG5cdFx0JzpiZWZvcmUnOiBjbGVhcmZpeFN0eWxlcyxcclxuXHRcdCc6YWZ0ZXInOiBjbGVhcmZpeFN0eWxlcyxcclxuXHR9LFxyXG5cclxuXHQvLyBzaXplc1xyXG5cdC4uLnNpemVWYXJpYW50cyxcclxufTtcclxuIiwiLyogZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9CdXR0b24nO1xyXG5cclxuZnVuY3Rpb24gRHJvcGRvd25CdXR0b24gKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pIHtcclxuXHRyZXR1cm4gKFxyXG5cdFx0PEJ1dHRvbiB7Li4ucHJvcHN9PlxyXG5cdFx0XHR7Y2hpbGRyZW59XHJcblx0XHRcdDxzcGFuIGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuYXJyb3cpfSAvPlxyXG5cdFx0PC9CdXR0b24+XHJcblx0KTtcclxufTtcclxuXHJcbi8vIE5PVEVcclxuLy8gMTogdGFrZSBhZHZhbnRhZ2Ugb2YgYGN1cnJlbnRDb2xvcmAgYnkgbGVhdmluZyBib3JkZXIgdG9wIGNvbG9yIHVuZGVmaW5lZFxyXG4vLyAyOiBldmVuIHRob3VnaCB0aGUgYXJyb3cgaXMgdmVydGljYWxseSBjZW50ZXJlZCwgdmlzdWFsbHkgaXQgYXBwZWFycyB0b28gbG93XHJcbi8vICAgIGJlY2F1c2Ugb2YgbG93ZXJjYXNlIGNoYXJhY3RlcnMgYmVzaWRlIGl0XHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0YXJyb3c6IHtcclxuXHRcdGJvcmRlckxlZnQ6ICcwLjNlbSBzb2xpZCB0cmFuc3BhcmVudCcsXHJcblx0XHRib3JkZXJSaWdodDogJzAuM2VtIHNvbGlkIHRyYW5zcGFyZW50JyxcclxuXHRcdGJvcmRlclRvcDogJzAuM2VtIHNvbGlkJywgLy8gMVxyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHRoZWlnaHQ6IDAsXHJcblx0XHRtYXJnaW5Ub3A6ICctMC4xMjVlbScsIC8vIDJcclxuXHRcdHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxyXG5cdFx0d2lkdGg6IDAsXHJcblxyXG5cdFx0Ly8gYWRkIHNwYWNpbmdcclxuXHRcdCc6Zmlyc3QtY2hpbGQnOiB7XHJcblx0XHRcdG1hcmdpblJpZ2h0OiAnMC41ZW0nLFxyXG5cdFx0fSxcclxuXHRcdCc6bGFzdC1jaGlsZCc6IHtcclxuXHRcdFx0bWFyZ2luTGVmdDogJzAuNWVtJyxcclxuXHRcdH0sXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRHJvcGRvd25CdXR0b247XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcclxuaW1wb3J0IEZvcm1MYWJlbCBmcm9tICcuLi9Gb3JtTGFiZWwnO1xyXG5cclxuY2xhc3MgRm9ybUZpZWxkIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHRjb25zdHJ1Y3RvciAoKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5mb3JtRmllbGRJZCA9IGdlbmVyYXRlSWQoKTtcclxuXHR9XHJcblx0Z2V0Q2hpbGRDb250ZXh0ICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGZvcm1GaWVsZElkOiB0aGlzLmZvcm1GaWVsZElkLFxyXG5cdFx0fTtcclxuXHR9XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IHsgZm9ybUxheW91dCA9ICdiYXNpYycsIGxhYmVsV2lkdGggfSA9IHRoaXMuY29udGV4dDtcclxuXHRcdGNvbnN0IHtcclxuXHRcdFx0YXBocm9kaXRlU3R5bGVzLFxyXG5cdFx0XHRjaGlsZHJlbixcclxuXHRcdFx0Y2xhc3NOYW1lLFxyXG5cdFx0XHRjcm9wTGFiZWwsXHJcblx0XHRcdGh0bWxGb3IsXHJcblx0XHRcdGxhYmVsLFxyXG5cdFx0XHRvZmZzZXRBYnNlbnRMYWJlbCxcclxuXHRcdFx0Li4ucHJvcHNcclxuXHRcdH0gPSB0aGlzLnByb3BzO1xyXG5cclxuXHRcdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdFx0Y2xhc3Nlcy5Gb3JtRmllbGQsXHJcblx0XHRcdGNsYXNzZXNbJ0Zvcm1GaWVsZC0tZm9ybS1sYXlvdXQtJyArIGZvcm1MYXlvdXRdLFxyXG5cdFx0XHRvZmZzZXRBYnNlbnRMYWJlbCA/IGNsYXNzZXNbJ0Zvcm1GaWVsZC0tb2Zmc2V0LWFic2VudC1sYWJlbCddIDogbnVsbCxcclxuXHRcdFx0YXBocm9kaXRlU3R5bGVzXHJcblx0XHQpO1xyXG5cdFx0aWYgKGNsYXNzTmFtZSkge1xyXG5cdFx0XHRwcm9wcy5jbGFzc05hbWUgKz0gKCcgJyArIGNsYXNzTmFtZSk7XHJcblx0XHR9XHJcblx0XHRpZiAob2Zmc2V0QWJzZW50TGFiZWwgJiYgbGFiZWxXaWR0aCkge1xyXG5cdFx0XHRwcm9wcy5zdHlsZSA9IHtcclxuXHRcdFx0XHRwYWRkaW5nTGVmdDogbGFiZWxXaWR0aCxcclxuXHRcdFx0XHQuLi5wcm9wcy5zdHlsZSxcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBlbGVtZW50c1xyXG5cdFx0Y29uc3QgY29tcG9uZW50TGFiZWwgPSBsYWJlbCA/IChcclxuXHRcdFx0PEZvcm1MYWJlbCBodG1sRm9yPXtodG1sRm9yfSBjcm9wVGV4dD17Y3JvcExhYmVsfT5cclxuXHRcdFx0XHR7bGFiZWx9XHJcblx0XHRcdDwvRm9ybUxhYmVsPlxyXG5cdFx0KSA6IG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiB7Li4ucHJvcHN9IGh0bWxGb3I9e2h0bWxGb3J9PlxyXG5cdFx0XHRcdHtjb21wb25lbnRMYWJlbH1cclxuXHRcdFx0XHR7Y2hpbGRyZW59XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9XHJcbn07XHJcblxyXG5jb25zdCBzdHlsZXNTaGFwZSA9IHtcclxuXHRfZGVmaW5pdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcclxuXHRfbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbkZvcm1GaWVsZC5jb250ZXh0VHlwZXMgPSB7XHJcblx0Zm9ybUxheW91dDogUHJvcFR5cGVzLm9uZU9mKFsnYmFzaWMnLCAnaG9yaXpvbnRhbCcsICdpbmxpbmUnXSksXHJcblx0bGFiZWxXaWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMubnVtYmVyLFxyXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcclxuXHRdKSxcclxufTtcclxuRm9ybUZpZWxkLmNoaWxkQ29udGV4dFR5cGVzID0ge1xyXG5cdGZvcm1GaWVsZElkOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5Gb3JtRmllbGQucHJvcFR5cGVzID0ge1xyXG5cdGFwaHJvZGl0ZVN0eWxlczogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoc3R5bGVzU2hhcGUpKSxcclxuXHRcdFByb3BUeXBlcy5zaGFwZShzdHlsZXNTaGFwZSksXHJcblx0XSksXHJcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxyXG5cdGNyb3BMYWJlbDogUHJvcFR5cGVzLmJvb2wsXHJcblx0aHRtbEZvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRsYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRvZmZzZXRBYnNlbnRMYWJlbDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcbn07XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZUlkICgpIHtcclxuXHRyZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGb3JtRmllbGQ7XHJcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBGb3JtIEZpZWxkXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdCdGb3JtRmllbGQnOiB7XHJcblx0XHRtYXJnaW5Cb3R0b206ICcxZW0nLFxyXG5cdFx0cG9zaXRpb246ICdyZWxhdGl2ZScsXHJcblx0fSxcclxuXHJcblx0Ly8gd2hlbiBpbnNpZGUgYSBob3Jpem9udGFsIGZvcm1cclxuXHJcblx0J0Zvcm1GaWVsZC0tZm9ybS1sYXlvdXQtaG9yaXpvbnRhbCc6IHtcclxuXHRcdFtgQG1lZGlhIChtaW4td2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC50YWJsZXRMYW5kc2NhcGVNaW59KWBdOiB7XHJcblx0XHRcdGRpc3BsYXk6ICd0YWJsZScsXHJcblx0XHRcdHRhYmxlTGF5b3V0OiAnZml4ZWQnLFxyXG5cdFx0XHR3aWR0aDogJzEwMCUnLFxyXG5cdFx0fSxcclxuXHR9LFxyXG5cclxuXHQvLyBpbnNpZGUgaG9yaXpvbnRhbCBmb3JtXHJcblx0Ly8gdHlwaWNhbGx5IGZvciB1c2Ugd2l0aCBzdWJtaXQgYnV0dG9uIGluc2lkZVxyXG5cdCdGb3JtRmllbGQtLW9mZnNldC1hYnNlbnQtbGFiZWwnOiB7XHJcblx0XHRwYWRkaW5nTGVmdDogdGhlbWUuZm9ybS5sYWJlbC53aWR0aCxcclxuXHR9LFxyXG5cclxuXHQvLyB3aGVuIGluc2lkZSBhbiBpbmxpbmUgZm9ybVxyXG5cclxuXHQnRm9ybUZpZWxkLS1mb3JtLWxheW91dC1pbmxpbmUnOiB7XHJcblx0XHQnZGlzcGxheSc6ICdpbmxpbmUtYmxvY2snLFxyXG5cdFx0J3BhZGRpbmdMZWZ0JzogJzAuMjVlbScsXHJcblx0XHQncGFkZGluZ1JpZ2h0JzogJzAuMjVlbScsXHJcblx0XHQndmVydGljYWxBbGlnbic6ICd0b3AnLFxyXG5cclxuXHRcdCc6Zmlyc3QtY2hpbGQnOiB7IHBhZGRpbmdMZWZ0OiAwIH0sXHJcblx0XHQnOmxhc3QtY2hpbGQnOiB7IHBhZGRpbmdSaWdodDogMCB9LFxyXG5cdH0sXHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9zdHlsZXMnO1xyXG5pbXBvcnQgY29uY2F0Q2xhc3NuYW1lcyBmcm9tICcuLi8uLi8uLi91dGlscy9jb25jYXRDbGFzc25hbWVzJztcclxuaW1wb3J0IElucHV0Tm9lZGl0IGZyb20gJy4vbm9lZGl0JztcclxuXHJcbi8vIE5PVEUgbXVzdCBOT1QgYmUgZnVuY3Rpb25hbCBjb21wb25lbnQgdG8gYWxsb3cgYHJlZnNgXHJcblxyXG5jbGFzcyBGb3JtSW5wdXQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cdGJsdXIgKCkge1xyXG5cdFx0dGhpcy50YXJnZXQuYmx1cigpO1xyXG5cdH1cclxuXHRmb2N1cyAoKSB7XHJcblx0XHR0aGlzLnRhcmdldC5mb2N1cygpO1xyXG5cdH1cclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3Qge1xyXG5cdFx0XHRhcGhyb2RpdGVTdHlsZXMsXHJcblx0XHRcdGNsYXNzTmFtZSxcclxuXHRcdFx0ZGlzYWJsZWQsXHJcblx0XHRcdGlkLFxyXG5cdFx0XHRtdWx0aWxpbmUsXHJcblx0XHRcdG5vZWRpdCxcclxuXHRcdFx0c2l6ZSxcclxuXHRcdFx0Li4ucHJvcHNcclxuXHRcdH0gPSB0aGlzLnByb3BzO1xyXG5cclxuXHRcdC8vIE5PVEUgcmV0dXJuIGEgZGlmZmVyZW50IGNvbXBvbmVudCBmb3IgYG5vZWRpdGBcclxuXHRcdGlmIChub2VkaXQpIHJldHVybiA8SW5wdXROb2VkaXQgey4uLnRoaXMucHJvcHN9IC8+O1xyXG5cclxuXHRcdGNvbnN0IHsgZm9ybUZpZWxkSWQsIGZvcm1MYXlvdXQgfSA9IHRoaXMuY29udGV4dDtcclxuXHJcblx0XHRwcm9wcy5pZCA9IGlkIHx8IGZvcm1GaWVsZElkO1xyXG5cdFx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0XHRjbGFzc2VzLkZvcm1JbnB1dCxcclxuXHRcdFx0Y2xhc3Nlc1snRm9ybUlucHV0X19zaXplLS0nICsgc2l6ZV0sXHJcblx0XHRcdGRpc2FibGVkID8gY2xhc3Nlc1snRm9ybUlucHV0LS1kaXNhYmxlZCddIDogbnVsbCxcclxuXHRcdFx0Zm9ybUxheW91dCA/IGNsYXNzZXNbJ0Zvcm1JbnB1dC0tZm9ybS1sYXlvdXQtJyArIGZvcm1MYXlvdXRdIDogbnVsbCxcclxuXHRcdFx0Li4uY29uY2F0Q2xhc3NuYW1lcyhhcGhyb2RpdGVTdHlsZXMpXHJcblx0XHQpO1xyXG5cdFx0aWYgKGNsYXNzTmFtZSkge1xyXG5cdFx0XHRwcm9wcy5jbGFzc05hbWUgKz0gKCcgJyArIGNsYXNzTmFtZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3Qgc2V0UmVmID0gKG4pID0+ICh0aGlzLnRhcmdldCA9IG4pO1xyXG5cdFx0Y29uc3QgVGFnID0gbXVsdGlsaW5lID8gJ3RleHRhcmVhJyA6ICdpbnB1dCc7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PFRhZ1xyXG5cdFx0XHRcdHJlZj17c2V0UmVmfVxyXG5cdFx0XHRcdGRpc2FibGVkPXtwcm9wcy5kaXNhYmxlZH1cclxuXHRcdFx0XHR7Li4ucHJvcHN9XHJcblx0XHRcdC8+XHJcblx0XHQpO1xyXG5cdH1cclxufTtcclxuXHJcbmNvbnN0IHN0eWxlc1NoYXBlID0ge1xyXG5cdF9kZWZpbml0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxyXG5cdF9uYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxuRm9ybUlucHV0LnByb3BUeXBlcyA9IHtcclxuXHRhcGhyb2RpdGVTdHlsZXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHN0eWxlc1NoYXBlKSksXHJcblx0XHRQcm9wVHlwZXMuc2hhcGUoc3R5bGVzU2hhcGUpLFxyXG5cdF0pLFxyXG5cdG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXHJcblx0c2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdzbWFsbCcsICdsYXJnZSddKSxcclxuXHR0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5Gb3JtSW5wdXQuZGVmYXVsdFByb3BzID0ge1xyXG5cdHNpemU6ICdkZWZhdWx0JyxcclxuXHR0eXBlOiAndGV4dCcsXHJcbn07XHJcbkZvcm1JbnB1dC5jb250ZXh0VHlwZXMgPSB7XHJcblx0Zm9ybUxheW91dDogUHJvcFR5cGVzLm9uZU9mKFsnYmFzaWMnLCAnaG9yaXpvbnRhbCcsICdpbmxpbmUnXSksXHJcblx0Zm9ybUZpZWxkSWQ6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1JbnB1dDtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuXHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcbmltcG9ydCB7IGZhZGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy9jb2xvcic7XHJcblxyXG4vKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXHJcblxyXG5mdW5jdGlvbiBGb3JtSW5wdXROb2VkaXQgKHtcclxuXHRjbGFzc05hbWUsXHJcblx0Y29tcG9uZW50OiBDb21wb25lbnQsXHJcblx0Y3JvcFRleHQsXHJcblx0bXVsdGlsaW5lLFxyXG5cdG5vZWRpdCwgLy8gTk9URSBub3QgdXNlZCwganVzdCByZW1vdmVkIGZyb20gcHJvcHNcclxuXHR0eXBlLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXHJcblx0XHRjbGFzc2VzLm5vZWRpdCxcclxuXHRcdGNyb3BUZXh0ID8gY2xhc3Nlcy5jcm9wVGV4dCA6IG51bGwsXHJcblx0XHRtdWx0aWxpbmUgPyBjbGFzc2VzLm11bHRpbGluZSA6IG51bGwsXHJcblx0XHQocHJvcHMuaHJlZiB8fCBwcm9wcy5vbkNsaWNrKSA/IGNsYXNzZXMuYW5jaG9yIDogbnVsbCxcclxuXHRcdGNsYXNzTmFtZVxyXG5cdCk7XHJcblxyXG5cdHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz47XHJcbn07XHJcblxyXG5Gb3JtSW5wdXROb2VkaXQucHJvcFR5cGVzID0ge1xyXG5cdGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0UHJvcFR5cGVzLmZ1bmMsXHJcblx0XSksXHJcblx0Y3JvcFRleHQ6IFByb3BUeXBlcy5ib29sLFxyXG59O1xyXG5Gb3JtSW5wdXROb2VkaXQuZGVmYXVsdFByb3BzID0ge1xyXG5cdGNvbXBvbmVudDogJ3NwYW4nLFxyXG59O1xyXG5cclxuY29uc3QgYW5jaG9ySG92ZXJBbmRGb2N1c1N0eWxlcyA9IHtcclxuXHRiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUuY29sb3IubGluaywgMTApLFxyXG5cdGJvcmRlckNvbG9yOiBmYWRlKHRoZW1lLmNvbG9yLmxpbmssIDEwKSxcclxuXHRjb2xvcjogdGhlbWUuY29sb3IubGluayxcclxuXHRvdXRsaW5lOiAnbm9uZScsXHJcblx0dGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnLFxyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRub2VkaXQ6IHtcclxuXHRcdGFwcGVhcmFuY2U6ICdub25lJyxcclxuXHRcdGJhY2tncm91bmRDb2xvcjogdGhlbWUuaW5wdXQuYmFja2dyb3VuZC5ub2VkaXQsXHJcblx0XHRiYWNrZ3JvdW5kSW1hZ2U6ICdub25lJyxcclxuXHRcdGJvcmRlckNvbG9yOiB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3Iubm9lZGl0LFxyXG5cdFx0Ym9yZGVyUmFkaXVzOiB0aGVtZS5pbnB1dC5ib3JkZXIucmFkaXVzLFxyXG5cdFx0Ym9yZGVyU3R5bGU6ICdzb2xpZCcsXHJcblx0XHRib3JkZXJXaWR0aDogdGhlbWUuaW5wdXQuYm9yZGVyLndpZHRoLFxyXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk4MCxcclxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxyXG5cdFx0aGVpZ2h0OiB0aGVtZS5pbnB1dC5oZWlnaHQsXHJcblx0XHRsaW5lSGVpZ2h0OiB0aGVtZS5pbnB1dC5saW5lSGVpZ2h0LFxyXG5cdFx0cGFkZGluZzogYDAgJHt0aGVtZS5pbnB1dC5wYWRkaW5nSG9yaXpvbnRhbH1gLFxyXG5cdFx0dHJhbnNpdGlvbjogJ2JvcmRlci1jb2xvciBlYXNlLWluLW91dCAwLjE1cywgYm94LXNoYWRvdyBlYXNlLWluLW91dCAwLjE1cycsXHJcblx0XHR2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcclxuXHJcblx0XHQvLyBwcmV2ZW50IGVtcHR5IGlucHV0cyBmcm9tIGNvbGxhcHNpbmcgYnkgYWRkaW5nIGNvbnRlbnRcclxuXHRcdCc6ZW1wdHk6YmVmb3JlJzoge1xyXG5cdFx0XHRjb2xvcjogdGhlbWUuY29sb3IuZ3JheTQwLFxyXG5cdFx0XHRjb250ZW50OiAnXCIobm8gdmFsdWUpXCInLFxyXG5cdFx0fSxcclxuXHR9LFxyXG5cclxuXHRtdWx0aWxpbmU6IHtcclxuXHRcdGRpc3BsYXk6ICdibG9jaycsXHJcblx0XHRoZWlnaHQ6ICdhdXRvJyxcclxuXHRcdGxpbmVIZWlnaHQ6ICcxLjQnLFxyXG5cdFx0cGFkZGluZ0JvdHRvbTogJzAuNmVtJyxcclxuXHRcdHBhZGRpbmdUb3A6ICcwLjZlbScsXHJcblx0fSxcclxuXHJcblx0Ly8gaW5kaWNhdGUgY2xpY2thYmlsaXR5IHdoZW4gdXNpbmcgYW4gYW5jaG9yXHJcblx0YW5jaG9yOiB7XHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUuY29sb3IubGluaywgNSksXHJcblx0XHRib3JkZXJDb2xvcjogZmFkZSh0aGVtZS5jb2xvci5saW5rLCAxMCksXHJcblx0XHRjb2xvcjogdGhlbWUuY29sb3IubGluayxcclxuXHRcdG1hcmdpblJpZ2h0OiA1LFxyXG5cdFx0bWluV2lkdGg6IDAsXHJcblx0XHR0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxyXG5cclxuXHRcdCc6aG92ZXInOiBhbmNob3JIb3ZlckFuZEZvY3VzU3R5bGVzLFxyXG5cdFx0Jzpmb2N1cyc6IGFuY2hvckhvdmVyQW5kRm9jdXNTdHlsZXMsXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRm9ybUlucHV0Tm9lZGl0O1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gRm9ybSBJbnB1dFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHQnRm9ybUlucHV0Jzoge1xyXG5cdFx0J2FwcGVhcmFuY2UnOiAnbm9uZScsXHJcblx0XHQnYmFja2dyb3VuZENvbG9yJzogdGhlbWUuaW5wdXQuYmFja2dyb3VuZC5kZWZhdWx0LFxyXG5cdFx0J2JhY2tncm91bmRJbWFnZSc6ICdub25lJyxcclxuXHRcdCdib3JkZXJDb2xvcic6IHRoZW1lLmlucHV0LmJvcmRlci5jb2xvci5kZWZhdWx0LFxyXG5cdFx0J2JvcmRlclJhZGl1cyc6IHRoZW1lLmlucHV0LmJvcmRlci5yYWRpdXMsXHJcblx0XHQnYm9yZGVyU3R5bGUnOiAnc29saWQnLFxyXG5cdFx0J2JvcmRlcldpZHRoJzogdGhlbWUuaW5wdXQuYm9yZGVyLndpZHRoLFxyXG5cdFx0J2JveFNoYWRvdyc6IHRoZW1lLmlucHV0LmJveFNoYWRvdyxcclxuXHRcdCdjb2xvcic6ICdpbmhlcml0JywgLy8gRklYTUVcclxuXHRcdCdkaXNwbGF5JzogJ2Jsb2NrJyxcclxuXHRcdCdoZWlnaHQnOiB0aGVtZS5pbnB1dC5oZWlnaHQsXHJcblx0XHQnbGluZUhlaWdodCc6IHRoZW1lLmlucHV0LmxpbmVIZWlnaHQsXHJcblx0XHQncGFkZGluZyc6IGAwICR7dGhlbWUuaW5wdXQucGFkZGluZ0hvcml6b250YWx9YCxcclxuXHRcdCd0cmFuc2l0aW9uJzogJ2JvcmRlci1jb2xvciBlYXNlLWluLW91dCAwLjE1cywgYm94LXNoYWRvdyBlYXNlLWluLW91dCAwLjE1cycsXHJcblx0XHQnd2lkdGgnOiAnMTAwJScsXHJcblxyXG5cdFx0Jzpob3Zlcic6IHtcclxuXHRcdFx0Ym9yZGVyQ29sb3I6IHRoZW1lLmlucHV0LmJvcmRlci5jb2xvci5ob3ZlcixcclxuXHRcdFx0b3V0bGluZTogMCxcclxuXHRcdH0sXHJcblx0XHQnOmZvY3VzJzoge1xyXG5cdFx0XHRib3JkZXJDb2xvcjogdGhlbWUuaW5wdXQuYm9yZGVyLmNvbG9yLmZvY3VzLFxyXG5cdFx0XHRib3hTaGFkb3c6IHRoZW1lLmlucHV0LmJveFNoYWRvd0ZvY3VzLFxyXG5cdFx0XHRvdXRsaW5lOiAwLFxyXG5cdFx0fSxcclxuXHR9LFxyXG5cdCdGb3JtSW5wdXQtLWRpc2FibGVkJzoge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiB0aGVtZS5pbnB1dC5iYWNrZ3JvdW5kLmRpc2FibGVkLFxyXG5cdFx0cG9pbnRlckV2ZW50czogJ25vbmUnLFxyXG5cdH0sXHJcblxyXG5cdC8vIHNpemVzXHJcblx0J0Zvcm1JbnB1dF9fc2l6ZS0tc21hbGwnOiB7XHJcblx0XHRmb250U2l6ZTogdGhlbWUuZm9udC5zaXplLnNtYWxsLFxyXG5cdH0sXHJcblx0J0Zvcm1JbnB1dF9fc2l6ZS0tbGFyZ2UnOiB7XHJcblx0XHRmb250U2l6ZTogdGhlbWUuZm9udC5zaXplLmxhcmdlLFxyXG5cdH0sXHJcbn07XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcclxuXHJcbmZ1bmN0aW9uIEZvcm1MYWJlbCAoe1xyXG5cdGFwaHJvZGl0ZVN0eWxlcyxcclxuXHRjbGFzc05hbWUsXHJcblx0Y29tcG9uZW50OiBDb21wb25lbnQsXHJcblx0Y3JvcFRleHQsXHJcblx0aHRtbEZvcixcclxuXHQuLi5wcm9wc1xyXG59LFxyXG57XHJcblx0Zm9ybUZpZWxkSWQsXHJcblx0Zm9ybUxheW91dCxcclxuXHRsYWJlbFdpZHRoLFxyXG59KSB7XHJcblx0cHJvcHMuaHRtbEZvciA9IGh0bWxGb3IgfHwgZm9ybUZpZWxkSWQ7XHJcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0Y2xhc3Nlcy5Gb3JtTGFiZWwsXHJcblx0XHRmb3JtTGF5b3V0ID8gY2xhc3Nlc1snRm9ybUxhYmVsLS1mb3JtLWxheW91dC0nICsgZm9ybUxheW91dF0gOiBudWxsLFxyXG5cdFx0Y3JvcFRleHQgPyBjbGFzc2VzWydGb3JtTGFiZWwtLWNyb3AtdGV4dCddIDogbnVsbCxcclxuXHRcdGFwaHJvZGl0ZVN0eWxlc1xyXG5cdCk7XHJcblx0aWYgKGNsYXNzTmFtZSkge1xyXG5cdFx0cHJvcHMuY2xhc3NOYW1lICs9ICgnICcgKyBjbGFzc05hbWUpO1xyXG5cdH1cclxuXHRpZiAobGFiZWxXaWR0aCkge1xyXG5cdFx0cHJvcHMuc3R5bGUgPSB7XHJcblx0XHRcdHdpZHRoOiBsYWJlbFdpZHRoLFxyXG5cdFx0XHQuLi5wcm9wcy5zdHlsZSxcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xyXG59O1xyXG5cclxuY29uc3Qgc3R5bGVzU2hhcGUgPSB7XHJcblx0X2RlZmluaXRpb246IFByb3BUeXBlcy5vYmplY3QsXHJcblx0X25hbWU6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcblxyXG5Gb3JtTGFiZWwucHJvcFR5cGVzID0ge1xyXG5cdGFwaHJvZGl0ZVN0eWxlczogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoc3R5bGVzU2hhcGUpKSxcclxuXHRcdFByb3BUeXBlcy5zaGFwZShzdHlsZXNTaGFwZSksXHJcblx0XSksXHJcblx0Y29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRQcm9wVHlwZXMuZnVuYyxcclxuXHRdKSxcclxuXHRjcm9wVGV4dDogUHJvcFR5cGVzLmJvb2wsXHJcbn07XHJcbkZvcm1MYWJlbC5kZWZhdWx0UHJvcHMgPSB7XHJcblx0Y29tcG9uZW50OiAnbGFiZWwnLFxyXG59O1xyXG5Gb3JtTGFiZWwuY29udGV4dFR5cGVzID0ge1xyXG5cdGZvcm1MYXlvdXQ6IFByb3BUeXBlcy5vbmVPZihbJ2Jhc2ljJywgJ2hvcml6b250YWwnLCAnaW5saW5lJ10pLFxyXG5cdGZvcm1GaWVsZElkOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdGxhYmVsV2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLm51bWJlcixcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XSksXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1MYWJlbDtcclxuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEZvcm0gTGFiZWxcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0J0Zvcm1MYWJlbCc6IHtcclxuXHRcdGNvbG9yOiB0aGVtZS5mb3JtLmxhYmVsLmNvbG9yLFxyXG5cdFx0Zm9udFNpemU6IHRoZW1lLmZvcm0ubGFiZWwuZm9udFNpemUsXHJcblx0XHRmb250V2VpZ2h0OiB0aGVtZS5mb3JtLmxhYmVsLmZvbnRXZWlnaHQsXHJcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdG1hcmdpbkJvdHRvbTogJzAuNWVtJyxcclxuXHR9LFxyXG5cclxuXHQvLyB3aGVuIGluc2lkZSBhIGhvcml6b250YWwgZm9ybVxyXG5cclxuXHQnRm9ybUxhYmVsLS1mb3JtLWxheW91dC1ob3Jpem9udGFsJzoge1xyXG5cdFx0W2BAbWVkaWEgKG1pbi13aWR0aDogJHt0aGVtZS5icmVha3BvaW50LnRhYmxldExhbmRzY2FwZU1pbn0pYF06IHtcclxuXHRcdFx0ZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxyXG5cdFx0XHRsaW5lSGVpZ2h0OiB0aGVtZS5jb21wb25lbnQubGluZUhlaWdodCwgLy8gZml4XHJcblx0XHRcdG1hcmdpbkJvdHRvbTogMCxcclxuXHRcdFx0cGFkZGluZ1JpZ2h0OiA1LFxyXG5cdFx0XHR2ZXJ0aWNhbEFsaWduOiAndG9wJyxcclxuXHRcdFx0d2lkdGg6IHRoZW1lLmZvcm0ubGFiZWwud2lkdGgsXHJcblx0XHR9LFxyXG5cdH0sXHJcblxyXG5cdC8vIGNyb3AgbG9uZyB0ZXh0XHJcblxyXG5cdCdGb3JtTGFiZWwtLWNyb3AtdGV4dCc6IHtcclxuXHRcdG92ZXJmbG93OiAnaGlkZGVuJyxcclxuXHRcdHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcclxuXHRcdHdoaXRlU3BhY2U6ICdub3dyYXAnLFxyXG5cdH0sXHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcclxuXHJcbmZ1bmN0aW9uIEZvcm1Ob3RlICh7XHJcblx0Y2xhc3NOYW1lLFxyXG5cdGNoaWxkcmVuLFxyXG5cdGNvbXBvbmVudDogQ29tcG9uZW50LFxyXG5cdGh0bWwsXHJcblx0Li4ucHJvcHNcclxufSkge1xyXG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhjbGFzc2VzLm5vdGUsIGNsYXNzTmFtZSk7XHJcblxyXG5cdC8vIFByb3BlcnR5IFZpb2xhdGlvblxyXG5cdGlmIChjaGlsZHJlbiAmJiBodG1sKSB7XHJcblx0XHRjb25zb2xlLmVycm9yKCdXYXJuaW5nOiBGb3JtTm90ZSBjYW5ub3QgcmVuZGVyIGBjaGlsZHJlbmAgYW5kIGBodG1sYC4gWW91IG11c3QgcHJvdmlkZSBvbmUgb3IgdGhlIG90aGVyLicpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGh0bWwgPyAoXHJcblx0XHQ8Q29tcG9uZW50IHsuLi5wcm9wc30gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBodG1sIH19IC8+XHJcblx0KSA6IChcclxuXHRcdDxDb21wb25lbnQgey4uLnByb3BzfT57Y2hpbGRyZW59PC9Db21wb25lbnQ+XHJcblx0KTtcclxufTtcclxuRm9ybU5vdGUucHJvcFR5cGVzID0ge1xyXG5cdGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMuZnVuYyxcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XSksXHJcblx0aHRtbDogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuRm9ybU5vdGUuZGVmYXVsdFByb3BzID0ge1xyXG5cdGNvbXBvbmVudDogJ2RpdicsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1Ob3RlO1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gRm9ybSBOb3RlXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdG5vdGU6IHtcclxuXHRcdGNvbG9yOiB0aGVtZS5mb3JtLm5vdGUuY29sb3IsXHJcblx0XHRmb250U2l6ZTogdGhlbWUuZm9ybS5ub3RlLmZvbnRTaXplLFxyXG5cdFx0bWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nLnNtYWxsLFxyXG5cdH0sXHJcbn07XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcclxuXHJcbmNsYXNzIEZvcm1TZWxlY3QgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRjb25zdCB7IGNoaWxkcmVuLCBpZCwgb3B0aW9ucywgLi4ucHJvcHMgfSA9IHRoaXMucHJvcHM7XHJcblx0XHRjb25zdCB7IGZvcm1GaWVsZElkIH0gPSB0aGlzLmNvbnRleHQ7XHJcblxyXG5cdFx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0XHRjbGFzc2VzLnNlbGVjdCxcclxuXHRcdFx0cHJvcHMuZGlzYWJsZWQgPyBjbGFzc2VzWydzZWxlY3QtLWRpc2FibGVkJ10gOiBudWxsXHJcblx0XHQpO1xyXG5cdFx0cHJvcHMuaWQgPSBpZCB8fCBmb3JtRmllbGRJZDtcclxuXHJcblx0XHQvLyBQcm9wZXJ0eSBWaW9sYXRpb25cclxuXHRcdGlmIChvcHRpb25zICYmIGNoaWxkcmVuKSB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1dhcm5pbmc6IEZvcm1TZWxlY3QgY2Fubm90IHJlbmRlciBgY2hpbGRyZW5gIGFuZCBgb3B0aW9uc2AuIFlvdSBtdXN0IHByb3ZpZGUgb25lIG9yIHRoZSBvdGhlci4nKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuY29udGFpbmVyKX0+XHJcblx0XHRcdFx0e29wdGlvbnMgPyAoXHJcblx0XHRcdFx0XHQ8c2VsZWN0IHsuLi5wcm9wc30+e29wdGlvbnMubWFwKG9wdCA9PiAoXHJcblx0XHRcdFx0XHRcdDxvcHRpb24ga2V5PXtvcHQudmFsdWV9IHZhbHVlPXtvcHQudmFsdWV9PlxyXG5cdFx0XHRcdFx0XHRcdHtvcHQubGFiZWx9XHJcblx0XHRcdFx0XHRcdDwvb3B0aW9uPlxyXG5cdFx0XHRcdFx0KSl9XHJcblx0XHRcdFx0XHQ8L3NlbGVjdD5cclxuXHRcdFx0XHQpIDogPHNlbGVjdCB7Li4ucHJvcHN9PntjaGlsZHJlbn08L3NlbGVjdD59XHJcblx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5hcnJvd3MsIHByb3BzLmRpc2FibGVkID8gY2xhc3Nlc1snYXJyb3dzLS1kaXNhYmxlZCddIDogbnVsbCl9PlxyXG5cdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5hcnJvdywgY2xhc3Nlcy5hcnJvd1RvcCl9IC8+XHJcblx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmFycm93LCBjbGFzc2VzLmFycm93Qm90dG9tKX0gLz5cclxuXHRcdFx0XHQ8L3NwYW4+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9XHJcbn07XHJcblxyXG5Gb3JtU2VsZWN0LmNvbnRleHRUeXBlcyA9IHtcclxuXHRmb3JtRmllbGRJZDogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuRm9ybVNlbGVjdC5wcm9wVHlwZXMgPSB7XHJcblx0b25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcblx0b3B0aW9uczogUmVhY3QuUHJvcFR5cGVzLmFycmF5T2YoXHJcblx0XHRSZWFjdC5Qcm9wVHlwZXMuc2hhcGUoe1xyXG5cdFx0XHRsYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdFx0dmFsdWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHR9KVxyXG5cdCksXHJcblx0dmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLm51bWJlcixcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XSksXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1TZWxlY3Q7XHJcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBGb3JtIFNlbGVjdFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cclxuXHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcbmltcG9ydCB7IGRhcmtlbiwgbGlnaHRlbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NvbG9yJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdGNvbnRhaW5lcjoge1xyXG5cdFx0cG9zaXRpb246ICdyZWxhdGl2ZScsXHJcblx0fSxcclxuXHJcblx0Ly8gc2VsZWN0IG5vZGVcclxuXHRzZWxlY3Q6IHtcclxuXHRcdGFwcGVhcmFuY2U6ICdub25lJyxcclxuXHRcdGJhY2tncm91bmRDb2xvcjogdGhlbWUuaW5wdXQuYmFja2dyb3VuZC5kZWZhdWx0LFxyXG5cdFx0YmFja2dyb3VuZEltYWdlOiAnbm9uZScsXHJcblx0XHRib3JkZXJDb2xvcjogdGhlbWUuaW5wdXQuYm9yZGVyLmNvbG9yLmRlZmF1bHQsXHJcblx0XHRib3JkZXJCb3R0b21Db2xvcjogZGFya2VuKHRoZW1lLmlucHV0LmJvcmRlci5jb2xvci5kZWZhdWx0LCA0KSxcclxuXHRcdGJvcmRlclRvcENvbG9yOiBsaWdodGVuKHRoZW1lLmlucHV0LmJvcmRlci5jb2xvci5kZWZhdWx0LCA0KSxcclxuXHRcdGJvcmRlclJhZGl1czogdGhlbWUuaW5wdXQuYm9yZGVyLnJhZGl1cyxcclxuXHRcdGJvcmRlclN0eWxlOiAnc29saWQnLFxyXG5cdFx0Ym9yZGVyV2lkdGg6IHRoZW1lLmlucHV0LmJvcmRlci53aWR0aCxcclxuXHRcdGJveFNoYWRvdzogdGhlbWUuc2VsZWN0LmJveFNoYWRvdyxcclxuXHRcdGNvbG9yOiAnaW5oZXJpdCcsIC8vIEZJWE1FXHJcblx0XHRkaXNwbGF5OiAnYmxvY2snLFxyXG5cdFx0aGVpZ2h0OiB0aGVtZS5pbnB1dC5oZWlnaHQsXHJcblx0XHRsaW5lSGVpZ2h0OiB0aGVtZS5pbnB1dC5saW5lSGVpZ2h0LFxyXG5cdFx0cGFkZGluZzogYDAgJHt0aGVtZS5pbnB1dC5wYWRkaW5nSG9yaXpvbnRhbH1gLFxyXG5cdFx0dHJhbnNpdGlvbjogJ2JvcmRlci1jb2xvciBlYXNlLWluLW91dCAwLjE1cywgYm94LXNoYWRvdyBlYXNlLWluLW91dCAwLjE1cycsXHJcblx0XHR3aWR0aDogJzEwMCUnLFxyXG5cclxuXHRcdCc6aG92ZXInOiB7XHJcblx0XHRcdGJvcmRlckNvbG9yOiB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuaG92ZXIsXHJcblx0XHRcdG91dGxpbmU6IDAsXHJcblx0XHR9LFxyXG5cdFx0Jzpmb2N1cyc6IHtcclxuXHRcdFx0Ym9yZGVyQ29sb3I6IHRoZW1lLmlucHV0LmJvcmRlci5jb2xvci5mb2N1cyxcclxuXHRcdFx0Ym94U2hhZG93OiB0aGVtZS5pbnB1dC5ib3hTaGFkb3dGb2N1cyxcclxuXHRcdFx0b3V0bGluZTogMCxcclxuXHRcdH0sXHJcblx0fSxcclxuXHQnc2VsZWN0LS1kaXNhYmxlZCc6IHtcclxuXHRcdGJhY2tncm91bmRDb2xvcjogdGhlbWUuaW5wdXQuYmFja2dyb3VuZC5kaXNhYmxlZCxcclxuXHRcdHBvaW50ZXJFdmVudHM6ICdub25lJyxcclxuXHR9LFxyXG5cclxuXHQvLyBhcnJvd3NcclxuXHRhcnJvd3M6IHtcclxuXHRcdGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG5cdFx0ZGlzcGxheTogJ2ZsZXgnLFxyXG5cdFx0ZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXHJcblx0XHRoZWlnaHQ6IHRoZW1lLmlucHV0LmhlaWdodCxcclxuXHRcdGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcclxuXHRcdHBvaW50ZXJFdmVudHM6ICdub25lJyxcclxuXHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG5cdFx0cmlnaHQ6IDAsXHJcblx0XHR0b3A6IDAsXHJcblx0XHR3aWR0aDogdGhlbWUuaW5wdXQuaGVpZ2h0LFxyXG5cdH0sXHJcblx0YXJyb3c6IHtcclxuXHRcdGJvcmRlckxlZnQ6ICcwLjNlbSBzb2xpZCB0cmFuc3BhcmVudCcsXHJcblx0XHRib3JkZXJSaWdodDogJzAuM2VtIHNvbGlkIHRyYW5zcGFyZW50JyxcclxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxyXG5cdFx0aGVpZ2h0OiAwLFxyXG5cdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZScsXHJcblx0XHR3aWR0aDogMCxcclxuXHRcdHpJbmRleDogMSxcclxuXHR9LFxyXG5cdGFycm93VG9wOiB7XHJcblx0XHRib3JkZXJCb3R0b206ICcwLjNlbSBzb2xpZCcsXHJcblx0XHRtYXJnaW5Cb3R0b206ICcwLjFlbScsXHJcblx0fSxcclxuXHRhcnJvd0JvdHRvbToge1xyXG5cdFx0Ym9yZGVyVG9wOiAnMC4zZW0gc29saWQnLFxyXG5cdFx0bWFyZ2luVG9wOiAnMC4xZW0nLFxyXG5cdH0sXHJcbn07XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9zdHlsZXMnO1xyXG5cclxuY2xhc3MgRm9ybSBleHRlbmRzIENvbXBvbmVudCB7XHJcblx0Z2V0Q2hpbGRDb250ZXh0ICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGZvcm1MYXlvdXQ6IHRoaXMucHJvcHMubGF5b3V0LFxyXG5cdFx0XHRsYWJlbFdpZHRoOiB0aGlzLnByb3BzLmxhYmVsV2lkdGgsXHJcblx0XHR9O1xyXG5cdH1cclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Ly8gTk9URSBgbGFiZWxXaWR0aGAgaXMgZGVjbGFyZWQgdG8gcmVtb3ZlIGl0IGZyb20gYHByb3BzYCwgdGhvdWdoIG5ldmVyIHVzZWRcclxuXHRcdGNvbnN0IHtcclxuXHRcdFx0Y2xhc3NOYW1lLFxyXG5cdFx0XHRjb21wb25lbnQ6IENvbXBvbmVudCxcclxuXHRcdFx0bGFiZWxXaWR0aCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG5cdFx0XHRsYXlvdXQsXHJcblx0XHRcdC4uLnByb3BzXHJcblx0XHR9ID0gdGhpcy5wcm9wcztcclxuXHJcblx0XHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXHJcblx0XHRcdGNsYXNzZXMuRm9ybSxcclxuXHRcdFx0Y2xhc3Nlc1snRm9ybV9fJyArIGxheW91dF0sXHJcblx0XHRcdGNsYXNzTmFtZVxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xyXG5cdH1cclxufTtcclxuXHJcbkZvcm0uY2hpbGRDb250ZXh0VHlwZXMgPSB7XHJcblx0Zm9ybUxheW91dDogUHJvcFR5cGVzLm9uZU9mKFsnYmFzaWMnLCAnaG9yaXpvbnRhbCcsICdpbmxpbmUnXSksXHJcblx0bGFiZWxXaWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMubnVtYmVyLFxyXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcclxuXHRdKSxcclxufTtcclxuRm9ybS5wcm9wVHlwZXMgPSB7XHJcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXHJcblx0Y29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRQcm9wVHlwZXMuZnVuYyxcclxuXHRdKSxcclxuXHRsYXlvdXQ6IFByb3BUeXBlcy5vbmVPZihbJ2Jhc2ljJywgJ2hvcml6b250YWwnLCAnaW5saW5lJ10pLFxyXG59O1xyXG5Gb3JtLmRlZmF1bHRQcm9wcyA9IHtcclxuXHRjb21wb25lbnQ6ICdmb3JtJyxcclxuXHRsYXlvdXQ6ICdiYXNpYycsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm07XHJcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBGb3JtXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0Rm9ybToge30sXHJcbn07XHJcbiIsIi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cclxuXHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vQnV0dG9uJztcclxuaW1wb3J0IEdseXBoIGZyb20gJy4uL0dseXBoJztcclxuXHJcbmZ1bmN0aW9uIEdseXBoQnV0dG9uICh7XHJcblx0Y2hpbGRyZW4sXHJcblx0Z2x5cGgsXHJcblx0Z2x5cGhDb2xvcixcclxuXHRnbHlwaFNpemUsXHJcblx0Z2x5cGhTdHlsZSxcclxuXHRwb3NpdGlvbixcclxuXHQuLi5wcm9wc1xyXG59KSB7XHJcblx0Y29uc3QgaXNEZWZhdWx0ID0gcG9zaXRpb24gPT09ICdkZWZhdWx0JztcclxuXHRjb25zdCBpc0xlZnQgPSBwb3NpdGlvbiA9PT0gJ2xlZnQnO1xyXG5cdGNvbnN0IGlzUmlnaHQgPSBwb3NpdGlvbiA9PT0gJ3JpZ2h0JztcclxuXHJcblx0Y29uc3Qgb2Zmc2V0ID0ge307XHJcblx0aWYgKGlzTGVmdCkgb2Zmc2V0Lm1hcmdpblJpZ2h0ID0gJzAuNWVtJztcclxuXHRpZiAoaXNSaWdodCkgb2Zmc2V0Lm1hcmdpbkxlZnQgPSAnMC41ZW0nO1xyXG5cclxuXHRjb25zdCBnbHlwaFN0eWxlcyA9IHtcclxuXHRcdC4uLm9mZnNldCxcclxuXHRcdC4uLmdseXBoU3R5bGUsXHJcblx0fTtcclxuXHJcblx0Y29uc3QgaWNvbiA9IChcclxuXHRcdDxHbHlwaFxyXG5cdFx0XHRhcGhyb2RpdGVTdHlsZXM9e2NsYXNzZXMuZ2x5cGh9XHJcblx0XHRcdGNvbG9yPXtnbHlwaENvbG9yfVxyXG5cdFx0XHRuYW1lPXtnbHlwaH1cclxuXHRcdFx0c2l6ZT17Z2x5cGhTaXplfVxyXG5cdFx0XHRzdHlsZT17Z2x5cGhTdHlsZXN9XHJcblx0XHQvPlxyXG5cdCk7XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8QnV0dG9uIHsuLi5wcm9wc30+XHJcblx0XHRcdHsoaXNEZWZhdWx0IHx8IGlzTGVmdCkgJiYgaWNvbn1cclxuXHRcdFx0e2NoaWxkcmVufVxyXG5cdFx0XHR7aXNSaWdodCAmJiBpY29ufVxyXG5cdFx0PC9CdXR0b24+XHJcblx0KTtcclxufTtcclxuXHJcbi8vIEZvciBwcm9wcyBcImdseXBoXCIsIFwiZ2x5cGhDb2xvclwiLCBhbmQgXCJnbHlwaFNpemVcIjpcclxuLy8gcHJvcCB0eXBlIHZhbGlkYXRpb24gd2lsbCBvY2N1ciB3aXRoaW4gdGhlIEdseXBoIGNvbXBvbmVudCwgbm8gbmVlZCB0b1xyXG4vLyBkdXBsaWNhdGUsIGp1c3QgcGFzcyBpdCB0aHJvdWdoLlxyXG5HbHlwaEJ1dHRvbi5wcm9wVHlwZXMgPSB7XHJcblx0Z2x5cGg6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0Z2x5cGhDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRnbHlwaFNpemU6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0Z2x5cGhTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcclxuXHRwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdsZWZ0JywgJ3JpZ2h0J10pLFxyXG59O1xyXG5HbHlwaEJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XHJcblx0Z2x5cGhTdHlsZToge30sXHJcblx0cG9zaXRpb246ICdkZWZhdWx0JywgLy8gbm8gbWFyZ2luLCBhc3N1bWVzIG5vIGNoaWxkcmVuXHJcbn07XHJcblxyXG5jb25zdCBjbGFzc2VzID0ge1xyXG5cdGdseXBoOiB7XHJcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdG1hcmdpblRvcDogJy0wLjEyNWVtJywgLy8gZml4IGljb24gYWxpZ25tZW50XHJcblx0XHR2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBHbHlwaEJ1dHRvbjtcclxuIiwiLyogZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSAqL1xyXG5cclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IEZpZWxkIGZyb20gJy4uL0Zvcm1GaWVsZCc7XHJcbmltcG9ydCBHbHlwaCBmcm9tICcuLi9HbHlwaCc7XHJcblxyXG5mdW5jdGlvbiBHbHlwaEZpZWxkICh7XHJcblx0Y2hpbGRyZW4sXHJcblx0Z2x5cGgsXHJcblx0Z2x5cGhDb2xvcixcclxuXHRnbHlwaFNpemUsXHJcblx0cG9zaXRpb24sXHJcblx0Li4ucHJvcHNcclxufSkge1xyXG5cdGNvbnN0IGlzTGVmdCA9IHBvc2l0aW9uID09PSAnbGVmdCc7XHJcblx0Y29uc3QgaXNSaWdodCA9IHBvc2l0aW9uID09PSAncmlnaHQnO1xyXG5cclxuXHRjb25zdCBnbHlwaFN0eWxlcyA9IHt9O1xyXG5cdGlmIChpc0xlZnQpIGdseXBoU3R5bGVzLm1hcmdpblJpZ2h0ID0gJzAuNWVtJztcclxuXHRpZiAoaXNSaWdodCkgZ2x5cGhTdHlsZXMubWFyZ2luTGVmdCA9ICcwLjVlbSc7XHJcblxyXG5cdGNvbnN0IGljb24gPSAoXHJcblx0XHQ8R2x5cGhcclxuXHRcdFx0YXBocm9kaXRlU3R5bGVzPXtjbGFzc2VzLmdseXBofVxyXG5cdFx0XHRjb2xvcj17Z2x5cGhDb2xvcn1cclxuXHRcdFx0bmFtZT17Z2x5cGh9XHJcblx0XHRcdHNpemU9e2dseXBoU2l6ZX1cclxuXHRcdFx0c3R5bGU9e2dseXBoU3R5bGVzfVxyXG5cdFx0Lz5cclxuXHQpO1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PEZpZWxkIGFwaHJvZGl0ZVN0eWxlcz17Y2xhc3Nlcy53cmFwcGVyfSB7Li4ucHJvcHN9PlxyXG5cdFx0XHR7aXNMZWZ0ICYmIGljb259XHJcblx0XHRcdHtjaGlsZHJlbn1cclxuXHRcdFx0e2lzUmlnaHQgJiYgaWNvbn1cclxuXHRcdDwvRmllbGQ+XHJcblx0KTtcclxufTtcclxuXHJcbi8vIEZvciBwcm9wcyBcImdseXBoXCIsIFwiZ2x5cGhDb2xvclwiLCBhbmQgXCJnbHlwaFNpemVcIjpcclxuLy8gcHJvcCB0eXBlIHZhbGlkYXRpb24gd2lsbCBvY2N1ciB3aXRoaW4gdGhlIEdseXBoIGNvbXBvbmVudCwgbm8gbmVlZCB0b1xyXG4vLyBkdXBsaWNhdGUsIGp1c3QgcGFzcyBpdCB0aHJvdWdoLlxyXG5HbHlwaEZpZWxkLnByb3BUeXBlcyA9IHtcclxuXHRnbHlwaDogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRnbHlwaENvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdGdseXBoU2l6ZTogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKSxcclxufTtcclxuR2x5cGhGaWVsZC5kZWZhdWx0UHJvcHMgPSB7XHJcblx0cG9zaXRpb246ICdsZWZ0JyxcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0d3JhcHBlcjoge1xyXG5cdFx0YWxpZ25JdGVtczogJ2NlbnRlcicsXHJcblx0XHRkaXNwbGF5OiAnZmxleCcsXHJcblx0fSxcclxuXHRnbHlwaDoge1xyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHRtYXJnaW5Ub3A6ICctMC4xMjVlbScsIC8vIGZpeCBpY29uIGFsaWdubWVudFxyXG5cdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZScsXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gR2x5cGhGaWVsZDtcclxuIiwiaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdGRhbmdlcjogdGhlbWUuZ2x5cGguY29sb3IuZGFuZ2VyLFxyXG5cdGluaGVyaXQ6IHRoZW1lLmdseXBoLmNvbG9yLmluaGVyaXQsXHJcblx0aW52ZXJ0ZWQ6IHRoZW1lLmdseXBoLmNvbG9yLmludmVydGVkLFxyXG5cdHByaW1hcnk6IHRoZW1lLmdseXBoLmNvbG9yLnByaW1hcnksXHJcblx0c3VjY2VzczogdGhlbWUuZ2x5cGguY29sb3Iuc3VjY2VzcyxcclxuXHR3YXJuaW5nOiB0aGVtZS5nbHlwaC5jb2xvci53YXJuaW5nLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IG9jdGljb25zIGZyb20gJy4vb2N0aWNvbnMnO1xyXG5pbXBvcnQgY29sb3JzIGZyb20gJy4vY29sb3JzJztcclxuaW1wb3J0IHNpemVzIGZyb20gJy4vc2l6ZXMnO1xyXG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XHJcblxyXG4vLyBGSVhNRSBzdGF0aWMgb2N0aWNvbiBjbGFzc2VzIGxlYW5pbmcgb24gRWxlbWVudGFsIHRvIGF2b2lkIGR1cGxpY2F0ZVxyXG4vLyBmb250IGFuZCBDU1M7IGluZmxhdGluZyB0aGUgcHJvamVjdCBzaXplXHJcblxyXG5mdW5jdGlvbiBHbHlwaCAoe1xyXG5cdGFwaHJvZGl0ZVN0eWxlcyxcclxuXHRjbGFzc05hbWUsXHJcblx0Y29sb3IsXHJcblx0Y29tcG9uZW50OiBDb21wb25lbnQsXHJcblx0bmFtZSxcclxuXHRzaXplLFxyXG5cdHN0eWxlLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHRjb25zdCBjb2xvcklzVmFsaWRUeXBlID0gT2JqZWN0LmtleXMoY29sb3JzKS5pbmNsdWRlcyhjb2xvcik7XHJcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0Y2xhc3Nlcy5nbHlwaCxcclxuXHRcdGNvbG9ySXNWYWxpZFR5cGUgJiYgY2xhc3Nlc1snY29sb3JfXycgKyBjb2xvcl0sXHJcblx0XHRjbGFzc2VzWydzaXplX18nICsgc2l6ZV0sXHJcblx0XHRhcGhyb2RpdGVTdHlsZXNcclxuXHQpICsgYCAke29jdGljb25zW25hbWVdfWA7XHJcblx0aWYgKGNsYXNzTmFtZSkge1xyXG5cdFx0cHJvcHMuY2xhc3NOYW1lICs9ICgnICcgKyBjbGFzc05hbWUpO1xyXG5cdH1cclxuXHJcblx0Ly8gc3VwcG9ydCByYW5kb20gY29sb3Igc3RyaW5nc1xyXG5cdHByb3BzLnN0eWxlID0ge1xyXG5cdFx0Y29sb3I6ICFjb2xvcklzVmFsaWRUeXBlID8gY29sb3IgOiBudWxsLFxyXG5cdFx0Li4uc3R5bGUsXHJcblx0fTtcclxuXHJcblx0cmV0dXJuIDxDb21wb25lbnQgey4uLnByb3BzfSAvPjtcclxufTtcclxuXHJcbkdseXBoLnByb3BUeXBlcyA9IHtcclxuXHRhcGhyb2RpdGVTdHlsZXM6IFByb3BUeXBlcy5zaGFwZSh7XHJcblx0XHRfZGVmaW5pdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcclxuXHRcdF9uYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdH0pLFxyXG5cdGNvbG9yOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhjb2xvcnMpKSxcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsIC8vIHN1cHBvcnQgcmFuZG9tIGNvbG9yIHN0cmluZ3NcclxuXHRdKSxcclxuXHRuYW1lOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMob2N0aWNvbnMpKS5pc1JlcXVpcmVkLFxyXG5cdHNpemU6IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhzaXplcykpLFxyXG59O1xyXG5HbHlwaC5kZWZhdWx0UHJvcHMgPSB7XHJcblx0Y29tcG9uZW50OiAnaScsXHJcblx0Y29sb3I6ICdpbmhlcml0JyxcclxuXHRzaXplOiAnc21hbGwnLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBHbHlwaDtcclxuIiwiLyogZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0YWxlcnQ6ICdvY3RpY29uIG9jdGljb24tYWxlcnQnLFxyXG5cdCdhcnJvdy1kb3duJzogJ29jdGljb24gb2N0aWNvbi1hcnJvdy1kb3duJyxcclxuXHQnYXJyb3ctbGVmdCc6ICdvY3RpY29uIG9jdGljb24tYXJyb3ctbGVmdCcsXHJcblx0J2Fycm93LXJpZ2h0JzogJ29jdGljb24gb2N0aWNvbi1hcnJvdy1yaWdodCcsXHJcblx0J2Fycm93LXNtYWxsLWRvd24nOiAnb2N0aWNvbiBvY3RpY29uLWFycm93LXNtYWxsLWRvd24nLFxyXG5cdCdhcnJvdy1zbWFsbC1sZWZ0JzogJ29jdGljb24gb2N0aWNvbi1hcnJvdy1zbWFsbC1sZWZ0JyxcclxuXHQnYXJyb3ctc21hbGwtcmlnaHQnOiAnb2N0aWNvbiBvY3RpY29uLWFycm93LXNtYWxsLXJpZ2h0JyxcclxuXHQnYXJyb3ctc21hbGwtdXAnOiAnb2N0aWNvbiBvY3RpY29uLWFycm93LXNtYWxsLXVwJyxcclxuXHQnYXJyb3ctdXAnOiAnb2N0aWNvbiBvY3RpY29uLWFycm93LXVwJyxcclxuXHRtaWNyb3Njb3BlOiAnb2N0aWNvbiBvY3RpY29uLW1pY3Jvc2NvcGUnLFxyXG5cdGJlYWtlcjogJ29jdGljb24gb2N0aWNvbi1iZWFrZXInLFxyXG5cdGJlbGw6ICdvY3RpY29uIG9jdGljb24tYmVsbCcsXHJcblx0Ym9vazogJ29jdGljb24gb2N0aWNvbi1ib29rJyxcclxuXHRib29rbWFyazogJ29jdGljb24gb2N0aWNvbi1ib29rbWFyaycsXHJcblx0YnJpZWZjYXNlOiAnb2N0aWNvbiBvY3RpY29uLWJyaWVmY2FzZScsXHJcblx0YnJvYWRjYXN0OiAnb2N0aWNvbiBvY3RpY29uLWJyb2FkY2FzdCcsXHJcblx0YnJvd3NlcjogJ29jdGljb24gb2N0aWNvbi1icm93c2VyJyxcclxuXHRidWc6ICdvY3RpY29uIG9jdGljb24tYnVnJyxcclxuXHRjYWxlbmRhcjogJ29jdGljb24gb2N0aWNvbi1jYWxlbmRhcicsXHJcblx0Y2hlY2s6ICdvY3RpY29uIG9jdGljb24tY2hlY2snLFxyXG5cdGNoZWNrbGlzdDogJ29jdGljb24gb2N0aWNvbi1jaGVja2xpc3QnLFxyXG5cdCdjaGV2cm9uLWRvd24nOiAnb2N0aWNvbiBvY3RpY29uLWNoZXZyb24tZG93bicsXHJcblx0J2NoZXZyb24tbGVmdCc6ICdvY3RpY29uIG9jdGljb24tY2hldnJvbi1sZWZ0JyxcclxuXHQnY2hldnJvbi1yaWdodCc6ICdvY3RpY29uIG9jdGljb24tY2hldnJvbi1yaWdodCcsXHJcblx0J2NoZXZyb24tdXAnOiAnb2N0aWNvbiBvY3RpY29uLWNoZXZyb24tdXAnLFxyXG5cdCdjaXJjbGUtc2xhc2gnOiAnb2N0aWNvbiBvY3RpY29uLWNpcmNsZS1zbGFzaCcsXHJcblx0J2NpcmN1aXQtYm9hcmQnOiAnb2N0aWNvbiBvY3RpY29uLWNpcmN1aXQtYm9hcmQnLFxyXG5cdGNsaXBweTogJ29jdGljb24gb2N0aWNvbi1jbGlwcHknLFxyXG5cdGNsb2NrOiAnb2N0aWNvbiBvY3RpY29uLWNsb2NrJyxcclxuXHQnY2xvdWQtZG93bmxvYWQnOiAnb2N0aWNvbiBvY3RpY29uLWNsb3VkLWRvd25sb2FkJyxcclxuXHQnY2xvdWQtdXBsb2FkJzogJ29jdGljb24gb2N0aWNvbi1jbG91ZC11cGxvYWQnLFxyXG5cdGNvZGU6ICdvY3RpY29uIG9jdGljb24tY29kZScsXHJcblx0J2NvbG9yLW1vZGUnOiAnb2N0aWNvbiBvY3RpY29uLWNvbG9yLW1vZGUnLFxyXG5cdCdjb21tZW50LWFkZCc6ICdvY3RpY29uIG9jdGljb24tY29tbWVudC1hZGQnLFxyXG5cdGNvbW1lbnQ6ICdvY3RpY29uIG9jdGljb24tY29tbWVudCcsXHJcblx0J2NvbW1lbnQtZGlzY3Vzc2lvbic6ICdvY3RpY29uIG9jdGljb24tY29tbWVudC1kaXNjdXNzaW9uJyxcclxuXHQnY3JlZGl0LWNhcmQnOiAnb2N0aWNvbiBvY3RpY29uLWNyZWRpdC1jYXJkJyxcclxuXHRkYXNoOiAnb2N0aWNvbiBvY3RpY29uLWRhc2gnLFxyXG5cdGRhc2hib2FyZDogJ29jdGljb24gb2N0aWNvbi1kYXNoYm9hcmQnLFxyXG5cdGRhdGFiYXNlOiAnb2N0aWNvbiBvY3RpY29uLWRhdGFiYXNlJyxcclxuXHRjbG9uZTogJ29jdGljb24gb2N0aWNvbi1jbG9uZScsXHJcblx0J2Rlc2t0b3AtZG93bmxvYWQnOiAnb2N0aWNvbiBvY3RpY29uLWRlc2t0b3AtZG93bmxvYWQnLFxyXG5cdCdkZXZpY2UtY2FtZXJhJzogJ29jdGljb24gb2N0aWNvbi1kZXZpY2UtY2FtZXJhJyxcclxuXHQnZGV2aWNlLWNhbWVyYS12aWRlbyc6ICdvY3RpY29uIG9jdGljb24tZGV2aWNlLWNhbWVyYS12aWRlbycsXHJcblx0J2RldmljZS1kZXNrdG9wJzogJ29jdGljb24gb2N0aWNvbi1kZXZpY2UtZGVza3RvcCcsXHJcblx0J2RldmljZS1tb2JpbGUnOiAnb2N0aWNvbiBvY3RpY29uLWRldmljZS1tb2JpbGUnLFxyXG5cdGRpZmY6ICdvY3RpY29uIG9jdGljb24tZGlmZicsXHJcblx0J2RpZmYtYWRkZWQnOiAnb2N0aWNvbiBvY3RpY29uLWRpZmYtYWRkZWQnLFxyXG5cdCdkaWZmLWlnbm9yZWQnOiAnb2N0aWNvbiBvY3RpY29uLWRpZmYtaWdub3JlZCcsXHJcblx0J2RpZmYtbW9kaWZpZWQnOiAnb2N0aWNvbiBvY3RpY29uLWRpZmYtbW9kaWZpZWQnLFxyXG5cdCdkaWZmLXJlbW92ZWQnOiAnb2N0aWNvbiBvY3RpY29uLWRpZmYtcmVtb3ZlZCcsXHJcblx0J2RpZmYtcmVuYW1lZCc6ICdvY3RpY29uIG9jdGljb24tZGlmZi1yZW5hbWVkJyxcclxuXHRlbGxpcHNpczogJ29jdGljb24gb2N0aWNvbi1lbGxpcHNpcycsXHJcblx0J2V5ZS11bndhdGNoJzogJ29jdGljb24gb2N0aWNvbi1leWUtdW53YXRjaCcsXHJcblx0J2V5ZS13YXRjaCc6ICdvY3RpY29uIG9jdGljb24tZXllLXdhdGNoJyxcclxuXHRleWU6ICdvY3RpY29uIG9jdGljb24tZXllJyxcclxuXHQnZmlsZS1iaW5hcnknOiAnb2N0aWNvbiBvY3RpY29uLWZpbGUtYmluYXJ5JyxcclxuXHQnZmlsZS1jb2RlJzogJ29jdGljb24gb2N0aWNvbi1maWxlLWNvZGUnLFxyXG5cdCdmaWxlLWRpcmVjdG9yeSc6ICdvY3RpY29uIG9jdGljb24tZmlsZS1kaXJlY3RvcnknLFxyXG5cdCdmaWxlLW1lZGlhJzogJ29jdGljb24gb2N0aWNvbi1maWxlLW1lZGlhJyxcclxuXHQnZmlsZS1wZGYnOiAnb2N0aWNvbiBvY3RpY29uLWZpbGUtcGRmJyxcclxuXHQnZmlsZS1zdWJtb2R1bGUnOiAnb2N0aWNvbiBvY3RpY29uLWZpbGUtc3VibW9kdWxlJyxcclxuXHQnZmlsZS1zeW1saW5rLWRpcmVjdG9yeSc6ICdvY3RpY29uIG9jdGljb24tZmlsZS1zeW1saW5rLWRpcmVjdG9yeScsXHJcblx0J2ZpbGUtc3ltbGluay1maWxlJzogJ29jdGljb24gb2N0aWNvbi1maWxlLXN5bWxpbmstZmlsZScsXHJcblx0J2ZpbGUtdGV4dCc6ICdvY3RpY29uIG9jdGljb24tZmlsZS10ZXh0JyxcclxuXHQnZmlsZS16aXAnOiAnb2N0aWNvbiBvY3RpY29uLWZpbGUtemlwJyxcclxuXHRmbGFtZTogJ29jdGljb24gb2N0aWNvbi1mbGFtZScsXHJcblx0Zm9sZDogJ29jdGljb24gb2N0aWNvbi1mb2xkJyxcclxuXHRnZWFyOiAnb2N0aWNvbiBvY3RpY29uLWdlYXInLFxyXG5cdGdpZnQ6ICdvY3RpY29uIG9jdGljb24tZ2lmdCcsXHJcblx0Z2lzdDogJ29jdGljb24gb2N0aWNvbi1naXN0JyxcclxuXHQnZ2lzdC1zZWNyZXQnOiAnb2N0aWNvbiBvY3RpY29uLWdpc3Qtc2VjcmV0JyxcclxuXHQnZ2l0LWJyYW5jaC1jcmVhdGUnOiAnb2N0aWNvbiBvY3RpY29uLWdpdC1icmFuY2gtY3JlYXRlJyxcclxuXHQnZ2l0LWJyYW5jaC1kZWxldGUnOiAnb2N0aWNvbiBvY3RpY29uLWdpdC1icmFuY2gtZGVsZXRlJyxcclxuXHQnZ2l0LWJyYW5jaCc6ICdvY3RpY29uIG9jdGljb24tZ2l0LWJyYW5jaCcsXHJcblx0J2dpdC1jb21taXQnOiAnb2N0aWNvbiBvY3RpY29uLWdpdC1jb21taXQnLFxyXG5cdCdnaXQtY29tcGFyZSc6ICdvY3RpY29uIG9jdGljb24tZ2l0LWNvbXBhcmUnLFxyXG5cdCdnaXQtbWVyZ2UnOiAnb2N0aWNvbiBvY3RpY29uLWdpdC1tZXJnZScsXHJcblx0J2dpdC1wdWxsLXJlcXVlc3QtYWJhbmRvbmVkJzogJ29jdGljb24gb2N0aWNvbi1naXQtcHVsbC1yZXF1ZXN0LWFiYW5kb25lZCcsXHJcblx0J2dpdC1wdWxsLXJlcXVlc3QnOiAnb2N0aWNvbiBvY3RpY29uLWdpdC1wdWxsLXJlcXVlc3QnLFxyXG5cdGdsb2JlOiAnb2N0aWNvbiBvY3RpY29uLWdsb2JlJyxcclxuXHRncmFwaDogJ29jdGljb24gb2N0aWNvbi1ncmFwaCcsXHJcblx0aGVhcnQ6ICdvY3RpY29uIG9jdGljb24taGVhcnQnLFxyXG5cdGhpc3Rvcnk6ICdvY3RpY29uIG9jdGljb24taGlzdG9yeScsXHJcblx0aG9tZTogJ29jdGljb24gb2N0aWNvbi1ob21lJyxcclxuXHQnaG9yaXpvbnRhbC1ydWxlJzogJ29jdGljb24gb2N0aWNvbi1ob3Jpem9udGFsLXJ1bGUnLFxyXG5cdGh1Ym90OiAnb2N0aWNvbiBvY3RpY29uLWh1Ym90JyxcclxuXHRpbmJveDogJ29jdGljb24gb2N0aWNvbi1pbmJveCcsXHJcblx0aW5mbzogJ29jdGljb24gb2N0aWNvbi1pbmZvJyxcclxuXHQnaXNzdWUtY2xvc2VkJzogJ29jdGljb24gb2N0aWNvbi1pc3N1ZS1jbG9zZWQnLFxyXG5cdCdpc3N1ZS1vcGVuZWQnOiAnb2N0aWNvbiBvY3RpY29uLWlzc3VlLW9wZW5lZCcsXHJcblx0J2lzc3VlLXJlb3BlbmVkJzogJ29jdGljb24gb2N0aWNvbi1pc3N1ZS1yZW9wZW5lZCcsXHJcblx0amVyc2V5OiAnb2N0aWNvbiBvY3RpY29uLWplcnNleScsXHJcblx0a2V5OiAnb2N0aWNvbiBvY3RpY29uLWtleScsXHJcblx0a2V5Ym9hcmQ6ICdvY3RpY29uIG9jdGljb24ta2V5Ym9hcmQnLFxyXG5cdGxhdzogJ29jdGljb24gb2N0aWNvbi1sYXcnLFxyXG5cdCdsaWdodC1idWxiJzogJ29jdGljb24gb2N0aWNvbi1saWdodC1idWxiJyxcclxuXHRsaW5rOiAnb2N0aWNvbiBvY3RpY29uLWxpbmsnLFxyXG5cdCdsaW5rLWV4dGVybmFsJzogJ29jdGljb24gb2N0aWNvbi1saW5rLWV4dGVybmFsJyxcclxuXHQnbGlzdC1vcmRlcmVkJzogJ29jdGljb24gb2N0aWNvbi1saXN0LW9yZGVyZWQnLFxyXG5cdCdsaXN0LXVub3JkZXJlZCc6ICdvY3RpY29uIG9jdGljb24tbGlzdC11bm9yZGVyZWQnLFxyXG5cdGxvY2F0aW9uOiAnb2N0aWNvbiBvY3RpY29uLWxvY2F0aW9uJyxcclxuXHQnZ2lzdC1wcml2YXRlJzogJ29jdGljb24gb2N0aWNvbi1naXN0LXByaXZhdGUnLFxyXG5cdCdtaXJyb3ItcHJpdmF0ZSc6ICdvY3RpY29uIG9jdGljb24tbWlycm9yLXByaXZhdGUnLFxyXG5cdCdnaXQtZm9yay1wcml2YXRlJzogJ29jdGljb24gb2N0aWNvbi1naXQtZm9yay1wcml2YXRlJyxcclxuXHRsb2NrOiAnb2N0aWNvbiBvY3RpY29uLWxvY2snLFxyXG5cdCdsb2dvLWdpdGh1Yic6ICdvY3RpY29uIG9jdGljb24tbG9nby1naXRodWInLFxyXG5cdG1haWw6ICdvY3RpY29uIG9jdGljb24tbWFpbCcsXHJcblx0J21haWwtcmVhZCc6ICdvY3RpY29uIG9jdGljb24tbWFpbC1yZWFkJyxcclxuXHQnbWFpbC1yZXBseSc6ICdvY3RpY29uIG9jdGljb24tbWFpbC1yZXBseScsXHJcblx0J21hcmstZ2l0aHViJzogJ29jdGljb24gb2N0aWNvbi1tYXJrLWdpdGh1YicsXHJcblx0bWFya2Rvd246ICdvY3RpY29uIG9jdGljb24tbWFya2Rvd24nLFxyXG5cdG1lZ2FwaG9uZTogJ29jdGljb24gb2N0aWNvbi1tZWdhcGhvbmUnLFxyXG5cdG1lbnRpb246ICdvY3RpY29uIG9jdGljb24tbWVudGlvbicsXHJcblx0bWlsZXN0b25lOiAnb2N0aWNvbiBvY3RpY29uLW1pbGVzdG9uZScsXHJcblx0J21pcnJvci1wdWJsaWMnOiAnb2N0aWNvbiBvY3RpY29uLW1pcnJvci1wdWJsaWMnLFxyXG5cdG1pcnJvcjogJ29jdGljb24gb2N0aWNvbi1taXJyb3InLFxyXG5cdCdtb3J0YXItYm9hcmQnOiAnb2N0aWNvbiBvY3RpY29uLW1vcnRhci1ib2FyZCcsXHJcblx0bXV0ZTogJ29jdGljb24gb2N0aWNvbi1tdXRlJyxcclxuXHQnbm8tbmV3bGluZSc6ICdvY3RpY29uIG9jdGljb24tbm8tbmV3bGluZScsXHJcblx0b2N0b2ZhY2U6ICdvY3RpY29uIG9jdGljb24tb2N0b2ZhY2UnLFxyXG5cdG9yZ2FuaXphdGlvbjogJ29jdGljb24gb2N0aWNvbi1vcmdhbml6YXRpb24nLFxyXG5cdHBhY2thZ2U6ICdvY3RpY29uIG9jdGljb24tcGFja2FnZScsXHJcblx0cGFpbnRjYW46ICdvY3RpY29uIG9jdGljb24tcGFpbnRjYW4nLFxyXG5cdHBlbmNpbDogJ29jdGljb24gb2N0aWNvbi1wZW5jaWwnLFxyXG5cdCdwZXJzb24tYWRkJzogJ29jdGljb24gb2N0aWNvbi1wZXJzb24tYWRkJyxcclxuXHQncGVyc29uLWZvbGxvdyc6ICdvY3RpY29uIG9jdGljb24tcGVyc29uLWZvbGxvdycsXHJcblx0cGVyc29uOiAnb2N0aWNvbiBvY3RpY29uLXBlcnNvbicsXHJcblx0cGluOiAnb2N0aWNvbiBvY3RpY29uLXBpbicsXHJcblx0cGx1ZzogJ29jdGljb24gb2N0aWNvbi1wbHVnJyxcclxuXHQncmVwby1jcmVhdGUnOiAnb2N0aWNvbiBvY3RpY29uLXJlcG8tY3JlYXRlJyxcclxuXHQnZ2lzdC1uZXcnOiAnb2N0aWNvbiBvY3RpY29uLWdpc3QtbmV3JyxcclxuXHQnZmlsZS1kaXJlY3RvcnktY3JlYXRlJzogJ29jdGljb24gb2N0aWNvbi1maWxlLWRpcmVjdG9yeS1jcmVhdGUnLFxyXG5cdCdmaWxlLWFkZCc6ICdvY3RpY29uIG9jdGljb24tZmlsZS1hZGQnLFxyXG5cdHBsdXM6ICdvY3RpY29uIG9jdGljb24tcGx1cycsXHJcblx0J3ByaW1pdGl2ZS1kb3QnOiAnb2N0aWNvbiBvY3RpY29uLXByaW1pdGl2ZS1kb3QnLFxyXG5cdCdwcmltaXRpdmUtc3F1YXJlJzogJ29jdGljb24gb2N0aWNvbi1wcmltaXRpdmUtc3F1YXJlJyxcclxuXHRwdWxzZTogJ29jdGljb24gb2N0aWNvbi1wdWxzZScsXHJcblx0cXVlc3Rpb246ICdvY3RpY29uIG9jdGljb24tcXVlc3Rpb24nLFxyXG5cdHF1b3RlOiAnb2N0aWNvbiBvY3RpY29uLXF1b3RlJyxcclxuXHQncmFkaW8tdG93ZXInOiAnb2N0aWNvbiBvY3RpY29uLXJhZGlvLXRvd2VyJyxcclxuXHQncmVwby1kZWxldGUnOiAnb2N0aWNvbiBvY3RpY29uLXJlcG8tZGVsZXRlJyxcclxuXHRyZXBvOiAnb2N0aWNvbiBvY3RpY29uLXJlcG8nLFxyXG5cdCdyZXBvLWNsb25lJzogJ29jdGljb24gb2N0aWNvbi1yZXBvLWNsb25lJyxcclxuXHQncmVwby1mb3JjZS1wdXNoJzogJ29jdGljb24gb2N0aWNvbi1yZXBvLWZvcmNlLXB1c2gnLFxyXG5cdCdnaXN0LWZvcmsnOiAnb2N0aWNvbiBvY3RpY29uLWdpc3QtZm9yaycsXHJcblx0J3JlcG8tZm9ya2VkJzogJ29jdGljb24gb2N0aWNvbi1yZXBvLWZvcmtlZCcsXHJcblx0J3JlcG8tcHVsbCc6ICdvY3RpY29uIG9jdGljb24tcmVwby1wdWxsJyxcclxuXHQncmVwby1wdXNoJzogJ29jdGljb24gb2N0aWNvbi1yZXBvLXB1c2gnLFxyXG5cdHJvY2tldDogJ29jdGljb24gb2N0aWNvbi1yb2NrZXQnLFxyXG5cdHJzczogJ29jdGljb24gb2N0aWNvbi1yc3MnLFxyXG5cdHJ1Ynk6ICdvY3RpY29uIG9jdGljb24tcnVieScsXHJcblx0J3NjcmVlbi1mdWxsJzogJ29jdGljb24gb2N0aWNvbi1zY3JlZW4tZnVsbCcsXHJcblx0J3NjcmVlbi1ub3JtYWwnOiAnb2N0aWNvbiBvY3RpY29uLXNjcmVlbi1ub3JtYWwnLFxyXG5cdCdzZWFyY2gtc2F2ZSc6ICdvY3RpY29uIG9jdGljb24tc2VhcmNoLXNhdmUnLFxyXG5cdHNlYXJjaDogJ29jdGljb24gb2N0aWNvbi1zZWFyY2gnLFxyXG5cdHNlcnZlcjogJ29jdGljb24gb2N0aWNvbi1zZXJ2ZXInLFxyXG5cdHNldHRpbmdzOiAnb2N0aWNvbiBvY3RpY29uLXNldHRpbmdzJyxcclxuXHRzaGllbGQ6ICdvY3RpY29uIG9jdGljb24tc2hpZWxkJyxcclxuXHQnbG9nLWluJzogJ29jdGljb24gb2N0aWNvbi1sb2ctaW4nLFxyXG5cdCdzaWduLWluJzogJ29jdGljb24gb2N0aWNvbi1zaWduLWluJyxcclxuXHQnbG9nLW91dCc6ICdvY3RpY29uIG9jdGljb24tbG9nLW91dCcsXHJcblx0J3NpZ24tb3V0JzogJ29jdGljb24gb2N0aWNvbi1zaWduLW91dCcsXHJcblx0c3F1aXJyZWw6ICdvY3RpY29uIG9jdGljb24tc3F1aXJyZWwnLFxyXG5cdCdzdGFyLWFkZCc6ICdvY3RpY29uIG9jdGljb24tc3Rhci1hZGQnLFxyXG5cdCdzdGFyLWRlbGV0ZSc6ICdvY3RpY29uIG9jdGljb24tc3Rhci1kZWxldGUnLFxyXG5cdHN0YXI6ICdvY3RpY29uIG9jdGljb24tc3RhcicsXHJcblx0c3RvcDogJ29jdGljb24gb2N0aWNvbi1zdG9wJyxcclxuXHQncmVwby1zeW5jJzogJ29jdGljb24gb2N0aWNvbi1yZXBvLXN5bmMnLFxyXG5cdHN5bmM6ICdvY3RpY29uIG9jdGljb24tc3luYycsXHJcblx0J3RhZy1yZW1vdmUnOiAnb2N0aWNvbiBvY3RpY29uLXRhZy1yZW1vdmUnLFxyXG5cdCd0YWctYWRkJzogJ29jdGljb24gb2N0aWNvbi10YWctYWRkJyxcclxuXHR0YWc6ICdvY3RpY29uIG9jdGljb24tdGFnJyxcclxuXHR0ZWxlc2NvcGU6ICdvY3RpY29uIG9jdGljb24tdGVsZXNjb3BlJyxcclxuXHR0ZXJtaW5hbDogJ29jdGljb24gb2N0aWNvbi10ZXJtaW5hbCcsXHJcblx0J3RocmVlLWJhcnMnOiAnb2N0aWNvbiBvY3RpY29uLXRocmVlLWJhcnMnLFxyXG5cdHRodW1ic2Rvd246ICdvY3RpY29uIG9jdGljb24tdGh1bWJzZG93bicsXHJcblx0dGh1bWJzdXA6ICdvY3RpY29uIG9jdGljb24tdGh1bWJzdXAnLFxyXG5cdHRvb2xzOiAnb2N0aWNvbiBvY3RpY29uLXRvb2xzJyxcclxuXHR0cmFzaGNhbjogJ29jdGljb24gb2N0aWNvbi10cmFzaGNhbicsXHJcblx0J3RyaWFuZ2xlLWRvd24nOiAnb2N0aWNvbiBvY3RpY29uLXRyaWFuZ2xlLWRvd24nLFxyXG5cdCd0cmlhbmdsZS1sZWZ0JzogJ29jdGljb24gb2N0aWNvbi10cmlhbmdsZS1sZWZ0JyxcclxuXHQndHJpYW5nbGUtcmlnaHQnOiAnb2N0aWNvbiBvY3RpY29uLXRyaWFuZ2xlLXJpZ2h0JyxcclxuXHQndHJpYW5nbGUtdXAnOiAnb2N0aWNvbiBvY3RpY29uLXRyaWFuZ2xlLXVwJyxcclxuXHR1bmZvbGQ6ICdvY3RpY29uIG9jdGljb24tdW5mb2xkJyxcclxuXHR1bm11dGU6ICdvY3RpY29uIG9jdGljb24tdW5tdXRlJyxcclxuXHR2ZXJzaW9uczogJ29jdGljb24gb2N0aWNvbi12ZXJzaW9ucycsXHJcblx0d2F0Y2g6ICdvY3RpY29uIG9jdGljb24td2F0Y2gnLFxyXG5cdCdyZW1vdmUtY2xvc2UnOiAnb2N0aWNvbiBvY3RpY29uLXJlbW92ZS1jbG9zZScsXHJcblx0eDogJ29jdGljb24gb2N0aWNvbi14JyxcclxuXHR6YXA6ICdvY3RpY29uIG9jdGljb24temFwJyxcclxufTtcclxuIiwiaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdHNtYWxsOiB0aGVtZS5nbHlwaC5zaXplLnNtYWxsLFxyXG5cdG1lZGl1bTogdGhlbWUuZ2x5cGguc2l6ZS5tZWRpdW0sXHJcblx0bGFyZ2U6IHRoZW1lLmdseXBoLnNpemUubGFyZ2UsXHJcbn07XHJcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBHbHlwaFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmltcG9ydCBjb2xvcnMgZnJvbSAnLi9jb2xvcnMnO1xyXG5pbXBvcnQgc2l6ZXMgZnJvbSAnLi9zaXplcyc7XHJcblxyXG4vLyBQcmVwYXJlIHZhcmlhbnRzXHJcbmNvbnN0IGNvbG9yVmFyaWFudHMgPSB7fTtcclxuT2JqZWN0LmtleXMoY29sb3JzKS5mb3JFYWNoKGNvbG9yID0+IHtcclxuXHRjb2xvclZhcmlhbnRzW2Bjb2xvcl9fJHtjb2xvcn1gXSA9IHtcclxuXHRcdGNvbG9yOiBjb2xvcnNbY29sb3JdLFxyXG5cdH07XHJcbn0pO1xyXG5cclxuLy8gUHJlcGFyZSBzaXplc1xyXG5jb25zdCBzaXplVmFyaWFudHMgPSB7fTtcclxuT2JqZWN0LmtleXMoc2l6ZXMpLmZvckVhY2goc2l6ZSA9PiB7XHJcblx0c2l6ZVZhcmlhbnRzW2BzaXplX18ke3NpemV9YF0gPSB7XHJcblx0XHRmb250U2l6ZTogc2l6ZXNbc2l6ZV0sXHJcblx0fTtcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRnbHlwaDoge30sXHJcblxyXG5cdC8vIENvbG9yc1xyXG5cdC4uLmNvbG9yVmFyaWFudHMsXHJcblxyXG5cdC8vIFNpemVzXHJcblx0Li4uc2l6ZVZhcmlhbnRzLFxyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuXHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5jb25zdCBXSURUSFMgPSB7XHJcblx0J29uZS13aG9sZSc6ICcxMDAlJyxcclxuXHQnb25lLWhhbGYnOiAnNTAlJyxcclxuXHQnb25lLXRoaXJkJzogJzMzLjMzJScsXHJcblx0J3R3by10aGlyZHMnOiAnNjYuNjYlJyxcclxuXHQnb25lLXF1YXJ0ZXInOiAnMjUlJyxcclxuXHQndGhyZWUtcXVhcnRlcnMnOiAnNzUlJyxcclxuXHJcblx0J29uZS1maWZ0aCc6ICcyMCUnLFxyXG5cdCd0d28tZmlmdGhzJzogJzQwJScsXHJcblx0J3RocmVlLWZpZnRocyc6ICc2MCUnLFxyXG5cdCdmb3VyLWZpZnRocyc6ICc4MCUnLFxyXG5cclxuXHQnb25lLXNpeHRoJzogJzE2LjY2JScsXHJcblx0J2ZpdmUtc2l4dGhzJzogJzgzLjMzJScsXHJcbn07XHJcblxyXG5jb25zdCBHcmlkQ29sID0gKHByb3BzLCBjb250ZXh0KSA9PiB7XHJcblx0Y29uc3QgZ3V0dGVyID0gcHJvcHMuZ3V0dGVyIHx8IGNvbnRleHQuZ3V0dGVyO1xyXG5cdGNvbnN0IHhzbWFsbCA9IHByb3BzLnhzbWFsbCB8fCBjb250ZXh0LnhzbWFsbDtcclxuXHRjb25zdCBzbWFsbCA9IHByb3BzLnNtYWxsIHx8IGNvbnRleHQuc21hbGw7XHJcblx0Y29uc3QgbWVkaXVtID0gcHJvcHMubWVkaXVtIHx8IGNvbnRleHQubWVkaXVtO1xyXG5cdGNvbnN0IGxhcmdlID0gcHJvcHMubGFyZ2UgfHwgY29udGV4dC5sYXJnZTtcclxuXHJcblx0Y29uc3QgY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0Y2xhc3Nlc1sneHNtYWxsLScgKyB4c21hbGxdLFxyXG5cdFx0Y2xhc3Nlc1snc21hbGwtJyArIHNtYWxsXSxcclxuXHRcdGNsYXNzZXNbJ21lZGl1bS0nICsgbWVkaXVtXSxcclxuXHRcdGNsYXNzZXNbJ2xhcmdlLScgKyBsYXJnZV1cclxuXHQpO1xyXG5cclxuXHRjb25zdCBjb21wb25lbnRDbGFzc05hbWUgPSBgJHtjbGFzc05hbWV9JHtwcm9wcy5jbGFzc05hbWUgPyAoJyAnICsgcHJvcHMuY2xhc3NOYW1lKSA6ICcnfWA7XHJcblx0Y29uc3QgY29tcG9uZW50U3R5bGVzID0gZ3V0dGVyID8ge1xyXG5cdFx0cGFkZGluZ0xlZnQ6IGd1dHRlciAvIDIsXHJcblx0XHRwYWRkaW5nUmlnaHQ6IGd1dHRlciAvIDIsXHJcblx0fSA6IHt9O1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdiBjbGFzc05hbWU9e2NvbXBvbmVudENsYXNzTmFtZX0gc3R5bGU9e2NvbXBvbmVudFN0eWxlc30+XHJcblx0XHRcdHtwcm9wcy5jaGlsZHJlbn1cclxuXHRcdDwvZGl2PlxyXG5cdCk7XHJcbn07XHJcblxyXG5HcmlkQ29sLmNvbnRleHRUeXBlcyA9IHtcclxuXHRndXR0ZXI6IFByb3BUeXBlcy5udW1iZXIsXHJcblx0bGFyZ2U6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0bWVkaXVtOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHNtYWxsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHhzbWFsbDogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbkdyaWRDb2wucHJvcFR5cGVzID0ge1xyXG5cdGd1dHRlcjogUHJvcFR5cGVzLm51bWJlcixcclxuXHRsYXJnZTogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRtZWRpdW06IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0c21hbGw6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0eHNtYWxsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHQuLi5wcmVwYXJlV2lkdGhzKCd4c21hbGwnLCBXSURUSFMpLFxyXG5cdC4uLnByZXBhcmVXaWR0aHMoJ3NtYWxsJywgV0lEVEhTKSxcclxuXHQuLi5wcmVwYXJlV2lkdGhzKCdtZWRpdW0nLCBXSURUSFMpLFxyXG5cdC4uLnByZXBhcmVXaWR0aHMoJ2xhcmdlJywgV0lEVEhTKSxcclxufTtcclxuXHJcbi8qIGVzbGludC1kaXNhYmxlIGd1YXJkLWZvci1pbiAqL1xyXG5mdW5jdGlvbiBwcmVwYXJlV2lkdGhzIChwcmVmaXgsIG9iaikge1xyXG5cdGxldCBjbGFzc2VzID0ge307XHJcblx0c3dpdGNoIChwcmVmaXgpIHtcclxuXHRcdGNhc2UgJ3NtYWxsJzpcclxuXHRcdFx0Zm9yIChsZXQgcHJvcCBpbiBvYmopIHtcclxuXHRcdFx0XHRjbGFzc2VzW3ByZWZpeCArICctJyArIHByb3BdID0ge1xyXG5cdFx0XHRcdFx0W2BAbWVkaWEgKG1pbi13aWR0aDogJHt0aGVtZS5icmVha3BvaW50LnRhYmxldFBvcnRyYWl0TWlufSlgXToge1xyXG5cdFx0XHRcdFx0XHR3aWR0aDogb2JqW3Byb3BdLFxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnbWVkaXVtJzpcclxuXHRcdFx0Zm9yIChsZXQgcHJvcCBpbiBvYmopIHtcclxuXHRcdFx0XHRjbGFzc2VzW3ByZWZpeCArICctJyArIHByb3BdID0ge1xyXG5cdFx0XHRcdFx0W2BAbWVkaWEgKG1pbi13aWR0aDogJHt0aGVtZS5icmVha3BvaW50LnRhYmxldExhbmRzY2FwZU1pbn0pYF06IHtcclxuXHRcdFx0XHRcdFx0d2lkdGg6IG9ialtwcm9wXSxcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ2xhcmdlJzpcclxuXHRcdFx0Zm9yIChsZXQgcHJvcCBpbiBvYmopIHtcclxuXHRcdFx0XHRjbGFzc2VzW3ByZWZpeCArICctJyArIHByb3BdID0ge1xyXG5cdFx0XHRcdFx0W2BAbWVkaWEgKG1pbi13aWR0aDogJHt0aGVtZS5icmVha3BvaW50LmRlc2t0b3BNaW59KWBdOiB7XHJcblx0XHRcdFx0XHRcdHdpZHRoOiBvYmpbcHJvcF0sXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHRcdFx0YnJlYWs7XHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHRmb3IgKGxldCBwcm9wIGluIG9iaikge1xyXG5cdFx0XHRcdGNsYXNzZXNbcHJlZml4ICsgJy0nICsgcHJvcF0gPSB7XHJcblx0XHRcdFx0XHR3aWR0aDogb2JqW3Byb3BdLFxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY2xhc3NlcztcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gR3JpZENvbDtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5cclxuY2xhc3MgR3JpZFJvdyBleHRlbmRzIENvbXBvbmVudCB7XHJcblx0Z2V0Q2hpbGRDb250ZXh0ICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGd1dHRlcjogdGhpcy5wcm9wcy5ndXR0ZXIsXHJcblx0XHRcdHhzbWFsbDogdGhpcy5wcm9wcy54c21hbGwsXHJcblx0XHRcdHNtYWxsOiB0aGlzLnByb3BzLnNtYWxsLFxyXG5cdFx0XHRtZWRpdW06IHRoaXMucHJvcHMubWVkaXVtLFxyXG5cdFx0XHRsYXJnZTogdGhpcy5wcm9wcy5sYXJnZSxcclxuXHRcdH07XHJcblx0fVxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRjb25zdCB7IGNoaWxkcmVuLCBjbGFzc05hbWUsIGd1dHRlciwgc3R5bGVzID0ge30gfSA9IHRoaXMucHJvcHM7XHJcblxyXG5cdFx0Y29uc3QgY29tcG9uZW50Q2xhc3NOYW1lID0gYCR7Y3NzKGNsYXNzZXMuZ3JpZCl9JHtjbGFzc05hbWUgPyAoJyAnICsgY2xhc3NOYW1lKSA6ICcnfWA7XHJcblx0XHRjb25zdCBjb21wb25lbnRTdHlsZXMgPSBPYmplY3QuYXNzaWduKHN0eWxlcywge1xyXG5cdFx0XHRtYXJnaW5MZWZ0OiBndXR0ZXIgLyAtMixcclxuXHRcdFx0bWFyZ2luUmlnaHQ6IGd1dHRlciAvIC0yLFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2NvbXBvbmVudENsYXNzTmFtZX0gc3R5bGU9e2NvbXBvbmVudFN0eWxlc30+XHJcblx0XHRcdFx0e2NoaWxkcmVufVxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fVxyXG59O1xyXG5cclxuR3JpZFJvdy5jaGlsZENvbnRleHRUeXBlcyA9IHtcclxuXHRndXR0ZXI6IFByb3BUeXBlcy5udW1iZXIsXHJcblx0eHNtYWxsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHNtYWxsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdG1lZGl1bTogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRsYXJnZTogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbkdyaWRSb3cucHJvcFR5cGVzID0ge1xyXG5cdGd1dHRlcjogUHJvcFR5cGVzLm51bWJlcixcclxuXHRsYXJnZTogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRtZWRpdW06IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0c21hbGw6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0eHNtYWxsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxuR3JpZFJvdy5kZWZhdWx0UHJvcHMgPSB7XHJcblx0Z3V0dGVyOiAwLFxyXG5cdHhzbWFsbDogJ29uZS13aG9sZScsXHJcbn07XHJcblxyXG5jb25zdCBjbGFzc2VzID0ge1xyXG5cdGdyaWQ6IHtcclxuXHRcdGRpc3BsYXk6ICdmbGV4JyxcclxuXHRcdGZsZXhXcmFwOiAnd3JhcCcsXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gR3JpZFJvdztcclxuIiwiaW1wb3J0IENvbCBmcm9tICcuLi9HcmlkQ29sJztcclxuaW1wb3J0IFJvdyBmcm9tICcuLi9HcmlkUm93JztcclxuXHJcbmV4cG9ydCB7IENvbCwgUm93IH07XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9zdHlsZXMnO1xyXG5cclxuLy8gTk9URTogSW5saW5lIEdyb3VwIFNlY3Rpb24gYWNjZXB0cyBhIHNpbmdsZSBjaGlsZFxyXG5cclxuZnVuY3Rpb24gSW5saW5lR3JvdXBTZWN0aW9uICh7XHJcblx0YWN0aXZlLFxyXG5cdGFwaHJvZGl0ZVN0eWxlcyxcclxuXHRjaGlsZHJlbixcclxuXHRjbGFzc05hbWUsXHJcblx0Y29udGlndW91cyxcclxuXHRncm93LFxyXG5cdHBvc2l0aW9uLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHQvLyBldmFsdWF0ZSBwb3NpdGlvblxyXG5cdGNvbnN0IHNlcGFyYXRlID0gcG9zaXRpb24gPT09ICdsYXN0JyB8fCBwb3NpdGlvbiA9PT0gJ21pZGRsZSc7XHJcblxyXG5cdC8vIEEgYGNvbnRpZ3VvdXNgIHNlY3Rpb24gbXVzdCBtYW5pcHVsYXRlIGl0J3MgY2hpbGQgZGlyZWN0bHlcclxuXHQvLyBBIHNlcGFyYXRlIChkZWZhdWx0KSBzZWN0aW9uIGp1c3Qgd3JhcHMgdGhlIGNoaWxkXHJcblx0cmV0dXJuIGNvbnRpZ3VvdXMgPyBjbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcclxuXHRcdGFwaHJvZGl0ZVN0eWxlczogW1xyXG5cdFx0XHRjbGFzc2VzLmNvbnRpZ3VvdXMsXHJcblx0XHRcdGNsYXNzZXNbJ2NvbnRpZ3VvdXNfXycgKyBwb3NpdGlvbl0sXHJcblx0XHRcdGFjdGl2ZSA/IGNsYXNzZXMuYWN0aXZlIDogbnVsbCxcclxuXHRcdFx0Z3JvdyA/IGNsYXNzZXMuZ3JvdyA6IG51bGwsXHJcblx0XHRcdGFwaHJvZGl0ZVN0eWxlcyxcclxuXHRcdF0sXHJcblx0XHQuLi5wcm9wcyxcclxuXHR9KSA6IChcclxuXHRcdDxkaXYgY2xhc3NOYW1lPXtjc3MoXHJcblx0XHRcdCEhZ3JvdyAmJiBjbGFzc2VzLmdyb3csXHJcblx0XHRcdCEhc2VwYXJhdGUgJiYgY2xhc3Nlcy5zZXBhcmF0ZSxcclxuXHRcdFx0YXBocm9kaXRlU3R5bGVzXHJcblx0XHQpfSB7Li4ucHJvcHN9PlxyXG5cdFx0XHR7Y2hpbGRyZW59XHJcblx0XHQ8L2Rpdj5cclxuXHQpO1xyXG59O1xyXG5cclxuSW5saW5lR3JvdXBTZWN0aW9uLnByb3BUeXBlcyA9IHtcclxuXHRhY3RpdmU6IFByb3BUeXBlcy5ib29sLCAvLyBidXR0b25zIG9ubHlcclxuXHRjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcclxuXHRjb250aWd1b3VzOiBQcm9wVHlwZXMuYm9vbCxcclxuXHRncm93OiBQcm9wVHlwZXMuYm9vbCxcclxuXHRwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnZmlyc3QnLCAnbGFzdCcsICdtaWRkbGUnLCAnb25seSddKSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gSW5saW5lR3JvdXBTZWN0aW9uO1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gSW5saW5lIEdyb3VwOiBTZWN0aW9uXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuLy8gVGFrZXMgb25seSBGb3JtSW5wdXQgYW5kIEJ1dHRvbiBhcyBjaGlsZHJlbiwgcmVuZGVyaW5nIHRoZW0gYXMgYVxyXG4vLyB0aWR5IGlubGluZSBhcnJheVxyXG5cclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdC8vIHB1bGwgYWN0aXZlIGVsZW1lbnRzIHVwXHJcblx0YWN0aXZlOiB7XHJcblx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJyxcclxuXHR9LFxyXG5cclxuXHQvLyBzdHJldGNoIHRvIGZpbGwgYXZhaWxhYmxlIHdpZHRoXHJcblx0Z3Jvdzoge1xyXG5cdFx0ZmxleDogJzEgMSAwJyxcclxuXHR9LFxyXG5cclxuXHQvLyBzZXBhcmF0ZSBhcHBsaWNhYmxlIG5vbi1jb250aWd1b3VzIGVsZW1lbnRzXHJcblx0c2VwYXJhdGU6IHtcclxuXHRcdHBhZGRpbmdMZWZ0OiAnMC43NWVtJyxcclxuXHR9LFxyXG5cclxuXHQvLyBDb250aWd1b3VzOiBtYW5pcHVsYXRlIGNoaWxkcmVuIGRpcmVjdGx5XHJcblxyXG5cdC8vIHB1bGwgZm9jdXNlZCBjb250aWd1b3VzIGVsZW1lbnRzIHVwXHJcblx0Y29udGlndW91czoge1xyXG5cdFx0Jzpmb2N1cyc6IHtcclxuXHRcdFx0cG9zaXRpb246ICdyZWxhdGl2ZScsXHJcblx0XHRcdHpJbmRleDogMSxcclxuXHRcdH0sXHJcblx0fSxcclxuXHJcblx0Ly8gcG9zaXRpb25cclxuXHRjb250aWd1b3VzX19taWRkbGU6IHtcclxuXHRcdGJvcmRlclJhZGl1czogMCxcclxuXHRcdG1hcmdpbkxlZnQ6IHRoZW1lLmJ1dHRvbi5ib3JkZXJXaWR0aCAqIC0xLFxyXG5cdH0sXHJcblx0Y29udGlndW91c19fZmlyc3Q6IHtcclxuXHRcdGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAnMCAhaW1wb3J0YW50JyxcclxuXHRcdGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAnMCAhaW1wb3J0YW50JyxcclxuXHR9LFxyXG5cdGNvbnRpZ3VvdXNfX2xhc3Q6IHtcclxuXHRcdGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6ICcwICFpbXBvcnRhbnQnLFxyXG5cdFx0Ym9yZGVyVG9wTGVmdFJhZGl1czogJzAgIWltcG9ydGFudCcsXHJcblx0XHRtYXJnaW5MZWZ0OiB0aGVtZS5idXR0b24uYm9yZGVyV2lkdGggKiAtMSxcclxuXHR9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCBDaGlsZHJlbiwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuLy8gTk9URTogb25seSBhY2NlcHRzIElubGluZUdyb3VwU2VjdGlvbiBhcyBhIHNpbmdsZSBjaGlsZFxyXG5cclxuZnVuY3Rpb24gSW5saW5lR3JvdXAgKHtcclxuXHRhcGhyb2RpdGVTdHlsZXMsXHJcblx0YmxvY2ssXHJcblx0Y2hpbGRyZW4sXHJcblx0Y2xhc3NOYW1lLFxyXG5cdGNvbXBvbmVudDogQ29tcG9uZW50LFxyXG5cdGNvbnRpZ3VvdXMsXHJcblx0Li4ucHJvcHNcclxufSkge1xyXG5cdC8vIHByZXBhcmUgZ3JvdXAgY2xhc3NOYW1lXHJcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0Y2xhc3Nlcy5ncm91cCxcclxuXHRcdCEhYmxvY2sgJiYgY2xhc3Nlcy5ibG9jayxcclxuXHRcdGFwaHJvZGl0ZVN0eWxlc1xyXG5cdCk7XHJcblx0aWYgKGNsYXNzTmFtZSkge1xyXG5cdFx0cHJvcHMuY2xhc3NOYW1lICs9ICgnICcgKyBjbGFzc05hbWUpO1xyXG5cdH1cclxuXHJcblx0Ly8gY29udmVydCBjaGlsZHJlbiB0byBhbiBhcnJheSBhbmQgZmlsdGVyIG91dCBmYWxzZXkgdmFsdWVzXHJcblx0Y29uc3QgYnV0dG9ucyA9IENoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pLmZpbHRlcihpID0+IGkpO1xyXG5cclxuXHQvLyBub3JtYWxpemUgdGhlIGNvdW50XHJcblx0Y29uc3QgY291bnQgPSBidXR0b25zLmxlbmd0aCAtIDE7XHJcblxyXG5cdC8vIGNsb25lIGNoaWxkcmVuIGFuZCBhcHBseSBjbGFzc05hbWVzIHRoYXQgYXBocm9kaXRlIGNhbiB0YXJnZXRcclxuXHRwcm9wcy5jaGlsZHJlbiA9IGJ1dHRvbnMubWFwKChjLCBpZHgpID0+IHtcclxuXHRcdGlmICghYykgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0Y29uc3QgaXNPbmx5Q2hpbGQgPSAhY291bnQ7XHJcblx0XHRjb25zdCBpc0ZpcnN0Q2hpbGQgPSAhaXNPbmx5Q2hpbGQgJiYgaWR4ID09PSAwO1xyXG5cdFx0Y29uc3QgaXNMYXN0Q2hpbGQgPSAhaXNPbmx5Q2hpbGQgJiYgaWR4ID09PSBjb3VudDtcclxuXHRcdGNvbnN0IGlzTWlkZGxlQ2hpbGQgPSAhaXNPbmx5Q2hpbGQgJiYgIWlzRmlyc3RDaGlsZCAmJiAhaXNMYXN0Q2hpbGQ7XHJcblxyXG5cdFx0bGV0IHBvc2l0aW9uO1xyXG5cdFx0aWYgKGlzT25seUNoaWxkKSBwb3NpdGlvbiA9ICdvbmx5JztcclxuXHRcdGlmIChpc0ZpcnN0Q2hpbGQpIHBvc2l0aW9uID0gJ2ZpcnN0JztcclxuXHRcdGlmIChpc0xhc3RDaGlsZCkgcG9zaXRpb24gPSAnbGFzdCc7XHJcblx0XHRpZiAoaXNNaWRkbGVDaGlsZCkgcG9zaXRpb24gPSAnbWlkZGxlJztcclxuXHJcblx0XHRyZXR1cm4gY2xvbmVFbGVtZW50KGMsIHtcclxuXHRcdFx0Y29udGlndW91czogY29udGlndW91cyxcclxuXHRcdFx0cG9zaXRpb24sXHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblx0cmV0dXJuIDxDb21wb25lbnQgey4uLnByb3BzfSAvPjtcclxufTtcclxuXHJcbklubGluZUdyb3VwLnByb3BUeXBlcyA9IHtcclxuXHRhcGhyb2RpdGVTdHlsZXM6IFByb3BUeXBlcy5zaGFwZSh7XHJcblx0XHRfZGVmaW5pdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcclxuXHRcdF9uYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdH0pLFxyXG5cdGJsb2NrOiBQcm9wVHlwZXMuYm9vbCxcclxuXHRjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLmZ1bmMsXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdF0pLFxyXG5cdGNvbnRpZ3VvdXM6IFByb3BUeXBlcy5ib29sLFxyXG59O1xyXG5JbmxpbmVHcm91cC5kZWZhdWx0UHJvcHMgPSB7XHJcblx0Y29tcG9uZW50OiAnZGl2JyxcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0Z3JvdXA6IHtcclxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXHJcblx0fSxcclxuXHRibG9jazoge1xyXG5cdFx0ZGlzcGxheTogJ2ZsZXgnLFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IElubGluZUdyb3VwO1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XHJcblxyXG5mdW5jdGlvbiBMYWJlbGxlZENvbnRyb2wgKHtcclxuXHRjbGFzc05hbWUsXHJcblx0aW5saW5lLFxyXG5cdGxhYmVsLFxyXG5cdHRpdGxlLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHRjb25zdCBsYWJlbENsYXNzTmFtZSA9IGNzcyhcclxuXHRcdGNsYXNzZXMud3JhcHBlcixcclxuXHRcdGlubGluZSAmJiBjbGFzc2VzLndyYXBwZXJfX2lubGluZSxcclxuXHRcdGNsYXNzTmFtZVxyXG5cdCk7XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8bGFiZWwgdGl0bGU9e3RpdGxlfSBjbGFzc05hbWU9e2xhYmVsQ2xhc3NOYW1lfT5cclxuXHRcdFx0PGlucHV0IHsuLi5wcm9wc30gY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5jb250cm9sKX0gLz5cclxuXHRcdFx0PHNwYW4gY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5sYWJlbCl9PntsYWJlbH08L3NwYW4+XHJcblx0XHQ8L2xhYmVsPlxyXG5cdCk7XHJcbn07XHJcblxyXG5MYWJlbGxlZENvbnRyb2wucHJvcFR5cGVzID0ge1xyXG5cdGlubGluZTogUHJvcFR5cGVzLmJvb2wsXHJcblx0dGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0dHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnY2hlY2tib3gnLCAncmFkaW8nXSkuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTGFiZWxsZWRDb250cm9sO1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gQWxlcnRcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXHJcblxyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0d3JhcHBlcjoge1xyXG5cdFx0ZGlzcGxheTogJ2Jsb2NrJyxcclxuXHRcdGhlaWdodDogdGhlbWUuaW5wdXQuaGVpZ2h0LFxyXG5cdFx0bGluZUhlaWdodDogdGhlbWUuaW5wdXQubGluZUhlaWdodCxcclxuXHR9LFxyXG5cdHdyYXBwZXJfX2lubGluZToge1xyXG5cdFx0ZGlzcGxheTogJ2lubGluZScsXHJcblx0fSxcclxuXHJcblx0Ly8gY2hlY2tib3ggb3IgcmFkaW9cclxuXHRjb250cm9sOiB7XHJcblx0XHRtYXJnaW5SaWdodDogJzAuNWVtJyxcclxuXHR9LFxyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL0J1dHRvbic7XHJcbmltcG9ydCBTcGlubmVyIGZyb20gJy4uL1NwaW5uZXInO1xyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxuZnVuY3Rpb24gTG9hZGluZ0J1dHRvbiAoeyBjaGlsZHJlbiwgbG9hZGluZywgLi4ucHJvcHMgfSkge1xyXG5cdC8vIGRldGVybWluZSB0aGUgY29ycmVjdCB2YXJpYW50IGZvciB0aGUgc3Bpbm5lcixcclxuXHQvLyBmaWxsIGlzIHRoZSBkZWZhdWx0IHZhcmlhbnQgb24gQnV0dG9uXHJcblx0Y29uc3QgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQgfHwgJ2ZpbGwnO1xyXG5cclxuXHQvLyBkZXRlcm1pbmUgdGhlIGNvcnJlY3QgY29sb3IgZm9yIHRoZSBzcGlubmVyLFxyXG5cdC8vIGNhbmNlbCBhbmQgZGVsZXRlIGFsaWFzIHRvIFwiZGFuZ2VyXCJcclxuXHRsZXQgY29sb3I7XHJcblx0aWYgKHByb3BzLmNvbG9yID09PSAnY2FuY2VsJyB8fCBwcm9wcy5jb2xvciA9PT0gJ2RlbGV0ZScpIGNvbG9yID0gJ2Rhbmdlcic7XHJcblxyXG5cdC8vIG1lcmdlIGFsbCB0aGUgdmFyaWFudC9jb2xvciB0b2dldGhlclxyXG5cdGNvbnN0IGZvcm1hdHRlZENvbG9yID0gdmFyaWFudCA9PT0gJ2ZpbGwnICYmIHByb3BzLmNvbG9yICE9PSAnZGVmYXVsdCdcclxuXHRcdD8gJ2ludmVydGVkJ1xyXG5cdFx0OiBjb2xvcjtcclxuXHJcblx0Ly8gcmVuZGVyIHRoZSBzcGlubmVyIGlmIHJlcXVpcmVkXHJcblx0Y29uc3Qgc3Bpbm5lciA9IGxvYWRpbmcgJiYgKFxyXG5cdFx0PFNwaW5uZXJcclxuXHRcdFx0c2l6ZT1cInNtYWxsXCJcclxuXHRcdFx0Y29sb3I9e2Zvcm1hdHRlZENvbG9yfVxyXG5cdFx0Lz5cclxuXHQpO1xyXG5cclxuXHQvLyBzbGlkZSB0aGUgc3Bpbm5lciBpbiBhbmQgb3V0IG9mIHZpZXdcclxuXHRjb25zdCBzcGlubmVyU3R5bGVzID0ge1xyXG5cdFx0d2lkdGg6IGxvYWRpbmdcclxuXHRcdFx0PyAodGhlbWUuc3Bpbm5lci5zaXplLnNtYWxsICogNSArIHRoZW1lLnNwYWNpbmcuc21hbGwpXHJcblx0XHRcdDogMCxcclxuXHR9O1xyXG5cclxuXHQvLyByZW5kZXIgYWxsIHRoYXQgc2hpdFxyXG5cdHJldHVybiAoXHJcblx0XHQ8QnV0dG9uIHsuLi5wcm9wc30+XHJcblx0XHRcdDxzcGFuIGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuc3Bpbm5lcil9IHN0eWxlPXtzcGlubmVyU3R5bGVzfT5cclxuXHRcdFx0XHR7c3Bpbm5lcn1cclxuXHRcdFx0PC9zcGFuPlxyXG5cdFx0XHR7Y2hpbGRyZW59XHJcblx0XHQ8L0J1dHRvbj5cclxuXHQpO1xyXG59O1xyXG5cclxuTG9hZGluZ0J1dHRvbi5wcm9wVHlwZXMgPSB7XHJcblx0bG9hZGluZzogUHJvcFR5cGVzLmJvb2wsXHJcbn07XHJcbkxvYWRpbmdCdXR0b24uZGVmYXVsdFByb3BzID0ge1xyXG5cdGxvYWRpbmc6IGZhbHNlLFxyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRzcGlubmVyOiB7XHJcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdG92ZXJmbG93OiAnaGlkZGVuJyxcclxuXHRcdHRleHRBbGlnbjogJ2xlZnQnLFxyXG5cdFx0dHJhbnNpdGlvbjogJ3dpZHRoIDIwMG1zIGVhc2Utb3V0JyxcclxuXHRcdHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExvYWRpbmdCdXR0b247XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5mdW5jdGlvbiBNb2RhbEJvZHkgKHtcclxuXHRjbGFzc05hbWUsXHJcblx0Li4ucHJvcHNcclxufSkge1xyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2XHJcblx0XHRcdGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuYm9keSwgY2xhc3NOYW1lKX1cclxuXHRcdFx0ey4uLnByb3BzfVxyXG5cdFx0Lz5cclxuXHQpO1xyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRib2R5OiB7XHJcblx0XHRwYWRkaW5nQm90dG9tOiB0aGVtZS5tb2RhbC5wYWRkaW5nLmJvZHkudmVydGljYWwsXHJcblx0XHRwYWRkaW5nTGVmdDogdGhlbWUubW9kYWwucGFkZGluZy5ib2R5Lmhvcml6b250YWwsXHJcblx0XHRwYWRkaW5nUmlnaHQ6IHRoZW1lLm1vZGFsLnBhZGRpbmcuYm9keS5ob3Jpem9udGFsLFxyXG5cdFx0cGFkZGluZ1RvcDogdGhlbWUubW9kYWwucGFkZGluZy5ib2R5LnZlcnRpY2FsLFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1vZGFsQm9keTtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBTY3JvbGxMb2NrIGZyb20gJy4uL1Njcm9sbExvY2snO1xuaW1wb3J0IFBvcnRhbCBmcm9tICcuLi9Qb3J0YWwnO1xuXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuXG5jb25zdCBjYW5Vc2VEb20gPSAhIShcblx0dHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcblx0JiYgd2luZG93LmRvY3VtZW50XG5cdCYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50XG4pO1xuXG5jbGFzcyBNb2RhbERpYWxvZyBleHRlbmRzIENvbXBvbmVudCB7XG5cdGNvbnN0cnVjdG9yICgpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5oYW5kbGVCYWNrZHJvcENsaWNrID0gdGhpcy5oYW5kbGVCYWNrZHJvcENsaWNrLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5oYW5kbGVLZXlib2FyZElucHV0ID0gdGhpcy5oYW5kbGVLZXlib2FyZElucHV0LmJpbmQodGhpcyk7XG5cdH1cblx0Z2V0Q2hpbGRDb250ZXh0ICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0b25DbG9zZTogdGhpcy5wcm9wcy5vbkNsb3NlLFxuXHRcdH07XG5cdH1cblx0Y29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG5cdFx0aWYgKCFjYW5Vc2VEb20pIHJldHVybjtcblxuXHRcdC8vIGFkZCBldmVudCBsaXN0ZW5lcnNcblx0XHRpZiAobmV4dFByb3BzLmlzT3BlbiAmJiBuZXh0UHJvcHMuZW5hYmxlS2V5Ym9hcmRJbnB1dCkge1xuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleWJvYXJkSW5wdXQpO1xuXHRcdH1cblx0XHRpZiAoIW5leHRQcm9wcy5pc09wZW4gJiYgbmV4dFByb3BzLmVuYWJsZUtleWJvYXJkSW5wdXQpIHtcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlib2FyZElucHV0KTtcblx0XHR9XG5cdH1cblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuXHRcdGlmICh0aGlzLnByb3BzLmVuYWJsZUtleWJvYXJkSW5wdXQpIHtcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlib2FyZElucHV0KTtcblx0XHR9XG5cdH1cblxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0Ly8gTWV0aG9kc1xuXHQvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXHRoYW5kbGVLZXlib2FyZElucHV0IChldmVudCkge1xuXHRcdGlmIChldmVudC5rZXlDb2RlID09PSAyNykgdGhpcy5wcm9wcy5vbkNsb3NlKCk7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aGFuZGxlQmFja2Ryb3BDbGljayAoZSkge1xuXHRcdGlmIChlLnRhcmdldCAhPT0gdGhpcy5yZWZzLmNvbnRhaW5lcikgcmV0dXJuO1xuXG5cdFx0dGhpcy5wcm9wcy5vbkNsb3NlKCk7XG5cdH1cblxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0Ly8gUmVuZGVyZXJzXG5cdC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cdHJlbmRlckRpYWxvZyAoKSB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0YmFja2Ryb3BDbG9zZXNNb2RhbCxcblx0XHRcdGNoaWxkcmVuLFxuXHRcdFx0aXNPcGVuLFxuXHRcdFx0d2lkdGgsXG5cdFx0fSA9IHRoaXMucHJvcHM7XG5cblx0XHRpZiAoIWlzT3BlbikgcmV0dXJuIDxzcGFuIGtleT1cImNsb3NlZFwiIC8+O1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXZcblx0XHRcdFx0Y2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5jb250YWluZXIpfVxuXHRcdFx0XHRrZXk9XCJvcGVuXCJcblx0XHRcdFx0cmVmPVwiY29udGFpbmVyXCJcblx0XHRcdFx0b25DbGljaz17ISFiYWNrZHJvcENsb3Nlc01vZGFsICYmIHRoaXMuaGFuZGxlQmFja2Ryb3BDbGlja31cblx0XHRcdFx0b25Ub3VjaEVuZD17ISFiYWNrZHJvcENsb3Nlc01vZGFsICYmIHRoaXMuaGFuZGxlQmFja2Ryb3BDbGlja31cblx0XHRcdD5cblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmRpYWxvZyl9IHN0eWxlPXt7IHdpZHRoIH19IGRhdGEtc2NyZWVuLWlkPVwibW9kYWwtZGlhbG9nXCI+XG5cdFx0XHRcdFx0e2NoaWxkcmVufVxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PFNjcm9sbExvY2sgLz5cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH1cblx0cmVuZGVyICgpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PFBvcnRhbD5cblx0XHRcdFx0e3RoaXMucmVuZGVyRGlhbG9nKCl9XG5cdFx0XHQ8L1BvcnRhbD5cblx0XHQpO1xuXHR9XG59O1xuXG5Nb2RhbERpYWxvZy5wcm9wVHlwZXMgPSB7XG5cdGJhY2tkcm9wQ2xvc2VzTW9kYWw6IFByb3BUeXBlcy5ib29sLFxuXHRlbmFibGVLZXlib2FyZElucHV0OiBQcm9wVHlwZXMuYm9vbCxcblx0aXNPcGVuOiBQcm9wVHlwZXMuYm9vbCxcblx0b25DbG9zZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0d2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXG59O1xuTW9kYWxEaWFsb2cuZGVmYXVsdFByb3BzID0ge1xuXHRlbmFibGVLZXlib2FyZElucHV0OiB0cnVlLFxuXHR3aWR0aDogNzY4LFxufTtcbk1vZGFsRGlhbG9nLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuXHRvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuY29uc3QgY2xhc3NlcyA9IHtcblx0Y29udGFpbmVyOiB7XG5cdFx0YWxpZ25JdGVtczogJ2NlbnRlcicsXG5cdFx0YmFja2dyb3VuZENvbG9yOiB0aGVtZS5tb2RhbC5iYWNrZ3JvdW5kLFxuXHRcdGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuXHRcdGRpc3BsYXk6ICdmbGV4Jyxcblx0XHRoZWlnaHQ6ICcxMDAlJyxcblx0XHRqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG5cdFx0bGVmdDogMCxcblx0XHRwb3NpdGlvbjogJ2ZpeGVkJyxcblx0XHR0b3A6IDAsXG5cdFx0d2lkdGg6ICcxMDAlJyxcblx0XHR6SW5kZXg6IHRoZW1lLm1vZGFsLnpJbmRleCxcblx0fSxcblx0ZGlhbG9nOiB7XG5cdFx0bWF4SGVpZ2h0OiAnOTAlJyxcblx0XHRvdmVyZmxvdzogJ3Njcm9sbCcsXG5cdFx0YmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuXHRcdGJvcmRlclJhZGl1czogdGhlbWUuYm9yZGVyUmFkaXVzLmRlZmF1bHQsXG5cdFx0cGFkZGluZ0JvdHRvbTogdGhlbWUubW9kYWwucGFkZGluZy5kaWFsb2cudmVydGljYWwsXG5cdFx0cGFkZGluZ0xlZnQ6IHRoZW1lLm1vZGFsLnBhZGRpbmcuZGlhbG9nLmhvcml6b250YWwsXG5cdFx0cGFkZGluZ1JpZ2h0OiB0aGVtZS5tb2RhbC5wYWRkaW5nLmRpYWxvZy5ob3Jpem9udGFsLFxuXHRcdHBhZGRpbmdUb3A6ICc1cHgnLFxuXHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuXHR9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTW9kYWxEaWFsb2c7XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxuZnVuY3Rpb24gTW9kYWxGb290ZXIgKHtcclxuXHRhbGlnbixcclxuXHRjbGFzc05hbWUsXHJcblx0Li4ucHJvcHNcclxufSkge1xyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2IHsuLi5wcm9wc30gY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5mb290ZXIsIGNsYXNzZXNbJ2FsaWduX18nICsgYWxpZ25dLCBjbGFzc05hbWUpfSAvPlxyXG5cdCk7XHJcbn07XHJcblxyXG5Nb2RhbEZvb3Rlci5wcm9wVHlwZXMgPSB7XHJcblx0YWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ2NlbnRlcicsICdsZWZ0JywgJ3JpZ2h0J10pLFxyXG5cdGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcclxuXHRvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcclxuXHRzaG93Q2xvc2VCdXR0b246IFByb3BUeXBlcy5ib29sLFxyXG5cdHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcbk1vZGFsRm9vdGVyLmRlZmF1bHRQcm9wcyA9IHtcclxuXHRhbGlnbjogJ2xlZnQnLFxyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRmb290ZXI6IHtcclxuXHRcdGJvcmRlclRvcDogYDJweCBzb2xpZCAke3RoZW1lLmNvbG9yLmdyYXkxMH1gLFxyXG5cdFx0ZGlzcGxheTogJ2ZsZXgnLFxyXG5cdFx0cGFkZGluZ0JvdHRvbTogdGhlbWUubW9kYWwucGFkZGluZy5mb290ZXIudmVydGljYWwsXHJcblx0XHRwYWRkaW5nTGVmdDogdGhlbWUubW9kYWwucGFkZGluZy5mb290ZXIuaG9yaXpvbnRhbCxcclxuXHRcdHBhZGRpbmdSaWdodDogdGhlbWUubW9kYWwucGFkZGluZy5mb290ZXIuaG9yaXpvbnRhbCxcclxuXHRcdHBhZGRpbmdUb3A6IHRoZW1lLm1vZGFsLnBhZGRpbmcuZm9vdGVyLnZlcnRpY2FsLFxyXG5cdH0sXHJcblxyXG5cdC8vIGFsaWdubWVudFxyXG5cdGFsaWduX19sZWZ0OiB7XHJcblx0XHRqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxyXG5cdH0sXHJcblx0YWxpZ25fX2NlbnRlcjoge1xyXG5cdFx0anVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG5cdH0sXHJcblx0YWxpZ25fX3JpZ2h0OiB7XHJcblx0XHRqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNb2RhbEZvb3RlcjtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IEdseXBoQnV0dG9uIGZyb20gJy4uL0dseXBoQnV0dG9uJztcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbmZ1bmN0aW9uIE1vZGFsSGVhZGVyICh7XHJcblx0Y2hpbGRyZW4sXHJcblx0Y2xhc3NOYW1lLFxyXG5cdHNob3dDbG9zZUJ1dHRvbixcclxuXHR0ZXh0LFxyXG5cdC4uLnByb3BzXHJcbn0sIHtcclxuXHRvbkNsb3NlLFxyXG59KSB7XHJcblx0Ly8gUHJvcGVydHkgVmlvbGF0aW9uXHJcblx0aWYgKGNoaWxkcmVuICYmIHRleHQpIHtcclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1dhcm5pbmc6IE1vZGFsSGVhZGVyIGNhbm5vdCByZW5kZXIgYGNoaWxkcmVuYCBhbmQgYHRleHRgLiBZb3UgbXVzdCBwcm92aWRlIG9uZSBvciB0aGUgb3RoZXIuJyk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdiB7Li4ucHJvcHN9IGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuaGVhZGVyLCBjbGFzc05hbWUpfT5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmdyb3cpfT5cclxuXHRcdFx0XHR7dGV4dCA/IChcclxuXHRcdFx0XHRcdDxoNCBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLnRleHQpfT5cclxuXHRcdFx0XHRcdFx0e3RleHR9XHJcblx0XHRcdFx0XHQ8L2g0PlxyXG5cdFx0XHRcdCkgOiBjaGlsZHJlbn1cclxuXHRcdFx0PC9kaXY+XHJcblx0XHRcdHshIW9uQ2xvc2UgJiYgc2hvd0Nsb3NlQnV0dG9uICYmIChcclxuXHRcdFx0XHQ8R2x5cGhCdXR0b25cclxuXHRcdFx0XHRcdGFwaHJvZGl0ZVN0eWxlcz17Y2xhc3Nlcy5jbG9zZX1cclxuXHRcdFx0XHRcdGNvbG9yPVwiY2FuY2VsXCJcclxuXHRcdFx0XHRcdGdseXBoPVwieFwiXHJcblx0XHRcdFx0XHRvbkNsaWNrPXtvbkNsb3NlfVxyXG5cdFx0XHRcdFx0dmFyaWFudD1cImxpbmtcIlxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdCl9XHJcblx0XHQ8L2Rpdj5cclxuXHQpO1xyXG59O1xyXG5cclxuTW9kYWxIZWFkZXIucHJvcFR5cGVzID0ge1xyXG5cdGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcclxuXHRvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcclxuXHRzaG93Q2xvc2VCdXR0b246IFByb3BUeXBlcy5ib29sLFxyXG5cdHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcbk1vZGFsSGVhZGVyLmNvbnRleHRUeXBlcyA9IHtcclxuXHRvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRoZWFkZXI6IHtcclxuXHRcdGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG5cdFx0Ym9yZGVyQm90dG9tOiBgMnB4IHNvbGlkICR7dGhlbWUuY29sb3IuZ3JheTEwfWAsXHJcblx0XHRkaXNwbGF5OiAnZmxleCcsXHJcblx0XHRwYWRkaW5nQm90dG9tOiB0aGVtZS5tb2RhbC5wYWRkaW5nLmhlYWRlci52ZXJ0aWNhbCxcclxuXHRcdHBhZGRpbmdMZWZ0OiB0aGVtZS5tb2RhbC5wYWRkaW5nLmhlYWRlci5ob3Jpem9udGFsLFxyXG5cdFx0cGFkZGluZ1JpZ2h0OiB0aGVtZS5tb2RhbC5wYWRkaW5nLmhlYWRlci5ob3Jpem9udGFsLFxyXG5cdFx0cGFkZGluZ1RvcDogdGhlbWUubW9kYWwucGFkZGluZy5oZWFkZXIudmVydGljYWwsXHJcblx0fSxcclxuXHJcblx0Ly8gZmlsbCBzcGFjZSB0byBwdXNoIHRoZSBjbG9zZSBidXR0b24gcmlnaHRcclxuXHRncm93OiB7XHJcblx0XHRmbGV4R3JvdzogMSxcclxuXHR9LFxyXG5cclxuXHQvLyB0aXRsZSB0ZXh0XHJcblx0dGV4dDoge1xyXG5cdFx0Y29sb3I6ICdpbmhlcml0JyxcclxuXHRcdGZvbnRTaXplOiAxOCxcclxuXHRcdGZvbnRXZWlnaHQ6IDUwMCxcclxuXHRcdGxpbmVIZWlnaHQ6IDEsXHJcblx0XHRtYXJnaW46IDAsXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTW9kYWxIZWFkZXI7XHJcbiIsImltcG9ydCBCb2R5IGZyb20gJy4vYm9keSc7XHJcbmltcG9ydCBEaWFsb2cgZnJvbSAnLi9kaWFsb2cnO1xyXG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vZm9vdGVyJztcclxuaW1wb3J0IEhlYWRlciBmcm9tICcuL2hlYWRlcic7XHJcblxyXG5leHBvcnQge1xyXG5cdEJvZHksXHJcblx0RGlhbG9nLFxyXG5cdEZvb3RlcixcclxuXHRIZWFkZXIsXHJcbn07XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlJztcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbmNsYXNzIFBhZ2luYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cdHJlbmRlckNvdW50ICgpIHtcclxuXHRcdGxldCBjb3VudCA9ICcnO1xyXG5cdFx0Y29uc3QgeyBjdXJyZW50UGFnZSwgcGFnZVNpemUsIHBsdXJhbCwgc2luZ3VsYXIsIHRvdGFsIH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0aWYgKCF0b3RhbCkge1xyXG5cdFx0XHRjb3VudCA9ICdObyAnICsgKHBsdXJhbCB8fCAncmVjb3JkcycpO1xyXG5cdFx0fSBlbHNlIGlmICh0b3RhbCA+IHBhZ2VTaXplKSB7XHJcblx0XHRcdGxldCBzdGFydCA9IChwYWdlU2l6ZSAqIChjdXJyZW50UGFnZSAtIDEpKSArIDE7XHJcblx0XHRcdGxldCBlbmQgPSBNYXRoLm1pbihzdGFydCArIHBhZ2VTaXplIC0gMSwgdG90YWwpO1xyXG5cdFx0XHRjb3VudCA9IGBTaG93aW5nICR7c3RhcnR9IHRvICR7ZW5kfSBvZiAke3RvdGFsfWA7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjb3VudCA9ICdTaG93aW5nICcgKyB0b3RhbDtcclxuXHRcdFx0aWYgKHRvdGFsID4gMSAmJiBwbHVyYWwpIHtcclxuXHRcdFx0XHRjb3VudCArPSAnICcgKyBwbHVyYWw7XHJcblx0XHRcdH0gZWxzZSBpZiAodG90YWwgPT09IDEgJiYgc2luZ3VsYXIpIHtcclxuXHRcdFx0XHRjb3VudCArPSAnICcgKyBzaW5ndWxhcjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmNvdW50KX0gZGF0YS1lMmUtcGFnaW5hdGlvbi1jb3VudD57Y291bnR9PC9kaXY+XHJcblx0XHQpO1xyXG5cdH1cclxuXHRyZW5kZXJQYWdlcyAoKSB7XHJcblx0XHRjb25zdCB7IGN1cnJlbnRQYWdlLCBsaW1pdCwgb25QYWdlU2VsZWN0LCBwYWdlU2l6ZSwgdG90YWwgfSA9IHRoaXMucHJvcHM7XHJcblxyXG5cdFx0aWYgKHRvdGFsIDw9IHBhZ2VTaXplKSByZXR1cm4gbnVsbDtcclxuXHJcblx0XHRsZXQgcGFnZXMgPSBbXTtcclxuXHRcdGxldCB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKHRvdGFsIC8gcGFnZVNpemUpO1xyXG5cdFx0bGV0IG1pblBhZ2UgPSAxO1xyXG5cdFx0bGV0IG1heFBhZ2UgPSB0b3RhbFBhZ2VzO1xyXG5cclxuXHRcdGlmIChsaW1pdCAmJiAobGltaXQgPCB0b3RhbFBhZ2VzKSkge1xyXG5cdFx0XHRsZXQgcmlnaHRMaW1pdCA9IE1hdGguZmxvb3IobGltaXQgLyAyKTtcclxuXHRcdFx0bGV0IGxlZnRMaW1pdCA9IHJpZ2h0TGltaXQgKyAobGltaXQgJSAyKSAtIDE7XHJcblx0XHRcdG1pblBhZ2UgPSBjdXJyZW50UGFnZSAtIGxlZnRMaW1pdDtcclxuXHRcdFx0bWF4UGFnZSA9IGN1cnJlbnRQYWdlICsgcmlnaHRMaW1pdDtcclxuXHJcblx0XHRcdGlmIChtaW5QYWdlIDwgMSkge1xyXG5cdFx0XHRcdG1heFBhZ2UgPSBsaW1pdDtcclxuXHRcdFx0XHRtaW5QYWdlID0gMTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAobWF4UGFnZSA+IHRvdGFsUGFnZXMpIHtcclxuXHRcdFx0XHRtaW5QYWdlID0gdG90YWxQYWdlcyAtIGxpbWl0ICsgMTtcclxuXHRcdFx0XHRtYXhQYWdlID0gdG90YWxQYWdlcztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYgKG1pblBhZ2UgPiAxKSB7XHJcblx0XHRcdHBhZ2VzLnB1c2goPFBhZ2Uga2V5PVwicGFnZV9zdGFydFwiIG9uQ2xpY2s9eygpID0+IG9uUGFnZVNlbGVjdCgxKX0+Li4uPC9QYWdlPik7XHJcblx0XHR9XHJcblx0XHRmb3IgKGxldCBwYWdlID0gbWluUGFnZTsgcGFnZSA8PSBtYXhQYWdlOyBwYWdlKyspIHtcclxuXHRcdFx0bGV0IHNlbGVjdGVkID0gKHBhZ2UgPT09IGN1cnJlbnRQYWdlKTtcclxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXHJcblx0XHRcdHBhZ2VzLnB1c2goPFBhZ2Uga2V5PXsncGFnZV8nICsgcGFnZX0gc2VsZWN0ZWQ9e3NlbGVjdGVkfSBvbkNsaWNrPXsoKSA9PiBvblBhZ2VTZWxlY3QocGFnZSl9PntwYWdlfTwvUGFnZT4pO1xyXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlICovXHJcblx0XHR9XHJcblx0XHRpZiAobWF4UGFnZSA8IHRvdGFsUGFnZXMpIHtcclxuXHRcdFx0cGFnZXMucHVzaCg8UGFnZSBrZXk9XCJwYWdlX2VuZFwiIG9uQ2xpY2s9eygpID0+IG9uUGFnZVNlbGVjdCh0b3RhbFBhZ2VzKX0+Li4uPC9QYWdlPik7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMubGlzdCl9PlxyXG5cdFx0XHRcdHtwYWdlc31cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH1cclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgY2xhc3NOYW1lID0gY3NzKGNsYXNzZXMuY29udGFpbmVyLCB0aGlzLnByb3BzLmNsYXNzTmFtZSk7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBzdHlsZT17dGhpcy5wcm9wcy5zdHlsZX0+XHJcblx0XHRcdFx0e3RoaXMucmVuZGVyQ291bnQoKX1cclxuXHRcdFx0XHR7dGhpcy5yZW5kZXJQYWdlcygpfVxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fVxyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRjb250YWluZXI6IHtcclxuXHRcdGRpc3BsYXk6ICdibG9jaycsXHJcblx0XHRsaW5lSGVpZ2h0OiB0aGVtZS5jb21wb25lbnQubGluZUhlaWdodCxcclxuXHRcdG1hcmdpbkJvdHRvbTogJzJlbScsXHJcblx0fSxcclxuXHRjb3VudDoge1xyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHRtYXJnaW5SaWdodDogJzFlbScsXHJcblx0XHR2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcclxuXHR9LFxyXG5cdGxpc3Q6IHtcclxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxyXG5cdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZScsXHJcblx0fSxcclxufTtcclxuXHJcblBhZ2luYXRpb24ucHJvcFR5cGVzID0ge1xyXG5cdGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRjdXJyZW50UGFnZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxyXG5cdGxpbWl0OiBQcm9wVHlwZXMubnVtYmVyLFxyXG5cdG9uUGFnZVNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXHJcblx0cGFnZVNpemU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcclxuXHRwbHVyYWw6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0c2luZ3VsYXI6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0c3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXHJcblx0dG90YWw6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUGFnaW5hdGlvbjtcclxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbmZ1bmN0aW9uIFBhZ2UgKHtcclxuXHRkaXNhYmxlZCxcclxuXHRzZWxlY3RlZCxcclxuXHQuLi5wcm9wc1xyXG59KSB7XHJcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0Y2xhc3Nlcy5wYWdlLFxyXG5cdFx0ISFkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLFxyXG5cdFx0ISFzZWxlY3RlZCAmJiBjbGFzc2VzLnNlbGVjdGVkXHJcblx0KTtcclxuXHRyZXR1cm4gKFxyXG5cdFx0PGJ1dHRvbiB7Li4ucHJvcHN9IC8+XHJcblx0KTtcclxufTtcclxuXHJcblBhZ2UucHJvcFR5cGVzID0ge1xyXG5cdGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcclxuXHRvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdHNlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcclxufTtcclxuXHJcbi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cclxuXHJcbmNvbnN0IHNlbGVjdGVkU3R5bGUgPSB7XHJcblx0YmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWdpbmF0aW9uLnNlbGVjdGVkLmJhY2tncm91bmQsXHJcblx0Ym9yZGVyQ29sb3I6IHRoZW1lLnBhZ2luYXRpb24uc2VsZWN0ZWQuYm9yZGVyLFxyXG5cdGNvbG9yOiB0aGVtZS5wYWdpbmF0aW9uLnNlbGVjdGVkLmNvbG9yLFxyXG5cdGN1cnNvcjogJ2RlZmF1bHQnLFxyXG5cdHpJbmRleDogMixcclxufTtcclxuY29uc3QgcHNldWRvU3R5bGUgPSB7XHJcblx0YmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWdpbmF0aW9uLmhvdmVyLmJhY2tncm91bmQsXHJcblx0Ym9yZGVyQ29sb3I6IHRoZW1lLnBhZ2luYXRpb24uaG92ZXIuYm9yZGVyLFxyXG5cdGNvbG9yOiB0aGVtZS5wYWdpbmF0aW9uLmhvdmVyLmNvbG9yLFxyXG5cdG91dGxpbmU6ICdub25lJyxcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0cGFnZToge1xyXG5cdFx0YXBwZWFyYW5jZTogJ25vbmUnLFxyXG5cdFx0YmFja2dyb3VuZDogJ25vbmUnLFxyXG5cdFx0Ym9yZGVyOiAnMXB4IHNvbGlkIHRyYW5zcGFyZW50JyxcclxuXHRcdGJvcmRlclJhZGl1czogdGhlbWUuYm9yZGVyUmFkaXVzLmRlZmF1bHQsXHJcblx0XHRjb2xvcjogdGhlbWUucGFnaW5hdGlvbi5jb2xvcixcclxuXHRcdGN1cnNvcjogJ3BvaW50ZXInLFxyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHRmbG9hdDogJ2xlZnQnLCAvLyBDb2xsYXBzZSB3aGl0ZS1zcGFjZVxyXG5cdFx0bWFyZ2luUmlnaHQ6ICcwLjI1ZW0nLFxyXG5cdFx0cGFkZGluZzogJzAgLjdlbScsXHJcblx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJyxcclxuXHRcdHRleHREZWNvcmF0aW9uOiAnbm9uZScsXHJcblxyXG5cdFx0Ly8gaGFuZGxlIGhvdmVyIGFuZCBmb2N1c1xyXG5cdFx0Jzpob3Zlcic6IHBzZXVkb1N0eWxlLFxyXG5cdFx0Jzpmb2N1cyc6IHBzZXVkb1N0eWxlLFxyXG5cdH0sXHJcblxyXG5cdC8vIHNlbGVjdGVkIHBhZ2VcclxuXHRzZWxlY3RlZDoge1xyXG5cdFx0Li4uc2VsZWN0ZWRTdHlsZSxcclxuXHJcblx0XHQnOmhvdmVyJzogc2VsZWN0ZWRTdHlsZSxcclxuXHRcdCc6Zm9jdXMnOiBzZWxlY3RlZFN0eWxlLFxyXG5cdH0sXHJcblxyXG5cdC8vIGRpc2FibGVkIHBhZ2VcclxuXHJcblx0ZGlzYWJsZWQ6IHtcclxuXHRcdGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFnaW5hdGlvbi5kaXNhYmxlZC5iYWNrZ3JvdW5kLFxyXG5cdFx0Ym9yZGVyQ29sb3I6IHRoZW1lLnBhZ2luYXRpb24uZGlzYWJsZWQuYmFja2dyb3VuZCxcclxuXHRcdGNvbG9yOiB0aGVtZS5wYWdpbmF0aW9uLmRpc2FibGVkLmNvbG9yLFxyXG5cdFx0Y3Vyc29yOiAnZGVmYXVsdCcsXHJcblx0fSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBhZ2U7XHJcbiIsImltcG9ydCB7IENoaWxkcmVuLCBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuXHJcbi8vIFBhc3MgdGhlIExpZ2h0Ym94IGNvbnRleHQgdGhyb3VnaCB0byB0aGUgUG9ydGFsJ3MgZGVzY2VuZGVudHNcclxuLy8gU3RhY2tPdmVyZmxvdyBkaXNjdXNzaW9uIGh0dHA6Ly9nb28uZ2wvb2Nscko5XHJcblxyXG5jbGFzcyBQYXNzQ29udGV4dCBleHRlbmRzIENvbXBvbmVudCB7XHJcblx0Z2V0Q2hpbGRDb250ZXh0ICgpIHtcclxuXHRcdHJldHVybiB0aGlzLnByb3BzLmNvbnRleHQ7XHJcblx0fVxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRyZXR1cm4gQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcclxuXHR9XHJcbn07XHJcblxyXG5QYXNzQ29udGV4dC5wcm9wVHlwZXMgPSB7XHJcblx0Y29udGV4dDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG59O1xyXG5QYXNzQ29udGV4dC5jaGlsZENvbnRleHRUeXBlcyA9IHtcclxuXHRvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBhc3NDb250ZXh0O1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBUcmFuc2l0aW9uIGZyb20gJ3JlYWN0LWFkZG9ucy1jc3MtdHJhbnNpdGlvbi1ncm91cCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCBQYXNzQ29udGV4dCBmcm9tICcuLi9QYXNzQ29udGV4dCc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9ydGFsIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHRjb25zdHJ1Y3RvciAoKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5wb3J0YWxFbGVtZW50ID0gbnVsbDtcclxuXHR9XHJcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xyXG5cdFx0Y29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwKTtcclxuXHRcdHRoaXMucG9ydGFsRWxlbWVudCA9IHA7XHJcblx0XHR0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSgpO1xyXG5cdH1cclxuXHRjb21wb25lbnREaWRVcGRhdGUgKCkge1xyXG5cdFx0Ly8gQW5pbWF0ZSBmYWRlIG9uIG1vdW50L3VubW91bnRcclxuXHRcdGNvbnN0IGR1cmF0aW9uID0gMjAwO1xyXG5cdFx0Y29uc3Qgc3R5bGVzID0gYFxyXG5cdFx0XHRcdC5mYWRlLWVudGVyIHsgb3BhY2l0eTogMC4wMTsgfVxyXG5cdFx0XHRcdC5mYWRlLWVudGVyLmZhZGUtZW50ZXItYWN0aXZlIHsgb3BhY2l0eTogMTsgdHJhbnNpdGlvbjogb3BhY2l0eSAke2R1cmF0aW9ufW1zOyB9XHJcblx0XHRcdFx0LmZhZGUtbGVhdmUgeyBvcGFjaXR5OiAxOyB9XHJcblx0XHRcdFx0LmZhZGUtbGVhdmUuZmFkZS1sZWF2ZS1hY3RpdmUgeyBvcGFjaXR5OiAwLjAxOyB0cmFuc2l0aW9uOiBvcGFjaXR5ICR7ZHVyYXRpb259bXM7IH1cclxuXHRcdGA7XHJcblx0XHRyZW5kZXIoXHJcblx0XHRcdDxQYXNzQ29udGV4dCBjb250ZXh0PXt0aGlzLmNvbnRleHR9PlxyXG5cdFx0XHRcdDxkaXY+XHJcblx0XHRcdFx0XHQ8c3R5bGU+e3N0eWxlc308L3N0eWxlPlxyXG5cdFx0XHRcdFx0PFRyYW5zaXRpb25cclxuXHRcdFx0XHRcdFx0Y29tcG9uZW50PVwiZGl2XCJcclxuXHRcdFx0XHRcdFx0dHJhbnNpdGlvbk5hbWU9XCJmYWRlXCJcclxuXHRcdFx0XHRcdFx0dHJhbnNpdGlvbkVudGVyVGltZW91dD17ZHVyYXRpb259XHJcblx0XHRcdFx0XHRcdHRyYW5zaXRpb25MZWF2ZVRpbWVvdXQ9e2R1cmF0aW9ufVxyXG5cdFx0XHRcdFx0XHR7Li4udGhpcy5wcm9wc31cclxuXHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdDwvUGFzc0NvbnRleHQ+LFxyXG5cdFx0XHR0aGlzLnBvcnRhbEVsZW1lbnRcclxuXHRcdCk7XHJcblx0fVxyXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcclxuXHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5wb3J0YWxFbGVtZW50KTtcclxuXHR9XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxufVxyXG5cclxuUG9ydGFsLmNvbnRleHRUeXBlcyA9IHtcclxuXHRvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcclxufTtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxuLy8gVXNpbmcgd2luZG93LmlubmVyV2lkdGggYW5kIHN0YXRlIGluc3RlYWQgb2YgQ1NTIG1lZGlhIGJyZWFrcG9pbnRzXHJcbi8vIGJlY2F1c2Ugd2Ugd2FudCB0byByZW5kZXIgbnVsbCByYXRoZXIgdGhhbiBhbiBlbXB0eSBzcGFuLiBBbGxvd2luZyBmb3JcclxuLy8gQ1NTIHBzZXVkbyBjbGFzc2VzIGxpa2UgOm9ubHktY2hpbGQgdG8gYmVoYXZlIGFzIGV4cGVjdGVkLlxyXG5cclxuLy8gUmV0dXJuIHRydWUgaWYgd2luZG93ICsgZG9jdW1lbnRcclxuY29uc3QgY2FuVXNlRE9NID0gISEoXHJcblx0dHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcclxuXHQmJiB3aW5kb3cuZG9jdW1lbnRcclxuXHQmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudFxyXG4pO1xyXG5cclxuY2xhc3MgUmVzcG9uc2l2ZVRleHQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cdGNvbnN0cnVjdG9yICgpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmhhbmRsZVJlc2l6ZSA9IHRoaXMuaGFuZGxlUmVzaXplLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLnN0YXRlID0ge1xyXG5cdFx0XHR3aW5kb3dXaWR0aDogY2FuVXNlRE9NID8gd2luZG93LmlubmVyV2lkdGggOiAwLFxyXG5cdFx0fTtcclxuXHR9XHJcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xyXG5cdFx0aWYgKGNhblVzZURPTSkge1xyXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xyXG5cdFx0XHR0aGlzLmhhbmRsZVJlc2l6ZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XHJcblx0XHRpZiAoY2FuVXNlRE9NKSB7XHJcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdGhhbmRsZVJlc2l6ZSAoKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0d2luZG93V2lkdGg6IGNhblVzZURPTSA/IHdpbmRvdy5pbm5lcldpZHRoIDogMCxcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3Qge1xyXG5cdFx0XHRjb21wb25lbnQ6IENvbXBvbmVudCxcclxuXHRcdFx0aGlkZGVuTEcsXHJcblx0XHRcdGhpZGRlbk1ELFxyXG5cdFx0XHRoaWRkZW5TTSxcclxuXHRcdFx0aGlkZGVuWFMsXHJcblx0XHRcdHZpc2libGVMRyxcclxuXHRcdFx0dmlzaWJsZU1ELFxyXG5cdFx0XHR2aXNpYmxlU00sXHJcblx0XHRcdHZpc2libGVYUyxcclxuXHRcdFx0Li4ucHJvcHNcclxuXHRcdH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0Y29uc3QgeyB3aW5kb3dXaWR0aCB9ID0gdGhpcy5zdGF0ZTtcclxuXHJcblx0XHRsZXQgdGV4dDtcclxuXHJcblx0XHQvLyBzZXQgdGV4dCB2YWx1ZSBmcm9tIGJyZWFrcG9pbnQ7IGF0dGVtcHQgWFMgLS0+IExHXHJcblx0XHRpZiAod2luZG93V2lkdGggPCB0aGVtZS5icmVha3BvaW50TnVtZXJpYy5tb2JpbGUpIHtcclxuXHRcdFx0dGV4dCA9IHZpc2libGVYUyB8fCBoaWRkZW5TTSB8fCBoaWRkZW5NRCB8fCBoaWRkZW5MRztcclxuXHRcdH0gZWxzZSBpZiAod2luZG93V2lkdGggPCB0aGVtZS5icmVha3BvaW50TnVtZXJpYy50YWJsZXRQb3J0cmFpdCkge1xyXG5cdFx0XHR0ZXh0ID0gaGlkZGVuWFMgfHwgdmlzaWJsZVNNIHx8IGhpZGRlbk1EIHx8IGhpZGRlbkxHO1xyXG5cdFx0fSBlbHNlIGlmICh3aW5kb3dXaWR0aCA8IHRoZW1lLmJyZWFrcG9pbnROdW1lcmljLnRhYmxldExhbmRzY2FwZSkge1xyXG5cdFx0XHR0ZXh0ID0gaGlkZGVuWFMgfHwgaGlkZGVuU00gfHwgdmlzaWJsZU1EIHx8IGhpZGRlbkxHO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGV4dCA9IGhpZGRlblhTIHx8IGhpZGRlblNNIHx8IGhpZGRlbk1EIHx8IHZpc2libGVMRztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGV4dCA/IDxDb21wb25lbnQgey4uLnByb3BzfT57dGV4dH08L0NvbXBvbmVudD4gOiBudWxsO1xyXG5cdH1cclxufTtcclxuXHJcblJlc3BvbnNpdmVUZXh0LnByb3BUeXBlcyA9IHtcclxuXHRoaWRkZW5MRzogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRoaWRkZW5NRDogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRoaWRkZW5TTTogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRoaWRkZW5YUzogUHJvcFR5cGVzLnN0cmluZyxcclxuXHR2aXNpYmxlTEc6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0dmlzaWJsZU1EOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHZpc2libGVTTTogUHJvcFR5cGVzLnN0cmluZyxcclxuXHR2aXNpYmxlWFM6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcblJlc3BvbnNpdmVUZXh0LmRlZmF1bHRQcm9wcyA9IHtcclxuXHRjb21wb25lbnQ6ICdzcGFuJyxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uc2l2ZVRleHQ7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcblxyXG5mdW5jdGlvbiBTY3JlZW5SZWFkZXJPbmx5ICh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSkge1xyXG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhjbGFzc2VzLnNyT25seSwgY2xhc3NOYW1lKTtcclxuXHJcblx0cmV0dXJuIDxzcGFuIHsuLi5wcm9wc30gLz47XHJcbn07XHJcblxyXG5jb25zdCBjbGFzc2VzID0ge1xyXG5cdHNyT25seToge1xyXG5cdFx0Ym9yZGVyOiAwLFxyXG5cdFx0Y2xpcDogJ3JlY3QoMCwwLDAsMCknLFxyXG5cdFx0aGVpZ2h0OiAxLFxyXG5cdFx0bWFyZ2luOiAtMSxcclxuXHRcdG92ZXJmbG93OiAnaGlkZGVuJyxcclxuXHRcdHBhZGRpbmc6IDAsXHJcblx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuXHRcdHdpZHRoOiAxLFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNjcmVlblJlYWRlck9ubHk7XHJcbiIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcm9sbExvY2sgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cdGNvbnN0cnVjdG9yICgpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmxvY2tDb3VudCA9IDA7XHJcblx0fVxyXG5cdGNvbXBvbmVudFdpbGxNb3VudCAoKSB7XHJcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcclxuXHJcblx0XHR0aGlzLmxvY2tDb3VudCsrO1xyXG5cdFx0aWYgKHRoaXMubG9ja0NvdW50ID4gMSkgcmV0dXJuO1xyXG5cclxuXHRcdC8vXHRGSVhNRSBpT1MgaWdub3JlcyBvdmVyZmxvdyBvbiBib2R5XHJcblx0XHR0cnkge1xyXG5cdFx0XHRjb25zdCBzY3JvbGxCYXJXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aDtcclxuXHJcblx0XHRcdGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LmJvZHk7XHJcblxyXG5cdFx0XHR0YXJnZXQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gc2Nyb2xsQmFyV2lkdGggKyAncHgnO1xyXG5cdFx0XHR0YXJnZXQuc3R5bGUub3ZlcmZsb3dZID0gJ2hpZGRlbic7XHJcblx0XHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZpbmQgYm9keSBlbGVtZW50LiBFcnI6JywgZXJyKTtcclxuXHRcdH1cclxuXHR9XHJcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xyXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8IHRoaXMubG9ja0NvdW50ID09PSAwKSByZXR1cm47XHJcblxyXG5cdFx0dGhpcy5sb2NrQ291bnQtLTtcclxuXHRcdGlmICh0aGlzLmxvY2tDb3VudCA+IDApIHJldHVybjsgLy8gU3RpbGwgbG9ja2VkXHJcblxyXG5cdFx0Ly9cdEZJWE1FIGlPUyBpZ25vcmVzIG92ZXJmbG93IG9uIGJvZHlcclxuXHRcdHRyeSB7XHJcblx0XHRcdGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LmJvZHk7XHJcblxyXG5cdFx0XHR0YXJnZXQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJyc7XHJcblx0XHRcdHRhcmdldC5zdHlsZS5vdmVyZmxvd1kgPSAnJztcclxuXHJcblx0XHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZpbmQgYm9keSBlbGVtZW50LiBFcnI6JywgZXJyKTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0ZGFuZ2VyOiB0aGVtZS5jb2xvci5kYW5nZXIsXHJcblx0ZGVmYXVsdDogdGhlbWUuY29sb3IuZ3JheTgwLFxyXG5cdGVycm9yOiB0aGVtZS5jb2xvci5kYW5nZXIsXHJcblx0aW5mbzogdGhlbWUuY29sb3IuaW5mbyxcclxuXHRwcmltYXJ5OiB0aGVtZS5jb2xvci5wcmltYXJ5LFxyXG5cdHN1Y2Nlc3M6IHRoZW1lLmNvbG9yLnN1Y2Nlc3MsXHJcblx0d2FybmluZzogdGhlbWUuY29sb3Iud2FybmluZyxcclxufTtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9zdHlsZXMnO1xyXG5pbXBvcnQgY29sb3JzIGZyb20gJy4vY29sb3JzJztcclxuXHJcbmZ1bmN0aW9uIFNlZ21lbnRlZENvbnRyb2wgKHtcclxuXHRjbGFzc05hbWUsXHJcblx0Y29sb3IsXHJcblx0Y3JvcFRleHQsXHJcblx0ZXF1YWxXaWR0aFNlZ21lbnRzLFxyXG5cdGlubGluZSxcclxuXHRvbkNoYW5nZSxcclxuXHRvcHRpb25zLFxyXG5cdHZhbHVlLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXHJcblx0XHRjbGFzc2VzLmNvbnRyb2wsXHJcblx0XHRpbmxpbmUgPyBjbGFzc2VzLmNvbnRyb2xfX2lubGluZSA6IG51bGwsXHJcblx0XHRjbGFzc05hbWVcclxuXHQpO1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdiB7Li4ucHJvcHN9PlxyXG5cdFx0XHR7b3B0aW9ucy5tYXAoKG9wdCkgPT4ge1xyXG5cdFx0XHRcdGNvbnN0IGJ1dHRvbkNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdFx0XHRcdGNsYXNzZXMuYnV0dG9uLFxyXG5cdFx0XHRcdFx0b3B0LmRpc2FibGVkID8gY2xhc3Nlcy5idXR0b25fX2Rpc2FibGVkIDogbnVsbCxcclxuXHRcdFx0XHRcdG9wdC52YWx1ZSA9PT0gdmFsdWUgPyBjbGFzc2VzWydidXR0b25fXycgKyBjb2xvcl0gOiBudWxsLFxyXG5cdFx0XHRcdFx0Y3JvcFRleHQgPyBjbGFzc2VzLmJ1dHRvbl9fY3JvcFRleHQgOiBudWxsLFxyXG5cdFx0XHRcdFx0ZXF1YWxXaWR0aFNlZ21lbnRzID8gY2xhc3Nlcy5idXR0b25fX2VxdWFsV2lkdGggOiBudWxsXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHRcdDxidXR0b25cclxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtidXR0b25DbGFzc05hbWV9XHJcblx0XHRcdFx0XHRcdGtleT17b3B0LnZhbHVlfVxyXG5cdFx0XHRcdFx0XHRvbkNsaWNrPXshb3B0LmRpc2FibGVkICYmICgoKSA9PiBvbkNoYW5nZShvcHQudmFsdWUpKX1cclxuXHRcdFx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXHJcblx0XHRcdFx0XHRcdHRpdGxlPXtjcm9wVGV4dCA/IG9wdC5sYWJlbCA6IG51bGx9XHJcblx0XHRcdFx0XHRcdHRhYkluZGV4PXtvcHQuZGlzYWJsZWQgPyAnLTEnIDogJyd9XHJcblx0XHRcdFx0XHRcdD5cclxuXHRcdFx0XHRcdFx0e29wdC5sYWJlbH1cclxuXHRcdFx0XHRcdDwvYnV0dG9uPlxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH0pfVxyXG5cdFx0PC9kaXY+KTtcclxufTtcclxuXHJcbmNvbnN0IHZhbHVlUHJvcFNoYXBlID0gW1xyXG5cdFByb3BUeXBlcy5ib29sLFxyXG5cdFByb3BUeXBlcy5udW1iZXIsXHJcblx0UHJvcFR5cGVzLnN0cmluZyxcclxuXTtcclxuXHJcblNlZ21lbnRlZENvbnRyb2wucHJvcFR5cGVzID0ge1xyXG5cdGNvbG9yOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoY29sb3JzKSksXHJcblx0Y3JvcFRleHQ6IFByb3BUeXBlcy5ib29sLCAvLyB3aGVuIGBpbmxpbmUgJiYgZXF1YWxXaWR0aFNlZ21lbnRzYCBjcm9wcyB0byB0aGUgbmV4dCBsYXJnZXN0IG9wdGlvbiBsZW5ndGhcclxuXHRlcXVhbFdpZHRoU2VnbWVudHM6IFByb3BUeXBlcy5ib29sLCAvLyBvbmx5IHJlbGV2YW50IHdoZW4gYGlubGluZSA9PT0gZmFsc2VgXHJcblx0aW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcclxuXHRvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHRvcHRpb25zOiBQcm9wVHlwZXMuYXJyYXlPZihcclxuXHRcdFByb3BUeXBlcy5zaGFwZSh7XHJcblx0XHRcdGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcclxuXHRcdFx0bGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRcdHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKHZhbHVlUHJvcFNoYXBlKSxcclxuXHRcdH0pXHJcblx0KS5pc1JlcXVpcmVkLFxyXG5cdHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKHZhbHVlUHJvcFNoYXBlKSxcclxufTtcclxuU2VnbWVudGVkQ29udHJvbC5kZWZhdWx0UHJvcHMgPSB7XHJcblx0Y29sb3I6ICdkZWZhdWx0JyxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU2VnbWVudGVkQ29udHJvbDtcclxuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFNlZ21lbnRlZCBDb250cm9sXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuLyogZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSAqL1xyXG5cclxuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG4vLyBQcmVwYXJlIHZhcmlhbnRzXHJcbmNvbnN0IGNvbG9yVmFyaWFudHMgPSB7fTtcclxuT2JqZWN0LmtleXMoY29sb3JzKS5mb3JFYWNoKGNvbG9yID0+IHtcclxuXHRjb25zdCBwc2V1ZG9TdHlsZXMgPSB7XHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yc1tjb2xvcl0sXHJcblx0XHRjb2xvcjogJ3doaXRlJyxcclxuXHR9O1xyXG5cdGNvbG9yVmFyaWFudHNbJ2J1dHRvbl9fJyArIGNvbG9yXSA9IHtcclxuXHRcdGJhY2tncm91bmRDb2xvcjogY29sb3JzW2NvbG9yXSxcclxuXHRcdGNvbG9yOiAnd2hpdGUnLFxyXG5cclxuXHRcdCc6aG92ZXInOiBwc2V1ZG9TdHlsZXMsXHJcblx0XHQnOmZvY3VzJzogcHNldWRvU3R5bGVzLFxyXG5cdFx0JzphY3RpdmUnOiBwc2V1ZG9TdHlsZXMsXHJcblx0fTtcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRjb250cm9sOiB7XHJcblx0XHRib3JkZXJXaWR0aDogMSxcclxuXHRcdGJvcmRlclN0eWxlOiAnc29saWQnLFxyXG5cdFx0Ym9yZGVyQ29sb3I6IHRoZW1lLmlucHV0LmJvcmRlci5jb2xvci5kZWZhdWx0LFxyXG5cdFx0Ym9yZGVyUmFkaXVzOiAnMC40ZW0nLFxyXG5cdFx0ZGlzcGxheTogJ2ZsZXgnLFxyXG5cdFx0Zm9udFNpemU6IHRoZW1lLmZvbnQuc2l6ZS5zbWFsbCxcclxuXHRcdHBhZGRpbmdMZWZ0OiAxLFxyXG5cdFx0cGFkZGluZ1JpZ2h0OiAxLFxyXG5cdH0sXHJcblx0Y29udHJvbF9faW5saW5lOiB7XHJcblx0XHRkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxyXG5cdH0sXHJcblxyXG5cdC8vIGJ1dHRvbnNcclxuXHRidXR0b246IHtcclxuXHRcdGJhY2tncm91bmQ6ICdub25lJyxcclxuXHRcdGJvcmRlcjogMCxcclxuXHRcdGJvcmRlclJhZGl1czogJzAuMjVlbScsXHJcblx0XHRmbGV4R3JvdzogMSxcclxuXHRcdG1hcmdpbjogJzJweCAxcHgnLFxyXG5cdFx0cGFkZGluZzogJzAuM2VtIDAuOWVtJyxcclxuXHRcdG91dGxpbmU6IDAsXHJcblxyXG5cdFx0Jzpob3Zlcic6IHsgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjA1KScgfSxcclxuXHRcdCc6Zm9jdXMnOiB7IGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4wNSknIH0sXHJcblx0XHQnOmFjdGl2ZSc6IHsgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjEpJyB9LFxyXG5cdH0sXHJcblx0YnV0dG9uX19lcXVhbFdpZHRoOiB7XHJcblx0XHRmbGV4OiAnMSAxIDAnLFxyXG5cdH0sXHJcblx0YnV0dG9uX19jcm9wVGV4dDoge1xyXG5cdFx0b3ZlcmZsb3c6ICdoaWRkZW4nLFxyXG5cdFx0dGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxyXG5cdFx0d2hpdGVTcGFjZTogJ25vd3JhcCcsXHJcblx0fSxcclxuXHRidXR0b25fX2Rpc2FibGVkOiB7XHJcblx0XHRvcGFjaXR5OiAwLjYsXHJcblx0XHRwb2ludGVyRXZlbnRzOiAnbm9uZScsXHJcblx0fSxcclxuXHJcblx0Ly8gY29sb3JzXHJcblx0Li4uY29sb3JWYXJpYW50cyxcclxufTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBbJ2RhbmdlcicsICdkZWZhdWx0JywgJ2ludmVydGVkJywgJ3ByaW1hcnknLCAnc3VjY2VzcycsICd3YXJuaW5nJ107XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcclxuaW1wb3J0IFNjcmVlblJlYWRlck9ubHkgZnJvbSAnLi4vU2NyZWVuUmVhZGVyT25seSc7XHJcbmltcG9ydCBjb2xvcnMgZnJvbSAnLi9jb2xvcnMnO1xyXG5pbXBvcnQgc2l6ZXMgZnJvbSAnLi9zaXplcyc7XHJcblxyXG5mdW5jdGlvbiBTcGlubmVyICh7IGNsYXNzTmFtZSwgc2l6ZSwgY29sb3IsIC4uLnByb3BzIH0pIHtcclxuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXHJcblx0XHRjbGFzc2VzLmJhc2UsXHJcblx0XHRjbGFzc2VzW3NpemVdLFxyXG5cdFx0Y2xhc3NOYW1lXHJcblx0KTtcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXYgey4uLnByb3BzfT5cclxuXHRcdFx0PHNwYW4gY2xhc3NOYW1lPXtgJHtjc3MoY2xhc3Nlcy5kb3QsIGNsYXNzZXNbJ3NpemVfXycgKyBzaXplXSwgY2xhc3Nlc1snY29sb3JfXycgKyBjb2xvcl0sIGNsYXNzZXMuZG90X19maXJzdCl9YH0gLz5cclxuXHRcdFx0PHNwYW4gY2xhc3NOYW1lPXtgJHtjc3MoY2xhc3Nlcy5kb3QsIGNsYXNzZXNbJ3NpemVfXycgKyBzaXplXSwgY2xhc3Nlc1snY29sb3JfXycgKyBjb2xvcl0sIGNsYXNzZXMuZG90X19zZWNvbmQpfWB9IC8+XHJcblx0XHRcdDxzcGFuIGNsYXNzTmFtZT17YCR7Y3NzKGNsYXNzZXMuZG90LCBjbGFzc2VzWydzaXplX18nICsgc2l6ZV0sIGNsYXNzZXNbJ2NvbG9yX18nICsgY29sb3JdLCBjbGFzc2VzLmRvdF9fdGhpcmQpfWB9IC8+XHJcblx0XHRcdDxTY3JlZW5SZWFkZXJPbmx5PkxvYWRpbmcuLi48L1NjcmVlblJlYWRlck9ubHk+XHJcblx0XHQ8L2Rpdj5cclxuXHQpO1xyXG59O1xyXG5cclxuU3Bpbm5lci5wcm9wVHlwZXMgPSB7XHJcblx0Y29sb3I6IFByb3BUeXBlcy5vbmVPZihjb2xvcnMpLFxyXG5cdHNpemU6IFByb3BUeXBlcy5vbmVPZihzaXplcyksXHJcbn07XHJcblNwaW5uZXIuZGVmYXVsdFByb3BzID0ge1xyXG5cdHNpemU6ICdtZWRpdW0nLFxyXG5cdGNvbG9yOiAnZGVmYXVsdCcsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNwaW5uZXI7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gWydzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnXTtcclxuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFNwaW5uZXJcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XHJcbmltcG9ydCBzaXplcyBmcm9tICcuL3NpemVzJztcclxuXHJcbi8vIFByZXBhcmUgdmFyaWFudHNcclxuY29uc3QgY29sb3JWYXJpYW50cyA9IHt9O1xyXG5jb2xvcnMuZm9yRWFjaChjb2xvciA9PiB7XHJcblx0Y29sb3JWYXJpYW50c1tgY29sb3JfXyR7Y29sb3J9YF0gPSB7XHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnNwaW5uZXIuY29sb3JbY29sb3JdLFxyXG5cdH07XHJcbn0pO1xyXG5cclxuLy8gUHJlcGFyZSBzaXplc1xyXG5jb25zdCBzaXplVmFyaWFudHMgPSB7fTtcclxuc2l6ZXMuZm9yRWFjaChzaXplID0+IHtcclxuXHRzaXplVmFyaWFudHNbYHNpemVfXyR7c2l6ZX1gXSA9IHtcclxuXHRcdGZvbnRTaXplOiB0aGVtZS5zcGlubmVyLnNpemVbc2l6ZV0sXHJcblx0fTtcclxufSk7XHJcblxyXG4vLyBEZWNsYXJlIGFuaW1hdGlvbiBrZXlmcmFtZXNcclxuXHJcbmNvbnN0IGtleWZyYW1lcyA9IGNvbXBvc2Uua2V5ZnJhbWVzKCdwdWxzZScsIHtcclxuXHQnMCUsIDgwJSwgMTAwJSc6IHsgb3BhY2l0eTogMCB9LFxyXG5cdCc0MCUnOiB7IG9wYWNpdHk6IDEgfSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRiYXNlOiB7XHJcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdGxpbmVIZWlnaHQ6IDEsXHJcblx0XHR0ZXh0QWxpZ246ICdjZW50ZXInLFxyXG5cdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZScsXHJcblx0XHR3aWR0aDogJzVlbScsXHJcblx0fSxcclxuXHRzbWFsbDpcdHsgZm9udFNpemU6IDQgfSxcclxuXHRtZWRpdW06XHR7IGZvbnRTaXplOiA4IH0sXHJcblx0bGFyZ2U6XHR7IGZvbnRTaXplOiAxNiB9LFxyXG5cclxuXHQvLyB0ZXh0XHJcblx0dGV4dDoge1xyXG5cdFx0Ym9yZGVyOiAwLFxyXG5cdFx0Y2xpcDogJ3JlY3QoMCwwLDAsMCknLFxyXG5cdFx0aGVpZ2h0OiAxLFxyXG5cdFx0bWFyZ2luOiAtMSxcclxuXHRcdG92ZXJmbG93OiAnaGlkZGVuJyxcclxuXHRcdHBhZGRpbmc6IDAsXHJcblx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuXHRcdHdpZHRoOiAxLFxyXG5cdH0sXHJcblxyXG5cdC8vIGRvdHNcclxuXHRkb3Q6IHtcclxuXHRcdGFuaW1hdGlvbk5hbWU6IGtleWZyYW1lcyxcclxuXHRcdGFuaW1hdGlvbkR1cmF0aW9uOiAnMXMnLFxyXG5cdFx0YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ICdpbmZpbml0ZScsXHJcblx0XHRib3JkZXJSYWRpdXM6ICcxZW0nLFxyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHRoZWlnaHQ6ICcxZW0nLFxyXG5cdFx0dmVydGljYWxBbGlnbjogJ3RvcCcsXHJcblx0XHR3aWR0aDogJzFlbScsXHJcblx0fSxcclxuXHRkb3RfX3NlY29uZDoge1xyXG5cdFx0YW5pbWF0aW9uRGVsYXk6ICcxNjBtcycsXHJcblx0XHRtYXJnaW5MZWZ0OiAnMWVtJyxcclxuXHR9LFxyXG5cdGRvdF9fdGhpcmQ6IHtcclxuXHRcdGFuaW1hdGlvbkRlbGF5OiAnMzIwbXMnLFxyXG5cdFx0bWFyZ2luTGVmdDogJzFlbScsXHJcblx0fSxcclxuXHJcblx0Ly8gQ29sb3JzXHJcblx0Li4uY29sb3JWYXJpYW50cyxcclxuXHJcblx0Ly8gU2l6ZXNcclxuXHQuLi5zaXplVmFyaWFudHMsXHJcbn07XHJcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdEFsZXJ0OiByZXF1aXJlKCcuL0FsZXJ0JyksXHJcblx0QmxhbmtTdGF0ZTogcmVxdWlyZSgnLi9CbGFua1N0YXRlJyksXHJcblx0QnV0dG9uOiByZXF1aXJlKCcuL0J1dHRvbicpLFxyXG5cdENlbnRlcjogcmVxdWlyZSgnLi9DZW50ZXInKSxcclxuXHRDaGlwOiByZXF1aXJlKCcuL0NoaXAnKSxcclxuXHRDb250YWluZXI6IHJlcXVpcmUoJy4vQ29udGFpbmVyJyksXHJcblx0RHJvcGRvd25CdXR0b246IHJlcXVpcmUoJy4vRHJvcGRvd25CdXR0b24nKSxcclxuXHRGb3JtOiByZXF1aXJlKCcuL0Zvcm0nKSxcclxuXHRGb3JtRmllbGQ6IHJlcXVpcmUoJy4vRm9ybUZpZWxkJyksXHJcblx0Rm9ybUlucHV0OiByZXF1aXJlKCcuL0Zvcm1JbnB1dCcpLFxyXG5cdEZvcm1MYWJlbDogcmVxdWlyZSgnLi9Gb3JtTGFiZWwnKSxcclxuXHRGb3JtTm90ZTogcmVxdWlyZSgnLi9Gb3JtTm90ZScpLFxyXG5cdEZvcm1TZWxlY3Q6IHJlcXVpcmUoJy4vRm9ybVNlbGVjdCcpLFxyXG5cdEdseXBoOiByZXF1aXJlKCcuL0dseXBoJyksXHJcblx0R2x5cGhCdXR0b246IHJlcXVpcmUoJy4vR2x5cGhCdXR0b24nKSxcclxuXHRHbHlwaEZpZWxkOiByZXF1aXJlKCcuL0dseXBoRmllbGQnKSxcclxuXHRHcmlkOiByZXF1aXJlKCcuL0dyaWQnKSxcclxuXHRJbmxpbmVHcm91cDogcmVxdWlyZSgnLi9JbmxpbmVHcm91cCcpLFxyXG5cdElubGluZUdyb3VwU2VjdGlvbjogcmVxdWlyZSgnLi9JbmxpbmVHcm91cFNlY3Rpb24nKSxcclxuXHRMYWJlbGxlZENvbnRyb2w6IHJlcXVpcmUoJy4vTGFiZWxsZWRDb250cm9sJyksXHJcblx0TG9hZGluZ0J1dHRvbjogcmVxdWlyZSgnLi9Mb2FkaW5nQnV0dG9uJyksXHJcblx0TW9kYWw6IHJlcXVpcmUoJy4vTW9kYWwnKSxcclxuXHRQYWdpbmF0aW9uOiByZXF1aXJlKCcuL1BhZ2luYXRpb24nKSxcclxuXHRSZXNwb25zaXZlVGV4dDogcmVxdWlyZSgnLi9SZXNwb25zaXZlVGV4dCcpLFxyXG5cdFNjcmVlblJlYWRlck9ubHk6IHJlcXVpcmUoJy4vU2NyZWVuUmVhZGVyT25seScpLFxyXG5cdFNlZ21lbnRlZENvbnRyb2w6IHJlcXVpcmUoJy4vU2VnbWVudGVkQ29udHJvbCcpLFxyXG5cdFNwaW5uZXI6IHJlcXVpcmUoJy4vU3Bpbm5lcicpLFxyXG59O1xyXG4iLCIvKipcclxuICogVGhpcyBpcyB0aGUgbWFpbiBlbnRyeSBmaWxlLCB3aGljaCB3ZSBjb21waWxlIHRoZSBtYWluIEpTIGJ1bmRsZSBmcm9tLiBJdFxyXG4gKiBvbmx5IGNvbnRhaW5zIHRoZSBjbGllbnQgc2lkZSByb3V0aW5nIHNldHVwLlxyXG4gKi9cclxuXHJcbi8vIE5lZWRlZCBmb3IgRVM2IGdlbmVyYXRvcnMgKHJlZHV4LXNhZ2EpIHRvIHdvcmtcclxuaW1wb3J0ICdiYWJlbC1wb2x5ZmlsbCc7XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgeyBSb3V0ZXIsIFJvdXRlLCBicm93c2VySGlzdG9yeSwgSW5kZXhSb3V0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgeyBzeW5jSGlzdG9yeVdpdGhTdG9yZSB9IGZyb20gJ3JlYWN0LXJvdXRlci1yZWR1eCc7XHJcblxyXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcclxuaW1wb3J0IEhvbWUgZnJvbSAnLi9zY3JlZW5zL0hvbWUnO1xyXG5pbXBvcnQgSXRlbSBmcm9tICcuL3NjcmVlbnMvSXRlbSc7XHJcbmltcG9ydCBMaXN0IGZyb20gJy4vc2NyZWVucy9MaXN0JztcclxuXHJcbmltcG9ydCBzdG9yZSBmcm9tICcuL3N0b3JlJztcclxuXHJcbi8vIFN5bmMgdGhlIGJyb3dzZXIgaGlzdG9yeSB0byB0aGUgUmVkdXggc3RvcmVcclxuY29uc3QgaGlzdG9yeSA9IHN5bmNIaXN0b3J5V2l0aFN0b3JlKGJyb3dzZXJIaXN0b3J5LCBzdG9yZSk7XHJcblxyXG4vLyBJbml0aWFsaXNlIEtleXN0b25lLlVzZXIgbGlzdFxyXG5pbXBvcnQgeyBsaXN0c0J5S2V5IH0gZnJvbSAnLi4vdXRpbHMvbGlzdHMnO1xyXG5LZXlzdG9uZS5Vc2VyID0gbGlzdHNCeUtleVtLZXlzdG9uZS51c2VyTGlzdF07XHJcblxyXG5SZWFjdERPTS5yZW5kZXIoXHJcblx0PFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcblx0XHQ8Um91dGVyIGhpc3Rvcnk9e2hpc3Rvcnl9PlxyXG5cdFx0XHQ8Um91dGUgcGF0aD17S2V5c3RvbmUuYWRtaW5QYXRofSBjb21wb25lbnQ9e0FwcH0+XHJcblx0XHRcdFx0PEluZGV4Um91dGUgY29tcG9uZW50PXtIb21lfSAvPlxyXG5cdFx0XHRcdDxSb3V0ZSBwYXRoPVwiOmxpc3RJZFwiIGNvbXBvbmVudD17TGlzdH0gLz5cclxuXHRcdFx0XHQ8Um91dGUgcGF0aD1cIjpsaXN0SWQvOml0ZW1JZFwiIGNvbXBvbmVudD17SXRlbX0gLz5cclxuXHRcdFx0PC9Sb3V0ZT5cclxuXHRcdDwvUm91dGVyPlxyXG5cdDwvUHJvdmlkZXI+LFxyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWFjdC1yb290JylcclxuKTtcclxuIiwiaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnbG9kYXNoL2lzUGxhaW5PYmplY3QnO1xyXG5pbXBvcnQgaXNBcnJheSBmcm9tICdsb2Rhc2gvaXNBcnJheSc7XHJcbmltcG9ydCBpc09iamVjdCBmcm9tICdsb2Rhc2gvaXNPYmplY3QnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgZXhwYW5kZWQgZmlsdGVyIG9iamVjdHMsXHJcbiAqIGdpdmVuIChhIHN0cmluZyByZXByZXNlbnRhdGlvbiB8IGFuIGFycmF5IG9mIGZpbHRlcnMpIGFuZCBhIGN1cnJlbnRMaXN0IG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIHsgU3RyaW5nfEFycmF5IH0gRWl0aGVyIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIGFycmF5IG9mIGZpbHRlciBvYmplY3RzLCBvciBhbiBhcnJheSBvZiBmaWx0ZXIgb2JqZWN0cy5cclxuICogQHBhcmFtIHsgT2JqZWN0IH0gdGhlIGN1cnJlbnQgaW5zdGFudGlhdGlvbiBvZiB0aGUgTGlzdCBwcm90b3R5cGUgdXNlZCBmb3IgdGhlIDxMaXN0Lz4gc2NlbmVcclxuICogQHJldHVybiB7IEFycmF5IH0gb2YgeyBPYmplY3RzIH0gYXMgYW4gZXhwYW5kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIGZpbHRlcnMgcGFzc2VkIGluLlxyXG4gKiovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyc1BhcnNlciAoZmlsdGVycywgY3VycmVudExpc3QpIHtcclxuXHRpZiAodHlwZW9mIGZpbHRlcnMgPT09ICdzdHJpbmcnKSB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRmaWx0ZXJzID0gSlNPTi5wYXJzZShmaWx0ZXJzKTtcclxuXHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0Y29uc29sZS53YXJuKCdJbnZhbGlkIGZpbHRlcnMgcHJvdmlkZWQnLCBmaWx0ZXJzKTtcclxuXHRcdFx0ZmlsdGVycyA9IHZvaWQgMDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmICghZmlsdGVycykgcmV0dXJuIFtdO1xyXG5cclxuXHRjb25zdCBhc3NlbWJsZWRGaWx0ZXJzID0gZmlsdGVycy5tYXAoZmlsdGVyID0+IHtcclxuXHRcdGNvbnN0IHBhdGggPSBmaWx0ZXIucGF0aDtcclxuXHRcdGNvbnN0IHZhbHVlID0gT2JqZWN0LmFzc2lnbih7fSwgZmlsdGVyKTtcclxuXHRcdGRlbGV0ZSB2YWx1ZS5wYXRoO1xyXG5cdFx0cmV0dXJuIGNyZWF0ZUZpbHRlck9iamVjdChwYXRoLCB2YWx1ZSwgY3VycmVudExpc3QuZmllbGRzKTtcclxuXHR9KTtcclxuXHJcblx0ZmlsdGVycyA9IGFzc2VtYmxlZEZpbHRlcnMuZmlsdGVyKGZpbHRlciA9PiBmaWx0ZXIpO1xyXG5cdHJldHVybiBmaWx0ZXJzO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBhcnJheSBvZiBleHBhbmRlZCBmaWx0ZXIgb2JqZWN0cyxcclxuICogZ2l2ZW4gKGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIHwgYW4gYXJyYXkgb2YgZmlsdGVycykgYW5kIGEgY3VycmVudExpc3Qgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0geyBPYmplY3QgfSBGaWx0ZXIgb2JqZWN0ICBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcga2V5IHZhbHVlIHBhaXJzIHtwYXRofSBhbmQge3ZhbHVlfS5cclxuICogQHBhcmFtIHsgQXJyYXkgfSBvZiB7IE9iamVjdHMgfSBhbiBhcnJheSBvZiB0aGUgY3VycmVudGx5IGFjdGl2ZSBmaWx0ZXJzLlxyXG4gKiBAcGFyYW0geyBPYmplY3QgfSB0aGUgY3VycmVudCBpbnN0YW50aWF0aW9uIG9mIHRoZSBMaXN0IHByb3RvdHlwZSB1c2VkIGZvciB0aGUgPExpc3QvPiBzY2VuZVxyXG4gKiBAcmV0dXJuIHsgT2JqZWN0IH0gYW4gZXhwYW5kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHBhc3NlZCBpbiBmaWx0ZXIgeyBPYmplY3QgfS5cclxuICoqL1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJQYXJzZXIgKHsgcGF0aCwgdmFsdWUgfSwgYWN0aXZlRmlsdGVycywgY3VycmVudExpc3QpIHtcclxuXHRpZiAoIWFjdGl2ZUZpbHRlcnMgfHwgIWlzQXJyYXkoYWN0aXZlRmlsdGVycykpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignYWN0aXZlRmlsdGVycyBtdXN0IGJlIGFuIGFycmF5Jyk7XHJcblx0fVxyXG5cdGlmICghY3VycmVudExpc3QpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignTm8gY3VycmVudExpc3Qgc2VsZWN0ZWQnKTtcclxuXHR9XHJcblxyXG5cdGlmICghaXNPYmplY3QoY3VycmVudExpc3QpIHx8IGlzQXJyYXkoY3VycmVudExpc3QpKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2N1cnJlbnRMaXN0IGlzIGV4cGVjdGVkIHRvIGJlIGFuIHsgT2JqZWN0IH0nLCBjdXJyZW50TGlzdCk7XHJcblx0fVxyXG5cclxuXHRsZXQgZmlsdGVyID0gYWN0aXZlRmlsdGVycy5maWx0ZXIoaSA9PiBpLmZpZWxkLnBhdGggPT09IHBhdGgpWzBdO1xyXG5cdGlmIChmaWx0ZXIpIHtcclxuXHRcdGZpbHRlci52YWx1ZSA9IHZhbHVlO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRmaWx0ZXIgPSBjcmVhdGVGaWx0ZXJPYmplY3QocGF0aCwgdmFsdWUsIGN1cnJlbnRMaXN0LmZpZWxkcyk7XHJcblx0XHRpZiAoIWZpbHRlcikge1xyXG5cdFx0XHRyZXR1cm4gdm9pZCAwO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gZmlsdGVyO1xyXG59XHJcblxyXG4vKlxyXG4qIFRoaXMgbWV0aG9kIGlzIGEgdXRpbCwgYnV0IGhhcyBzdWNoIGEgc3BlY2lmaWMgdXNlIHRoYXQgaXQgaXMgYmVpbmcgbGVmdCB3aXRoaW5cclxuKiB0aGUgZmlsZSB0aGF0IHVzZXMgaXQuXHJcbiovXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGZpbHRlciBvYmplY3RcclxuICogZ2l2ZW4gYSBwYXRoLCBhIHZhbHVlLCBhbmQgdGhlIGZpZWxkcyB3aXRoaW4gYW4gaW5zdGFuY2Ugb2YgdGhlIExpc3QgcHJvdG90eXBlLlxyXG4gKlxyXG4gKiBAcGFyYW0geyBTdHJpbmcgfSBmaWx0ZXIgcGF0aFxyXG4gKiBAcGFyYW0geyBPYmplY3QgfSBvZiBmaWx0ZXIgdmFsdWVzLlxyXG4gKiBAcGFyYW0geyBPYmplY3QgfSBvZiBmaWVsZHMgZnJvbSB0aGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgTGlzdCBwcm90b3R5cGUuXHJcbiAqIEByZXR1cm4geyBPYmplY3QgfSBhIGZpbHRlciBjb21wcmlzZWQgb2YgdGhlOmZpbHRlcnMuanNcclxuICpcdC0gY29ycmVzcG9uZGluZyBmaWVsZCB2YWx1ZSB3aXRoaW4gdGhlIGN1cnJlbnQgTGlzdCxcclxuICpcdC0gYW5kIHRoZSBwYXNzZWQgaW4gdmFsdWUgeyBPYmplY3QgfS5cclxuICoqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZpbHRlck9iamVjdCAocGF0aCwgdmFsdWUsIGN1cnJlbnRMaXN0RmllbGRzKSB7XHJcblx0aWYgKCFjdXJyZW50TGlzdEZpZWxkcyB8fCAhaXNQbGFpbk9iamVjdChjdXJyZW50TGlzdEZpZWxkcykpIHtcclxuXHRcdGNvbnNvbGUud2FybignY3VycmVudExpc3RGaWVsZHMgbXVzdCBiZSBhIHBsYWluIG9iamVjdCcsIGN1cnJlbnRMaXN0RmllbGRzKTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdGNvbnN0IGZpZWxkID0gY3VycmVudExpc3RGaWVsZHNbcGF0aF07XHJcblxyXG5cdGlmICghZmllbGQpIHtcclxuXHRcdGNvbnNvbGUud2FybignSW52YWxpZCBGaWx0ZXIgcGF0aCBzcGVjaWZpZWQ6JywgcGF0aCk7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0ZmllbGQsXHJcblx0XHR2YWx1ZSxcclxuXHR9O1xyXG59XHJcbiIsImltcG9ydCB7IGZpbHRlcnNQYXJzZXIsIGZpbHRlclBhcnNlciwgY3JlYXRlRmlsdGVyT2JqZWN0IH0gZnJvbSAnLi9maWx0ZXJzLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIGV4cGFuZGVkIGNvbHVtbnMgb2JqZWN0LCBnaXZlbiBhIGxpc3Qgb2YgY29sdW1ucyBhbmQgY3VycmVudExpc3Qgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0geyBTdHJpbmcgfSBjb2x1bW5zLCBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIGxpc3Qgb2YgY29sdW1ucy5cclxuICogQHBhcmFtIHsgT2JqZWN0IH0gdGhlIGN1cnJlbnQgaW5zdGFudGlhdGlvbiBvZiB0aGUgTGlzdCBwcm90b3R5cGUgdXNlZCBmb3IgdGhlIDxMaXN0Lz4gc2NlbmVcclxuICogQHJldHVybiB7IEFycmF5IH0gb2YgeyBPYmplY3RzIH0gYXMgYW4gZXhwYW5kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIGNvbHVtbiB2YWx1ZXMgcGFzc2VkIGluLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIGNvbHVtbnNQYXJzZXIgKGNvbHVtbnMsIGN1cnJlbnRMaXN0KSB7XHJcblx0aWYgKCFjdXJyZW50TGlzdCkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdObyBjdXJyZW50TGlzdCBzZWxlY3RlZCcpO1xyXG5cdH1cclxuXHRpZiAoIWNvbHVtbnMgfHwgY29sdW1ucy5sZW5ndGggPT09IDApIHtcclxuXHRcdHJldHVybiBjdXJyZW50TGlzdC5leHBhbmRDb2x1bW5zKGN1cnJlbnRMaXN0LmRlZmF1bHRDb2x1bW5zKTtcclxuXHR9XHJcblx0cmV0dXJuIGN1cnJlbnRMaXN0LmV4cGFuZENvbHVtbnMoY29sdW1ucyk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBleHBhbmRlZCBzb3J0IG9iamVjdCwgZ2l2ZW4gYSBzb3J0IHBhdGggYW5kIGN1cnJlbnRMaXN0IG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIHsgU3RyaW5nIH0gcGF0aCwgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBsaXN0IG9mIGNvbHVtbnMuXHJcbiAqIEBwYXJhbSB7IE9iamVjdCB9IHRoZSBjdXJyZW50IGluc3RhbnRpYXRpb24gb2YgdGhlIExpc3QgcHJvdG90eXBlIHVzZWQgZm9yIHRoZSA8TGlzdC8+IHNjZW5lXHJcbiAqIEByZXR1cm4geyBPYmplY3QgfSBhbiBleHBhbmRlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgc29ydCBwYXRoIHBhc3NlZCBpbi5cclxuICovXHJcblxyXG5mdW5jdGlvbiBzb3J0UGFyc2VyIChwYXRoLCBjdXJyZW50TGlzdCkge1xyXG5cdGlmICghY3VycmVudExpc3QpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignTm8gY3VycmVudExpc3Qgc2VsZWN0ZWQnKTtcclxuXHR9XHJcblx0aWYgKCFwYXRoKSByZXR1cm4gY3VycmVudExpc3QuZXhwYW5kU29ydChjdXJyZW50TGlzdC5kZWZhdWx0U29ydCk7XHJcblx0cmV0dXJuIGN1cnJlbnRMaXN0LmV4cGFuZFNvcnQocGF0aCk7XHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcblx0Y3JlYXRlRmlsdGVyT2JqZWN0LFxyXG5cdGZpbHRlcnNQYXJzZXIsXHJcblx0ZmlsdGVyUGFyc2VyLFxyXG5cdHNvcnRQYXJzZXIsXHJcblx0Y29sdW1uc1BhcnNlcixcclxufTtcclxuIiwiaW1wb3J0IHsgdGFrZUxhdGVzdCwgZGVsYXkgfSBmcm9tICdyZWR1eC1zYWdhJztcclxuaW1wb3J0IHsgZm9yaywgc2VsZWN0LCBwdXQsIHRha2UsIGNhbGwgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xyXG5cclxuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi9zY3JlZW5zL0xpc3QvY29uc3RhbnRzJztcclxuaW1wb3J0IHsgdXBkYXRlUGFyYW1zLCBldmFsUXVlcnlQYXJhbXMgfSBmcm9tICcuL3F1ZXJ5UGFyYW1zU2FnYXMnO1xyXG5pbXBvcnQgeyBjb2x1bW5zUGFyc2VyLCBzb3J0UGFyc2VyLCBmaWx0ZXJQYXJzZXIgfSBmcm9tICcuLi9wYXJzZXJzJztcclxuXHJcbi8qKlxyXG4gKiBEZWJvdW5jZSB0aGUgc2VhcmNoIGxvYWRpbmcgbmV3IGl0ZW1zIGJ5IDUwMG1zXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gKiBkZWJvdW5jZWRTZWFyY2ggKCkge1xyXG5cdGNvbnN0IHNlYXJjaFN0cmluZyA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLmFjdGl2ZS5zZWFyY2gpO1xyXG5cdGlmIChzZWFyY2hTdHJpbmcpIHtcclxuXHRcdHlpZWxkIGRlbGF5KDUwMCk7XHJcblx0fVxyXG5cdHlpZWxkIGNhbGwodXBkYXRlUGFyYW1zKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uICogc2V0QWN0aXZlQ29sdW1uc1NhZ2EgKCkge1xyXG5cdHdoaWxlICh0cnVlKSB7XHJcblx0XHRjb25zdCB7IGNvbHVtbnMgfSA9IHlpZWxkIHRha2UoYWN0aW9ucy5TRUxFQ1RfQUNUSVZFX0NPTFVNTlMpO1xyXG5cdFx0Y29uc3QgeyBjdXJyZW50TGlzdCB9ID0geWllbGQgc2VsZWN0KHN0YXRlID0+IHN0YXRlLmxpc3RzKTtcclxuXHRcdGNvbnN0IG5ld0NvbHVtbnMgPSB5aWVsZCBjYWxsKGNvbHVtbnNQYXJzZXIsIGNvbHVtbnMsIGN1cnJlbnRMaXN0KTtcclxuXHRcdHlpZWxkIHB1dCh7IHR5cGU6IGFjdGlvbnMuU0VUX0FDVElWRV9DT0xVTU5TLCBjb2x1bW5zOiBuZXdDb2x1bW5zIH0pO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uICogc2V0QWN0aXZlU29ydFNhZ2EgKCkge1xyXG5cdHdoaWxlICh0cnVlKSB7XHJcblx0XHRjb25zdCB7IHBhdGggfSA9IHlpZWxkIHRha2UoYWN0aW9ucy5TRUxFQ1RfQUNUSVZFX1NPUlQpO1xyXG5cdFx0Y29uc3QgeyBjdXJyZW50TGlzdCB9ID0geWllbGQgc2VsZWN0KHN0YXRlID0+IHN0YXRlLmxpc3RzKTtcclxuXHRcdGNvbnN0IHNvcnQgPSB5aWVsZCBjYWxsKHNvcnRQYXJzZXIsIHBhdGgsIGN1cnJlbnRMaXN0KTtcclxuXHJcblx0XHR5aWVsZCBwdXQoeyB0eXBlOiBhY3Rpb25zLlNFVF9BQ1RJVkVfU09SVCwgc29ydCB9KTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiAqIHNldEFjdGl2ZUZpbHRlclNhZ2EgKCkge1xyXG5cdHdoaWxlICh0cnVlKSB7XHJcblx0XHRjb25zdCB7IGZpbHRlciB9ID0geWllbGQgdGFrZShhY3Rpb25zLlNFTEVDVF9GSUxURVIpO1xyXG5cdFx0Y29uc3QgeyBjdXJyZW50TGlzdCB9ID0geWllbGQgc2VsZWN0KHN0YXRlID0+IHN0YXRlLmxpc3RzKTtcclxuXHRcdGNvbnN0IGFjdGl2ZUZpbHRlcnMgPSB5aWVsZCBzZWxlY3Qoc3RhdGUgPT4gc3RhdGUuYWN0aXZlLmZpbHRlcnMpO1xyXG5cdFx0Y29uc3QgdXBkYXRlZEZpbHRlciA9IHlpZWxkIGNhbGwoZmlsdGVyUGFyc2VyLCBmaWx0ZXIsIGFjdGl2ZUZpbHRlcnMsIGN1cnJlbnRMaXN0KTtcclxuXHJcblx0XHR5aWVsZCBwdXQoeyB0eXBlOiBhY3Rpb25zLkFERF9GSUxURVIsIGZpbHRlcjogdXBkYXRlZEZpbHRlciB9KTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uICogcm9vdFNhZ2EgKCkge1xyXG5cdHlpZWxkIGZvcmsodGFrZUxhdGVzdCwgYWN0aW9ucy5TRVRfQUNUSVZFX1NFQVJDSCwgZGVib3VuY2VkU2VhcmNoKTtcclxuXHR5aWVsZCBmb3JrKHRha2VMYXRlc3QsIGFjdGlvbnMuU0VUX0FDVElWRV9MSVNULCBldmFsUXVlcnlQYXJhbXMpO1xyXG5cdC8vIElmIG9uZSBvZiB0aGUgb3RoZXIgYWN0aXZlIHByb3BlcnRpZXMgY2hhbmdlcywgdXBkYXRlIHRoZSBxdWVyeSBwYXJhbXMgYW5kIGxvYWQgdGhlIG5ldyBpdGVtc1xyXG5cdHlpZWxkIGZvcmsoc2V0QWN0aXZlU29ydFNhZ2EpO1xyXG5cdHlpZWxkIGZvcmsoc2V0QWN0aXZlQ29sdW1uc1NhZ2EpO1xyXG5cdHlpZWxkIGZvcmsoc2V0QWN0aXZlRmlsdGVyU2FnYSk7XHJcblxyXG5cdHlpZWxkIGZvcmsodGFrZUxhdGVzdCwgW1xyXG5cdFx0YWN0aW9ucy5RVUVSWV9IQVNfQ0hBTkdFRCxcclxuXHRcdGFjdGlvbnMuQUREX0ZJTFRFUixcclxuXHRcdGFjdGlvbnMuU0VUX0FDVElWRV9DT0xVTU5TLFxyXG5cdFx0YWN0aW9ucy5TRVRfQUNUSVZFX1NPUlQsXHJcblx0XHRhY3Rpb25zLlNFVF9DVVJSRU5UX1BBR0UsXHJcblx0XHRhY3Rpb25zLkNMRUFSX0ZJTFRFUixcclxuXHRcdGFjdGlvbnMuQ0xFQVJfQUxMX0ZJTFRFUlMsXHJcblx0XSwgdXBkYXRlUGFyYW1zKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcm9vdFNhZ2E7XHJcbiIsImltcG9ydCB7IHVwZGF0ZVF1ZXJ5UGFyYW1zLCBzdHJpbmdpZnlDb2x1bW5zLCBwYXJhbWV0aXplRmlsdGVycywgY3JlYXRlU29ydFF1ZXJ5UGFyYW1zLCBjcmVhdGVQYWdlUXVlcnlQYXJhbXMgfSBmcm9tICcuLi8uLi91dGlscy9xdWVyeVBhcmFtcyc7XHJcbmltcG9ydCB7IHJlcGxhY2UsIHB1c2ggfSBmcm9tICdyZWFjdC1yb3V0ZXItcmVkdXgnO1xyXG5pbXBvcnQgeyBzZWxlY3QsIHB1dCwgY2FsbCB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XHJcbmltcG9ydCBibGFja2xpc3QgZnJvbSAnYmxhY2tsaXN0JztcclxuXHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vc2NyZWVucy9MaXN0L2NvbnN0YW50cyc7XHJcblxyXG5pbXBvcnQgeyBsb2FkSXRlbXMgfSBmcm9tICcuLi9zY3JlZW5zL0xpc3QvYWN0aW9ucyc7XHJcblxyXG5pbXBvcnQgaXNFcXVhbCBmcm9tICdsb2Rhc2gvaXNFcXVhbCc7XHJcbmltcG9ydCB7IGNvbHVtbnNQYXJzZXIsIHNvcnRQYXJzZXIsIGZpbHRlcnNQYXJzZXIgfSBmcm9tICcuLi9wYXJzZXJzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiAqIHVybFVwZGF0ZSAocXVlcnksIGNhY2hlLCBwYXRobmFtZSkge1xyXG5cdGNvbnN0IGJsYWNrbGlzdGVkRmllbGQgPSAnc2VhcmNoJztcclxuXHRjb25zdCBhdHRlbnVhdGVkUXVlcnkgPSBibGFja2xpc3QocXVlcnksIGJsYWNrbGlzdGVkRmllbGQpO1xyXG5cdGNvbnN0IGF0dGVudWF0ZWRDYWNoZSA9IGJsYWNrbGlzdChjYWNoZSwgYmxhY2tsaXN0ZWRGaWVsZCk7XHJcblx0aWYgKCFpc0VxdWFsKGF0dGVudWF0ZWRRdWVyeSwgYXR0ZW51YXRlZENhY2hlKSkge1xyXG5cdFx0eWllbGQgcHV0KHB1c2goe1xyXG5cdFx0XHRwYXRobmFtZSxcclxuXHRcdFx0cXVlcnksXHJcblx0XHR9KSk7XHJcblx0fSBlbHNlIHtcclxuXHRcdHlpZWxkIHB1dChyZXBsYWNlKHtcclxuXHRcdFx0cGF0aG5hbWUsXHJcblx0XHRcdHF1ZXJ5LFxyXG5cdFx0fSkpO1xyXG5cdH1cclxufVxyXG4vKipcclxuICogVXBkYXRlIHRoZSBxdWVyeSBwYXJhbXMgYmFzZWQgb24gdGhlIGN1cnJlbnQgc3RhdGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiAqIHVwZGF0ZVBhcmFtcyAoKSB7XHJcblx0Ly8gU2VsZWN0IGFsbCB0aGUgdGhpbmdzXHJcblx0Y29uc3QgYWN0aXZlU3RhdGUgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5hY3RpdmUpO1xyXG5cdGNvbnN0IGN1cnJlbnRMaXN0ID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUubGlzdHMuY3VycmVudExpc3QpO1xyXG5cdGNvbnN0IGxvY2F0aW9uID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUucm91dGluZy5sb2NhdGlvbkJlZm9yZVRyYW5zaXRpb25zKTtcclxuXHRjb25zdCB7IGluZGV4IH0gPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5saXN0cy5wYWdlKTtcclxuXHJcblx0Ly8gR2V0IHRoZSBkYXRhIGludG8gdGhlIHJpZ2h0IGZvcm1hdCwgc2V0IHRoZSBkZWZhdWx0c1xyXG5cdGxldCBzb3J0ID0gY3JlYXRlU29ydFF1ZXJ5UGFyYW1zKGFjdGl2ZVN0YXRlLnNvcnQucmF3SW5wdXQsIGN1cnJlbnRMaXN0LmRlZmF1bHRTb3J0KTtcclxuXHRsZXQgcGFnZSA9IGNyZWF0ZVBhZ2VRdWVyeVBhcmFtcyhpbmRleCwgMSk7XHJcblxyXG5cdGxldCBjb2x1bW5zID0gc3RyaW5naWZ5Q29sdW1ucyhhY3RpdmVTdGF0ZS5jb2x1bW5zLCBjdXJyZW50TGlzdC5kZWZhdWx0Q29sdW1uUGF0aHMpO1xyXG5cdGxldCBzZWFyY2ggPSBhY3RpdmVTdGF0ZS5zZWFyY2g7XHJcblxyXG5cdGxldCBmaWx0ZXJzID0gcGFyYW1ldGl6ZUZpbHRlcnMoYWN0aXZlU3RhdGUuZmlsdGVycyk7XHJcblxyXG5cdGNvbnN0IG5ld1BhcmFtcyA9IHVwZGF0ZVF1ZXJ5UGFyYW1zKHtcclxuXHRcdHBhZ2UsXHJcblx0XHRjb2x1bW5zLFxyXG5cdFx0c29ydCxcclxuXHRcdHNlYXJjaCxcclxuXHRcdGZpbHRlcnMsXHJcblx0fSwgbG9jYXRpb24pO1xyXG5cclxuXHQvLyBUT0RPOiBTdGFydGluZyBvciBjbGVhcmluZyBhIHNlYXJjaCBwdXNoZXMgYSBuZXcgaGlzdG9yeSBzdGF0ZSwgYnV0IHVwZGF0aW5nXHJcblx0Ly8gdGhlIGN1cnJlbnQgc2VhcmNoIHJlcGxhY2VzIGl0IGZvciBuaWNlciBoaXN0b3J5IG5hdmlnYXRpb24gc3VwcG9ydFxyXG5cclxuXHR5aWVsZCBwdXQoeyB0eXBlOiBhY3Rpb25zLlJFUExBQ0VfQ0FDSEVEX1FVRVJZLCBjYWNoZWRRdWVyeTogbmV3UGFyYW1zIH0pO1xyXG5cdHlpZWxkICogdXJsVXBkYXRlKG5ld1BhcmFtcywgYWN0aXZlU3RhdGUuY2FjaGVkUXVlcnksIGxvY2F0aW9uLnBhdGhuYW1lKTtcclxuXHR5aWVsZCBwdXQobG9hZEl0ZW1zKCkpO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uICogZXZhbFF1ZXJ5UGFyYW1zICgpIHtcclxuXHRjb25zdCB7IHBhdGhuYW1lLCBxdWVyeSB9ID0geWllbGQgc2VsZWN0KHN0YXRlID0+IHN0YXRlLnJvdXRpbmcubG9jYXRpb25CZWZvcmVUcmFuc2l0aW9ucyk7XHJcblxyXG5cdGNvbnN0IHsgY2FjaGVkUXVlcnkgfSA9IHlpZWxkIHNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5hY3RpdmUpO1xyXG5cdGNvbnN0IHsgY3VycmVudExpc3QgfSA9IHlpZWxkIHNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5saXN0cyk7XHJcblxyXG5cdGlmIChwYXRobmFtZSAhPT0gYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2N1cnJlbnRMaXN0LmlkfWApIHJldHVybjtcclxuXHJcblx0aWYgKGlzRXF1YWwocXVlcnksIGNhY2hlZFF1ZXJ5KSkge1xyXG5cdFx0eWllbGQgcHV0KHsgdHlwZTogYWN0aW9ucy5RVUVSWV9IQVNfTk9UX0NIQU5HRUQgfSk7XHJcblx0XHR5aWVsZCBwdXQobG9hZEl0ZW1zKCkpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRjb25zdCBwYXJzZWRRdWVyeSA9IHlpZWxkIGNhbGwocGFyc2VRdWVyeVBhcmFtcywgcXVlcnksIGN1cnJlbnRMaXN0KTtcclxuXHRcdHlpZWxkIHB1dCh7IHR5cGU6IGFjdGlvbnMuUVVFUllfSEFTX0NIQU5HRUQsIHBhcnNlZFF1ZXJ5IH0pO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUXVlcnlQYXJhbXMgKHF1ZXJ5LCBjdXJyZW50TGlzdCkge1xyXG5cdGNvbnN0IGNvbHVtbnMgPSBjb2x1bW5zUGFyc2VyKHF1ZXJ5LmNvbHVtbnMsIGN1cnJlbnRMaXN0KTtcclxuXHRjb25zdCBzb3J0ID0gc29ydFBhcnNlcihxdWVyeS5zb3J0LCBjdXJyZW50TGlzdCk7XHJcblx0Y29uc3QgZmlsdGVycyA9IGZpbHRlcnNQYXJzZXIocXVlcnkuZmlsdGVycywgY3VycmVudExpc3QpO1xyXG5cdGNvbnN0IGN1cnJlbnRQYWdlID0gcXVlcnkucGFnZSB8fCAxO1xyXG5cdGNvbnN0IHNlYXJjaCA9IHF1ZXJ5LnNlYXJjaCB8fCAnJztcclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdGNvbHVtbnMsXHJcblx0XHRzb3J0LFxyXG5cdFx0ZmlsdGVycyxcclxuXHRcdGN1cnJlbnRQYWdlLFxyXG5cdFx0c2VhcmNoLFxyXG5cdH07XHJcbn1cclxuIiwiaW1wb3J0IHhociBmcm9tICd4aHInO1xyXG5pbXBvcnQge1xyXG5cdExPQURfQ09VTlRTLFxyXG5cdENPVU5UU19MT0FESU5HX1NVQ0NFU1MsXHJcblx0Q09VTlRTX0xPQURJTkdfRVJST1IsXHJcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBORVRXT1JLX0VSUk9SX1JFVFJZX0RFTEFZIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzJztcclxuXHJcbi8qKlxyXG4gKiBMb2FkIHRoZSBjb3VudHMgb2YgYWxsIGxpc3RzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9hZENvdW50cyAoKSB7XHJcblx0cmV0dXJuIChkaXNwYXRjaCkgPT4ge1xyXG5cdFx0ZGlzcGF0Y2goe1xyXG5cdFx0XHR0eXBlOiBMT0FEX0NPVU5UUyxcclxuXHRcdH0pO1xyXG5cdFx0eGhyKHtcclxuXHRcdFx0dXJsOiBgJHtLZXlzdG9uZS5hZG1pblBhdGh9L2FwaS9jb3VudHNgLFxyXG5cdFx0fSwgKGVyciwgcmVzcCwgYm9keSkgPT4ge1xyXG5cdFx0XHRpZiAoZXJyKSB7XHJcblx0XHRcdFx0ZGlzcGF0Y2goY291bnRzTG9hZGluZ0Vycm9yKGVycikpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGJvZHkgPSBKU09OLnBhcnNlKGJvZHkpO1xyXG5cdFx0XHRcdGlmIChib2R5LmNvdW50cykge1xyXG5cdFx0XHRcdFx0ZGlzcGF0Y2goY291bnRzTG9hZGVkKGJvZHkuY291bnRzKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGNhdGNoIChlKSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coJ0Vycm9yIHBhcnNpbmcgcmVzdWx0cyBqc29uOicsIGUsIGJvZHkpO1xyXG5cdFx0XHRcdGRpc3BhdGNoKGNvdW50c0xvYWRpbmdFcnJvcihlKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9O1xyXG59XHJcblxyXG4vKipcclxuICogRGlzcGF0Y2hlZCB3aGVuIHRoZSBjb3VudHMgd2VyZSBsb2FkZWRcclxuICpcclxuICogQHBhcmFtICB7T2JqZWN0fSBjb3VudHMgVGhlIGNvdW50cyBvYmplY3QgYXMgcmV0dXJuZWQgYnkgdGhlIEFQSVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvdW50c0xvYWRlZCAoY291bnRzKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IENPVU5UU19MT0FESU5HX1NVQ0NFU1MsXHJcblx0XHRjb3VudHMsXHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIERpc3BhdGNoZWQgd2hlbiB1bnN1Y2Nlc3NmdWxseSB0cnlpbmcgdG8gbG9hZCB0aGUgY291bnRzLCB3aWxsIHJlZGlzcGF0Y2hcclxuICogbG9hZENvdW50cyBhZnRlciBORVRXT1JLX0VSUk9SX1JFVFJZX0RFTEFZIHVudGlsIHdlIGdldCBjb3VudHMgYmFja1xyXG4gKlxyXG4gKiBAcGFyYW0gIHtvYmplY3R9IGVycm9yIFRoZSBlcnJvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvdW50c0xvYWRpbmdFcnJvciAoZXJyb3IpIHtcclxuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG5cdFx0ZGlzcGF0Y2goe1xyXG5cdFx0XHR0eXBlOiBDT1VOVFNfTE9BRElOR19FUlJPUixcclxuXHRcdFx0ZXJyb3IsXHJcblx0XHR9KTtcclxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRkaXNwYXRjaChsb2FkQ291bnRzKCkpO1xyXG5cdFx0fSwgTkVUV09SS19FUlJPUl9SRVRSWV9ERUxBWSk7XHJcblx0fTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuXHJcbi8qKlxyXG4gKiBEaXNwbGF5cyBpbmZvcm1hdGlvbiBhYm91dCBhIGxpc3QgYW5kIGxldHMgeW91IGNyZWF0ZSBhIG5ldyBvbmUuXHJcbiAqL1xyXG52YXIgTGlzdFRpbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRjb3VudDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdGhpZGVDcmVhdGVCdXR0b246IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG5cdFx0aHJlZjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdGxhYmVsOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0cGF0aDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdHNwaW5uZXI6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0dmFyIG9wdHMgPSB7XHJcblx0XHRcdCdkYXRhLWxpc3QtcGF0aCc6IHRoaXMucHJvcHMucGF0aCxcclxuXHRcdH07XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImRhc2hib2FyZC1ncm91cF9fbGlzdFwiIHsuLi5vcHRzfT5cclxuXHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJkYXNoYm9hcmQtZ3JvdXBfX2xpc3QtaW5uZXJcIj5cclxuXHRcdFx0XHRcdDxMaW5rIHRvPXt0aGlzLnByb3BzLmhyZWZ9IGNsYXNzTmFtZT1cImRhc2hib2FyZC1ncm91cF9fbGlzdC10aWxlXCI+XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZGFzaGJvYXJkLWdyb3VwX19saXN0LWxhYmVsXCI+e3RoaXMucHJvcHMubGFiZWx9PC9kaXY+XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZGFzaGJvYXJkLWdyb3VwX19saXN0LWNvdW50XCI+e3RoaXMucHJvcHMuc3Bpbm5lciB8fCB0aGlzLnByb3BzLmNvdW50fTwvZGl2PlxyXG5cdFx0XHRcdFx0PC9MaW5rPlxyXG5cdFx0XHRcdFx0ey8qIElmIHdlIHdhbnQgdG8gY3JlYXRlIGEgbmV3IGxpc3QsIHdlIGFwcGVuZCA/Y3JlYXRlLCB3aGljaCBvcGVucyB0aGVcclxuXHRcdFx0XHRcdFx0Y3JlYXRlIGZvcm0gb24gdGhlIG5ldyBwYWdlISAqL31cclxuXHRcdFx0XHRcdHsoIXRoaXMucHJvcHMuaGlkZUNyZWF0ZUJ1dHRvbikgJiYgKFxyXG5cdFx0XHRcdFx0XHQ8TGlua1xyXG5cdFx0XHRcdFx0XHRcdHRvPXt0aGlzLnByb3BzLmhyZWYgKyAnP2NyZWF0ZSd9XHJcblx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lPVwiZGFzaGJvYXJkLWdyb3VwX19saXN0LWNyZWF0ZSBvY3RpY29uIG9jdGljb24tcGx1c1wiXHJcblx0XHRcdFx0XHRcdFx0dGl0bGU9XCJDcmVhdGVcIlxyXG5cdFx0XHRcdFx0XHRcdHRhYkluZGV4PVwiLTFcIlxyXG5cdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0KX1cclxuXHRcdFx0XHQ8L3NwYW4+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTGlzdFRpbGU7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgeyBwbHVyYWwgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9zdHJpbmcnO1xyXG5pbXBvcnQgTGlzdFRpbGUgZnJvbSAnLi9MaXN0VGlsZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTGlzdHMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImRhc2hib2FyZC1ncm91cF9fbGlzdHNcIj5cclxuXHRcdFx0XHR7Xy5tYXAodGhpcy5wcm9wcy5saXN0cywgKGxpc3QsIGtleSkgPT4ge1xyXG5cdFx0XHRcdFx0Ly8gSWYgYW4gb2JqZWN0IGlzIHBhc3NlZCBpbiB0aGUga2V5IGlzIHRoZSBpbmRleCxcclxuXHRcdFx0XHRcdC8vIGlmIGFuIGFycmF5IGlzIHBhc3NlZCBpbiB0aGUga2V5IGlzIGF0IGxpc3Qua2V5XHJcblx0XHRcdFx0XHRjb25zdCBsaXN0S2V5ID0gbGlzdC5rZXkgfHwga2V5O1xyXG5cdFx0XHRcdFx0Y29uc3QgaHJlZiA9IGxpc3QuZXh0ZXJuYWwgPyBsaXN0LnBhdGggOiBgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7bGlzdC5wYXRofWA7XHJcblx0XHRcdFx0XHRjb25zdCBsaXN0RGF0YSA9IHRoaXMucHJvcHMubGlzdHNEYXRhW2xpc3QucGF0aF07XHJcblx0XHRcdFx0XHRjb25zdCBpc05vQ3JlYXRlID0gbGlzdERhdGEgPyBsaXN0RGF0YS5ub2NyZWF0ZSA6IGZhbHNlO1xyXG5cdFx0XHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHRcdFx0PExpc3RUaWxlXHJcblx0XHRcdFx0XHRcdFx0a2V5PXtsaXN0LnBhdGh9XHJcblx0XHRcdFx0XHRcdFx0cGF0aD17bGlzdC5wYXRofVxyXG5cdFx0XHRcdFx0XHRcdGxhYmVsPXtsaXN0LmxhYmVsfVxyXG5cdFx0XHRcdFx0XHRcdGhpZGVDcmVhdGVCdXR0b249e2lzTm9DcmVhdGV9XHJcblx0XHRcdFx0XHRcdFx0aHJlZj17aHJlZn1cclxuXHRcdFx0XHRcdFx0XHRjb3VudD17cGx1cmFsKHRoaXMucHJvcHMuY291bnRzW2xpc3RLZXldLCAnKiBJdGVtJywgJyogSXRlbXMnKX1cclxuXHRcdFx0XHRcdFx0XHRzcGlubmVyPXt0aGlzLnByb3BzLnNwaW5uZXJ9XHJcblx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH0pfVxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fVxyXG59XHJcblxyXG5MaXN0cy5wcm9wVHlwZXMgPSB7XHJcblx0Y291bnRzOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcblx0bGlzdHM6IFJlYWN0LlByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UmVhY3QuUHJvcFR5cGVzLmFycmF5LFxyXG5cdFx0UmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcclxuXHRdKS5pc1JlcXVpcmVkLFxyXG5cdHNwaW5uZXI6IFJlYWN0LlByb3BUeXBlcy5ub2RlLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdCgoc3RhdGUpID0+IHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0bGlzdHNEYXRhOiBzdGF0ZS5saXN0cy5kYXRhLFxyXG5cdH07XHJcbn0pKExpc3RzKTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGdldFJlbGF0ZWRJY29uQ2xhc3MgZnJvbSAnLi4vdXRpbHMvZ2V0UmVsYXRlZEljb25DbGFzcyc7XHJcblxyXG5jbGFzcyBTZWN0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgaWNvbkNsYXNzID0gdGhpcy5wcm9wcy5pY29uIHx8IGdldFJlbGF0ZWRJY29uQ2xhc3ModGhpcy5wcm9wcy5pZCk7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImRhc2hib2FyZC1ncm91cFwiIGRhdGEtc2VjdGlvbi1sYWJlbD17dGhpcy5wcm9wcy5sYWJlbH0+XHJcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJkYXNoYm9hcmQtZ3JvdXBfX2hlYWRpbmdcIj5cclxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17YGRhc2hib2FyZC1ncm91cF9faGVhZGluZy1pY29uICR7aWNvbkNsYXNzfWB9IC8+XHJcblx0XHRcdFx0XHR7dGhpcy5wcm9wcy5sYWJlbH1cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHR7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH1cclxufVxyXG5cclxuU2VjdGlvbi5wcm9wVHlwZXMgPSB7XHJcblx0Y2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsXHJcblx0aWNvbjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRpZDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRsYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VjdGlvbjtcclxuIiwiZXhwb3J0IGNvbnN0IExPQURfQ09VTlRTID0gJ2FwcC9Ib21lL0xPQURfQ09VTlRTJztcclxuZXhwb3J0IGNvbnN0IENPVU5UU19MT0FESU5HX1NVQ0NFU1MgPSAnYXBwL0hvbWUvQ09VTlRTX0xPQURJTkdfU1VDQ0VTUyc7XHJcbmV4cG9ydCBjb25zdCBDT1VOVFNfTE9BRElOR19FUlJPUiA9ICdhcHAvSG9tZS9DT1VOVFNfTE9BRElOR19FUlJPUic7XHJcbiIsIi8qKlxyXG4gKiBUaGUgSG9tZSB2aWV3IGlzIHRoZSB2aWV3IG9uZSBzZWVzIGF0IC9rZXlzdG9uZS4gSXQgc2hvd3MgYSBsaXN0IG9mIGFsbCBsaXN0cyxcclxuICogZ3JvdXBlZCBieSB0aGVpciBzZWN0aW9uLlxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENvbnRhaW5lciwgU3Bpbm5lciB9IGZyb20gJy4uLy4uL2VsZW1lbnRhbCc7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgTGlzdHMgZnJvbSAnLi9jb21wb25lbnRzL0xpc3RzJztcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi9jb21wb25lbnRzL1NlY3Rpb24nO1xyXG5pbXBvcnQgQWxlcnRNZXNzYWdlcyBmcm9tICcuLi8uLi9zaGFyZWQvQWxlcnRNZXNzYWdlcyc7XHJcbmltcG9ydCB7XHJcblx0bG9hZENvdW50cyxcclxufSBmcm9tICcuL2FjdGlvbnMnO1xyXG5cclxudmFyIEhvbWVWaWV3ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnSG9tZVZpZXcnLFxyXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRtb2RhbElzT3BlbjogdHJ1ZSxcclxuXHRcdH07XHJcblx0fSxcclxuXHQvLyBXaGVuIGV2ZXJ5dGhpbmcgaXMgcmVuZGVyZWQsIHN0YXJ0IGxvYWRpbmcgdGhlIGl0ZW0gY291bnRzIG9mIHRoZSBsaXN0c1xyXG5cdC8vIGZyb20gdGhlIEFQSVxyXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2gobG9hZENvdW50cygpKTtcclxuXHR9LFxyXG5cdGdldFNwaW5uZXIgKCkge1xyXG5cdFx0aWYgKHRoaXMucHJvcHMuY291bnRzICYmIE9iamVjdC5rZXlzKHRoaXMucHJvcHMuY291bnRzKS5sZW5ndGggPT09IDBcclxuXHRcdFx0JiYgKHRoaXMucHJvcHMuZXJyb3IgfHwgdGhpcy5wcm9wcy5sb2FkaW5nKSkge1xyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdDxTcGlubmVyIC8+XHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRjb25zdCBzcGlubmVyID0gdGhpcy5nZXRTcGlubmVyKCk7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8Q29udGFpbmVyIGRhdGEtc2NyZWVuLWlkPVwiaG9tZVwiPlxyXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZGFzaGJvYXJkLWhlYWRlclwiPlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJkYXNoYm9hcmQtaGVhZGluZ1wiPntLZXlzdG9uZS5icmFuZH08L2Rpdj5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImRhc2hib2FyZC1ncm91cHNcIj5cclxuXHRcdFx0XHRcdHsodGhpcy5wcm9wcy5lcnJvcikgJiYgKFxyXG5cdFx0XHRcdFx0XHQ8QWxlcnRNZXNzYWdlc1xyXG5cdFx0XHRcdFx0XHRcdGFsZXJ0cz17eyBlcnJvcjogeyBlcnJvcjpcclxuXHRcdFx0XHRcdFx0XHRcdFwiVGhlcmUgaXMgYSBwcm9ibGVtIHdpdGggdGhlIG5ldHdvcmssIHdlJ3JlIHRyeWluZyB0byByZWNvbm5lY3QuLi5cIixcclxuXHRcdFx0XHRcdFx0XHR9IH19XHJcblx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHQpfVxyXG5cdFx0XHRcdFx0ey8qIFJlbmRlciBmbGF0IG5hdiAqL31cclxuXHRcdFx0XHRcdHtLZXlzdG9uZS5uYXYuZmxhdCA/IChcclxuXHRcdFx0XHRcdFx0PExpc3RzXHJcblx0XHRcdFx0XHRcdFx0Y291bnRzPXt0aGlzLnByb3BzLmNvdW50c31cclxuXHRcdFx0XHRcdFx0XHRsaXN0cz17S2V5c3RvbmUubGlzdHN9XHJcblx0XHRcdFx0XHRcdFx0c3Bpbm5lcj17c3Bpbm5lcn1cclxuXHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdCkgOiAoXHJcblx0XHRcdFx0XHRcdDxkaXY+XHJcblx0XHRcdFx0XHRcdFx0ey8qIFJlbmRlciBuYXYgd2l0aCBzZWN0aW9ucyAqL31cclxuXHRcdFx0XHRcdFx0XHR7S2V5c3RvbmUubmF2LnNlY3Rpb25zLm1hcCgobmF2U2VjdGlvbikgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHRcdFx0XHRcdFx0PFNlY3Rpb24ga2V5PXtuYXZTZWN0aW9uLmtleX0gaWQ9e25hdlNlY3Rpb24ua2V5fSBsYWJlbD17bmF2U2VjdGlvbi5sYWJlbH0+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PExpc3RzXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb3VudHM9e3RoaXMucHJvcHMuY291bnRzfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bGlzdHM9e25hdlNlY3Rpb24ubGlzdHN9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzcGlubmVyPXtzcGlubmVyfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDwvU2VjdGlvbj5cclxuXHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0fSl9XHJcblx0XHRcdFx0XHRcdFx0ey8qIFJlbmRlciBvcnBoYW5lZCBsaXN0cyAqL31cclxuXHRcdFx0XHRcdFx0XHR7S2V5c3RvbmUub3JwaGFuZWRMaXN0cy5sZW5ndGggPyAoXHJcblx0XHRcdFx0XHRcdFx0XHQ8U2VjdGlvbiBsYWJlbD1cIk90aGVyXCIgaWNvbj1cIm9jdGljb24tZGF0YWJhc2VcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PExpc3RzXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y291bnRzPXt0aGlzLnByb3BzLmNvdW50c31cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsaXN0cz17S2V5c3RvbmUub3JwaGFuZWRMaXN0c31cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRzcGlubmVyPXtzcGlubmVyfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHRcdFx0PC9TZWN0aW9uPlxyXG5cdFx0XHRcdFx0XHRcdCkgOiBudWxsfVxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdCl9XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdDwvQ29udGFpbmVyPlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbmV4cG9ydCB7XHJcblx0SG9tZVZpZXcsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KChzdGF0ZSkgPT4gKHtcclxuXHRjb3VudHM6IHN0YXRlLmhvbWUuY291bnRzLFxyXG5cdGxvYWRpbmc6IHN0YXRlLmhvbWUubG9hZGluZyxcclxuXHRlcnJvcjogc3RhdGUuaG9tZS5lcnJvcixcclxufSkpKEhvbWVWaWV3KTtcclxuIiwiaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcclxuaW1wb3J0IHtcclxuXHRMT0FEX0NPVU5UUyxcclxuXHRDT1VOVFNfTE9BRElOR19TVUNDRVNTLFxyXG5cdENPVU5UU19MT0FESU5HX0VSUk9SLFxyXG59IGZyb20gJy4vY29uc3RhbnRzJztcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuXHRjb3VudHM6IHt9LFxyXG5cdGxvYWRpbmc6IGZhbHNlLFxyXG5cdGVycm9yOiBudWxsLFxyXG59O1xyXG5cclxuZnVuY3Rpb24gaG9tZSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikge1xyXG5cdHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuXHRcdGNhc2UgTE9BRF9DT1VOVFM6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0bG9hZGluZzogdHJ1ZSxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIENPVU5UU19MT0FESU5HX1NVQ0NFU1M6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0bG9hZGluZzogZmFsc2UsXHJcblx0XHRcdFx0Y291bnRzOiBhY3Rpb24uY291bnRzLFxyXG5cdFx0XHRcdGVycm9yOiBudWxsLFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgQ09VTlRTX0xPQURJTkdfRVJST1I6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0bG9hZGluZzogZmFsc2UsXHJcblx0XHRcdFx0ZXJyb3I6IGFjdGlvbi5lcnJvcixcclxuXHRcdFx0fSk7XHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHRyZXR1cm4gc3RhdGU7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBob21lO1xyXG4iLCIvKipcclxuICogR2V0cyBhIHJlbGF0ZWQgaWNvbiBmb3IgYSBzdHJpbmcsIHJldHVybmVkIGFzIGEgY2xhc3NuYW1lIHRvIGJlIGFwcGxpZWQgdG8gYSBzcGFuLiBJZiBubyByZWxhdGVkXHJcbiAqIGljb24gaXMgZm91bmQsIHJldHVybnMgYSBjbGFzc25hbWUgZm9yIGEgZG90IGljb25cclxuICpcclxuICogQHBhcmFtICBbU3RyaW5nXSBzdHJpbmdcclxuICogQHJldHVybiBbU3RyaW5nXSAgICAgICAgVGhlIGNsYXNzbmFtZSBvZiB0aGUgaWNvblxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UmVsYXRlZEljb25DbGFzcyAoc3RyaW5nKSB7XHJcblx0Y29uc3QgaWNvbnMgPSBbXHJcblx0XHR7IGljb246ICdib29rJywgc2VjdGlvbnM6IFsnYm9va3MnLCAncG9zdHMnLCAnYmxvZycsICdibG9nLXBvc3RzJywgJ3N0b3JpZXMnLCAnbmV3cy1zdG9yaWVzJywgJ2NvbnRlbnQnXSB9LFxyXG5cdFx0eyBpY29uOiAnYnJpZWZjYXNlJywgc2VjdGlvbnM6IFsnYnVzaW5lc3NlcycsICdjb21wYW5pZXMnLCAnbGlzdGluZ3MnLCAnb3JnYW5pemF0aW9ucycsICdwYXJ0bmVycyddIH0sXHJcblx0XHR7IGljb246ICdjYWxlbmRhcicsIHNlY3Rpb25zOiBbJ2V2ZW50cycsICdkYXRlcyddIH0sXHJcblx0XHR7IGljb246ICdjbG9jaycsIHNlY3Rpb25zOiBbJ2NsYXNzZXMnLCAnaG91cnMnLCAndGltZXMnXSB9LFxyXG5cdFx0eyBpY29uOiAnZmlsZS1tZWRpYScsIHNlY3Rpb25zOiBbJ2dhbGxlcnknLCAnZ2FsbGVyaWVzJywgJ2ltYWdlcycsICdwaG90b3MnLCAncGljdHVyZXMnXSB9LFxyXG5cdFx0eyBpY29uOiAnZmlsZS10ZXh0Jywgc2VjdGlvbnM6IFsnYXR0YWNobWVudHMnLCAnZG9jcycsICdkb2N1bWVudHMnLCAnZmlsZXMnXSB9LFxyXG5cdFx0eyBpY29uOiAnbG9jYXRpb24nLCBzZWN0aW9uczogWydsb2NhdGlvbnMnLCAnbWFya2VycycsICdwbGFjZXMnXSB9LFxyXG5cdFx0eyBpY29uOiAnbWFpbCcsIHNlY3Rpb25zOiBbJ2VtYWlscycsICdlbnF1aXJpZXMnXSB9LFxyXG5cdFx0eyBpY29uOiAnbWVnYXBob25lJywgc2VjdGlvbnM6IFsnYnJvYWRjYXN0cycsICdqb2JzJywgJ3RhbGtzJ10gfSxcclxuXHRcdHsgaWNvbjogJ29yZ2FuaXphdGlvbicsIHNlY3Rpb25zOiBbJ2NvbnRhY3RzJywgJ2N1c3RvbWVycycsICdncm91cHMnLCAnbWVtYmVycycsICdwZW9wbGUnLCAnc3BlYWtlcnMnLCAndGVhbXMnLCAndXNlcnMnXSB9LFxyXG5cdFx0eyBpY29uOiAncGFja2FnZScsIHNlY3Rpb25zOiBbJ2JveGVzJywgJ2l0ZW1zJywgJ3BhY2thZ2VzJywgJ3BhcmNlbHMnXSB9LFxyXG5cdFx0eyBpY29uOiAndGFnJywgc2VjdGlvbnM6IFsndGFncyddIH0sXHJcblx0XTtcclxuXHRjb25zdCBjbGFzc2VzID0gaWNvbnNcclxuXHRcdC5maWx0ZXIob2JqID0+IG9iai5zZWN0aW9ucy5pbmRleE9mKHN0cmluZykgIT09IC0xKVxyXG5cdFx0Lm1hcChvYmogPT4gYG9jdGljb24gb2N0aWNvbi0ke29iai5pY29ufWApO1xyXG5cclxuXHRpZiAoIWNsYXNzZXMubGVuZ3RoKSB7XHJcblx0XHRjbGFzc2VzLnB1c2goJ29jdGljb24gb2N0aWNvbi1wcmltaXRpdmUtZG90Jyk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuXHRTRUxFQ1RfSVRFTSxcclxuXHRMT0FEX0RBVEEsXHJcblx0REFUQV9MT0FESU5HX1NVQ0NFU1MsXHJcblx0REFUQV9MT0FESU5HX0VSUk9SLFxyXG5cdERSQUdfTU9WRV9JVEVNLFxyXG5cdERSQUdfUkVTRVRfSVRFTVMsXHJcblx0TE9BRF9SRUxBVElPTlNISVBfREFUQSxcclxufSBmcm9tICcuL2NvbnN0YW50cyc7XHJcblxyXG5pbXBvcnQge1xyXG5cdGxvYWRJdGVtcyxcclxufSBmcm9tICcuLi9MaXN0L2FjdGlvbnMnO1xyXG5cclxuLyoqXHJcbiAqIFNlbGVjdCBhbiBpdGVtXHJcbiAqXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gaXRlbUlkIFRoZSBpdGVtIElEXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0SXRlbSAoaXRlbUlkKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IFNFTEVDVF9JVEVNLFxyXG5cdFx0aWQ6IGl0ZW1JZCxcclxuXHR9O1xyXG59XHJcblxyXG4vKipcclxuICogTG9hZCB0aGUgaXRlbSBkYXRhIG9mIHRoZSBjdXJyZW50IGl0ZW1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkSXRlbURhdGEgKCkge1xyXG5cdHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcblx0XHQvLyBIb2xkIG9uIHRvIHRoZSBpZCBvZiB0aGUgaXRlbSB3ZSBjdXJyZW50bHkgd2FudCB0byBsb2FkLlxyXG5cdFx0Ly8gRGlzcGF0Y2ggdGhpcyByZWZlcmVuY2UgdG8gb3VyIHJlZHV4IHN0b3JlIHRvIGhvbGQgb24gdG8gYXMgYSAnbG9hZGluZ1JlZicuXHJcblx0XHRjb25zdCBjdXJyZW50SXRlbUlEID0gZ2V0U3RhdGUoKS5pdGVtLmlkO1xyXG5cdFx0ZGlzcGF0Y2goe1xyXG5cdFx0XHR0eXBlOiBMT0FEX0RBVEEsXHJcblx0XHR9KTtcclxuXHRcdGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuXHRcdGNvbnN0IGxpc3QgPSBzdGF0ZS5saXN0cy5jdXJyZW50TGlzdDtcclxuXHJcblx0XHQvLyBjb25zdCBpdGVtSUQgPSBzdGF0ZS5pdGVtLmlkO1xyXG5cdFx0Ly8gTG9hZCBhIHNwZWNpZmljIGl0ZW0gd2l0aCB0aGUgdXRpbHMvTGlzdC5qcyBoZWxwZXJcclxuXHRcdGxpc3QubG9hZEl0ZW0oc3RhdGUuaXRlbS5pZCwgeyBkcmlsbGRvd246IHRydWUgfSwgKGVyciwgaXRlbURhdGEpID0+IHtcclxuXHJcblx0XHRcdC8vIE9uY2UgdGhpcyBhc3luYyByZXF1ZXN0IGhhcyBmaXJlZCB0aGlzIGNhbGxiYWNrLCBjaGVjayB0aGF0XHJcblx0XHRcdC8vIHRoZSBpdGVtIGlkIHJlZmVyZW5jZWQgYnkgdGhpc0xvYWRSZWYgaXMgdGhlIHNhbWUgaWRcclxuXHRcdFx0Ly8gcmVmZXJlbmNlZCBieSBsb2FkaW5nUmVmIGluIHRoZSByZWR1eCBzdG9yZS5cclxuXHJcblx0XHRcdC8vIElmIGl0IGlzLCB0aGVuIHRoaXMgaXMgdGhlIGxhdGVzdCByZXF1ZXN0LCBhbmQgaXQgaXMgc2FmZSB0byByZXNvbHZlIGl0IG5vcm1hbGx5LlxyXG5cdFx0XHQvLyBJZiBpdCBpcyBub3QgdGhlIHNhbWUgaWQgaG93ZXZlcixcclxuXHRcdFx0Ly8gdGhpcyBtZWFucyB0aGF0IHRoaXMgcmVxdWVzdCBpcyBOT1QgdGhlIGxhdGVzdCBmaXJlZCByZXF1ZXN0LFxyXG5cdFx0XHQvLyBhbmQgc28gd2UnbGwgYmFpbCBvdXQgb2YgaXQgZWFybHkuXHJcblxyXG5cdFx0XHRpZiAoZ2V0U3RhdGUoKS5pdGVtLmlkICE9PSBjdXJyZW50SXRlbUlEKSByZXR1cm47XHJcblx0XHRcdGlmIChlcnIgfHwgIWl0ZW1EYXRhKSB7XHJcblx0XHRcdFx0ZGlzcGF0Y2goZGF0YUxvYWRpbmdFcnJvcihlcnIpKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkaXNwYXRjaChkYXRhTG9hZGVkKGl0ZW1EYXRhKSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkUmVsYXRpb25zaGlwSXRlbURhdGEgKHsgY29sdW1ucywgcmVmTGlzdCwgcmVsYXRpb25zaGlwLCByZWxhdGVkSXRlbUlkIH0pIHtcclxuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG5cdFx0cmVmTGlzdC5sb2FkSXRlbXMoe1xyXG5cdFx0XHRjb2x1bW5zOiBjb2x1bW5zLFxyXG5cdFx0XHRmaWx0ZXJzOiBbe1xyXG5cdFx0XHRcdGZpZWxkOiByZWZMaXN0LmZpZWxkc1tyZWxhdGlvbnNoaXAucmVmUGF0aF0sXHJcblx0XHRcdFx0dmFsdWU6IHsgdmFsdWU6IHJlbGF0ZWRJdGVtSWQgfSxcclxuXHRcdFx0fV0sXHJcblx0XHR9LCAoZXJyLCBpdGVtcykgPT4ge1xyXG5cdFx0XHQvLyAvLyBUT0RPOiBpbmRpY2F0ZSBwYWdpbmF0aW9uICYgbGluayB0byBtYWluIGxpc3Qgdmlld1xyXG5cdFx0XHQvLyB0aGlzLnNldFN0YXRlKHsgaXRlbXMgfSk7XHJcblx0XHRcdGRpc3BhdGNoKHJlbGF0aW9uc2hpcERhdGFMb2FkZWQocmVsYXRpb25zaGlwLnBhdGgsIGl0ZW1zKSk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIENhbGxlZCB3aGVuIGRhdGEgb2YgdGhlIGN1cnJlbnQgaXRlbSBpcyBsb2FkZWRcclxuICpcclxuICogQHBhcmFtICB7T2JqZWN0fSBkYXRhIFRoZSBpdGVtIGRhdGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkYXRhTG9hZGVkIChkYXRhKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IERBVEFfTE9BRElOR19TVUNDRVNTLFxyXG5cdFx0bG9hZGluZ1JlZjogbnVsbCxcclxuXHRcdGRhdGEsXHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbGF0aW9uc2hpcERhdGFMb2FkZWQgKHBhdGgsIGRhdGEpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogTE9BRF9SRUxBVElPTlNISVBfREFUQSxcclxuXHRcdHJlbGF0aW9uc2hpcFBhdGg6IHBhdGgsXHJcblx0XHRkYXRhLFxyXG5cdH07XHJcbn07XHJcblxyXG4vKipcclxuICogQ2FsbGVkIHdoZW4gdGhlcmUgd2FzIGFuIGVycm9yIGR1cmluZyB0aGUgbG9hZGluZyBvZiB0aGUgY3VycmVudCBpdGVtIGRhdGEsXHJcbiAqIHdpbGwgcmV0cnkgbG9hZGluZyB0aGUgZGF0YSBldmVyIE5FVFdPUktfRVJST1JfUkVUUllfREVMQVkgbWlsbGlzZWNvbmRzXHJcbiAqXHJcbiAqIEBwYXJhbSAge09iamVjdH0gZXJyb3IgVGhlIGVycm9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvYWRpbmdFcnJvciAoZXJyKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IERBVEFfTE9BRElOR19FUlJPUixcclxuXHRcdGxvYWRpbmdSZWY6IG51bGwsXHJcblx0XHRlcnJvcjogZXJyLFxyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWxldGVzIGFuIGl0ZW0gYW5kIG9wdGlvbmFsbHkgcmVkaXJlY3RzIHRvIHRoZSBjdXJyZW50IGxpc3QgVVJMXHJcbiAqXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gaWQgICAgIFRoZSBJRCBvZiB0aGUgaXRlbSB3ZSB3YW50IHRvIGRlbGV0ZVxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IHJvdXRlciBBIHJlYWN0LXJvdXRlciByb3V0ZXIgb2JqZWN0LiBJZiB0aGlzIGlzIHBhc3NlZCwgd2VcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3QgdG8gS2V5c3RvbmUuYWRtaW5QYXRoL2N1cnJlbnRMaXN0LnBhdGghXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlSXRlbSAoaWQsIHJvdXRlcikge1xyXG5cdHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcblx0XHRjb25zdCBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcblx0XHRjb25zdCBsaXN0ID0gc3RhdGUubGlzdHMuY3VycmVudExpc3Q7XHJcblx0XHRsaXN0LmRlbGV0ZUl0ZW0oaWQsIChlcnIpID0+IHtcclxuXHRcdFx0Ly8gSWYgYSByb3V0ZXIgaXMgcGFzc2VkLCByZWRpcmVjdCB0byB0aGUgY3VycmVudCBsaXN0IHBhdGgsXHJcblx0XHRcdC8vIG90aGVyd2lzZSBzdGF5IHdoZXJlIHdlIGFyZVxyXG5cdFx0XHRpZiAocm91dGVyKSB7XHJcblx0XHRcdFx0bGV0IHJlZGlyZWN0VXJsID0gYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2xpc3QucGF0aH1gO1xyXG5cdFx0XHRcdGlmIChzdGF0ZS5saXN0cy5wYWdlLmluZGV4ICYmIHN0YXRlLmxpc3RzLnBhZ2UuaW5kZXggPiAxKSB7XHJcblx0XHRcdFx0XHRyZWRpcmVjdFVybCA9IGAke3JlZGlyZWN0VXJsfT9wYWdlPSR7c3RhdGUubGlzdHMucGFnZS5pbmRleH1gO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyb3V0ZXIucHVzaChyZWRpcmVjdFVybCk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gVE9ETyBQcm9wZXIgZXJyb3IgaGFuZGxpbmdcclxuXHRcdFx0aWYgKGVycikge1xyXG5cdFx0XHRcdGFsZXJ0KCdFcnJvciBkZWxldGluZyBpdGVtLCBwbGVhc2UgdHJ5IGFnYWluIScpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRpc3BhdGNoKGxvYWRJdGVtcygpKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlb3JkZXJJdGVtcyAoeyBjb2x1bW5zLCByZWZMaXN0LCByZWxhdGlvbnNoaXAsIHJlbGF0ZWRJdGVtSWQsIGl0ZW0sIHByZXZTb3J0T3JkZXIsIG5ld1NvcnRPcmRlciB9KSB7XHJcblx0cmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuXHRcdC8vIFNlbmQgdGhlIGl0ZW0sIHByZXZpb3VzIHNvcnRPcmRlciBhbmQgdGhlIG5ldyBzb3J0T3JkZXJcclxuXHRcdC8vIHdlIHNob3VsZCBnZXQgdGhlIHByb3BlciBsaXN0IGFuZCBuZXcgcGFnZSByZXN1bHRzIGluIHJldHVyblxyXG5cdFx0cmVmTGlzdC5yZW9yZGVySXRlbXMoXHJcblx0XHRcdGl0ZW0sXHJcblx0XHRcdHByZXZTb3J0T3JkZXIsXHJcblx0XHRcdG5ld1NvcnRPcmRlcixcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNvbHVtbnM6IGNvbHVtbnMsXHJcblx0XHRcdFx0ZmlsdGVyczogW3tcclxuXHRcdFx0XHRcdGZpZWxkOiByZWZMaXN0LmZpZWxkc1tyZWxhdGlvbnNoaXAucmVmUGF0aF0sXHJcblx0XHRcdFx0XHR2YWx1ZTogeyB2YWx1ZTogcmVsYXRlZEl0ZW1JZCB9LFxyXG5cdFx0XHRcdH1dLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHQoZXJyLCBpdGVtcykgPT4ge1xyXG5cdFx0XHRcdGRpc3BhdGNoKHJlbGF0aW9uc2hpcERhdGFMb2FkZWQocmVsYXRpb25zaGlwLnBhdGgsIGl0ZW1zKSk7XHJcblx0XHRcdFx0Ly8gSWYgZXJyLCBmbGFzaCB0aGUgcm93IGFsZXJ0XHJcblx0XHRcdFx0Ly8gaWYgKGVycikge1xyXG5cdFx0XHRcdC8vIFx0ZGlzcGF0Y2gocmVzZXRJdGVtcyhpdGVtLmlkKSk7XHJcblx0XHRcdFx0Ly8gXHQvLyByZXR1cm4gdGhpcy5yZXNldEl0ZW1zKHRoaXMuZmluZEl0ZW1CeUlkW2l0ZW0uaWRdKTtcclxuXHRcdFx0XHQvLyB9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIFx0ZGlzcGF0Y2goaXRlbXNMb2FkZWQoaXRlbXMpKTtcclxuXHRcdFx0XHQvLyBcdGRpc3BhdGNoKHNldFJvd0FsZXJ0KHtcclxuXHRcdFx0XHQvLyBcdFx0c3VjY2VzczogaXRlbS5pZCxcclxuXHRcdFx0XHQvLyBcdFx0ZmFpbDogZmFsc2UsXHJcblx0XHRcdFx0Ly8gXHR9KSk7XHJcblx0XHRcdFx0Ly8gfVxyXG5cdFx0XHR9XHJcblx0XHQpO1xyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtb3ZlSXRlbSAoeyBwcmV2SW5kZXgsIG5ld0luZGV4LCByZWxhdGlvbnNoaXBQYXRoLCBuZXdTb3J0T3JkZXIgfSkge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBEUkFHX01PVkVfSVRFTSxcclxuXHRcdHByZXZJbmRleCxcclxuXHRcdG5ld0luZGV4LFxyXG5cdFx0cmVsYXRpb25zaGlwUGF0aCxcclxuXHRcdG5ld1NvcnRPcmRlcixcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRJdGVtcyAoKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IERSQUdfUkVTRVRfSVRFTVMsXHJcblx0fTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB2a2V5IGZyb20gJ3ZrZXknO1xyXG5cclxuY2xhc3MgQWx0VGV4dCBleHRlbmRzIENvbXBvbmVudCB7XHJcblx0Y29uc3RydWN0b3IgKCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmhhbmRsZUtleURvd24gPSB0aGlzLmhhbmRsZUtleURvd24uYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuaGFuZGxlS2V5VXAgPSB0aGlzLmhhbmRsZUtleVVwLmJpbmQodGhpcyk7XHJcblxyXG5cdFx0dGhpcy5zdGF0ZSA9IHtcclxuXHRcdFx0bW9kaWZpZWQ6IGZhbHNlLFxyXG5cdFx0fTtcclxuXHR9XHJcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xyXG5cdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duLCBmYWxzZSk7XHJcblx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVLZXlVcCwgZmFsc2UpO1xyXG5cdH1cclxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XHJcblx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pO1xyXG5cdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuaGFuZGxlS2V5VXApO1xyXG5cdH1cclxuXHRoYW5kbGVLZXlEb3duIChlKSB7XHJcblx0XHRpZiAodmtleVtlLmtleUNvZGVdICE9PSB0aGlzLnByb3BzLm1vZGlmaWVyKSByZXR1cm47XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0bW9kaWZpZWQ6IHRydWUsXHJcblx0XHR9KTtcclxuXHR9XHJcblx0aGFuZGxlS2V5VXAgKGUpIHtcclxuXHRcdGlmICh2a2V5W2Uua2V5Q29kZV0gIT09IHRoaXMucHJvcHMubW9kaWZpZXIpIHJldHVybjtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRtb2RpZmllZDogZmFsc2UsXHJcblx0XHR9KTtcclxuXHR9XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdC8vIE5PVEUgYG1vZGlmaWVyYCBpcyBkZWNsYXJlZCB0byByZW1vdmUgaXQgZnJvbSBgcHJvcHNgLCB0aG91Z2ggbmV2ZXIgdXNlZFxyXG5cdFx0Y29uc3Qge1xyXG5cdFx0XHRjb21wb25lbnQ6IENvbXBvbmVudCxcclxuXHRcdFx0bW9kaWZpZWQsXHJcblx0XHRcdG1vZGlmaWVyLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcblx0XHRcdG5vcm1hbCxcclxuXHRcdFx0Li4ucHJvcHNcclxuXHRcdH0gPSB0aGlzLnByb3BzO1xyXG5cclxuXHRcdHByb3BzLmNoaWxkcmVuID0gdGhpcy5zdGF0ZS5tb2RpZmllZFxyXG5cdFx0XHQ/IG1vZGlmaWVkXHJcblx0XHRcdDogbm9ybWFsO1xyXG5cclxuXHRcdHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz47XHJcblx0fVxyXG59O1xyXG5cclxuY29uc3QgU1VQUE9SVEVEX0tFWVMgPSBbXHJcblx0JzxhbHQ+JyxcclxuXHQnPGNvbnRyb2w+JyxcclxuXHQnPG1ldGE+JyxcclxuXHQnPHNoaWZ0PicsXHJcbl07XHJcblxyXG5BbHRUZXh0LnByb3BUeXBlcyA9IHtcclxuXHRjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLmZ1bmMsXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdF0pLFxyXG5cdG1vZGlmaWVkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5lbGVtZW50LFxyXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcclxuXHRdKSxcclxuXHRtb2RpZmllcjogUHJvcFR5cGVzLm9uZU9mKFNVUFBPUlRFRF9LRVlTKSxcclxuXHRub3JtYWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLmVsZW1lbnQsXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdF0pLFxyXG59O1xyXG5BbHRUZXh0LmRlZmF1bHRQcm9wcyA9IHtcclxuXHRjb21wb25lbnQ6ICdzcGFuJyxcclxuXHRtb2RpZmllcjogJzxhbHQ+JyxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQWx0VGV4dDtcclxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IERyaWxsZG93bkl0ZW0gZnJvbSAnLi9EcmlsbGRvd25JdGVtJztcclxuXHJcbmZ1bmN0aW9uIERyaWxsZG93biAoeyBjbGFzc05hbWUsIGl0ZW1zLCAuLi5wcm9wcyB9KSB7XHJcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKGNsYXNzZXMuZHJpbGxkb3duLCBjbGFzc05hbWUpO1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PHVsIHsuLi5wcm9wc30+XHJcblx0XHRcdHtpdGVtcy5tYXAoKGl0ZW0sIGlkeCkgPT4gKFxyXG5cdFx0XHRcdDxEcmlsbGRvd25JdGVtXHJcblx0XHRcdFx0XHRocmVmPXtpdGVtLmhyZWZ9XHJcblx0XHRcdFx0XHRrZXk9e2lkeH1cclxuXHRcdFx0XHRcdGxhYmVsPXtpdGVtLmxhYmVsfVxyXG5cdFx0XHRcdFx0c2VwYXJhdGU9e2lkeCA8IGl0ZW1zLmxlbmd0aCAtIDF9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0KSl9XHJcblx0XHQ8L3VsPlxyXG5cdCk7XHJcbn07XHJcblxyXG5EcmlsbGRvd24ucHJvcFR5cGVzID0ge1xyXG5cdGl0ZW1zOiBQcm9wVHlwZXMuYXJyYXlPZihcclxuXHRcdFByb3BUeXBlcy5zaGFwZSh7XHJcblx0XHRcdGhyZWY6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuXHRcdFx0bGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuXHRcdFx0c2VwYXJhdGU6IFByb3BUeXBlcy5ib29sLCAvLyBGSVhNRSB2ZXJiOyBjb3VsZCBiZSBiZXR0ZXJcclxuXHRcdH0pXHJcblx0KS5pc1JlcXVpcmVkLFxyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRkcmlsbGRvd246IHtcclxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxyXG5cdFx0bGlzdFN0eWxlOiAnbm9uZScsXHJcblx0XHRtYXJnaW46IDAsXHJcblx0XHRwYWRkaW5nOiAwLFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IERyaWxsZG93bjtcclxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcbmltcG9ydCB7IEJ1dHRvbiwgR2x5cGggfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50YWwnO1xyXG5cclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbmZ1bmN0aW9uIERyaWxsZG93bkl0ZW0gKHsgY2xhc3NOYW1lLCBocmVmLCBsYWJlbCwgc2VwYXJhdGUsIHNlcGFyYXRvciwgc3R5bGUsIC4uLnByb3BzIH0pIHtcclxuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoY2xhc3Nlcy5pdGVtLCBjbGFzc05hbWUpO1xyXG5cclxuXHQvLyByZW1vdmUgaG9yaXpvbnRhbCBwYWRkaW5nXHJcblx0Y29uc3Qgc3R5bGVzID0ge1xyXG5cdFx0cGFkZGluZ0xlZnQ6IDAsXHJcblx0XHRwYWRkaW5nUmlnaHQ6IDAsXHJcblx0XHQuLi5zdHlsZSxcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PGxpIHsuLi5wcm9wc30+XHJcblx0XHRcdDxCdXR0b25cclxuXHRcdFx0XHRjb21wb25lbnQ9e0xpbmt9XHJcblx0XHRcdFx0c3R5bGU9e3N0eWxlc31cclxuXHRcdFx0XHR0bz17aHJlZn1cclxuXHRcdFx0XHR2YXJpYW50PVwibGlua1wiXHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdHtsYWJlbH1cclxuXHRcdFx0PC9CdXR0b24+XHJcblx0XHRcdHtzZXBhcmF0ZSAmJiAoXHJcblx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5zZXBhcmF0b3IpfT5cclxuXHRcdFx0XHRcdHtzZXBhcmF0b3J9XHJcblx0XHRcdFx0PC9zcGFuPlxyXG5cdFx0XHQpfVxyXG5cdFx0PC9saT5cclxuXHQpO1xyXG59O1xyXG5cclxuRHJpbGxkb3duSXRlbS5wcm9wVHlwZXMgPSB7XHJcblx0aHJlZjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG5cdGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcblx0c2VwYXJhdGU6IFByb3BUeXBlcy5ib29sLCAvLyBGSVhNRSB2ZXJiOyBjb3VsZCBiZSBiZXR0ZXJcclxuXHRzZXBhcmF0b3I6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLmVsZW1lbnQsXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdF0pLFxyXG59O1xyXG5EcmlsbGRvd25JdGVtLmRlZmF1bHRQcm9wcyA9IHtcclxuXHRzZXBhcmF0b3I6IDxHbHlwaCBuYW1lPVwiY2hldnJvbi1yaWdodFwiIC8+LFxyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRpdGVtOiB7XHJcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdG1hcmdpbjogMCxcclxuXHRcdHBhZGRpbmc6IDAsXHJcblx0XHR2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcclxuXHR9LFxyXG5cdHNlcGFyYXRvcjoge1xyXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk0MCxcclxuXHRcdG1hcmdpbkxlZnQ6ICcwLjVlbScsXHJcblx0XHRtYXJnaW5SaWdodDogJzAuNWVtJyxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBEcmlsbGRvd25JdGVtO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcbmltcG9ydCB7XG5cdEZvcm0sXG5cdEZvcm1GaWVsZCxcblx0Rm9ybUlucHV0LFxuXHRHcmlkLFxuXHRSZXNwb25zaXZlVGV4dCxcbn0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcblxuaW1wb3J0IHsgRmllbGRzIH0gZnJvbSAnRmllbGRUeXBlcyc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvY29sb3InO1xuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uLy4uL3RoZW1lJztcblxuaW1wb3J0IHsgQnV0dG9uLCBMb2FkaW5nQnV0dG9uIH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcbmltcG9ydCBBbGVydE1lc3NhZ2VzIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9BbGVydE1lc3NhZ2VzJztcbmltcG9ydCBDb25maXJtYXRpb25EaWFsb2cgZnJvbSAnLi8uLi8uLi8uLi9zaGFyZWQvQ29uZmlybWF0aW9uRGlhbG9nJztcblxuaW1wb3J0IEZvcm1IZWFkaW5nIGZyb20gJy4vRm9ybUhlYWRpbmcnO1xuaW1wb3J0IEFsdFRleHQgZnJvbSAnLi9BbHRUZXh0JztcbmltcG9ydCBGb290ZXJCYXIgZnJvbSAnLi9Gb290ZXJCYXInO1xuaW1wb3J0IEludmFsaWRGaWVsZFR5cGUgZnJvbSAnLi4vLi4vLi4vc2hhcmVkL0ludmFsaWRGaWVsZFR5cGUnO1xuXG5pbXBvcnQgeyBkZWxldGVJdGVtIH0gZnJvbSAnLi4vYWN0aW9ucyc7XG5cbmltcG9ydCB7IHVwY2FzZSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3N0cmluZyc7XG5cbmZ1bmN0aW9uIGdldE5hbWVGcm9tRGF0YShkYXRhKSB7XG5cdGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcblx0XHRpZiAodHlwZW9mIGRhdGEuZmlyc3QgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBkYXRhLmxhc3QgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gZGF0YS5maXJzdCArICcgJyArIGRhdGEubGFzdDtcblx0XHR9IGVsc2UgaWYgKGRhdGEuaWQpIHtcblx0XHRcdHJldHVybiBkYXRhLmlkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gc21vb3RoU2Nyb2xsVG9wKCkge1xuXHRpZiAoZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCkge1xuXHRcdHdpbmRvdy5zY3JvbGxCeSgwLCAtNTApO1xuXHRcdHZhciB0aW1lT3V0ID0gc2V0VGltZW91dChzbW9vdGhTY3JvbGxUb3AsIDIwKTtcblx0fSBlbHNlIHtcblx0XHRjbGVhclRpbWVvdXQodGltZU91dCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gcXVpY2tTY3JvbGxUb3AoKSB7XG5cdGlmIChkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSB7XG5cdFx0d2luZG93LnNjcm9sbEJ5KDAsIC01MCk7XG5cdFx0cXVpY2tTY3JvbGxUb3AoKTtcblx0fVxufVxuXG52YXIgRWRpdEZvcm0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnRWRpdEZvcm0nLFxuXHRwcm9wVHlwZXM6IHtcblx0XHRkYXRhOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuXHRcdGxpc3Q6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG5cdH0sXG5cdGdldEluaXRpYWxTdGF0ZSgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dmFsdWVzOiBhc3NpZ24oe30sIHRoaXMucHJvcHMuZGF0YS5maWVsZHMpLFxuXHRcdFx0Y29uZmlybWF0aW9uRGlhbG9nOiBudWxsLFxuXHRcdFx0bG9hZGluZzogZmFsc2UsXG5cdFx0XHRsYXN0VmFsdWVzOiBudWxsLCAvLyB1c2VkIGZvciByZXNldHRpbmdcblx0XHRcdGZvY3VzRmlyc3RGaWVsZDogIXRoaXMucHJvcHMubGlzdC5uYW1lRmllbGQgJiYgIXRoaXMucHJvcHMubGlzdC5uYW1lRmllbGRJc0Zvcm1IZWFkZXIsXG5cdFx0fTtcblx0fSxcblx0Y29tcG9uZW50RGlkTW91bnQoKSB7XG5cdFx0dGhpcy5fX2lzTW91bnRlZCA9IHRydWU7XG5cdH0sXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuXHRcdHRoaXMuX19pc01vdW50ZWQgPSBmYWxzZTtcblx0fSxcblx0Z2V0RmllbGRQcm9wcyhmaWVsZCkge1xuXHRcdGNvbnN0IHByb3BzID0gYXNzaWduKHt9LCBmaWVsZCk7XG5cdFx0Y29uc3QgYWxlcnRzID0gdGhpcy5zdGF0ZS5hbGVydHM7XG5cdFx0Ly8gRGlzcGxheSB2YWxpZGF0aW9uIGVycm9ycyBpbmxpbmVcblx0XHRpZiAoYWxlcnRzICYmIGFsZXJ0cy5lcnJvciAmJiBhbGVydHMuZXJyb3IuZXJyb3IgPT09ICd2YWxpZGF0aW9uIGVycm9ycycpIHtcblx0XHRcdGlmIChhbGVydHMuZXJyb3IuZGV0YWlsW2ZpZWxkLnBhdGhdKSB7XG5cdFx0XHRcdC8vIE5PVEU6IFRoaXMgd29uJ3Qgd29yayB5ZXQsIGFzIEVsZW1lbnRhbFVJIGRvZXNuJ3QgYWxsb3dcblx0XHRcdFx0Ly8gcGFzc2VkIGluIGlzVmFsaWQsIG9ubHkgaW52YWxpZGF0ZXMgdmlhIGludGVybmFsIHN0YXRlLlxuXHRcdFx0XHQvLyBQUiB0byBmaXggdGhhdDogaHR0cHM6Ly9naXRodWIuY29tL2VsZW1lbnRhbHVpL2VsZW1lbnRhbC9wdWxsLzE0OVxuXHRcdFx0XHRwcm9wcy5pc1ZhbGlkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHByb3BzLnZhbHVlID0gdGhpcy5zdGF0ZS52YWx1ZXNbZmllbGQucGF0aF07XG5cdFx0cHJvcHMudmFsdWVzID0gdGhpcy5zdGF0ZS52YWx1ZXM7XG5cdFx0cHJvcHMub25DaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZTtcblx0XHRwcm9wcy5tb2RlID0gJ2VkaXQnO1xuXHRcdHJldHVybiBwcm9wcztcblx0fSxcblx0aGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG5cdFx0Y29uc3QgdmFsdWVzID0gYXNzaWduKHt9LCB0aGlzLnN0YXRlLnZhbHVlcyk7XG5cblx0XHR2YWx1ZXNbZXZlbnQucGF0aF0gPSBldmVudC52YWx1ZTtcblx0XHR0aGlzLnNldFN0YXRlKHsgdmFsdWVzIH0pO1xuXHR9LFxuXG5cdHRvZ2dsZURlbGV0ZURpYWxvZygpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGRlbGV0ZURpYWxvZ0lzT3BlbjogIXRoaXMuc3RhdGUuZGVsZXRlRGlhbG9nSXNPcGVuLFxuXHRcdH0pO1xuXHR9LFxuXHR0b2dnbGVSZXNldERpYWxvZygpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdHJlc2V0RGlhbG9nSXNPcGVuOiAhdGhpcy5zdGF0ZS5yZXNldERpYWxvZ0lzT3Blbixcblx0XHR9KTtcblx0fSxcblx0aGFuZGxlUmVzZXQoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHR2YWx1ZXM6IGFzc2lnbih7fSwgdGhpcy5zdGF0ZS5sYXN0VmFsdWVzIHx8IHRoaXMucHJvcHMuZGF0YS5maWVsZHMpLFxuXHRcdFx0cmVzZXREaWFsb2dJc09wZW46IGZhbHNlLFxuXHRcdH0pO1xuXHR9LFxuXHRoYW5kbGVEZWxldGUoKSB7XG5cdFx0Y29uc3QgeyBkYXRhIH0gPSB0aGlzLnByb3BzO1xuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goZGVsZXRlSXRlbShkYXRhLmlkLCB0aGlzLnByb3BzLnJvdXRlcikpO1xuXHR9LFxuXHRoYW5kbGVLZXlGb2N1cygpIHtcblx0XHRjb25zdCBpbnB1dCA9IHRoaXMucmVmcy5rZXlPcklkSW5wdXQ7XG5cdFx0aW5wdXQuc2VsZWN0KCk7XG5cdH0sXG5cdHJlbW92ZUNvbmZpcm1hdGlvbkRpYWxvZygpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGNvbmZpcm1hdGlvbkRpYWxvZzogbnVsbCxcblx0XHR9KTtcblx0fSxcblx0dXBkYXRlSXRlbSgpIHtcblx0XHRjb25zdCB7IGRhdGEsIGxpc3QgfSA9IHRoaXMucHJvcHM7XG5cdFx0Y29uc3QgZWRpdEZvcm0gPSB0aGlzLnJlZnMuZWRpdEZvcm07XG5cdFx0Y29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZWRpdEZvcm0pO1xuXHRcdC8vIFNob3cgbG9hZGluZyBpbmRpY2F0b3Jcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGxvYWRpbmc6IHRydWUsXG5cdFx0fSk7XG5cblx0XHRsaXN0LnVwZGF0ZUl0ZW0oZGF0YS5pZCwgZm9ybURhdGEsIChlcnIsIGRhdGEpID0+IHtcblxuXHRcdFx0Ly8gIHNtb290aFNjcm9sbFRvcCgpO1xuXHRcdFx0cXVpY2tTY3JvbGxUb3AoKTtcblx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdFx0YWxlcnRzOiB7XG5cdFx0XHRcdFx0XHRlcnJvcjogZXJyLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0bG9hZGluZzogZmFsc2UsXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gU3VjY2VzcywgZGlzcGxheSBzdWNjZXNzIGZsYXNoIG1lc3NhZ2VzLCByZXBsYWNlIHZhbHVlc1xuXHRcdFx0XHQvLyBUT0RPOiBVcGRhdGUga2V5IHZhbHVlXG5cdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdGFsZXJ0czoge1xuXHRcdFx0XHRcdFx0c3VjY2Vzczoge1xuXHRcdFx0XHRcdFx0XHRzdWNjZXNzOiAnWW91ciBjaGFuZ2VzIGhhdmUgYmVlbiBzYXZlZCBzdWNjZXNzZnVsbHknLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGxhc3RWYWx1ZXM6IHRoaXMuc3RhdGUudmFsdWVzLFxuXHRcdFx0XHRcdHZhbHVlczogZGF0YS5maWVsZHMsXG5cdFx0XHRcdFx0bG9hZGluZzogZmFsc2UsXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXHRyZW5kZXJLZXlPcklkKCkge1xuXHRcdHZhciBjbGFzc05hbWUgPSAnRWRpdEZvcm1fX2tleS1vci1pZCc7XG5cdFx0dmFyIGxpc3QgPSB0aGlzLnByb3BzLmxpc3Q7XG5cblx0XHRpZiAobGlzdC5uYW1lRmllbGQgJiYgbGlzdC5hdXRva2V5ICYmIHRoaXMucHJvcHMuZGF0YVtsaXN0LmF1dG9rZXkucGF0aF0pIHtcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuXHRcdFx0XHRcdDxBbHRUZXh0XG5cdFx0XHRcdFx0XHRtb2RpZmllZD1cIklEOlwiXG5cdFx0XHRcdFx0XHRub3JtYWw9e2Ake3VwY2FzZShsaXN0LmF1dG9rZXkucGF0aCl9OiBgfVxuXHRcdFx0XHRcdFx0dGl0bGU9XCJQcmVzcyA8YWx0PiB0byByZXZlYWwgdGhlIElEXCJcblx0XHRcdFx0XHRcdGNsYXNzTmFtZT1cIkVkaXRGb3JtX19rZXktb3ItaWRfX2xhYmVsXCIgLz5cblx0XHRcdFx0XHQ8QWx0VGV4dFxuXHRcdFx0XHRcdFx0bW9kaWZpZWQ9ezxpbnB1dCByZWY9XCJrZXlPcklkSW5wdXRcIiBvbkZvY3VzPXt0aGlzLmhhbmRsZUtleUZvY3VzfSB2YWx1ZT17dGhpcy5wcm9wcy5kYXRhLmlkfSBjbGFzc05hbWU9XCJFZGl0Rm9ybV9fa2V5LW9yLWlkX19pbnB1dFwiIHJlYWRPbmx5IC8+fVxuXHRcdFx0XHRcdFx0bm9ybWFsPXs8aW5wdXQgcmVmPVwia2V5T3JJZElucHV0XCIgb25Gb2N1cz17dGhpcy5oYW5kbGVLZXlGb2N1c30gdmFsdWU9e3RoaXMucHJvcHMuZGF0YVtsaXN0LmF1dG9rZXkucGF0aF19IGNsYXNzTmFtZT1cIkVkaXRGb3JtX19rZXktb3ItaWRfX2lucHV0XCIgcmVhZE9ubHkgLz59XG5cdFx0XHRcdFx0XHR0aXRsZT1cIlByZXNzIDxhbHQ+IHRvIHJldmVhbCB0aGUgSURcIlxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPVwiRWRpdEZvcm1fX2tleS1vci1pZF9fZmllbGRcIiAvPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChsaXN0LmF1dG9rZXkgJiYgdGhpcy5wcm9wcy5kYXRhW2xpc3QuYXV0b2tleS5wYXRoXSkge1xuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwiRWRpdEZvcm1fX2tleS1vci1pZF9fbGFiZWxcIj57bGlzdC5hdXRva2V5LnBhdGh9OiA8L3NwYW4+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJFZGl0Rm9ybV9fa2V5LW9yLWlkX19maWVsZFwiPlxuXHRcdFx0XHRcdFx0PGlucHV0IHJlZj1cImtleU9ySWRJbnB1dFwiIG9uRm9jdXM9e3RoaXMuaGFuZGxlS2V5Rm9jdXN9IHZhbHVlPXt0aGlzLnByb3BzLmRhdGFbbGlzdC5hdXRva2V5LnBhdGhdfSBjbGFzc05hbWU9XCJFZGl0Rm9ybV9fa2V5LW9yLWlkX19pbnB1dFwiIHJlYWRPbmx5IC8+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0KTtcblx0XHR9IGVsc2UgaWYgKGxpc3QubmFtZUZpZWxkKSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJFZGl0Rm9ybV9fa2V5LW9yLWlkX19sYWJlbFwiPklEOiA8L3NwYW4+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJFZGl0Rm9ybV9fa2V5LW9yLWlkX19maWVsZFwiPlxuXHRcdFx0XHRcdFx0PGlucHV0IHJlZj1cImtleU9ySWRJbnB1dFwiIG9uRm9jdXM9e3RoaXMuaGFuZGxlS2V5Rm9jdXN9IHZhbHVlPXt0aGlzLnByb3BzLmRhdGEuaWR9IGNsYXNzTmFtZT1cIkVkaXRGb3JtX19rZXktb3ItaWRfX2lucHV0XCIgcmVhZE9ubHkgLz5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQpO1xuXHRcdH1cblx0fSxcblx0cmVuZGVyTmFtZUZpZWxkKCkge1xuXHRcdHZhciBuYW1lRmllbGQgPSB0aGlzLnByb3BzLmxpc3QubmFtZUZpZWxkO1xuXHRcdHZhciBuYW1lRmllbGRJc0Zvcm1IZWFkZXIgPSB0aGlzLnByb3BzLmxpc3QubmFtZUZpZWxkSXNGb3JtSGVhZGVyO1xuXHRcdHZhciB3cmFwTmFtZUZpZWxkID0gZmllbGQgPT4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJFZGl0Rm9ybV9fbmFtZS1maWVsZFwiPlxuXHRcdFx0XHR7ZmllbGR9XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHRcdGlmIChuYW1lRmllbGRJc0Zvcm1IZWFkZXIpIHtcblx0XHRcdHZhciBuYW1lRmllbGRQcm9wcyA9IHRoaXMuZ2V0RmllbGRQcm9wcyhuYW1lRmllbGQpO1xuXHRcdFx0bmFtZUZpZWxkUHJvcHMubGFiZWwgPSBudWxsO1xuXHRcdFx0bmFtZUZpZWxkUHJvcHMuc2l6ZSA9ICdmdWxsJztcblx0XHRcdG5hbWVGaWVsZFByb3BzLmF1dG9Gb2N1cyA9IHRydWU7XG5cdFx0XHRuYW1lRmllbGRQcm9wcy5pbnB1dFByb3BzID0ge1xuXHRcdFx0XHRjbGFzc05hbWU6ICdpdGVtLW5hbWUtZmllbGQnLFxuXHRcdFx0XHRwbGFjZWhvbGRlcjogbmFtZUZpZWxkLmxhYmVsLFxuXHRcdFx0XHRzaXplOiAnbGFyZ2UnLFxuXHRcdFx0fTtcblx0XHRcdHJldHVybiB3cmFwTmFtZUZpZWxkKFxuXHRcdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KEZpZWxkc1tuYW1lRmllbGQudHlwZV0sIG5hbWVGaWVsZFByb3BzKVxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHdyYXBOYW1lRmllbGQoXG5cdFx0XHRcdDxoMj57dGhpcy5wcm9wcy5kYXRhLm5hbWUucmVwbGFjZSgvJnF1b3Q7L2csICdcIicpIHx8ICcobm9cIiBuYW1lKSd9PC9oMj5cblx0XHRcdCk7XG5cdFx0fVxuXHR9LFxuXHRyZW5kZXJGb3JtRWxlbWVudHMoKSB7XG5cdFx0dmFyIGhlYWRpbmdzID0gMDtcblxuXHRcdHJldHVybiB0aGlzLnByb3BzLmxpc3QudWlFbGVtZW50cy5tYXAoKGVsLCBpbmRleCkgPT4ge1xuXHRcdFx0Ly8gRG9uJ3QgcmVuZGVyIHRoZSBuYW1lIGZpZWxkIGlmIGl0IGlzIHRoZSBoZWFkZXIgc2luY2UgaXQnbGwgYmUgcmVuZGVyZWQgaW4gQklHIGFib3ZlXG5cdFx0XHQvLyB0aGUgbGlzdC4gKHNlZSByZW5kZXJOYW1lRmllbGQgbWV0aG9kLCB0aGlzIGlzIHRoZSByZXZlcnNlIGNoZWNrIG9mIHRoZSBvbmUgaXQgZG9lcylcblx0XHRcdGlmIChcblx0XHRcdFx0dGhpcy5wcm9wcy5saXN0Lm5hbWVGaWVsZFxuXHRcdFx0XHQmJiBlbC5maWVsZCA9PT0gdGhpcy5wcm9wcy5saXN0Lm5hbWVGaWVsZC5wYXRoXG5cdFx0XHRcdCYmIHRoaXMucHJvcHMubGlzdC5uYW1lRmllbGRJc0Zvcm1IZWFkZXJcblx0XHRcdCkgcmV0dXJuO1xuXG5cdFx0XHRpZiAoZWwudHlwZSA9PT0gJ2hlYWRpbmcnKSB7XG5cdFx0XHRcdGhlYWRpbmdzKys7XG5cdFx0XHRcdGVsLm9wdGlvbnMudmFsdWVzID0gdGhpcy5zdGF0ZS52YWx1ZXM7XG5cdFx0XHRcdGVsLmtleSA9ICdoLScgKyBoZWFkaW5ncztcblx0XHRcdFx0cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUhlYWRpbmcsIGVsKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGVsLnR5cGUgPT09ICdmaWVsZCcpIHtcblx0XHRcdFx0dmFyIGZpZWxkID0gdGhpcy5wcm9wcy5saXN0LmZpZWxkc1tlbC5maWVsZF07XG5cdFx0XHRcdHZhciBwcm9wcyA9IHRoaXMuZ2V0RmllbGRQcm9wcyhmaWVsZCk7XG5cdFx0XHRcdGlmICh0eXBlb2YgRmllbGRzW2ZpZWxkLnR5cGVdICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW52YWxpZEZpZWxkVHlwZSwgeyB0eXBlOiBmaWVsZC50eXBlLCBwYXRoOiBmaWVsZC5wYXRoLCBrZXk6IGZpZWxkLnBhdGggfSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cHJvcHMua2V5ID0gZmllbGQucGF0aDtcblx0XHRcdFx0aWYgKGluZGV4ID09PSAwICYmIHRoaXMuc3RhdGUuZm9jdXNGaXJzdEZpZWxkKSB7XG5cdFx0XHRcdFx0cHJvcHMuYXV0b0ZvY3VzID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGaWVsZHNbZmllbGQudHlwZV0sIHByb3BzKTtcblx0XHRcdH1cblx0XHR9LCB0aGlzKTtcblx0fSxcblx0cmVuZGVyRm9vdGVyQmFyKCkge1xuXHRcdGlmICh0aGlzLnByb3BzLmxpc3Qubm9lZGl0ICYmIHRoaXMucHJvcHMubGlzdC5ub2RlbGV0ZSkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0Y29uc3QgeyBsb2FkaW5nIH0gPSB0aGlzLnN0YXRlO1xuXHRcdGNvbnN0IGxvYWRpbmdCdXR0b25UZXh0ID0gbG9hZGluZyA/ICdTYXZpbmcnIDogJ1NhdmUnO1xuXG5cdFx0Ly8gUGFkZGluZyBtdXN0IGJlIGFwcGxpZWQgaW5saW5lIHNvIHRoZSBGb290ZXJCYXIgY2FuIGRldGVybWluZSBpdHNcblx0XHQvLyBpbm5lckhlaWdodCBhdCBydW50aW1lLiBBcGhyb2RpdGUncyBzdHlsaW5nIGNvbWVzIGxhdGVyLi4uXG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PEZvb3RlckJhciBzdHlsZT17ey4uLnN0eWxlcy5mb290ZXJiYXJJbm5lciwgJ2JhY2tncm91bmQnOiAnI2U4ZTRlNCd9fT5cblx0XHRcdFx0PGRpdiBzdHlsZT17ey4uLnN0eWxlcy5mb290ZXJiYXJJbm5lcn19ID5cblx0XHRcdFx0XHR7IXRoaXMucHJvcHMubGlzdC5ub2VkaXQgJiYgKFxuXHRcdFx0XHRcdFx0PExvYWRpbmdCdXR0b25cblx0XHRcdFx0XHRcdFx0Y29sb3I9XCJwcmltYXJ5XCJcblx0XHRcdFx0XHRcdFx0ZGlzYWJsZWQ9e2xvYWRpbmd9XG5cdFx0XHRcdFx0XHRcdGxvYWRpbmc9e2xvYWRpbmd9XG5cdFx0XHRcdFx0XHRcdG9uQ2xpY2s9e3RoaXMudXBkYXRlSXRlbX1cblx0XHRcdFx0XHRcdFx0ZGF0YS1idXR0b249XCJ1cGRhdGVcIlxuXHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHR7bG9hZGluZ0J1dHRvblRleHR9XG5cdFx0XHRcdFx0XHQ8L0xvYWRpbmdCdXR0b24+XG5cdFx0XHRcdFx0KX1cblx0XHRcdFx0XHR7IXRoaXMucHJvcHMubGlzdC5ub2VkaXQgJiYgKFxuXHRcdFx0XHRcdFx0PEJ1dHRvbiBkaXNhYmxlZD17bG9hZGluZ30gb25DbGljaz17dGhpcy50b2dnbGVSZXNldERpYWxvZ30gdmFyaWFudD1cImxpbmtcIiBjb2xvcj1cImNhbmNlbFwiIGRhdGEtYnV0dG9uPVwicmVzZXRcIj5cblx0XHRcdFx0XHRcdFx0PFJlc3BvbnNpdmVUZXh0XG5cdFx0XHRcdFx0XHRcdFx0aGlkZGVuWFM9XCJyZXNldCBjaGFuZ2VzXCJcblx0XHRcdFx0XHRcdFx0XHR2aXNpYmxlWFM9XCJyZXNldFwiXG5cdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQ8L0J1dHRvbj5cblx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdHshdGhpcy5wcm9wcy5saXN0Lm5vZGVsZXRlICYmIChcblx0XHRcdFx0XHRcdDxCdXR0b24gZGlzYWJsZWQ9e2xvYWRpbmd9IG9uQ2xpY2s9e3RoaXMudG9nZ2xlRGVsZXRlRGlhbG9nfSB2YXJpYW50PVwibGlua1wiIGNvbG9yPVwiZGVsZXRlXCIgc3R5bGU9e3N0eWxlcy5kZWxldGVCdXR0b259IGRhdGEtYnV0dG9uPVwiZGVsZXRlXCI+XG5cdFx0XHRcdFx0XHRcdDxSZXNwb25zaXZlVGV4dFxuXHRcdFx0XHRcdFx0XHRcdGhpZGRlblhTPXtgZGVsZXRlICR7dGhpcy5wcm9wcy5saXN0LnNpbmd1bGFyLnRvTG93ZXJDYXNlKCl9YH1cblx0XHRcdFx0XHRcdFx0XHR2aXNpYmxlWFM9XCJkZWxldGVcIlxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9CdXR0b24+XG5cdFx0XHRcdFx0KX1cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L0Zvb3RlckJhcj5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXJUcmFja2luZ01ldGEoKSB7XG5cdFx0Ly8gVE9ETzogVGhlc2UgZmllbGRzIGFyZSB2aXNpYmxlIG5vdywgc28gd2UgZG9uJ3Qgd2FudCB0aGlzLiBXZSBtYXkgcmV2aXNpdFxuXHRcdC8vIGl0IHdoZW4gd2UgaGF2ZSBtb3JlIGdyYW51bGFyIGNvbnRyb2wgb3ZlciBoaWRpbmcgZmllbGRzIGluIGNlcnRhaW5cblx0XHQvLyBjb250ZXh0cywgc28gSSdtIGxlYXZpbmcgdGhpcyBjb2RlIGhlcmUgYXMgYSByZWZlcmVuY2UgZm9yIG5vdyAtIEpXXG5cdFx0aWYgKHRydWUpIHJldHVybiBudWxsOyAvLyBpZiAodHJ1ZSkgcHJldmVudHMgdW5yZWFjaGFibGUgY29kZSBsaW50ZXIgZXJycHJcblxuXHRcdGlmICghdGhpcy5wcm9wcy5saXN0LnRyYWNraW5nKSByZXR1cm4gbnVsbDtcblxuXHRcdHZhciBlbGVtZW50cyA9IFtdO1xuXHRcdHZhciBkYXRhID0ge307XG5cblx0XHRpZiAodGhpcy5wcm9wcy5saXN0LnRyYWNraW5nLmNyZWF0ZWRBdCkge1xuXHRcdFx0ZGF0YS5jcmVhdGVkQXQgPSB0aGlzLnByb3BzLmRhdGEuZmllbGRzW3RoaXMucHJvcHMubGlzdC50cmFja2luZy5jcmVhdGVkQXRdO1xuXHRcdFx0aWYgKGRhdGEuY3JlYXRlZEF0KSB7XG5cdFx0XHRcdGVsZW1lbnRzLnB1c2goXG5cdFx0XHRcdFx0PEZvcm1GaWVsZCBrZXk9XCJjcmVhdGVkQXRcIiBsYWJlbD1cIkNyZWF0ZWQgb25cIj5cblx0XHRcdFx0XHRcdDxGb3JtSW5wdXQgbm9lZGl0IHRpdGxlPXttb21lbnQoZGF0YS5jcmVhdGVkQXQpLmZvcm1hdCgnREQvTU0vWVlZWSBoOm1tOnNzYScpfT57bW9tZW50KGRhdGEuY3JlYXRlZEF0KS5mb3JtYXQoJ0RvIE1NTSBZWVlZJyl9PC9Gb3JtSW5wdXQ+XG5cdFx0XHRcdFx0PC9Gb3JtRmllbGQ+XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMucHJvcHMubGlzdC50cmFja2luZy5jcmVhdGVkQnkpIHtcblx0XHRcdGRhdGEuY3JlYXRlZEJ5ID0gdGhpcy5wcm9wcy5kYXRhLmZpZWxkc1t0aGlzLnByb3BzLmxpc3QudHJhY2tpbmcuY3JlYXRlZEJ5XTtcblx0XHRcdGlmIChkYXRhLmNyZWF0ZWRCeSAmJiBkYXRhLmNyZWF0ZWRCeS5uYW1lKSB7XG5cdFx0XHRcdGxldCBjcmVhdGVkQnlOYW1lID0gZ2V0TmFtZUZyb21EYXRhKGRhdGEuY3JlYXRlZEJ5Lm5hbWUpO1xuXHRcdFx0XHRpZiAoY3JlYXRlZEJ5TmFtZSkge1xuXHRcdFx0XHRcdGVsZW1lbnRzLnB1c2goXG5cdFx0XHRcdFx0XHQ8Rm9ybUZpZWxkIGtleT1cImNyZWF0ZWRCeVwiIGxhYmVsPVwiQ3JlYXRlZCBieVwiPlxuXHRcdFx0XHRcdFx0XHQ8Rm9ybUlucHV0IG5vZWRpdD57ZGF0YS5jcmVhdGVkQnkubmFtZS5maXJzdH0ge2RhdGEuY3JlYXRlZEJ5Lm5hbWUubGFzdH08L0Zvcm1JbnB1dD5cblx0XHRcdFx0XHRcdDwvRm9ybUZpZWxkPlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAodGhpcy5wcm9wcy5saXN0LnRyYWNraW5nLnVwZGF0ZWRBdCkge1xuXHRcdFx0ZGF0YS51cGRhdGVkQXQgPSB0aGlzLnByb3BzLmRhdGEuZmllbGRzW3RoaXMucHJvcHMubGlzdC50cmFja2luZy51cGRhdGVkQXRdO1xuXHRcdFx0aWYgKGRhdGEudXBkYXRlZEF0ICYmICghZGF0YS5jcmVhdGVkQXQgfHwgZGF0YS5jcmVhdGVkQXQgIT09IGRhdGEudXBkYXRlZEF0KSkge1xuXHRcdFx0XHRlbGVtZW50cy5wdXNoKFxuXHRcdFx0XHRcdDxGb3JtRmllbGQga2V5PVwidXBkYXRlZEF0XCIgbGFiZWw9XCJVcGRhdGVkIG9uXCI+XG5cdFx0XHRcdFx0XHQ8Rm9ybUlucHV0IG5vZWRpdCB0aXRsZT17bW9tZW50KGRhdGEudXBkYXRlZEF0KS5mb3JtYXQoJ0REL01NL1lZWVkgaDptbTpzc2EnKX0+e21vbWVudChkYXRhLnVwZGF0ZWRBdCkuZm9ybWF0KCdEbyBNTU0gWVlZWScpfTwvRm9ybUlucHV0PlxuXHRcdFx0XHRcdDwvRm9ybUZpZWxkPlxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICh0aGlzLnByb3BzLmxpc3QudHJhY2tpbmcudXBkYXRlZEJ5KSB7XG5cdFx0XHRkYXRhLnVwZGF0ZWRCeSA9IHRoaXMucHJvcHMuZGF0YS5maWVsZHNbdGhpcy5wcm9wcy5saXN0LnRyYWNraW5nLnVwZGF0ZWRCeV07XG5cdFx0XHRpZiAoZGF0YS51cGRhdGVkQnkgJiYgZGF0YS51cGRhdGVkQnkubmFtZSkge1xuXHRcdFx0XHRsZXQgdXBkYXRlZEJ5TmFtZSA9IGdldE5hbWVGcm9tRGF0YShkYXRhLnVwZGF0ZWRCeS5uYW1lKTtcblx0XHRcdFx0aWYgKHVwZGF0ZWRCeU5hbWUpIHtcblx0XHRcdFx0XHRlbGVtZW50cy5wdXNoKFxuXHRcdFx0XHRcdFx0PEZvcm1GaWVsZCBrZXk9XCJ1cGRhdGVkQnlcIiBsYWJlbD1cIlVwZGF0ZWQgYnlcIj5cblx0XHRcdFx0XHRcdFx0PEZvcm1JbnB1dCBub2VkaXQ+e2RhdGEudXBkYXRlZEJ5Lm5hbWUuZmlyc3R9IHtkYXRhLnVwZGF0ZWRCeS5uYW1lLmxhc3R9PC9Gb3JtSW5wdXQ+XG5cdFx0XHRcdFx0XHQ8L0Zvcm1GaWVsZD5cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKGVsZW1lbnRzKS5sZW5ndGggPyAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIkVkaXRGb3JtX19tZXRhXCI+XG5cdFx0XHRcdDxoMyBjbGFzc05hbWU9XCJmb3JtLWhlYWRpbmdcIj5NZXRhPC9oMz5cblx0XHRcdFx0e2VsZW1lbnRzfVxuXHRcdFx0PC9kaXY+XG5cdFx0KSA6IG51bGw7XG5cdH0sXG5cdHJlbmRlcigpIHtcblx0XHRjb25zdCBsaXN0ID0gdGhpcy5wcm9wcy5saXN0O1xuXG5cdFx0bGV0IG1lc3NhZ2UgPSBgQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSA8c3Ryb25nPiR7dGhpcy5wcm9wcy5kYXRhLm5hbWV9Pzwvc3Ryb25nPmA7XG5cblx0XHRpZiAobGlzdC5kZWxldGVQcm9tcHQpIHtcblx0XHRcdG1lc3NhZ2UgPSBsaXN0LmRlbGV0ZVByb21wdDtcblx0XHR9XG5cdFx0cmV0dXJuIChcblx0XHRcdDxmb3JtIHJlZj1cImVkaXRGb3JtXCIgY2xhc3NOYW1lPVwiRWRpdEZvcm0tY29udGFpbmVyXCI+XG5cdFx0XHRcdHsodGhpcy5zdGF0ZS5hbGVydHMpID8gPEFsZXJ0TWVzc2FnZXMgYWxlcnRzPXt0aGlzLnN0YXRlLmFsZXJ0c30gLz4gOiBudWxsfVxuXHRcdFx0XHQ8R3JpZC5Sb3c+XG5cdFx0XHRcdFx0PEdyaWQuQ29sIGxhcmdlPVwidGhyZWUtcXVhcnRlcnNcIj5cblx0XHRcdFx0XHRcdDxGb3JtIGxheW91dD1cImhvcml6b250YWxcIiBjb21wb25lbnQ9XCJkaXZcIj5cblx0XHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyTmFtZUZpZWxkKCl9XG5cdFx0XHRcdFx0XHRcdHt0aGlzLnJlbmRlcktleU9ySWQoKX1cblx0XHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyRm9ybUVsZW1lbnRzKCl9XG5cdFx0XHRcdFx0XHRcdHt0aGlzLnJlbmRlclRyYWNraW5nTWV0YSgpfVxuXHRcdFx0XHRcdFx0PC9Gb3JtPlxuXHRcdFx0XHRcdDwvR3JpZC5Db2w+XG5cdFx0XHRcdFx0PEdyaWQuQ29sIGxhcmdlPVwib25lLXF1YXJ0ZXJcIj48c3BhbiAvPjwvR3JpZC5Db2w+XG5cdFx0XHRcdDwvR3JpZC5Sb3c+XG5cdFx0XHRcdHt0aGlzLnJlbmRlckZvb3RlckJhcigpfVxuXHRcdFx0XHQ8Q29uZmlybWF0aW9uRGlhbG9nXG5cdFx0XHRcdFx0Y29uZmlybWF0aW9uTGFiZWw9XCJSZXNldFwiXG5cdFx0XHRcdFx0aXNPcGVuPXt0aGlzLnN0YXRlLnJlc2V0RGlhbG9nSXNPcGVufVxuXHRcdFx0XHRcdG9uQ2FuY2VsPXt0aGlzLnRvZ2dsZVJlc2V0RGlhbG9nfVxuXHRcdFx0XHRcdG9uQ29uZmlybWF0aW9uPXt0aGlzLmhhbmRsZVJlc2V0fVxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0PHA+UmVzZXQgeW91ciBjaGFuZ2VzIHRvIDxzdHJvbmc+e3RoaXMucHJvcHMuZGF0YS5uYW1lfTwvc3Ryb25nPj88L3A+XG5cdFx0XHRcdDwvQ29uZmlybWF0aW9uRGlhbG9nPlxuXHRcdFx0XHQ8Q29uZmlybWF0aW9uRGlhbG9nXG5cdFx0XHRcdFx0Y29uZmlybWF0aW9uTGFiZWw9XCJEZWxldGVcIlxuXHRcdFx0XHRcdGlzT3Blbj17dGhpcy5zdGF0ZS5kZWxldGVEaWFsb2dJc09wZW59XG5cdFx0XHRcdFx0b25DYW5jZWw9e3RoaXMudG9nZ2xlRGVsZXRlRGlhbG9nfVxuXHRcdFx0XHRcdG9uQ29uZmlybWF0aW9uPXt0aGlzLmhhbmRsZURlbGV0ZX1cblx0XHRcdFx0PlxuXHRcdFx0XHRcdDxzcGFuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogbWVzc2FnZSB9fSAvPlxuXHRcdFx0XHRcdDxiciAvPlxuXHRcdFx0XHRcdDxiciAvPlxuXHRcdFx0XHRcdFRoaXMgY2Fubm90IGJlIHVuZG9uZS5cblx0XHRcdFx0PC9Db25maXJtYXRpb25EaWFsb2c+XG5cdFx0XHQ8L2Zvcm0+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5jb25zdCBzdHlsZXMgPSB7XG5cdGZvb3RlcmJhcjoge1xuXHRcdGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5jb2xvci5ib2R5LCA5MyksXG5cdFx0Ym94U2hhZG93OiAnMCAtMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjEpJyxcblx0XHRwYWRkaW5nQm90dG9tOiAyMCxcblx0XHRwYWRkaW5nVG9wOiAyMCxcblx0XHR6SW5kZXg6IDk5LFxuXHR9LFxuXHRmb290ZXJiYXJJbm5lcjoge1xuXHRcdGhlaWdodDogdGhlbWUuY29tcG9uZW50LmhlaWdodCwgLy8gRklYTUUgYXBocm9kaXRlIGJ1Z1xuXHR9LFxuXHRkZWxldGVCdXR0b246IHtcblx0XHRmbG9hdDogJ3JpZ2h0Jyxcblx0fSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRWRpdEZvcm07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcblxyXG5pbXBvcnQgVG9vbGJhciBmcm9tICcuL1Rvb2xiYXInO1xyXG5pbXBvcnQgVG9vbGJhclNlY3Rpb24gZnJvbSAnLi9Ub29sYmFyL1Rvb2xiYXJTZWN0aW9uJztcclxuaW1wb3J0IEVkaXRGb3JtSGVhZGVyU2VhcmNoIGZyb20gJy4vRWRpdEZvcm1IZWFkZXJTZWFyY2gnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuXHJcbmltcG9ydCBEcmlsbGRvd24gZnJvbSAnLi9EcmlsbGRvd24nO1xyXG5pbXBvcnQgeyBHbHlwaEJ1dHRvbiwgUmVzcG9uc2l2ZVRleHQgfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50YWwnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEVkaXRGb3JtSGVhZGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnRWRpdEZvcm1IZWFkZXInLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0ZGF0YTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcclxuXHRcdGxpc3Q6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXHJcblx0XHR0b2dnbGVDcmVhdGU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdH0sXHJcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHNlYXJjaFN0cmluZzogJycsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0dG9nZ2xlQ3JlYXRlICh2aXNpYmxlKSB7XHJcblx0XHR0aGlzLnByb3BzLnRvZ2dsZUNyZWF0ZSh2aXNpYmxlKTtcclxuXHR9LFxyXG5cdHNlYXJjaFN0cmluZ0NoYW5nZWQgKGV2ZW50KSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0c2VhcmNoU3RyaW5nOiBldmVudC50YXJnZXQudmFsdWUsXHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdGhhbmRsZUVzY2FwZUtleSAoZXZlbnQpIHtcclxuXHRcdGNvbnN0IGVzY2FwZUtleUNvZGUgPSAyNztcclxuXHJcblx0XHRpZiAoZXZlbnQud2hpY2ggPT09IGVzY2FwZUtleUNvZGUpIHtcclxuXHRcdFx0ZmluZERPTU5vZGUodGhpcy5yZWZzLnNlYXJjaEZpZWxkKS5ibHVyKCk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRyZW5kZXJEcmlsbGRvd24gKCkge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PFRvb2xiYXJTZWN0aW9uIGxlZnQ+XHJcblx0XHRcdFx0e3RoaXMucmVuZGVyRHJpbGxkb3duSXRlbXMoKX1cclxuXHRcdFx0XHR7dGhpcy5yZW5kZXJTZWFyY2goKX1cclxuXHRcdFx0PC9Ub29sYmFyU2VjdGlvbj5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXJEcmlsbGRvd25JdGVtcyAoKSB7XHJcblx0XHRjb25zdCB7IGRhdGEsIGxpc3QgfSA9IHRoaXMucHJvcHM7XHJcblx0XHRjb25zdCBpdGVtcyA9IGRhdGEuZHJpbGxkb3duID8gZGF0YS5kcmlsbGRvd24uaXRlbXMgOiBbXTtcclxuXHJcblx0XHRsZXQgYmFja1BhdGggPSBgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7bGlzdC5wYXRofWA7XHJcblx0XHRjb25zdCBiYWNrU3R5bGVzID0geyBwYWRkaW5nTGVmdDogMCwgcGFkZGluZ1JpZ2h0OiAwIH07XHJcblx0XHQvLyBMaW5rIHRvIHRoZSBsaXN0IHBhZ2UgdGhlIHVzZXIgY2FtZSBmcm9tXHJcblx0XHRpZiAodGhpcy5wcm9wcy5saXN0QWN0aXZlUGFnZSAmJiB0aGlzLnByb3BzLmxpc3RBY3RpdmVQYWdlID4gMSkge1xyXG5cdFx0XHRiYWNrUGF0aCA9IGAke2JhY2tQYXRofT9wYWdlPSR7dGhpcy5wcm9wcy5saXN0QWN0aXZlUGFnZX1gO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHJldHVybiBhIHNpbmdsZSBiYWNrIGJ1dHRvbiB3aGVuIG5vIGRyaWxsZG93biBleGlzdHNcclxuXHRcdGlmICghaXRlbXMubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0PEdseXBoQnV0dG9uXHJcblx0XHRcdFx0XHRjb21wb25lbnQ9e0xpbmt9XHJcblx0XHRcdFx0XHRkYXRhLWUyZS1lZGl0Zm9ybS1oZWFkZXItYmFja1xyXG5cdFx0XHRcdFx0Z2x5cGg9XCJjaGV2cm9uLWxlZnRcIlxyXG5cdFx0XHRcdFx0cG9zaXRpb249XCJsZWZ0XCJcclxuXHRcdFx0XHRcdHN0eWxlPXtiYWNrU3R5bGVzfVxyXG5cdFx0XHRcdFx0dG89e2JhY2tQYXRofVxyXG5cdFx0XHRcdFx0dmFyaWFudD1cImxpbmtcIlxyXG5cdFx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0e2xpc3QucGx1cmFsfVxyXG5cdFx0XHRcdDwvR2x5cGhCdXR0b24+XHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gcHJlcGFyZSB0aGUgZHJpbGxkb3duIGVsZW1lbnRzXHJcblx0XHRjb25zdCBkcmlsbGRvd24gPSBbXTtcclxuXHRcdGl0ZW1zLmZvckVhY2goKGl0ZW0sIGlkeCkgPT4ge1xyXG5cdFx0XHQvLyBGSVhNRSBAamVkd2F0c29uXHJcblx0XHRcdC8vIHdlIHVzZWQgdG8gc3VwcG9ydCByZWxhdGlvbnNoaXBzIG9mIHR5cGUgTUFOWSB3aGVyZSBpdGVtcyB3ZXJlXHJcblx0XHRcdC8vIHJlcHJlc2VudGVkIGFzIHNpYmxpbmdzIGluc2lkZSBhIHNpbmdsZSBsaXN0IGl0ZW07IHRoaXMgZ290IGFcclxuXHRcdFx0Ly8gYml0IG1lc3N5Li4uXHJcblx0XHRcdGl0ZW0uaXRlbXMuZm9yRWFjaChsaW5rID0+IHtcclxuXHRcdFx0XHRkcmlsbGRvd24ucHVzaCh7XHJcblx0XHRcdFx0XHRocmVmOiBsaW5rLmhyZWYsXHJcblx0XHRcdFx0XHRsYWJlbDogbGluay5sYWJlbCxcclxuXHRcdFx0XHRcdHRpdGxlOiBpdGVtLmxpc3Quc2luZ3VsYXIsXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gYWRkIHRoZSBjdXJyZW50IGxpc3QgdG8gdGhlIGRyaWxsZG93blxyXG5cdFx0ZHJpbGxkb3duLnB1c2goe1xyXG5cdFx0XHRocmVmOiBiYWNrUGF0aCxcclxuXHRcdFx0bGFiZWw6IGxpc3QucGx1cmFsLFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PERyaWxsZG93biBpdGVtcz17ZHJpbGxkb3dufSAvPlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdHJlbmRlclNlYXJjaCAoKSB7XHJcblx0XHR2YXIgbGlzdCA9IHRoaXMucHJvcHMubGlzdDtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxmb3JtIGFjdGlvbj17YCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2xpc3QucGF0aH1gfSBjbGFzc05hbWU9XCJFZGl0Rm9ybV9faGVhZGVyX19zZWFyY2hcIj5cclxuXHRcdFx0XHQ8RWRpdEZvcm1IZWFkZXJTZWFyY2hcclxuXHRcdFx0XHRcdHZhbHVlPXt0aGlzLnN0YXRlLnNlYXJjaFN0cmluZ31cclxuXHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLnNlYXJjaFN0cmluZ0NoYW5nZWR9XHJcblx0XHRcdFx0XHRvbktleVVwPXt0aGlzLmhhbmRsZUVzY2FwZUtleX1cclxuXHRcdFx0XHQvPlxyXG5cdFx0XHRcdHsvKiA8R2x5cGhGaWVsZCBnbHlwaENvbG9yPVwiIzk5OVwiIGdseXBoPVwic2VhcmNoXCI+XHJcblx0XHRcdFx0XHQ8Rm9ybUlucHV0XHJcblx0XHRcdFx0XHRcdHJlZj1cInNlYXJjaEZpZWxkXCJcclxuXHRcdFx0XHRcdFx0dHlwZT1cInNlYXJjaFwiXHJcblx0XHRcdFx0XHRcdG5hbWU9XCJzZWFyY2hcIlxyXG5cdFx0XHRcdFx0XHR2YWx1ZT17dGhpcy5zdGF0ZS5zZWFyY2hTdHJpbmd9XHJcblx0XHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLnNlYXJjaFN0cmluZ0NoYW5nZWR9XHJcblx0XHRcdFx0XHRcdG9uS2V5VXA9e3RoaXMuaGFuZGxlRXNjYXBlS2V5fVxyXG5cdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cIlNlYXJjaFwiXHJcblx0XHRcdFx0XHRcdHN0eWxlPXt7IHBhZGRpbmdMZWZ0OiAnMi4zZW0nIH19XHJcblx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdDwvR2x5cGhGaWVsZD4gKi99XHJcblx0XHRcdDwvZm9ybT5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXJJbmZvICgpIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxUb29sYmFyU2VjdGlvbiByaWdodD5cclxuXHRcdFx0XHR7dGhpcy5yZW5kZXJDcmVhdGVCdXR0b24oKX1cclxuXHRcdFx0PC9Ub29sYmFyU2VjdGlvbj5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXJDcmVhdGVCdXR0b24gKCkge1xyXG5cdFx0Y29uc3QgeyBub2NyZWF0ZSwgYXV0b2NyZWF0ZSwgc2luZ3VsYXIgfSA9IHRoaXMucHJvcHMubGlzdDtcclxuXHJcblx0XHRpZiAobm9jcmVhdGUpIHJldHVybiBudWxsO1xyXG5cclxuXHRcdGxldCBwcm9wcyA9IHt9O1xyXG5cdFx0aWYgKGF1dG9jcmVhdGUpIHtcclxuXHRcdFx0cHJvcHMuaHJlZiA9ICc/bmV3JyArIEtleXN0b25lLmNzcmYucXVlcnk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRwcm9wcy5vbkNsaWNrID0gKCkgPT4geyB0aGlzLnRvZ2dsZUNyZWF0ZSh0cnVlKTsgfTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxHbHlwaEJ1dHRvbiBkYXRhLWUyZS1pdGVtLWNyZWF0ZS1idXR0b249XCJ0cnVlXCIgY29sb3I9XCJzdWNjZXNzXCIgZ2x5cGg9XCJwbHVzXCIgcG9zaXRpb249XCJsZWZ0XCIgey4uLnByb3BzfT5cclxuXHRcdFx0XHQ8UmVzcG9uc2l2ZVRleHQgaGlkZGVuWFM9e2BOZXcgJHtzaW5ndWxhcn1gfSB2aXNpYmxlWFM9XCJDcmVhdGVcIiAvPlxyXG5cdFx0XHQ8L0dseXBoQnV0dG9uPlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8VG9vbGJhcj5cclxuXHRcdFx0XHR7dGhpcy5yZW5kZXJEcmlsbGRvd24oKX1cclxuXHRcdFx0XHR7dGhpcy5yZW5kZXJJbmZvKCl9XHJcblx0XHRcdDwvVG9vbGJhcj5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KChzdGF0ZSkgPT4gKHtcclxuXHRsaXN0QWN0aXZlUGFnZTogc3RhdGUubGlzdHMucGFnZS5pbmRleCxcclxufSkpKEVkaXRGb3JtSGVhZGVyKTtcclxuIiwiLyogZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSAqL1xyXG5cclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCB7IEZvcm1JbnB1dCwgR2x5cGgsIEdseXBoQnV0dG9uIH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbmNsYXNzIEVkaXRGb3JtSGVhZGVyU2VhcmNoIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHRjb25zdHJ1Y3RvciAoKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuZm9jdXNGaWVsZCA9IHRoaXMuZm9jdXNGaWVsZC5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5zdGF0ZSA9IHsgZm9jdXNlZDogZmFsc2UgfTtcclxuXHR9XHJcblx0Zm9jdXNGaWVsZCAoKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHsgZm9jdXNlZDogdHJ1ZSB9LCAoKSA9PiB7XHJcblx0XHRcdGZpbmRET01Ob2RlKHRoaXMucmVmcy50YXJnZXQpLmZvY3VzKCk7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IHsgZm9jdXNlZCB9ID0gdGhpcy5zdGF0ZTtcclxuXHRcdGNvbnN0IHtcclxuXHRcdFx0b25DaGFuZ2UsXHJcblx0XHRcdG9uS2V5VXAsXHJcblx0XHRcdHZhbHVlLFxyXG5cdFx0XHQuLi5wcm9wc1xyXG5cdFx0fSA9IHRoaXMucHJvcHM7XHJcblxyXG5cdFx0cmV0dXJuIGZvY3VzZWQgPyAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy53cmFwcGVyKX0+XHJcblx0XHRcdFx0PEdseXBoXHJcblx0XHRcdFx0XHRhcGhyb2RpdGVTdHlsZXM9e2NsYXNzZXMuZ2x5cGh9XHJcblx0XHRcdFx0XHRjb2xvcj17dGhlbWUuY29sb3IuZ3JheTQwfVxyXG5cdFx0XHRcdFx0bmFtZT1cInNlYXJjaFwiXHJcblx0XHRcdFx0XHRkYXRhLWUyZS1zZWFyY2gtaWNvblxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdFx0PEZvcm1JbnB1dFxyXG5cdFx0XHRcdFx0YXBocm9kaXRlU3R5bGVzPXtjbGFzc2VzLmlucHV0fVxyXG5cdFx0XHRcdFx0bmFtZT1cInNlYXJjaFwiXHJcblx0XHRcdFx0XHRvbkJsdXI9eygpID0+IHRoaXMuc2V0U3RhdGUoeyBmb2N1c2VkOiBmYWxzZSB9KX1cclxuXHRcdFx0XHRcdG9uQ2hhbmdlPXtvbkNoYW5nZX1cclxuXHRcdFx0XHRcdG9uS2V5VXA9e29uS2V5VXB9XHJcblx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cIlNlYXJjaFwiXHJcblx0XHRcdFx0XHRyZWY9XCJ0YXJnZXRcIlxyXG5cdFx0XHRcdFx0dHlwZT1cInNlYXJjaFwiXHJcblx0XHRcdFx0XHR2YWx1ZT17dmFsdWV9XHJcblx0XHRcdFx0XHR7Li4ucHJvcHN9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpIDogKFxyXG5cdFx0XHQ8R2x5cGhCdXR0b25cclxuXHRcdFx0XHRjb2xvcj1cInByaW1hcnlcIlxyXG5cdFx0XHRcdGdseXBoPVwic2VhcmNoXCJcclxuXHRcdFx0XHRnbHlwaFN0eWxlPXt7IG1hcmdpblJpZ2h0OiAnMC40ZW0nIH19XHJcblx0XHRcdFx0b25DbGljaz17dGhpcy5mb2N1c0ZpZWxkfVxyXG5cdFx0XHRcdG9uRm9jdXM9e3RoaXMuZm9jdXNGaWVsZH1cclxuXHRcdFx0XHRwb3NpdGlvbj1cImxlZnRcIlxyXG5cdFx0XHRcdHZhcmlhbnQ9XCJsaW5rXCJcclxuXHRcdFx0XHRzdHlsZT17eyBwYWRkaW5nTGVmdDogJzAuN2VtJyB9fVxyXG5cdFx0XHRcdGRhdGEtZTJlLXNlYXJjaC1pY29uXHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdFNlYXJjaFxyXG5cdFx0XHQ8L0dseXBoQnV0dG9uPlxyXG5cdFx0KTtcclxuXHR9XHJcbn07XHJcblxyXG4vLyBGb3IgcHJvcHMgXCJnbHlwaFwiLCBcImdseXBoQ29sb3JcIiwgYW5kIFwiZ2x5cGhTaXplXCI6XHJcbi8vIHByb3AgdHlwZSB2YWxpZGF0aW9uIHdpbGwgb2NjdXIgd2l0aGluIHRoZSBHbHlwaCBjb21wb25lbnQsIG5vIG5lZWQgdG9cclxuLy8gZHVwbGljYXRlLCBqdXN0IHBhc3MgaXQgdGhyb3VnaC5cclxuRWRpdEZvcm1IZWFkZXJTZWFyY2gucHJvcFR5cGVzID0ge1xyXG5cdG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHR3cmFwcGVyOiB7XHJcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxyXG5cdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZScsXHJcblx0fSxcclxuXHJcblx0Ly8gaW5wdXRcclxuXHRpbnB1dDoge1xyXG5cdFx0cGFkZGluZ0xlZnQ6ICcyLjJlbScsXHJcblx0XHQvLyBvcGFjaXR5OiAwLFxyXG5cdFx0dHJhbnNpdGlvbjogJ2FsbCAyNDBtcycsXHJcblx0XHR3aWR0aDogMTAwLFxyXG5cclxuXHRcdCc6Zm9jdXMnOiB7XHJcblx0XHRcdC8vIG9wYWNpdHk6IDEsXHJcblx0XHRcdHdpZHRoOiAyNDAsXHJcblx0XHR9LFxyXG5cdH0sXHJcblxyXG5cdC8vIGdseXBoXHJcblx0Z2x5cGg6IHtcclxuXHRcdGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG5cdFx0ZGlzcGxheTogJ2ZsZXgnLFxyXG5cdFx0aGVpZ2h0OiAnMTAwJScsXHJcblx0XHRqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXHJcblx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuXHRcdHdpZHRoOiAnMi4yZW0nLFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEVkaXRGb3JtSGVhZGVyU2VhcmNoO1xyXG5cclxuXHJcbi8vIFNlYXJjaFxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbi8vIC5FZGl0Rm9ybV9faGVhZGVyX19zZWFyY2gge1xyXG4vLyBcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuLy8gXHRtYXJnaW4tbGVmdDogMWVtO1xyXG4vLyB9XHJcbi8vIC5FZGl0Rm9ybV9faGVhZGVyX19zZWFyY2gtZmllbGQge1xyXG4vLyBcdG1hcmdpbi1ib3R0b206IDA7XHJcbi8vXHJcbi8vIFx0Lkljb25GaWVsZF9faWNvbiB7XHJcbi8vIFx0XHRjb2xvcjogQGFwcC1wcmltYXJ5O1xyXG4vLyBcdH1cclxuLy8gfVxyXG4vL1xyXG4vLyAvLyBtYWtlIHRoZSBpbnB1dCBhcHBlYXIgYXMgYSBidXR0b24gbGluayB1bnRpbCBmb2N1c2VkXHJcbi8vIC5FZGl0Rm9ybV9faGVhZGVyX19zZWFyY2gtaW5wdXQge1xyXG4vLyBcdC8vIG92ZXJyaWRlIGVsZW1lbnRhbCdzIHRyYW5zaXRpb24gdG8gY2F0Y2ggdGhlIHdpZHRoIG9yIGl0IGxvb2tzIHdlaXJkXHJcbi8vIFx0LnRyYW5zaXRpb24oIGFsbCAwLjE1cyBlYXNlLWluLW91dCApO1xyXG4vLyBcdC5wbGFjZWhvbGRlcihAbGluay1jb2xvcik7XHJcbi8vIFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbi8vIFx0Ym9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuLy8gXHRib3gtc2hhZG93OiBub25lO1xyXG4vLyBcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuLy9cclxuLy8gXHQvLyBzZXQgdGhlIHdpZHRoIHRvIG9ubHkgYmUgYXMgbG9uZyBhcyBpZiBpdCB3ZXJlIGEgYnV0dG9uIGluaXRpYWxseVxyXG4vLyBcdC8vIHRoaXMgaXMgdXBkYXRlZCBvbiBmb2N1cyB0byBhIG1vcmUgY29tZm9ydGFibGUgdHlwaW5nIGxlbmd0aFxyXG4vLyBcdHdpZHRoOiAxMDBweDtcclxuLy9cclxuLy8gXHQvLyBkZWNvcmF0ZSB0aGUgaW5wdXQgYXMgYSBsaW5rXHJcbi8vIFx0Jjpob3ZlciB7XHJcbi8vIFx0XHQucGxhY2Vob2xkZXIoQGxpbmstaG92ZXItY29sb3IpO1xyXG4vLyBcdFx0Ym9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuLy8gXHRcdGN1cnNvcjogcG9pbnRlcjtcclxuLy9cclxuLy8gXHRcdC8vIGhhbmRsZSBwbGFjZWhvbGRlciB0ZXh0XHJcbi8vIFx0XHQmOjotbW96LXBsYWNlaG9sZGVyIHsgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IH1cclxuLy8gXHRcdCY6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHsgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IH1cclxuLy8gXHRcdCY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIgIHsgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IH1cclxuLy9cclxuLy8gXHRcdCsgLkljb25GaWVsZF9faWNvbiB7XHJcbi8vIFx0XHRcdGNvbG9yOiBAbGluay1ob3Zlci1jb2xvcjtcclxuLy8gXHRcdH1cclxuLy8gXHR9XHJcbi8vXHJcbi8vIFx0Ly8gcmV0dXJuIHRoZSBpbnB1dCB0byBpdCdzIG5hdHVyYWwgYXBwZWFyYW5jZSBvbiBmb2N1c1xyXG4vLyBcdCY6Zm9jdXMge1xyXG4vLyBcdFx0LnBsYWNlaG9sZGVyKEBpbnB1dC1wbGFjZWhvbGRlci1jb2xvcik7XHJcbi8vIFx0XHRiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuLy8gXHRcdGJvcmRlci1jb2xvcjogQGlucHV0LWJvcmRlci1jb2xvci1mb2N1cztcclxuLy8gXHRcdGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMDc1KSwgMCAwIDAgM3B4IGZhZGUoQGlucHV0LWJvcmRlci1jb2xvci1mb2N1cywgMTAlKTtcclxuLy8gXHRcdGN1cnNvcjogYXV0bztcclxuLy8gXHRcdG91dGxpbmU6IDA7XHJcbi8vIFx0XHR3aWR0aDogMjQwcHg7XHJcbi8vXHJcbi8vIFx0XHQvLyBoYW5kbGUgcGxhY2Vob2xkZXIgdGV4dFxyXG4vLyBcdFx0Jjo6LW1vei1wbGFjZWhvbGRlciB7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxyXG4vLyBcdFx0JjotbXMtaW5wdXQtcGxhY2Vob2xkZXIgeyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cclxuLy8gXHRcdCY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIgIHsgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XHJcbi8vXHJcbi8vIFx0XHQrIC5JY29uRmllbGRfX2ljb24ge1xyXG4vLyBcdFx0XHRjb2xvcjogQGlucHV0LXBsYWNlaG9sZGVyLWNvbG9yO1xyXG4vLyBcdFx0fVxyXG4vLyBcdH1cclxuLy8gfVxyXG4vLyAvLyBoaWRlIHRoZSBzZWFyY2ggZmllbGQgb24gc21hbGwgZGV2aWNlc1xyXG4vLyBAbWVkaWEgKG1heC13aWR0aDogNDgwcHgpIHtcclxuLy8gXHQuRWRpdEZvcm1fX2hlYWRlcl9fc2VhcmNoIHtcclxuLy8gXHRcdGRpc3BsYXk6IG5vbmU7XHJcbi8vIFx0fVxyXG4vLyB9XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBibGFja2xpc3QgZnJvbSAnYmxhY2tsaXN0JztcclxuaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcclxuXHJcbnZhciBGb290ZXJCYXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRzdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcclxuXHR9LFxyXG5cdGdldERlZmF1bHRQcm9wcyAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRzdHlsZToge30sXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxyXG5cdFx0XHR3aWR0aDogJ2F1dG8nLFxyXG5cdFx0XHRoZWlnaHQ6ICdhdXRvJyxcclxuXHRcdFx0dG9wOiAwLFxyXG5cdFx0fTtcclxuXHR9LFxyXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuXHRcdC8vIEJhaWwgaW4gSUU4IGJlY2F1c2UgUmVhY3QgZG9lc24ndCBzdXBwb3J0IHRoZSBvblNjcm9sbCBldmVudCBpbiB0aGF0IGJyb3dzZXJcclxuXHRcdC8vIENvbnZlbmllbnRseSAoISkgSUU4IGRvZXNuJ3QgaGF2ZSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSB3aGljaCB3ZSBhbHNvIHVzZSBoZXJlXHJcblx0XHRpZiAoIXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSByZXR1cm47XHJcblx0XHR2YXIgZm9vdGVyID0gdGhpcy5yZWZzLmZvb3RlcjtcclxuXHRcdHRoaXMud2luZG93U2l6ZSA9IHRoaXMuZ2V0V2luZG93U2l6ZSgpO1xyXG5cdFx0dmFyIGZvb3RlclN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZm9vdGVyKTtcclxuXHRcdHRoaXMuZm9vdGVyU2l6ZSA9IHtcclxuXHRcdFx0eDogZm9vdGVyLm9mZnNldFdpZHRoLFxyXG5cdFx0XHR5OiBmb290ZXIub2Zmc2V0SGVpZ2h0ICsgcGFyc2VJbnQoZm9vdGVyU3R5bGUubWFyZ2luVG9wIHx8ICcwJyksXHJcblx0XHR9O1xyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMucmVjYWxjUG9zaXRpb24sIGZhbHNlKTtcclxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlY2FsY1Bvc2l0aW9uLCBmYWxzZSk7XHJcblx0XHR0aGlzLnJlY2FsY1Bvc2l0aW9uKCk7XHJcblx0fSxcclxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XHJcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5yZWNhbGNQb3NpdGlvbiwgZmFsc2UpO1xyXG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVjYWxjUG9zaXRpb24sIGZhbHNlKTtcclxuXHR9LFxyXG5cdGdldFdpbmRvd1NpemUgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0eDogd2luZG93LmlubmVyV2lkdGgsXHJcblx0XHRcdHk6IHdpbmRvdy5pbm5lckhlaWdodCxcclxuXHRcdH07XHJcblx0fSxcclxuXHRyZWNhbGNQb3NpdGlvbiAoKSB7XHJcblx0XHR2YXIgd3JhcHBlciA9IHRoaXMucmVmcy53cmFwcGVyO1xyXG5cclxuXHRcdHRoaXMuZm9vdGVyU2l6ZS54ID0gd3JhcHBlci5vZmZzZXRXaWR0aDtcclxuXHJcblx0XHR2YXIgb2Zmc2V0VG9wID0gMDtcclxuXHRcdHZhciBvZmZzZXRFbCA9IHdyYXBwZXI7XHJcblxyXG5cdFx0d2hpbGUgKG9mZnNldEVsKSB7XHJcblx0XHRcdG9mZnNldFRvcCArPSBvZmZzZXRFbC5vZmZzZXRUb3A7XHJcblx0XHRcdG9mZnNldEVsID0gb2Zmc2V0RWwub2Zmc2V0UGFyZW50O1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBtYXhZID0gb2Zmc2V0VG9wICsgdGhpcy5mb290ZXJTaXplLnk7XHJcblx0XHR2YXIgdmlld1kgPSB3aW5kb3cuc2Nyb2xsWSArIHdpbmRvdy5pbm5lckhlaWdodDtcclxuXHJcblx0XHR2YXIgbmV3U2l6ZSA9IHRoaXMuZ2V0V2luZG93U2l6ZSgpO1xyXG5cdFx0dmFyIHNpemVDaGFuZ2VkID0gKG5ld1NpemUueCAhPT0gdGhpcy53aW5kb3dTaXplLnggfHwgbmV3U2l6ZS55ICE9PSB0aGlzLndpbmRvd1NpemUueSk7XHJcblx0XHR0aGlzLndpbmRvd1NpemUgPSBuZXdTaXplO1xyXG5cclxuXHRcdHZhciBuZXdTdGF0ZSA9IHtcclxuXHRcdFx0d2lkdGg6IHRoaXMuZm9vdGVyU2l6ZS54LFxyXG5cdFx0XHRoZWlnaHQ6IHRoaXMuZm9vdGVyU2l6ZS55LFxyXG5cdFx0fTtcclxuXHJcblx0XHRpZiAodmlld1kgPiBtYXhZICYmIChzaXplQ2hhbmdlZCB8fCB0aGlzLm1vZGUgIT09ICdpbmxpbmUnKSkge1xyXG5cdFx0XHR0aGlzLm1vZGUgPSAnaW5saW5lJztcclxuXHRcdFx0bmV3U3RhdGUudG9wID0gMDtcclxuXHRcdFx0bmV3U3RhdGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cdFx0XHR0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcclxuXHRcdH0gZWxzZSBpZiAodmlld1kgPD0gbWF4WSAmJiAoc2l6ZUNoYW5nZWQgfHwgdGhpcy5tb2RlICE9PSAnZml4ZWQnKSkge1xyXG5cdFx0XHR0aGlzLm1vZGUgPSAnZml4ZWQnO1xyXG5cdFx0XHRuZXdTdGF0ZS50b3AgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSB0aGlzLmZvb3RlclNpemUueTtcclxuXHRcdFx0bmV3U3RhdGUucG9zaXRpb24gPSAnZml4ZWQnO1xyXG5cdFx0XHR0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHR2YXIgd3JhcHBlclN0eWxlID0ge1xyXG5cdFx0XHRoZWlnaHQ6IHRoaXMuc3RhdGUuaGVpZ2h0LFxyXG5cdFx0XHRtYXJnaW5Ub3A6IDYwLFxyXG5cdFx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJyxcclxuXHRcdH07XHJcblx0XHR2YXIgZm9vdGVyUHJvcHMgPSBibGFja2xpc3QodGhpcy5wcm9wcywgJ2NoaWxkcmVuJywgJ3N0eWxlJyk7XHJcblx0XHR2YXIgZm9vdGVyU3R5bGUgPSBhc3NpZ24oe30sIHRoaXMucHJvcHMuc3R5bGUsIHtcclxuXHRcdFx0cG9zaXRpb246IHRoaXMuc3RhdGUucG9zaXRpb24sXHJcblx0XHRcdHRvcDogdGhpcy5zdGF0ZS50b3AsXHJcblx0XHRcdHdpZHRoOiB0aGlzLnN0YXRlLndpZHRoLFxyXG5cdFx0XHRoZWlnaHQ6IHRoaXMuc3RhdGUuaGVpZ2h0LFxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IHJlZj1cIndyYXBwZXJcIiBzdHlsZT17d3JhcHBlclN0eWxlfT5cclxuXHRcdFx0XHQ8ZGl2IHJlZj1cImZvb3RlclwiIHN0eWxlPXtmb290ZXJTdHlsZX0gey4uLmZvb3RlclByb3BzfT57dGhpcy5wcm9wcy5jaGlsZHJlbn08L2Rpdj5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGb290ZXJCYXI7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBldmFsRGVwZW5kc09uIGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL2ZpZWxkcy91dGlscy9ldmFsRGVwZW5kc09uJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnRm9ybUhlYWRpbmcnLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0b3B0aW9uczogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRpZiAoIWV2YWxEZXBlbmRzT24odGhpcy5wcm9wcy5vcHRpb25zLmRlcGVuZHNPbiwgdGhpcy5wcm9wcy5vcHRpb25zLnZhbHVlcykpIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gPGgzIGNsYXNzTmFtZT1cImZvcm0taGVhZGluZ1wiPnt0aGlzLnByb3BzLmNvbnRlbnR9PC9oMz47XHJcblx0fSxcclxufSk7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5pbXBvcnQgeyBBbGVydCwgQmxhbmtTdGF0ZSwgQ2VudGVyLCBTcGlubmVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vZWxlbWVudGFsJztcclxuXHJcbmltcG9ydCBEcmFnRHJvcCBmcm9tICcuL1JlbGF0ZWRJdGVtc0xpc3REcmFnRHJvcCc7XHJcbmltcG9ydCBMaXN0Um93IGZyb20gJy4vUmVsYXRlZEl0ZW1zTGlzdFJvdyc7XHJcblxyXG5pbXBvcnQgeyBsb2FkUmVsYXRpb25zaGlwSXRlbURhdGEgfSBmcm9tICcuLi8uLi9hY3Rpb25zJztcclxuaW1wb3J0IHsgVEFCTEVfQ09OVFJPTF9DT0xVTU5fV0lEVEggfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25zdGFudHMnO1xyXG5cclxuY29uc3QgUmVsYXRlZEl0ZW1zTGlzdCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGRpc3BhdGNoOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdFx0ZHJhZ05ld1NvcnRPcmRlcjogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcclxuXHRcdGl0ZW1zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXHJcblx0XHRsaXN0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcblx0XHRyZWZMaXN0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcblx0XHRyZWxhdGVkSXRlbUlkOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcblx0XHRyZWxhdGlvbnNoaXA6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuXHR9LFxyXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRjb2x1bW5zOiB0aGlzLmdldENvbHVtbnMoKSxcclxuXHRcdFx0ZXJyOiBudWxsLFxyXG5cdFx0XHRpdGVtczogbnVsbCxcclxuXHRcdH07XHJcblx0fSxcclxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XHJcblx0XHR0aGlzLl9faXNNb3VudGVkID0gdHJ1ZTtcclxuXHRcdHRoaXMubG9hZEl0ZW1zKCk7XHJcblx0fSxcclxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XHJcblx0XHR0aGlzLl9faXNNb3VudGVkID0gZmFsc2U7XHJcblx0fSxcclxuXHRpc1NvcnRhYmxlICgpIHtcclxuXHRcdC8vIENoZWNrIGlmIHRoZSByZWxhdGVkIGl0ZW1zIHNob3VsZCBiZSBzb3J0YWJsZS4gVGhlIHJlZmVyZW5jZWQgbGlzdCBoYXMgdG9cclxuXHRcdC8vICAgYmUgc29ydGFibGUgYW5kIGl0IGhhcyB0byBzZXQgdGhlIGN1cnJlbnQgbGlzdCBhcyBpdCdzIHNvcnRDb250ZXh0LlxyXG5cdFx0Y29uc3QgeyByZWZMaXN0LCBsaXN0LCByZWxhdGlvbnNoaXAgfSA9IHRoaXMucHJvcHM7XHJcblx0XHRjb25zdCBzb3J0Q29udGV4dCA9IHJlZkxpc3Quc29ydENvbnRleHQ7XHJcblx0XHRpZiAocmVmTGlzdC5zb3J0YWJsZSAmJiBzb3J0Q29udGV4dCkge1xyXG5cdFx0XHRjb25zdCBwYXJ0cyA9IHNvcnRDb250ZXh0LnNwbGl0KCc6Jyk7XHJcblx0XHRcdGlmIChwYXJ0c1swXSA9PT0gbGlzdC5rZXkgJiYgcGFydHNbMV0gPT09IHJlbGF0aW9uc2hpcC5wYXRoKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9LFxyXG5cdGdldENvbHVtbnMgKCkge1xyXG5cdFx0Y29uc3QgeyByZWxhdGlvbnNoaXAsIHJlZkxpc3QgfSA9IHRoaXMucHJvcHM7XHJcblx0XHRjb25zdCBjb2x1bW5zID0gcmVmTGlzdC5leHBhbmRDb2x1bW5zKHJlZkxpc3QuZGVmYXVsdENvbHVtbnMpO1xyXG5cdFx0cmV0dXJuIGNvbHVtbnMuZmlsdGVyKGkgPT4gaS5wYXRoICE9PSByZWxhdGlvbnNoaXAucmVmUGF0aCk7XHJcblx0fSxcclxuXHRsb2FkSXRlbXMgKCkge1xyXG5cdFx0Y29uc3QgeyByZWZMaXN0LCByZWxhdGVkSXRlbUlkLCByZWxhdGlvbnNoaXAgfSA9IHRoaXMucHJvcHM7XHJcblx0XHRjb25zdCB7IGNvbHVtbnMgfSA9IHRoaXMuc3RhdGU7XHJcblx0XHQvLyBUT0RPOiBNb3ZlIGVycm9yIHRvIHJlZHV4IHN0b3JlXHJcblx0XHRpZiAoIXJlZkxpc3QuZmllbGRzW3JlbGF0aW9uc2hpcC5yZWZQYXRoXSkge1xyXG5cdFx0XHRjb25zdCBlcnIgPSAoXHJcblx0XHRcdFx0PEFsZXJ0IGNvbG9yPVwiZGFuZ2VyXCI+XHJcblx0XHRcdFx0XHQ8c3Ryb25nPkVycm9yOjwvc3Ryb25nPiBSZWxhdGVkIExpc3QgPHN0cm9uZz57cmVmTGlzdC5sYWJlbH08L3N0cm9uZz4gaGFzIG5vIGZpZWxkIDxzdHJvbmc+e3JlbGF0aW9uc2hpcC5yZWZQYXRofTwvc3Ryb25nPlxyXG5cdFx0XHRcdDwvQWxlcnQ+XHJcblx0XHRcdCk7XHJcblx0XHRcdHJldHVybiB0aGlzLnNldFN0YXRlKHsgZXJyIH0pO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChsb2FkUmVsYXRpb25zaGlwSXRlbURhdGEoeyBjb2x1bW5zLCByZWZMaXN0LCByZWxhdGVkSXRlbUlkLCByZWxhdGlvbnNoaXAgfSkpO1xyXG5cdH0sXHJcblx0cmVuZGVySXRlbXMgKCkge1xyXG5cdFx0Y29uc3QgdGFibGVCb2R5ID0gKHRoaXMuaXNTb3J0YWJsZSgpKSA/IChcclxuXHRcdFx0PERyYWdEcm9wXHJcblx0XHRcdFx0Y29sdW1ucz17dGhpcy5zdGF0ZS5jb2x1bW5zfVxyXG5cdFx0XHRcdGl0ZW1zPXt0aGlzLnByb3BzLml0ZW1zfVxyXG5cdFx0XHRcdHsuLi50aGlzLnByb3BzfVxyXG5cdFx0XHQvPlxyXG5cdFx0KSA6IChcclxuXHRcdFx0PHRib2R5PlxyXG5cdFx0XHRcdHt0aGlzLnByb3BzLml0ZW1zLnJlc3VsdHMubWFwKChpdGVtKSA9PiB7XHJcblx0XHRcdFx0XHRyZXR1cm4gKDxMaXN0Um93XHJcblx0XHRcdFx0XHRcdGtleT17aXRlbS5pZH1cclxuXHRcdFx0XHRcdFx0Y29sdW1ucz17dGhpcy5zdGF0ZS5jb2x1bW5zfVxyXG5cdFx0XHRcdFx0XHRpdGVtPXtpdGVtfVxyXG5cdFx0XHRcdFx0XHRyZWZMaXN0PXt0aGlzLnByb3BzLnJlZkxpc3R9XHJcblx0XHRcdFx0XHQvPik7XHJcblx0XHRcdFx0fSl9XHJcblx0XHRcdDwvdGJvZHk+XHJcblx0XHQpO1xyXG5cdFx0cmV0dXJuIHRoaXMucHJvcHMuaXRlbXMucmVzdWx0cy5sZW5ndGggPyAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiSXRlbUxpc3Qtd3JhcHBlclwiPlxyXG5cdFx0XHRcdDx0YWJsZSBjZWxsUGFkZGluZz1cIjBcIiBjZWxsU3BhY2luZz1cIjBcIiBjbGFzc05hbWU9XCJUYWJsZSBJdGVtTGlzdFwiPlxyXG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyVGFibGVDb2xzKCl9XHJcblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJUYWJsZUhlYWRlcnMoKX1cclxuXHRcdFx0XHRcdHt0YWJsZUJvZHl9XHJcblx0XHRcdFx0PC90YWJsZT5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpIDogKFxyXG5cdFx0XHQ8QmxhbmtTdGF0ZVxyXG5cdFx0XHRcdGhlYWRpbmc9e2BObyByZWxhdGVkICR7dGhpcy5wcm9wcy5yZWZMaXN0LnBsdXJhbC50b0xvd2VyQ2FzZSgpfS4uLmB9XHJcblx0XHRcdFx0c3R5bGU9e3sgbWFyZ2luQm90dG9tOiAnM2VtJyB9fVxyXG5cdFx0XHQvPlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdHJlbmRlclRhYmxlQ29scyAoKSB7XHJcblx0XHRjb25zdCBjb2xzID0gdGhpcy5zdGF0ZS5jb2x1bW5zLm1hcCgoY29sKSA9PiA8Y29sIHdpZHRoPXtjb2wud2lkdGh9IGtleT17Y29sLnBhdGh9IC8+KTtcclxuXHRcdHJldHVybiA8Y29sZ3JvdXA+e2NvbHN9PC9jb2xncm91cD47XHJcblx0fSxcclxuXHRyZW5kZXJUYWJsZUhlYWRlcnMgKCkge1xyXG5cdFx0Y29uc3QgY2VsbHMgPSB0aGlzLnN0YXRlLmNvbHVtbnMubWFwKChjb2wpID0+IHtcclxuXHRcdFx0cmV0dXJuIDx0aCBrZXk9e2NvbC5wYXRofT57Y29sLmxhYmVsfTwvdGg+O1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gYWRkIHNvcnQgY29sIHdoZW4gYXZhaWxhYmxlXHJcblx0XHRpZiAodGhpcy5pc1NvcnRhYmxlKCkpIHtcclxuXHRcdFx0Y2VsbHMudW5zaGlmdChcclxuXHRcdFx0XHQ8dGggd2lkdGg9e1RBQkxFX0NPTlRST0xfQ09MVU1OX1dJRFRIfSBrZXk9XCJzb3J0YWJsZVwiIC8+XHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIDx0aGVhZD48dHI+e2NlbGxzfTwvdHI+PC90aGVhZD47XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0aWYgKHRoaXMuc3RhdGUuZXJyKSB7XHJcblx0XHRcdHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIlJlbGF0aW9uc2hpcFwiPnt0aGlzLnN0YXRlLmVycn08L2Rpdj47XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgbGlzdEhyZWYgPSBgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7dGhpcy5wcm9wcy5yZWZMaXN0LnBhdGh9YDtcclxuXHRcdGNvbnN0IGxvYWRpbmdFbGVtZW50ID0gKFxyXG5cdFx0XHQ8Q2VudGVyIGhlaWdodD17MTAwfT5cclxuXHRcdFx0XHQ8U3Bpbm5lciAvPlxyXG5cdFx0XHQ8L0NlbnRlcj5cclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJSZWxhdGlvbnNoaXBcIj5cclxuXHRcdFx0XHQ8aDMgY2xhc3NOYW1lPVwiUmVsYXRpb25zaGlwX19saW5rXCI+PExpbmsgdG89e2xpc3RIcmVmfT57dGhpcy5wcm9wcy5yZWZMaXN0LmxhYmVsfTwvTGluaz48L2gzPlxyXG5cdFx0XHRcdHt0aGlzLnByb3BzLml0ZW1zID8gdGhpcy5yZW5kZXJJdGVtcygpIDogbG9hZGluZ0VsZW1lbnR9XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUmVsYXRlZEl0ZW1zTGlzdDtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBEcmFnRHJvcENvbnRleHQgfSBmcm9tICdyZWFjdC1kbmQnO1xyXG5pbXBvcnQgSFRNTDVCYWNrZW5kIGZyb20gJ3JlYWN0LWRuZC1odG1sNS1iYWNrZW5kJztcclxuaW1wb3J0IHsgU29ydGFibGUgfSBmcm9tICcuL1JlbGF0ZWRJdGVtc0xpc3RSb3cnO1xyXG5cclxuY2xhc3MgUmVsYXRlZEl0ZW1zTGlzdERyYWdEcm9wIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgeyBpdGVtcyB9ID0gdGhpcy5wcm9wcztcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDx0Ym9keT5cclxuXHRcdFx0XHR7aXRlbXMucmVzdWx0cy5tYXAoKGl0ZW0sIGkpID0+IHtcclxuXHRcdFx0XHRcdHJldHVybiAoPFNvcnRhYmxlXHJcblx0XHRcdFx0XHRcdGtleT17aXRlbS5pZH1cclxuXHRcdFx0XHRcdFx0aW5kZXg9e2l9XHJcblx0XHRcdFx0XHRcdGl0ZW09e2l0ZW19XHJcblx0XHRcdFx0XHRcdHsuLi50aGlzLnByb3BzfVxyXG5cdFx0XHRcdFx0Lz4pO1xyXG5cdFx0XHRcdH0pfVxyXG5cdFx0XHQ8L3Rib2R5PlxyXG5cdFx0KTtcclxuXHR9XHJcbn07XHJcblJlbGF0ZWRJdGVtc0xpc3REcmFnRHJvcC5wcm9wVHlwZXMgPSB7XHJcblx0Y29sdW1uczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXHJcblx0ZGlzcGF0Y2g6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcblx0ZHJhZ05ld1NvcnRPcmRlcjogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcclxuXHRpdGVtczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXHJcblx0bGlzdDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG5cdHJlZkxpc3Q6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuXHRyZWxhdGVkSXRlbUlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcblx0cmVsYXRpb25zaGlwOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IERyYWdEcm9wQ29udGV4dChIVE1MNUJhY2tlbmQpKFJlbGF0ZWRJdGVtc0xpc3REcmFnRHJvcCk7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRHJvcFRhcmdldCwgRHJhZ1NvdXJjZSB9IGZyb20gJ3JlYWN0LWRuZCc7XHJcblxyXG5pbXBvcnQgeyBDb2x1bW5zIH0gZnJvbSAnRmllbGRUeXBlcyc7XHJcblxyXG5pbXBvcnQge1xyXG5cdHJlb3JkZXJJdGVtcyxcclxuXHRyZXNldEl0ZW1zLFxyXG5cdG1vdmVJdGVtLFxyXG59IGZyb20gJy4uLy4uL2FjdGlvbnMnO1xyXG5cclxuaW1wb3J0IExpc3RDb250cm9sIGZyb20gJy4uLy4uLy4uL0xpc3QvY29tcG9uZW50cy9MaXN0Q29udHJvbCc7XHJcblxyXG5jbGFzcyBSZWxhdGVkSXRlbXNMaXN0Um93IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgeyBjb2x1bW5zLCBpdGVtLCBjb25uZWN0RHJhZ1NvdXJjZSwgY29ubmVjdERyb3BUYXJnZXQsIHJlZkxpc3QgfSA9IHRoaXMucHJvcHM7XHJcblx0XHRjb25zdCBjZWxscyA9IGNvbHVtbnMubWFwKChjb2wsIGkpID0+IHtcclxuXHRcdFx0Y29uc3QgQ29sdW1uVHlwZSA9IENvbHVtbnNbY29sLnR5cGVdIHx8IENvbHVtbnMuX191bnJlY29nbmlzZWRfXztcclxuXHRcdFx0Y29uc3QgbGlua1RvID0gIWkgPyBgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7cmVmTGlzdC5wYXRofS8ke2l0ZW0uaWR9YCA6IHVuZGVmaW5lZDtcclxuXHRcdFx0cmV0dXJuIDxDb2x1bW5UeXBlIGtleT17Y29sLnBhdGh9IGxpc3Q9e3JlZkxpc3R9IGNvbD17Y29sfSBkYXRhPXtpdGVtfSBsaW5rVG89e2xpbmtUb30gLz47XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBhZGQgc29ydGFibGUgaWNvbiB3aGVuIGFwcGxpY2FibGVcclxuXHRcdGlmIChjb25uZWN0RHJhZ1NvdXJjZSkge1xyXG5cdFx0XHRjZWxscy51bnNoaWZ0KDxMaXN0Q29udHJvbCBrZXk9XCJfc29ydFwiIHR5cGU9XCJzb3J0YWJsZVwiIGRyYWdTb3VyY2U9e2Nvbm5lY3REcmFnU291cmNlfSAvPik7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3Qgcm93ID0gKDx0ciBrZXk9eydpJyArIGl0ZW0uaWR9PntjZWxsc308L3RyPik7XHJcblxyXG5cdFx0aWYgKGNvbm5lY3REcm9wVGFyZ2V0KSB7XHJcblx0XHRcdHJldHVybiBjb25uZWN0RHJvcFRhcmdldChyb3cpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIHJvdztcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuUmVsYXRlZEl0ZW1zTGlzdFJvdy5wcm9wVHlwZXMgPSB7XHJcblx0Y29sdW1uczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXHJcblx0ZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcblx0ZHJhZ05ld1NvcnRPcmRlcjogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcclxuXHRpbmRleDogUHJvcFR5cGVzLm51bWJlcixcclxuXHRpdGVtOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcblx0cmVmTGlzdDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG5cdHJlbGF0ZWRJdGVtSWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuXHRyZWxhdGlvbnNoaXA6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuXHQvLyBJbmplY3RlZCBieSBSZWFjdCBEbkQ6XHJcblx0aXNEcmFnZ2luZzogUHJvcFR5cGVzLmJvb2wsICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9zb3J0LXByb3AtdHlwZXNcclxuXHRjb25uZWN0RHJhZ1NvdXJjZTogUHJvcFR5cGVzLmZ1bmMsICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L3NvcnQtcHJvcC10eXBlc1xyXG5cdGNvbm5lY3REcm9wVGFyZ2V0OiBQcm9wVHlwZXMuZnVuYywgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvc29ydC1wcm9wLXR5cGVzXHJcblx0Y29ubmVjdERyYWdQcmV2aWV3OiBQcm9wVHlwZXMuZnVuYywgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9zb3J0LXByb3AtdHlwZXNcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFJlbGF0ZWRJdGVtc0xpc3RSb3c7XHJcblxyXG4vLyBFeHBvc2UgU29ydGFibGVcclxuXHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRzIGRyYWcgc291cmNlLlxyXG4gKi9cclxuY29uc3QgZHJhZ0l0ZW0gPSB7XHJcblx0YmVnaW5EcmFnIChwcm9wcykge1xyXG5cdFx0Y29uc3Qgc2VuZCA9IHsgLi4ucHJvcHMgfTtcclxuXHRcdC8vIHByb3BzLmRpc3BhdGNoKHNldERyYWdCYXNlKHByb3BzLml0ZW0sIHByb3BzLmluZGV4KSk7XHJcblx0XHRyZXR1cm4geyAuLi5zZW5kIH07XHJcblx0fSxcclxuXHRlbmREcmFnIChwcm9wcywgbW9uaXRvciwgY29tcG9uZW50KSB7XHJcblx0XHQvLyBEcm9wcGVkIG91dHNpZGUgb2YgdGhlIGRyb3AgdGFyZ2V0LCByZXNldCByb3dzXHJcblx0XHRpZiAoIW1vbml0b3IuZGlkRHJvcCgpKSB7XHJcblx0XHRcdHByb3BzLmRpc3BhdGNoKHJlc2V0SXRlbXMoKSk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBkcmFnZ2VkSXRlbSA9IHByb3BzLml0ZW07XHJcblx0XHRjb25zdCBwcmV2U29ydE9yZGVyID0gZHJhZ2dlZEl0ZW0uc29ydE9yZGVyO1xyXG5cdFx0Y29uc3QgbmV3U29ydE9yZGVyID0gcHJvcHMuZHJhZ05ld1NvcnRPcmRlcjtcclxuXHJcblx0XHQvLyBEcm9wcGluZyBvbiBzZWxmXHJcblx0XHRpZiAocHJldlNvcnRPcmRlciA9PT0gbmV3U29ydE9yZGVyKSB7XHJcblx0XHRcdHByb3BzLmRpc3BhdGNoKHJlc2V0SXRlbXMoKSk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBkcm9wcGVkIG9uIGEgdGFyZ2V0XHJcblx0XHRjb25zdCB7IGNvbHVtbnMsIHJlZkxpc3QsIHJlbGF0aW9uc2hpcCwgcmVsYXRlZEl0ZW1JZCwgaXRlbSB9ID0gcHJvcHM7XHJcblx0XHRwcm9wcy5kaXNwYXRjaChyZW9yZGVySXRlbXMoeyBjb2x1bW5zLCByZWZMaXN0LCByZWxhdGlvbnNoaXAsIHJlbGF0ZWRJdGVtSWQsIGl0ZW0sIHByZXZTb3J0T3JkZXIsIG5ld1NvcnRPcmRlciB9KSk7XHJcblx0fSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRzIGRyYWcgdGFyZ2V0LlxyXG4gKi9cclxuY29uc3QgZHJvcEl0ZW0gPSB7XHJcblx0ZHJvcCAocHJvcHMsIG1vbml0b3IsIGNvbXBvbmVudCkge1xyXG5cdFx0cmV0dXJuIHsgLi4ucHJvcHMgfTtcclxuXHR9LFxyXG5cdGhvdmVyIChwcm9wcywgbW9uaXRvciwgY29tcG9uZW50KSB7XHJcblx0XHQvLyByZXNldCByb3cgYWxlcnRzXHJcblx0XHQvLyBpZiAocHJvcHMucm93QWxlcnQuc3VjY2VzcyB8fCBwcm9wcy5yb3dBbGVydC5mYWlsKSB7XHJcblx0XHRcdC8vIHByb3BzLmRpc3BhdGNoKHNldFJvd0FsZXJ0KHtcclxuXHRcdFx0Ly8gXHRyZXNldDogdHJ1ZSxcclxuXHRcdFx0Ly8gfSkpO1xyXG5cdFx0Ly8gfVxyXG5cclxuXHRcdGNvbnN0IGRyYWdnZWQgPSBtb25pdG9yLmdldEl0ZW0oKS5pbmRleDtcclxuXHRcdGNvbnN0IG92ZXIgPSBwcm9wcy5pbmRleDtcclxuXHJcblx0XHQvLyBzZWxmXHJcblx0XHRpZiAoZHJhZ2dlZCA9PT0gb3Zlcikge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2luY2UgdGhlIGl0ZW1zIGFyZSBtb3ZlZCBvbiBob3Zlciwgd2UgbmVlZCB0byBzdG9yZSB0aGUgbmV3IHNvcnQgb3JkZXIgZnJvbSB0aGUgZHJhZ2dlZCBvdmVyIGl0ZW0gc28gd2UgY2FuIHVzZSBpdCB0byByZW9yZGVyIHdoZW4gdGhlIGl0ZW0gaXMgZHJvcHBlZC5cclxuXHRcdHByb3BzLmRpc3BhdGNoKG1vdmVJdGVtKHtcclxuXHRcdFx0cHJldkluZGV4OiBkcmFnZ2VkLFxyXG5cdFx0XHRuZXdJbmRleDogb3ZlcixcclxuXHRcdFx0cmVsYXRpb25zaGlwUGF0aDogcHJvcHMucmVsYXRpb25zaGlwLnBhdGgsXHJcblx0XHRcdG5ld1NvcnRPcmRlcjogcHJvcHMuaXRlbS5zb3J0T3JkZXIsXHJcblx0XHR9KSk7XHJcblx0XHRtb25pdG9yLmdldEl0ZW0oKS5pbmRleCA9IG92ZXI7XHJcblx0fSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTcGVjaWZpZXMgdGhlIHByb3BzIHRvIGluamVjdCBpbnRvIHlvdXIgY29tcG9uZW50LlxyXG4gKi9cclxuZnVuY3Rpb24gZHJhZ1Byb3BzIChjb25uZWN0LCBtb25pdG9yKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdGNvbm5lY3REcmFnU291cmNlOiBjb25uZWN0LmRyYWdTb3VyY2UoKSxcclxuXHRcdGlzRHJhZ2dpbmc6IG1vbml0b3IuaXNEcmFnZ2luZygpLFxyXG5cdFx0Y29ubmVjdERyYWdQcmV2aWV3OiBjb25uZWN0LmRyYWdQcmV2aWV3KCksXHJcblx0fTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJvcFByb3BzIChjb25uZWN0KSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdGNvbm5lY3REcm9wVGFyZ2V0OiBjb25uZWN0LmRyb3BUYXJnZXQoKSxcclxuXHR9O1xyXG59O1xyXG5cclxuLy8gZXhwb3J0cy5Tb3J0YWJsZSA9IFJlbGF0ZWRJdGVtc0xpc3RSb3c7XHJcbmV4cG9ydHMuU29ydGFibGUgPSBEcmFnU291cmNlKCdpdGVtJywgZHJhZ0l0ZW0sIGRyYWdQcm9wcykoRHJvcFRhcmdldCgnaXRlbScsIGRyb3BJdGVtLCBkcm9wUHJvcHMpKFJlbGF0ZWRJdGVtc0xpc3RSb3cpKTtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcblxyXG5mdW5jdGlvbiBUb29sYmFyU2VjdGlvbiAoeyBjbGFzc05hbWUsIGxlZnQsIHJpZ2h0LCAuLi5wcm9wcyB9KSB7XHJcblx0cHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lcygnVG9vbGJhcl9fc2VjdGlvbicsIHtcclxuXHRcdCdUb29sYmFyX19zZWN0aW9uLS1sZWZ0JzogbGVmdCxcclxuXHRcdCdUb29sYmFyX19zZWN0aW9uLS1yaWdodCc6IHJpZ2h0LFxyXG5cdH0sIGNsYXNzTmFtZSk7XHJcblxyXG5cdHJldHVybiA8ZGl2IHsuLi5wcm9wc30gLz47XHJcbn07XHJcblxyXG5Ub29sYmFyU2VjdGlvbi5wcm9wVHlwZXMgPSB7XHJcblx0bGVmdDogUHJvcFR5cGVzLmJvb2wsXHJcblx0cmlnaHQ6IFByb3BUeXBlcy5ib29sLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBUb29sYmFyU2VjdGlvbjtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmNvbnN0IFRvb2xiYXIgPSAocHJvcHMpID0+IDxkaXYgey4uLnByb3BzfSBjbGFzc05hbWU9XCJUb29sYmFyXCIgLz47XHJcblxyXG5Ub29sYmFyLmRpc3BsYXlOYW1lID0gJ1Rvb2xiYXInO1xyXG5Ub29sYmFyLnByb3BUeXBlcyA9IHtcclxuXHRjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVG9vbGJhcjtcclxuIiwiZXhwb3J0IGNvbnN0IFNFTEVDVF9JVEVNID0gJ2FwcC9JdGVtL1NFTEVDVF9JVEVNJztcclxuZXhwb3J0IGNvbnN0IExPQURfREFUQSA9ICdhcHAvSXRlbS9MT0FEX0RBVEEnO1xyXG5leHBvcnQgY29uc3QgREFUQV9MT0FESU5HX1NVQ0NFU1MgPSAnYXBwL0l0ZW0vREFUQV9MT0FESU5HX1NVQ0NFU1MnO1xyXG5leHBvcnQgY29uc3QgREFUQV9MT0FESU5HX0VSUk9SID0gJ2FwcC9JdGVtL0RBVEFfTE9BRElOR19FUlJPUic7XHJcbmV4cG9ydCBjb25zdCBEUkFHX01PVkVfSVRFTSA9ICdhcHAvSXRlbS9EUkFHX01PVkVfSVRFTSc7XHJcbmV4cG9ydCBjb25zdCBEUkFHX1JFU0VUX0lURU1TID0gJ2FwcC9JdGVtL0RSQUdfUkVTRVRfSVRFTVMnO1xyXG5leHBvcnQgY29uc3QgTE9BRF9SRUxBVElPTlNISVBfREFUQSA9ICdhcHAvSXRlbS9MT0FEX1JFTEFUSU9OU0hJUF9EQVRBJztcclxuIiwiLyoqXHJcbiAqIEl0ZW0gVmlld1xyXG4gKlxyXG4gKiBUaGlzIGlzIHRoZSBpdGVtIHZpZXcsIGl0IGlzIHJlbmRlcmVkIHdoZW4gdXNlcnMgdmlzaXQgYSBwYWdlIG9mIGEgc3BlY2lmaWNcclxuICogaXRlbS4gVGhpcyBtYWlubHkgcmVuZGVycyB0aGUgZm9ybSB0byBlZGl0IHRoZSBpdGVtIGNvbnRlbnQgaW4uXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQ2VudGVyLCBDb250YWluZXIsIFNwaW5uZXIgfSBmcm9tICcuLi8uLi9lbGVtZW50YWwnO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuXHJcbmltcG9ydCB7IGxpc3RzQnlLZXkgfSBmcm9tICcuLi8uLi8uLi91dGlscy9saXN0cyc7XHJcbmltcG9ydCBDcmVhdGVGb3JtIGZyb20gJy4uLy4uL3NoYXJlZC9DcmVhdGVGb3JtJztcclxuaW1wb3J0IEFsZXJ0IGZyb20gJy4uLy4uL2VsZW1lbnRhbC9BbGVydCc7XHJcbmltcG9ydCBFZGl0Rm9ybSBmcm9tICcuL2NvbXBvbmVudHMvRWRpdEZvcm0nO1xyXG5pbXBvcnQgRWRpdEZvcm1IZWFkZXIgZnJvbSAnLi9jb21wb25lbnRzL0VkaXRGb3JtSGVhZGVyJztcclxuaW1wb3J0IFJlbGF0ZWRJdGVtc0xpc3QgZnJvbSAnLi9jb21wb25lbnRzL1JlbGF0ZWRJdGVtc0xpc3QvUmVsYXRlZEl0ZW1zTGlzdCc7XHJcbi8vIGltcG9ydCBGbGFzaE1lc3NhZ2VzIGZyb20gJy4uLy4uL3NoYXJlZC9GbGFzaE1lc3NhZ2VzJztcclxuXHJcbmltcG9ydCBJZnJhbWVDb250ZW50IGZyb20gJy4uLy4uL3NoYXJlZC9JZnJhbWVDb250ZW50JztcclxuXHJcbmltcG9ydCB7XHJcblx0c2VsZWN0SXRlbSxcclxuXHRsb2FkSXRlbURhdGEsXHJcbn0gZnJvbSAnLi9hY3Rpb25zJztcclxuXHJcbmltcG9ydCB7XHJcblx0c2VsZWN0TGlzdCxcclxufSBmcm9tICcuLi9MaXN0L2FjdGlvbnMnO1xyXG5cclxudmFyIEl0ZW1WaWV3ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnSXRlbVZpZXcnLFxyXG5cdGNvbnRleHRUeXBlczoge1xyXG5cdFx0cm91dGVyOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcblx0fSxcclxuXHRnZXRJbml0aWFsU3RhdGUgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Y3JlYXRlSXNPcGVuOiBmYWxzZSxcclxuXHRcdFx0c2hvd0lmcmFtZTogZmFsc2VcclxuXHRcdH07XHJcblx0fSxcclxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XHJcblx0XHQvLyBXaGVuIHdlIGRpcmVjdGx5IG5hdmlnYXRlIHRvIGFuIGl0ZW0gd2l0aG91dCBjb21pbmcgZnJvbSBhbm90aGVyIGNsaWVudFxyXG5cdFx0Ly8gc2lkZSByb3V0ZWQgcGFnZSBiZWZvcmUsIHdlIG5lZWQgdG8gc2VsZWN0IHRoZSBsaXN0IGJlZm9yZSBpbml0aWFsaXppbmcgdGhlIGl0ZW1cclxuXHRcdC8vIFdlIGFsc28gbmVlZCB0byB1cGRhdGUgd2hlbiB0aGUgbGlzdCBpZCBoYXMgY2hhbmdlZFxyXG5cdFx0aWYgKCF0aGlzLnByb3BzLmN1cnJlbnRMaXN0IHx8IHRoaXMucHJvcHMuY3VycmVudExpc3QuaWQgIT09IHRoaXMucHJvcHMucGFyYW1zLmxpc3RJZCkge1xyXG5cdFx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKHNlbGVjdExpc3QodGhpcy5wcm9wcy5wYXJhbXMubGlzdElkKSk7XHJcblx0XHR9XHJcblx0XHR0aGlzLmluaXRpYWxpemVJdGVtKHRoaXMucHJvcHMucGFyYW1zLml0ZW1JZCk7XHJcblxyXG5cdH0sXHJcblx0Y29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XHJcblx0XHQvLyBXZSd2ZSBvcGVuZWQgYSBuZXcgaXRlbSBmcm9tIHRoZSBjbGllbnQgc2lkZSByb3V0aW5nLCBzbyBpbml0aWFsaXplXHJcblx0XHQvLyBhZ2FpbiB3aXRoIHRoZSBuZXcgaXRlbSBpZFxyXG5cdFx0aWYgKG5leHRQcm9wcy5wYXJhbXMuaXRlbUlkICE9PSB0aGlzLnByb3BzLnBhcmFtcy5pdGVtSWQpIHtcclxuXHRcdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChzZWxlY3RMaXN0KG5leHRQcm9wcy5wYXJhbXMubGlzdElkKSk7XHJcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZUl0ZW0obmV4dFByb3BzLnBhcmFtcy5pdGVtSWQpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0Ly8gSW5pdGlhbGl6ZSBhbiBpdGVtXHJcblx0aW5pdGlhbGl6ZUl0ZW0gKGl0ZW1JZCkge1xyXG5cdFx0Y29uc3QgbGlzdEl0ZW0gPSB0aGlzLnByb3BzLmxpc3RzLmRhdGFbdGhpcy5wcm9wcy5wYXJhbXMubGlzdElkXTtcclxuXHRcdGlmKGxpc3RJdGVtLmxpbmsuZWRpdCkge1xyXG5cdFx0XHRsZXQgZWRpdExpbmsgPSBsaXN0SXRlbS5saW5rLmVkaXQ7XHJcblx0XHRcdGVkaXRMaW5rID0gZWRpdExpbmsucmVwbGFjZSgnOmlkJywgaXRlbUlkKTtcclxuXHRcdFx0Y29uc3QgaWZyYW1lVVJMID0gYCR7S2V5c3RvbmUuZXh0ZXJuYWxIb3N0fSR7ZWRpdExpbmt9YDtcclxuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdFx0c2hvd0lmcmFtZTogdHJ1ZSxcclxuXHRcdFx0XHRpZnJhbWVVUkw6IGlmcmFtZVVSTFxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goc2VsZWN0SXRlbShpdGVtSWQpKTtcclxuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2gobG9hZEl0ZW1EYXRhKCkpO1xyXG5cdH0sXHJcblx0Ly8gQ2FsbGVkIHdoZW4gYSBuZXcgaXRlbSBpcyBjcmVhdGVkXHJcblx0b25DcmVhdGUgKGl0ZW0pIHtcclxuXHRcdC8vIEhpZGUgdGhlIGNyZWF0ZSBmb3JtXHJcblx0XHR0aGlzLnRvZ2dsZUNyZWF0ZU1vZGFsKGZhbHNlKTtcclxuXHRcdC8vIFJlZGlyZWN0IHRvIG5ld2x5IGNyZWF0ZWQgaXRlbSBwYXRoXHJcblx0XHRjb25zdCBsaXN0ID0gdGhpcy5wcm9wcy5jdXJyZW50TGlzdDtcclxuXHRcdHRoaXMuY29udGV4dC5yb3V0ZXIucHVzaChgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7bGlzdC5wYXRofS8ke2l0ZW0uaWR9YCk7XHJcblx0fSxcclxuXHJcblx0Y2FuY2VsSWZyYW1lICgpIHtcclxuXHRcdGNvbnN0IGxpc3QgPSB0aGlzLnByb3BzLmN1cnJlbnRMaXN0O1xyXG5cdFx0dGhpcy5jb250ZXh0LnJvdXRlci5wdXNoKGAke0tleXN0b25lLmFkbWluUGF0aH0vJHtsaXN0LnBhdGh9YCk7XHJcblx0fSxcclxuXHQvLyBPcGVuIGFuZCBjbG9zZSB0aGUgY3JlYXRlIG5ldyBpdGVtIG1vZGFsXHJcblx0dG9nZ2xlQ3JlYXRlTW9kYWwgKHZpc2libGUpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRjcmVhdGVJc09wZW46IHZpc2libGUsXHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdC8vIFJlbmRlciB0aGlzIGl0ZW1zIHJlbGF0aW9uc2hpcHNcclxuXHRyZW5kZXJSZWxhdGlvbnNoaXBzICgpIHtcclxuXHRcdGNvbnN0IHsgcmVsYXRpb25zaGlwcyB9ID0gdGhpcy5wcm9wcy5jdXJyZW50TGlzdDtcclxuXHRcdGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGlvbnNoaXBzKTtcclxuXHRcdGlmICgha2V5cy5sZW5ndGgpIHJldHVybjtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiUmVsYXRpb25zaGlwc1wiPlxyXG5cdFx0XHRcdDxDb250YWluZXI+XHJcblx0XHRcdFx0XHQ8aDI+UmVsYXRpb25zaGlwczwvaDI+XHJcblx0XHRcdFx0XHR7a2V5cy5tYXAoa2V5ID0+IHtcclxuXHRcdFx0XHRcdFx0Y29uc3QgcmVsYXRpb25zaGlwID0gcmVsYXRpb25zaGlwc1trZXldO1xyXG5cdFx0XHRcdFx0XHRjb25zdCByZWZMaXN0ID0gbGlzdHNCeUtleVtyZWxhdGlvbnNoaXAucmVmXTtcclxuXHRcdFx0XHRcdFx0Y29uc3QgeyBjdXJyZW50TGlzdCwgcGFyYW1zLCByZWxhdGlvbnNoaXBEYXRhLCBkcmFnIH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdFx0XHRcdDxSZWxhdGVkSXRlbXNMaXN0XHJcblx0XHRcdFx0XHRcdFx0XHRrZXk9e3JlbGF0aW9uc2hpcC5wYXRofVxyXG5cdFx0XHRcdFx0XHRcdFx0bGlzdD17Y3VycmVudExpc3R9XHJcblx0XHRcdFx0XHRcdFx0XHRyZWZMaXN0PXtyZWZMaXN0fVxyXG5cdFx0XHRcdFx0XHRcdFx0cmVsYXRlZEl0ZW1JZD17cGFyYW1zLml0ZW1JZH1cclxuXHRcdFx0XHRcdFx0XHRcdHJlbGF0aW9uc2hpcD17cmVsYXRpb25zaGlwfVxyXG5cdFx0XHRcdFx0XHRcdFx0aXRlbXM9e3JlbGF0aW9uc2hpcERhdGFbcmVsYXRpb25zaGlwLnBhdGhdfVxyXG5cdFx0XHRcdFx0XHRcdFx0ZHJhZ05ld1NvcnRPcmRlcj17ZHJhZy5uZXdTb3J0T3JkZXJ9XHJcblx0XHRcdFx0XHRcdFx0XHRkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cclxuXHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0fSl9XHJcblx0XHRcdFx0PC9Db250YWluZXI+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdC8vIEhhbmRsZSBlcnJvcnNcclxuXHRoYW5kbGVFcnJvciAoZXJyb3IpIHtcclxuXHRcdGNvbnN0IGRldGFpbCA9IGVycm9yLmRldGFpbDtcclxuXHRcdGlmIChkZXRhaWwpIHtcclxuXHRcdFx0Ly8gSXRlbSBub3QgZm91bmRcclxuXHRcdFx0aWYgKGRldGFpbC5uYW1lID09PSAnQ2FzdEVycm9yJ1xyXG5cdFx0XHRcdCYmIGRldGFpbC5wYXRoID09PSAnX2lkJykge1xyXG5cdFx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0XHQ8Q29udGFpbmVyPlxyXG5cdFx0XHRcdFx0XHQ8QWxlcnQgY29sb3I9XCJkYW5nZXJcIiBzdHlsZT17eyBtYXJnaW5Ub3A6ICcyZW0nIH19PlxyXG5cdFx0XHRcdFx0XHRcdE5vIGl0ZW0gbWF0Y2hpbmcgaWQgXCJ7dGhpcy5wcm9wcy5yb3V0ZVBhcmFtcy5pdGVtSWR9XCIuJm5ic3A7XHJcblx0XHRcdFx0XHRcdFx0PExpbmsgdG89e2Ake0tleXN0b25lLmFkbWluUGF0aH0vJHt0aGlzLnByb3BzLnJvdXRlUGFyYW1zLmxpc3RJZH1gfT5cclxuXHRcdFx0XHRcdFx0XHRcdEdvdCBiYWNrIHRvIHt0aGlzLnByb3BzLnJvdXRlUGFyYW1zLmxpc3RJZH0/XHJcblx0XHRcdFx0XHRcdFx0PC9MaW5rPlxyXG5cdFx0XHRcdFx0XHQ8L0FsZXJ0PlxyXG5cdFx0XHRcdFx0PC9Db250YWluZXI+XHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYgKGVycm9yLm1lc3NhZ2UpIHtcclxuXHRcdFx0Ly8gU2VydmVyIGRvd24gKyBwb3NzaWJseSBvdGhlciBlcnJvcnNcclxuXHRcdFx0aWYgKGVycm9yLm1lc3NhZ2UgPT09ICdJbnRlcm5hbCBYTUxIdHRwUmVxdWVzdCBFcnJvcicpIHtcclxuXHRcdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdFx0PENvbnRhaW5lcj5cclxuXHRcdFx0XHRcdFx0PEFsZXJ0IGNvbG9yPVwiZGFuZ2VyXCIgc3R5bGU9e3sgbWFyZ2luVG9wOiAnMmVtJyB9fT5cclxuXHRcdFx0XHRcdFx0XHRXZSBlbmNvdW50ZXJlZCBzb21lIG5ldHdvcmsgcHJvYmxlbXMsIHBsZWFzZSByZWZyZXNoLlxyXG5cdFx0XHRcdFx0XHQ8L0FsZXJ0PlxyXG5cdFx0XHRcdFx0PC9Db250YWluZXI+XHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PENvbnRhaW5lcj5cclxuXHRcdFx0XHQ8QWxlcnQgY29sb3I9XCJkYW5nZXJcIiBzdHlsZT17eyBtYXJnaW5Ub3A6ICcyZW0nIH19PlxyXG5cdFx0XHRcdFx0QW4gdW5rbm93biBlcnJvciBoYXMgb2N1cnJlZCwgcGxlYXNlIHJlZnJlc2guXHJcblx0XHRcdFx0PC9BbGVydD5cclxuXHRcdFx0PC9Db250YWluZXI+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdC8vIElmIHdlIGRvbid0IGhhdmUgYW55IGRhdGEgeWV0LCBzaG93IHRoZSBsb2FkaW5nIGluZGljYXRvclxyXG5cdFx0aWYgKCF0aGlzLnByb3BzLnJlYWR5KSB7XHJcblx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0PENlbnRlciBoZWlnaHQ9XCI1MHZoXCIgZGF0YS1zY3JlZW4taWQ9XCJpdGVtXCI+XHJcblx0XHRcdFx0XHQ8U3Bpbm5lciAvPlxyXG5cdFx0XHRcdDwvQ2VudGVyPlxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHtzaG93SWZyYW1lLCBpZnJhbWVVUkx9ID0gdGhpcy5zdGF0ZTtcclxuXHJcblx0XHQvLyBXaGVuIHdlIGhhdmUgdGhlIGRhdGEsIHJlbmRlciB0aGUgaXRlbSB2aWV3IHdpdGggaXRcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgZGF0YS1zY3JlZW4taWQ9XCJpdGVtXCIgY2xhc3NOYW1lPVwiZmxleC1jb2x1bW5cIj5cclxuXHRcdFx0XHR7KHRoaXMucHJvcHMuZXJyb3IpID8gdGhpcy5oYW5kbGVFcnJvcih0aGlzLnByb3BzLmVycm9yKSA6IChcclxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZmxleC1jb2x1bW5cIj5cclxuXHRcdFx0XHRcdFx0PENvbnRhaW5lciBjbGFzc05hbWU9e1wiZmxleC1jb2x1bW5cIn0+XHJcblx0XHRcdFx0XHRcdFx0PEVkaXRGb3JtSGVhZGVyXHJcblx0XHRcdFx0XHRcdFx0XHRsaXN0PXt0aGlzLnByb3BzLmN1cnJlbnRMaXN0fVxyXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YT17dGhpcy5wcm9wcy5kYXRhfVxyXG5cdFx0XHRcdFx0XHRcdFx0dG9nZ2xlQ3JlYXRlPXt0aGlzLnRvZ2dsZUNyZWF0ZU1vZGFsfVxyXG5cdFx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHRcdFx0PENyZWF0ZUZvcm1cclxuXHRcdFx0XHRcdFx0XHRcdGxpc3Q9e3RoaXMucHJvcHMuY3VycmVudExpc3R9XHJcblx0XHRcdFx0XHRcdFx0XHRpc09wZW49e3RoaXMuc3RhdGUuY3JlYXRlSXNPcGVufVxyXG5cdFx0XHRcdFx0XHRcdFx0b25DYW5jZWw9eygpID0+IHRoaXMudG9nZ2xlQ3JlYXRlTW9kYWwoZmFsc2UpfVxyXG5cdFx0XHRcdFx0XHRcdFx0b25DcmVhdGU9eyhpdGVtKSA9PiB0aGlzLm9uQ3JlYXRlKGl0ZW0pfVxyXG5cdFx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHRcdFx0e3Nob3dJZnJhbWUgJiYgaWZyYW1lVVJMID8gPElmcmFtZUNvbnRlbnQgc3JjPXtpZnJhbWVVUkx9IHNob3c9e3RydWV9IG9uQ2FuY2VsPXt0aGlzLmNhbmNlbElmcmFtZX0vPiA6XHJcblx0XHRcdFx0XHRcdFx0XHQ8RWRpdEZvcm1cclxuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdD17dGhpcy5wcm9wcy5jdXJyZW50TGlzdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YT17dGhpcy5wcm9wcy5kYXRhfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0cm91dGVyPXt0aGlzLmNvbnRleHQucm91dGVyfVxyXG5cdFx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHQ8L0NvbnRhaW5lcj5cclxuXHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyUmVsYXRpb25zaGlwcygpfVxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0KX1cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjb25uZWN0KChzdGF0ZSkgPT4gKHtcclxuXHRsaXN0czogc3RhdGUubGlzdHMsXHJcblx0ZGF0YTogc3RhdGUuaXRlbS5kYXRhLFxyXG5cdGxvYWRpbmc6IHN0YXRlLml0ZW0ubG9hZGluZyxcclxuXHRyZWFkeTogc3RhdGUuaXRlbS5yZWFkeSxcclxuXHRlcnJvcjogc3RhdGUuaXRlbS5lcnJvcixcclxuXHRjdXJyZW50TGlzdDogc3RhdGUubGlzdHMuY3VycmVudExpc3QsXHJcblx0cmVsYXRpb25zaGlwRGF0YTogc3RhdGUuaXRlbS5yZWxhdGlvbnNoaXBEYXRhLFxyXG5cdGRyYWc6IHN0YXRlLml0ZW0uZHJhZyxcclxufSkpKEl0ZW1WaWV3KTtcclxuIiwiLyoqXHJcbiAqIEl0ZW0gcmVkdWNlciwgaGFuZGxlcyB0aGUgaXRlbSBkYXRhIGFuZCBsb2FkaW5nXHJcbiAqL1xyXG5pbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xyXG5pbXBvcnQge1xyXG5cdFNFTEVDVF9JVEVNLFxyXG5cdExPQURfREFUQSxcclxuXHREQVRBX0xPQURJTkdfU1VDQ0VTUyxcclxuXHREQVRBX0xPQURJTkdfRVJST1IsXHJcblx0RFJBR19NT1ZFX0lURU0sXHJcblx0RFJBR19SRVNFVF9JVEVNUyxcclxuXHRMT0FEX1JFTEFUSU9OU0hJUF9EQVRBLFxyXG59IGZyb20gJy4vY29uc3RhbnRzJztcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuXHRkYXRhOiBudWxsLFxyXG5cdGlkOiBudWxsLFxyXG5cdGxvYWRpbmc6IGZhbHNlLFxyXG5cdHJlYWR5OiBmYWxzZSxcclxuXHRlcnJvcjogbnVsbCxcclxuXHRyZWxhdGlvbnNoaXBEYXRhOiB7fSxcclxuXHRkcmFnOiB7XHJcblx0XHRjbG9uZWRJdGVtczogZmFsc2UsXHJcblx0XHRuZXdTb3J0T3JkZXI6IG51bGwsXHJcblx0XHRyZWxhdGlvbnNoaXBQYXRoOiBmYWxzZSxcclxuXHR9LFxyXG59O1xyXG5cclxuZnVuY3Rpb24gaXRlbSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikge1xyXG5cdHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuXHRcdGNhc2UgU0VMRUNUX0lURU06XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0cmVhZHk6IGZhbHNlLFxyXG5cdFx0XHRcdGlkOiBhY3Rpb24uaWQsXHJcblx0XHRcdFx0ZGF0YTogbnVsbCxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIExPQURfREFUQTpcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRsb2FkaW5nOiB0cnVlLFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgREFUQV9MT0FESU5HX1NVQ0NFU1M6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0ZGF0YTogYWN0aW9uLmRhdGEsXHJcblx0XHRcdFx0bG9hZGluZzogZmFsc2UsXHJcblx0XHRcdFx0cmVhZHk6IHRydWUsXHJcblx0XHRcdFx0ZXJyb3I6IG51bGwsXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBEQVRBX0xPQURJTkdfRVJST1I6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0ZGF0YTogbnVsbCxcclxuXHRcdFx0XHRsb2FkaW5nOiBmYWxzZSxcclxuXHRcdFx0XHRyZWFkeTogdHJ1ZSxcclxuXHRcdFx0XHRlcnJvcjogYWN0aW9uLmVycm9yLFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgRFJBR19NT1ZFX0lURU06XHJcblx0XHRcdGNvbnN0IGN1cnJlbnRJdGVtcyA9IHN0YXRlLnJlbGF0aW9uc2hpcERhdGFbYWN0aW9uLnJlbGF0aW9uc2hpcFBhdGhdLnJlc3VsdHM7XHJcblx0XHRcdC8vIENhY2hlIGEgY29weSBvZiB0aGUgY3VycmVudCBpdGVtcyB0byByZXNldCB0aGUgaXRlbXMgd2hlbiBkaXNtaXNzaW5nIGEgZHJhZyBhbmQgZHJvcCBpZiBhIGNhY2hlZCBjb3B5IGRvZXNuJ3QgYWxyZWFkeSBleGlzdFxyXG5cdFx0XHRjb25zdCBjbG9uZWRJdGVtcyA9IHN0YXRlLmRyYWcuY2xvbmVkSXRlbXMgfHwgY3VycmVudEl0ZW1zO1xyXG5cdFx0XHRjb25zdCBpdGVtID0gY3VycmVudEl0ZW1zW2FjdGlvbi5wcmV2SW5kZXhdO1xyXG5cdFx0XHQvLyBSZW1vdmUgaXRlbSBhdCBwcmV2SW5kZXggZnJvbSBhcnJheSBhbmQgc2F2ZSB0aGF0IGFycmF5IGluXHJcblx0XHRcdC8vIGl0ZW1zV2l0aG91dEl0ZW1cclxuXHRcdFx0bGV0IGl0ZW1zV2l0aG91dEl0ZW0gPSBjdXJyZW50SXRlbXNcclxuXHRcdFx0XHQuc2xpY2UoMCwgYWN0aW9uLnByZXZJbmRleClcclxuXHRcdFx0XHQuY29uY2F0KFxyXG5cdFx0XHRcdFx0Y3VycmVudEl0ZW1zLnNsaWNlKFxyXG5cdFx0XHRcdFx0XHRhY3Rpb24ucHJldkluZGV4ICsgMSxcclxuXHRcdFx0XHRcdFx0Y3VycmVudEl0ZW1zLmxlbmd0aFxyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdC8vIEFkZCBpdGVtIGJhY2sgaW4gYXQgbmV3IGluZGV4XHJcblx0XHRcdGl0ZW1zV2l0aG91dEl0ZW0uc3BsaWNlKGFjdGlvbi5uZXdJbmRleCwgMCwgaXRlbSk7XHJcblx0XHRcdGNvbnN0IG5ld1JlbGF0aW9uc2hpcERhdGEgPSBhc3NpZ24oe30sIHN0YXRlLnJlbGF0aW9uc2hpcERhdGFbYWN0aW9uLnJlbGF0aW9uc2hpcFBhdGhdLCB7XHJcblx0XHRcdFx0cmVzdWx0czogaXRlbXNXaXRob3V0SXRlbSxcclxuXHRcdFx0fSk7XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0ZHJhZzoge1xyXG5cdFx0XHRcdFx0bmV3U29ydE9yZGVyOiBhY3Rpb24ubmV3U29ydE9yZGVyLFxyXG5cdFx0XHRcdFx0Y2xvbmVkSXRlbXM6IGNsb25lZEl0ZW1zLFxyXG5cdFx0XHRcdFx0cmVsYXRpb25zaGlwUGF0aDogYWN0aW9uLnJlbGF0aW9uc2hpcFBhdGgsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRyZWxhdGlvbnNoaXBEYXRhOiB7XHJcblx0XHRcdFx0XHQuLi5zdGF0ZS5yZWxhdGlvbnNoaXBEYXRhLFxyXG5cdFx0XHRcdFx0W2FjdGlvbi5yZWxhdGlvbnNoaXBQYXRoXTogbmV3UmVsYXRpb25zaGlwRGF0YSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgRFJBR19SRVNFVF9JVEVNUzpcclxuXHRcdFx0Y29uc3Qgb3JpZ2luYWxSZWxhdGlvbnNoaXBEYXRhID0gYXNzaWduKHt9LCBzdGF0ZS5yZWxhdGlvbnNoaXBEYXRhW3N0YXRlLmRyYWcucmVsYXRpb25zaGlwUGF0aF0sIHtcclxuXHRcdFx0XHRyZXN1bHRzOiBzdGF0ZS5kcmFnLmNsb25lZEl0ZW1zLFxyXG5cdFx0XHR9KTtcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRkcmFnOiB7XHJcblx0XHRcdFx0XHRuZXdTb3J0T3JkZXI6IG51bGwsXHJcblx0XHRcdFx0XHRjbG9uZWRJdGVtczogZmFsc2UsXHJcblx0XHRcdFx0XHRyZWxhdGlvbnNoaXBQYXRoOiBmYWxzZSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHJlbGF0aW9uc2hpcERhdGE6IHtcclxuXHRcdFx0XHRcdC4uLnN0YXRlLnJlbGF0aW9uc2hpcERhdGEsXHJcblx0XHRcdFx0XHRbc3RhdGUuZHJhZy5yZWxhdGlvbnNoaXBQYXRoXTogb3JpZ2luYWxSZWxhdGlvbnNoaXBEYXRhLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBMT0FEX1JFTEFUSU9OU0hJUF9EQVRBOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdC8vIFJlc2V0IGRyYWcgYW5kIGRyb3Agd2hlbiByZWxhdGlvbnNoaXAgZGF0YSBpcyBsb2FkZWRcclxuXHRcdFx0XHRkcmFnOiB7XHJcblx0XHRcdFx0XHRuZXdTb3J0T3JkZXI6IG51bGwsXHJcblx0XHRcdFx0XHRjbG9uZWRJdGVtczogZmFsc2UsXHJcblx0XHRcdFx0XHRyZWxhdGlvbnNoaXBQYXRoOiBmYWxzZSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHJlbGF0aW9uc2hpcERhdGE6IHtcclxuXHRcdFx0XHRcdC4uLnN0YXRlLnJlbGF0aW9uc2hpcERhdGEsXHJcblx0XHRcdFx0XHRbYWN0aW9uLnJlbGF0aW9uc2hpcFBhdGhdOiBhY3Rpb24uZGF0YSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9KTtcclxuXHRcdGRlZmF1bHQ6XHJcblx0XHRcdHJldHVybiBzdGF0ZTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGl0ZW07XHJcbiIsImltcG9ydCB7XHJcblx0Q0xFQVJfRklMVEVSLFxyXG5cdENMRUFSX0FMTF9GSUxURVJTLFxyXG5cdENMRUFSX0NBQ0hFRF9RVUVSWSxcclxuXHRTRVRfQUNUSVZFX1NFQVJDSCxcclxuXHRTRUxFQ1RfQUNUSVZFX1NPUlQsXHJcblx0U0VMRUNUX0FDVElWRV9DT0xVTU5TLFxyXG5cdFNFVF9BQ1RJVkVfTElTVCxcclxuXHRTRUxFQ1RfRklMVEVSLFxyXG59IGZyb20gJy4uL2NvbnN0YW50cyc7XHJcblxyXG5cclxuLyoqXHJcbiAqIEFjdGl2ZSBhY3Rpb25zXHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEFjdGl2ZVNlYXJjaCAoc2VhcmNoU3RyaW5nKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IFNFVF9BQ1RJVkVfU0VBUkNILFxyXG5cdFx0c2VhcmNoU3RyaW5nLFxyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRBY3RpdmVTb3J0IChwYXRoKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IFNFTEVDVF9BQ1RJVkVfU09SVCxcclxuXHRcdHBhdGgsXHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEFjdGl2ZUNvbHVtbnMgKGNvbHVtbnMpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogU0VMRUNUX0FDVElWRV9DT0xVTU5TLFxyXG5cdFx0Y29sdW1ucyxcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0QWN0aXZlTGlzdCAobGlzdCwgaWQpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogU0VUX0FDVElWRV9MSVNULFxyXG5cdFx0bGlzdCxcclxuXHRcdGlkLFxyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGaWx0ZXJpbmcgYWN0aW9uc1xyXG4gKi9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhckZpbHRlciAocGF0aCkge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBDTEVBUl9GSUxURVIsXHJcblx0XHRwYXRoLFxyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhckFsbEZpbHRlcnMgKCkge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBDTEVBUl9BTExfRklMVEVSUyxcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0RmlsdGVyIChwYXRoLCB2YWx1ZSkge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBTRUxFQ1RfRklMVEVSLFxyXG5cdFx0ZmlsdGVyOiB7IHBhdGgsIHZhbHVlIH0sXHJcblx0fTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhckNhY2hlZFF1ZXJ5ICgpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogQ0xFQVJfQ0FDSEVEX1FVRVJZLFxyXG5cdH07XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuXHRTRVRfUk9XX0FMRVJULFxyXG5cdFJFU0VUX0RSQUdfUEFHRSxcclxuXHRSRVNFVF9EUkFHX0lURU1TLFxyXG5cdFNFVF9EUkFHX0lURU0sXHJcblx0U0VUX0RSQUdfSU5ERVgsXHJcblx0RFJBR19NT1ZFX0lURU0sXHJcbn0gZnJvbSAnLi4vY29uc3RhbnRzJztcclxuXHJcbmltcG9ydCB7XHJcblx0c2V0Q3VycmVudFBhZ2UsXHJcblx0aXRlbXNMb2FkZWQsXHJcblx0bG9hZEl0ZW1zLFxyXG59IGZyb20gJy4uL2FjdGlvbnMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldERyYWdCYXNlIChpdGVtLCBpbmRleCkge1xyXG5cdHJldHVybiAoZGlzcGF0Y2gpID0+IHtcclxuXHRcdGRpc3BhdGNoKHJlc2V0RHJhZ1BhZ2UoKSk7XHJcblx0XHRkaXNwYXRjaChyZXNldERyYWdJdGVtcygpKTtcclxuXHRcdGlmIChpdGVtKSB7XHJcblx0XHRcdGRpc3BhdGNoKHNldERyYWdJdGVtKGl0ZW0pKTtcclxuXHRcdFx0aWYgKGluZGV4KSB7XHJcblx0XHRcdFx0ZGlzcGF0Y2goc2V0RHJhZ0luZGV4KGluZGV4KSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0RHJhZ1BhZ2UgKCkge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBSRVNFVF9EUkFHX1BBR0UsXHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0RHJhZ0l0ZW1zICgpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogUkVTRVRfRFJBR19JVEVNUyxcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0RHJhZ0l0ZW0gKGl0ZW0pIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogU0VUX0RSQUdfSVRFTSxcclxuXHRcdGl0ZW0sXHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldERyYWdJbmRleCAoaW5kZXgpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogU0VUX0RSQUdfSU5ERVgsXHJcblx0XHRpbmRleCxcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0Um93QWxlcnQgKGRhdGEpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogU0VUX1JPV19BTEVSVCxcclxuXHRcdGRhdGEsXHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVJdGVtIChwcmV2SW5kZXgsIG5ld0luZGV4LCBvcHRpb25zKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IERSQUdfTU9WRV9JVEVNLFxyXG5cdFx0cHJldkluZGV4LFxyXG5cdFx0bmV3SW5kZXgsXHJcblx0XHRvcHRpb25zLFxyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW9yZGVySXRlbXMgKGl0ZW0sIHByZXZTb3J0T3JkZXIsIG5ld1NvcnRPcmRlciwgZ29Ub1BhZ2UpIHtcclxuXHQvLyAvLyByZXNldCBkcmFnXHJcblx0Ly8gZGVmYXVsdERyYWcoKTtcclxuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG5cdFx0aWYgKGdvVG9QYWdlKSB7XHJcblx0XHRcdC8vIFRPRE8gRklHVVJFIE9VVCBJRiBUSElTIElTIEEgUkFDRSBDT05ESVRJT05cclxuXHRcdFx0ZGlzcGF0Y2goc2V0Q3VycmVudFBhZ2UoZ29Ub1BhZ2UpKTtcclxuXHRcdH1cclxuXHRcdGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuXHRcdGNvbnN0IGxpc3QgPSBzdGF0ZS5saXN0cy5jdXJyZW50TGlzdDtcclxuXHJcblx0XHQvLyBTZW5kIHRoZSBpdGVtLCBwcmV2aW91cyBzb3J0T3JkZXIgYW5kIHRoZSBuZXcgc29ydE9yZGVyXHJcblx0XHQvLyB3ZSBzaG91bGQgZ2V0IHRoZSBwcm9wZXIgbGlzdCBhbmQgbmV3IHBhZ2UgcmVzdWx0cyBpbiByZXR1cm5cclxuXHRcdGxpc3QucmVvcmRlckl0ZW1zKFxyXG5cdFx0XHRpdGVtLFxyXG5cdFx0XHRwcmV2U29ydE9yZGVyLFxyXG5cdFx0XHRuZXdTb3J0T3JkZXIsXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzZWFyY2g6IHN0YXRlLmFjdGl2ZS5zZWFyY2gsXHJcblx0XHRcdFx0ZmlsdGVyczogc3RhdGUuYWN0aXZlLmZpbHRlcnMsXHJcblx0XHRcdFx0c29ydDogc3RhdGUuYWN0aXZlLnNvcnQsXHJcblx0XHRcdFx0Y29sdW1uczogc3RhdGUuYWN0aXZlLmNvbHVtbnMsXHJcblx0XHRcdFx0cGFnZTogc3RhdGUubGlzdHMucGFnZSxcclxuXHRcdFx0fSwgKGVyciwgaXRlbXMpID0+IHtcclxuXHRcdFx0XHQvLyBJZiBlcnIsIGZsYXNoIHRoZSByb3cgYWxlcnRcclxuXHRcdFx0XHRpZiAoZXJyKSB7XHJcblx0XHRcdFx0XHRkaXNwYXRjaChyZXNldEl0ZW1zKGl0ZW0uaWQpKTtcclxuXHRcdFx0XHRcdC8vIHJldHVybiB0aGlzLnJlc2V0SXRlbXModGhpcy5maW5kSXRlbUJ5SWRbaXRlbS5pZF0pO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRkaXNwYXRjaChpdGVtc0xvYWRlZChpdGVtcykpO1xyXG5cdFx0XHRcdFx0ZGlzcGF0Y2goc2V0Um93QWxlcnQoe1xyXG5cdFx0XHRcdFx0XHRzdWNjZXNzOiBpdGVtLmlkLFxyXG5cdFx0XHRcdFx0XHRmYWlsOiBmYWxzZSxcclxuXHRcdFx0XHRcdH0pKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdCk7XHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0SXRlbXMgKGl0ZW1JZCkge1xyXG5cdHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcblx0XHRjb25zdCBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcblx0XHRjb25zdCB7IHBhZ2UsIGRyYWcgfSA9IHN0YXRlLmxpc3RzO1xyXG5cclxuXHRcdGlmIChwYWdlLmluZGV4ICE9PSBkcmFnLnBhZ2UpIHtcclxuXHRcdFx0Ly8gV2UgYXJlIG5vdCBvbiB0aGUgb3JpZ2luYWwgcGFnZSBzbyB3ZSBuZWVkIHRvIG1vdmUgYmFjayB0byBpdFxyXG5cdFx0XHRkaXNwYXRjaChzZXRDdXJyZW50UGFnZShkcmFnLnBhZ2UpKTtcclxuXHRcdFx0ZGlzcGF0Y2gobG9hZEl0ZW1zKHtcclxuXHRcdFx0XHRmYWlsOiB0cnVlLFxyXG5cdFx0XHRcdGlkOiBpdGVtSWQsXHJcblx0XHRcdH0pKTtcclxuXHRcdFx0Ly8gcmVzZXQgZHJhZ1xyXG5cdFx0XHQvLyByZXR1cm4gZGVmYXVsdERyYWcoKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZXNldCB0aGUgbGlzdCBpZiBkcmFnb3V0IG9yIGVycm9yXHJcblx0XHRkaXNwYXRjaChzZXRSb3dBbGVydCh7XHJcblx0XHRcdHN1Y2Nlc3M6IGZhbHNlLFxyXG5cdFx0XHRmYWlsOiBpdGVtSWQsXHJcblx0XHR9KSk7XHJcblx0XHQvLyB3ZSB1c2UgdGhlIGNhY2hlZCBjbG9uZSBzaW5jZSB0aGlzIGlzIHRoZSBzYW1lIHBhZ2VcclxuXHRcdC8vIHRoZSBjbG9uZSBjb250YWlucyB0aGUgcHJvcGVyIGluZGV4IG51bWJlcnMgd2hpY2ggZ2V0IG92ZXJ3cml0dGVuIG9uIGRyYWdcclxuXHRcdC8vIF9pdGVtcy5yZXN1bHRzID0gZHJhZy5jbG9uZWRJdGVtcztcclxuXHRcdC8vIGRlZmF1bHREcmFnKCk7XHJcblx0XHQvLyB0aGlzLm5vdGlmeUNoYW5nZSgpO1xyXG5cdH07XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuXHRTRUxFQ1RfTElTVCxcclxuXHRTRVRfQ1VSUkVOVF9QQUdFLFxyXG5cdElOSVRJQUxfTElTVF9MT0FELFxyXG59IGZyb20gJy4uL2NvbnN0YW50cyc7XHJcblxyXG5pbXBvcnQgeyBzZXRBY3RpdmVMaXN0IH0gZnJvbSAnLi9hY3RpdmUnO1xyXG5cclxuLyoqXHJcbiAqIFNlbGVjdCBhIGxpc3QsIGFuZCBzZXQgaXQgYXMgdGhlIGFjdGl2ZSBsaXN0LiBDYWxsZWQgd2hlbmV2ZXIgdGhlIG1haW5cclxuICogTGlzdCBjb21wb25lbnQgbW91bnRzIG9yIHRoZSBsaXN0IGNoYW5nZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gaWQgVGhlIGxpc3QgSUQsIHBhc3NlZCB2aWEgdGhpcy5wcm9wcy5wYXJhbXMubGlzdElkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0TGlzdCAoaWQpIHtcclxuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG5cdFx0ZGlzcGF0Y2goe1xyXG5cdFx0XHR0eXBlOiBTRUxFQ1RfTElTVCxcclxuXHRcdFx0aWQsXHJcblx0XHR9KTtcclxuXHRcdGRpc3BhdGNoKHNldEFjdGl2ZUxpc3QoZ2V0U3RhdGUoKS5saXN0cy5kYXRhW2lkXSwgaWQpKTtcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9hZEluaXRpYWxJdGVtcyAoKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IElOSVRJQUxfTElTVF9MT0FELFxyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGN1cnJlbnQgcGFnZVxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gaW5kZXggVGhlIHBhZ2UgbnVtYmVyIHdlIHdhbnQgdG8gYmUgb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRDdXJyZW50UGFnZSAoaW5kZXgpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogU0VUX0NVUlJFTlRfUEFHRSxcclxuXHRcdGluZGV4OiBwYXJzZUludChpbmRleCksXHJcblx0fTtcclxufVxyXG5cclxuLy8gRXhwb3J0IGFsbCBhY3Rpb25zIGZyb20gaGVyZSBhZ2FpbiBmb3IgZWFzaWVyIHVzYWJpbGl0eSwgdGhhdCB0aGV5J3JlIHNwbGl0IHVwXHJcbi8vIHNob3VsZCBiZSBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWwgb2YgTGlzdFxyXG5cclxuaW1wb3J0IHtcclxuXHRzZXRGaWx0ZXIsXHJcblx0Y2xlYXJGaWx0ZXIsXHJcblx0Y2xlYXJBbGxGaWx0ZXJzLFxyXG5cdHNldEFjdGl2ZUZpbHRlcnMsXHJcblx0c2V0QWN0aXZlU2VhcmNoLFxyXG5cdHNldEFjdGl2ZUNvbHVtbnMsXHJcblx0Y2xlYXJDYWNoZWRRdWVyeSxcclxuXHRzZXRBY3RpdmVTb3J0LFxyXG59IGZyb20gJy4vYWN0aXZlJztcclxuXHJcbmltcG9ydCB7XHJcblx0bG9hZEl0ZW1zLFxyXG5cdGl0ZW1zTG9hZGVkLFxyXG5cdGl0ZW1Mb2FkaW5nRXJyb3IsXHJcblx0ZGVsZXRlSXRlbXMsXHJcblx0ZG93bmxvYWRJdGVtcyxcclxuXHRjdXN0b21BY3Rpb24sXHJcblx0Y3VzdG9tQWN0aW9uRG93bmxvYWQsXHJcbn0gZnJvbSAnLi9pdGVtcyc7XHJcblxyXG5pbXBvcnQge1xyXG5cdHNldERyYWdCYXNlLFxyXG5cdHJlc2V0SXRlbXMsXHJcblx0cmVvcmRlckl0ZW1zLFxyXG5cdHNldFJvd0FsZXJ0LFxyXG5cdG1vdmVJdGVtLFxyXG59IGZyb20gJy4vZHJhZ2Ryb3AnO1xyXG5cclxuZXhwb3J0IHtcclxuXHRzZXRGaWx0ZXIsXHJcblx0Y2xlYXJGaWx0ZXIsXHJcblx0Y2xlYXJBbGxGaWx0ZXJzLFxyXG5cdHNldEFjdGl2ZUZpbHRlcnMsXHJcblx0c2V0QWN0aXZlU2VhcmNoLFxyXG5cdHNldEFjdGl2ZUNvbHVtbnMsXHJcblx0c2V0QWN0aXZlU29ydCxcclxuXHRjbGVhckNhY2hlZFF1ZXJ5LFxyXG5cdGxvYWRJdGVtcyxcclxuXHRpdGVtc0xvYWRlZCxcclxuXHRpdGVtTG9hZGluZ0Vycm9yLFxyXG5cdGRlbGV0ZUl0ZW1zLFxyXG5cdHNldERyYWdCYXNlLFxyXG5cdHJlc2V0SXRlbXMsXHJcblx0cmVvcmRlckl0ZW1zLFxyXG5cdHNldFJvd0FsZXJ0LFxyXG5cdG1vdmVJdGVtLFxyXG5cdGRvd25sb2FkSXRlbXMsXHJcblx0Y3VzdG9tQWN0aW9uLFxyXG5cdGN1c3RvbUFjdGlvbkRvd25sb2FkLFxyXG59O1xyXG4iLCJpbXBvcnQge1xyXG5cdExPQURfSVRFTVMsXHJcblx0SVRFTVNfTE9BREVELFxyXG5cdElURU1fTE9BRElOR19FUlJPUixcclxufSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5jb25zdCB4aHIgPSByZXF1aXJlKCd4aHInKTtcclxuY29uc3QgYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xyXG5pbXBvcnQgeyBORVRXT1JLX0VSUk9SX1JFVFJZX0RFTEFZIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29uc3RhbnRzJztcclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRJdGVtcyhvcHRpb25zID0ge30pIHtcclxuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG5cdFx0bGV0IGN1cnJlbnRMb2FkQ291bnRlciA9IGdldFN0YXRlKCkubGlzdHMubG9hZENvdW50ZXIgKyAxO1xyXG5cclxuXHRcdGRpc3BhdGNoKHtcclxuXHRcdFx0dHlwZTogTE9BRF9JVEVNUyxcclxuXHRcdFx0bG9hZENvdW50ZXI6IGN1cnJlbnRMb2FkQ291bnRlcixcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIFRha2UgYSBzbmFwc2hvdCBvZiB0aGUgY3VycmVudCByZWR1eCBzdGF0ZS5cclxuXHRcdGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuXHRcdC8vIEhvbGQgYSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnRMaXN0IGluIHN0YXRlLlxyXG5cdFx0Y29uc3QgY3VycmVudExpc3QgPSBzdGF0ZS5saXN0cy5jdXJyZW50TGlzdDtcclxuXHJcblx0XHRjdXJyZW50TGlzdC5sb2FkSXRlbXMoe1xyXG5cdFx0XHRzZWFyY2g6IHN0YXRlLmFjdGl2ZS5zZWFyY2gsXHJcblx0XHRcdGZpbHRlcnM6IHN0YXRlLmFjdGl2ZS5maWx0ZXJzLFxyXG5cdFx0XHRzb3J0OiBzdGF0ZS5hY3RpdmUuc29ydCxcclxuXHRcdFx0Y29sdW1uczogc3RhdGUuYWN0aXZlLmNvbHVtbnMsXHJcblx0XHRcdHBhZ2U6IHN0YXRlLmxpc3RzLnBhZ2UsXHJcblx0XHR9LCAoZXJyLCBpdGVtcykgPT4ge1xyXG5cclxuXHRcdFx0Ly8gQ3JlYXRlIGEgbmV3IHN0YXRlIHNuYXBzaG90IGFuZCBjb21wYXJlIHRoZSBjdXJyZW50IGFjdGl2ZSBsaXN0IGlkXHJcblx0XHRcdC8vIHRvIHRoZSBpZCBvZiB0aGUgY3VycmVudExpc3QgcmVmZXJlbmNlZCBhYm92ZS5cclxuXHRcdFx0Ly8gSWYgdGhleSBhcmUgdGhlIHNhbWUsIHRoZW4gdGhpcyBpcyB0aGUgbGF0ZXN0IGZldGNoIHJlcXVlc3QsIHdlIG1heSByZXNvbHZlIHRoaXMgbm9ybWFsbHkuXHJcblx0XHRcdC8vIElmIHRoZXNlIGFyZSBub3QgdGhlIHNhbWUsIHRoZW4gaXQgbWVhbnMgdGhhdCB0aGlzIGlzIG5vdCB0aGUgbGF0ZXN0IGZldGNoIHJlcXVlc3QuXHJcblx0XHRcdC8vIEJBSUwgT1VUIVxyXG5cclxuXHRcdFx0aWYgKGdldFN0YXRlKCkuYWN0aXZlLmlkICE9PSBjdXJyZW50TGlzdC5pZCkgcmV0dXJuO1xyXG5cdFx0XHRpZiAoZ2V0U3RhdGUoKS5saXN0cy5sb2FkQ291bnRlciA+IGN1cnJlbnRMb2FkQ291bnRlcikgcmV0dXJuO1xyXG5cdFx0XHRpZiAoaXRlbXMpIHtcclxuXHJcblx0XHRcdFx0Ly8gaWYgKHBhZ2UuaW5kZXggIT09IGRyYWcucGFnZSAmJiBkcmFnLml0ZW0pIHtcclxuXHRcdFx0XHQvLyBcdC8vIGFkZCB0aGUgZHJhZ2dpbmcgaXRlbVxyXG5cdFx0XHRcdC8vIFx0aWYgKHBhZ2UuaW5kZXggPiBkcmFnLnBhZ2UpIHtcclxuXHRcdFx0XHQvLyBcdFx0X2l0ZW1zLnJlc3VsdHMudW5zaGlmdChkcmFnLml0ZW0pO1xyXG5cdFx0XHRcdC8vIFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBcdFx0X2l0ZW1zLnJlc3VsdHMucHVzaChkcmFnLml0ZW0pO1xyXG5cdFx0XHRcdC8vIFx0fVxyXG5cdFx0XHRcdC8vIH1cclxuXHRcdFx0XHQvLyBfaXRlbXNSZXN1bHRzQ2xvbmUgPSBpdGVtcy5yZXN1bHRzLnNsaWNlKDApO1xyXG5cdFx0XHRcdC8vXHJcblxyXG5cdFx0XHRcdC8vIFRPRE8gUmVlbmFibGUgdGhpc1xyXG5cdFx0XHRcdC8vIGlmIChvcHRpb25zLnN1Y2Nlc3MgJiYgb3B0aW9ucy5pZCkge1xyXG5cdFx0XHRcdC8vIFx0Ly8gZmxhc2hlcyBhIHN1Y2Nlc3MgYmFja2dyb3VuZCBvbiB0aGUgcm93XHJcblx0XHRcdFx0Ly8gXHRfcm93QWxlcnQuc3VjY2VzcyA9IG9wdGlvbnMuaWQ7XHJcblx0XHRcdFx0Ly8gfVxyXG5cdFx0XHRcdC8vIGlmIChvcHRpb25zLmZhaWwgJiYgb3B0aW9ucy5pZCkge1xyXG5cdFx0XHRcdC8vIFx0Ly8gZmxhc2hlcyBhIGZhaWx1cmUgYmFja2dyb3VuZCBvbiB0aGUgcm93XHJcblx0XHRcdFx0Ly8gXHRfcm93QWxlcnQuZmFpbCA9IG9wdGlvbnMuaWQ7XHJcblx0XHRcdFx0Ly8gfVxyXG5cclxuXHRcdFx0XHQvLyBTdWNjZXNzZnVsbHkgcmVzb2x2ZSB0aGlzIHJlcXVlc3QgaW4gcmVkdXggYW5kIHNldCB0aGUgbG9hZENvdW50ZXIgYmFjayB0byB6ZXJvLlxyXG5cdFx0XHRcdGRpc3BhdGNoKGl0ZW1zTG9hZGVkKGl0ZW1zKSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gQ2F0Y2ggdGhpcyBlcnJvciBpbiByZWR1eCBhbmQgc2V0IHRoZSBsb2FkQ291bnRlciBiYWNrIHRvIHplcm8uXHJcblx0XHRcdFx0ZGlzcGF0Y2goaXRlbUxvYWRpbmdFcnJvcihlcnIpKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRvd25sb2FkSXRlbXMoZm9ybWF0LCBjb2x1bW5zKSB7XHJcblx0cmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuXHRcdGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuXHRcdGNvbnN0IGFjdGl2ZSA9IHN0YXRlLmFjdGl2ZTtcclxuXHRcdGNvbnN0IGN1cnJlbnRMaXN0ID0gc3RhdGUubGlzdHMuY3VycmVudExpc3Q7XHJcblx0XHRjb25zdCB1cmwgPSBjdXJyZW50TGlzdC5nZXREb3dubG9hZFVSTCh7XHJcblx0XHRcdHNlYXJjaDogYWN0aXZlLnNlYXJjaCxcclxuXHRcdFx0ZmlsdGVyczogYWN0aXZlLmZpbHRlcnMsXHJcblx0XHRcdHNvcnQ6IGFjdGl2ZS5zb3J0LFxyXG5cdFx0XHRjb2x1bW5zOiBjb2x1bW5zID8gY3VycmVudExpc3QuZXhwYW5kQ29sdW1ucyhjb2x1bW5zKSA6IGFjdGl2ZS5jb2x1bW5zLFxyXG5cdFx0XHRmb3JtYXQ6IGZvcm1hdCxcclxuXHRcdH0pO1xyXG5cdFx0d2luZG93Lm9wZW4odXJsKTtcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXRlbXNMb2FkZWQoaXRlbXMpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogSVRFTVNfTE9BREVELFxyXG5cdFx0aXRlbXMsXHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIERpc3BhdGNoZWQgd2hlbiB1bnN1Y2Nlc3NmdWxseSB0cnlpbmcgdG8gbG9hZCB0aGUgaXRlbXMsIHdpbGwgcmVkaXNwYXRjaFxyXG4gKiBsb2FkSXRlbXMgYWZ0ZXIgTkVUV09SS19FUlJPUl9SRVRSWV9ERUxBWSBtaWxsaXNlY29uZHMgdW50aWwgd2UgZ2V0IGl0ZW1zIGJhY2tcclxuICovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXRlbUxvYWRpbmdFcnJvcigpIHtcclxuXHRyZXR1cm4gKGRpc3BhdGNoKSA9PiB7XHJcblx0XHRkaXNwYXRjaCh7XHJcblx0XHRcdHR5cGU6IElURU1fTE9BRElOR19FUlJPUixcclxuXHRcdFx0ZXJyOiAnTmV0d29yayByZXF1ZXN0IGZhaWxlZCcsXHJcblx0XHR9KTtcclxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRkaXNwYXRjaChsb2FkSXRlbXMoKSk7XHJcblx0XHR9LCBORVRXT1JLX0VSUk9SX1JFVFJZX0RFTEFZKTtcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlSXRlbXMoaWRzKSB7XHJcblx0cmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuXHRcdGNvbnN0IGxpc3QgPSBnZXRTdGF0ZSgpLmxpc3RzLmN1cnJlbnRMaXN0O1xyXG5cdFx0bGlzdC5kZWxldGVJdGVtcyhpZHMsIChlcnIsIGRhdGEpID0+IHtcclxuXHRcdFx0Ly8gVE9ETyBFUlJPUiBIQU5ETElOR1xyXG5cdFx0XHRkaXNwYXRjaChsb2FkSXRlbXMoKSk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tQWN0aW9uKGlkcywgYWN0aW9uLCBjdXN0b21VcGRhdGVWYWx1ZSkge1xyXG5cdHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcblxyXG5cdFx0bGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcblx0XHRmb3JtRGF0YS5hcHBlbmQoJ2lkcycsIGlkcyk7XHJcblx0XHRmb3JtRGF0YS5hcHBlbmQoJ2N1c3RvbVVwZGF0ZVZhbHVlJywgY3VzdG9tVXBkYXRlVmFsdWUpO1xyXG5cclxuXHRcdHhocih7XHJcblx0XHRcdHVybDogYC9hcHAvJHthY3Rpb259YCxcclxuXHRcdFx0cmVzcG9uc2VUeXBlOiAnanNvbicsXHJcblx0XHRcdG1ldGhvZDogJ1BVVCcsXHJcblx0XHRcdGhlYWRlcnM6IGFzc2lnbih7fSwgS2V5c3RvbmUuY3NyZi5oZWFkZXIpLFxyXG5cdFx0XHRib2R5OiBmb3JtRGF0YSxcclxuXHRcdH0sIChlcnIsIHJlc3AsIGRhdGEpID0+IHtcclxuXHRcdFx0aWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XHJcblxyXG5cdFx0XHRpZiAocmVzcC5zdGF0dXNDb2RlID09PSAyMDApIHtcclxuXHRcdFx0XHRkaXNwYXRjaChsb2FkSXRlbXMoKSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2FsbGJhY2soZGF0YSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21BY3Rpb25Eb3dubG9hZChpZCwgYWN0aW9uKSB7XHJcblx0cmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuXHRcdGNvbnN0IHVybCA9ICcvYXBwLycgKyBhY3Rpb24gKyAnP2lkPScgKyBpZDtcclxuXHRcdHdpbmRvdy5vcGVuKHVybCk7XHJcblx0fTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEZpbHRlcnMgfSBmcm9tICdGaWVsZFR5cGVzJztcclxuaW1wb3J0IHsgQ2hpcCB9IGZyb20gJy4uLy4uLy4uLy4uL2VsZW1lbnRhbCc7XHJcblxyXG5pbXBvcnQgUG9wb3V0IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9Qb3BvdXQnO1xyXG5pbXBvcnQgeyBzZXRGaWx0ZXIsIGNsZWFyRmlsdGVyIH0gZnJvbSAnLi4vLi4vYWN0aW9ucyc7XHJcbmltcG9ydCBnZXRGaWx0ZXJMYWJlbCBmcm9tICcuL2dldEZpbHRlckxhYmVsJztcclxuXHJcbmNsYXNzIEZpbHRlciBleHRlbmRzIENvbXBvbmVudCB7XHJcblx0Y29uc3RydWN0b3IgKCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLm9wZW4gPSB0aGlzLm9wZW4uYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuY2xvc2UgPSB0aGlzLmNsb3NlLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLnVwZGF0ZVZhbHVlID0gdGhpcy51cGRhdGVWYWx1ZS5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy51cGRhdGVGaWx0ZXIgPSB0aGlzLnVwZGF0ZUZpbHRlci5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5yZW1vdmVGaWx0ZXIgPSB0aGlzLnJlbW92ZUZpbHRlci5iaW5kKHRoaXMpO1xyXG5cclxuXHRcdHRoaXMuc3RhdGUgPSB7XHJcblx0XHRcdGlzT3BlbjogZmFsc2UsXHJcblx0XHR9O1xyXG5cdH1cclxuXHRvcGVuICgpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRpc09wZW46IHRydWUsXHJcblx0XHRcdGZpbHRlclZhbHVlOiB0aGlzLnByb3BzLmZpbHRlci52YWx1ZSxcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRjbG9zZSAoKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0aXNPcGVuOiBmYWxzZSxcclxuXHRcdH0pO1xyXG5cdH1cclxuXHR1cGRhdGVWYWx1ZSAoZmlsdGVyVmFsdWUpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRmaWx0ZXJWYWx1ZTogZmlsdGVyVmFsdWUsXHJcblx0XHR9KTtcclxuXHR9XHJcblx0dXBkYXRlRmlsdGVyIChlKSB7XHJcblx0XHRjb25zdCB7IGRpc3BhdGNoLCBmaWx0ZXIgfSA9IHRoaXMucHJvcHM7XHJcblx0XHRkaXNwYXRjaChzZXRGaWx0ZXIoZmlsdGVyLmZpZWxkLnBhdGgsIHRoaXMuc3RhdGUuZmlsdGVyVmFsdWUpKTtcclxuXHRcdHRoaXMuY2xvc2UoKTtcclxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHR9XHJcblx0cmVtb3ZlRmlsdGVyICgpIHtcclxuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goY2xlYXJGaWx0ZXIodGhpcy5wcm9wcy5maWx0ZXIuZmllbGQucGF0aCkpO1xyXG5cdH1cclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgeyBmaWx0ZXIgfSA9IHRoaXMucHJvcHM7XHJcblx0XHRjb25zdCBmaWx0ZXJJZCA9IGBhY3RpdmVGaWx0ZXJfXyR7ZmlsdGVyLmZpZWxkLnBhdGh9YDtcclxuXHRcdGNvbnN0IEZpbHRlckNvbXBvbmVudCA9IEZpbHRlcnNbZmlsdGVyLmZpZWxkLnR5cGVdO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxzcGFuPlxyXG5cdFx0XHRcdDxDaGlwXHJcblx0XHRcdFx0XHRsYWJlbD17Z2V0RmlsdGVyTGFiZWwoZmlsdGVyLmZpZWxkLCBmaWx0ZXIudmFsdWUpfVxyXG5cdFx0XHRcdFx0b25DbGljaz17dGhpcy5vcGVufVxyXG5cdFx0XHRcdFx0b25DbGVhcj17dGhpcy5yZW1vdmVGaWx0ZXJ9XHJcblx0XHRcdFx0XHRjb2xvcj1cInByaW1hcnlcIlxyXG5cdFx0XHRcdFx0aWQ9e2ZpbHRlcklkfVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdFx0PFBvcG91dCBpc09wZW49e3RoaXMuc3RhdGUuaXNPcGVufSBvbkNhbmNlbD17dGhpcy5jbG9zZX0gcmVsYXRpdmVUb0lEPXtmaWx0ZXJJZH0+XHJcblx0XHRcdFx0XHQ8Zm9ybSBvblN1Ym1pdD17dGhpcy51cGRhdGVGaWx0ZXJ9PlxyXG5cdFx0XHRcdFx0XHQ8UG9wb3V0LkhlYWRlciB0aXRsZT1cIkVkaXQgRmlsdGVyXCIgLz5cclxuXHRcdFx0XHRcdFx0PFBvcG91dC5Cb2R5PlxyXG5cdFx0XHRcdFx0XHRcdDxGaWx0ZXJDb21wb25lbnRcclxuXHRcdFx0XHRcdFx0XHRcdGZpZWxkPXtmaWx0ZXIuZmllbGR9XHJcblx0XHRcdFx0XHRcdFx0XHRmaWx0ZXI9e3RoaXMuc3RhdGUuZmlsdGVyVmFsdWV9XHJcblx0XHRcdFx0XHRcdFx0XHRvbkNoYW5nZT17dGhpcy51cGRhdGVWYWx1ZX1cclxuXHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHQ8L1BvcG91dC5Cb2R5PlxyXG5cdFx0XHRcdFx0XHQ8UG9wb3V0LkZvb3RlclxyXG5cdFx0XHRcdFx0XHRcdHJlZj1cImZvb3RlclwiXHJcblx0XHRcdFx0XHRcdFx0cHJpbWFyeUJ1dHRvbklzU3VibWl0XHJcblx0XHRcdFx0XHRcdFx0cHJpbWFyeUJ1dHRvbkxhYmVsPVwiQXBwbHlcIlxyXG5cdFx0XHRcdFx0XHRcdHNlY29uZGFyeUJ1dHRvbkFjdGlvbj17dGhpcy5jbG9zZX1cclxuXHRcdFx0XHRcdFx0XHRzZWNvbmRhcnlCdXR0b25MYWJlbD1cIkNhbmNlbFwiIC8+XHJcblx0XHRcdFx0XHQ8L2Zvcm0+XHJcblx0XHRcdFx0PC9Qb3BvdXQ+XHJcblx0XHRcdDwvc3Bhbj5cclxuXHRcdCk7XHJcblx0fVxyXG59O1xyXG5cclxuRmlsdGVyLnByb3BUeXBlcyA9IHtcclxuXHRkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHRmaWx0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XHJcblx0XHRmaWVsZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG5cdFx0dmFsdWU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuXHR9KS5pc1JlcXVpcmVkLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGaWx0ZXI7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENoaXAgfSBmcm9tICcuLi8uLi8uLi8uLi9lbGVtZW50YWwnO1xyXG5pbXBvcnQgRmlsdGVyIGZyb20gJy4vRmlsdGVyJztcclxuXHJcbmltcG9ydCB7IGNsZWFyQWxsRmlsdGVycyB9IGZyb20gJy4uLy4uL2FjdGlvbnMnO1xyXG5cclxuY29uc3QgTGlzdEZpbHRlcnMgPSAoeyBkaXNwYXRjaCwgZmlsdGVycyB9KSA9PiB7XHJcblxyXG5cdGlmICghZmlsdGVycy5sZW5ndGgpIHJldHVybiA8ZGl2IC8+O1xyXG5cclxuXHRjb25zdCBkaXNwYXRjaENsZWFyQWxsRmlsdGVycyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdGRpc3BhdGNoKGNsZWFyQWxsRmlsdGVycygpKTtcclxuXHR9O1xyXG5cclxuXHQvLyBHZW5lcmF0ZSB0aGUgbGlzdCBvZiBmaWx0ZXIgcGlsbHNcclxuXHRjb25zdCBjdXJyZW50RmlsdGVycyA9IGZpbHRlcnMubWFwKChmaWx0ZXIsIGkpID0+IChcclxuXHRcdDxGaWx0ZXJcclxuXHRcdFx0a2V5PXsnZicgKyBpfVxyXG5cdFx0XHRmaWx0ZXI9e2ZpbHRlcn1cclxuXHRcdFx0ZGlzcGF0Y2g9e2Rpc3BhdGNofVxyXG5cdFx0Lz5cclxuXHQpKTtcclxuXHJcblx0Ly8gV2hlbiBtb3JlIHRoYW4gMSwgYXBwZW5kIHRoZSBjbGVhciBidXR0b25cclxuXHRpZiAoY3VycmVudEZpbHRlcnMubGVuZ3RoID4gMSkge1xyXG5cdFx0Y3VycmVudEZpbHRlcnMucHVzaChcclxuXHRcdFx0PENoaXBcclxuXHRcdFx0XHRrZXk9XCJsaXN0RmlsdGVyc19fY2xlYXJcIlxyXG5cdFx0XHRcdGxhYmVsPVwiQ2xlYXIgQWxsXCJcclxuXHRcdFx0XHRvbkNsaWNrPXtkaXNwYXRjaENsZWFyQWxsRmlsdGVyc31cclxuXHRcdFx0Lz5cclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRjb25zdCBzdHlsZXMgPSB7XHJcblx0XHRtYXJnaW5Cb3R0b206ICcxZW0nLFxyXG5cdFx0bWFyZ2luVG9wOiAnMWVtJyxcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdiBzdHlsZT17c3R5bGVzfT5cclxuXHRcdFx0e2N1cnJlbnRGaWx0ZXJzfVxyXG5cdFx0PC9kaXY+XHJcblx0KTtcclxufTtcclxuXHJcbkxpc3RGaWx0ZXJzLnByb3BUeXBlcyA9IHtcclxuXHRkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHRmaWx0ZXJzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTGlzdEZpbHRlcnM7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IFRyYW5zaXRpb25cclxuXHRmcm9tICdyZWFjdC1hZGRvbnMtY3NzLXRyYW5zaXRpb24tZ3JvdXAnO1xyXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0IExpc3RGaWx0ZXJzQWRkRm9ybSBmcm9tICcuL0xpc3RGaWx0ZXJzQWRkRm9ybSc7XHJcbmltcG9ydCBQb3BvdXQgZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL1BvcG91dCc7XHJcbmltcG9ydCBQb3BvdXRMaXN0IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9Qb3BvdXQvUG9wb3V0TGlzdCc7XHJcbmltcG9ydCB7IEZvcm1JbnB1dCB9IGZyb20gJy4uLy4uLy4uLy4uL2VsZW1lbnRhbCc7XHJcbmltcG9ydCBMaXN0SGVhZGVyQnV0dG9uIGZyb20gJy4uL0xpc3RIZWFkZXJCdXR0b24nO1xyXG5cclxuaW1wb3J0IHsgc2V0RmlsdGVyIH0gZnJvbSAnLi4vLi4vYWN0aW9ucyc7XHJcblxyXG52YXIgTGlzdEZpbHRlcnNBZGQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdMaXN0RmlsdGVyc0FkZCcsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRtYXhIZWlnaHQ6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcblx0fSxcclxuXHRnZXREZWZhdWx0UHJvcHMgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0bWF4SGVpZ2h0OiAzNjAsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGlubmVySGVpZ2h0OiAwLFxyXG5cdFx0XHRpc09wZW46IGZhbHNlLFxyXG5cdFx0XHRzZWFyY2hTdHJpbmc6ICcnLFxyXG5cdFx0XHRzZWxlY3RlZEZpZWxkOiBmYWxzZSxcclxuXHRcdH07XHJcblx0fSxcclxuXHR1cGRhdGVTZWFyY2ggKGUpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoeyBzZWFyY2hTdHJpbmc6IGUudGFyZ2V0LnZhbHVlIH0pO1xyXG5cdH0sXHJcblx0b3BlblBvcG91dCAoKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHsgaXNPcGVuOiB0cnVlIH0sIHRoaXMuZm9jdXNTZWFyY2gpO1xyXG5cdH0sXHJcblx0Y2xvc2VQb3BvdXQgKCkge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdGlubmVySGVpZ2h0OiAwLFxyXG5cdFx0XHRpc09wZW46IGZhbHNlLFxyXG5cdFx0XHRzZWFyY2hTdHJpbmc6ICcnLFxyXG5cdFx0XHRzZWxlY3RlZEZpZWxkOiBmYWxzZSxcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0c2V0UG9wb3V0SGVpZ2h0IChoZWlnaHQpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoeyBpbm5lckhlaWdodDogTWF0aC5taW4odGhpcy5wcm9wcy5tYXhIZWlnaHQsIGhlaWdodCkgfSk7XHJcblx0fSxcclxuXHRuYXZpZ2F0ZUJhY2sgKCkge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdHNlbGVjdGVkRmllbGQ6IGZhbHNlLFxyXG5cdFx0XHRzZWFyY2hTdHJpbmc6ICcnLFxyXG5cdFx0XHRpbm5lckhlaWdodDogMCxcclxuXHRcdH0sIHRoaXMuZm9jdXNTZWFyY2gpO1xyXG5cdH0sXHJcblx0Zm9jdXNTZWFyY2ggKCkge1xyXG5cdFx0ZmluZERPTU5vZGUodGhpcy5yZWZzLnNlYXJjaCkuZm9jdXMoKTtcclxuXHR9LFxyXG5cdHNlbGVjdEZpZWxkIChmaWVsZCkge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdHNlbGVjdGVkRmllbGQ6IGZpZWxkLFxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRhcHBseUZpbHRlciAodmFsdWUpIHtcclxuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goc2V0RmlsdGVyKHRoaXMuc3RhdGUuc2VsZWN0ZWRGaWVsZC5wYXRoLCB2YWx1ZSkpO1xyXG5cdFx0dGhpcy5jbG9zZVBvcG91dCgpO1xyXG5cdH0sXHJcblx0cmVuZGVyTGlzdCAoKSB7XHJcblx0XHRjb25zdCBhY3RpdmVGaWx0ZXJGaWVsZHMgPSB0aGlzLnByb3BzLmFjdGl2ZUZpbHRlcnMubWFwKG9iaiA9PiBvYmouZmllbGQpO1xyXG5cdFx0Y29uc3QgYWN0aXZlRmlsdGVyUGF0aHMgPSBhY3RpdmVGaWx0ZXJGaWVsZHMubWFwKG9iaiA9PiBvYmoucGF0aCk7XHJcblx0XHRjb25zdCB7IHNlYXJjaFN0cmluZyB9ID0gdGhpcy5zdGF0ZTtcclxuXHRcdGxldCBmaWx0ZXJlZEZpbHRlcnMgPSB0aGlzLnByb3BzLmF2YWlsYWJsZUZpbHRlcnM7XHJcblxyXG5cdFx0aWYgKHNlYXJjaFN0cmluZykge1xyXG5cdFx0XHRmaWx0ZXJlZEZpbHRlcnMgPSBmaWx0ZXJlZEZpbHRlcnNcclxuXHRcdFx0XHQuZmlsdGVyKGZpbHRlciA9PiBmaWx0ZXIudHlwZSAhPT0gJ2hlYWRpbmcnKVxyXG5cdFx0XHRcdC5maWx0ZXIoZmlsdGVyID0+IG5ldyBSZWdFeHAoc2VhcmNoU3RyaW5nKVxyXG5cdFx0XHRcdC50ZXN0KGZpbHRlci5maWVsZC5sYWJlbC50b0xvd2VyQ2FzZSgpKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgcG9wb3V0TGlzdCA9IGZpbHRlcmVkRmlsdGVycy5tYXAoKGVsLCBpKSA9PiB7XHJcblx0XHRcdGlmIChlbC50eXBlID09PSAnaGVhZGluZycpIHtcclxuXHRcdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdFx0PFBvcG91dExpc3QuSGVhZGluZyBrZXk9eydoZWFkaW5nXycgKyBpfT5cclxuXHRcdFx0XHRcdFx0e2VsLmNvbnRlbnR9XHJcblx0XHRcdFx0XHQ8L1BvcG91dExpc3QuSGVhZGluZz5cclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb25zdCBmaWx0ZXJJc0FjdGl2ZSA9IGFjdGl2ZUZpbHRlclBhdGhzLmxlbmd0aCAmJiAoYWN0aXZlRmlsdGVyUGF0aHMuaW5kZXhPZihlbC5maWVsZC5wYXRoKSA+IC0xKTtcclxuXHJcblx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0PFBvcG91dExpc3QuSXRlbVxyXG5cdFx0XHRcdFx0a2V5PXsnaXRlbV8nICsgZWwuZmllbGQucGF0aH1cclxuXHRcdFx0XHRcdGljb249e2ZpbHRlcklzQWN0aXZlID8gJ2NoZWNrJyA6ICdjaGV2cm9uLXJpZ2h0J31cclxuXHRcdFx0XHRcdGljb25Ib3Zlcj17ZmlsdGVySXNBY3RpdmUgPyAnY2hlY2snIDogJ2NoZXZyb24tcmlnaHQnfVxyXG5cdFx0XHRcdFx0aXNTZWxlY3RlZD17ISFmaWx0ZXJJc0FjdGl2ZX1cclxuXHRcdFx0XHRcdGxhYmVsPXtlbC5maWVsZC5sYWJlbH1cclxuXHRcdFx0XHRcdG9uQ2xpY2s9eygpID0+IHsgdGhpcy5zZWxlY3RGaWVsZChlbC5maWVsZCk7IH19IC8+XHJcblx0XHRcdCk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRjb25zdCBmb3JtRmllbGRTdHlsZXMgPSB7XHJcblx0XHRcdGJvcmRlckJvdHRvbTogJzFweCBkYXNoZWQgcmdiYSgwLCAwLCAwLCAwLjEpJyxcclxuXHRcdFx0bWFyZ2luQm90dG9tOiAnMWVtJyxcclxuXHRcdFx0cGFkZGluZ0JvdHRvbTogJzFlbScsXHJcblx0XHR9O1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxQb3BvdXQuUGFuZSBvbkxheW91dD17dGhpcy5zZXRQb3BvdXRIZWlnaHR9IGtleT1cImxpc3RcIj5cclxuXHRcdFx0XHQ8UG9wb3V0LkJvZHk+XHJcblx0XHRcdFx0XHQ8ZGl2IHN0eWxlPXtmb3JtRmllbGRTdHlsZXN9PlxyXG5cdFx0XHRcdFx0XHQ8Rm9ybUlucHV0XHJcblx0XHRcdFx0XHRcdFx0b25DaGFuZ2U9e3RoaXMudXBkYXRlU2VhcmNofVxyXG5cdFx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPVwiRmluZCBhIGZpbHRlci4uLlwiXHJcblx0XHRcdFx0XHRcdFx0cmVmPVwic2VhcmNoXCJcclxuXHRcdFx0XHRcdFx0XHR2YWx1ZT17dGhpcy5zdGF0ZS5zZWFyY2hTdHJpbmd9XHJcblx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdHtwb3BvdXRMaXN0fVxyXG5cdFx0XHRcdDwvUG9wb3V0LkJvZHk+XHJcblx0XHRcdDwvUG9wb3V0LlBhbmU+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyRm9ybSAoKSB7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8UG9wb3V0LlBhbmUgb25MYXlvdXQ9e3RoaXMuc2V0UG9wb3V0SGVpZ2h0fSBrZXk9XCJmb3JtXCI+XHJcblx0XHRcdFx0PExpc3RGaWx0ZXJzQWRkRm9ybVxyXG5cdFx0XHRcdFx0YWN0aXZlRmlsdGVycz17dGhpcy5wcm9wcy5hY3RpdmVGaWx0ZXJzfVxyXG5cdFx0XHRcdFx0ZmllbGQ9e3RoaXMuc3RhdGUuc2VsZWN0ZWRGaWVsZH1cclxuXHRcdFx0XHRcdG9uQXBwbHk9e3RoaXMuYXBwbHlGaWx0ZXJ9XHJcblx0XHRcdFx0XHRvbkNhbmNlbD17dGhpcy5jbG9zZVBvcG91dH1cclxuXHRcdFx0XHRcdG9uQmFjaz17dGhpcy5uYXZpZ2F0ZUJhY2t9XHJcblx0XHRcdFx0XHRtYXhIZWlnaHQ9e3RoaXMucHJvcHMubWF4SGVpZ2h0fVxyXG5cdFx0XHRcdFx0b25IZWlnaHRDaGFuZ2U9e3RoaXMuc2V0UG9wb3V0SGVpZ2h0fVxyXG5cdFx0XHRcdFx0ZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0PC9Qb3BvdXQuUGFuZT5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgeyBpc09wZW4sIHNlbGVjdGVkRmllbGQgfSA9IHRoaXMuc3RhdGU7XHJcblx0XHRjb25zdCBwb3BvdXRCb2R5U3R5bGUgPSB0aGlzLnN0YXRlLmlubmVySGVpZ2h0XHJcblx0XHRcdD8geyBoZWlnaHQ6IHRoaXMuc3RhdGUuaW5uZXJIZWlnaHQgfVxyXG5cdFx0XHQ6IG51bGw7XHJcblx0XHRjb25zdCBwb3BvdXRQYW5lc0NsYXNzbmFtZSA9IGNsYXNzbmFtZXMoJ1BvcG91dF9fcGFuZXMnLCB7XHJcblx0XHRcdCdQb3BvdXRfX3Njcm9sbGFibGUtYXJlYSc6ICFzZWxlY3RlZEZpZWxkLFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdj5cclxuXHRcdFx0XHQ8TGlzdEhlYWRlckJ1dHRvblxyXG5cdFx0XHRcdFx0YWN0aXZlPXtpc09wZW59XHJcblx0XHRcdFx0XHRnbHlwaD1cImV5ZVwiXHJcblx0XHRcdFx0XHRpZD1cImxpc3RIZWFkZXJGaWx0ZXJCdXR0b25cIlxyXG5cdFx0XHRcdFx0bGFiZWw9XCJGaWx0ZXJcIlxyXG5cdFx0XHRcdFx0b25DbGljaz17aXNPcGVuID8gdGhpcy5jbG9zZVBvcG91dCA6IHRoaXMub3BlblBvcG91dH1cclxuXHRcdFx0XHQvPlxyXG5cdFx0XHRcdDxQb3BvdXQgaXNPcGVuPXtpc09wZW59IG9uQ2FuY2VsPXt0aGlzLmNsb3NlUG9wb3V0fSByZWxhdGl2ZVRvSUQ9XCJsaXN0SGVhZGVyRmlsdGVyQnV0dG9uXCI+XHJcblx0XHRcdFx0XHQ8UG9wb3V0LkhlYWRlclxyXG5cdFx0XHRcdFx0XHRsZWZ0QWN0aW9uPXtzZWxlY3RlZEZpZWxkID8gdGhpcy5uYXZpZ2F0ZUJhY2sgOiBudWxsfVxyXG5cdFx0XHRcdFx0XHRsZWZ0SWNvbj17c2VsZWN0ZWRGaWVsZCA/ICdjaGV2cm9uLWxlZnQnIDogbnVsbH1cclxuXHRcdFx0XHRcdFx0dGl0bGU9e3NlbGVjdGVkRmllbGQgPyBzZWxlY3RlZEZpZWxkLmxhYmVsIDogJ0ZpbHRlcid9XHJcblx0XHRcdFx0XHRcdHRyYW5zaXRpb25EaXJlY3Rpb249e3NlbGVjdGVkRmllbGQgPyAnbmV4dCcgOiAncHJldid9IC8+XHJcblx0XHRcdFx0XHQ8VHJhbnNpdGlvblxyXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9e3BvcG91dFBhbmVzQ2xhc3NuYW1lfVxyXG5cdFx0XHRcdFx0XHRjb21wb25lbnQ9XCJkaXZcIlxyXG5cdFx0XHRcdFx0XHRzdHlsZT17cG9wb3V0Qm9keVN0eWxlfVxyXG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uTmFtZT17c2VsZWN0ZWRGaWVsZCA/ICdQb3BvdXRfX3BhbmUtbmV4dCcgOiAnUG9wb3V0X19wYW5lLXByZXYnfVxyXG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uRW50ZXJUaW1lb3V0PXszNjB9XHJcblx0XHRcdFx0XHRcdHRyYW5zaXRpb25MZWF2ZVRpbWVvdXQ9ezM2MH1cclxuXHRcdFx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0XHR7c2VsZWN0ZWRGaWVsZCA/IHRoaXMucmVuZGVyRm9ybSgpIDogdGhpcy5yZW5kZXJMaXN0KCl9XHJcblx0XHRcdFx0XHQ8L1RyYW5zaXRpb24+XHJcblx0XHRcdFx0PC9Qb3BvdXQ+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTGlzdEZpbHRlcnNBZGQ7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IFBvcG91dCBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvUG9wb3V0JztcclxuXHJcbmltcG9ydCB7IEZpbHRlcnMgfSBmcm9tICdGaWVsZFR5cGVzJztcclxuXHJcbnZhciBMaXN0RmlsdGVyc0FkZEZvcm0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRmaWVsZDogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG5cdFx0bWF4SGVpZ2h0OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxyXG5cdFx0b25BcHBseTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcblx0XHRvbkNhbmNlbDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcblx0XHRvbkhlaWdodENoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcblx0fSxcclxuXHRnZXRJbml0aWFsU3RhdGUgKCkge1xyXG5cdFx0Y29uc3QgZmlsdGVyQ29tcG9uZW50ID0gRmlsdGVyc1t0aGlzLnByb3BzLmZpZWxkLnR5cGVdO1xyXG5cdFx0bGV0IGZpbHRlclZhbHVlID0gdGhpcy5wcm9wcy5hY3RpdmVGaWx0ZXJzLmZpbHRlcihpID0+IGkuZmllbGQucGF0aCA9PT0gdGhpcy5wcm9wcy5maWVsZC5wYXRoKVswXTtcclxuXHRcdGlmIChmaWx0ZXJWYWx1ZSkge1xyXG5cdFx0XHRmaWx0ZXJWYWx1ZSA9IGZpbHRlclZhbHVlLnZhbHVlO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZmlsdGVyVmFsdWUgPSBmaWx0ZXJDb21wb25lbnQgJiYgZmlsdGVyQ29tcG9uZW50LmdldERlZmF1bHRWYWx1ZSA/IGZpbHRlckNvbXBvbmVudC5nZXREZWZhdWx0VmFsdWUoKSA6IHt9O1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0ZmlsdGVyQ29tcG9uZW50OiBmaWx0ZXJDb21wb25lbnQsXHJcblx0XHRcdGZpbHRlclZhbHVlOiBmaWx0ZXJWYWx1ZSxcclxuXHRcdH07XHJcblx0fSxcclxuXHR1cGRhdGVIZWlnaHQgKGJvZHlIZWlnaHQpIHtcclxuXHRcdGJvZHlIZWlnaHQgKz0gNDA7IC8vIFRPRE86IHJlbW92ZSBtYWdpYyBudW1iZXIsIGN1cnJlbnRseSBhY2NvdW50cyBmb3IgcGFkZGluZ1xyXG5cdFx0Y29uc3QgZm9vdGVySGVpZ2h0ID0gZmluZERPTU5vZGUodGhpcy5yZWZzLmZvb3Rlcikub2Zmc2V0SGVpZ2h0O1xyXG5cdFx0Y29uc3QgbWF4Qm9keUhlaWdodCA9IHRoaXMucHJvcHMubWF4SGVpZ2h0IC0gZm9vdGVySGVpZ2h0O1xyXG5cdFx0Y29uc3QgbmV3SGVpZ2h0ID0gYm9keUhlaWdodCArIGZvb3RlckhlaWdodDtcclxuXHRcdC8vIGNvbnNvbGUubG9nKGJvZHlIZWlnaHQsIG1heEJvZHlIZWlnaHQsICd8JywgbmV3SGVpZ2h0LCB0aGlzLnByb3BzLm1heEhlaWdodCk7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0Ym9keUhlaWdodDogTWF0aC5taW4oYm9keUhlaWdodCwgbWF4Qm9keUhlaWdodCksXHJcblx0XHR9LCAoKSA9PiB7XHJcblx0XHRcdHRoaXMucHJvcHMub25IZWlnaHRDaGFuZ2UoTWF0aC5taW4obmV3SGVpZ2h0LCB0aGlzLnByb3BzLm1heEhlaWdodCkpO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHR1cGRhdGVWYWx1ZSAoZmlsdGVyVmFsdWUpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRmaWx0ZXJWYWx1ZTogZmlsdGVyVmFsdWUsXHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdGhhbmRsZUZvcm1TdWJtaXQgKGUpIHtcclxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdHRoaXMucHJvcHMub25BcHBseSh0aGlzLnN0YXRlLmZpbHRlclZhbHVlKTtcclxuXHR9LFxyXG5cdHJlbmRlckludmFsaWRGaWx0ZXIgKCkge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdj5FcnJvcjogdHlwZSB7dGhpcy5wcm9wcy5maWVsZC50eXBlfSBoYXMgbm8gZmlsdGVyIFVJLjwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHR2YXIgRmlsdGVyQ29tcG9uZW50ID0gdGhpcy5zdGF0ZS5maWx0ZXJDb21wb25lbnQ7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVGb3JtU3VibWl0fT5cclxuXHRcdFx0XHQ8UG9wb3V0LkJvZHkgcmVmPVwiYm9keVwiIHNjcm9sbGFibGUgc3R5bGU9e3sgaGVpZ2h0OiB0aGlzLnN0YXRlLmJvZHlIZWlnaHQgfX0+XHJcblx0XHRcdFx0XHR7RmlsdGVyQ29tcG9uZW50ID8gPEZpbHRlckNvbXBvbmVudCBmaWVsZD17dGhpcy5wcm9wcy5maWVsZH0gZmlsdGVyPXt0aGlzLnN0YXRlLmZpbHRlclZhbHVlfSBvbkNoYW5nZT17dGhpcy51cGRhdGVWYWx1ZX0gb25IZWlnaHRDaGFuZ2U9e3RoaXMudXBkYXRlSGVpZ2h0fSAvPiA6IHRoaXMucmVuZGVySW52YWxpZEZpbHRlcigpfVxyXG5cdFx0XHRcdDwvUG9wb3V0LkJvZHk+XHJcblx0XHRcdFx0PFBvcG91dC5Gb290ZXJcclxuXHRcdFx0XHRcdHJlZj1cImZvb3RlclwiXHJcblx0XHRcdFx0XHRwcmltYXJ5QnV0dG9uSXNTdWJtaXRcclxuXHRcdFx0XHRcdHByaW1hcnlCdXR0b25MYWJlbD1cIkFwcGx5XCJcclxuXHRcdFx0XHRcdHNlY29uZGFyeUJ1dHRvbkFjdGlvbj17dGhpcy5wcm9wcy5vbkNhbmNlbH1cclxuXHRcdFx0XHRcdHNlY29uZGFyeUJ1dHRvbkxhYmVsPVwiQ2FuY2VsXCIgLz5cclxuXHRcdFx0PC9mb3JtPlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTGlzdEZpbHRlcnNBZGRGb3JtO1xyXG4iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcblxyXG5jb25zdCBEQVRFX0ZPUk1BVCA9ICdZWVlZLU1NLUREJztcclxuY29uc3QgREFURVRJTUVfRk9STUFUID0gJ1lZWVktTU0tREQgaDptbTpzcyBhJztcclxuXHJcbmZ1bmN0aW9uIGdldEZpbHRlckxhYmVsIChmaWVsZCwgdmFsdWUpIHtcclxuXHRjb25zdCBsYWJlbCA9IGZpZWxkLmxhYmVsO1xyXG5cclxuXHRzd2l0Y2ggKGZpZWxkLnR5cGUpIHtcclxuXHRcdC8vIEJPT0xFQU5cclxuXHRcdGNhc2UgJ2Jvb2xlYW4nOiB7XHJcblx0XHRcdHJldHVybiB2YWx1ZS52YWx1ZVxyXG5cdFx0XHRcdD8gbGFiZWxcclxuXHRcdFx0XHQ6IGBOT1QgJHtsYWJlbH1gO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIERBVEVcclxuXHRcdGNhc2UgJ2RhdGUnOiB7XHJcblx0XHRcdHJldHVybiBgJHtsYWJlbH0gJHtyZXNvbHZlRGF0ZUZvcm1hdCh2YWx1ZSwgREFURV9GT1JNQVQpfWA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gREFURSBBUlJBWVxyXG5cdFx0Y2FzZSAnZGF0ZWFycmF5Jzoge1xyXG5cdFx0XHRjb25zdCBwcmVzZW5jZSA9IHZhbHVlLnByZXNlbmNlID09PSAnc29tZScgPyAnU29tZScgOiAnTm8nO1xyXG5cclxuXHRcdFx0cmV0dXJuIGAke3ByZXNlbmNlfSAke2xhYmVsfSAke3Jlc29sdmVEYXRlRm9ybWF0KHZhbHVlLCBEQVRFVElNRV9GT1JNQVQsICdhcmUnKX1gO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIERBVEVUSU1FXHJcblx0XHRjYXNlICdkYXRldGltZSc6IHtcclxuXHRcdFx0cmV0dXJuIGAke2xhYmVsfSAke3Jlc29sdmVEYXRlRm9ybWF0KHZhbHVlLCBEQVRFVElNRV9GT1JNQVQpfWA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gR0VPUE9JTlRcclxuXHRcdC8vIFRPRE8gZGlzdGFuY2UgbmVlZHMgYSBxdWFsaWZpZXIsIGN1cnJlbnRseSBkZWZhdWx0cyB0byBcImttXCI/XHJcblx0XHRjYXNlICdnZW9wb2ludCc6IHtcclxuXHRcdFx0Y29uc3QgbW9kZSA9IHZhbHVlLmRpc3RhbmNlLm1vZGUgPT09ICdtYXgnID8gJ2lzIHdpdGhpbicgOiAnaXMgYXQgbGVhc3QnO1xyXG5cdFx0XHRjb25zdCBkaXN0YW5jZSA9IGAke3ZhbHVlLmRpc3RhbmNlLnZhbHVlfWttYDtcclxuXHRcdFx0Y29uc3QgY29uanVuY3Rpb24gPSB2YWx1ZS5kaXN0YW5jZS5tb2RlID09PSAnbWF4JyA/ICdvZicgOiAnZnJvbSc7XHJcblx0XHRcdGNvbnN0IGxhdGxvbmcgPSBgJHt2YWx1ZS5sYXR9LCAke3ZhbHVlLmxvbn1gO1xyXG5cclxuXHRcdFx0cmV0dXJuIGAke2xhYmVsfSAke21vZGV9ICR7ZGlzdGFuY2V9ICR7Y29uanVuY3Rpb259ICR7bGF0bG9uZ31gO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIExPQ0FUSU9OXHJcblx0XHRjYXNlICdsb2NhdGlvbic6IHtcclxuXHRcdFx0Y29uc3Qgam9pbmVyID0gdmFsdWUuaW52ZXJ0ZWQgPyAnZG9lcyBOT1QgbWF0Y2gnIDogJ21hdGNoZXMnO1xyXG5cclxuXHRcdFx0Ly8gUmVtb3ZlIHVuZGVmaW5lZCB2YWx1ZXMgYmVmb3JlIHJlbmRlcmluZyB0aGUgdGVtcGxhdGUgbGl0ZXJhbFxyXG5cdFx0XHRjb25zdCBmb3JtYXR0ZWRWYWx1ZSA9IFtcclxuXHRcdFx0XHR2YWx1ZS5zdHJlZXQsXHJcblx0XHRcdFx0dmFsdWUuY2l0eSxcclxuXHRcdFx0XHR2YWx1ZS5zdGF0ZSxcclxuXHRcdFx0XHR2YWx1ZS5jb2RlLFxyXG5cdFx0XHRcdHZhbHVlLmNvdW50cnksXHJcblx0XHRcdF0uam9pbignICcpLnRyaW0oKTtcclxuXHJcblx0XHRcdHJldHVybiBgJHtsYWJlbH0gJHtqb2luZXJ9IFwiJHtmb3JtYXR0ZWRWYWx1ZX1cImA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTlVNQkVSICYgTU9ORVlcclxuXHRcdGNhc2UgJ251bWJlcic6XHJcblx0XHRjYXNlICdtb25leSc6IHtcclxuXHRcdFx0cmV0dXJuIGAke2xhYmVsfSAke3Jlc29sdmVOdW1iZXJGb3JtYXQodmFsdWUpfWA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTlVNQkVSIEFSUkFZXHJcblx0XHRjYXNlICdudW1iZXJhcnJheSc6IHtcclxuXHRcdFx0Y29uc3QgcHJlc2VuY2UgPSB2YWx1ZS5wcmVzZW5jZSA9PT0gJ3NvbWUnID8gJ1NvbWUnIDogJ05vJztcclxuXHJcblx0XHRcdHJldHVybiBgJHtwcmVzZW5jZX0gJHtsYWJlbH0gJHtyZXNvbHZlTnVtYmVyRm9ybWF0KHZhbHVlLCAnYXJlJyl9YDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBQQVNTV09SRFxyXG5cdFx0Y2FzZSAncGFzc3dvcmQnOiB7XHJcblx0XHRcdHJldHVybiB2YWx1ZS5leGlzdHNcclxuXHRcdFx0XHQ/IGAke2xhYmVsfSBpcyBzZXRgXHJcblx0XHRcdFx0OiBgJHtsYWJlbH0gaXMgTk9UIHNldGA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUkVMQVRJT05TSElQXHJcblx0XHQvLyBUT0RPIHBvcHVsYXRlIHJlbGF0aW9uc2hpcCwgY3VycmVudGx5IHJlbmRlcmluZyBhbiBJRFxyXG5cdFx0Y2FzZSAncmVsYXRpb25zaGlwJzoge1xyXG5cdFx0XHRsZXQgam9pbmVyID0gdmFsdWUuaW52ZXJ0ZWQgPyAnaXMgTk9UJyA6ICdpcyc7XHJcblx0XHRcdGxldCBmb3JtYXR0ZWRWYWx1ZSA9ICh2YWx1ZS52YWx1ZS5sZW5ndGggPiAxKVxyXG5cdFx0XHRcdD8gdmFsdWUudmFsdWUuam9pbignLCBvciAnKVxyXG5cdFx0XHRcdDogdmFsdWUudmFsdWVbMF07XHJcblxyXG5cdFx0XHRyZXR1cm4gYCR7bGFiZWx9ICR7am9pbmVyfSAke2Zvcm1hdHRlZFZhbHVlfWA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU0VMRUNUXHJcblx0XHRjYXNlICdzZWxlY3QnOiB7XHJcblx0XHRcdGxldCBqb2luZXIgPSB2YWx1ZS5pbnZlcnRlZCA/ICdpcyBOT1QnIDogJ2lzJztcclxuXHRcdFx0bGV0IGZvcm1hdHRlZFZhbHVlID0gKHZhbHVlLnZhbHVlLmxlbmd0aCA+IDEpXHJcblx0XHRcdFx0PyB2YWx1ZS52YWx1ZS5qb2luKCcsIG9yICcpXHJcblx0XHRcdFx0OiB2YWx1ZS52YWx1ZVswXTtcclxuXHJcblx0XHRcdHJldHVybiBgJHtsYWJlbH0gJHtqb2luZXJ9ICR7Zm9ybWF0dGVkVmFsdWV9YDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBURVhULUxJS0VcclxuXHRcdGNhc2UgJ2NvZGUnOlxyXG5cdFx0Y2FzZSAnY29sb3InOlxyXG5cdFx0Y2FzZSAnZW1haWwnOlxyXG5cdFx0Y2FzZSAnaHRtbCc6XHJcblx0XHRjYXNlICdrZXknOlxyXG5cdFx0Y2FzZSAnbWFya2Rvd24nOlxyXG5cdFx0Y2FzZSAnbmFtZSc6XHJcblx0XHRjYXNlICd0ZXh0JzpcclxuXHRcdGNhc2UgJ3RleHRhcmVhJzpcclxuXHRcdGNhc2UgJ3VybCc6IHtcclxuXHRcdFx0bGV0IG1vZGUgPSAnJztcclxuXHRcdFx0aWYgKHZhbHVlLm1vZGUgPT09ICdiZWdpbnNXaXRoJykge1xyXG5cdFx0XHRcdG1vZGUgPSB2YWx1ZS5pbnZlcnRlZCA/ICdkb2VzIE5PVCBiZWdpbiB3aXRoJyA6ICdiZWdpbnMgd2l0aCc7XHJcblx0XHRcdH0gZWxzZSBpZiAodmFsdWUubW9kZSA9PT0gJ2VuZHNXaXRoJykge1xyXG5cdFx0XHRcdG1vZGUgPSB2YWx1ZS5pbnZlcnRlZCA/ICdkb2VzIE5PVCBlbmQgd2l0aCcgOiAnZW5kcyB3aXRoJztcclxuXHRcdFx0fSBlbHNlIGlmICh2YWx1ZS5tb2RlID09PSAnZXhhY3RseScpIHtcclxuXHRcdFx0XHRtb2RlID0gdmFsdWUuaW52ZXJ0ZWQgPyAnaXMgTk9UIGV4YWN0bHknIDogJ2lzIGV4YWN0bHknO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlLm1vZGUgPT09ICdjb250YWlucycpIHtcclxuXHRcdFx0XHRtb2RlID0gdmFsdWUuaW52ZXJ0ZWQgPyAnZG9lcyBOT1QgY29udGFpbicgOiAnY29udGFpbnMnO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gYCR7bGFiZWx9ICR7bW9kZX0gXCIke3ZhbHVlLnZhbHVlfVwiYDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBURVhUQVJSQVlcclxuXHRcdGNhc2UgJ3RleHRhcnJheSc6IHtcclxuXHRcdFx0Y29uc3QgcHJlc2VuY2UgPSB2YWx1ZS5wcmVzZW5jZSA9PT0gJ3NvbWUnID8gJ1NvbWUnIDogJ05vJztcclxuXHRcdFx0bGV0IG1vZGUgPSAnJztcclxuXHRcdFx0aWYgKHZhbHVlLm1vZGUgPT09ICdiZWdpbnNXaXRoJykge1xyXG5cdFx0XHRcdG1vZGUgPSB2YWx1ZS5pbnZlcnRlZCA/ICdkbyBOT1QgYmVnaW4gd2l0aCcgOiAnYmVnaW4gd2l0aCc7XHJcblx0XHRcdH0gZWxzZSBpZiAodmFsdWUubW9kZSA9PT0gJ2VuZHNXaXRoJykge1xyXG5cdFx0XHRcdG1vZGUgPSB2YWx1ZS5pbnZlcnRlZCA/ICdkbyBOT1QgZW5kIHdpdGgnIDogJ2VuZCB3aXRoJztcclxuXHRcdFx0fSBlbHNlIGlmICh2YWx1ZS5tb2RlID09PSAnZXhhY3RseScpIHtcclxuXHRcdFx0XHRtb2RlID0gdmFsdWUuaW52ZXJ0ZWQgPyAnYXJlIE5PVCBleGFjdGx5JyA6ICdhcmUgZXhhY3RseSc7XHJcblx0XHRcdH0gZWxzZSBpZiAodmFsdWUubW9kZSA9PT0gJ2NvbnRhaW5zJykge1xyXG5cdFx0XHRcdG1vZGUgPSB2YWx1ZS5pbnZlcnRlZCA/ICdkbyBOT1QgY29udGFpbicgOiAnY29udGFpbic7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBgJHtwcmVzZW5jZX0gJHtsYWJlbH0gJHttb2RlfSBcIiR7dmFsdWUudmFsdWV9XCJgO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENBVENIQUxMXHJcblx0XHRkZWZhdWx0OiB7XHJcblx0XHRcdHJldHVybiBgJHtsYWJlbH0gXCIke3ZhbHVlLnZhbHVlfVwiYDtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5mdW5jdGlvbiByZXNvbHZlTnVtYmVyRm9ybWF0ICh2YWx1ZSwgY29uanVuY3Rpb24gPSAnaXMnKSB7XHJcblx0bGV0IG1vZGUgPSAnJztcclxuXHRpZiAodmFsdWUubW9kZSA9PT0gJ2VxdWFscycpIG1vZGUgPSBjb25qdW5jdGlvbjtcclxuXHRlbHNlIGlmICh2YWx1ZS5tb2RlID09PSAnZ3QnKSBtb2RlID0gYCR7Y29uanVuY3Rpb259IGdyZWF0ZXIgdGhhbmA7XHJcblx0ZWxzZSBpZiAodmFsdWUubW9kZSA9PT0gJ2x0JykgbW9kZSA9IGAke2Nvbmp1bmN0aW9ufSBsZXNzIHRoYW5gO1xyXG5cclxuXHRjb25zdCBmb3JtYXR0ZWRWYWx1ZSA9IHZhbHVlLm1vZGUgPT09ICdiZXR3ZWVuJ1xyXG5cdFx0PyBgaXMgYmV0d2VlbiAke3ZhbHVlLnZhbHVlLm1pbn0gYW5kICR7dmFsdWUudmFsdWUubWF4fWBcclxuXHRcdDogdmFsdWUudmFsdWU7XHJcblxyXG5cdHJldHVybiBgJHttb2RlfSAke2Zvcm1hdHRlZFZhbHVlfWA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc29sdmVEYXRlRm9ybWF0ICh2YWx1ZSwgZm9ybWF0LCBjb25qdW5jdGlvbiA9ICdpcycpIHtcclxuXHRjb25zdCBqb2luZXIgPSB2YWx1ZS5pbnZlcnRlZCA/IGAke2Nvbmp1bmN0aW9ufSBOT1RgIDogY29uanVuY3Rpb247XHJcblx0Y29uc3QgbW9kZSA9IHZhbHVlLm1vZGUgPT09ICdvbicgPyAnJyA6IHZhbHVlLm1vZGU7XHJcblx0Y29uc3QgZm9ybWF0dGVkVmFsdWUgPSB2YWx1ZS5tb2RlID09PSAnYmV0d2VlbidcclxuXHRcdD8gYCR7bW9tZW50KHZhbHVlLmFmdGVyKS5mb3JtYXQoZm9ybWF0KX0gYW5kICR7bW9tZW50KHZhbHVlLmJlZm9yZSkuZm9ybWF0KGZvcm1hdCl9YFxyXG5cdFx0OiBtb21lbnQodmFsdWUudmFsdWUpLmZvcm1hdChmb3JtYXQpO1xyXG5cclxuXHRyZXR1cm4gYCR7am9pbmVyfSAke21vZGV9ICR7Zm9ybWF0dGVkVmFsdWV9YDtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnZXRGaWx0ZXJMYWJlbDtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcblxyXG5pbXBvcnQgVGFibGVSb3cgZnJvbSAnLi9JdGVtc1RhYmxlUm93JztcclxuaW1wb3J0IERyYWdEcm9wIGZyb20gJy4vSXRlbXNUYWJsZURyYWdEcm9wJztcclxuXHJcbmltcG9ydCB7IFRBQkxFX0NPTlRST0xfQ09MVU1OX1dJRFRIIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uc3RhbnRzJztcclxuXHJcbmNvbnN0IEl0ZW1zVGFibGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRjaGVja2VkSXRlbXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuXHRcdGNvbHVtbnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxyXG5cdFx0ZGVsZXRlVGFibGVJdGVtOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdFx0aGFuZGxlU29ydFNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHRcdGl0ZW1zOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcblx0XHRsaXN0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcblx0XHRtYW5hZ2VNb2RlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxyXG5cdFx0cm93QWxlcnQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuXHR9LFxyXG5cdHJlbmRlckNvbHMoKSB7XHJcblx0XHRsZXQgY29scyA9IHRoaXMucHJvcHMuY29sdW1ucy5tYXAoY29sID0+IChcclxuXHRcdFx0PGNvbCBrZXk9e2NvbC5wYXRofSB3aWR0aD17Y29sLndpZHRofSAvPlxyXG5cdFx0KSk7XHJcblxyXG5cdFx0Ly8gYWRkIGRlbGV0ZSBjb2wgd2hlbiBhdmFpbGFibGVcclxuXHRcdGlmICghdGhpcy5wcm9wcy5saXN0Lm5vZGVsZXRlKSB7XHJcblx0XHRcdGNvbHMudW5zaGlmdChcclxuXHRcdFx0XHQ8Y29sIHdpZHRoPXtUQUJMRV9DT05UUk9MX0NPTFVNTl9XSURUSH0ga2V5PVwiZGVsZXRlXCIgLz5cclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBhZGQgc29ydCBjb2wgd2hlbiBhdmFpbGFibGVcclxuXHRcdGlmICh0aGlzLnByb3BzLmxpc3Quc29ydGFibGUpIHtcclxuXHRcdFx0Y29scy51bnNoaWZ0KFxyXG5cdFx0XHRcdDxjb2wgd2lkdGg9e1RBQkxFX0NPTlRST0xfQ09MVU1OX1dJRFRIfSBrZXk9XCJzb3J0YWJsZVwiIC8+XHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGNvbGdyb3VwPlxyXG5cdFx0XHRcdHtjb2xzfVxyXG5cdFx0XHQ8L2NvbGdyb3VwPlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdHJlbmRlckhlYWRlcnMoKSB7XHJcblx0XHRsZXQgbGlzdENvbnRyb2xDb3VudCA9IDA7XHJcblxyXG5cdFx0aWYgKHRoaXMucHJvcHMubGlzdC5zb3J0YWJsZSkgbGlzdENvbnRyb2xDb3VudCsrO1xyXG5cdFx0aWYgKCF0aGlzLnByb3BzLmxpc3Qubm9kZWxldGUpIGxpc3RDb250cm9sQ291bnQrKztcclxuXHJcblx0XHQvLyBzZXQgYWN0aXZlIHNvcnRcclxuXHRcdGNvbnN0IGFjdGl2ZVNvcnRQYXRoID0gdGhpcy5wcm9wcy5hY3RpdmVTb3J0LnBhdGhzWzBdO1xyXG5cclxuXHRcdC8vIHBhZCBmaXJzdCBjb2wgd2hlbiBjb250cm9scyBhcmUgYXZhaWxhYmxlXHJcblx0XHRjb25zdCBjZWxsUGFkID0gbGlzdENvbnRyb2xDb3VudCA/IChcclxuXHRcdFx0PHRoIGNvbFNwYW49e2xpc3RDb250cm9sQ291bnR9IC8+XHJcblx0XHQpIDogbnVsbDtcclxuXHJcblx0XHQvLyBtYXAgZWFjaCBoZWFkaW5nIGNvbHVtblxyXG5cdFx0Y29uc3QgY2VsbE1hcCA9IHRoaXMucHJvcHMuY29sdW1ucy5tYXAoY29sID0+IHtcclxuXHRcdFx0Y29uc3QgaXNTZWxlY3RlZCA9IGFjdGl2ZVNvcnRQYXRoICYmIGFjdGl2ZVNvcnRQYXRoLnBhdGggPT09IGNvbC5wYXRoO1xyXG5cdFx0XHRjb25zdCBpc0ludmVydGVkID0gaXNTZWxlY3RlZCAmJiBhY3RpdmVTb3J0UGF0aC5pbnZlcnQ7XHJcblx0XHRcdGNvbnN0IGJ1dHRvblRpdGxlID0gYFNvcnQgYnkgJHtjb2wubGFiZWx9JHtpc1NlbGVjdGVkICYmICFpc0ludmVydGVkID8gJyAoZGVzYyknIDogJyd9YDtcclxuXHRcdFx0Y29uc3QgY29sQ2xhc3NOYW1lID0gY2xhc3NuYW1lcygnSXRlbUxpc3RfX3NvcnQtYnV0dG9uIHRoLXNvcnQnLCB7XHJcblx0XHRcdFx0J3RoLXNvcnQtLWFzYyc6IGlzU2VsZWN0ZWQgJiYgIWlzSW52ZXJ0ZWQsXHJcblx0XHRcdFx0J3RoLXNvcnQtLWRlc2MnOiBpc0ludmVydGVkLFxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0PHRoIGtleT17Y29sLnBhdGh9IGNvbFNwYW49XCIxXCI+XHJcblx0XHRcdFx0XHQ8YnV0dG9uXHJcblx0XHRcdFx0XHRcdGNsYXNzTmFtZT17Y29sQ2xhc3NOYW1lfVxyXG5cdFx0XHRcdFx0XHRvbkNsaWNrPXsoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5wcm9wcy5oYW5kbGVTb3J0U2VsZWN0KFxyXG5cdFx0XHRcdFx0XHRcdFx0Y29sLnBhdGgsXHJcblx0XHRcdFx0XHRcdFx0XHRpc1NlbGVjdGVkICYmICFpc0ludmVydGVkXHJcblx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0fX1cclxuXHRcdFx0XHRcdFx0dGl0bGU9e2J1dHRvblRpdGxlfT5cclxuXHRcdFx0XHRcdFx0e2NvbC5sYWJlbH1cclxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwidGgtc29ydF9faWNvblwiIC8+XHJcblx0XHRcdFx0XHQ8L2J1dHRvbj5cclxuXHRcdFx0XHQ8L3RoPlxyXG5cdFx0XHQpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PHRoZWFkPlxyXG5cdFx0XHRcdDx0cj5cclxuXHRcdFx0XHRcdHtjZWxsUGFkfVxyXG5cdFx0XHRcdFx0e2NlbGxNYXB9XHJcblx0XHRcdFx0PC90cj5cclxuXHRcdFx0PC90aGVhZD5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXIoKSB7XHJcblx0XHRjb25zdCB7IGl0ZW1zIH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0aWYgKCFpdGVtcy5yZXN1bHRzLmxlbmd0aCkgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0Y29uc3QgdGFibGVCb2R5ID0gKHRoaXMucHJvcHMubGlzdC5zb3J0YWJsZSkgPyAoXHJcblx0XHRcdDxEcmFnRHJvcCB7Li4udGhpcy5wcm9wc30gLz5cclxuXHRcdCkgOiAoXHJcblx0XHRcdFx0PHRib2R5ID5cclxuXHRcdFx0XHRcdHtpdGVtcy5yZXN1bHRzLm1hcCgoaXRlbSwgaSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdFx0XHRcdDxUYWJsZVJvdyBrZXk9e2l0ZW0uaWR9XHJcblx0XHRcdFx0XHRcdFx0XHRkZWxldGVUYWJsZUl0ZW09e3RoaXMucHJvcHMuZGVsZXRlVGFibGVJdGVtfVxyXG5cdFx0XHRcdFx0XHRcdFx0aW5kZXg9e2l9XHJcblx0XHRcdFx0XHRcdFx0XHRzb3J0T3JkZXI9e2l0ZW0uc29ydE9yZGVyIHx8IDB9XHJcblx0XHRcdFx0XHRcdFx0XHRpZD17aXRlbS5pZH1cclxuXHRcdFx0XHRcdFx0XHRcdGl0ZW09e2l0ZW19XHJcblx0XHRcdFx0XHRcdFx0XHR7Li4udGhpcy5wcm9wc31cclxuXHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0fSl9XHJcblx0XHRcdFx0PC90Ym9keT5cclxuXHRcdFx0KTtcclxuXHRcdC8qKiBUTyBBREQgU0NST0xMIE9OIERJUkVDVE9SSUVTIFBBR0VTICovXHJcblx0XHRjb25zdCBkaXJlY3RvcnlfZGl2X2NsYXNzID0gIXRoaXMucHJvcHMubGlzdC5zY3JvbGxhYmxlID8gJ0l0ZW1MaXN0LXdyYXBwZXInIDogJ0l0ZW1MaXN0LXdyYXBwZXItd2l0aC1zY3JvbGwnO1xyXG5cdFx0Y29uc3QgdGFibGVfY2xhc3MgPSAhdGhpcy5wcm9wcy5saXN0LnNjcm9sbGFibGUgPyAnVGFibGUgSXRlbUxpc3QnIDogJ1RhYmxlIEl0ZW1MaXN0LXdpdGgtc2Nyb2xsJztcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtkaXJlY3RvcnlfZGl2X2NsYXNzfT5cclxuXHRcdFx0XHQ8dGFibGUgY2VsbFBhZGRpbmc9XCIwXCIgY2VsbFNwYWNpbmc9XCIwXCIgY2xhc3NOYW1lPXt0YWJsZV9jbGFzc30+XHJcblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJDb2xzKCl9XHJcblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJIZWFkZXJzKCl9XHJcblx0XHRcdFx0XHR7dGFibGVCb2R5fVxyXG5cdFx0XHRcdDwvdGFibGU+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IEl0ZW1zVGFibGU7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IERyYWdEcm9wQ29udGV4dCB9IGZyb20gJ3JlYWN0LWRuZCc7XHJcbmltcG9ydCBIVE1MNUJhY2tlbmQgZnJvbSAncmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQnO1xyXG5pbXBvcnQgeyBTb3J0YWJsZSB9IGZyb20gJy4vSXRlbXNUYWJsZVJvdyc7XHJcbmltcG9ydCBEcm9wWm9uZSBmcm9tICcuL0l0ZW1zVGFibGVEcmFnRHJvcFpvbmUnO1xyXG5cclxudmFyIEl0ZW1zVGFibGVEcmFnRHJvcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ0l0ZW1zVGFibGVEcmFnRHJvcCcsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRjb2x1bW5zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXHJcblx0XHRpZDogUmVhY3QuUHJvcFR5cGVzLmFueSxcclxuXHRcdGluZGV4OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxyXG5cdFx0aXRlbXM6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXHJcblx0XHRsaXN0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDx0Ym9keSA+XHJcblx0XHRcdFx0e3RoaXMucHJvcHMuaXRlbXMucmVzdWx0cy5tYXAoKGl0ZW0sIGkpID0+IHtcclxuXHRcdFx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0XHRcdDxTb3J0YWJsZSBrZXk9e2l0ZW0uaWR9XHJcblx0XHRcdFx0XHRcdFx0aW5kZXg9e2l9XHJcblx0XHRcdFx0XHRcdFx0c29ydE9yZGVyPXtpdGVtLnNvcnRPcmRlciB8fCAwfVxyXG5cdFx0XHRcdFx0XHRcdGlkPXtpdGVtLmlkfVxyXG5cdFx0XHRcdFx0XHRcdGl0ZW09e2l0ZW19XHJcblx0XHRcdFx0XHRcdFx0ey4uLnRoaXMucHJvcHN9XHJcblx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH0pfVxyXG5cdFx0XHRcdDxEcm9wWm9uZSB7Li4udGhpcy5wcm9wc30gLz5cclxuXHRcdFx0PC90Ym9keT5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IERyYWdEcm9wQ29udGV4dChIVE1MNUJhY2tlbmQpKEl0ZW1zVGFibGVEcmFnRHJvcCk7XHJcbiIsIi8qKlxyXG4gKiBUSElTIElTIE9SUEhBTkVEIEFORCBJU04nVCBSRU5ERVJFRCBBVCBUSEUgTU9NRU5UXHJcbiAqIFRISVMgV0FTIERPTkUgVE8gRklOSVNIIFRIRSBSRURVWCBJTlRFR1JBVElPTiwgV0lMTCBSRVdSSVRFIFNPT05cclxuICogLSBAbXhzdGJyXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IERyb3Bab25lVGFyZ2V0IGZyb20gJy4vSXRlbXNUYWJsZURyYWdEcm9wWm9uZVRhcmdldCc7XHJcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5cclxudmFyIEl0ZW1zVGFibGVEcmFnRHJvcFpvbmUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdJdGVtc1RhYmxlRHJhZ0Ryb3Bab25lJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGNvbHVtbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcclxuXHRcdGNvbm5lY3REcm9wVGFyZ2V0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHRcdGl0ZW1zOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxyXG5cdFx0bGlzdDogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcclxuXHR9LFxyXG5cdHJlbmRlclBhZ2VEcm9wcyAoKSB7XHJcblx0XHRjb25zdCB7IGl0ZW1zLCBjdXJyZW50UGFnZSwgcGFnZVNpemUgfSA9IHRoaXMucHJvcHM7XHJcblxyXG5cdFx0Y29uc3QgdG90YWxQYWdlcyA9IE1hdGguY2VpbChpdGVtcy5jb3VudCAvIHBhZ2VTaXplKTtcclxuXHRcdGNvbnN0IHN0eWxlID0geyBkaXNwbGF5OiB0b3RhbFBhZ2VzID4gMSA/IG51bGwgOiAnbm9uZScgfTtcclxuXHJcblx0XHRjb25zdCBwYWdlcyA9IFtdO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0b3RhbFBhZ2VzOyBpKyspIHtcclxuXHRcdFx0Y29uc3QgcGFnZSA9IGkgKyAxO1xyXG5cdFx0XHRjb25zdCBwYWdlSXRlbXMgPSAnJyArIChwYWdlICogcGFnZVNpemUgLSAocGFnZVNpemUgLSAxKSkgKyAnIC0gJyArIChwYWdlICogcGFnZVNpemUpO1xyXG5cdFx0XHRjb25zdCBjdXJyZW50ID0gKHBhZ2UgPT09IGN1cnJlbnRQYWdlKTtcclxuXHRcdFx0Y29uc3QgY2xhc3NOYW1lID0gY2xhc3NuYW1lcygnSXRlbUxpc3RfX2Ryb3B6b25lLS1wYWdlJywge1xyXG5cdFx0XHRcdCdpcy1hY3RpdmUnOiBjdXJyZW50LFxyXG5cdFx0XHR9KTtcclxuXHRcdFx0cGFnZXMucHVzaChcclxuXHRcdFx0XHQ8RHJvcFpvbmVUYXJnZXRcclxuXHRcdFx0XHRcdGtleT17J3BhZ2VfJyArIHBhZ2V9XHJcblx0XHRcdFx0XHRwYWdlPXtwYWdlfVxyXG5cdFx0XHRcdFx0Y2xhc3NOYW1lPXtjbGFzc05hbWV9XHJcblx0XHRcdFx0XHRwYWdlSXRlbXM9e3BhZ2VJdGVtc31cclxuXHRcdFx0XHRcdHBhZ2VTaXplPXtwYWdlU2l6ZX1cclxuXHRcdFx0XHRcdGN1cnJlbnRQYWdlPXtjdXJyZW50UGFnZX1cclxuXHRcdFx0XHRcdGRyYWc9e3RoaXMucHJvcHMuZHJhZ31cclxuXHRcdFx0XHRcdGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGNvbHMgPSB0aGlzLnByb3BzLmNvbHVtbnMubGVuZ3RoO1xyXG5cdFx0aWYgKHRoaXMucHJvcHMubGlzdC5zb3J0YWJsZSkgY29scysrO1xyXG5cdFx0aWYgKCF0aGlzLnByb3BzLmxpc3Qubm9kZWxldGUpIGNvbHMrKztcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDx0ciBzdHlsZT17c3R5bGV9PlxyXG5cdFx0XHRcdDx0ZCBjb2xTcGFuPXtjb2xzfSA+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIkl0ZW1MaXN0X19kcm9wem9uZVwiID5cclxuXHRcdFx0XHRcdFx0e3BhZ2VzfVxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImNsZWFyZml4XCIgLz5cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdDwvdGQ+XHJcblx0XHRcdDwvdHI+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHJldHVybiB0aGlzLnJlbmRlclBhZ2VEcm9wcygpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBJdGVtc1RhYmxlRHJhZ0Ryb3Bab25lO1xyXG4iLCIvKipcclxuICogVEhJUyBJUyBPUlBIQU5FRCBBTkQgSVNOJ1QgUkVOREVSRUQgQVQgVEhFIE1PTUVOVFxyXG4gKiBUSElTIFdBUyBET05FIFRPIEZJTklTSCBUSEUgUkVEVVggSU5URUdSQVRJT04sIFdJTEwgUkVXUklURSBTT09OXHJcbiAqIC0gQG14c3RiclxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IERyb3BUYXJnZXQgfSBmcm9tICdyZWFjdC1kbmQnO1xyXG5cclxuaW1wb3J0IHsgc2V0Q3VycmVudFBhZ2UgfSBmcm9tICcuLi8uLi9hY3Rpb25zJztcclxuXHJcbmxldCB0aW1lb3V0SUQgPSBmYWxzZTtcclxuXHJcbi8vIGRyb3AgdGFyZ2V0XHJcbnZhciBJdGVtc1RhYmxlRHJhZ0Ryb3Bab25lVGFyZ2V0ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnSXRlbXNUYWJsZURyYWdEcm9wWm9uZVRhcmdldCcsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRjb25uZWN0RHJvcFRhcmdldDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcblx0XHRpc092ZXI6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG5cdFx0cGFnZUl0ZW1zOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdH0sXHJcblx0Y29tcG9uZW50RGlkVXBkYXRlICgpIHtcclxuXHRcdGlmICh0aW1lb3V0SUQgJiYgIXRoaXMucHJvcHMuaXNPdmVyKSB7XHJcblx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0SUQpO1xyXG5cdFx0XHR0aW1lb3V0SUQgPSBmYWxzZTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRjb25zdCB7IHBhZ2VJdGVtcywgcGFnZSwgaXNPdmVyLCBkaXNwYXRjaCB9ID0gdGhpcy5wcm9wcztcclxuXHRcdGxldCB7IGNsYXNzTmFtZSB9ID0gdGhpcy5wcm9wcztcclxuXHRcdGlmIChpc092ZXIpIHtcclxuXHRcdFx0Y2xhc3NOYW1lICs9IChwYWdlID09PSB0aGlzLnByb3BzLmN1cnJlbnRQYWdlKSA/ICcgaXMtYXZhaWxhYmxlICcgOiAnIGlzLXdhaXRpbmcgJztcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLnByb3BzLmNvbm5lY3REcm9wVGFyZ2V0KFxyXG5cdFx0XHQ8ZGl2XHJcblx0XHRcdFx0Y2xhc3NOYW1lPXtjbGFzc05hbWV9XHJcblx0XHRcdFx0b25DbGljaz17KGUpID0+IHtcclxuXHRcdFx0XHRcdGRpc3BhdGNoKHNldEN1cnJlbnRQYWdlKHBhZ2UpKTtcclxuXHRcdFx0XHR9fVxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0e3BhZ2VJdGVtc31cclxuXHRcdFx0PC9kaXY+KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRzIGRyYWcgdGFyZ2V0LlxyXG4gKi9cclxuY29uc3QgZHJvcFRhcmdldCA9IHtcclxuXHRkcm9wIChwcm9wcywgbW9uaXRvciwgY29tcG9uZW50KSB7XHJcblx0XHQvLyB3ZSBzZW5kIG1hbnVhbCBkYXRhIHRvIGVuZERyYWcgdG8gc2VuZCB0aGlzIGl0ZW0gdG8gdGhlIGNvcnJlY3QgcGFnZVxyXG5cdFx0Y29uc3QgeyBwYWdlIH0gPSBwcm9wcy5kcmFnO1xyXG5cdFx0Y29uc3QgdGFyZ2V0UGFnZSA9IHByb3BzLnBhZ2U7XHJcblx0XHRjb25zdCBwYWdlU2l6ZSA9IHByb3BzLnBhZ2VTaXplO1xyXG5cclxuXHRcdGNvbnN0IGl0ZW0gPSBtb25pdG9yLmdldEl0ZW0oKTtcclxuXHRcdGl0ZW0uZ29Ub1BhZ2UgPSBwcm9wcy5wYWdlO1xyXG5cdFx0aXRlbS5wcmV2U29ydE9yZGVyID0gaXRlbS5zb3J0T3JkZXI7XHJcblx0XHQvLyBXb3JrIG91dCB0aGUgbmV3IHNvcnQgb3JkZXIuIElmIHRoZSBuZXcgcGFnZSBpcyBncmVhdGVyLCB3ZSdsbCBwdXQgaXQgYXQgdGhlIHN0YXJ0IG9mIHRoZSBwYWdlLCBhbmRcclxuXHRcdC8vIGlmIGl0J3Mgc21hbGxlciB3ZSdsbCBwdXQgaXQgYXQgdGhlIGVuZCBvZiB0aGUgcGFnZS5cclxuXHRcdGl0ZW0ubmV3U29ydE9yZGVyID0gKHRhcmdldFBhZ2UgPCBwYWdlKSA/ICh0YXJnZXRQYWdlICogcGFnZVNpemUpIDogKHRhcmdldFBhZ2UgKiBwYWdlU2l6ZSAtIChwYWdlU2l6ZSAtIDEpKTtcclxuXHRcdHJldHVybiBpdGVtO1xyXG5cdH0sXHJcblx0LypcclxuXHQqIFRPRE8gV29yayBvdXQgaWYgaXQncyBwb3NzaWJsZSB0byBpbXBsZW1lbnQgdGhpcyBpbiBhIHdheSB0aGF0IHdvcmtzLlxyXG5cdGhvdmVyIChwcm9wcywgbW9uaXRvciwgY29tcG9uZW50KSB7XHJcblx0XHRpZiAodGltZW91dElEKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGNvbnN0IHsgcGFnZSwgY3VycmVudFBhZ2UgfSA9IHByb3BzO1xyXG5cclxuXHRcdC8vIHNlbGZcclxuXHRcdGlmIChwYWdlID09PSBjdXJyZW50UGFnZSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG1vbml0b3IuaXNPdmVyKCkpIHtcclxuXHRcdFx0dGltZW91dElEID0gc2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0Ly8gSWYgdXNlciBob3ZlcnMgb3ZlciB0aGUgdGFyZ2V0IGZvciBhIHdoaWxlIGNoYW5nZSB0aGUgcGFnZS5cclxuXHRcdFx0XHQvLyBUT0RPIEdldCB0aGlzIHdvcmtpbmcuIEN1cnJlbnRseSwgaXQgbG9va3MgbGlrZSBpdCdzIGdvaW5nIHRvIHdvcmssIGJ1dCB3aGVuIHlvdVxyXG5cdFx0XHRcdC8vIGRyb3Agb250byBhIG5ldyBwYWdlLCBubyBkcm9wIGV2ZW50cyBhcmUgZmlyZWQsIGFuZCByZWFjdC1kbmQgZG9lc24ndCBoYXZlIGEgd2F5IHRvXHJcblx0XHRcdFx0Ly8gbWFudWFsbHkgZm9yY2UgdGhlbSB0byBoYXBwZW4uIE5vdCBzdXJlIHdoYXQgdG8gZG8gaGVyZS5cclxuXHRcdFx0XHRwcm9wcy5kaXNwYXRjaChzZXRDdXJyZW50UGFnZShwcm9wcy5wYWdlKSk7XHJcblxyXG5cclxuXHRcdFx0XHRjbGVhclRpbWVvdXQodGltZW91dElEKTtcclxuXHRcdFx0XHR0aW1lb3V0SUQgPSBmYWxzZTtcclxuXHRcdFx0fSwgNzUwKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdCovXHJcbn07XHJcbi8qKlxyXG4gKiBTcGVjaWZpZXMgdGhlIHByb3BzIHRvIGluamVjdCBpbnRvIHlvdXIgY29tcG9uZW50LlxyXG4gKi9cclxuZnVuY3Rpb24gZHJvcFByb3BzIChjb25uZWN0LCBtb25pdG9yKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdGNvbm5lY3REcm9wVGFyZ2V0OiBjb25uZWN0LmRyb3BUYXJnZXQoKSxcclxuXHRcdGlzT3ZlcjogbW9uaXRvci5pc092ZXIoKSxcclxuXHR9O1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBEcm9wVGFyZ2V0KCdpdGVtJywgZHJvcFRhcmdldCwgZHJvcFByb3BzKShJdGVtc1RhYmxlRHJhZ0Ryb3Bab25lVGFyZ2V0KTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcblxyXG5pbXBvcnQgTGlzdENvbnRyb2wgZnJvbSAnLi4vTGlzdENvbnRyb2wnO1xyXG5cclxuaW1wb3J0IHsgQ29sdW1ucyB9IGZyb20gJ0ZpZWxkVHlwZXMnO1xyXG5pbXBvcnQgeyBEcm9wVGFyZ2V0LCBEcmFnU291cmNlIH0gZnJvbSAncmVhY3QtZG5kJztcclxuXHJcbmltcG9ydCB7XHJcblx0c2V0RHJhZ0Jhc2UsXHJcblx0cmVzZXRJdGVtcyxcclxuXHRyZW9yZGVySXRlbXMsXHJcblx0c2V0Um93QWxlcnQsXHJcblx0bW92ZUl0ZW0sXHJcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucyc7XHJcblxyXG5jb25zdCBJdGVtc1JvdyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGNvbHVtbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcclxuXHRcdGlkOiBSZWFjdC5Qcm9wVHlwZXMuYW55LFxyXG5cdFx0aW5kZXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcblx0XHRpdGVtczogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcclxuXHRcdGxpc3Q6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXHJcblx0XHQvLyBJbmplY3RlZCBieSBSZWFjdCBEbkQ6XHJcblx0XHRpc0RyYWdnaW5nOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCwgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L3NvcnQtcHJvcC10eXBlc1xyXG5cdFx0Y29ubmVjdERyYWdTb3VyY2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9zb3J0LXByb3AtdHlwZXNcclxuXHRcdGNvbm5lY3REcm9wVGFyZ2V0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYywgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvc29ydC1wcm9wLXR5cGVzXHJcblx0XHRjb25uZWN0RHJhZ1ByZXZpZXc6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L3NvcnQtcHJvcC10eXBlc1xyXG5cdH0sXHJcblx0cmVuZGVyUm93IChpdGVtKSB7XHJcblx0XHRjb25zdCBpdGVtSWQgPSBpdGVtLmlkO1xyXG5cdFx0Y29uc3Qgcm93Q2xhc3NuYW1lID0gY2xhc3NuYW1lcyh7XHJcblx0XHRcdCdJdGVtTGlzdF9fcm93LS1kcmFnZ2luZyc6IHRoaXMucHJvcHMuaXNEcmFnZ2luZyxcclxuXHRcdFx0J0l0ZW1MaXN0X19yb3ctLXNlbGVjdGVkJzogdGhpcy5wcm9wcy5jaGVja2VkSXRlbXNbaXRlbUlkXSxcclxuXHRcdFx0J0l0ZW1MaXN0X19yb3ctLW1hbmFnZSc6IHRoaXMucHJvcHMubWFuYWdlTW9kZSxcclxuXHRcdFx0J0l0ZW1MaXN0X19yb3ctLXN1Y2Nlc3MnOiB0aGlzLnByb3BzLnJvd0FsZXJ0LnN1Y2Nlc3MgPT09IGl0ZW1JZCxcclxuXHRcdFx0J0l0ZW1MaXN0X19yb3ctLWZhaWx1cmUnOiB0aGlzLnByb3BzLnJvd0FsZXJ0LmZhaWwgPT09IGl0ZW1JZCxcclxuXHRcdH0pO1xyXG5cdFx0Ly8gaXRlbSBmaWVsZHNcclxuXHRcdHZhciBjZWxscyA9IHRoaXMucHJvcHMuY29sdW1ucy5tYXAoKGNvbCwgaSkgPT4ge1xyXG5cdFx0XHR2YXIgQ29sdW1uVHlwZSA9IENvbHVtbnNbY29sLnR5cGVdIHx8IENvbHVtbnMuX191bnJlY29nbmlzZWRfXztcclxuXHRcdFx0dmFyIGxpbmtUbyA9ICFpID8gYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke3RoaXMucHJvcHMubGlzdC5wYXRofS8ke2l0ZW1JZH1gIDogdW5kZWZpbmVkO1xyXG5cdFx0XHRyZXR1cm4gPENvbHVtblR5cGUga2V5PXtjb2wucGF0aH0gbGlzdD17dGhpcy5wcm9wcy5saXN0fSBjb2w9e2NvbH0gZGF0YT17aXRlbX0gbGlua1RvPXtsaW5rVG99IC8+O1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gYWRkIHNvcnRhYmxlIGljb24gd2hlbiBhcHBsaWNhYmxlXHJcblx0XHRpZiAodGhpcy5wcm9wcy5saXN0LnNvcnRhYmxlKSB7XHJcblx0XHRcdGNlbGxzLnVuc2hpZnQoPExpc3RDb250cm9sIGtleT1cIl9zb3J0XCIgdHlwZT1cInNvcnRhYmxlXCIgZHJhZ1NvdXJjZT17dGhpcy5wcm9wcy5jb25uZWN0RHJhZ1NvdXJjZX0gLz4pO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGFkZCBkZWxldGUvY2hlY2sgaWNvbiB3aGVuIGFwcGxpY2FibGVcclxuXHRcdGlmICghdGhpcy5wcm9wcy5saXN0Lm5vZGVsZXRlKSB7XHJcblx0XHRcdGNlbGxzLnVuc2hpZnQodGhpcy5wcm9wcy5tYW5hZ2VNb2RlID8gKFxyXG5cdFx0XHRcdDxMaXN0Q29udHJvbCBrZXk9XCJfY2hlY2tcIiB0eXBlPVwiY2hlY2tcIiBhY3RpdmU9e3RoaXMucHJvcHMuY2hlY2tlZEl0ZW1zW2l0ZW1JZF19IC8+XHJcblx0XHRcdCkgOiAoXHJcblx0XHRcdFx0PExpc3RDb250cm9sIGtleT1cIl9kZWxldGVcIiBvbkNsaWNrPXsoZSkgPT4gdGhpcy5wcm9wcy5kZWxldGVUYWJsZUl0ZW0oaXRlbSwgZSl9IHR5cGU9XCJkZWxldGVcIiAvPlxyXG5cdFx0XHQpKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgYWRkUm93ID0gKDx0ciBrZXk9eydpJyArIGl0ZW0uaWR9IG9uQ2xpY2s9e3RoaXMucHJvcHMubWFuYWdlTW9kZSA/IChlKSA9PiB0aGlzLnByb3BzLmNoZWNrVGFibGVJdGVtKGl0ZW0sIGUpIDogbnVsbH0gY2xhc3NOYW1lPXtyb3dDbGFzc25hbWV9PntjZWxsc308L3RyPik7XHJcblxyXG5cdFx0aWYgKHRoaXMucHJvcHMubGlzdC5zb3J0YWJsZSkge1xyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdC8vIHdlIGNvdWxkIGFkZCBhIHByZXZpZXcgY29udGFpbmVyL2ltYWdlXHJcblx0XHRcdFx0Ly8gdGhpcy5wcm9wcy5jb25uZWN0RHJhZ1ByZXZpZXcodGhpcy5wcm9wcy5jb25uZWN0RHJvcFRhcmdldChhZGRSb3cpKVxyXG5cdFx0XHRcdHRoaXMucHJvcHMuY29ubmVjdERyb3BUYXJnZXQoYWRkUm93KVxyXG5cdFx0XHQpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIChhZGRSb3cpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHJldHVybiB0aGlzLnJlbmRlclJvdyh0aGlzLnByb3BzLml0ZW0pO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gSXRlbXNSb3c7XHJcblxyXG4vLyBFeHBvc2UgU29ydGFibGVcclxuXHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRzIGRyYWcgc291cmNlLlxyXG4gKi9cclxuY29uc3QgZHJhZ0l0ZW0gPSB7XHJcblx0YmVnaW5EcmFnIChwcm9wcykge1xyXG5cdFx0Y29uc3Qgc2VuZCA9IHsgLi4ucHJvcHMgfTtcclxuXHRcdHByb3BzLmRpc3BhdGNoKHNldERyYWdCYXNlKHByb3BzLml0ZW0sIHByb3BzLmluZGV4KSk7XHJcblx0XHRyZXR1cm4geyAuLi5zZW5kIH07XHJcblx0fSxcclxuXHRlbmREcmFnIChwcm9wcywgbW9uaXRvciwgY29tcG9uZW50KSB7XHJcblx0XHRpZiAoIW1vbml0b3IuZGlkRHJvcCgpKSB7XHJcblx0XHRcdHByb3BzLmRpc3BhdGNoKHJlc2V0SXRlbXMocHJvcHMuaWQpKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgcGFnZSA9IHByb3BzLmN1cnJlbnRQYWdlO1xyXG5cdFx0Y29uc3QgcGFnZVNpemUgPSBwcm9wcy5wYWdlU2l6ZTtcclxuXHJcblx0XHQvLyBJZiB3ZSB3ZXJlIGRyb3BwZWQgb250byBhIHBhZ2UgY2hhbmdlIHRhcmdldCwgdGhlbiBkcm9wcGVkT24ucHJldlNvcnRPcmRlciBldGMgd2lsbCBiZVxyXG5cdFx0Ly8gc2V0IGJ5IHRoYXQgdGFyZ2V0LCBhbmQgd2Ugc2hvdWxkIHVzZSB0aG9zZSB2YWx1ZXMuIElmIHdlIHdlcmUganVzdCBkcm9wcGVkIG9udG8gYSBuZXcgcm93XHJcblx0XHQvLyB0aGVuIHdlIG5lZWQgdG8gY2FsY3VsYXRlIHRoZXNlIHZhbHVlcyBvdXJzZWx2ZXMuXHJcblx0XHRjb25zdCBkcm9wcGVkT24gPSBtb25pdG9yLmdldERyb3BSZXN1bHQoKTtcclxuXHJcblx0XHRjb25zdCBwcmV2U29ydE9yZGVyID0gZHJvcHBlZE9uLnByZXZTb3J0T3JkZXIgfHwgcHJvcHMuc29ydE9yZGVyO1xyXG5cdFx0Ly8gVG8gZXhwbGFpbiB0aGUgZm9sbG93aW5nIGxpbmUsIHN1cHBvc2Ugd2UgYXJlIG9uIHBhZ2UgMyBhbmQgdGhlcmUgYXJlIDEwIGl0ZW1zIHBlciBwYWdlLlxyXG5cdFx0Ly8gUHJldmlvdXMgdG8gdGhpcyBwYWdlLCB0aGVyZSBhcmUgKDMgLSAxKSoxMCA9IDIwIGl0ZW1zIGJlZm9yZSB1cy4gSWYgd2UgaGF2ZSBpbmRleCA2XHJcblx0XHQvLyBvbiB0aGlzIHBhZ2UsIHRoZW4gd2UncmUgdGhlIDd0aCBpdGVtIHRvIGRpc3BsYXkgKGluZGV4IHN0YXJ0cyBmcm9tIDApLCBhbmQgc28gd2VcclxuXHRcdC8vIHdhbnQgdG8gdXBkYXRlIHRoZSBkaXNwbGF5IG9yZGVyIHRvIDIwICsgNyA9IDI3LlxyXG5cdFx0Y29uc3QgbmV3U29ydE9yZGVyID0gZHJvcHBlZE9uLm5ld1NvcnRPcmRlciB8fCAocGFnZSAtIDEpICogcGFnZVNpemUgKyBkcm9wcGVkT24uaW5kZXggKyAxO1xyXG5cclxuXHRcdC8vIElmIHdlIHdlcmUgZHJvcHBlZCBvbiBhIHBhZ2UgY2hhbmdlIHRhcmdldCwgdGhlbiBkcm9wcGVkT24uZ290VG9QYWdlIHdpbGwgYmUgc2V0LCBhbmQgd2Ugc2hvdWxkXHJcblx0XHQvLyBwYXNzIHRoaXMgdG8gcmVvcmRlckl0ZW1zLCB3aGljaCB3aWxsIHRoZW4gY2hhbmdlIHRoZSBwYWdlIGZvciB0aGUgdXNlci5cclxuXHRcdHByb3BzLmRpc3BhdGNoKHJlb3JkZXJJdGVtcyhwcm9wcy5pdGVtLCBwcmV2U29ydE9yZGVyLCBuZXdTb3J0T3JkZXIsIE51bWJlcihkcm9wcGVkT24uZ29Ub1BhZ2UpKSk7XHJcblx0fSxcclxufTtcclxuLyoqXHJcbiAqIEltcGxlbWVudHMgZHJhZyB0YXJnZXQuXHJcbiAqL1xyXG5jb25zdCBkcm9wSXRlbSA9IHtcclxuXHRkcm9wIChwcm9wcywgbW9uaXRvciwgY29tcG9uZW50KSB7XHJcblx0XHRyZXR1cm4geyAuLi5wcm9wcyB9O1xyXG5cdH0sXHJcblx0aG92ZXIgKHByb3BzLCBtb25pdG9yLCBjb21wb25lbnQpIHtcclxuXHRcdC8vIHJlc2V0IHJvdyBhbGVydHNcclxuXHRcdGlmIChwcm9wcy5yb3dBbGVydC5zdWNjZXNzIHx8IHByb3BzLnJvd0FsZXJ0LmZhaWwpIHtcclxuXHRcdFx0cHJvcHMuZGlzcGF0Y2goc2V0Um93QWxlcnQoe1xyXG5cdFx0XHRcdHJlc2V0OiB0cnVlLFxyXG5cdFx0XHR9KSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgZHJhZ2dlZCA9IG1vbml0b3IuZ2V0SXRlbSgpLmluZGV4O1xyXG5cdFx0Y29uc3Qgb3ZlciA9IHByb3BzLmluZGV4O1xyXG5cclxuXHRcdC8vIHNlbGZcclxuXHRcdGlmIChkcmFnZ2VkID09PSBvdmVyKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRwcm9wcy5kaXNwYXRjaChtb3ZlSXRlbShkcmFnZ2VkLCBvdmVyLCBwcm9wcykpO1xyXG5cdFx0bW9uaXRvci5nZXRJdGVtKCkuaW5kZXggPSBvdmVyO1xyXG5cdH0sXHJcbn07XHJcblxyXG4vKipcclxuICogU3BlY2lmaWVzIHRoZSBwcm9wcyB0byBpbmplY3QgaW50byB5b3VyIGNvbXBvbmVudC5cclxuICovXHJcbmZ1bmN0aW9uIGRyYWdQcm9wcyAoY29ubmVjdCwgbW9uaXRvcikge1xyXG5cdHJldHVybiB7XHJcblx0XHRjb25uZWN0RHJhZ1NvdXJjZTogY29ubmVjdC5kcmFnU291cmNlKCksXHJcblx0XHRpc0RyYWdnaW5nOiBtb25pdG9yLmlzRHJhZ2dpbmcoKSxcclxuXHRcdGNvbm5lY3REcmFnUHJldmlldzogY29ubmVjdC5kcmFnUHJldmlldygpLFxyXG5cdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyb3BQcm9wcyAoY29ubmVjdCkge1xyXG5cdHJldHVybiB7XHJcblx0XHRjb25uZWN0RHJvcFRhcmdldDogY29ubmVjdC5kcm9wVGFyZ2V0KCksXHJcblx0fTtcclxufTtcclxuXHJcbmV4cG9ydHMuU29ydGFibGUgPSBEcmFnU291cmNlKCdpdGVtJywgZHJhZ0l0ZW0sIGRyYWdQcm9wcykoRHJvcFRhcmdldCgnaXRlbScsIGRyb3BJdGVtLCBkcm9wUHJvcHMpKEl0ZW1zUm93KSk7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBhc3NpZ24gZnJvbSAnb2JqZWN0LWFzc2lnbic7XHJcblxyXG5pbXBvcnQgUG9wb3V0IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Qb3BvdXQnO1xyXG5pbXBvcnQgUG9wb3V0TGlzdCBmcm9tICcuLi8uLi8uLi9zaGFyZWQvUG9wb3V0L1BvcG91dExpc3QnO1xyXG5pbXBvcnQgeyBGb3JtSW5wdXQgfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50YWwnO1xyXG5pbXBvcnQgTGlzdEhlYWRlckJ1dHRvbiBmcm9tICcuL0xpc3RIZWFkZXJCdXR0b24nO1xyXG5cclxuaW1wb3J0IHsgc2V0QWN0aXZlQ29sdW1ucyB9IGZyb20gJy4uL2FjdGlvbnMnO1xyXG5cclxudmFyIExpc3RDb2x1bW5zRm9ybSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ0xpc3RDb2x1bW5zRm9ybScsXHJcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHNlbGVjdGVkQ29sdW1uczoge30sXHJcblx0XHRcdHNlYXJjaFN0cmluZzogJycsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Z2V0U2VsZWN0ZWRDb2x1bW5zRnJvbVN0b3JlICgpIHtcclxuXHRcdHZhciBzZWxlY3RlZENvbHVtbnMgPSB7fTtcclxuXHRcdHRoaXMucHJvcHMuYWN0aXZlQ29sdW1ucy5mb3JFYWNoKGNvbCA9PiB7XHJcblx0XHRcdHNlbGVjdGVkQ29sdW1uc1tjb2wucGF0aF0gPSB0cnVlO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gc2VsZWN0ZWRDb2x1bW5zO1xyXG5cdH0sXHJcblx0dG9nZ2xlUG9wb3V0ICh2aXNpYmxlKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiB0aGlzLmdldFNlbGVjdGVkQ29sdW1uc0Zyb21TdG9yZSgpLFxyXG5cdFx0XHRpc09wZW46IHZpc2libGUsXHJcblx0XHRcdHNlYXJjaFN0cmluZzogJycsXHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdHRvZ2dsZUNvbHVtbiAocGF0aCwgdmFsdWUpIHtcclxuXHRcdGNvbnN0IG5ld0NvbHVtbnMgPSBhc3NpZ24oe30sIHRoaXMuc3RhdGUuc2VsZWN0ZWRDb2x1bW5zKTtcclxuXHJcblx0XHRpZiAodmFsdWUpIHtcclxuXHRcdFx0bmV3Q29sdW1uc1twYXRoXSA9IHZhbHVlO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZGVsZXRlIG5ld0NvbHVtbnNbcGF0aF07XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdHNlbGVjdGVkQ29sdW1uczogbmV3Q29sdW1ucyxcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0YXBwbHlDb2x1bW5zICgpIHtcclxuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goc2V0QWN0aXZlQ29sdW1ucyhPYmplY3Qua2V5cyh0aGlzLnN0YXRlLnNlbGVjdGVkQ29sdW1ucykpKTtcclxuXHRcdHRoaXMudG9nZ2xlUG9wb3V0KGZhbHNlKTtcclxuXHR9LFxyXG5cdHVwZGF0ZVNlYXJjaCAoZSkge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7IHNlYXJjaFN0cmluZzogZS50YXJnZXQudmFsdWUgfSk7XHJcblx0fSxcclxuXHRyZW5kZXJDb2x1bW5zICgpIHtcclxuXHRcdGNvbnN0IGF2YWlsYWJsZUNvbHVtbnMgPSB0aGlzLnByb3BzLmF2YWlsYWJsZUNvbHVtbnM7XHJcblx0XHRjb25zdCB7IHNlYXJjaFN0cmluZyB9ID0gdGhpcy5zdGF0ZTtcclxuXHRcdGxldCBmaWx0ZXJlZENvbHVtbnMgPSBhdmFpbGFibGVDb2x1bW5zO1xyXG5cclxuXHRcdGlmIChzZWFyY2hTdHJpbmcpIHtcclxuXHRcdFx0ZmlsdGVyZWRDb2x1bW5zID0gZmlsdGVyZWRDb2x1bW5zXHJcblx0XHRcdFx0LmZpbHRlcihjb2x1bW4gPT4gY29sdW1uLnR5cGUgIT09ICdoZWFkaW5nJylcclxuXHRcdFx0XHQuZmlsdGVyKGNvbHVtbiA9PiBuZXcgUmVnRXhwKHNlYXJjaFN0cmluZykudGVzdChjb2x1bW4uZmllbGQubGFiZWwudG9Mb3dlckNhc2UoKSkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmaWx0ZXJlZENvbHVtbnMubWFwKChlbCwgaSkgPT4ge1xyXG5cdFx0XHRpZiAoZWwudHlwZSA9PT0gJ2hlYWRpbmcnKSB7XHJcblx0XHRcdFx0cmV0dXJuIDxQb3BvdXRMaXN0LkhlYWRpbmcga2V5PXsnaGVhZGluZ18nICsgaX0+e2VsLmNvbnRlbnR9PC9Qb3BvdXRMaXN0LkhlYWRpbmc+O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb25zdCBwYXRoID0gZWwuZmllbGQucGF0aDtcclxuXHRcdFx0Y29uc3Qgc2VsZWN0ZWQgPSB0aGlzLnN0YXRlLnNlbGVjdGVkQ29sdW1uc1twYXRoXTtcclxuXHJcblx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0PFBvcG91dExpc3QuSXRlbVxyXG5cdFx0XHRcdFx0a2V5PXsnY29sdW1uXycgKyBlbC5maWVsZC5wYXRofVxyXG5cdFx0XHRcdFx0aWNvbj17c2VsZWN0ZWQgPyAnY2hlY2snIDogJ2Rhc2gnfVxyXG5cdFx0XHRcdFx0aWNvbkhvdmVyPXtzZWxlY3RlZCA/ICdkYXNoJyA6ICdjaGVjayd9XHJcblx0XHRcdFx0XHRpc1NlbGVjdGVkPXshIXNlbGVjdGVkfVxyXG5cdFx0XHRcdFx0bGFiZWw9e2VsLmZpZWxkLmxhYmVsfVxyXG5cdFx0XHRcdFx0b25DbGljaz17KCkgPT4geyB0aGlzLnRvZ2dsZUNvbHVtbihwYXRoLCAhc2VsZWN0ZWQpOyB9fSAvPlxyXG5cdFx0XHQpO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgZm9ybUZpZWxkU3R5bGVzID0ge1xyXG5cdFx0XHRib3JkZXJCb3R0b206ICcxcHggZGFzaGVkIHJnYmEoMCwwLDAsMC4xKScsXHJcblx0XHRcdG1hcmdpbkJvdHRvbTogJzFlbScsXHJcblx0XHRcdHBhZGRpbmdCb3R0b206ICcxZW0nLFxyXG5cdFx0fTtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXY+XHJcblx0XHRcdFx0PExpc3RIZWFkZXJCdXR0b25cclxuXHRcdFx0XHRcdGFjdGl2ZT17dGhpcy5zdGF0ZS5pc09wZW59XHJcblx0XHRcdFx0XHRpZD1cImxpc3RIZWFkZXJDb2x1bW5CdXR0b25cIlxyXG5cdFx0XHRcdFx0Z2x5cGg9XCJsaXN0LXVub3JkZXJlZFwiXHJcblx0XHRcdFx0XHRsYWJlbD1cIkNvbHVtbnNcIlxyXG5cdFx0XHRcdFx0b25DbGljaz17KCkgPT4gdGhpcy50b2dnbGVQb3BvdXQoIXRoaXMuc3RhdGUuaXNPcGVuKX1cclxuXHRcdFx0XHQvPlxyXG5cdFx0XHRcdDxQb3BvdXQgaXNPcGVuPXt0aGlzLnN0YXRlLmlzT3Blbn0gb25DYW5jZWw9eygpID0+IHRoaXMudG9nZ2xlUG9wb3V0KGZhbHNlKX0gcmVsYXRpdmVUb0lEPVwibGlzdEhlYWRlckNvbHVtbkJ1dHRvblwiPlxyXG5cdFx0XHRcdFx0PFBvcG91dC5IZWFkZXIgdGl0bGU9XCJDb2x1bW5zXCIgLz5cclxuXHRcdFx0XHRcdDxQb3BvdXQuQm9keSBzY3JvbGxhYmxlPlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IHN0eWxlPXtmb3JtRmllbGRTdHlsZXN9PlxyXG5cdFx0XHRcdFx0XHRcdDxGb3JtSW5wdXRcclxuXHRcdFx0XHRcdFx0XHRcdGF1dG9Gb2N1c1xyXG5cdFx0XHRcdFx0XHRcdFx0b25DaGFuZ2U9e3RoaXMudXBkYXRlU2VhcmNofVxyXG5cdFx0XHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJGaW5kIGEgY29sdW1uLi4uXCJcclxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlPXt0aGlzLnN0YXRlLnNlYXJjaFN0cmluZ31cclxuXHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0PFBvcG91dExpc3Q+XHJcblx0XHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyQ29sdW1ucygpfVxyXG5cdFx0XHRcdFx0XHQ8L1BvcG91dExpc3Q+XHJcblx0XHRcdFx0XHQ8L1BvcG91dC5Cb2R5PlxyXG5cdFx0XHRcdFx0PFBvcG91dC5Gb290ZXJcclxuXHRcdFx0XHRcdFx0cHJpbWFyeUJ1dHRvbkFjdGlvbj17dGhpcy5hcHBseUNvbHVtbnN9XHJcblx0XHRcdFx0XHRcdHByaW1hcnlCdXR0b25MYWJlbD1cIkFwcGx5XCJcclxuXHRcdFx0XHRcdFx0c2Vjb25kYXJ5QnV0dG9uQWN0aW9uPXsoKSA9PiB0aGlzLnRvZ2dsZVBvcG91dChmYWxzZSl9XHJcblx0XHRcdFx0XHRcdHNlY29uZGFyeUJ1dHRvbkxhYmVsPVwiQ2FuY2VsXCIgLz5cclxuXHRcdFx0XHQ8L1BvcG91dD5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q29sdW1uc0Zvcm07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5cclxudmFyIExpc3RDb250cm9sID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0ZHJhZ1NvdXJjZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcblx0XHRvbkNsaWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHRcdHR5cGU6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2NoZWNrJywgJ2RlbGV0ZScsICdzb3J0YWJsZSddKS5pc1JlcXVpcmVkLFxyXG5cdH0sXHJcblx0cmVuZGVyQ29udHJvbCAoKSB7XHJcblx0XHR2YXIgaWNvbiA9ICdvY3RpY29uIG9jdGljb24tJztcclxuXHRcdHZhciBjbGFzc05hbWUgPSBjbGFzc25hbWVzKCdJdGVtTGlzdF9fY29udHJvbCBJdGVtTGlzdF9fY29udHJvbC0tJyArIHRoaXMucHJvcHMudHlwZSwge1xyXG5cdFx0XHQnaXMtYWN0aXZlJzogdGhpcy5wcm9wcy5hY3RpdmUsXHJcblx0XHR9KTtcclxuXHRcdHZhciB0YWJpbmRleCA9IHRoaXMucHJvcHMudHlwZSA9PT0gJ3NvcnRhYmxlJyA/IC0xIDogbnVsbDtcclxuXHJcblx0XHRpZiAodGhpcy5wcm9wcy50eXBlID09PSAnY2hlY2snKSB7XHJcblx0XHRcdGljb24gKz0gJ2NoZWNrJztcclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLnByb3BzLnR5cGUgPT09ICdkZWxldGUnKSB7XHJcblx0XHRcdGljb24gKz0gJ3RyYXNoY2FuJztcclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLnByb3BzLnR5cGUgPT09ICdzb3J0YWJsZScpIHtcclxuXHRcdFx0aWNvbiArPSAndGhyZWUtYmFycyc7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHJlbmRlckJ1dHRvbiA9IChcclxuXHRcdFx0PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfSBjbGFzc05hbWU9e2NsYXNzTmFtZX0gdGFiSW5kZXg9e3RhYmluZGV4fT5cclxuXHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2ljb259IC8+XHJcblx0XHRcdDwvYnV0dG9uPlxyXG5cdFx0KTtcclxuXHRcdGlmICh0aGlzLnByb3BzLmRyYWdTb3VyY2UpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucHJvcHMuZHJhZ1NvdXJjZShyZW5kZXJCdXR0b24pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIHJlbmRlckJ1dHRvbjtcclxuXHRcdH1cclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHR2YXIgY2xhc3NOYW1lID0gJ0l0ZW1MaXN0X19jb2wtLWNvbnRyb2wgSXRlbUxpc3RfX2NvbC0tJyArIHRoaXMucHJvcHMudHlwZTtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8dGQgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxyXG5cdFx0XHRcdHt0aGlzLnJlbmRlckNvbnRyb2woKX1cclxuXHRcdFx0PC90ZD5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDb250cm9sO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcbmltcG9ydCBQb3BvdXQgZnJvbSAnLi4vLi4vLi4vc2hhcmVkL1BvcG91dCc7XG5pbXBvcnQgUG9wb3V0TGlzdCBmcm9tICcuLi8uLi8uLi9zaGFyZWQvUG9wb3V0L1BvcG91dExpc3QnO1xuaW1wb3J0IExpc3RIZWFkZXJCdXR0b24gZnJvbSAnLi9MaXN0SGVhZGVyQnV0dG9uJztcbmltcG9ydCB7IExhYmVsbGVkQ29udHJvbCwgRm9ybSwgRm9ybUZpZWxkLCBTZWdtZW50ZWRDb250cm9sIH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcblxuaW1wb3J0IHsgZG93bmxvYWRJdGVtcyB9IGZyb20gJy4uL2FjdGlvbnMnO1xuY29uc3QgRk9STUFUX09QVElPTlMgPSBbXG5cdHsgbGFiZWw6ICdFWENFTCcsIHZhbHVlOiAnY3N2JyB9LFxuXHR7IGxhYmVsOiAnSlNPTicsIHZhbHVlOiAnanNvbicgfSxcbl07XG5cbnZhciBMaXN0RG93bmxvYWRGb3JtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRwcm9wVHlwZXM6IHtcblx0XHRhY3RpdmVDb2x1bW5zOiBQcm9wVHlwZXMuYXJyYXksXG5cdFx0ZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdFx0bGlzdDogUHJvcFR5cGVzLm9iamVjdCxcblx0fSxcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Zm9ybWF0OiBGT1JNQVRfT1BUSU9OU1swXS52YWx1ZSxcblx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHR1c2VDdXJyZW50Q29sdW1uczogdHJ1ZSxcblx0XHRcdHNlbGVjdGVkQ29sdW1uczogdGhpcy5nZXREZWZhdWx0U2VsZWN0ZWRDb2x1bW5zKCksXG5cdFx0fTtcblx0fSxcblx0Z2V0RGVmYXVsdFNlbGVjdGVkQ29sdW1ucyAoKSB7XG5cdFx0dmFyIHNlbGVjdGVkQ29sdW1ucyA9IHt9O1xuXHRcdHRoaXMucHJvcHMuYWN0aXZlQ29sdW1ucy5mb3JFYWNoKGNvbCA9PiB7XG5cdFx0XHRzZWxlY3RlZENvbHVtbnNbY29sLnBhdGhdID0gdHJ1ZTtcblx0XHR9KTtcblx0XHRyZXR1cm4gc2VsZWN0ZWRDb2x1bW5zO1xuXHR9LFxuXHRnZXRMaXN0VUlFbGVtZW50cyAoKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJvcHMubGlzdC51aUVsZW1lbnRzLm1hcCgoZWwpID0+IHtcblx0XHRcdHJldHVybiBlbC50eXBlID09PSAnZmllbGQnID8ge1xuXHRcdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0XHRmaWVsZDogdGhpcy5wcm9wcy5saXN0LmZpZWxkc1tlbC5maWVsZF0sXG5cdFx0XHR9IDogZWw7XG5cdFx0fSk7XG5cdH0sXG5cdGFsbENvbHVtbnNTZWxlY3RlZCAoKSB7XG5cdFx0Y29uc3Qgc2VsZWN0ZWRDb2x1bW5zID0gT2JqZWN0LmtleXModGhpcy5zdGF0ZS5zZWxlY3RlZENvbHVtbnMpLmxlbmd0aDtcblx0XHRjb25zdCBjb2x1bW5BbW91bnQgPSB0aGlzLmdldExpc3RVSUVsZW1lbnRzKCkuZmlsdGVyKChlbCkgPT4gZWwudHlwZSAhPT0gJ2hlYWRpbmcnKS5sZW5ndGg7XG5cdFx0cmV0dXJuIHNlbGVjdGVkQ29sdW1ucyA9PT0gY29sdW1uQW1vdW50O1xuXHR9LFxuXHR0b2dnbGVQb3BvdXQgKHZpc2libGUpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGlzT3BlbjogdmlzaWJsZSxcblx0XHR9KTtcblx0fSxcblx0dG9nZ2xlQ29sdW1uIChjb2x1bW4sIHZhbHVlKSB7XG5cdFx0Y29uc3QgbmV3Q29sdW1ucyA9IGFzc2lnbih7fSwgdGhpcy5zdGF0ZS5zZWxlY3RlZENvbHVtbnMpO1xuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0bmV3Q29sdW1uc1tjb2x1bW5dID0gdmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlbGV0ZSBuZXdDb2x1bW5zW2NvbHVtbl07XG5cdFx0fVxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiBuZXdDb2x1bW5zLFxuXHRcdH0pO1xuXHR9LFxuXHRjaGFuZ2VGb3JtYXQgKHZhbHVlKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRmb3JtYXQ6IHZhbHVlLFxuXHRcdH0pO1xuXHR9LFxuXHR0b2dnbGVDdXJyZW50bHlTZWxlY3RlZENvbHVtbnMgKGUpIHtcblx0XHRjb25zdCBuZXdTdGF0ZSA9IHtcblx0XHRcdHVzZUN1cnJlbnRDb2x1bW5zOiBlLnRhcmdldC5jaGVja2VkLFxuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiB0aGlzLmdldERlZmF1bHRTZWxlY3RlZENvbHVtbnMoKSxcblx0XHR9O1xuXHRcdHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuXHR9LFxuXHRjbGlja1NlbGVjdEFsbCAoKSB7XG5cdFx0aWYgKHRoaXMuYWxsQ29sdW1uc1NlbGVjdGVkKCkpIHtcblx0XHRcdHRoaXMuc2VsZWN0Tm9Db2x1bW5zKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc2VsZWN0QWxsQ29sdW1ucygpO1xuXHRcdH1cblx0fSxcblx0c2VsZWN0QWxsQ29sdW1ucyAoKSB7XG5cdFx0Y29uc3QgbmV3Q29sdW1ucyA9IHt9O1xuXHRcdHRoaXMuZ2V0TGlzdFVJRWxlbWVudHMoKS5tYXAoKGVsKSA9PiB7XG5cdFx0XHRpZiAoZWwudHlwZSAhPT0gJ2hlYWRpbmcnKSB7XG5cdFx0XHRcdG5ld0NvbHVtbnNbZWwuZmllbGQucGF0aF0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiBuZXdDb2x1bW5zLFxuXHRcdH0pO1xuXHR9LFxuXHRzZWxlY3ROb0NvbHVtbnMgKCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiB7fSxcblx0XHR9KTtcblx0fSxcblx0aGFuZGxlRG93bmxvYWRSZXF1ZXN0ICgpIHtcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGRvd25sb2FkSXRlbXModGhpcy5zdGF0ZS5mb3JtYXQsIE9iamVjdC5rZXlzKHRoaXMuc3RhdGUuc2VsZWN0ZWRDb2x1bW5zKSkpO1xuXHRcdHRoaXMudG9nZ2xlUG9wb3V0KGZhbHNlKTtcblx0fSxcblx0cmVuZGVyQ29sdW1uU2VsZWN0ICgpIHtcblx0XHRpZiAodGhpcy5zdGF0ZS51c2VDdXJyZW50Q29sdW1ucykgcmV0dXJuIG51bGw7XG5cblx0XHRjb25zdCBwb3NzaWJsZUNvbHVtbnMgPSB0aGlzLmdldExpc3RVSUVsZW1lbnRzKCkubWFwKChlbCwgaSkgPT4ge1xuXHRcdFx0aWYgKGVsLnR5cGUgPT09ICdoZWFkaW5nJykge1xuXHRcdFx0XHRyZXR1cm4gPFBvcG91dExpc3QuSGVhZGluZyBrZXk9eydoZWFkaW5nXycgKyBpfT57ZWwuY29udGVudH08L1BvcG91dExpc3QuSGVhZGluZz47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGNvbHVtbktleSA9IGVsLmZpZWxkLnBhdGg7XG5cdFx0XHRjb25zdCBjb2x1bW5WYWx1ZSA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRDb2x1bW5zW2NvbHVtbktleV07XG5cblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDxQb3BvdXRMaXN0Lkl0ZW1cblx0XHRcdFx0XHRrZXk9eydpdGVtXycgKyBlbC5maWVsZC5wYXRofVxuXHRcdFx0XHRcdGljb249e2NvbHVtblZhbHVlID8gJ2NoZWNrJyA6ICdkYXNoJ31cblx0XHRcdFx0XHRpY29uSG92ZXI9e2NvbHVtblZhbHVlID8gJ2Rhc2gnIDogJ2NoZWNrJ31cblx0XHRcdFx0XHRpc1NlbGVjdGVkPXtjb2x1bW5WYWx1ZX1cblx0XHRcdFx0XHRsYWJlbD17ZWwuZmllbGQubGFiZWx9XG5cdFx0XHRcdFx0b25DbGljaz17KCkgPT4gdGhpcy50b2dnbGVDb2x1bW4oY29sdW1uS2V5LCAhY29sdW1uVmFsdWUpfSAvPlxuXHRcdFx0KTtcblx0XHR9KTtcblxuXHRcdGNvbnN0IGFsbENvbHVtbnNTZWxlY3RlZCA9IHRoaXMuYWxsQ29sdW1uc1NlbGVjdGVkKCk7XG5cdFx0Y29uc3QgY2hlY2tib3hMYWJlbCA9IGFsbENvbHVtbnNTZWxlY3RlZCA/ICdTZWxlY3QgTm9uZScgOiAnU2VsZWN0IEFsbCc7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdj5cblx0XHRcdFx0PEZvcm1GaWVsZCBvZmZzZXRBYnNlbnRMYWJlbD5cblx0XHRcdFx0XHQ8TGFiZWxsZWRDb250cm9sXG5cdFx0XHRcdFx0XHRjaGVja2VkPXthbGxDb2x1bW5zU2VsZWN0ZWR9XG5cdFx0XHRcdFx0XHRsYWJlbD17Y2hlY2tib3hMYWJlbH1cblx0XHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLmNsaWNrU2VsZWN0QWxsfVxuXHRcdFx0XHRcdFx0dHlwZT1cImNoZWNrYm94XCJcblx0XHRcdFx0XHRcdHZhbHVlXG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0PC9Gb3JtRmllbGQ+XG5cdFx0XHRcdDxkaXYgc3R5bGU9e3sgYm9yZGVyVG9wOiAnMXB4IGRhc2hlZCByZ2JhKDAsMCwwLDAuMSknLCBtYXJnaW5Ub3A6ICcxZW0nLCBwYWRkaW5nVG9wOiAnMWVtJyB9fT5cblx0XHRcdFx0XHR7cG9zc2libGVDb2x1bW5zfVxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0Y29uc3QgeyB1c2VDdXJyZW50Q29sdW1ucyB9ID0gdGhpcy5zdGF0ZTtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2PlxuXHRcdFx0XHQ8TGlzdEhlYWRlckJ1dHRvblxuXHRcdFx0XHRcdGFjdGl2ZT17dGhpcy5zdGF0ZS5pc09wZW59XG5cdFx0XHRcdFx0aWQ9XCJsaXN0SGVhZGVyRG93bmxvYWRCdXR0b25cIlxuXHRcdFx0XHRcdGdseXBoPVwiY2xvdWQtZG93bmxvYWRcIlxuXHRcdFx0XHRcdGxhYmVsPVwiRG93bmxvYWRcIlxuXHRcdFx0XHRcdG9uQ2xpY2s9eygpID0+IHRoaXMudG9nZ2xlUG9wb3V0KCF0aGlzLnN0YXRlLmlzT3Blbil9XG5cdFx0XHRcdC8+XG5cdFx0XHRcdDxQb3BvdXQgaXNPcGVuPXt0aGlzLnN0YXRlLmlzT3Blbn0gb25DYW5jZWw9eygpID0+IHRoaXMudG9nZ2xlUG9wb3V0KGZhbHNlKX0gcmVsYXRpdmVUb0lEPVwibGlzdEhlYWRlckRvd25sb2FkQnV0dG9uXCI+XG5cdFx0XHRcdFx0PFBvcG91dC5IZWFkZXIgdGl0bGU9XCJEb3dubG9hZFwiIC8+XG5cdFx0XHRcdFx0PFBvcG91dC5Cb2R5IHNjcm9sbGFibGU+XG5cdFx0XHRcdFx0XHQ8Rm9ybSBsYXlvdXQ9XCJob3Jpem9udGFsXCIgbGFiZWxXaWR0aD17MTAwfSBjb21wb25lbnQ9XCJkaXZcIj5cblx0XHRcdFx0XHRcdFx0PEZvcm1GaWVsZCBsYWJlbD1cIkZpbGUgZm9ybWF0OlwiPlxuXHRcdFx0XHRcdFx0XHRcdDxTZWdtZW50ZWRDb250cm9sXG5cdFx0XHRcdFx0XHRcdFx0XHRlcXVhbFdpZHRoU2VnbWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLmNoYW5nZUZvcm1hdH1cblx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnM9e0ZPUk1BVF9PUFRJT05TfVxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWU9e3RoaXMuc3RhdGUuZm9ybWF0fVxuXHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdDwvRm9ybUZpZWxkPlxuXHRcdFx0XHRcdFx0XHQ8Rm9ybUZpZWxkIGxhYmVsPVwiQ29sdW1uczpcIiBzdHlsZT17eyBtYXJnaW5Cb3R0b206IDAgfX0+XG5cdFx0XHRcdFx0XHRcdFx0PExhYmVsbGVkQ29udHJvbFxuXHRcdFx0XHRcdFx0XHRcdFx0YXV0b0ZvY3VzXG5cdFx0XHRcdFx0XHRcdFx0XHRjaGVja2VkPXt1c2VDdXJyZW50Q29sdW1uc31cblx0XHRcdFx0XHRcdFx0XHRcdGxhYmVsPVwiVXNlIGN1cnJlbnRseSBzZWxlY3RlZFwiXG5cdFx0XHRcdFx0XHRcdFx0XHRvbkNoYW5nZT17dGhpcy50b2dnbGVDdXJyZW50bHlTZWxlY3RlZENvbHVtbnN9XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlPVwiY2hlY2tib3hcIlxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWVcblx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHQ8L0Zvcm1GaWVsZD5cblx0XHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyQ29sdW1uU2VsZWN0KCl9XG5cdFx0XHRcdFx0XHQ8L0Zvcm0+XG5cdFx0XHRcdFx0PC9Qb3BvdXQuQm9keT5cblx0XHRcdFx0XHQ8UG9wb3V0LkZvb3RlclxuXHRcdFx0XHRcdFx0cHJpbWFyeUJ1dHRvbkFjdGlvbj17dGhpcy5oYW5kbGVEb3dubG9hZFJlcXVlc3R9XG5cdFx0XHRcdFx0XHRwcmltYXJ5QnV0dG9uTGFiZWw9XCJEb3dubG9hZFwiXG5cdFx0XHRcdFx0XHRzZWNvbmRhcnlCdXR0b25BY3Rpb249eygpID0+IHRoaXMudG9nZ2xlUG9wb3V0KGZhbHNlKX1cblx0XHRcdFx0XHRcdHNlY29uZGFyeUJ1dHRvbkxhYmVsPVwiQ2FuY2VsXCIgLz5cblx0XHRcdFx0PC9Qb3BvdXQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdERvd25sb2FkRm9ybTtcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IERyb3Bkb3duQnV0dG9uLCBHbHlwaCB9IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XHJcblxyXG5mdW5jdGlvbiBMaXN0SGVhZGVyQnV0dG9uICh7IGNsYXNzTmFtZSwgbGFiZWwsIGdseXBoLCAuLi5wcm9wcyB9KSB7XHJcblx0cmV0dXJuIChcclxuXHRcdDxEcm9wZG93bkJ1dHRvbiBibG9jayB7Li4ucHJvcHN9PlxyXG5cdFx0XHQ8R2x5cGggbmFtZT17Z2x5cGh9IGFwaHJvZGl0ZVN0eWxlcz17Y2xhc3Nlcy5nbHlwaH0gLz5cclxuXHRcdFx0PHNwYW4gY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5sYWJlbCl9PntsYWJlbH08L3NwYW4+XHJcblx0XHQ8L0Ryb3Bkb3duQnV0dG9uPlxyXG5cdCk7XHJcbn07XHJcblxyXG5MaXN0SGVhZGVyQnV0dG9uLnByb3BUeXBlcyA9IHtcclxuXHRnbHlwaDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG59O1xyXG5cclxuLy8gc2hvdyBhbiBpY29uIG9uIHNtYWxsIHNjcmVlbnMgd2hlcmUgcmVhbCBlc3RhdGUgaXMgcHJlY2lvdXNcclxuLy8gb3RoZXJ3aXNlIHJlbmRlciB0aGUgbGFiZWxcclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRnbHlwaDoge1xyXG5cdFx0J2Rpc3BsYXknOiAnbm9uZScsXHJcblxyXG5cdFx0J0BtZWRpYSAobWF4LXdpZHRoOiA1MDBweCknOiB7XHJcblx0XHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxyXG5cdFx0fSxcclxuXHR9LFxyXG5cdGxhYmVsOiB7XHJcblx0XHQnZGlzcGxheSc6ICdpbmxpbmUtYmxvY2snLFxyXG5cclxuXHRcdCdAbWVkaWEgKG1heC13aWR0aDogNTAwcHgpJzoge1xyXG5cdFx0XHRkaXNwbGF5OiAnbm9uZScsXHJcblx0XHR9LFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RIZWFkZXJCdXR0b247XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZSc7XHJcbmltcG9ydCB7IGRhcmtlbiB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2NvbG9yJztcclxuXHJcbmltcG9ydCB7IEZvcm1JbnB1dCwgR2x5cGggfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50YWwnO1xyXG5cclxuZnVuY3Rpb24gTGlzdEhlYWRlclNlYXJjaCAoe1xyXG5cdGZvY3VzSW5wdXQsXHJcblx0aGFuZGxlQ2hhbmdlLFxyXG5cdGhhbmRsZUNsZWFyLFxyXG5cdGhhbmRsZUtleXVwLFxyXG5cdHZhbHVlLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdiB7Li4ucHJvcHN9IGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMud3JhcHBlcil9PlxyXG5cdFx0XHQ8Rm9ybUlucHV0XHJcblx0XHRcdFx0ZGF0YS1zZWFyY2gtaW5wdXQtZmllbGRcclxuXHRcdFx0XHRvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG5cdFx0XHRcdG9uS2V5VXA9e2hhbmRsZUtleXVwfVxyXG5cdFx0XHRcdHBsYWNlaG9sZGVyPVwiU2VhcmNoXCJcclxuXHRcdFx0XHR2YWx1ZT17dmFsdWV9XHJcblx0XHRcdC8+XHJcblx0XHRcdDxidXR0b25cclxuXHRcdFx0XHRjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmljb24sICEhdmFsdWUubGVuZ3RoICYmIGNsYXNzZXMuaWNvbldoZW5DbGVhcil9XHJcblx0XHRcdFx0ZGF0YS1zZWFyY2gtaW5wdXQtZmllbGQtY2xlYXItaWNvblxyXG5cdFx0XHRcdGRpc2FibGVkPXshdmFsdWUubGVuZ3RofVxyXG5cdFx0XHRcdG9uQ2xpY2s9e3ZhbHVlLmxlbmd0aCAmJiBoYW5kbGVDbGVhcn1cclxuXHRcdFx0XHR0aXRsZT1cIkNsZWFyIHNlYXJjaCBxdWVyeVwiXHJcblx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXHJcblx0XHRcdD5cclxuXHRcdFx0XHQ8R2x5cGggbmFtZT17dmFsdWUubGVuZ3RoID8gJ3gnIDogJ3NlYXJjaCd9IC8+XHJcblx0XHRcdDwvYnV0dG9uPlxyXG5cdFx0PC9kaXY+XHJcblx0KTtcclxufTtcclxuXHJcbkxpc3RIZWFkZXJTZWFyY2gucHJvcFR5cGVzID0ge1xyXG5cdGZvY3VzSW5wdXQ6IFByb3BUeXBlcy5ib29sLFxyXG5cdGhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHRoYW5kbGVDbGVhcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHRoYW5kbGVLZXl1cDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHR2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbmNvbnN0IGNsZWFySG92ZXJBbmRGb2N1c1N0eWxlcyA9IHtcclxuXHRjb2xvcjogdGhlbWUuY29sb3IuZGFuZ2VyLFxyXG5cdG91dGxpbmU6IDAsXHJcblx0dGV4dERlY29yYXRpb246ICdub25lJyxcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0d3JhcHBlcjoge1xyXG5cdFx0cG9zaXRpb246ICdyZWxhdGl2ZScsXHJcblx0fSxcclxuXHRpY29uOiB7XHJcblx0XHRiYWNrZ3JvdW5kOiAnbm9uZScsXHJcblx0XHRib3JkZXI6ICdub25lJyxcclxuXHRcdGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5NDAsXHJcblx0XHRoZWlnaHQ6ICcxMDAlJyxcclxuXHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG5cdFx0cmlnaHQ6IDAsXHJcblx0XHR0ZXh0QWxpZ246ICdjZW50ZXInLFxyXG5cdFx0dG9wOiAwLFxyXG5cdFx0d2lkdGg6ICcyLjJlbScsXHJcblx0XHR6SW5kZXg6IDIsIC8vIGFib3ZlIHRoZSBmb3JtIGZpZWxkIG9uIGZvY3VzXHJcblx0fSxcclxuXHRpY29uV2hlbkNsZWFyOiB7XHJcblx0XHQnOmhvdmVyJzogY2xlYXJIb3ZlckFuZEZvY3VzU3R5bGVzLFxyXG5cdFx0Jzpmb2N1cyc6IGNsZWFySG92ZXJBbmRGb2N1c1N0eWxlcyxcclxuXHRcdCc6YWN0aXZlJzoge1xyXG5cdFx0XHRjb2xvcjogZGFya2VuKHRoZW1lLmNvbG9yLmRhbmdlciwgMTApLFxyXG5cdFx0fSxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBMaXN0SGVhZGVyU2VhcmNoO1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxuaW1wb3J0IExpc3RTb3J0IGZyb20gJy4vTGlzdFNvcnQnO1xyXG5cclxuZnVuY3Rpb24gTGlzdEhlYWRlclRpdGxlICh7XHJcblx0YWN0aXZlU29ydCxcclxuXHRhdmFpbGFibGVDb2x1bW5zLFxyXG5cdGhhbmRsZVNvcnRTZWxlY3QsXHJcblx0dGl0bGUsXHJcblx0Li4ucHJvcHNcclxufSkge1xyXG5cdHJldHVybiAoXHJcblx0XHQ8aDIgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5oZWFkaW5nKX0gey4uLnByb3BzfT5cclxuXHRcdFx0e3RpdGxlfVxyXG5cdFx0XHQ8TGlzdFNvcnRcclxuXHRcdFx0XHRhY3RpdmVTb3J0PXthY3RpdmVTb3J0fVxyXG5cdFx0XHRcdGF2YWlsYWJsZUNvbHVtbnM9e2F2YWlsYWJsZUNvbHVtbnN9XHJcblx0XHRcdFx0aGFuZGxlU29ydFNlbGVjdD17aGFuZGxlU29ydFNlbGVjdH1cclxuXHRcdFx0Lz5cclxuXHRcdDwvaDI+XHJcblx0KTtcclxufTtcclxuXHJcbkxpc3RIZWFkZXJUaXRsZS5wcm9wVHlwZXMgPSB7XHJcblx0YWN0aXZlU29ydDogUHJvcFR5cGVzLm9iamVjdCxcclxuXHRhdmFpbGFibGVDb2x1bW5zOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSxcclxuXHRoYW5kbGVTb3J0U2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRoZWFkaW5nOiB7XHJcblx0XHRbYEBtZWRpYSAobWF4LXdpZHRoOiAke3RoZW1lLmJyZWFrcG9pbnQubW9iaWxlTWF4fSlgXToge1xyXG5cdFx0XHRmb250U2l6ZTogJzEuMjVlbScsXHJcblx0XHRcdGZvbnRXZWlnaHQ6IDUwMCxcclxuXHRcdH0sXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTGlzdEhlYWRlclRpdGxlO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge1xyXG5cdEdseXBoQnV0dG9uLFxyXG5cdElubGluZUdyb3VwIGFzIEdyb3VwLFxyXG5cdElubGluZUdyb3VwU2VjdGlvbiBhcyBTZWN0aW9uLFxyXG5cdFJlc3BvbnNpdmVUZXh0LFxyXG59IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZSc7XHJcbmltcG9ydCBQb3BvdXQgZnJvbSAnLi4vLi4vLi4vc2hhcmVkL1BvcG91dCc7XHJcbmltcG9ydCBQb3BvdXRMaXN0IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Qb3BvdXQvUG9wb3V0TGlzdCc7XHJcbmltcG9ydCBMaXN0Q29sdW1uc0Zvcm0gZnJvbSAnLi9MaXN0Q29sdW1uc0Zvcm0nO1xyXG5pbXBvcnQgTGlzdERvd25sb2FkRm9ybSBmcm9tICcuL0xpc3REb3dubG9hZEZvcm0nO1xyXG5pbXBvcnQgTGlzdEhlYWRlclNlYXJjaCBmcm9tICcuL0xpc3RIZWFkZXJTZWFyY2gnO1xyXG5cclxuaW1wb3J0IExpc3RGaWx0ZXJzQWRkIGZyb20gJy4vRmlsdGVyaW5nL0xpc3RGaWx0ZXJzQWRkJztcclxuXHJcbmZ1bmN0aW9uIEJ1dHRvbkRpdmlkZXIoeyBzdHlsZSwgLi4ucHJvcHMgfSkge1xyXG5cdHByb3BzLnN0eWxlID0ge1xyXG5cdFx0Ym9yZGVyTGVmdDogJzFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSknLFxyXG5cdFx0cGFkZGluZ0xlZnQ6ICcwLjc1ZW0nLFxyXG5cdFx0Li4uc3R5bGUsXHJcblx0fTtcclxuXHJcblx0cmV0dXJuIDxkaXYgey4uLnByb3BzfSAvPjtcclxufTtcclxuXHJcbmZ1bmN0aW9uIENyZWF0ZUJ1dHRvbih7IGxpc3ROYW1lLCBvbkNsaWNrLCAuLi5wcm9wcyB9KSB7XHJcblx0cmV0dXJuIChcclxuXHRcdDxHbHlwaEJ1dHRvblxyXG5cdFx0XHRibG9ja1xyXG5cdFx0XHRjb2xvcj1cInN1Y2Nlc3NcIlxyXG5cdFx0XHRkYXRhLWUyZS1saXN0LWNyZWF0ZS1idXR0b249XCJoZWFkZXJcIlxyXG5cdFx0XHRnbHlwaD1cInBsdXNcIlxyXG5cdFx0XHRvbkNsaWNrPXtvbkNsaWNrfVxyXG5cdFx0XHRwb3NpdGlvbj1cImxlZnRcIlxyXG5cdFx0XHR0aXRsZT17YENyZWF0ZSAke2xpc3ROYW1lfWB9XHJcblx0XHRcdHsuLi5wcm9wc31cclxuXHRcdD5cclxuXHRcdFx0PFJlc3BvbnNpdmVUZXh0XHJcblx0XHRcdFx0dmlzaWJsZVNNPVwiQ3JlYXRlXCJcclxuXHRcdFx0XHR2aXNpYmxlTUQ9XCJDcmVhdGVcIlxyXG5cdFx0XHRcdHZpc2libGVMRz17YENyZWF0ZSAke2xpc3ROYW1lfWB9XHJcblx0XHRcdC8+XHJcblx0XHQ8L0dseXBoQnV0dG9uPlxyXG5cdCk7XHJcbn07XHJcblxyXG5cclxudmFyIExpc3RIZWFkZXJUb29sYmFyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnTGlzdEhlYWRlclRvb2xiYXInLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0Y29sdW1uc0FjdGl2ZTogUHJvcFR5cGVzLmFycmF5LFxyXG5cdFx0Y29sdW1uc0F2YWlsYWJsZTogUHJvcFR5cGVzLmFycmF5LFxyXG5cdFx0Y3JlYXRlSXNBdmFpbGFibGU6IFByb3BUeXBlcy5ib29sLFxyXG5cdFx0Y3JlYXRlTGlzdE5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRjcmVhdGVPbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdFx0ZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcblx0XHRleHBhbmRJc0FjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXHJcblx0XHRleHBhbmRPbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdFx0ZmlsdGVyc0FjdGl2ZTogUHJvcFR5cGVzLmFycmF5LFxyXG5cdFx0ZmlsdGVyc0F2YWlsYWJsZTogUHJvcFR5cGVzLmFycmF5LFxyXG5cdFx0bGlzdDogUHJvcFR5cGVzLm9iamVjdCxcclxuXHRcdHNlYXJjaEhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHRcdHNlYXJjaEhhbmRsZUNsZWFyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdFx0c2VhcmNoSGFuZGxlS2V5dXA6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcblx0XHRjdXN0b21DcmVhdGVCdXR0b246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcblx0XHRzZWFyY2hWYWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcclxuXHR9LFxyXG5cdGdldEluaXRpYWxTdGF0ZSgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHBvcG91dElzT3BlbjogZmFsc2UsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Y2xvc2VQb3BvdXQoKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0cG9wb3V0SXNPcGVuOiBmYWxzZSxcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0aGFuZGxlQ3JlYXRlQnV0dG9uT3B0aW9ucyhhY3Rpb25fdHlwZSkge1xyXG5cdFx0dGhpcy5wcm9wcy5jdXN0b21DcmVhdGVCdXR0b24oYWN0aW9uX3R5cGUpO1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdHBvcG91dElzT3BlbjogZmFsc2UsXHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdHJlbmRlcigpIHtcclxuXHRcdGNvbnNvbGUubG9nKCdwcm9wcycsIHRoaXMucHJvcHMubGlzdClcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxzcGFuPlxyXG5cdFx0XHRcdDxHcm91cCBibG9jayBhcGhyb2RpdGVTdHlsZXM9e2NsYXNzZXMud3JhcHBlcn0+XHJcblx0XHRcdFx0XHQ8U2VjdGlvbiBncm93IGFwaHJvZGl0ZVN0eWxlcz17Y2xhc3Nlcy5zZWFyY2h9PlxyXG5cdFx0XHRcdFx0XHQ8TGlzdEhlYWRlclNlYXJjaFxyXG5cdFx0XHRcdFx0XHRcdGhhbmRsZUNoYW5nZT17dGhpcy5wcm9wcy5zZWFyY2hIYW5kbGVDaGFuZ2V9XHJcblx0XHRcdFx0XHRcdFx0aGFuZGxlQ2xlYXI9e3RoaXMucHJvcHMuc2VhcmNoSGFuZGxlQ2xlYXJ9XHJcblx0XHRcdFx0XHRcdFx0aGFuZGxlS2V5dXA9e3RoaXMucHJvcHMuc2VhcmNoSGFuZGxlS2V5dXB9XHJcblx0XHRcdFx0XHRcdFx0dmFsdWU9e3RoaXMucHJvcHMuc2VhcmNoVmFsdWV9XHJcblx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHQ8L1NlY3Rpb24+XHJcblx0XHRcdFx0XHQ8U2VjdGlvbiBncm93IGFwaHJvZGl0ZVN0eWxlcz17Y2xhc3Nlcy5idXR0b25zfT5cclxuXHRcdFx0XHRcdFx0PEdyb3VwIGJsb2NrPlxyXG5cdFx0XHRcdFx0XHRcdDxTZWN0aW9uIGFwaHJvZGl0ZVN0eWxlcz17Y2xhc3Nlcy5maWx0ZXJ9PlxyXG5cdFx0XHRcdFx0XHRcdFx0PExpc3RGaWx0ZXJzQWRkXHJcblx0XHRcdFx0XHRcdFx0XHRcdGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhY3RpdmVGaWx0ZXJzPXt0aGlzLnByb3BzLmZpbHRlcnNBY3RpdmV9XHJcblx0XHRcdFx0XHRcdFx0XHRcdGF2YWlsYWJsZUZpbHRlcnM9e3RoaXMucHJvcHMuZmlsdGVyc0F2YWlsYWJsZX1cclxuXHRcdFx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHRcdFx0PC9TZWN0aW9uPlxyXG5cdFx0XHRcdFx0XHRcdDxTZWN0aW9uIGFwaHJvZGl0ZVN0eWxlcz17Y2xhc3Nlcy5jb2x1bW5zfT5cclxuXHRcdFx0XHRcdFx0XHRcdDxMaXN0Q29sdW1uc0Zvcm1cclxuXHRcdFx0XHRcdFx0XHRcdFx0YXZhaWxhYmxlQ29sdW1ucz17dGhpcy5wcm9wcy5jb2x1bW5zQXZhaWxhYmxlfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhY3RpdmVDb2x1bW5zPXt0aGlzLnByb3BzLmNvbHVtbnNBY3RpdmV9XHJcblx0XHRcdFx0XHRcdFx0XHRcdGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxyXG5cdFx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0XHQ8L1NlY3Rpb24+XHJcblx0XHRcdFx0XHRcdFx0PFNlY3Rpb24gYXBocm9kaXRlU3R5bGVzPXtjbGFzc2VzLmRvd25sb2FkfT5cclxuXHRcdFx0XHRcdFx0XHRcdDxMaXN0RG93bmxvYWRGb3JtXHJcblx0XHRcdFx0XHRcdFx0XHRcdGFjdGl2ZUNvbHVtbnM9e3RoaXMucHJvcHMuY29sdW1uc0FjdGl2ZX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XHJcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3Q9e3RoaXMucHJvcHMubGlzdH1cclxuXHRcdFx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHRcdFx0PC9TZWN0aW9uPlxyXG5cdFx0XHRcdFx0XHRcdDxTZWN0aW9uIGFwaHJvZGl0ZVN0eWxlcz17Y2xhc3Nlcy5leHBhbmR9PlxyXG5cdFx0XHRcdFx0XHRcdFx0PEJ1dHRvbkRpdmlkZXI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDxHbHlwaEJ1dHRvblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFjdGl2ZT17dGhpcy5wcm9wcy5leHBhbmRJc0FjdGl2ZX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRnbHlwaD1cIm1pcnJvclwiXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0b25DbGljaz17dGhpcy5wcm9wcy5leHBhbmRPbkNsaWNrfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRpdGxlPVwiRXhwYW5kIHRhYmxlIHdpZHRoXCJcclxuXHRcdFx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0XHRcdDwvQnV0dG9uRGl2aWRlcj5cclxuXHRcdFx0XHRcdFx0XHQ8L1NlY3Rpb24+XHJcblx0XHRcdFx0XHRcdFx0e3RoaXMucHJvcHMuY3JlYXRlSXNBdmFpbGFibGUgJiYgPHNwYW4gaWQ9XCJsaXN0Q3JlYXRlSGVhZGVyQnV0dG9uXCI+XHJcblx0XHRcdFx0XHRcdFx0XHQ8U2VjdGlvbiBhcGhyb2RpdGVTdHlsZXM9e2NsYXNzZXMuY3JlYXRlfT5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PEJ1dHRvbkRpdmlkZXI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0PENyZWF0ZUJ1dHRvblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bGlzdE5hbWU9e3RoaXMucHJvcHMuY3JlYXRlTGlzdE5hbWV9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvbkNsaWNrPXt0aGlzLnByb3BzLmxpc3QuY3VzdG9tQ3JlYXRlQnV0dG9uID8gKCkgPT4gdGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBvcG91dElzT3BlbjogdHJ1ZSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0pIDogdGhpcy5wcm9wcy5jcmVhdGVPbkNsaWNrfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDwvQnV0dG9uRGl2aWRlcj5cclxuXHRcdFx0XHRcdFx0XHRcdDwvU2VjdGlvbj5cclxuXHRcdFx0XHRcdFx0XHQ8L3NwYW4+fVxyXG5cdFx0XHRcdFx0XHQ8L0dyb3VwPlxyXG5cdFx0XHRcdFx0PC9TZWN0aW9uPlxyXG5cdFx0XHRcdDwvR3JvdXA+XHJcblx0XHRcdFx0PFBvcG91dCBpc09wZW49e3RoaXMuc3RhdGUucG9wb3V0SXNPcGVufSBvbkNhbmNlbD17dGhpcy5jbG9zZVBvcG91dH0gcmVsYXRpdmVUb0lEPVwibGlzdENyZWF0ZUhlYWRlckJ1dHRvblwiPlxyXG5cdFx0XHRcdFx0PFBvcG91dC5IZWFkZXJcclxuXHRcdFx0XHRcdFx0dGl0bGU9e2BTZWxlY3QgJHt0aGlzLnByb3BzLmNyZWF0ZUxpc3ROYW1lfSBUeXBlYH1cclxuXHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHQ8UG9wb3V0LkJvZHk+XHJcblx0XHRcdFx0XHRcdHt0aGlzLnByb3BzLmxpc3QuY3VzdG9tQnV0dG9uT3B0aW9ucyAmJiB0aGlzLnByb3BzLmxpc3QuY3VzdG9tQnV0dG9uT3B0aW9ucy5tYXAoaXRlbSA9PiAoXHJcblx0XHRcdFx0XHRcdFx0PGJ1dHRvblxyXG5cdFx0XHRcdFx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXHJcblx0XHRcdFx0XHRcdFx0XHR0aXRsZT17aXRlbS5sYWJlbH1cclxuXHRcdFx0XHRcdFx0XHRcdGNsYXNzTmFtZT1cIlBvcG91dExpc3RfX2l0ZW1cIlxyXG5cdFx0XHRcdFx0XHRcdFx0a2V5PXtpdGVtLmtleX1cclxuXHRcdFx0XHRcdFx0XHRcdG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlQ3JlYXRlQnV0dG9uT3B0aW9ucyhpdGVtLmtleSl9XHJcblx0XHRcdFx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwiUG9wb3V0TGlzdF9faXRlbV9faWNvbiBvY3RpY29uIG9jdGljb24tY2hldnJvbi1yaWdodFwiPjwvc3Bhbj5cclxuXHRcdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cIlBvcG91dExpc3RfX2l0ZW1fX2xhYmVsXCI+e2l0ZW0ubGFiZWx9PC9zcGFuPlxyXG5cdFx0XHRcdFx0XHRcdDwvYnV0dG9uPlxyXG5cdFx0XHRcdFx0XHQpKX1cclxuXHRcdFx0XHRcdDwvUG9wb3V0LkJvZHk+XHJcblx0XHRcdFx0PC9Qb3BvdXQ+XHJcblx0XHRcdDwvc3BhbiA+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxuXHJcbmNvbnN0IHRhYmxldEdyb3dTdHlsZXMgPSB7XHJcblx0W2BAbWVkaWEgKG1heC13aWR0aDogJHt0aGVtZS5icmVha3BvaW50LnRhYmxldFBvcnRyYWl0TWF4fSlgXToge1xyXG5cdFx0ZmxleEdyb3c6IDEsXHJcblx0fSxcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0Ly8gbWFpbiB3cmFwcGVyXHJcblx0d3JhcHBlcjoge1xyXG5cdFx0W2BAbWVkaWEgKG1heC13aWR0aDogJHt0aGVtZS5icmVha3BvaW50LnRhYmxldFBvcnRyYWl0TWF4fSlgXToge1xyXG5cdFx0XHRmbGV4V3JhcDogJ3dyYXAnLFxyXG5cdFx0fSxcclxuXHR9LFxyXG5cclxuXHQvLyBidXR0b24gd3JhcHBlclxyXG5cdGJ1dHRvbnM6IHtcclxuXHRcdFtgQG1lZGlhIChtYXgtd2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC50YWJsZXRQb3J0cmFpdE1heH0pYF06IHtcclxuXHRcdFx0cGFkZGluZ0xlZnQ6IDAsXHJcblx0XHR9LFxyXG5cdH0sXHJcblxyXG5cdC8vIGNvbHNcclxuXHRleHBhbmQ6IHtcclxuXHRcdFtgQG1lZGlhIChtYXgtd2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC5kZXNrdG9wTWF4fSlgXToge1xyXG5cdFx0XHRkaXNwbGF5OiAnbm9uZScsXHJcblx0XHR9LFxyXG5cdH0sXHJcblx0ZmlsdGVyOiB7XHJcblx0XHRbYEBtZWRpYSAobWF4LXdpZHRoOiAke3RoZW1lLmJyZWFrcG9pbnQudGFibGV0UG9ydHJhaXRNYXh9KWBdOiB7XHJcblx0XHRcdHBhZGRpbmdMZWZ0OiAwLFxyXG5cdFx0XHRmbGV4R3JvdzogMSxcclxuXHRcdH0sXHJcblx0fSxcclxuXHRjb2x1bW5zOiB0YWJsZXRHcm93U3R5bGVzLFxyXG5cdGNyZWF0ZTogdGFibGV0R3Jvd1N0eWxlcyxcclxuXHRkb3dubG9hZDogdGFibGV0R3Jvd1N0eWxlcyxcclxuXHRzZWFyY2g6IHtcclxuXHRcdFtgQG1lZGlhIChtYXgtd2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC50YWJsZXRQb3J0cmFpdE1heH0pYF06IHtcclxuXHRcdFx0bWFyZ2luQm90dG9tOiAnMC43NWVtJyxcclxuXHRcdFx0bWluV2lkdGg6ICcxMDAlJyxcclxuXHRcdH0sXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTGlzdEhlYWRlclRvb2xiYXI7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7XHJcblx0QnV0dG9uLFxyXG5cdEdseXBoQnV0dG9uLFxyXG5cdElubGluZUdyb3VwIGFzIEdyb3VwLFxyXG5cdElubGluZUdyb3VwU2VjdGlvbiBhcyBTZWN0aW9uLFxyXG5cdFNwaW5uZXIsXHJcbn0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcclxuXHJcbmZ1bmN0aW9uIExpc3RNYW5hZ2VtZW50KHtcclxuXHRjaGVja2VkSXRlbUNvdW50LFxyXG5cdGhhbmRsZURlbGV0ZSxcclxuXHRoYW5kbGVTZWxlY3QsXHJcblx0aGFuZGxlVG9nZ2xlLFxyXG5cdGlzT3BlbixcclxuXHRpdGVtQ291bnQsXHJcblx0aXRlbXNQZXJQYWdlLFxyXG5cdG5vZGVsZXRlLFxyXG5cdG5vZWRpdCxcclxuXHRzZWxlY3RBbGxJdGVtc0xvYWRpbmcsXHJcblx0Y3VycmVudExpc3QsXHJcblx0aGFuZGxlQ3VzdG9tQWN0aW9uLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHQvLyBkbyBub3QgcmVuZGVyIGlmIHRoZXJlJ3Mgbm8gcmVzdWx0c1xyXG5cdC8vIG9yIGlmIGVkaXQvZGVsZXRlIHVuYXZhaWxhYmxlIG9uIHRoZSBsaXN0XHJcblx0aWYgKCFpdGVtQ291bnQgfHwgKG5vZGVsZXRlICYmIG5vZWRpdCkpIHJldHVybiBudWxsO1xyXG5cclxuXHRjb25zdCBidXR0b25Ob3RlU3R5bGVzID0geyBjb2xvcjogJyM5OTknLCBmb250V2VpZ2h0OiAnbm9ybWFsJyB9O1xyXG5cdGNvbnN0IGN1c3RvbUFjdGlvbkJ1dHRvbnMgPSBbXTtcclxuXHRpZiAoaXNPcGVuICYmIGN1cnJlbnRMaXN0ICYmIGN1cnJlbnRMaXN0LmN1c3RvbUFjdGlvbikge1xyXG5cdFx0Ly8gU0hPVyBEUk9QRE9XTiBPUFRJT04gRk9SIENVU1RPTSBBQ1RJT05TIElGICBjdXN0b21BY3Rpb25UeXBlID09PSAnZHJvcGRvd24nXHJcblx0XHRpZiAoY3VycmVudExpc3QuY3VzdG9tQWN0aW9uVHlwZSA9PT0gJ2Ryb3Bkb3duJykge1xyXG5cdFx0XHRjb25zdCBvcHRpb25zID0gW107XHJcblxyXG5cdFx0XHRvcHRpb25zLnB1c2goPG9wdGlvbiA+U2VsZWN0IEFjdGlvbjwvb3B0aW9uPik7XHJcblx0XHRcdGZvciAoY29uc3QgY3VzdG9tQWN0aW9uIG9mIGN1cnJlbnRMaXN0LmN1c3RvbUFjdGlvbikge1xyXG5cdFx0XHRcdG9wdGlvbnMucHVzaCg8b3B0aW9uIHZhbHVlPXtjdXN0b21BY3Rpb24ua2V5fT57Y3VzdG9tQWN0aW9uLmxhYmVsfSA8L29wdGlvbj4pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjdXN0b21BY3Rpb25CdXR0b25zLnB1c2goXHJcblx0XHRcdFx0PFNlY3Rpb24+XHJcblx0XHRcdFx0XHQ8c2VsZWN0XHJcblx0XHRcdFx0XHRcdHN0eWxlPXt7IHdpZHRoOiAyMDAsIGhlaWdodDogMzMsIGJvcmRlcldpZHRoOiAxLCBib3JkZXJSYWRpdXM6ICcwLjNyZW0nIH19XHJcblx0XHRcdFx0XHRcdC8vIGRpc2FibGVkPXshY2hlY2tlZEl0ZW1Db3VudH1cclxuXHRcdFx0XHRcdFx0b25DaGFuZ2U9eyhldmVudCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnN0IHNlbGVjdGVkQWN0aW9uID0gXy5maW5kKGN1cnJlbnRMaXN0LmN1c3RvbUFjdGlvbiwgeyBrZXk6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoc2VsZWN0ZWRBY3Rpb24pIHtcclxuXHRcdFx0XHRcdFx0XHRcdGhhbmRsZUN1c3RvbUFjdGlvbihzZWxlY3RlZEFjdGlvbik7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0XHR7b3B0aW9uc31cclxuXHRcdFx0XHRcdDwvc2VsZWN0PlxyXG5cdFx0XHRcdDwvU2VjdGlvbj5cclxuXHRcdFx0KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZvciAoY29uc3QgY3VzdG9tQWN0aW9uIG9mIGN1cnJlbnRMaXN0LmN1c3RvbUFjdGlvbikge1xyXG5cdFx0XHRcdGN1c3RvbUFjdGlvbkJ1dHRvbnMucHVzaCg8U2VjdGlvbj5cclxuXHRcdFx0XHRcdDxHbHlwaEJ1dHRvblxyXG5cdFx0XHRcdFx0XHRjb2xvcj1cImluZm9cIlxyXG5cdFx0XHRcdFx0XHRkaXNhYmxlZD17IWNoZWNrZWRJdGVtQ291bnR9XHJcblx0XHRcdFx0XHRcdGdseXBoPVwiZG93bmxvYWRcIlxyXG5cdFx0XHRcdFx0XHRvbkNsaWNrPXsoKSA9PiBoYW5kbGVDdXN0b21BY3Rpb24oY3VzdG9tQWN0aW9uKX1cclxuXHRcdFx0XHRcdFx0cG9zaXRpb249XCJsZWZ0XCJcclxuXHRcdFx0XHRcdFx0dmFyaWFudD1cImxpbmtcIj5cclxuXHRcdFx0XHRcdFx0e2N1c3RvbUFjdGlvbi5sYWJlbH1cclxuXHRcdFx0XHRcdDwvR2x5cGhCdXR0b24+XHJcblx0XHRcdFx0PC9TZWN0aW9uPik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIGRlbGV0ZSBidXR0b25cclxuXHRjb25zdCBhY3Rpb25CdXR0b25zID0gaXNPcGVuICYmIChcclxuXHRcdDxTZWN0aW9uPlxyXG5cdFx0XHQ8R2x5cGhCdXR0b25cclxuXHRcdFx0XHRjb2xvcj1cImNhbmNlbFwiXHJcblx0XHRcdFx0ZGlzYWJsZWQ9eyFjaGVja2VkSXRlbUNvdW50fVxyXG5cdFx0XHRcdGdseXBoPVwidHJhc2hjYW5cIlxyXG5cdFx0XHRcdG9uQ2xpY2s9e2hhbmRsZURlbGV0ZX1cclxuXHRcdFx0XHRwb3NpdGlvbj1cImxlZnRcIlxyXG5cdFx0XHRcdHZhcmlhbnQ9XCJsaW5rXCI+XHJcblx0XHRcdFx0RGVsZXRlXHJcblx0XHRcdDwvR2x5cGhCdXR0b24+XHJcblx0XHQ8L1NlY3Rpb24+XHJcblx0KTtcclxuXHJcblx0Ly8gc2VsZWN0IGJ1dHRvbnNcclxuXHRjb25zdCBhbGxWaXNpYmxlQnV0dG9uSXNBY3RpdmUgPSBjaGVja2VkSXRlbUNvdW50ID09PSBpdGVtQ291bnQ7XHJcblx0Y29uc3QgcGFnZVZpc2libGVCdXR0b25Jc0FjdGl2ZSA9IGNoZWNrZWRJdGVtQ291bnQgPT09IGl0ZW1zUGVyUGFnZTtcclxuXHRjb25zdCBub25lQnV0dG9uSXNBY3RpdmUgPSAhY2hlY2tlZEl0ZW1Db3VudDtcclxuXHRjb25zdCBzZWxlY3RBbGxCdXR0b24gPSBpdGVtQ291bnQgPiBpdGVtc1BlclBhZ2UgJiYgKFxyXG5cdFx0PFNlY3Rpb24+XHJcblx0XHRcdDxCdXR0b25cclxuXHRcdFx0XHRhY3RpdmU9e2FsbFZpc2libGVCdXR0b25Jc0FjdGl2ZX1cclxuXHRcdFx0XHRvbkNsaWNrPXsoKSA9PiBoYW5kbGVTZWxlY3QoJ2FsbCcpfVxyXG5cdFx0XHRcdHRpdGxlPVwiU2VsZWN0IGFsbCByb3dzIChpbmNsdWRpbmcgdGhvc2Ugbm90IHZpc2libGUpXCI+XHJcblx0XHRcdFx0e3NlbGVjdEFsbEl0ZW1zTG9hZGluZyA/IDxTcGlubmVyIC8+IDogJ0FsbCd9IDxzbWFsbCBzdHlsZT17YnV0dG9uTm90ZVN0eWxlc30+KHtpdGVtQ291bnR9KTwvc21hbGw+XHJcblx0XHRcdDwvQnV0dG9uPlxyXG5cdFx0PC9TZWN0aW9uPlxyXG5cdCk7XHJcblxyXG5cdGNvbnN0IHNlbGVjdEJ1dHRvbnMgPSBpc09wZW4gPyAoXHJcblx0XHQ8U2VjdGlvbj5cclxuXHRcdFx0PEdyb3VwIGNvbnRpZ3VvdXM+XHJcblx0XHRcdFx0e3NlbGVjdEFsbEJ1dHRvbn1cclxuXHRcdFx0XHQ8U2VjdGlvbj5cclxuXHRcdFx0XHRcdDxCdXR0b24gYWN0aXZlPXtwYWdlVmlzaWJsZUJ1dHRvbklzQWN0aXZlfSBvbkNsaWNrPXsoKSA9PiBoYW5kbGVTZWxlY3QoJ3Zpc2libGUnKX0gdGl0bGU9XCJTZWxlY3QgYWxsIHJvd3NcIj5cclxuXHRcdFx0XHRcdFx0e2l0ZW1Db3VudCA+IGl0ZW1zUGVyUGFnZSA/ICdQYWdlICcgOiAnQWxsICd9XHJcblx0XHRcdFx0XHRcdDxzbWFsbCBzdHlsZT17YnV0dG9uTm90ZVN0eWxlc30+KHtpdGVtQ291bnQgPiBpdGVtc1BlclBhZ2UgPyBpdGVtc1BlclBhZ2UgOiBpdGVtQ291bnR9KTwvc21hbGw+XHJcblx0XHRcdFx0XHQ8L0J1dHRvbj5cclxuXHRcdFx0XHQ8L1NlY3Rpb24+XHJcblx0XHRcdFx0PFNlY3Rpb24+XHJcblx0XHRcdFx0XHQ8QnV0dG9uIGFjdGl2ZT17bm9uZUJ1dHRvbklzQWN0aXZlfSBvbkNsaWNrPXsoKSA9PiBoYW5kbGVTZWxlY3QoJ25vbmUnKX0gdGl0bGU9XCJEZXNlbGVjdCBhbGwgcm93c1wiPk5vbmU8L0J1dHRvbj5cclxuXHRcdFx0XHQ8L1NlY3Rpb24+XHJcblx0XHRcdDwvR3JvdXA+XHJcblx0XHQ8L1NlY3Rpb24+XHJcblx0KSA6IG51bGw7XHJcblxyXG5cdC8vIHNlbGVjdGVkIGNvdW50IHRleHRcclxuXHRjb25zdCBzZWxlY3RlZENvdW50VGV4dCA9IGlzT3BlbiA/IChcclxuXHRcdDxTZWN0aW9uPlxyXG5cdFx0XHQ8c3BhbiBzdHlsZT17eyBjb2xvcjogJyM2NjYnLCBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJywgbGluZUhlaWdodDogJzIuNGVtJywgbWFyZ2luOiAxIH19PlxyXG5cdFx0XHRcdHtjaGVja2VkSXRlbUNvdW50fSBzZWxlY3RlZFxyXG5cdFx0XHQ8L3NwYW4+XHJcblx0XHQ8L1NlY3Rpb24+XHJcblx0KSA6IG51bGw7XHJcblxyXG5cdC8vIHB1dCBpdCBhbGwgdG9nZXRoZXJcclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdj5cclxuXHRcdFx0PEdyb3VwIHN0eWxlPXt7IGZsb2F0OiAnbGVmdCcsIG1hcmdpblJpZ2h0OiAnLjc1ZW0nLCBtYXJnaW5Cb3R0b206IDAgfX0+XHJcblx0XHRcdFx0PFNlY3Rpb24+XHJcblx0XHRcdFx0XHQ8QnV0dG9uIGFjdGl2ZT17aXNPcGVufSBvbkNsaWNrPXsoKSA9PiBoYW5kbGVUb2dnbGUoIWlzT3Blbil9PlxyXG5cdFx0XHRcdFx0XHRNYW5hZ2VcclxuXHRcdFx0XHRcdDwvQnV0dG9uPlxyXG5cdFx0XHRcdDwvU2VjdGlvbj5cclxuXHRcdFx0XHR7c2VsZWN0QnV0dG9uc31cclxuXHRcdFx0XHR7YWN0aW9uQnV0dG9uc31cclxuXHRcdFx0XHR7Y3VzdG9tQWN0aW9uQnV0dG9uc31cclxuXHRcdFx0XHR7c2VsZWN0ZWRDb3VudFRleHR9XHJcblx0XHRcdDwvR3JvdXA+XHJcblx0XHQ8L2Rpdj5cclxuXHQpO1xyXG59O1xyXG5cclxuTGlzdE1hbmFnZW1lbnQucHJvcFR5cGVzID0ge1xyXG5cdGNoZWNrZWRJdGVtczogUHJvcFR5cGVzLm51bWJlcixcclxuXHRoYW5kbGVDdXN0b21BY3Rpb246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcblx0aGFuZGxlRGVsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdGhhbmRsZVNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHRoYW5kbGVUb2dnbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcblx0aXNPcGVuOiBQcm9wVHlwZXMuYm9vbCxcclxuXHRpdGVtQ291bnQ6IFByb3BUeXBlcy5udW1iZXIsXHJcblx0aXRlbXNQZXJQYWdlOiBQcm9wVHlwZXMubnVtYmVyLFxyXG5cdG5vZGVsZXRlOiBQcm9wVHlwZXMuYm9vbCxcclxuXHRub2VkaXQ6IFByb3BUeXBlcy5ib29sLFxyXG5cdHNlbGVjdEFsbEl0ZW1zTG9hZGluZzogUHJvcFR5cGVzLmJvb2wsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RNYW5hZ2VtZW50O1xyXG4iLCJpbXBvcnQgeyBGb3JtTm90ZSwgRm9ybUZpZWxkLCBGb3JtSW5wdXQgfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50YWwnO1xyXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgdmtleSBmcm9tICd2a2V5JztcclxuXHJcbmltcG9ydCBLYmQgZnJvbSAnLi4vLi4vLi4vc2hhcmVkL0tiZCc7XHJcbmltcG9ydCBQb3BvdXQgZnJvbSAnLi4vLi4vLi4vc2hhcmVkL1BvcG91dCc7XHJcbmltcG9ydCBQb3BvdXRMaXN0IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Qb3BvdXQvUG9wb3V0TGlzdCc7XHJcblxyXG52YXIgTGlzdFNvcnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdMaXN0U29ydCcsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRoYW5kbGVTb3J0U2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdH0sXHJcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGFsdERvd246IGZhbHNlLFxyXG5cdFx0XHRwb3BvdXRJc09wZW46IGZhbHNlLFxyXG5cdFx0XHRzZWFyY2hTdHJpbmc6ICcnLFxyXG5cdFx0fTtcclxuXHR9LFxyXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuXHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93biwgZmFsc2UpO1xyXG5cdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuaGFuZGxlS2V5VXAsIGZhbHNlKTtcclxuXHR9LFxyXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcclxuXHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bik7XHJcblx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVLZXlVcCk7XHJcblx0fSxcclxuXHRoYW5kbGVLZXlEb3duIChlKSB7XHJcblx0XHRpZiAodmtleVtlLmtleUNvZGVdICE9PSAnPGFsdD4nKSByZXR1cm47XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0YWx0RG93bjogdHJ1ZSxcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0aGFuZGxlS2V5VXAgKGUpIHtcclxuXHRcdGlmICh2a2V5W2Uua2V5Q29kZV0gIT09ICc8YWx0PicpIHJldHVybjtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRhbHREb3duOiBmYWxzZSxcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0aGFuZGxlU29ydFNlbGVjdCAocGF0aCwgaW52ZXJ0ZWQpIHtcclxuXHRcdGlmICh0aGlzLnN0YXRlLmFsdERvd24pIGludmVydGVkID0gdHJ1ZTtcclxuXHRcdHRoaXMucHJvcHMuaGFuZGxlU29ydFNlbGVjdChwYXRoLCBpbnZlcnRlZCk7XHJcblx0XHR0aGlzLmNsb3NlUG9wb3V0KCk7XHJcblx0fSxcclxuXHRvcGVuUG9wb3V0ICgpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRwb3BvdXRJc09wZW46IHRydWUsXHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdGNsb3NlUG9wb3V0ICgpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRwb3BvdXRJc09wZW46IGZhbHNlLFxyXG5cdFx0XHRzZWFyY2hTdHJpbmc6ICcnLFxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHR1cGRhdGVTZWFyY2ggKGUpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoeyBzZWFyY2hTdHJpbmc6IGUudGFyZ2V0LnZhbHVlIH0pO1xyXG5cdH0sXHJcblx0cmVuZGVyU29ydE9wdGlvbnMgKCkge1xyXG5cdFx0Ly8gVE9ETzogSGFuZGxlIG11bHRpcGxlIHNvcnQgcGF0aHNcclxuXHRcdGNvbnN0IGFjdGl2ZVNvcnRQYXRoID0gdGhpcy5wcm9wcy5hY3RpdmVTb3J0LnBhdGhzWzBdO1xyXG5cdFx0Y29uc3QgYXZhaWxpYmxlQ29sdW1ucyA9IHRoaXMucHJvcHMuYXZhaWxhYmxlQ29sdW1ucztcclxuXHRcdGNvbnN0IHsgc2VhcmNoU3RyaW5nIH0gPSB0aGlzLnN0YXRlO1xyXG5cdFx0bGV0IGZpbHRlcmVkQ29sdW1ucyA9IGF2YWlsaWJsZUNvbHVtbnM7XHJcblxyXG5cdFx0aWYgKHNlYXJjaFN0cmluZykge1xyXG5cdFx0XHRmaWx0ZXJlZENvbHVtbnMgPSBmaWx0ZXJlZENvbHVtbnNcclxuXHRcdFx0XHQuZmlsdGVyKGNvbHVtbiA9PiBjb2x1bW4udHlwZSAhPT0gJ2hlYWRpbmcnKVxyXG5cdFx0XHRcdC5maWx0ZXIoY29sdW1uID0+IG5ldyBSZWdFeHAoc2VhcmNoU3RyaW5nKS50ZXN0KGNvbHVtbi5maWVsZC5sYWJlbC50b0xvd2VyQ2FzZSgpKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZpbHRlcmVkQ29sdW1ucy5tYXAoKGVsLCBpKSA9PiB7XHJcblx0XHRcdGlmIChlbC50eXBlID09PSAnaGVhZGluZycpIHtcclxuXHRcdFx0XHRyZXR1cm4gPFBvcG91dExpc3QuSGVhZGluZyBrZXk9eydoZWFkaW5nXycgKyBpfT57ZWwuY29udGVudH08L1BvcG91dExpc3QuSGVhZGluZz47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnN0IHBhdGggPSBlbC5maWVsZC5wYXRoO1xyXG5cdFx0XHRjb25zdCBpc1NlbGVjdGVkID0gYWN0aXZlU29ydFBhdGggJiYgYWN0aXZlU29ydFBhdGgucGF0aCA9PT0gcGF0aDtcclxuXHRcdFx0Y29uc3QgaXNJbnZlcnRlZCA9IGlzU2VsZWN0ZWQgJiYgYWN0aXZlU29ydFBhdGguaW52ZXJ0O1xyXG5cdFx0XHRjb25zdCBpY29uID0gdGhpcy5zdGF0ZS5hbHREb3duIHx8IChpc1NlbGVjdGVkICYmICFpc0ludmVydGVkKSA/ICdjaGV2cm9uLXVwJyA6ICdjaGV2cm9uLWRvd24nO1xyXG5cclxuXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHQ8UG9wb3V0TGlzdC5JdGVtXHJcblx0XHRcdFx0XHRrZXk9eydjb2x1bW5fJyArIGVsLmZpZWxkLnBhdGh9XHJcblx0XHRcdFx0XHRpY29uPXtpY29ufVxyXG5cdFx0XHRcdFx0aXNTZWxlY3RlZD17aXNTZWxlY3RlZH1cclxuXHRcdFx0XHRcdGxhYmVsPXtlbC5maWVsZC5sYWJlbH1cclxuXHRcdFx0XHRcdG9uQ2xpY2s9eygpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5oYW5kbGVTb3J0U2VsZWN0KHBhdGgsIGlzU2VsZWN0ZWQgJiYgIWlzSW52ZXJ0ZWQpO1xyXG5cdFx0XHRcdFx0fX0gLz5cclxuXHRcdFx0KTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdC8vIFRPRE86IEhhbmRsZSBtdWx0aXBsZSBzb3J0IHBhdGhzXHJcblx0XHRjb25zdCBhY3RpdmVTb3J0UGF0aCA9IHRoaXMucHJvcHMuYWN0aXZlU29ydC5wYXRoc1swXTtcclxuXHRcdGNvbnN0IGZvcm1GaWVsZFN0eWxlcyA9IHsgYm9yZGVyQm90dG9tOiAnMXB4IGRhc2hlZCByZ2JhKDAsMCwwLDAuMSknLCBwYWRkaW5nQm90dG9tOiAnMWVtJyB9O1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxzcGFuPlxyXG5cdFx0XHRcdHthY3RpdmVTb3J0UGF0aCAmJiAoXHJcblx0XHRcdFx0XHQ8c3Bhbj5cclxuXHRcdFx0XHRcdFx0PHNwYW4gc3R5bGU9e3sgY29sb3I6ICcjOTk5JyB9fT4gc29ydGVkIGJ5IDwvc3Bhbj5cclxuXHRcdFx0XHRcdFx0PGEgaWQ9XCJsaXN0SGVhZGVyU29ydEJ1dHRvblwiIGhyZWY9XCJqYXZhc2NyaXB0OjtcIiBvbkNsaWNrPXt0aGlzLm9wZW5Qb3BvdXR9PlxyXG5cdFx0XHRcdFx0XHRcdHthY3RpdmVTb3J0UGF0aC5sYWJlbC50b0xvd2VyQ2FzZSgpfVxyXG5cdFx0XHRcdFx0XHRcdHthY3RpdmVTb3J0UGF0aC5pbnZlcnQgPyAnIChkZXNjZW5kaW5nKScgOiAnJ31cclxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJkaXNjbG9zdXJlLWFycm93XCIgLz5cclxuXHRcdFx0XHRcdFx0PC9hPlxyXG5cdFx0XHRcdFx0PC9zcGFuPlxyXG5cdFx0XHRcdCl9XHJcblx0XHRcdFx0PFBvcG91dCBpc09wZW49e3RoaXMuc3RhdGUucG9wb3V0SXNPcGVufSBvbkNhbmNlbD17dGhpcy5jbG9zZVBvcG91dH0gcmVsYXRpdmVUb0lEPVwibGlzdEhlYWRlclNvcnRCdXR0b25cIj5cclxuXHRcdFx0XHRcdDxQb3BvdXQuSGVhZGVyIHRpdGxlPVwiU29ydFwiIC8+XHJcblxyXG5cdFx0XHRcdFx0PFBvcG91dC5Cb2R5IHNjcm9sbGFibGU+XHJcblx0XHRcdFx0XHRcdDxGb3JtRmllbGQgc3R5bGU9e2Zvcm1GaWVsZFN0eWxlc30+XHJcblx0XHRcdFx0XHRcdFx0PEZvcm1JbnB1dFxyXG5cdFx0XHRcdFx0XHRcdFx0YXV0b0ZvY3VzXHJcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZT17dGhpcy5zdGF0ZS5zZWFyY2hTdHJpbmd9XHJcblx0XHRcdFx0XHRcdFx0XHRvbkNoYW5nZT17dGhpcy51cGRhdGVTZWFyY2h9XHJcblx0XHRcdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cIkZpbmQgYSBmaWVsZC4uLlwiXHJcblx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0PC9Gb3JtRmllbGQ+XHJcblx0XHRcdFx0XHRcdDxQb3BvdXRMaXN0PlxyXG5cdFx0XHRcdFx0XHRcdHt0aGlzLnJlbmRlclNvcnRPcHRpb25zKCl9XHJcblx0XHRcdFx0XHRcdDwvUG9wb3V0TGlzdD5cclxuXHRcdFx0XHRcdDwvUG9wb3V0LkJvZHk+XHJcblxyXG5cdFx0XHRcdFx0PFBvcG91dC5Gb290ZXI+XHJcblx0XHRcdFx0XHRcdDxGb3JtTm90ZT5Ib2xkIDxLYmQ+YWx0PC9LYmQ+IHRvIHRvZ2dsZSBhc2NlbmRpbmcvZGVzY2VuZGluZzwvRm9ybU5vdGU+XHJcblx0XHRcdFx0XHQ8L1BvcG91dC5Gb290ZXI+XHJcblx0XHRcdFx0PC9Qb3BvdXQ+XHJcblx0XHRcdDwvc3Bhbj5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RTb3J0O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgU2VsZWN0IGZyb20gJ3JlYWN0LXNlbGVjdCc7XHJcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcclxuaW1wb3J0IHsgRmllbGRzIH0gZnJvbSAnRmllbGRUeXBlcyc7XHJcbmltcG9ydCBJbnZhbGlkRmllbGRUeXBlIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9JbnZhbGlkRmllbGRUeXBlJztcclxuaW1wb3J0IHsgcGx1cmFsIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvc3RyaW5nJztcclxuaW1wb3J0IHsgQmxhbmtTdGF0ZSwgQnV0dG9uLCBGb3JtLCBNb2RhbCB9IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XHJcblxyXG52YXIgVXBkYXRlRm9ybSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ1VwZGF0ZUZvcm0nLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0aXNPcGVuOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuXHRcdGl0ZW1JZHM6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcclxuXHRcdGxpc3Q6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXHJcblx0XHRvbkNhbmNlbDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcblx0fSxcclxuXHRnZXREZWZhdWx0UHJvcHMgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0aXNPcGVuOiBmYWxzZSxcclxuXHRcdH07XHJcblx0fSxcclxuXHRnZXRJbml0aWFsU3RhdGUgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0ZmllbGRzOiBbXSxcclxuXHRcdH07XHJcblx0fSxcclxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XHJcblx0XHR0aGlzLmRvRm9jdXMoKTtcclxuXHR9LFxyXG5cdGNvbXBvbmVudERpZFVwZGF0ZSAoKSB7XHJcblx0XHR0aGlzLmRvRm9jdXMoKTtcclxuXHR9LFxyXG5cdGRvRm9jdXMgKCkge1xyXG5cdFx0aWYgKHRoaXMucmVmcy5mb2N1c1RhcmdldCkge1xyXG5cdFx0XHRmaW5kRE9NTm9kZSh0aGlzLnJlZnMuZm9jdXNUYXJnZXQpLmZvY3VzKCk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRnZXRPcHRpb25zICgpIHtcclxuXHRcdGNvbnN0IHsgZmllbGRzIH0gPSB0aGlzLnByb3BzLmxpc3Q7XHJcblx0XHRyZXR1cm4gT2JqZWN0LmtleXMoZmllbGRzKS5tYXAoa2V5ID0+ICh7IHZhbHVlOiBmaWVsZHNba2V5XS5wYXRoLCBsYWJlbDogZmllbGRzW2tleV0ubGFiZWwgfSkpO1xyXG5cdH0sXHJcblx0Z2V0RmllbGRQcm9wcyAoZmllbGQpIHtcclxuXHRcdHZhciBwcm9wcyA9IGFzc2lnbih7fSwgZmllbGQpO1xyXG5cdFx0cHJvcHMudmFsdWUgPSB0aGlzLnN0YXRlLmZpZWxkc1tmaWVsZC5wYXRoXTtcclxuXHRcdHByb3BzLnZhbHVlcyA9IHRoaXMuc3RhdGUuZmllbGRzO1xyXG5cdFx0cHJvcHMub25DaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZTtcclxuXHRcdHByb3BzLm1vZGUgPSAnY3JlYXRlJztcclxuXHRcdHByb3BzLmtleSA9IGZpZWxkLnBhdGg7XHJcblx0XHRyZXR1cm4gcHJvcHM7XHJcblx0fSxcclxuXHR1cGRhdGVPcHRpb25zIChmaWVsZHMpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRmaWVsZHM6IGZpZWxkcyxcclxuXHRcdH0sIHRoaXMuZG9Gb2N1cyk7XHJcblx0fSxcclxuXHRoYW5kbGVDaGFuZ2UgKHZhbHVlKSB7XHJcblx0XHRjb25zb2xlLmxvZygnaGFuZGxlQ2hhbmdlOicsIHZhbHVlKTtcclxuXHR9LFxyXG5cdGhhbmRsZUNsb3NlICgpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRmaWVsZHM6IFtdLFxyXG5cdFx0fSk7XHJcblx0XHR0aGlzLnByb3BzLm9uQ2FuY2VsKCk7XHJcblx0fSxcclxuXHJcblx0cmVuZGVyRmllbGRzICgpIHtcclxuXHRcdGNvbnN0IHsgbGlzdCB9ID0gdGhpcy5wcm9wcztcclxuXHRcdGNvbnN0IHsgZmllbGRzIH0gPSB0aGlzLnN0YXRlO1xyXG5cdFx0Y29uc3QgZm9ybUZpZWxkcyA9IFtdO1xyXG5cdFx0bGV0IGZvY3VzUmVmO1xyXG5cclxuXHRcdGZpZWxkcy5mb3JFYWNoKChmaWVsZE9wdGlvbikgPT4ge1xyXG5cdFx0XHRjb25zdCBmaWVsZCA9IGxpc3QuZmllbGRzW2ZpZWxkT3B0aW9uLnZhbHVlXTtcclxuXHJcblx0XHRcdGlmICh0eXBlb2YgRmllbGRzW2ZpZWxkLnR5cGVdICE9PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdFx0Zm9ybUZpZWxkcy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW52YWxpZEZpZWxkVHlwZSwgeyB0eXBlOiBmaWVsZC50eXBlLCBwYXRoOiBmaWVsZC5wYXRoLCBrZXk6IGZpZWxkLnBhdGggfSkpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgZmllbGRQcm9wcyA9IHRoaXMuZ2V0RmllbGRQcm9wcyhmaWVsZCk7XHJcblx0XHRcdGlmICghZm9jdXNSZWYpIHtcclxuXHRcdFx0XHRmaWVsZFByb3BzLnJlZiA9IGZvY3VzUmVmID0gJ2ZvY3VzVGFyZ2V0JztcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3JtRmllbGRzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChGaWVsZHNbZmllbGQudHlwZV0sIGZpZWxkUHJvcHMpKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdGNvbnN0IGZpZWxkc1VJID0gZm9ybUZpZWxkcy5sZW5ndGggPyBmb3JtRmllbGRzIDogKFxyXG5cdFx0XHQ8QmxhbmtTdGF0ZVxyXG5cdFx0XHRcdGhlYWRpbmc9XCJDaG9vc2UgYSBmaWVsZCBhYm92ZSB0byBiZWdpblwiXHJcblx0XHRcdFx0c3R5bGU9e3sgcGFkZGluZzogJzNlbSAyZW0nIH19XHJcblx0XHRcdC8+XHJcblx0XHQpO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgc3R5bGU9e3sgYm9yZGVyVG9wOiAnMXB4IGRhc2hlZCByZ2JhKDAsMCwwLDAuMSknLCBtYXJnaW5Ub3A6IDIwLCBwYWRkaW5nVG9wOiAyMCB9fT5cclxuXHRcdFx0XHR7ZmllbGRzVUl9XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdHJlbmRlckZvcm0gKCkge1xyXG5cdFx0Y29uc3QgeyBpdGVtSWRzLCBsaXN0IH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0Y29uc3QgaXRlbUNvdW50ID0gcGx1cmFsKGl0ZW1JZHMsICgnKiAnICsgbGlzdC5zaW5ndWxhciksICgnKiAnICsgbGlzdC5wbHVyYWwpKTtcclxuXHRcdGNvbnN0IGZvcm1BY3Rpb24gPSBgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7bGlzdC5wYXRofWA7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PEZvcm0gbGF5b3V0PVwiaG9yaXpvbnRhbFwiIGFjdGlvbj17Zm9ybUFjdGlvbn0gbm9WYWxpZGF0ZT1cInRydWVcIj5cclxuXHRcdFx0XHQ8TW9kYWwuSGVhZGVyXHJcblx0XHRcdFx0XHRvbkNsb3NlPXt0aGlzLmhhbmRsZUNsb3NlfVxyXG5cdFx0XHRcdFx0c2hvd0Nsb3NlQnV0dG9uXHJcblx0XHRcdFx0XHR0ZXh0PXsnVXBkYXRlICcgKyBpdGVtQ291bnR9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0XHQ8TW9kYWwuQm9keT5cclxuXHRcdFx0XHRcdDxTZWxlY3RcclxuXHRcdFx0XHRcdFx0a2V5PVwiZmllbGQtc2VsZWN0XCJcclxuXHRcdFx0XHRcdFx0bXVsdGlcclxuXHRcdFx0XHRcdFx0b25DaGFuZ2U9e3RoaXMudXBkYXRlT3B0aW9uc31cclxuXHRcdFx0XHRcdFx0b3B0aW9ucz17dGhpcy5nZXRPcHRpb25zKCl9XHJcblx0XHRcdFx0XHRcdHJlZj1cImluaXRpYWxGb2N1c1RhcmdldFwiXHJcblx0XHRcdFx0XHRcdHZhbHVlPXt0aGlzLnN0YXRlLmZpZWxkc31cclxuXHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJGaWVsZHMoKX1cclxuXHRcdFx0XHQ8L01vZGFsLkJvZHk+XHJcblx0XHRcdFx0PE1vZGFsLkZvb3Rlcj5cclxuXHRcdFx0XHRcdDxCdXR0b24gY29sb3I9XCJwcmltYXJ5XCIgc3VibWl0PlVwZGF0ZTwvQnV0dG9uPlxyXG5cdFx0XHRcdFx0PEJ1dHRvbiBjb2xvcj1cImNhbmNlbFwiIHZhcmlhbnQ9XCJsaW5rXCIgb25DbGljaz17dGhpcy5oYW5kbGVDbG9zZX0+Q2FuY2VsPC9CdXR0b24+XHJcblx0XHRcdFx0PC9Nb2RhbC5Gb290ZXI+XHJcblx0XHRcdDwvRm9ybT5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PE1vZGFsLkRpYWxvZyBpc09wZW49e3RoaXMucHJvcHMuaXNPcGVufSBvbkNsb3NlPXt0aGlzLmhhbmRsZUNsb3NlfSBiYWNrZHJvcENsb3Nlc01vZGFsPlxyXG5cdFx0XHRcdHt0aGlzLnJlbmRlckZvcm0oKX1cclxuXHRcdFx0PC9Nb2RhbC5EaWFsb2c+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBVcGRhdGVGb3JtO1xyXG4iLCIvLyBHZW5lcmFsXHJcbmV4cG9ydCBjb25zdCBTRUxFQ1RfTElTVCA9ICdhcHAvTGlzdC9TRUxFQ1RfTElTVCc7XHJcbmV4cG9ydCBjb25zdCBTRVRfQ1VSUkVOVF9QQUdFID0gJ2FwcC9MaXN0L1NFVF9DVVJSRU5UX1BBR0UnO1xyXG5leHBvcnQgY29uc3QgSU5JVElBTF9MSVNUX0xPQUQgPSAnYXBwL0xpc3QvSU5JVElBTF9MSVNUX0xPQUQnO1xyXG4vLyBJdGVtc1xyXG5leHBvcnQgY29uc3QgTE9BRF9JVEVNUyA9ICdhcHAvTGlzdC9MT0FEX0lURU1TJztcclxuZXhwb3J0IGNvbnN0IExPQURJTkdfSVRFTVMgPSAnYXBwL0xpc3QvTE9BRElOR19JVEVNUyc7XHJcbmV4cG9ydCBjb25zdCBJVEVNU19MT0FERUQgPSAnYXBwL0xpc3QvSVRFTVNfTE9BREVEJztcclxuZXhwb3J0IGNvbnN0IElURU1fTE9BRElOR19FUlJPUiA9ICdhcHAvTGlzdC9JVEVNX0xPQURJTkdfRVJST1InO1xyXG4vLyBBY3RpdmVcclxuZXhwb3J0IGNvbnN0IFNFTEVDVF9BQ1RJVkVfU09SVCA9ICdhcHAvTGlzdC9TRUxFQ1RfQUNUSVZFX1NPUlQnO1xyXG5leHBvcnQgY29uc3QgU0VMRUNUX0FDVElWRV9DT0xVTU5TID0gJ2FwcC9MaXN0L1NFTEVDVF9BQ1RJVkVfQ09MVU1OUyc7XHJcbmV4cG9ydCBjb25zdCBTRUxFQ1RfRklMVEVSID0gJ2FwcC9MaXN0L1NFTEVDVF9GSUxURVInO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNFVF9BQ1RJVkVfU0VBUkNIID0gJ2FwcC9MaXN0L1NFVF9BQ1RJVkVfU0VBUkNIJztcclxuZXhwb3J0IGNvbnN0IFNFVF9BQ1RJVkVfU09SVCA9ICdhcHAvTGlzdC9TRVRfQUNUSVZFX1NPUlQnO1xyXG5leHBvcnQgY29uc3QgU0VUX0FDVElWRV9DT0xVTU5TID0gJ2FwcC9MaXN0L1NFVF9BQ1RJVkVfQ09MVU1OUyc7XHJcbmV4cG9ydCBjb25zdCBTRVRfQUNUSVZFX0xJU1QgPSAnYXBwL0xpc3QvU0VUX0FDVElWRV9MSVNUJztcclxuXHJcbi8vIFF1ZXJ5IFBhcmFtc1xyXG5leHBvcnQgY29uc3QgUVVFUllfSEFTX0NIQU5HRUQgPSAnYXBwL0xpc3QvUVVFUllfSEFTX0NIQU5HRUQnO1xyXG5leHBvcnQgY29uc3QgUVVFUllfSEFTX05PVF9DSEFOR0VEID0gJ2FwcC9MaXN0L1FVRVJZX0hBU19OT1RfQ0hBTkdFRCc7XHJcbmV4cG9ydCBjb25zdCBSRVBMQUNFX0NBQ0hFRF9RVUVSWSA9ICdhcHAvTGlzdC9SRVBMQUNFX0NBQ0hFRF9RVUVSWSc7XHJcbmV4cG9ydCBjb25zdCBDTEVBUl9DQUNIRURfUVVFUlkgPSAnYXBwL0xpc3QvQ0xFQVJfQ0FDSEVEX1FVRVJZJztcclxuXHJcbi8vIEZpbHRlcmluZ1xyXG5leHBvcnQgY29uc3QgQUREX0ZJTFRFUiA9ICdhcHAvTGlzdC9BRERfRklMVEVSJztcclxuZXhwb3J0IGNvbnN0IENMRUFSX0ZJTFRFUiA9ICdhcHAvTGlzdC9DTEVBUl9GSUxURVInO1xyXG5leHBvcnQgY29uc3QgQ0xFQVJfQUxMX0ZJTFRFUlMgPSAnYXBwL0xpc3QvQ0xFQVJfQUxMX0ZJTFRFUlMnO1xyXG5leHBvcnQgY29uc3QgU0VUX0ZJTFRFUlMgPSAnYXBwL0xpc3QvU0VUX0ZJTFRFUlMnO1xyXG4vLyBEcmFnXHJcbmV4cG9ydCBjb25zdCBTRVRfUk9XX0FMRVJUID0gJ2FwcC9MaXN0L1NFVF9ST1dfQUxFUlQnO1xyXG5leHBvcnQgY29uc3QgUkVTRVRfRFJBR19QQUdFID0gJ2FwcC9MaXN0L1JFU0VUX0RSQUdfUEFHRSc7XHJcbmV4cG9ydCBjb25zdCBSRVNFVF9EUkFHX0lURU1TID0gJ2FwcC9MaXN0L1JFU0VUX0RSQUdfSVRFTVMnO1xyXG5leHBvcnQgY29uc3QgU0VUX0RSQUdfSVRFTSA9ICdhcHAvTGlzdC9TRVRfRFJBR19JVEVNJztcclxuZXhwb3J0IGNvbnN0IFNFVF9EUkFHX0lOREVYID0gJ2FwcC9MaXN0L1NFVF9EUkFHX0lOREVYJztcclxuZXhwb3J0IGNvbnN0IERSQUdfTU9WRV9JVEVNID0gJ2FwcC9MaXN0L0RSQUdfTU9WRV9JVEVNJztcclxuIiwiLyoqXG4gKiBUaGUgbGlzdCB2aWV3IGlzIGEgcGFnaW5hdGVkIHRhYmxlIG9mIGFsbCBpdGVtcyBpbiB0aGUgbGlzdC4gSXQgY2FuIHNob3cgYVxuICogdmFyaWV0eSBvZiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaW5kaXZpZHVhbCBpdGVtcyBpbiBjb2x1bW5zLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vLyBpbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7IC8vIFRPRE8gcmUtaW1wbGVtZW50IGZvY3VzIHdoZW4gcmVhZHlcbmltcG9ydCBudW1lcmFsIGZyb20gJ251bWVyYWwnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHtcblx0QmxhbmtTdGF0ZSxcblx0Q2VudGVyLFxuXHRDb250YWluZXIsXG5cdEdseXBoLFxuXHRHbHlwaEJ1dHRvbixcblx0UGFnaW5hdGlvbixcblx0U3Bpbm5lcixcbn0gZnJvbSAnLi4vLi4vZWxlbWVudGFsJztcblxuaW1wb3J0IExpc3RGaWx0ZXJzIGZyb20gJy4vY29tcG9uZW50cy9GaWx0ZXJpbmcvTGlzdEZpbHRlcnMnO1xuaW1wb3J0IExpc3RIZWFkZXJUaXRsZSBmcm9tICcuL2NvbXBvbmVudHMvTGlzdEhlYWRlclRpdGxlJztcbmltcG9ydCBMaXN0SGVhZGVyVG9vbGJhciBmcm9tICcuL2NvbXBvbmVudHMvTGlzdEhlYWRlclRvb2xiYXInO1xuaW1wb3J0IExpc3RNYW5hZ2VtZW50IGZyb20gJy4vY29tcG9uZW50cy9MaXN0TWFuYWdlbWVudCc7XG5cbmltcG9ydCBDb25maXJtYXRpb25EaWFsb2cgZnJvbSAnLi4vLi4vc2hhcmVkL0NvbmZpcm1hdGlvbkRpYWxvZyc7XG5pbXBvcnQgQWxlcnRNZXNzYWdlcyBmcm9tICcuLi8uLi9zaGFyZWQvQWxlcnRNZXNzYWdlcyc7XG5pbXBvcnQgQ3JlYXRlRm9ybSBmcm9tICcuLi8uLi9zaGFyZWQvQ3JlYXRlRm9ybSc7XG5pbXBvcnQgRmxhc2hNZXNzYWdlcyBmcm9tICcuLi8uLi9zaGFyZWQvRmxhc2hNZXNzYWdlcyc7XG5pbXBvcnQgSXRlbXNUYWJsZSBmcm9tICcuL2NvbXBvbmVudHMvSXRlbXNUYWJsZS9JdGVtc1RhYmxlJztcbmltcG9ydCBVcGRhdGVGb3JtIGZyb20gJy4vY29tcG9uZW50cy9VcGRhdGVGb3JtJztcbmltcG9ydCB7IHBsdXJhbCBhcyBwbHVyYWxpemUgfSBmcm9tICcuLi8uLi8uLi91dGlscy9zdHJpbmcnO1xuaW1wb3J0IHsgbGlzdHNCeVBhdGggfSBmcm9tICcuLi8uLi8uLi91dGlscy9saXN0cyc7XG5pbXBvcnQgeyBjaGVja0ZvclF1ZXJ5Q2hhbmdlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvcXVlcnlQYXJhbXMnO1xuaW1wb3J0IElmcmFtZUNvbnRlbnQgZnJvbSAnLi4vLi4vLi4vQXBwL3NoYXJlZC9JZnJhbWVDb250ZW50JztcblxuaW1wb3J0IHtcblx0ZGVsZXRlSXRlbXMsXG5cdHNldEFjdGl2ZVNlYXJjaCxcblx0c2V0QWN0aXZlU29ydCxcblx0c2V0Q3VycmVudFBhZ2UsXG5cdHNlbGVjdExpc3QsXG5cdGNsZWFyQ2FjaGVkUXVlcnksXG5cdGN1c3RvbUFjdGlvbixcblx0Y3VzdG9tQWN0aW9uRG93bmxvYWQsXG59IGZyb20gJy4vYWN0aW9ucyc7XG5cbmltcG9ydCB7XG5cdGRlbGV0ZUl0ZW0sXG59IGZyb20gJy4uL0l0ZW0vYWN0aW9ucyc7XG5cbmNvbnN0IEVTQ19LRVlfQ09ERSA9IDI3O1xuXG5jb25zdCBMaXN0VmlldyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0Y29udGV4dFR5cGVzOiB7XG5cdFx0cm91dGVyOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cdH0sXG5cdGdldEluaXRpYWxTdGF0ZSgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29uZmlybWF0aW9uRGlhbG9nOiB7XG5cdFx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHR9LFxuXHRcdFx0Y2hlY2tlZEl0ZW1zOiB7fSxcblx0XHRcdGNvbnN0cmFpblRhYmxlV2lkdGg6IHRydWUsXG5cdFx0XHRtYW5hZ2VNb2RlOiBmYWxzZSxcblx0XHRcdHNob3dDcmVhdGVGb3JtOiBmYWxzZSxcblx0XHRcdHNob3dVcGRhdGVGb3JtOiBmYWxzZSxcblx0XHRcdGFsZXJ0czoge30sXG5cdFx0XHQvLyBDdXN0b20gQWN0aW9uIFZpZXdcblx0XHRcdHNob3dJZnJhbWU6IGZhbHNlLFxuXHRcdFx0YWN0aW9uX3VybDogbnVsbCxcblx0XHRcdGlkOiBudWxsLFxuXHRcdFx0Y3VzdG9tVXBkYXRlVmFsdWU6IG51bGwsXG5cdFx0fTtcblx0fSxcblx0Y29tcG9uZW50V2lsbE1vdW50KCkge1xuXHRcdC8vIFdoZW4gd2UgZGlyZWN0bHkgbmF2aWdhdGUgdG8gYSBsaXN0IHdpdGhvdXQgY29taW5nIGZyb20gYW5vdGhlciBjbGllbnRcblx0XHQvLyBzaWRlIHJvdXRlZCBwYWdlIGJlZm9yZSwgd2UgbmVlZCB0byBpbml0aWFsaXplIHRoZSBsaXN0IGFuZCBwYXJzZVxuXHRcdC8vIHBvc3NpYmx5IHNwZWNpZmllZCBxdWVyeSBwYXJhbWV0ZXJzXG5cblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKHNlbGVjdExpc3QodGhpcy5wcm9wcy5wYXJhbXMubGlzdElkKSk7XG5cblx0XHRjb25zdCBpc05vQ3JlYXRlID0gdGhpcy5wcm9wcy5saXN0cy5kYXRhW3RoaXMucHJvcHMucGFyYW1zLmxpc3RJZF0ubm9jcmVhdGU7XG5cdFx0Y29uc3Qgc2hvdWxkT3BlbkNyZWF0ZSA9IHRoaXMucHJvcHMubG9jYXRpb24uc2VhcmNoID09PSAnP2NyZWF0ZSc7XG5cblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdHNob3dDcmVhdGVGb3JtOiAoc2hvdWxkT3BlbkNyZWF0ZSAmJiAhaXNOb0NyZWF0ZSkgfHwgS2V5c3RvbmUuY3JlYXRlRm9ybUVycm9ycyxcblx0XHR9KTtcblxuXHR9LFxuXHRjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuXHRcdC8vIFJldmlldyBhbmQgbWFrZSBpdCBtb3JlIGdlbmVyaWMgdG8gY2xlYXIgY3VzdG9tIGFjdGlvbiB2aWV3IG9uIGxpbmsgY2hhbmdlXG5cdFx0aWYgKHRoaXMucHJvcHMgJiYgdGhpcy5wcm9wcy5saXN0cy5jdXJyZW50TGlzdCAmJiB0aGlzLnByb3BzLmxpc3RzLmN1cnJlbnRMaXN0LmlkICE9PSAnbGlzdF9pdGVtcycpIHtcblx0XHRcdHRoaXMuc2V0U3RhdGUoeyBzaG93SWZyYW1lOiBmYWxzZSwgYWN0aW9uX3VybDogbnVsbCwgaWQ6IG51bGwsIHNob3dDcmVhdGVGb3JtOiBmYWxzZSB9KTtcblx0XHR9XG5cblx0XHQvLyBXZSd2ZSBvcGVuZWQgYSBuZXcgbGlzdCBmcm9tIHRoZSBjbGllbnQgc2lkZSByb3V0aW5nLCBzbyBpbml0aWFsaXplXG5cdFx0Ly8gYWdhaW4gd2l0aCB0aGUgbmV3IGxpc3QgaWRcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGFsZXJ0czoge30sXG5cdFx0fSk7XG5cdFx0Y29uc3QgaXNSZWFkeSA9IHRoaXMucHJvcHMubGlzdHMucmVhZHkgJiYgbmV4dFByb3BzLmxpc3RzLnJlYWR5O1xuXHRcdGlmIChpc1JlYWR5ICYmIGNoZWNrRm9yUXVlcnlDaGFuZ2UobmV4dFByb3BzLCB0aGlzLnByb3BzKSkge1xuXHRcdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChzZWxlY3RMaXN0KG5leHRQcm9wcy5wYXJhbXMubGlzdElkKSk7XG5cdFx0fVxuXHR9LFxuXHRjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHsgc2hvd0lmcmFtZTogZmFsc2UsIGFjdGlvbl91cmw6IG51bGwsIGlkOiBudWxsIH0pOyAvLyBDdXN0b20gQWN0aW9uIFZpZXdcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGNsZWFyQ2FjaGVkUXVlcnkoKSk7XG5cblx0fSxcblxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0Ly8gSEVBREVSXG5cdC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQvLyBDYWxsZWQgd2hlbiBhIG5ldyBpdGVtIGlzIGNyZWF0ZWRcblx0b25DcmVhdGUoaXRlbSkge1xuXHRcdC8vIEhpZGUgdGhlIGNyZWF0ZSBmb3JtXG5cdFx0dGhpcy50b2dnbGVDcmVhdGVNb2RhbChmYWxzZSk7XG5cdFx0Ly8gUmVkaXJlY3QgdG8gbmV3bHkgY3JlYXRlZCBpdGVtIHBhdGhcblx0XHRjb25zdCBsaXN0ID0gdGhpcy5wcm9wcy5jdXJyZW50TGlzdDtcblx0XHR0aGlzLmNvbnRleHQucm91dGVyLnB1c2goYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2xpc3QucGF0aH0vJHtpdGVtLmlkfWApO1xuXHR9LFxuXHRjcmVhdGVBdXRvY3JlYXRlKCkge1xuXHRcdGNvbnN0IGxpc3QgPSB0aGlzLnByb3BzLmN1cnJlbnRMaXN0O1xuXHRcdGxpc3QuY3JlYXRlSXRlbShudWxsLCAoZXJyLCBkYXRhKSA9PiB7XG5cdFx0XHRpZiAoZXJyKSB7XG5cdFx0XHRcdC8vIFRPRE8gUHJvcGVyIGVycm9yIGhhbmRsaW5nXG5cdFx0XHRcdGFsZXJ0KCdTb21ldGhpbmcgd2VudCB3cm9uZywgcGxlYXNlIHRyeSBhZ2FpbiEnKTtcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuY29udGV4dC5yb3V0ZXIucHVzaChgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7bGlzdC5wYXRofS8ke2RhdGEuaWR9YCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdHVwZGF0ZVNlYXJjaChlKSB7XG5cdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChzZXRBY3RpdmVTZWFyY2goZS50YXJnZXQudmFsdWUpKTtcblx0fSxcblx0aGFuZGxlU2VhcmNoQ2xlYXIoKSB7XG5cdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChzZXRBY3RpdmVTZWFyY2goJycpKTtcblxuXHRcdC8vIFRPRE8gcmUtaW1wbGVtZW50IGZvY3VzIHdoZW4gcmVhZHlcblx0XHQvLyBmaW5kRE9NTm9kZSh0aGlzLnJlZnMubGlzdFNlYXJjaElucHV0KS5mb2N1cygpO1xuXHR9LFxuXHRoYW5kbGVTZWFyY2hLZXkoZSkge1xuXHRcdC8vIGNsZWFyIG9uIGVzY1xuXHRcdGlmIChlLndoaWNoID09PSBFU0NfS0VZX0NPREUpIHtcblx0XHRcdHRoaXMuaGFuZGxlU2VhcmNoQ2xlYXIoKTtcblx0XHR9XG5cdH0sXG5cdGhhbmRsZVBhZ2VTZWxlY3QoaSkge1xuXHRcdC8vIElmIHRoZSBjdXJyZW50IHBhZ2UgaW5kZXggaXMgdGhlIHNhbWUgYXMgdGhlIGluZGV4IHdlIGFyZSBpbnRlbmRpbmcgdG8gcGFzcyB0byByZWR1eCwgYmFpbCBvdXQuXG5cdFx0aWYgKGkgPT09IHRoaXMucHJvcHMubGlzdHMucGFnZS5pbmRleCkgcmV0dXJuO1xuXHRcdHJldHVybiB0aGlzLnByb3BzLmRpc3BhdGNoKHNldEN1cnJlbnRQYWdlKGkpKTtcblx0fSxcblx0dG9nZ2xlTWFuYWdlTW9kZShmaWx0ZXIgPSAhdGhpcy5zdGF0ZS5tYW5hZ2VNb2RlKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRtYW5hZ2VNb2RlOiBmaWx0ZXIsXG5cdFx0XHRjaGVja2VkSXRlbXM6IHt9LFxuXHRcdH0pO1xuXHR9LFxuXHR0b2dnbGVVcGRhdGVNb2RhbChmaWx0ZXIgPSAhdGhpcy5zdGF0ZS5zaG93VXBkYXRlRm9ybSkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0c2hvd1VwZGF0ZUZvcm06IGZpbHRlcixcblx0XHR9KTtcblx0fSxcblx0aGFuZGxlUHJvbXB0SW5wdXRDaGFuZ2UoZXZlbnQpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGN1c3RvbVVwZGF0ZVZhbHVlOiBldmVudC50YXJnZXQudmFsdWUsXG5cdFx0fSlcblx0fSxcblx0bWFzc1VwZGF0ZSgpIHtcblx0XHQvLyBUT0RPOiBJbXBsZW1lbnQgdXBkYXRlIG11bHRpLWl0ZW1cblx0XHRjb25zb2xlLmxvZygnVXBkYXRlIEFMTCB0aGUgdGhpbmdzIScpO1xuXHR9LFxuXHRtYXNzRGVsZXRlKCkge1xuXHRcdGNvbnN0IHsgY2hlY2tlZEl0ZW1zIH0gPSB0aGlzLnN0YXRlO1xuXHRcdGNvbnN0IGxpc3QgPSB0aGlzLnByb3BzLmN1cnJlbnRMaXN0O1xuXHRcdGNvbnN0IGl0ZW1Db3VudCA9IHBsdXJhbGl6ZShjaGVja2VkSXRlbXMsICgnKiAnICsgbGlzdC5zaW5ndWxhci50b0xvd2VyQ2FzZSgpKSwgKCcqICcgKyBsaXN0LnBsdXJhbC50b0xvd2VyQ2FzZSgpKSk7XG5cdFx0Y29uc3QgaXRlbUlkcyA9IE9iamVjdC5rZXlzKGNoZWNrZWRJdGVtcyk7XG5cblx0XHRsZXQgbWVzc2FnZSA9IGBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlICR7aXRlbUNvdW50fT9gO1xuXG5cdFx0aWYgKGxpc3QuZGVsZXRlUHJvbXB0KSB7XG5cdFx0XHRtZXNzYWdlID0gbGlzdC5kZWxldGVQcm9tcHQ7XG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRjb25maXJtYXRpb25EaWFsb2c6IHtcblx0XHRcdFx0aXNPcGVuOiB0cnVlLFxuXHRcdFx0XHRsYWJlbDogJ0RlbGV0ZScsXG5cdFx0XHRcdGJvZHk6IChcblx0XHRcdFx0XHQ8ZGl2PlxuXHRcdFx0XHRcdFx0e21lc3NhZ2V9XG5cdFx0XHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0XHRcdDxiciAvPlxuXHRcdFx0XHRcdFx0VGhpcyBjYW5ub3QgYmUgdW5kb25lLlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQpLFxuXHRcdFx0XHRvbkNvbmZpcm1hdGlvbjogKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goZGVsZXRlSXRlbXMoaXRlbUlkcykpO1xuXHRcdFx0XHRcdHRoaXMudG9nZ2xlTWFuYWdlTW9kZSgpO1xuXHRcdFx0XHRcdHRoaXMucmVtb3ZlQ29uZmlybWF0aW9uRGlhbG9nKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9LFxuXHRpc011bHRpcGxlQWxsb3dlZChpdGVtSWRzLCBtdWx0aXBsZSkge1xuXHRcdGlmICghbXVsdGlwbGUgJiYgaXRlbUlkcy5sZW5ndGggPiAxKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0YWxlcnRzOiB7XG5cdFx0XHRcdFx0ZXJyb3I6IHtcblx0XHRcdFx0XHRcdGVycm9yOiAnUGxlYXNlIHNlbGVjdCBvbmx5IG9uZSBSZWNvcmQgdG8gY29tcGxldGUgdGhpcyB0YXNrLicsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblx0Y3VzdG9tQWN0aW9uKGN1c3RvbUFjdGlvbkRhdGEpIHtcblx0XHRjb25zdCB7IGFjdGlvbiwgdHlwZSwgbXVsdGlwbGUsIGRhdGEsIHN0YXR1cyB9ID0gY3VzdG9tQWN0aW9uRGF0YTtcblx0XHRjb25zdCB7IGNoZWNrZWRJdGVtcyB9ID0gdGhpcy5zdGF0ZTtcblx0XHRjb25zdCBpdGVtSWRzID0gT2JqZWN0LmtleXMoY2hlY2tlZEl0ZW1zKTtcblx0XHRpZiAodHlwZSA9PT0gJ2Rvd25sb2FkJykge1xuXHRcdFx0aWYgKHRoaXMuaXNNdWx0aXBsZUFsbG93ZWQoaXRlbUlkcywgbXVsdGlwbGUpKSB7XG5cdFx0XHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goY3VzdG9tQWN0aW9uRG93bmxvYWQoaXRlbUlkcywgYWN0aW9uKSk7XG5cdFx0XHRcdHRoaXMudG9nZ2xlTWFuYWdlTW9kZSgpO1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRhbGVydHM6IHt9LFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICd2aWV3JykgeyAvLyBDdXN0b20gQWN0aW9uIFZpZXdcblxuXHRcdFx0aWYgKHRoaXMuaXNNdWx0aXBsZUFsbG93ZWQoaXRlbUlkcywgbXVsdGlwbGUpKSB7XG5cdFx0XHRcdGNvbnN0IGlmcmFtZVVSTCA9IGAke0tleXN0b25lLmV4dGVybmFsSG9zdH0vJHthY3Rpb259LyR7aXRlbUlkc31gO1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRzaG93SWZyYW1lOiB0cnVlLFxuXHRcdFx0XHRcdGFjdGlvbl91cmw6IGFjdGlvbixcblx0XHRcdFx0XHRpZDogaXRlbUlkcyxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHRoaXMudG9nZ2xlTWFuYWdlTW9kZSgpO1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRhbGVydHM6IHt9LFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICdwcm9tcHQnKSB7XG5cdFx0XHRpZiAodGhpcy5pc011bHRpcGxlQWxsb3dlZChpdGVtSWRzLCBtdWx0aXBsZSkpIHtcblx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdFx0Y29uZmlybWF0aW9uRGlhbG9nOiB7XG5cdFx0XHRcdFx0XHRpc09wZW46IHRydWUsXG5cdFx0XHRcdFx0XHRsYWJlbDogJ1NhdmUnLFxuXHRcdFx0XHRcdFx0Ym9keTogKFxuXHRcdFx0XHRcdFx0XHQ8ZGl2PlxuXHRcdFx0XHRcdFx0XHRcdDxsYWJsZSBzdHlsZT17eyBjb2xvcjogJyM3RjdGN0YnIH19PkVudGVyIGEgVmFsdWU6IDwvbGFibGU+XG5cdFx0XHRcdFx0XHRcdFx0PGlucHV0IHN0eWxlPXt7IHBhZGRpbmc6ICcwLjc1ZW0nLCBoZWlnaHQ6ICcyLjBlbScsIGJvcmRlckNvbG9yOiAnI2NjYycsIGJvcmRlcldpZHRoOiAxLCBib3JkZXJSYWRpdXM6ICcwLjNyZW0nLCBib3JkZXJTdHlsZTogJ3NvbGlkJyB9fSB0eXBlPVwidGV4dFwiIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZVByb21wdElucHV0Q2hhbmdlfSAvPlxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRvbkNvbmZpcm1hdGlvbjogKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGN1c3RvbUFjdGlvbihpdGVtSWRzLCBhY3Rpb24sIHRoaXMuc3RhdGUuY3VzdG9tVXBkYXRlVmFsdWUpKTtcblx0XHRcdFx0XHRcdFx0dGhpcy50b2dnbGVNYW5hZ2VNb2RlKCk7XG5cdFx0XHRcdFx0XHRcdHRoaXMucmVtb3ZlQ29uZmlybWF0aW9uRGlhbG9nKCk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7IC8vIHNpbXBsZSBldmVudCB0cmlnZ2VyXG5cdFx0XHRpZiAodGhpcy5pc011bHRpcGxlQWxsb3dlZChpdGVtSWRzLCBtdWx0aXBsZSkpIHtcblx0XHRcdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChjdXN0b21BY3Rpb24oaXRlbUlkcywgYWN0aW9uLCBzdGF0dXMpKTtcblx0XHRcdFx0dGhpcy50b2dnbGVNYW5hZ2VNb2RlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYW5kbGVNYW5hZ2VtZW50U2VsZWN0KHNlbGVjdGlvbikge1xuXHRcdGlmIChzZWxlY3Rpb24gPT09ICdhbGwnKSB0aGlzLmNoZWNrQWxsSXRlbXMoKTtcblx0XHRpZiAoc2VsZWN0aW9uID09PSAnbm9uZScpIHRoaXMudW5jaGVja0FsbFRhYmxlSXRlbXMoKTtcblx0XHRpZiAoc2VsZWN0aW9uID09PSAndmlzaWJsZScpIHRoaXMuY2hlY2tBbGxUYWJsZUl0ZW1zKCk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXHRyZW5kZXJDb25maXJtYXRpb25EaWFsb2coKSB7XG5cdFx0Y29uc3QgcHJvcHMgPSB0aGlzLnN0YXRlLmNvbmZpcm1hdGlvbkRpYWxvZztcblx0XHRyZXR1cm4gKFxuXHRcdFx0PENvbmZpcm1hdGlvbkRpYWxvZ1xuXHRcdFx0XHRjb25maXJtYXRpb25MYWJlbD17cHJvcHMubGFiZWx9XG5cdFx0XHRcdGlzT3Blbj17cHJvcHMuaXNPcGVufVxuXHRcdFx0XHRvbkNhbmNlbD17dGhpcy5yZW1vdmVDb25maXJtYXRpb25EaWFsb2d9XG5cdFx0XHRcdG9uQ29uZmlybWF0aW9uPXtwcm9wcy5vbkNvbmZpcm1hdGlvbn1cblx0XHRcdD5cblx0XHRcdFx0e3Byb3BzLmJvZHl9XG5cdFx0XHQ8L0NvbmZpcm1hdGlvbkRpYWxvZz5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXJNYW5hZ2VtZW50KCkge1xuXHRcdGNvbnN0IHsgY2hlY2tlZEl0ZW1zLCBtYW5hZ2VNb2RlLCBzZWxlY3RBbGxJdGVtc0xvYWRpbmcgfSA9IHRoaXMuc3RhdGU7XG5cdFx0Y29uc3QgeyBjdXJyZW50TGlzdCB9ID0gdGhpcy5wcm9wcztcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8TGlzdE1hbmFnZW1lbnRcblx0XHRcdFx0Y2hlY2tlZEl0ZW1Db3VudD17T2JqZWN0LmtleXMoY2hlY2tlZEl0ZW1zKS5sZW5ndGh9XG5cdFx0XHRcdGhhbmRsZURlbGV0ZT17dGhpcy5tYXNzRGVsZXRlfVxuXHRcdFx0XHRoYW5kbGVTZWxlY3Q9e3RoaXMuaGFuZGxlTWFuYWdlbWVudFNlbGVjdH1cblx0XHRcdFx0aGFuZGxlVG9nZ2xlPXsoKSA9PiB0aGlzLnRvZ2dsZU1hbmFnZU1vZGUoIW1hbmFnZU1vZGUpfVxuXHRcdFx0XHRpc09wZW49e21hbmFnZU1vZGV9XG5cdFx0XHRcdGl0ZW1Db3VudD17dGhpcy5wcm9wcy5pdGVtcy5jb3VudH1cblx0XHRcdFx0aXRlbXNQZXJQYWdlPXt0aGlzLnByb3BzLmxpc3RzLnBhZ2Uuc2l6ZX1cblx0XHRcdFx0bm9kZWxldGU9e2N1cnJlbnRMaXN0Lm5vZGVsZXRlfVxuXHRcdFx0XHRub2VkaXQ9e2N1cnJlbnRMaXN0Lm5vZWRpdH1cblx0XHRcdFx0c2VsZWN0QWxsSXRlbXNMb2FkaW5nPXtzZWxlY3RBbGxJdGVtc0xvYWRpbmd9XG5cdFx0XHRcdGN1cnJlbnRMaXN0PXtjdXJyZW50TGlzdH1cblx0XHRcdFx0aGFuZGxlQ3VzdG9tQWN0aW9uPXt0aGlzLmN1c3RvbUFjdGlvbn1cblx0XHRcdFx0aGFuZGxlQ3VzdG9tQWN0aW9uRG93bmxvYWQ9e3RoaXMuY3VzdG9tQWN0aW9uRG93bmxvYWR9XG5cdFx0XHQvPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlclBhZ2luYXRpb24oKSB7XG5cdFx0Y29uc3QgaXRlbXMgPSB0aGlzLnByb3BzLml0ZW1zO1xuXHRcdGlmICh0aGlzLnN0YXRlLm1hbmFnZU1vZGUgfHwgIWl0ZW1zLmNvdW50KSByZXR1cm47XG5cblx0XHRjb25zdCBsaXN0ID0gdGhpcy5wcm9wcy5jdXJyZW50TGlzdDtcblx0XHRjb25zdCBjdXJyZW50UGFnZSA9IHRoaXMucHJvcHMubGlzdHMucGFnZS5pbmRleDtcblx0XHRjb25zdCBwYWdlU2l6ZSA9IHRoaXMucHJvcHMubGlzdHMucGFnZS5zaXplO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxQYWdpbmF0aW9uXG5cdFx0XHRcdGN1cnJlbnRQYWdlPXtjdXJyZW50UGFnZX1cblx0XHRcdFx0b25QYWdlU2VsZWN0PXt0aGlzLmhhbmRsZVBhZ2VTZWxlY3R9XG5cdFx0XHRcdHBhZ2VTaXplPXtwYWdlU2l6ZX1cblx0XHRcdFx0cGx1cmFsPXtsaXN0LnBsdXJhbH1cblx0XHRcdFx0c2luZ3VsYXI9e2xpc3Quc2luZ3VsYXJ9XG5cdFx0XHRcdHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogMCB9fVxuXHRcdFx0XHR0b3RhbD17aXRlbXMuY291bnR9XG5cdFx0XHRcdGxpbWl0PXsxMH1cblx0XHRcdC8+XG5cdFx0KTtcblx0fSxcblx0cmVuZGVySGVhZGVyKCkge1xuXHRcdGNvbnN0IGl0ZW1zID0gdGhpcy5wcm9wcy5pdGVtcztcblx0XHRjb25zdCB7IGF1dG9jcmVhdGUsIG5vY3JlYXRlLCBwbHVyYWwsIHNpbmd1bGFyIH0gPSB0aGlzLnByb3BzLmN1cnJlbnRMaXN0O1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxDb250YWluZXIgc3R5bGU9e3sgcGFkZGluZ1RvcDogJzJlbScgfX0+XG5cdFx0XHRcdDxMaXN0SGVhZGVyVGl0bGVcblx0XHRcdFx0XHRhY3RpdmVTb3J0PXt0aGlzLnByb3BzLmFjdGl2ZS5zb3J0fVxuXHRcdFx0XHRcdGF2YWlsYWJsZUNvbHVtbnM9e3RoaXMucHJvcHMuY3VycmVudExpc3QuY29sdW1uc31cblx0XHRcdFx0XHRoYW5kbGVTb3J0U2VsZWN0PXt0aGlzLmhhbmRsZVNvcnRTZWxlY3R9XG5cdFx0XHRcdFx0dGl0bGU9e2Bcblx0XHRcdFx0XHRcdCR7bnVtZXJhbChpdGVtcy5jb3VudCkuZm9ybWF0KCl9XG5cdFx0XHRcdFx0XHQke3BsdXJhbGl6ZShpdGVtcy5jb3VudCwgJyAnICsgc2luZ3VsYXIsICcgJyArIHBsdXJhbCl9XG5cdFx0XHRcdFx0YH1cblx0XHRcdFx0Lz5cblx0XHRcdFx0PExpc3RIZWFkZXJUb29sYmFyXG5cdFx0XHRcdFx0Ly8gY29tbW9uXG5cdFx0XHRcdFx0ZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG5cdFx0XHRcdFx0bGlzdD17bGlzdHNCeVBhdGhbdGhpcy5wcm9wcy5wYXJhbXMubGlzdElkXX1cblxuXHRcdFx0XHRcdC8vIGV4cGFuZFxuXHRcdFx0XHRcdGV4cGFuZElzQWN0aXZlPXshdGhpcy5zdGF0ZS5jb25zdHJhaW5UYWJsZVdpZHRofVxuXHRcdFx0XHRcdGV4cGFuZE9uQ2xpY2s9e3RoaXMudG9nZ2xlVGFibGVXaWR0aH1cblxuXHRcdFx0XHRcdC8vIGNyZWF0ZVxuXHRcdFx0XHRcdGNyZWF0ZUlzQXZhaWxhYmxlPXshbm9jcmVhdGV9XG5cdFx0XHRcdFx0Y3JlYXRlTGlzdE5hbWU9e3Npbmd1bGFyfVxuXHRcdFx0XHRcdGNyZWF0ZU9uQ2xpY2s9e2F1dG9jcmVhdGVcblx0XHRcdFx0XHRcdD8gdGhpcy5jcmVhdGVBdXRvY3JlYXRlXG5cdFx0XHRcdFx0XHQ6IHRoaXMub3BlbkNyZWF0ZU1vZGFsfVxuXG5cdFx0XHRcdFx0Ly8gc2VhcmNoXG5cdFx0XHRcdFx0c2VhcmNoSGFuZGxlQ2hhbmdlPXt0aGlzLnVwZGF0ZVNlYXJjaH1cblx0XHRcdFx0XHRzZWFyY2hIYW5kbGVDbGVhcj17dGhpcy5oYW5kbGVTZWFyY2hDbGVhcn1cblx0XHRcdFx0XHRzZWFyY2hIYW5kbGVLZXl1cD17dGhpcy5oYW5kbGVTZWFyY2hLZXl9XG5cdFx0XHRcdFx0c2VhcmNoVmFsdWU9e3RoaXMucHJvcHMuYWN0aXZlLnNlYXJjaH1cblxuXHRcdFx0XHRcdC8vIGZpbHRlcnNcblx0XHRcdFx0XHRmaWx0ZXJzQWN0aXZlPXt0aGlzLnByb3BzLmFjdGl2ZS5maWx0ZXJzfVxuXHRcdFx0XHRcdGZpbHRlcnNBdmFpbGFibGU9e3RoaXMucHJvcHMuY3VycmVudExpc3QuY29sdW1ucy5maWx0ZXIoKGNvbCkgPT4gKFxuXHRcdFx0XHRcdFx0Y29sLmZpZWxkICYmIGNvbC5maWVsZC5oYXNGaWx0ZXJNZXRob2QpIHx8IGNvbC50eXBlID09PSAnaGVhZGluZydcblx0XHRcdFx0XHQpfVxuXG5cdFx0XHRcdFx0Ly8gY29sdW1uc1xuXHRcdFx0XHRcdGNvbHVtbnNBY3RpdmU9e3RoaXMucHJvcHMuYWN0aXZlLmNvbHVtbnN9XG5cdFx0XHRcdFx0Y29sdW1uc0F2YWlsYWJsZT17dGhpcy5wcm9wcy5jdXJyZW50TGlzdC5jb2x1bW5zfVxuXG5cdFx0XHRcdFx0Ly8gQ3VzdG9tIENyZWF0ZSBCdXR0b25cblx0XHRcdFx0XHRjdXN0b21DcmVhdGVCdXR0b249e3RoaXMuY3VzdG9tQ3JlYXRlQnV0dG9ufVxuXHRcdFx0XHQvPlxuXHRcdFx0XHQ8TGlzdEZpbHRlcnNcblx0XHRcdFx0XHRkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cblx0XHRcdFx0XHRmaWx0ZXJzPXt0aGlzLnByb3BzLmFjdGl2ZS5maWx0ZXJzfVxuXHRcdFx0XHQvPlxuXHRcdFx0PC9Db250YWluZXI+XG5cdFx0KTtcblx0fSxcblxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0Ly8gVEFCTEVcblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblx0Y2hlY2tUYWJsZUl0ZW0oaXRlbSwgZSkge1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRjb25zdCBuZXdDaGVja2VkSXRlbXMgPSB7IC4uLnRoaXMuc3RhdGUuY2hlY2tlZEl0ZW1zIH07XG5cdFx0Y29uc3QgaXRlbUlkID0gaXRlbS5pZDtcblx0XHRpZiAodGhpcy5zdGF0ZS5jaGVja2VkSXRlbXNbaXRlbUlkXSkge1xuXHRcdFx0ZGVsZXRlIG5ld0NoZWNrZWRJdGVtc1tpdGVtSWRdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRuZXdDaGVja2VkSXRlbXNbaXRlbUlkXSA9IHRydWU7XG5cdFx0fVxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Y2hlY2tlZEl0ZW1zOiBuZXdDaGVja2VkSXRlbXMsXG5cdFx0fSk7XG5cdH0sXG5cdGNoZWNrQWxsVGFibGVJdGVtcygpIHtcblx0XHRjb25zdCBjaGVja2VkSXRlbXMgPSB7fTtcblx0XHR0aGlzLnByb3BzLml0ZW1zLnJlc3VsdHMuZm9yRWFjaChpdGVtID0+IHtcblx0XHRcdGNoZWNrZWRJdGVtc1tpdGVtLmlkXSA9IHRydWU7XG5cdFx0fSk7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRjaGVja2VkSXRlbXM6IGNoZWNrZWRJdGVtcyxcblx0XHR9KTtcblx0fSxcblx0Y2hlY2tBbGxJdGVtcygpIHtcblx0XHRjb25zdCBjaGVja2VkSXRlbXMgPSB7IC4uLnRoaXMuc3RhdGUuY2hlY2tlZEl0ZW1zIH07XG5cdFx0Ly8gSnVzdCBpbiBjYXNlIHRoaXMgQVBJIGNhbGwgdGFrZXMgYSBsb25nIHRpbWUsIHdlJ2xsIHVwZGF0ZSB0aGUgc2VsZWN0IGFsbCBidXR0b24gd2l0aFxuXHRcdC8vIGEgc3Bpbm5lci5cblx0XHR0aGlzLnNldFN0YXRlKHsgc2VsZWN0QWxsSXRlbXNMb2FkaW5nOiB0cnVlIH0pO1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHR0aGlzLnByb3BzLmN1cnJlbnRMaXN0LmxvYWRJdGVtcyh7XG5cdFx0XHRleHBhbmRSZWxhdGlvbnNoaXBGaWx0ZXJzOiBmYWxzZSxcblx0XHRcdGZpbHRlcnM6IHtcblx0XHRcdFx0ZmV0Y2hfYWxsX2RhdGE6IHRydWUsXG5cdFx0XHRcdGl0ZW1fY291bnQ6IHRoaXMucHJvcHMuY3VycmVudExpc3QgJiYgdGhpcy5wcm9wcy5jdXJyZW50TGlzdC5pdGVtcyAmJiB0aGlzLnByb3BzLmN1cnJlbnRMaXN0Lml0ZW1zLmNvdW50LFxuXHRcdFx0fSxcblx0XHR9LCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG5cdFx0XHRkYXRhLnJlc3VsdHMuZm9yRWFjaChpdGVtID0+IHtcblx0XHRcdFx0Y2hlY2tlZEl0ZW1zW2l0ZW0uaWRdID0gdHJ1ZTtcblx0XHRcdH0pO1xuXHRcdFx0c2VsZi5zZXRTdGF0ZSh7XG5cdFx0XHRcdGNoZWNrZWRJdGVtczogY2hlY2tlZEl0ZW1zLFxuXHRcdFx0XHRzZWxlY3RBbGxJdGVtc0xvYWRpbmc6IGZhbHNlLFxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH0sXG5cdHVuY2hlY2tBbGxUYWJsZUl0ZW1zKCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Y2hlY2tlZEl0ZW1zOiB7fSxcblx0XHR9KTtcblx0fSxcblx0ZGVsZXRlVGFibGVJdGVtKGl0ZW0sIGUpIHtcblx0XHRpZiAoZS5hbHRLZXkpIHtcblx0XHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goZGVsZXRlSXRlbShpdGVtLmlkKSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0Y29uc3QgbGlzdCA9IHRoaXMucHJvcHMuY3VycmVudExpc3Q7XG5cblx0XHRsZXQgbWVzc2FnZSA9IGBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIDxzdHJvbmc+JHtpdGVtLm5hbWV9PC9zdHJvbmc+P2A7XG5cblxuXG5cdFx0aWYgKGxpc3QuZGVsZXRlUHJvbXB0KSB7XG5cdFx0XHRtZXNzYWdlID0gbGlzdC5kZWxldGVQcm9tcHQ7XG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRjb25maXJtYXRpb25EaWFsb2c6IHtcblx0XHRcdFx0aXNPcGVuOiB0cnVlLFxuXHRcdFx0XHRsYWJlbDogJ0RlbGV0ZScsXG5cdFx0XHRcdGJvZHk6IChcblx0XHRcdFx0XHQ8ZGl2PlxuXHRcdFx0XHRcdFx0PHNwYW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBtZXNzYWdlIH19IC8+XG5cdFx0XHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0XHRcdDxiciAvPlxuXHRcdFx0XHRcdFx0VGhpcyBjYW5ub3QgYmUgdW5kb25lLlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQpLFxuXHRcdFx0XHRvbkNvbmZpcm1hdGlvbjogKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goZGVsZXRlSXRlbShpdGVtLmlkKSk7XG5cdFx0XHRcdFx0dGhpcy5yZW1vdmVDb25maXJtYXRpb25EaWFsb2coKTtcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0fSk7XG5cdH0sXG5cdHJlbW92ZUNvbmZpcm1hdGlvbkRpYWxvZygpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGNvbmZpcm1hdGlvbkRpYWxvZzoge1xuXHRcdFx0XHRpc09wZW46IGZhbHNlLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0fSxcblx0dG9nZ2xlVGFibGVXaWR0aCgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGNvbnN0cmFpblRhYmxlV2lkdGg6ICF0aGlzLnN0YXRlLmNvbnN0cmFpblRhYmxlV2lkdGgsXG5cdFx0fSk7XG5cdH0sXG5cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdC8vIENPTU1PTlxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXHRoYW5kbGVTb3J0U2VsZWN0KHBhdGgsIGludmVydGVkKSB7XG5cdFx0aWYgKGludmVydGVkKSBwYXRoID0gJy0nICsgcGF0aDtcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKHNldEFjdGl2ZVNvcnQocGF0aCkpO1xuXHR9LFxuXHR0b2dnbGVDcmVhdGVNb2RhbCh2aXNpYmxlKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRzaG93Q3JlYXRlRm9ybTogdmlzaWJsZSxcblx0XHRcdHNob3dJZnJhbWU6IHZpc2libGUsIC8vIEN1c3RvbSBBY3Rpb24gVmlld1xuXHRcdH0pO1xuXHR9LFxuXHRvcGVuQ3JlYXRlTW9kYWwoKSB7XG5cdFx0dGhpcy50b2dnbGVDcmVhdGVNb2RhbCh0cnVlKTtcblx0fSxcblx0Y2xvc2VDcmVhdGVNb2RhbCgpIHtcblx0XHR0aGlzLnRvZ2dsZUNyZWF0ZU1vZGFsKGZhbHNlKTtcblx0fSxcblx0c2hvd0JsYW5rU3RhdGUoKSB7XG5cdFx0cmV0dXJuICF0aGlzLnByb3BzLmxvYWRpbmdcblx0XHRcdCYmICF0aGlzLnByb3BzLml0ZW1zLnJlc3VsdHMubGVuZ3RoXG5cdFx0XHQmJiAhdGhpcy5wcm9wcy5hY3RpdmUuc2VhcmNoXG5cdFx0XHQmJiAhdGhpcy5wcm9wcy5hY3RpdmUuZmlsdGVycy5sZW5ndGg7XG5cdH0sXG5cdHJlbmRlckJsYW5rU3RhdGUoKSB7XG5cdFx0Y29uc3QgeyBjdXJyZW50TGlzdCB9ID0gdGhpcy5wcm9wcztcblxuXHRcdGlmICghdGhpcy5zaG93QmxhbmtTdGF0ZSgpKSByZXR1cm4gbnVsbDtcblxuXHRcdC8vIGNyZWF0ZSBhbmQgbmF2IGRpcmVjdGx5IHRvIHRoZSBpdGVtIHZpZXcsIG9yIG9wZW4gdGhlIGNyZWF0ZSBtb2RhbFxuXHRcdGNvbnN0IG9uQ2xpY2sgPSBjdXJyZW50TGlzdC5hdXRvY3JlYXRlXG5cdFx0XHQ/IHRoaXMuY3JlYXRlQXV0b2NyZWF0ZVxuXHRcdFx0OiB0aGlzLm9wZW5DcmVhdGVNb2RhbDtcblxuXHRcdC8vIGRpc3BsYXkgdGhlIGJ1dHRvbiBpZiBjcmVhdGUgYWxsb3dlZFxuXHRcdGNvbnN0IGJ1dHRvbiA9ICFjdXJyZW50TGlzdC5ub2NyZWF0ZSA/IChcblx0XHRcdDxHbHlwaEJ1dHRvbiBjb2xvcj1cInN1Y2Nlc3NcIiBnbHlwaD1cInBsdXNcIiBwb3NpdGlvbj1cImxlZnRcIiBvbkNsaWNrPXtvbkNsaWNrfSBkYXRhLWUyZS1saXN0LWNyZWF0ZS1idXR0b249XCJuby1yZXN1bHRzXCI+XG5cdFx0XHRcdENyZWF0ZSB7Y3VycmVudExpc3Quc2luZ3VsYXJ9XG5cdFx0XHQ8L0dseXBoQnV0dG9uPlxuXHRcdCkgOiBudWxsO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxDb250YWluZXI+XG5cdFx0XHRcdHsodGhpcy5wcm9wcy5lcnJvcikgPyAoXG5cdFx0XHRcdFx0PEZsYXNoTWVzc2FnZXNcblx0XHRcdFx0XHRcdG1lc3NhZ2VzPXt7XG5cdFx0XHRcdFx0XHRcdGVycm9yOiBbe1xuXHRcdFx0XHRcdFx0XHRcdHRpdGxlOiBcIlRoZXJlIGlzIGEgcHJvYmxlbSB3aXRoIHRoZSBuZXR3b3JrLCB3ZSdyZSB0cnlpbmcgdG8gcmVjb25uZWN0Li4uXCIsXG5cdFx0XHRcdFx0XHRcdH1dLFxuXHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHQvPlxuXHRcdFx0XHQpIDogbnVsbH1cblx0XHRcdFx0PEJsYW5rU3RhdGUgaGVhZGluZz17YE5vICR7dGhpcy5wcm9wcy5jdXJyZW50TGlzdC5wbHVyYWwudG9Mb3dlckNhc2UoKX0gZm91bmQuLi5gfSBzdHlsZT17eyBtYXJnaW5Ub3A6IDQwIH19PlxuXHRcdFx0XHRcdHtidXR0b259XG5cdFx0XHRcdDwvQmxhbmtTdGF0ZT5cblx0XHRcdDwvQ29udGFpbmVyPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlckFjdGl2ZVN0YXRlKCkge1xuXHRcdGlmICh0aGlzLnNob3dCbGFua1N0YXRlKCkpIHJldHVybiBudWxsO1xuXG5cdFx0Y29uc3QgY29udGFpbmVyU3R5bGUgPSB7XG5cdFx0XHR0cmFuc2l0aW9uOiAnbWF4LXdpZHRoIDE2MG1zIGVhc2Utb3V0Jyxcblx0XHRcdG1zVHJhbnNpdGlvbjogJ21heC13aWR0aCAxNjBtcyBlYXNlLW91dCcsXG5cdFx0XHRNb3pUcmFuc2l0aW9uOiAnbWF4LXdpZHRoIDE2MG1zIGVhc2Utb3V0Jyxcblx0XHRcdFdlYmtpdFRyYW5zaXRpb246ICdtYXgtd2lkdGggMTYwbXMgZWFzZS1vdXQnLFxuXHRcdH07XG5cdFx0aWYgKCF0aGlzLnN0YXRlLmNvbnN0cmFpblRhYmxlV2lkdGgpIHtcblx0XHRcdGNvbnRhaW5lclN0eWxlLm1heFdpZHRoID0gJzEwMCUnO1xuXHRcdH1cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdj5cblx0XHRcdFx0e3RoaXMucmVuZGVySGVhZGVyKCl9XG5cdFx0XHRcdDxDb250YWluZXI+XG5cdFx0XHRcdFx0PGRpdiBzdHlsZT17eyBoZWlnaHQ6IDM1LCBtYXJnaW5Cb3R0b206ICcxZW0nLCBtYXJnaW5Ub3A6ICcxZW0nIH19PlxuXHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyTWFuYWdlbWVudCgpfVxuXHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyUGFnaW5hdGlvbigpfVxuXHRcdFx0XHRcdFx0PHNwYW4gc3R5bGU9e3sgY2xlYXI6ICdib3RoJywgZGlzcGxheTogJ3RhYmxlJyB9fSAvPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L0NvbnRhaW5lcj5cblx0XHRcdFx0PENvbnRhaW5lciBzdHlsZT17Y29udGFpbmVyU3R5bGV9PlxuXHRcdFx0XHRcdHsodGhpcy5wcm9wcy5lcnJvcikgPyAoXG5cdFx0XHRcdFx0XHQ8Rmxhc2hNZXNzYWdlc1xuXHRcdFx0XHRcdFx0XHRtZXNzYWdlcz17e1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBbe1xuXHRcdFx0XHRcdFx0XHRcdFx0dGl0bGU6IFwiVGhlcmUgaXMgYSBwcm9ibGVtIHdpdGggdGhlIG5ldHdvcmssIHdlJ3JlIHRyeWluZyB0byByZWNvbm5lY3QuLlwiLFxuXHRcdFx0XHRcdFx0XHRcdH1dLFxuXHRcdFx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHQpIDogbnVsbH1cblx0XHRcdFx0XHR7KHRoaXMucHJvcHMubG9hZGluZykgPyAoXG5cdFx0XHRcdFx0XHQ8Q2VudGVyIGhlaWdodD1cIjUwdmhcIj5cblx0XHRcdFx0XHRcdFx0PFNwaW5uZXIgLz5cblx0XHRcdFx0XHRcdDwvQ2VudGVyPlxuXHRcdFx0XHRcdCkgOiAoXG5cdFx0XHRcdFx0XHRcdDxkaXY+XG5cdFx0XHRcdFx0XHRcdFx0PEl0ZW1zVGFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGFjdGl2ZVNvcnQ9e3RoaXMucHJvcHMuYWN0aXZlLnNvcnR9XG5cdFx0XHRcdFx0XHRcdFx0XHRjaGVja2VkSXRlbXM9e3RoaXMuc3RhdGUuY2hlY2tlZEl0ZW1zfVxuXHRcdFx0XHRcdFx0XHRcdFx0Y2hlY2tUYWJsZUl0ZW09e3RoaXMuY2hlY2tUYWJsZUl0ZW19XG5cdFx0XHRcdFx0XHRcdFx0XHRjb2x1bW5zPXt0aGlzLnByb3BzLmFjdGl2ZS5jb2x1bW5zfVxuXHRcdFx0XHRcdFx0XHRcdFx0ZGVsZXRlVGFibGVJdGVtPXt0aGlzLmRlbGV0ZVRhYmxlSXRlbX1cblx0XHRcdFx0XHRcdFx0XHRcdGhhbmRsZVNvcnRTZWxlY3Q9e3RoaXMuaGFuZGxlU29ydFNlbGVjdH1cblx0XHRcdFx0XHRcdFx0XHRcdGl0ZW1zPXt0aGlzLnByb3BzLml0ZW1zfVxuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdD17dGhpcy5wcm9wcy5jdXJyZW50TGlzdH1cblx0XHRcdFx0XHRcdFx0XHRcdG1hbmFnZU1vZGU9e3RoaXMuc3RhdGUubWFuYWdlTW9kZX1cblx0XHRcdFx0XHRcdFx0XHRcdHJvd0FsZXJ0PXt0aGlzLnByb3BzLnJvd0FsZXJ0fVxuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudFBhZ2U9e3RoaXMucHJvcHMubGlzdHMucGFnZS5pbmRleH1cblx0XHRcdFx0XHRcdFx0XHRcdHBhZ2VTaXplPXt0aGlzLnByb3BzLmxpc3RzLnBhZ2Uuc2l6ZX1cblx0XHRcdFx0XHRcdFx0XHRcdGRyYWc9e3RoaXMucHJvcHMubGlzdHMuZHJhZ31cblx0XHRcdFx0XHRcdFx0XHRcdGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuXHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyTm9TZWFyY2hSZXN1bHRzKCl9XG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0PC9Db250YWluZXI+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXJOb1NlYXJjaFJlc3VsdHMoKSB7XG5cdFx0aWYgKHRoaXMucHJvcHMuaXRlbXMucmVzdWx0cy5sZW5ndGgpIHJldHVybiBudWxsO1xuXHRcdGxldCBtYXRjaGluZyA9IHRoaXMucHJvcHMuYWN0aXZlLnNlYXJjaDtcblx0XHRpZiAodGhpcy5wcm9wcy5hY3RpdmUuZmlsdGVycy5sZW5ndGgpIHtcblx0XHRcdG1hdGNoaW5nICs9IChtYXRjaGluZyA/ICcgYW5kICcgOiAnJykgKyBwbHVyYWxpemUodGhpcy5wcm9wcy5hY3RpdmUuZmlsdGVycy5sZW5ndGgsICcqIGZpbHRlcicsICcqIGZpbHRlcnMnKTtcblx0XHR9XG5cdFx0bWF0Y2hpbmcgPSBtYXRjaGluZyA/ICcgZm91bmQgbWF0Y2hpbmcgJyArIG1hdGNoaW5nIDogJy4nO1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8QmxhbmtTdGF0ZSBzdHlsZT17eyBtYXJnaW5Ub3A6IDIwLCBtYXJnaW5Cb3R0b206IDIwIH19PlxuXHRcdFx0XHQ8R2x5cGhcblx0XHRcdFx0XHRuYW1lPVwic2VhcmNoXCJcblx0XHRcdFx0XHRzaXplPVwibWVkaXVtXCJcblx0XHRcdFx0XHRzdHlsZT17eyBtYXJnaW5Cb3R0b206IDIwIH19XG5cdFx0XHRcdC8+XG5cdFx0XHRcdDxoMiBzdHlsZT17eyBjb2xvcjogJ2luaGVyaXQnIH19PlxuXHRcdFx0XHRcdE5vIHt0aGlzLnByb3BzLmN1cnJlbnRMaXN0LnBsdXJhbC50b0xvd2VyQ2FzZSgpfXttYXRjaGluZ31cblx0XHRcdFx0PC9oMj5cblx0XHRcdDwvQmxhbmtTdGF0ZT5cblx0XHQpO1xuXHR9LFxuXHRjdXN0b21DcmVhdGVCdXR0b24oYWN0aW9uX3R5cGUpIHtcblx0XHRsZXQgYWN0aW9uID0gdGhpcy5wcm9wcy5saXN0cy5jdXJyZW50TGlzdCAmJiB0aGlzLnByb3BzLmxpc3RzLmN1cnJlbnRMaXN0LmxpbmsgJiYgdGhpcy5wcm9wcy5saXN0cy5jdXJyZW50TGlzdC5saW5rLmNyZWF0ZTtcblx0XHRhY3Rpb24gPSAoYWN0aW9uLmxlbmd0aCAmJiBhY3Rpb25bMF0gPT09ICcvJykgPyBhY3Rpb24uc2xpY2UoMSkgOiBhY3Rpb247XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRzaG93SWZyYW1lOiB0cnVlLFxuXHRcdFx0YWN0aW9uX3VybDogYWN0aW9uLFxuXHRcdFx0aWQ6IGFjdGlvbl90eXBlLFxuXHRcdH0pO1xuXHR9LFxuXHRyZW5kZXJJZnJhbWVWaWV3KCkgeyAvLyBDdXN0b20gQWN0aW9uIFZpZXdcblx0XHRjb25zdCB7IGFjdGlvbl91cmwsIGlkIH0gPSB0aGlzLnN0YXRlO1xuXHRcdGNvbnN0IGlmcmFtZVVSTCA9IGAke0tleXN0b25lLmV4dGVybmFsSG9zdH0vJHthY3Rpb25fdXJsfS8ke2lkfWA7XG5cdFx0cmV0dXJuIDxJZnJhbWVDb250ZW50IHNyYz17aWZyYW1lVVJMfSBzaG93PXt0aGlzLnN0YXRlLnNob3dJZnJhbWV9IG9uQ2FuY2VsPXt0aGlzLmNsb3NlQ3JlYXRlTW9kYWx9IG9uU2F2ZT17dGhpcy5vbkNyZWF0ZX0gY2xhc3NOYW1lPXtcImZ1bGwtc2NyZWVuXCJ9IC8+O1xuXHR9LFxuXHRyZW5kZXIoKSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLnJlYWR5KSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8Q2VudGVyIGhlaWdodD1cIjUwdmhcIiBkYXRhLXNjcmVlbi1pZD1cImxpc3RcIj5cblx0XHRcdFx0XHQ8U3Bpbm5lciAvPlxuXHRcdFx0XHQ8L0NlbnRlcj5cblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2IGRhdGEtc2NyZWVuLWlkPVwibGlzdFwiPlxuXHRcdFx0XHR7dGhpcy5yZW5kZXJJZnJhbWVWaWV3KCl9XG5cdFx0XHRcdHsodGhpcy5zdGF0ZS5hbGVydHMpID8gPEFsZXJ0TWVzc2FnZXMgYWxlcnRzPXt0aGlzLnN0YXRlLmFsZXJ0c30gLz4gOiBudWxsfVxuXHRcdFx0XHR7dGhpcy5yZW5kZXJCbGFua1N0YXRlKCl9XG5cdFx0XHRcdHt0aGlzLnJlbmRlckFjdGl2ZVN0YXRlKCl9XG5cdFx0XHRcdDxDcmVhdGVGb3JtXG5cdFx0XHRcdFx0ZXJyPXtLZXlzdG9uZS5jcmVhdGVGb3JtRXJyb3JzfVxuXHRcdFx0XHRcdGlzT3Blbj17dGhpcy5zdGF0ZS5zaG93Q3JlYXRlRm9ybX1cblx0XHRcdFx0XHRsaXN0PXt0aGlzLnByb3BzLmN1cnJlbnRMaXN0fVxuXHRcdFx0XHRcdG9uQ2FuY2VsPXt0aGlzLmNsb3NlQ3JlYXRlTW9kYWx9XG5cdFx0XHRcdFx0b25DcmVhdGU9e3RoaXMub25DcmVhdGV9XG5cdFx0XHRcdC8+XG5cdFx0XHRcdDxVcGRhdGVGb3JtXG5cdFx0XHRcdFx0aXNPcGVuPXt0aGlzLnN0YXRlLnNob3dVcGRhdGVGb3JtfVxuXHRcdFx0XHRcdGl0ZW1JZHM9e09iamVjdC5rZXlzKHRoaXMuc3RhdGUuY2hlY2tlZEl0ZW1zKX1cblx0XHRcdFx0XHRsaXN0PXt0aGlzLnByb3BzLmN1cnJlbnRMaXN0fVxuXHRcdFx0XHRcdG9uQ2FuY2VsPXsoKSA9PiB0aGlzLnRvZ2dsZVVwZGF0ZU1vZGFsKGZhbHNlKX1cblx0XHRcdFx0Lz5cblx0XHRcdFx0e3RoaXMucmVuZGVyQ29uZmlybWF0aW9uRGlhbG9nKCl9XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY29ubmVjdCgoc3RhdGUpID0+IHtcblx0cmV0dXJuIHtcblx0XHRsaXN0czogc3RhdGUubGlzdHMsXG5cdFx0bG9hZGluZzogc3RhdGUubGlzdHMubG9hZGluZyxcblx0XHRlcnJvcjogc3RhdGUubGlzdHMuZXJyb3IsXG5cdFx0Y3VycmVudExpc3Q6IHN0YXRlLmxpc3RzLmN1cnJlbnRMaXN0LFxuXHRcdGl0ZW1zOiBzdGF0ZS5saXN0cy5pdGVtcyxcblx0XHRwYWdlOiBzdGF0ZS5saXN0cy5wYWdlLFxuXHRcdHJlYWR5OiBzdGF0ZS5saXN0cy5yZWFkeSxcblx0XHRyb3dBbGVydDogc3RhdGUubGlzdHMucm93QWxlcnQsXG5cdFx0YWN0aXZlOiBzdGF0ZS5hY3RpdmUsXG5cdH07XG59KShMaXN0Vmlldyk7XG4iLCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xyXG5cclxuaW1wb3J0IHtcclxuXHRBRERfRklMVEVSLFxyXG5cdENMRUFSX0ZJTFRFUixcclxuXHRDTEVBUl9BTExfRklMVEVSUyxcclxuXHRTRVRfQUNUSVZFX1NFQVJDSCxcclxuXHRTRVRfQUNUSVZFX1NPUlQsXHJcblx0U0VUX0FDVElWRV9DT0xVTU5TLFxyXG5cdFNFVF9BQ1RJVkVfTElTVCxcclxuXHRTRVRfRklMVEVSUyxcclxuXHRRVUVSWV9IQVNfQ0hBTkdFRCxcclxuXHRSRVBMQUNFX0NBQ0hFRF9RVUVSWSxcclxuXHRDTEVBUl9DQUNIRURfUVVFUlksXHJcbn0gZnJvbSAnLi4vY29uc3RhbnRzJztcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuXHRjb2x1bW5zOiBbXSxcclxuXHRmaWx0ZXJzOiBbXSxcclxuXHRzZWFyY2g6ICcnLFxyXG5cdHNvcnQ6IHtcclxuXHRcdGlucHV0OiAnJyxcclxuXHRcdGlzRGVmYXVsdFNvcnQ6IGZhbHNlLFxyXG5cdFx0cGF0aHM6IFtdLFxyXG5cdFx0cmF3SW5wdXQ6ICcnLFxyXG5cdH0sXHJcblx0Y2FjaGVkUXVlcnk6IHt9LFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1hbmFnZSB0aGUgYWN0aXZlIHN0YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBhY3RpdmUgKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pIHtcclxuXHRzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcblx0XHRjYXNlIFNFVF9BQ1RJVkVfTElTVDpcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRpZDogYWN0aW9uLmlkLFxyXG5cdFx0XHRcdGNvbHVtbnM6IGFjdGlvbi5saXN0LmV4cGFuZENvbHVtbnMoYWN0aW9uLmxpc3QuZGVmYXVsdENvbHVtbnMpLFxyXG5cdFx0XHRcdGZpbHRlcnM6IFtdLFxyXG5cdFx0XHRcdHNlYXJjaDogJycsXHJcblx0XHRcdFx0c29ydDogYWN0aW9uLmxpc3QuZXhwYW5kU29ydChhY3Rpb24ubGlzdC5kZWZhdWx0U29ydCksXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBTRVRfQUNUSVZFX1NFQVJDSDpcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRzZWFyY2g6IGFjdGlvbi5zZWFyY2hTdHJpbmcsXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBTRVRfQUNUSVZFX1NPUlQ6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0c29ydDogYWN0aW9uLnNvcnQsXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBTRVRfQUNUSVZFX0NPTFVNTlM6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0Y29sdW1uczogYWN0aW9uLmNvbHVtbnMsXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBBRERfRklMVEVSOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdC8vIE92ZXJyaWRlIGV4aXN0aW5nIGZpbHRlciB3aXRoIGZpZWxkIHBhdGgsXHJcblx0XHRcdFx0Ly8gb3RoZXJ3aXNlIGFkZCB0byBmaWx0ZXJzIGFycmF5XHJcblx0XHRcdFx0ZmlsdGVyczogXy51bmlvbldpdGgoW2FjdGlvbi5maWx0ZXJdLCBzdGF0ZS5maWx0ZXJzLCAoc3RhdGVGaWx0ZXIsIGFjdGlvbkZpbHRlcikgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlRmlsdGVyLmZpZWxkLnBhdGggPT09IGFjdGlvbkZpbHRlci5maWVsZC5wYXRoO1xyXG5cdFx0XHRcdH0pLFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgU0VUX0ZJTFRFUlM6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0ZmlsdGVyczogYWN0aW9uLmZpbHRlcnMsXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBDTEVBUl9GSUxURVI6XHJcblx0XHRcdGxldCBuZXdGaWx0ZXJzID0gXy5maWx0ZXIoc3RhdGUuZmlsdGVycywgKGZpbHRlcikgPT4ge1xyXG5cdFx0XHRcdHJldHVybiBmaWx0ZXIuZmllbGQucGF0aCAhPT0gYWN0aW9uLnBhdGg7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGZpbHRlcnM6IG5ld0ZpbHRlcnMsXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBDTEVBUl9BTExfRklMVEVSUzpcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRmaWx0ZXJzOiBbXSxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIFFVRVJZX0hBU19DSEFOR0VEOlxyXG5cdFx0XHRjb25zdCB7XHJcblx0XHRcdFx0c2VhcmNoLFxyXG5cdFx0XHRcdHNvcnQsXHJcblx0XHRcdFx0ZmlsdGVycyxcclxuXHRcdFx0XHRjb2x1bW5zLFxyXG5cdFx0XHR9ID0gYWN0aW9uLnBhcnNlZFF1ZXJ5O1xyXG5cclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRzZWFyY2gsXHJcblx0XHRcdFx0c29ydDogc29ydCB8fCBpbml0aWFsU3RhdGUuc29ydCxcclxuXHRcdFx0XHRmaWx0ZXJzOiBmaWx0ZXJzIHx8IGluaXRpYWxTdGF0ZS5maWx0ZXJzLFxyXG5cdFx0XHRcdGNvbHVtbnM6IGNvbHVtbnMgfHwgaW5pdGlhbFN0YXRlLmNvbHVtbnMsXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBSRVBMQUNFX0NBQ0hFRF9RVUVSWTpcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRjYWNoZWRRdWVyeTogYWN0aW9uLmNhY2hlZFF1ZXJ5LFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgQ0xFQVJfQ0FDSEVEX1FVRVJZOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGNhY2hlZFF1ZXJ5OiB7fSxcclxuXHRcdFx0fSk7XHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHRyZXR1cm4gc3RhdGU7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhY3RpdmU7XHJcbiIsImltcG9ydCBhc3NpZ24gZnJvbSAnb2JqZWN0LWFzc2lnbic7XHJcbmltcG9ydCBMaXN0IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL0xpc3QnO1xyXG5pbXBvcnQge1xyXG5cdFNFTEVDVF9MSVNULFxyXG5cdElURU1TX0xPQURFRCxcclxuXHRMT0FEX0lURU1TLFxyXG5cdElURU1fTE9BRElOR19FUlJPUixcclxuXHRTRVRfQ1VSUkVOVF9QQUdFLFxyXG5cdFFVRVJZX0hBU19DSEFOR0VELFxyXG5cdFNFVF9ST1dfQUxFUlQsXHJcblx0UkVTRVRfRFJBR19QQUdFLFxyXG5cdFJFU0VUX0RSQUdfSVRFTVMsXHJcblx0U0VUX0RSQUdfSVRFTSxcclxuXHRTRVRfRFJBR19JTkRFWCxcclxuXHREUkFHX01PVkVfSVRFTSxcclxufSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5cclxuaW1wb3J0IHtcclxuXHRERUxFVEVfSVRFTSxcclxufSBmcm9tICcuLi8uLi9JdGVtL2NvbnN0YW50cyc7XHJcblxyXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XHJcblx0bG9hZGluZ1JlZjogbnVsbCxcclxuXHRsb2FkQ291bnRlcjogMCxcclxuXHRjdXJyZW50TGlzdDogbnVsbCxcclxuXHRsb2FkaW5nOiBmYWxzZSxcclxuXHRyZWFkeTogZmFsc2UsXHJcblx0ZXJyb3I6IG51bGwsXHJcblx0ZGF0YToge30sXHJcblx0aXRlbXM6IHtcclxuXHRcdHJlc3VsdHM6IFtdLFxyXG5cdFx0Y291bnQ6IG51bGwsXHJcblx0fSxcclxuXHRwYWdlOiB7XHJcblx0XHRzaXplOiBudWxsLFxyXG5cdFx0aW5kZXg6IHVuZGVmaW5lZCxcclxuXHR9LFxyXG5cdHJvd0FsZXJ0OiB7XHJcblx0XHRzdWNjZXNzOiBmYWxzZSxcclxuXHRcdGZhaWw6IGZhbHNlLFxyXG5cdH0sXHJcblx0ZHJhZzoge1xyXG5cdFx0cGFnZTogMSxcclxuXHRcdGl0ZW06IGZhbHNlLFxyXG5cdFx0Y2xvbmVkSXRlbXM6IGZhbHNlLFxyXG5cdFx0aW5kZXg6IGZhbHNlLFxyXG5cdH0sXHJcbn07XHJcblxyXG4vLyBSZWtleSB0aGUgbGlzdHMgaW4gdGhlIHN0YXRlIHdpdGggdGhlaXIgcGF0aHMgZm9yIGVhc2llciBtYXRjaGluZyB3aXRoIHRoZVxyXG4vLyBVUkwgcGFyYW1ldGVyc1xyXG5jb25zdCBpbml0aWFsTGlzdHMgPSBLZXlzdG9uZS5saXN0cztcclxuZm9yIChjb25zdCBuYW1lIGluIGluaXRpYWxMaXN0cykge1xyXG5cdGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluaXRpYWxMaXN0cywgbmFtZSkpIHtcclxuXHRcdGNvbnN0IGN1cnJlbnRMaXN0ID0gaW5pdGlhbExpc3RzW25hbWVdO1xyXG5cdFx0aW5pdGlhbFN0YXRlLmRhdGFbY3VycmVudExpc3QucGF0aF0gPSBuZXcgTGlzdChjdXJyZW50TGlzdCk7XHJcblx0XHRpbml0aWFsU3RhdGUuZGF0YVtjdXJyZW50TGlzdC5wYXRoXS5pdGVtcyA9IHtcclxuXHRcdFx0cmVzdWx0czogW10sXHJcblx0XHRcdGNvdW50OiBudWxsLFxyXG5cdFx0fTtcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYW5hZ2UgYWxsIGxpc3RzXHJcbiAqL1xyXG5mdW5jdGlvbiBsaXN0cyAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikge1xyXG5cdHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuXHRcdGNhc2UgU0VMRUNUX0xJU1Q6XHJcblx0XHRcdGNvbnN0IGxpc3QgPSBzdGF0ZS5kYXRhW2FjdGlvbi5pZF07XHJcblx0XHRcdGxpc3QuaWQgPSBhY3Rpb24uaWQ7XHJcblx0XHRcdGxldCBpdGVtcyA9IHtcclxuXHRcdFx0XHRyZXN1bHRzOiBbXSxcclxuXHRcdFx0XHRjb3VudDogbnVsbCxcclxuXHRcdFx0fTtcclxuXHRcdFx0Ly8gSWYgd2UgaGF2ZSBjYWNoZWQgaXRlbXMsIGluc3RlYWQgb2YgcmVzZXR0aW5nIHN0YXRlLml0ZW1zIHB1dCB0aGVcclxuXHRcdFx0Ly8gY2FjaGVkIGl0ZW1zIGluIHRoZSBzdGF0ZVxyXG5cdFx0XHRpZiAobGlzdC5pdGVtcy5jb3VudCAhPT0gbnVsbCkge1xyXG5cdFx0XHRcdGl0ZW1zID0gbGlzdC5pdGVtcztcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGN1cnJlbnRMaXN0OiBsaXN0LFxyXG5cdFx0XHRcdHJlYWR5OiBmYWxzZSxcclxuXHRcdFx0XHRpdGVtczogaXRlbXMsXHJcblx0XHRcdFx0cGFnZToge1xyXG5cdFx0XHRcdFx0Li4uc3RhdGUucGFnZSxcclxuXHRcdFx0XHRcdGluZGV4OiAxLFxyXG5cdFx0XHRcdFx0c2l6ZTogbGlzdC5wZXJQYWdlLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBMT0FEX0lURU1TOlxyXG5cdFx0XHRsZXQgbG9hZGluZyA9IHRydWU7XHJcblx0XHRcdGxldCByZWFkeSA9IHN0YXRlLnJlYWR5O1xyXG5cdFx0XHQvLyBJZiB3ZSBoYXZlIGNhY2hlZCBpdGVtcyByZWFkeSwgZG9uJ3Qgc2hvdyBhIGxvYWRpbmcgaW5kaWNhdG9yXHJcblx0XHRcdC8vIHdoaWxlIHdlIGZldGNoIHRoZSBuZXcgaXRlbXMgaW4gdGhlIGJhY2tncm91bmRcclxuXHRcdFx0aWYgKHN0YXRlLml0ZW1zLmNvdW50ICE9PSBudWxsICYmIGxvYWRpbmcgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0bG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdHJlYWR5ID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGxvYWRpbmcsXHJcblx0XHRcdFx0cmVhZHksXHJcblx0XHRcdFx0bG9hZENvdW50ZXI6IGFjdGlvbi5sb2FkQ291bnRlcixcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIElURU1TX0xPQURFRDpcclxuXHRcdFx0Ly8gQ2FjaGUgdGhlIGl0ZW1zIGluIHN0YXRlLmRhdGEgc28gd2UgY2FuIHNob3cgdGhlIGFscmVhZHkgZXhpc3RpbmdcclxuXHRcdFx0Ly8gaXRlbXMgb24gdGhlIG5leHQgcm91bmQgdHJpcCB3aGlsZSBmZXRjaGluZyB0aGUgbmV3IGl0ZW1zIGluIHRoZVxyXG5cdFx0XHQvLyBiYWNrZ3JvdW5kXHJcblx0XHRcdGNvbnN0IGNhY2hlZExpc3QgPSBzdGF0ZS5kYXRhW3N0YXRlLmN1cnJlbnRMaXN0LmlkXTtcclxuXHRcdFx0Y2FjaGVkTGlzdC5pdGVtcyA9IGFjdGlvbi5pdGVtcztcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRsb2FkaW5nOiBmYWxzZSxcclxuXHRcdFx0XHRyZWFkeTogdHJ1ZSxcclxuXHRcdFx0XHRlcnJvcjogbnVsbCxcclxuXHRcdFx0XHRpdGVtczogYWN0aW9uLml0ZW1zLFxyXG5cdFx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHRcdC4uLnN0YXRlLmRhdGEsXHJcblx0XHRcdFx0XHRbc3RhdGUuY3VycmVudExpc3QuaWRdOiBjYWNoZWRMaXN0LFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0bG9hZENvdW50ZXI6IDAsXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBJVEVNX0xPQURJTkdfRVJST1I6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0bG9hZGluZzogdHJ1ZSxcclxuXHRcdFx0XHRyZWFkeTogdHJ1ZSxcclxuXHRcdFx0XHRlcnJvcjogYWN0aW9uLmVycixcclxuXHRcdFx0XHRsb2FkQ291bnRlcjogMCxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIERFTEVURV9JVEVNOlxyXG5cdFx0XHRjb25zdCBuZXdJdGVtcyA9IHtcclxuXHRcdFx0XHRyZXN1bHRzOiBzdGF0ZS5pdGVtcy5yZXN1bHRzLmZpbHRlcigoZWwpID0+IChlbC5pZCAhPT0gYWN0aW9uLmlkKSksXHJcblx0XHRcdFx0Y291bnQ6IHN0YXRlLml0ZW1zLmNvdW50IC0gMSxcclxuXHRcdFx0fTtcclxuXHRcdFx0Y29uc3QgbmV3Q2FjaGVkTGlzdCA9IHN0YXRlLmRhdGFbc3RhdGUuY3VycmVudExpc3QuaWRdO1xyXG5cdFx0XHRuZXdDYWNoZWRMaXN0Lml0ZW1zID0gbmV3SXRlbXM7XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0aXRlbXM6IG5ld0l0ZW1zLFxyXG5cdFx0XHRcdGRhdGE6IHtcclxuXHRcdFx0XHRcdC4uLnN0YXRlLmRhdGEsXHJcblx0XHRcdFx0XHRbc3RhdGUuY3VycmVudExpc3QuaWRdOiBuZXdDYWNoZWRMaXN0LFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBTRVRfQ1VSUkVOVF9QQUdFOlxyXG5cdFx0XHRjb25zb2xlLmxvZyhhY3Rpb24uaW5kZXgpO1xyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGxvYWRpbmc6IHRydWUsXHJcblx0XHRcdFx0cGFnZToge1xyXG5cdFx0XHRcdFx0Li4uc3RhdGUucGFnZSxcclxuXHRcdFx0XHRcdGluZGV4OiBhY3Rpb24uaW5kZXgsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIFNFVF9ST1dfQUxFUlQ6XHJcblx0XHRcdGlmIChhY3Rpb24uZGF0YS5yZXNldCA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0XHRyb3dBbGVydDoge1xyXG5cdFx0XHRcdFx0XHRzdWNjZXNzOiBmYWxzZSxcclxuXHRcdFx0XHRcdFx0ZmFpbDogZmFsc2UsXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0cm93QWxlcnQ6IHtcclxuXHRcdFx0XHRcdC4uLnN0YXRlLnJvd0FsZXJ0LFxyXG5cdFx0XHRcdFx0Li4uYWN0aW9uLmRhdGEsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIFJFU0VUX0RSQUdfUEFHRTpcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRkcmFnOiB7XHJcblx0XHRcdFx0XHQuLi5zdGF0ZS5kcmFnLFxyXG5cdFx0XHRcdFx0cGFnZTogc3RhdGUucGFnZS5pbmRleCxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgUkVTRVRfRFJBR19JVEVNUzpcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRkcmFnOiB7XHJcblx0XHRcdFx0XHQuLi5zdGF0ZS5kcmFnLFxyXG5cdFx0XHRcdFx0Y2xvbmVkSXRlbXM6IHN0YXRlLml0ZW1zLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBTRVRfRFJBR19JVEVNOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGRyYWc6IHtcclxuXHRcdFx0XHRcdC4uLnN0YXRlLmRyYWcsXHJcblx0XHRcdFx0XHRpdGVtOiBhY3Rpb24uaXRlbSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgU0VUX0RSQUdfSU5ERVg6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0ZHJhZzoge1xyXG5cdFx0XHRcdFx0Li4uc3RhdGUuZHJhZyxcclxuXHRcdFx0XHRcdGluZGV4OiBhY3Rpb24uaW5kZXgsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIFFVRVJZX0hBU19DSEFOR0VEOlxyXG5cdFx0XHRjb25zdCBpbmRleCA9IHBhcnNlSW50KGFjdGlvbi5wYXJzZWRRdWVyeS5jdXJyZW50UGFnZSkgfHwgMTtcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRsb2FkaW5nOiB0cnVlLFxyXG5cdFx0XHRcdHBhZ2U6IHtcclxuXHRcdFx0XHRcdC4uLnN0YXRlLnBhZ2UsXHJcblx0XHRcdFx0XHRpbmRleCxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgRFJBR19NT1ZFX0lURU06XHJcblx0XHRcdC8vIFRPRE86IG9wdGlvbiB0byB1c2UgbWFuYWdlTW9kZSBmb3Igc29ydE9yZGVyXHJcblx0XHRcdGNvbnN0IGN1cnJlbnRJdGVtcyA9IHN0YXRlLml0ZW1zLnJlc3VsdHM7XHJcblx0XHRcdGNvbnN0IGl0ZW0gPSBjdXJyZW50SXRlbXNbYWN0aW9uLnByZXZJbmRleF07XHJcblx0XHRcdC8vIFJlbW92ZSBpdGVtIGF0IHByZXZJbmRleCBmcm9tIGFycmF5IGFuZCBzYXZlIHRoYXQgYXJyYXkgaW5cclxuXHRcdFx0Ly8gaXRlbXNXaXRob3V0SXRlbVxyXG5cdFx0XHRsZXQgaXRlbXNXaXRob3V0SXRlbSA9IGN1cnJlbnRJdGVtc1xyXG5cdFx0XHRcdC5zbGljZSgwLCBhY3Rpb24ucHJldkluZGV4KVxyXG5cdFx0XHRcdC5jb25jYXQoXHJcblx0XHRcdFx0XHRjdXJyZW50SXRlbXMuc2xpY2UoXHJcblx0XHRcdFx0XHRcdGFjdGlvbi5wcmV2SW5kZXggKyAxLFxyXG5cdFx0XHRcdFx0XHRjdXJyZW50SXRlbXMubGVuZ3RoXHJcblx0XHRcdFx0XHQpXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0Ly8gQWRkIGl0ZW0gYmFjayBpbiBhdCBuZXcgaW5kZXhcclxuXHRcdFx0aXRlbXNXaXRob3V0SXRlbS5zcGxpY2UoYWN0aW9uLm5ld0luZGV4LCAwLCBpdGVtKTtcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRpdGVtczoge1xyXG5cdFx0XHRcdFx0Li4uc3RhdGUuaXRlbXMsXHJcblx0XHRcdFx0XHRyZXN1bHRzOiBpdGVtc1dpdGhvdXRJdGVtLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0pO1xyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0cmV0dXJuIHN0YXRlO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbGlzdHM7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEFsZXJ0IH0gZnJvbSAnLi4vZWxlbWVudGFsJztcclxuXHJcbmltcG9ydCB7IHVwY2FzZSB9IGZyb20gJy4uLy4uL3V0aWxzL3N0cmluZyc7XHJcblxyXG4vKipcclxuICogVGhpcyByZW5kZXJzIGFsZXJ0cyBmb3IgQVBJIHN1Y2Nlc3MgYW5kIGVycm9yIHJlc3BvbnNlcy5cclxuICogICBFcnJvciBmb3JtYXQ6IHtcclxuICogICAgIGVycm9yOiAndmFsaWRhdGlvbiBlcnJvcnMnIC8vIFRoZSB1bmlxdWUgZXJyb3IgdHlwZSBpZGVudGlmaWVyXHJcbiAqICAgICBkZXRhaWw6IHsgLi4uIH0gLy8gT3B0aW9uYWwgZGV0YWlscyBzcGVjaWZpYyB0byB0aGF0IGVycm9yIHR5cGVcclxuICogICB9XHJcbiAqICAgU3VjY2VzcyBmb3JtYXQ6IHtcclxuICogICAgIHN1Y2Nlc3M6ICdpdGVtIHVwZGF0ZWQnLCAvLyBUaGUgdW5pcXVlIHN1Y2Nlc3MgdHlwZSBpZGVudGlmaWVyXHJcbiAqICAgICBkZXRhaWxzOiB7IC4uLiB9IC8vIE9wdGlvbmFsIGRldGFpbHMgc3BlY2lmaWMgdG8gdGhhdCBzdWNjZXNzIHR5cGVcclxuICogICB9XHJcbiAqICAgRXZlbnR1YWxseSBzdWNjZXNzIGFuZCBlcnJvciByZXNwb25zZXMgc2hvdWxkIGJlIGhhbmRsZWQgaW5kaXZpZHVhbGx5XHJcbiAqICAgYmFzZWQgb24gdGhlaXIgdHlwZS4gRm9yIGV4YW1wbGU6IHZhbGlkYXRpb24gZXJyb3JzIHNob3VsZCBiZSBkaXNwbGF5ZWQgbmV4dFxyXG4gKiAgIHRvIGVhY2ggaW52YWxpZCBmaWVsZCBhbmQgc2lnbmluIGVycm9ycyBzaG91bGQgcHJvbXQgdGhlIHVzZXIgdG8gc2lnbiBpbi5cclxuICovXHJcbnZhciBBbGVydE1lc3NhZ2VzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnQWxlcnRNZXNzYWdlcycsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRhbGVydHM6IFJlYWN0LlByb3BUeXBlcy5zaGFwZSh7XHJcblx0XHRcdGVycm9yOiBSZWFjdC5Qcm9wVHlwZXMuT2JqZWN0LFxyXG5cdFx0XHRzdWNjZXNzOiBSZWFjdC5Qcm9wVHlwZXMuT2JqZWN0LFxyXG5cdFx0fSksXHJcblx0fSxcclxuXHRnZXREZWZhdWx0UHJvcHMgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0YWxlcnRzOiB7fSxcclxuXHRcdH07XHJcblx0fSxcclxuXHRyZW5kZXJWYWxpZGF0aW9uRXJyb3JzICgpIHtcclxuXHRcdGxldCBlcnJvcnMgPSB0aGlzLnByb3BzLmFsZXJ0cy5lcnJvci5kZXRhaWw7XHJcblx0XHRpZiAoZXJyb3JzLm5hbWUgPT09ICdWYWxpZGF0aW9uRXJyb3InKSB7XHJcblx0XHRcdGVycm9ycyA9IGVycm9ycy5lcnJvcnM7XHJcblx0XHR9XHJcblx0XHRsZXQgZXJyb3JDb3VudCA9IE9iamVjdC5rZXlzKGVycm9ycykubGVuZ3RoO1xyXG5cdFx0bGV0IGFsZXJ0Q29udGVudDtcclxuXHRcdGxldCBtZXNzYWdlcyA9IE9iamVjdC5rZXlzKGVycm9ycykubWFwKChwYXRoKSA9PiB7XHJcblx0XHRcdGlmIChlcnJvckNvdW50ID4gMSkge1xyXG5cdFx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0XHQ8bGkga2V5PXtwYXRofT5cclxuXHRcdFx0XHRcdFx0e3VwY2FzZShlcnJvcnNbcGF0aF0uZXJyb3IgfHwgZXJyb3JzW3BhdGhdLm1lc3NhZ2UpfVxyXG5cdFx0XHRcdFx0PC9saT5cclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0XHQ8ZGl2IGtleT17cGF0aH0+XHJcblx0XHRcdFx0XHRcdHt1cGNhc2UoZXJyb3JzW3BhdGhdLmVycm9yIHx8IGVycm9yc1twYXRoXS5tZXNzYWdlKX1cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdGlmIChlcnJvckNvdW50ID4gMSkge1xyXG5cdFx0XHRhbGVydENvbnRlbnQgPSAoXHJcblx0XHRcdFx0PGRpdj5cclxuXHRcdFx0XHRcdDxoND5UaGVyZSB3ZXJlIHtlcnJvckNvdW50fSBlcnJvcnMgY3JlYXRpbmcgdGhlIG5ldyBpdGVtOjwvaDQ+XHJcblx0XHRcdFx0XHQ8dWw+e21lc3NhZ2VzfTwvdWw+XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRhbGVydENvbnRlbnQgPSBtZXNzYWdlcztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gPEFsZXJ0IGNvbG9yPVwiZGFuZ2VyXCI+e2FsZXJ0Q29udGVudH08L0FsZXJ0PjtcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRsZXQgeyBlcnJvciwgc3VjY2VzcyB9ID0gdGhpcy5wcm9wcy5hbGVydHM7XHJcblx0XHRpZiAoZXJyb3IpIHtcclxuXHRcdFx0Ly8gUmVuZGVyIGVycm9yIGFsZXJ0c1xyXG5cdFx0XHRzd2l0Y2ggKGVycm9yLmVycm9yKSB7XHJcblx0XHRcdFx0Y2FzZSAndmFsaWRhdGlvbiBlcnJvcnMnOlxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMucmVuZGVyVmFsaWRhdGlvbkVycm9ycygpO1xyXG5cdFx0XHRcdGNhc2UgJ2Vycm9yJzpcclxuXHRcdFx0XHRcdGlmIChlcnJvci5kZXRhaWwubmFtZSA9PT0gJ1ZhbGlkYXRpb25FcnJvcicpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMucmVuZGVyVmFsaWRhdGlvbkVycm9ycygpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIDxBbGVydCBjb2xvcj1cImRhbmdlclwiPnt1cGNhc2UoZXJyb3IuZXJyb3IpfTwvQWxlcnQ+O1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRyZXR1cm4gPEFsZXJ0IGNvbG9yPVwiZGFuZ2VyXCI+e3VwY2FzZShlcnJvci5lcnJvcil9PC9BbGVydD47XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoc3VjY2Vzcykge1xyXG5cdFx0XHQvLyBSZW5kZXIgc3VjY2VzcyBhbGVydHNcclxuXHRcdFx0cmV0dXJuIDxBbGVydCBjb2xvcj1cInN1Y2Nlc3NcIj57dXBjYXNlKHN1Y2Nlc3Muc3VjY2Vzcyl9PC9BbGVydD47XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG51bGw7IC8vIE5vIGFsZXJ0cywgcmVuZGVyIG5vdGhpbmdcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQWxlcnRNZXNzYWdlcztcclxuIiwiLyoqXHJcbiAqIFJlbmRlcnMgYSBjb25maXJtYXRpb24gZGlhbG9nIG1vZGFsXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQnV0dG9uLCBNb2RhbCB9IGZyb20gJy4uL2VsZW1lbnRhbCc7XHJcblxyXG5mdW5jdGlvbiBDb25maXJtYXRpb25EaWFsb2cgKHtcclxuXHRjYW5jZWxMYWJlbCxcclxuXHRjaGlsZHJlbixcclxuXHRjb25maXJtYXRpb25MYWJlbCxcclxuXHRjb25maXJtYXRpb25UeXBlLFxyXG5cdGh0bWwsXHJcblx0aXNPcGVuLFxyXG5cdG9uQ2FuY2VsLFxyXG5cdG9uQ29uZmlybWF0aW9uLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHQvLyBQcm9wZXJ0eSBWaW9sYXRpb25cclxuXHRpZiAoY2hpbGRyZW4gJiYgaHRtbCkge1xyXG5cdFx0Y29uc29sZS5lcnJvcignV2FybmluZzogRm9ybU5vdGUgY2Fubm90IHJlbmRlciBgY2hpbGRyZW5gIGFuZCBgaHRtbGAuIFlvdSBtdXN0IHByb3ZpZGUgb25lIG9yIHRoZSBvdGhlci4nKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8TW9kYWwuRGlhbG9nXHJcblx0XHRcdGJhY2tkcm9wQ2xvc2VzTW9kYWxcclxuXHRcdFx0aXNPcGVuPXtpc09wZW59XHJcblx0XHRcdG9uQ2xvc2U9e29uQ2FuY2VsfVxyXG5cdFx0XHR3aWR0aD17NDAwfVxyXG5cdFx0PlxyXG5cdFx0XHR7aHRtbCA/IChcclxuXHRcdFx0XHQ8TW9kYWwuQm9keSB7Li4ucHJvcHN9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogaHRtbCB9fSAvPlxyXG5cdFx0XHQpIDogKFxyXG5cdFx0XHRcdDxNb2RhbC5Cb2R5IHsuLi5wcm9wc30+e2NoaWxkcmVufTwvTW9kYWwuQm9keT5cclxuXHRcdFx0KX1cclxuXHRcdFx0PE1vZGFsLkZvb3Rlcj5cclxuXHRcdFx0XHQ8QnV0dG9uIGF1dG9Gb2N1cyBzaXplPVwic21hbGxcIiBkYXRhLWJ1dHRvbi10eXBlPVwiY29uZmlybVwiIGNvbG9yPXtjb25maXJtYXRpb25UeXBlfSBvbkNsaWNrPXtvbkNvbmZpcm1hdGlvbn0+XHJcblx0XHRcdFx0XHR7Y29uZmlybWF0aW9uTGFiZWx9XHJcblx0XHRcdFx0PC9CdXR0b24+XHJcblx0XHRcdFx0PEJ1dHRvbiBzaXplPVwic21hbGxcIiBkYXRhLWJ1dHRvbi10eXBlPVwiY2FuY2VsXCIgdmFyaWFudD1cImxpbmtcIiBjb2xvcj1cImNhbmNlbFwiIG9uQ2xpY2s9e29uQ2FuY2VsfT5cclxuXHRcdFx0XHRcdHtjYW5jZWxMYWJlbH1cclxuXHRcdFx0XHQ8L0J1dHRvbj5cclxuXHRcdFx0PC9Nb2RhbC5Gb290ZXI+XHJcblx0XHQ8L01vZGFsLkRpYWxvZz5cclxuXHQpO1xyXG59O1xyXG5Db25maXJtYXRpb25EaWFsb2cucHJvcFR5cGVzID0ge1xyXG5cdGJvZHk6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0Y2FuY2VsTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0Y29uZmlybWF0aW9uTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0Y29uZmlybWF0aW9uVHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnZGFuZ2VyJywgJ3ByaW1hcnknLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLFxyXG5cdG9uQ2FuY2VsOiBQcm9wVHlwZXMuZnVuYyxcclxuXHRvbkNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXHJcbn07XHJcbkNvbmZpcm1hdGlvbkRpYWxvZy5kZWZhdWx0UHJvcHMgPSB7XHJcblx0Y2FuY2VsTGFiZWw6ICdDYW5jZWwnLFxyXG5cdGNvbmZpcm1hdGlvbkxhYmVsOiAnT2theScsXHJcblx0Y29uZmlybWF0aW9uVHlwZTogJ2RhbmdlcicsXHJcblx0aXNPcGVuOiBmYWxzZSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbmZpcm1hdGlvbkRpYWxvZztcclxuIiwiLyoqXHJcbiAqIFRoZSBmb3JtIHRoYXQncyB2aXNpYmxlIHdoZW4gXCJDcmVhdGUgPEl0ZW1OYW1lPlwiIGlzIGNsaWNrZWQgb24gZWl0aGVyIHRoZVxyXG4gKiBMaXN0IHNjcmVlbiBvciB0aGUgSXRlbSBzY3JlZW5cclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xyXG5pbXBvcnQgdmtleSBmcm9tICd2a2V5JztcclxuaW1wb3J0IEFsZXJ0TWVzc2FnZXMgZnJvbSAnLi9BbGVydE1lc3NhZ2VzJztcclxuaW1wb3J0IHsgRmllbGRzIH0gZnJvbSAnRmllbGRUeXBlcyc7XHJcbmltcG9ydCBJbnZhbGlkRmllbGRUeXBlIGZyb20gJy4vSW52YWxpZEZpZWxkVHlwZSc7XHJcbmltcG9ydCB7IEJ1dHRvbiwgRm9ybSwgTW9kYWwgfSBmcm9tICcuLi9lbGVtZW50YWwnO1xyXG5cclxuaW1wb3J0IElmcmFtZUNvbnRlbnQgZnJvbSAnLi9JZnJhbWVDb250ZW50JztcclxuXHJcbmNvbnN0IENyZWF0ZUZvcm0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdDcmVhdGVGb3JtJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGVycjogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcclxuXHRcdGlzT3BlbjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcblx0XHRsaXN0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxyXG5cdFx0b25DYW5jZWw6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdFx0b25DcmVhdGU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdH0sXHJcblx0Z2V0RGVmYXVsdFByb3BzICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGVycjogbnVsbCxcclxuXHRcdFx0aXNPcGVuOiBmYWxzZSxcclxuXHRcdH07XHJcblx0fSxcclxuXHRnZXRJbml0aWFsU3RhdGUgKCkge1xyXG5cdFx0Ly8gU2V0IHRoZSBmaWVsZCB2YWx1ZXMgdG8gdGhlaXIgZGVmYXVsdCB2YWx1ZXMgd2hlbiBmaXJzdCByZW5kZXJpbmcgdGhlXHJcblx0XHQvLyBmb3JtLiAoSWYgdGhleSBoYXZlIGEgZGVmYXVsdCB2YWx1ZSwgdGhhdCBpcylcclxuXHRcdHZhciB2YWx1ZXMgPSB7fTtcclxuXHRcdE9iamVjdC5rZXlzKHRoaXMucHJvcHMubGlzdC5maWVsZHMpLmZvckVhY2goa2V5ID0+IHtcclxuXHRcdFx0dmFyIGZpZWxkID0gdGhpcy5wcm9wcy5saXN0LmZpZWxkc1trZXldO1xyXG5cdFx0XHR2YXIgRmllbGRDb21wb25lbnQgPSBGaWVsZHNbZmllbGQudHlwZV07XHJcblx0XHRcdHZhbHVlc1tmaWVsZC5wYXRoXSA9IEZpZWxkQ29tcG9uZW50LmdldERlZmF1bHRWYWx1ZShmaWVsZCk7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHZhbHVlczogdmFsdWVzLFxyXG5cdFx0XHRhbGVydHM6IHt9LFxyXG5cdFx0XHRzaG93SWZyYW1lOiBmYWxzZVxyXG5cdFx0fTtcclxuXHR9LFxyXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuXHRcdGlmKHRoaXMucHJvcHMubGlzdC5saW5rLmNyZWF0ZSkge1xyXG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0XHRzaG93SWZyYW1lOiB0cnVlXHJcblx0XHRcdH0pXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVLZXlQcmVzcywgZmFsc2UpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xyXG5cdFx0aWYoIXRoaXMuc3RhdGUuc2hvd0lmcmFtZSkge1xyXG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVLZXlQcmVzcywgZmFsc2UpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0aGFuZGxlS2V5UHJlc3MgKGV2dCkge1xyXG5cdFx0aWYgKHZrZXlbZXZ0LmtleUNvZGVdID09PSAnPGVzY2FwZT4nKSB7XHJcblx0XHRcdHRoaXMucHJvcHMub25DYW5jZWwoKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdC8vIEhhbmRsZSBpbnB1dCBjaGFuZ2UgZXZlbnRzXHJcblx0aGFuZGxlQ2hhbmdlIChldmVudCkge1xyXG5cdFx0dmFyIHZhbHVlcyA9IGFzc2lnbih7fSwgdGhpcy5zdGF0ZS52YWx1ZXMpO1xyXG5cdFx0dmFsdWVzW2V2ZW50LnBhdGhdID0gZXZlbnQudmFsdWU7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0dmFsdWVzOiB2YWx1ZXMsXHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdC8vIFNldCB0aGUgcHJvcHMgb2YgYSBmaWVsZFxyXG5cdGdldEZpZWxkUHJvcHMgKGZpZWxkKSB7XHJcblx0XHR2YXIgcHJvcHMgPSBhc3NpZ24oe30sIGZpZWxkKTtcclxuXHRcdHByb3BzLnZhbHVlID0gdGhpcy5zdGF0ZS52YWx1ZXNbZmllbGQucGF0aF07XHJcblx0XHRwcm9wcy52YWx1ZXMgPSB0aGlzLnN0YXRlLnZhbHVlcztcclxuXHRcdHByb3BzLm9uQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2U7XHJcblx0XHRwcm9wcy5tb2RlID0gJ2NyZWF0ZSc7XHJcblx0XHRwcm9wcy5rZXkgPSBmaWVsZC5wYXRoO1xyXG5cdFx0cmV0dXJuIHByb3BzO1xyXG5cdH0sXHJcblx0Ly8gQ3JlYXRlIGEgbmV3IGl0ZW0gd2hlbiB0aGUgZm9ybSBpcyBzdWJtaXR0ZWRcclxuXHRzdWJtaXRGb3JtIChldmVudCkge1xyXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdGNvbnN0IGNyZWF0ZUZvcm0gPSBldmVudC50YXJnZXQ7XHJcblx0XHRjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShjcmVhdGVGb3JtKTtcclxuXHRcdHRoaXMucHJvcHMubGlzdC5jcmVhdGVJdGVtKGZvcm1EYXRhLCAoZXJyLCBkYXRhKSA9PiB7XHJcblx0XHRcdGlmIChkYXRhKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMucHJvcHMub25DcmVhdGUpIHtcclxuXHRcdFx0XHRcdHRoaXMucHJvcHMub25DcmVhdGUoZGF0YSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIENsZWFyIGZvcm1cclxuXHRcdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRcdFx0XHR2YWx1ZXM6IHt9LFxyXG5cdFx0XHRcdFx0XHRhbGVydHM6IHtcclxuXHRcdFx0XHRcdFx0XHRzdWNjZXNzOiB7XHJcblx0XHRcdFx0XHRcdFx0XHRzdWNjZXNzOiAnSXRlbSBjcmVhdGVkJyxcclxuXHRcdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGlmICghZXJyKSB7XHJcblx0XHRcdFx0XHRlcnIgPSB7XHJcblx0XHRcdFx0XHRcdGVycm9yOiAnY29ubmVjdGlvbiBlcnJvcicsXHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyBJZiB3ZSBnZXQgYSBkYXRhYmFzZSBlcnJvciwgc2hvdyB0aGUgZGF0YWJhc2UgZXJyb3IgbWVzc2FnZVxyXG5cdFx0XHRcdC8vIGluc3RlYWQgb2Ygb25seSBzYXlpbmcgXCJEYXRhYmFzZSBlcnJvclwiXHJcblx0XHRcdFx0aWYgKGVyci5lcnJvciA9PT0gJ2RhdGFiYXNlIGVycm9yJykge1xyXG5cdFx0XHRcdFx0ZXJyLmVycm9yID0gZXJyLmRldGFpbC5lcnJtc2c7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRcdFx0YWxlcnRzOiB7XHJcblx0XHRcdFx0XHRcdGVycm9yOiBlcnIsXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdC8vIFJlbmRlciB0aGUgZm9ybSBpdHNlbGZcclxuXHRyZW5kZXJGb3JtICgpIHtcclxuXHRcdGlmICghdGhpcy5wcm9wcy5pc09wZW4pIHJldHVybjtcclxuXHJcblx0XHR2YXIgZm9ybSA9IFtdO1xyXG5cdFx0dmFyIGxpc3QgPSB0aGlzLnByb3BzLmxpc3Q7XHJcblx0XHR2YXIgbmFtZUZpZWxkID0gdGhpcy5wcm9wcy5saXN0Lm5hbWVGaWVsZDtcclxuXHRcdHZhciBmb2N1c1dhc1NldDtcclxuXHJcblx0XHQvLyBJZiB0aGUgbmFtZSBmaWVsZCBpcyBhbiBpbml0aWFsIG9uZSwgd2UgbmVlZCB0byByZW5kZXIgYSBwcm9wZXJcclxuXHRcdC8vIGlucHV0IGZvciBpdFxyXG5cdFx0aWYgKGxpc3QubmFtZUlzSW5pdGlhbCkge1xyXG5cdFx0XHR2YXIgbmFtZUZpZWxkUHJvcHMgPSB0aGlzLmdldEZpZWxkUHJvcHMobmFtZUZpZWxkKTtcclxuXHRcdFx0bmFtZUZpZWxkUHJvcHMuYXV0b0ZvY3VzID0gZm9jdXNXYXNTZXQgPSB0cnVlO1xyXG5cdFx0XHRpZiAobmFtZUZpZWxkLnR5cGUgPT09ICd0ZXh0Jykge1xyXG5cdFx0XHRcdG5hbWVGaWVsZFByb3BzLmNsYXNzTmFtZSA9ICdpdGVtLW5hbWUtZmllbGQnO1xyXG5cdFx0XHRcdG5hbWVGaWVsZFByb3BzLnBsYWNlaG9sZGVyID0gbmFtZUZpZWxkLmxhYmVsO1xyXG5cdFx0XHRcdG5hbWVGaWVsZFByb3BzLmxhYmVsID0gJyc7XHJcblx0XHRcdH1cclxuXHRcdFx0Zm9ybS5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmllbGRzW25hbWVGaWVsZC50eXBlXSwgbmFtZUZpZWxkUHJvcHMpKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZW5kZXIgaW5wdXRzIGZvciBhbGwgaW5pdGlhbCBmaWVsZHNcclxuXHRcdE9iamVjdC5rZXlzKGxpc3QuaW5pdGlhbEZpZWxkcykuZm9yRWFjaChrZXkgPT4ge1xyXG5cdFx0XHR2YXIgZmllbGQgPSBsaXN0LmZpZWxkc1tsaXN0LmluaXRpYWxGaWVsZHNba2V5XV07XHJcblx0XHRcdC8vIElmIHRoZXJlJ3Mgc29tZXRoaW5nIHdlaXJkIHBhc3NlZCBpbiBhcyBmaWVsZCB0eXBlLCByZW5kZXIgdGhlXHJcblx0XHRcdC8vIGludmFsaWQgZmllbGQgdHlwZSBjb21wb25lbnRcclxuXHRcdFx0aWYgKHR5cGVvZiBGaWVsZHNbZmllbGQudHlwZV0gIT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRmb3JtLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChJbnZhbGlkRmllbGRUeXBlLCB7IHR5cGU6IGZpZWxkLnR5cGUsIHBhdGg6IGZpZWxkLnBhdGgsIGtleTogZmllbGQucGF0aCB9KSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIEdldCB0aGUgcHJvcHMgZm9yIHRoZSBpbnB1dCBmaWVsZFxyXG5cdFx0XHR2YXIgZmllbGRQcm9wcyA9IHRoaXMuZ2V0RmllbGRQcm9wcyhmaWVsZCk7XHJcblx0XHRcdC8vIElmIHRoZXJlIHdhcyBubyBmb2N1c1JlZiBzZXQgcHJldmlvdXNseSwgc2V0IHRoZSBjdXJyZW50IGZpZWxkIHRvXHJcblx0XHRcdC8vIGJlIHRoZSBvbmUgdG8gYmUgZm9jdXNzZWQuIEdlbmVyYWxseSB0aGUgZmlyc3QgaW5wdXQgZmllbGQsIGlmXHJcblx0XHRcdC8vIHRoZXJlJ3MgYW4gaW5pdGlhbCBuYW1lIGZpZWxkIHRoYXQgdGFrZXMgcHJlY2VkZW5jZS5cclxuXHRcdFx0aWYgKCFmb2N1c1dhc1NldCkge1xyXG5cdFx0XHRcdGZpZWxkUHJvcHMuYXV0b0ZvY3VzID0gZm9jdXNXYXNTZXQgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvcm0ucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KEZpZWxkc1tmaWVsZC50eXBlXSwgZmllbGRQcm9wcykpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PEZvcm0gbGF5b3V0PVwiaG9yaXpvbnRhbFwiIG9uU3VibWl0PXt0aGlzLnN1Ym1pdEZvcm19PlxyXG5cdFx0XHRcdDxNb2RhbC5IZWFkZXJcclxuXHRcdFx0XHRcdHRleHQ9eydDcmVhdGUgYSBuZXcgJyArIGxpc3Quc2luZ3VsYXJ9XHJcblx0XHRcdFx0XHRzaG93Q2xvc2VCdXR0b25cclxuXHRcdFx0XHQvPlxyXG5cdFx0XHRcdDxNb2RhbC5Cb2R5PlxyXG5cdFx0XHRcdFx0PEFsZXJ0TWVzc2FnZXMgYWxlcnRzPXt0aGlzLnN0YXRlLmFsZXJ0c30gLz5cclxuXHRcdFx0XHRcdHtmb3JtfVxyXG5cdFx0XHRcdDwvTW9kYWwuQm9keT5cclxuXHRcdFx0XHQ8TW9kYWwuRm9vdGVyPlxyXG5cdFx0XHRcdFx0PEJ1dHRvbiBjb2xvcj1cInN1Y2Nlc3NcIiB0eXBlPVwic3VibWl0XCIgZGF0YS1idXR0b24tdHlwZT1cInN1Ym1pdFwiPlxyXG5cdFx0XHRcdFx0XHRDcmVhdGVcclxuXHRcdFx0XHRcdDwvQnV0dG9uPlxyXG5cdFx0XHRcdFx0PEJ1dHRvblxyXG5cdFx0XHRcdFx0XHR2YXJpYW50PVwibGlua1wiXHJcblx0XHRcdFx0XHRcdGNvbG9yPVwiY2FuY2VsXCJcclxuXHRcdFx0XHRcdFx0ZGF0YS1idXR0b24tdHlwZT1cImNhbmNlbFwiXHJcblx0XHRcdFx0XHRcdG9uQ2xpY2s9e3RoaXMucHJvcHMub25DYW5jZWx9XHJcblx0XHRcdFx0XHQ+XHJcblx0XHRcdFx0XHRcdENhbmNlbFxyXG5cdFx0XHRcdFx0PC9CdXR0b24+XHJcblx0XHRcdFx0PC9Nb2RhbC5Gb290ZXI+XHJcblx0XHRcdDwvRm9ybT5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXJDb250ZW50KCkge1xyXG5cdFx0Y29uc3Qge3Nob3dJZnJhbWV9ID0gdGhpcy5zdGF0ZTtcclxuXHRcdGNvbnN0IGlmcmFtZVVSTCA9IGAke0tleXN0b25lLmV4dGVybmFsSG9zdH0ke3RoaXMucHJvcHMubGlzdC5saW5rLmNyZWF0ZX1gO1xyXG5cclxuXHRcdHJldHVybiAoc2hvd0lmcmFtZSAmJiB0aGlzLnByb3BzLmlzT3BlbikgP1xyXG5cdFx0XHQ8SWZyYW1lQ29udGVudCBzcmM9e2lmcmFtZVVSTH0gc2hvdz17dGhpcy5wcm9wcy5pc09wZW59IG9uQ2FuY2VsPXt0aGlzLnByb3BzLm9uQ2FuY2VsfSBvblNhdmU9e3RoaXMucHJvcHMub25DcmVhdGV9IGNsYXNzTmFtZT17XCJmdWxsLXNjcmVlblwifS8+IDpcclxuXHRcdFx0PE1vZGFsLkRpYWxvZyBpc09wZW49e3RoaXMucHJvcHMuaXNPcGVufSBvbkNsb3NlPXt0aGlzLnByb3BzLm9uQ2FuY2VsfSBiYWNrZHJvcENsb3Nlc01vZGFsPlxyXG5cdFx0XHRcdHt0aGlzLnJlbmRlckZvcm0oKX1cclxuXHRcdFx0PC9Nb2RhbC5EaWFsb2c+XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucmVuZGVyQ29udGVudCgpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDcmVhdGVGb3JtO1xyXG4iLCIvKipcclxuICogQSBzaW5nbGUgZmxhc2ggbWVzc2FnZSBjb21wb25lbnQuIFVzZWQgYnkgRmxhc2hNZXNzYWdlcy5qc1xyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEFsZXJ0IH0gZnJvbSAnLi4vZWxlbWVudGFsJztcclxuXHJcbmNvbnN0IEZsYXNoTWVzc2FnZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdG1lc3NhZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0XHRQcm9wVHlwZXMub2JqZWN0LFxyXG5cdFx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0XSkuaXNSZXF1aXJlZCxcclxuXHRcdHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0fSxcclxuXHQvLyBSZW5kZXIgdGhlIG1lc3NhZ2VcclxuXHRyZW5kZXJNZXNzYWdlIChtZXNzYWdlKSB7XHJcblx0XHQvLyBJZiB0aGUgbWVzc2FnZSBpcyBvbmx5IGEgc3RyaW5nLCByZW5kZXIgdGhlIHN0cmluZ1xyXG5cdFx0aWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdDxzcGFuPlxyXG5cdFx0XHRcdFx0e21lc3NhZ2V9XHJcblx0XHRcdFx0PC9zcGFuPlxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEdldCB0aGUgdGl0bGUgYW5kIHRoZSBkZXRhaWwgb2YgdGhlIG1lc3NhZ2VcclxuXHRcdGNvbnN0IHRpdGxlID0gbWVzc2FnZS50aXRsZSA/IDxoND57bWVzc2FnZS50aXRsZX08L2g0PiA6IG51bGw7XHJcblx0XHRjb25zdCBkZXRhaWwgPSBtZXNzYWdlLmRldGFpbCA/IDxwPnttZXNzYWdlLmRldGFpbH08L3A+IDogbnVsbDtcclxuXHRcdC8vIElmIHRoZSBtZXNzYWdlIGhhcyBhIGxpc3QgYXR0YWNoZWQsIHJlbmRlciBhIDx1bD5cclxuXHRcdGNvbnN0IGxpc3QgPSBtZXNzYWdlLmxpc3QgPyAoXHJcblx0XHRcdDx1bCBzdHlsZT17eyBtYXJnaW5Cb3R0b206IDAgfX0+XHJcblx0XHRcdFx0e21lc3NhZ2UubGlzdC5tYXAoKGl0ZW0sIGkpID0+IDxsaSBrZXk9e2BpJHtpfWB9PntpdGVtfTwvbGk+KX1cclxuXHRcdFx0PC91bD5cclxuXHRcdCkgOiBudWxsO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxzcGFuPlxyXG5cdFx0XHRcdHt0aXRsZX1cclxuXHRcdFx0XHR7ZGV0YWlsfVxyXG5cdFx0XHRcdHtsaXN0fVxyXG5cdFx0XHQ8L3NwYW4+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IHsgbWVzc2FnZSwgdHlwZSB9ID0gdGhpcy5wcm9wcztcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8QWxlcnQgY29sb3I9e3R5cGV9PlxyXG5cdFx0XHRcdHt0aGlzLnJlbmRlck1lc3NhZ2UobWVzc2FnZSl9XHJcblx0XHRcdDwvQWxlcnQ+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGbGFzaE1lc3NhZ2U7XHJcbiIsIi8qKlxyXG4gKiBSZW5kZXIgYSBmZXcgZmxhc2ggbWVzc2FnZXMsIGUuZy4gZXJyb3JzLCBzdWNjZXNzIG1lc3NhZ2VzLCB3YXJuaW5ncywuLi5cclxuICpcclxuICogVXNlIGxpa2UgdGhpczpcclxuICogPEZsYXNoTWVzc2FnZXNcclxuICogICBtZXNzYWdlcz17e1xyXG4gKlx0ICAgZXJyb3I6IFt7XHJcbiAqXHQgICAgIHRpdGxlOiAnVGhlcmUgaXMgYSBuZXR3b3JrIHByb2JsZW0nLFxyXG4gKlx0ICAgICBkZXRhaWw6ICdQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLi4uJyxcclxuICpcdCAgIH1dLFxyXG4gKiAgIH19XHJcbiAqIC8+XHJcbiAqXHJcbiAqIEluc3RlYWQgb2YgZXJyb3IsIGl0IGNhbiBhbHNvIGJlIGhpbGlnaHQsIGluZm8sIHN1Y2Nlc3Mgb3Igd2FybmluZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XHJcblxyXG5pbXBvcnQgRmxhc2hNZXNzYWdlIGZyb20gJy4vRmxhc2hNZXNzYWdlJztcclxuXHJcbnZhciBGbGFzaE1lc3NhZ2VzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnRmxhc2hNZXNzYWdlcycsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRtZXNzYWdlczogUmVhY3QuUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRcdFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG5cdFx0XHRSZWFjdC5Qcm9wVHlwZXMuc2hhcGUoe1xyXG5cdFx0XHRcdGVycm9yOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXHJcblx0XHRcdFx0aGlsaWdodDogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxyXG5cdFx0XHRcdGluZm86IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcclxuXHRcdFx0XHRzdWNjZXNzOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXHJcblx0XHRcdFx0d2FybmluZzogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxyXG5cdFx0XHR9KSxcclxuXHRcdF0pLFxyXG5cdH0sXHJcblx0Ly8gUmVuZGVyIG1lc3NhZ2VzIGJ5IHRoZWlyIHR5cGVcclxuXHRyZW5kZXJNZXNzYWdlcyAobWVzc2FnZXMsIHR5cGUpIHtcclxuXHRcdGlmICghbWVzc2FnZXMgfHwgIW1lc3NhZ2VzLmxlbmd0aCkgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIG1lc3NhZ2VzLm1hcCgobWVzc2FnZSwgaSkgPT4ge1xyXG5cdFx0XHRyZXR1cm4gPEZsYXNoTWVzc2FnZSBtZXNzYWdlPXttZXNzYWdlfSB0eXBlPXt0eXBlfSBrZXk9e2BpJHtpfWB9IC8+O1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHQvLyBSZW5kZXIgdGhlIGluZGl2aWR1YWwgbWVzc2FnZXMgYmFzZWQgb24gdGhlaXIgdHlwZVxyXG5cdHJlbmRlclR5cGVzICh0eXBlcykge1xyXG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKHR5cGVzKS5tYXAodHlwZSA9PiB0aGlzLnJlbmRlck1lc3NhZ2VzKHR5cGVzW3R5cGVdLCB0eXBlKSk7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0aWYgKCF0aGlzLnByb3BzLm1lc3NhZ2VzKSByZXR1cm4gbnVsbDtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImZsYXNoLW1lc3NhZ2VzXCI+XHJcblx0XHRcdFx0e18uaXNQbGFpbk9iamVjdCh0aGlzLnByb3BzLm1lc3NhZ2VzKSAmJiB0aGlzLnJlbmRlclR5cGVzKHRoaXMucHJvcHMubWVzc2FnZXMpfVxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEZsYXNoTWVzc2FnZXM7XHJcbiIsIi8qKlxyXG4gKiBUaGUgZm9ybSB0aGF0J3MgdmlzaWJsZSB3aGVuIFwiQ3JlYXRlIDxJdGVtTmFtZT5cIiBpcyBjbGlja2VkIG9uIGVpdGhlciB0aGVcclxuICogTGlzdCBzY3JlZW4gb3IgdGhlIEl0ZW0gc2NyZWVuXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmNvbnN0IElmcmFtZUNvbnRlbnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdJZnJhbWVDb250ZW50JyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdHNob3c6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG5cdFx0c3JjOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0b25DYW5jZWw6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdFx0b25TYXZlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHR9LFxyXG5cdGdldERlZmF1bHRQcm9wcyAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRzaG93OiBmYWxzZSxcclxuXHRcdH07XHJcblx0fSxcclxuXHRnZXRJbml0aWFsU3RhdGUgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdH07XHJcblx0fSxcclxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5oYW5kbGVGcmFtZVRhc2tzLCB0aGlzKTtcclxuXHR9LFxyXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcclxuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLmhhbmRsZUZyYW1lVGFza3MsIHRoaXMpO1xyXG5cdH0sXHJcblx0aGFuZGxlRnJhbWVUYXNrcyhlKXtcclxuXHRcdHRyeXtcclxuXHRcdFx0Y29uc3QgbWVzc2FnZSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcclxuXHRcdFx0c3dpdGNoKG1lc3NhZ2UudHlwZSkge1xyXG5cdFx0XHRcdGNhc2UgJ2NvbnRlbnRVcGRhdGUnOiBcclxuXHRcdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRcdFx0XHRjb250ZW50SGVpZ2h0OiBtZXNzYWdlLmRhdGFcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlICdvblNhdmUnOlxyXG5cdFx0XHRcdFx0aWYgKHRoaXMucHJvcHMub25TYXZlKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMucHJvcHMub25TYXZlKG1lc3NhZ2UuZGF0YSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlICdvbkNhbmNlbCc6XHJcblx0XHRcdFx0XHRpZih0aGlzLnByb3BzLm9uQ2FuY2VsKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMucHJvcHMub25DYW5jZWwoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihlcnIpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0cmVuZGVyQ29udGVudCgpIHtcclxuXHRcdGNvbnN0IHtzcmMsIHNob3csIGNsYXNzTmFtZSA9ICcnfSA9IHRoaXMucHJvcHM7XHJcblx0XHRjb25zdCBpZnJhbWVVUkwgPSBgJHtzcmN9P3Rva2VuPSR7S2V5c3RvbmUudXNlci50b2tlbn1gXHJcblx0XHRyZXR1cm4gc2hvdyA/XHJcblx0XHRcdDxpZnJhbWUgY2xhc3NOYW1lPXsnY29udGVudC1mcmFtZSAnICsgY2xhc3NOYW1lfSBzdHlsZT17e2hlaWdodDogdGhpcy5zdGF0ZS5jb250ZW50SGVpZ2h0fX0gcmVmPXsoZikgPT4gdGhpcy5pZnIgPSBmIH0gc3JjPXtpZnJhbWVVUkx9IC8+IDogPGRpdiAvPlxyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHJldHVybiB0aGlzLnJlbmRlckNvbnRlbnQoKTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gSWZyYW1lQ29udGVudDtcclxuIiwiLyoqXHJcbiAqIFJlbmRlcnMgYW4gXCJJbnZhbGlkIEZpZWxkIFR5cGVcIiBlcnJvclxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5jb25zdCBJbnZhbGlkRmllbGRUeXBlID0gZnVuY3Rpb24gKHByb3BzKSB7XHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXYgY2xhc3NOYW1lPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XHJcblx0XHRcdEludmFsaWQgZmllbGQgdHlwZSA8c3Ryb25nPntwcm9wcy50eXBlfTwvc3Ryb25nPiBhdCBwYXRoIDxzdHJvbmc+e3Byb3BzLnBhdGh9PC9zdHJvbmc+XHJcblx0XHQ8L2Rpdj5cclxuXHQpO1xyXG59O1xyXG5cclxuSW52YWxpZEZpZWxkVHlwZS5wcm9wVHlwZXMgPSB7XHJcblx0cGF0aDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHR0eXBlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBJbnZhbGlkRmllbGRUeXBlO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vdGhlbWUnO1xyXG5pbXBvcnQgeyBkYXJrZW4sIGxpZ2h0ZW4gfSBmcm9tICcuLi8uLi91dGlscy9jb2xvcic7XHJcblxyXG5mdW5jdGlvbiBLYmQgKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9KSB7XHJcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKGNsYXNzZXMua2JkKTtcclxuXHJcblx0cmV0dXJuIDxrYmQgey4uLnByb3BzfSAvPjtcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0a2JkOiB7XHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9yLmJvZHksXHJcblx0XHRib3JkZXJSYWRpdXM6IDMsXHJcblx0XHRib3JkZXI6IGAxcHggc29saWQgI2NjY2AsXHJcblx0XHRib3JkZXJCb3R0b21Db2xvcjogZGFya2VuKCcjY2NjJywgNCksXHJcblx0XHRib3JkZXJUb3BDb2xvcjogbGlnaHRlbignI2NjYycsIDQpLFxyXG5cdFx0Ym94U2hhZG93OiBgMCAxcHggMXB4IHJnYmEoMCwgMCwgMCwgMC4xMiksIDAgMnB4IDAgMCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNykgaW5zZXRgLFxyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHRmb250RmFtaWx5OiAnQ29uc29sYXMsIFwiTGliZXJhdGlvbiBNb25vXCIsIENvdXJpZXIsIG1vbm9zcGFjZScsXHJcblx0XHRmb250U2l6ZTogJzAuODVlbScsXHJcblx0XHRmb250V2VpZ2h0OiA3MDAsXHJcblx0XHRsaW5lSGVpZ2h0OiAnaW5oZXJpdCcsXHJcblx0XHRwYWRkaW5nOiAnMXB4IDRweCcsXHJcblx0XHR3aGl0ZVNwYWNlOiAnbm93cmFwJyxcclxuXHJcblx0XHQvLyBsaXR0bGUgaGFjayB0byB0d2VhayBcInZpc3VhbC1taWRkbGVcIiBhbGlnbm1lbnRcclxuXHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxyXG5cdFx0dG9wOiAtMSxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBLYmQ7XHJcbiIsIi8qKlxyXG4gKiBSZW5kZXIgdGhlIGJvZHkgb2YgYSBwb3BvdXRcclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgYmxhY2tsaXN0IGZyb20gJ2JsYWNrbGlzdCc7XHJcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5cclxudmFyIFBvcG91dEJvZHkgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdQb3BvdXRCb2R5JyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxyXG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0c2Nyb2xsYWJsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgY2xhc3NOYW1lID0gY2xhc3NuYW1lcygnUG9wb3V0X19ib2R5Jywge1xyXG5cdFx0XHQnUG9wb3V0X19zY3JvbGxhYmxlLWFyZWEnOiB0aGlzLnByb3BzLnNjcm9sbGFibGUsXHJcblx0XHR9LCB0aGlzLnByb3BzLmNsYXNzTmFtZSk7XHJcblx0XHRjb25zdCBwcm9wcyA9IGJsYWNrbGlzdCh0aGlzLnByb3BzLCAnY2xhc3NOYW1lJywgJ3Njcm9sbGFibGUnKTtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSB7Li4ucHJvcHN9IC8+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQb3BvdXRCb2R5O1xyXG4iLCIvKipcclxuICogUmVuZGVyIGEgZm9vdGVyIGZvciBhIHBvcG91dFxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5jb25zdCBCVVRUT05fQkFTRV9DTEFTU05BTUUgPSAnUG9wb3V0X19mb290ZXJfX2J1dHRvbiBQb3BvdXRfX2Zvb3Rlcl9fYnV0dG9uLS0nO1xyXG5cclxuY29uc3QgUG9wb3V0Rm9vdGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnUG9wb3V0Rm9vdGVyJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMubm9kZSxcclxuXHRcdHByaW1hcnlCdXR0b25BY3Rpb246IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdFx0cHJpbWFyeUJ1dHRvbklzU3VibWl0OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuXHRcdHByaW1hcnlCdXR0b25MYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdHNlY29uZGFyeUJ1dHRvbkFjdGlvbjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcblx0XHRzZWNvbmRhcnlCdXR0b25MYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHR9LFxyXG5cdC8vIFJlbmRlciBhIHByaW1hcnkgYnV0dG9uXHJcblx0cmVuZGVyUHJpbWFyeUJ1dHRvbiAoKSB7XHJcblx0XHRpZiAoIXRoaXMucHJvcHMucHJpbWFyeUJ1dHRvbkxhYmVsKSByZXR1cm4gbnVsbDtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8YnV0dG9uXHJcblx0XHRcdFx0dHlwZT17dGhpcy5wcm9wcy5wcmltYXJ5QnV0dG9uSXNTdWJtaXQgPyAnc3VibWl0JyA6ICdidXR0b24nfVxyXG5cdFx0XHRcdGNsYXNzTmFtZT17QlVUVE9OX0JBU0VfQ0xBU1NOQU1FICsgJ3ByaW1hcnknfVxyXG5cdFx0XHRcdG9uQ2xpY2s9e3RoaXMucHJvcHMucHJpbWFyeUJ1dHRvbkFjdGlvbn1cclxuXHRcdFx0PlxyXG5cdFx0XHRcdHt0aGlzLnByb3BzLnByaW1hcnlCdXR0b25MYWJlbH1cclxuXHRcdFx0PC9idXR0b24+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0Ly8gUmVuZGVyIGEgc2Vjb25kYXJ5IGJ1dHRvblxyXG5cdHJlbmRlclNlY29uZGFyeUJ1dHRvbiAoKSB7XHJcblx0XHRpZiAoIXRoaXMucHJvcHMuc2Vjb25kYXJ5QnV0dG9uQWN0aW9uIHx8ICF0aGlzLnByb3BzLnNlY29uZGFyeUJ1dHRvbkxhYmVsKSByZXR1cm4gbnVsbDtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8YnV0dG9uXHJcblx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXHJcblx0XHRcdFx0Y2xhc3NOYW1lPXtCVVRUT05fQkFTRV9DTEFTU05BTUUgKyAnc2Vjb25kYXJ5J31cclxuXHRcdFx0XHRvbkNsaWNrPXt0aGlzLnByb3BzLnNlY29uZGFyeUJ1dHRvbkFjdGlvbn1cclxuXHRcdFx0PlxyXG5cdFx0XHRcdHt0aGlzLnByb3BzLnNlY29uZGFyeUJ1dHRvbkxhYmVsfVxyXG5cdFx0XHQ8L2J1dHRvbj5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJQb3BvdXRfX2Zvb3RlclwiPlxyXG5cdFx0XHRcdHt0aGlzLnJlbmRlclByaW1hcnlCdXR0b24oKX1cclxuXHRcdFx0XHR7dGhpcy5yZW5kZXJTZWNvbmRhcnlCdXR0b24oKX1cclxuXHRcdFx0XHR7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQb3BvdXRGb290ZXI7XHJcbiIsIi8qKlxyXG4gKiBSZW5kZXIgYSBoZWFkZXIgZm9yIGEgcG9wb3V0XHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFRyYW5zaXRpb24gZnJvbSAncmVhY3QtYWRkb25zLWNzcy10cmFuc2l0aW9uLWdyb3VwJztcclxuXHJcbmNvbnN0IFBvcG91dEhlYWRlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ1BvcG91dEhlYWRlcicsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRsZWZ0QWN0aW9uOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHRcdGxlZnRJY29uOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0dGl0bGU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuXHRcdHRyYW5zaXRpb25EaXJlY3Rpb246IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ25leHQnLCAncHJldiddKSxcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHQvLyBJZiB3ZSBoYXZlIGEgbGVmdCBhY3Rpb24gYW5kIGEgbGVmdCBpY29uLCByZW5kZXIgYSBoZWFkZXIgYnV0dG9uXHJcblx0XHR2YXIgaGVhZGVyQnV0dG9uID0gKHRoaXMucHJvcHMubGVmdEFjdGlvbiAmJiB0aGlzLnByb3BzLmxlZnRJY29uKSA/IChcclxuXHRcdFx0PGJ1dHRvblxyXG5cdFx0XHRcdGtleT17J2J1dHRvbl8nICsgdGhpcy5wcm9wcy50cmFuc2l0aW9uRGlyZWN0aW9ufVxyXG5cdFx0XHRcdHR5cGU9XCJidXR0b25cIlxyXG5cdFx0XHRcdGNsYXNzTmFtZT17J1BvcG91dF9faGVhZGVyX19idXR0b24gb2N0aWNvbiBvY3RpY29uLScgKyB0aGlzLnByb3BzLmxlZnRJY29ufVxyXG5cdFx0XHRcdG9uQ2xpY2s9e3RoaXMucHJvcHMubGVmdEFjdGlvbn1cclxuXHRcdFx0Lz5cclxuXHRcdCkgOiBudWxsO1xyXG5cdFx0Ly8gSWYgd2UgaGF2ZSBhIHRpdGxlLCByZW5kZXIgaXRcclxuXHRcdHZhciBoZWFkZXJUaXRsZSA9IHRoaXMucHJvcHMudGl0bGUgPyAoXHJcblx0XHRcdDxzcGFuXHJcblx0XHRcdFx0a2V5PXsndGl0bGVfJyArIHRoaXMucHJvcHMudHJhbnNpdGlvbkRpcmVjdGlvbn1cclxuXHRcdFx0XHRjbGFzc05hbWU9XCJQb3BvdXRfX2hlYWRlcl9fbGFiZWxcIlxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0e3RoaXMucHJvcHMudGl0bGV9XHJcblx0XHRcdDwvc3Bhbj5cclxuXHRcdCkgOiBudWxsO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiUG9wb3V0X19oZWFkZXJcIj5cclxuXHRcdFx0XHQ8VHJhbnNpdGlvblxyXG5cdFx0XHRcdFx0dHJhbnNpdGlvbk5hbWU9XCJQb3BvdXRfX2hlYWRlcl9fYnV0dG9uXCJcclxuXHRcdFx0XHRcdHRyYW5zaXRpb25FbnRlclRpbWVvdXQ9ezIwMH1cclxuXHRcdFx0XHRcdHRyYW5zaXRpb25MZWF2ZVRpbWVvdXQ9ezIwMH1cclxuXHRcdFx0XHQ+XHJcblx0XHRcdFx0XHR7aGVhZGVyQnV0dG9ufVxyXG5cdFx0XHRcdDwvVHJhbnNpdGlvbj5cclxuXHRcdFx0XHQ8VHJhbnNpdGlvblxyXG5cdFx0XHRcdFx0dHJhbnNpdGlvbk5hbWU9eydQb3BvdXRfX3BhbmUtJyArIHRoaXMucHJvcHMudHJhbnNpdGlvbkRpcmVjdGlvbn1cclxuXHRcdFx0XHRcdHRyYW5zaXRpb25FbnRlclRpbWVvdXQ9ezM2MH1cclxuXHRcdFx0XHRcdHRyYW5zaXRpb25MZWF2ZVRpbWVvdXQ9ezM2MH1cclxuXHRcdFx0XHQ+XHJcblx0XHRcdFx0XHR7aGVhZGVyVGl0bGV9XHJcblx0XHRcdFx0PC9UcmFuc2l0aW9uPlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFBvcG91dEhlYWRlcjtcclxuIiwiLyoqXHJcbiAqIFJlbmRlciBhIHBvcG91dCBsaXN0LiBDYW4gYWxzbyB1c2UgUG9wb3V0TGlzdEl0ZW0gYW5kIFBvcG91dExpc3RIZWFkaW5nXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGJsYWNrbGlzdCBmcm9tICdibGFja2xpc3QnO1xyXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuXHJcbmNvbnN0IFBvcG91dExpc3QgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdQb3BvdXRMaXN0JyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxyXG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IGNsYXNzTmFtZSA9IGNsYXNzbmFtZXMoJ1BvcG91dExpc3QnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSk7XHJcblx0XHRjb25zdCBwcm9wcyA9IGJsYWNrbGlzdCh0aGlzLnByb3BzLCAnY2xhc3NOYW1lJyk7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gey4uLnByb3BzfSAvPlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUG9wb3V0TGlzdDtcclxuXHJcbi8vIGV4cG9zZSB0aGUgY2hpbGQgdG8gdGhlIHRvcCBsZXZlbCBleHBvcnRcclxubW9kdWxlLmV4cG9ydHMuSXRlbSA9IHJlcXVpcmUoJy4vUG9wb3V0TGlzdEl0ZW0nKTtcclxubW9kdWxlLmV4cG9ydHMuSGVhZGluZyA9IHJlcXVpcmUoJy4vUG9wb3V0TGlzdEhlYWRpbmcnKTtcclxuIiwiLyoqXHJcbiAqIFJlbmRlciBhIHBvcG91dCBsaXN0IGhlYWRpbmdcclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgYmxhY2tsaXN0IGZyb20gJ2JsYWNrbGlzdCc7XHJcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5cclxudmFyIFBvcG91dExpc3RIZWFkaW5nID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnUG9wb3V0TGlzdEhlYWRpbmcnLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0Y2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXHJcblx0XHRjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgY2xhc3NOYW1lID0gY2xhc3NuYW1lcygnUG9wb3V0TGlzdF9faGVhZGluZycsIHRoaXMucHJvcHMuY2xhc3NOYW1lKTtcclxuXHRcdGNvbnN0IHByb3BzID0gYmxhY2tsaXN0KHRoaXMucHJvcHMsICdjbGFzc05hbWUnKTtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSB7Li4ucHJvcHN9IC8+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQb3BvdXRMaXN0SGVhZGluZztcclxuIiwiLyoqXHJcbiAqIFJlbmRlciBhIHBvcG91dCBsaXN0IGl0ZW1cclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgYmxhY2tsaXN0IGZyb20gJ2JsYWNrbGlzdCc7XHJcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5cclxudmFyIFBvcG91dExpc3RJdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnUG9wb3V0TGlzdEl0ZW0nLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0aWNvbjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdGljb25Ib3ZlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdGlzU2VsZWN0ZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG5cdFx0bGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuXHRcdG9uQ2xpY2s6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdH0sXHJcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGhvdmVyOiBmYWxzZSxcclxuXHRcdH07XHJcblx0fSxcclxuXHRob3ZlciAoKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHsgaG92ZXI6IHRydWUgfSk7XHJcblx0fSxcclxuXHR1bmhvdmVyICgpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoeyBob3ZlcjogZmFsc2UgfSk7XHJcblx0fSxcclxuXHQvLyBSZW5kZXIgYW4gaWNvblxyXG5cdHJlbmRlckljb24gKCkge1xyXG5cdFx0aWYgKCF0aGlzLnByb3BzLmljb24pIHJldHVybiBudWxsO1xyXG5cdFx0Y29uc3QgaWNvbiA9IHRoaXMuc3RhdGUuaG92ZXIgJiYgdGhpcy5wcm9wcy5pY29uSG92ZXIgPyB0aGlzLnByb3BzLmljb25Ib3ZlciA6IHRoaXMucHJvcHMuaWNvbjtcclxuXHRcdGNvbnN0IGljb25DbGFzc25hbWUgPSBjbGFzc25hbWVzKCdQb3BvdXRMaXN0X19pdGVtX19pY29uIG9jdGljb24nLCAoJ29jdGljb24tJyArIGljb24pKTtcclxuXHJcblx0XHRyZXR1cm4gPHNwYW4gY2xhc3NOYW1lPXtpY29uQ2xhc3NuYW1lfSAvPjtcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRjb25zdCBpdGVtQ2xhc3NuYW1lID0gY2xhc3NuYW1lcygnUG9wb3V0TGlzdF9faXRlbScsIHtcclxuXHRcdFx0J2lzLXNlbGVjdGVkJzogdGhpcy5wcm9wcy5pc1NlbGVjdGVkLFxyXG5cdFx0fSk7XHJcblx0XHRjb25zdCBwcm9wcyA9IGJsYWNrbGlzdCh0aGlzLnByb3BzLCAnY2xhc3NOYW1lJywgJ2ljb24nLCAnaWNvbkhvdmVyJywgJ2lzU2VsZWN0ZWQnLCAnbGFiZWwnKTtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxidXR0b25cclxuXHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcclxuXHRcdFx0XHR0aXRsZT17dGhpcy5wcm9wcy5sYWJlbH1cclxuXHRcdFx0XHRjbGFzc05hbWU9e2l0ZW1DbGFzc25hbWV9XHJcblx0XHRcdFx0b25Gb2N1cz17dGhpcy5ob3Zlcn1cclxuXHRcdFx0XHRvbkJsdXI9e3RoaXMudW5ob3Zlcn1cclxuXHRcdFx0XHRvbk1vdXNlT3Zlcj17dGhpcy5ob3Zlcn1cclxuXHRcdFx0XHRvbk1vdXNlT3V0PXt0aGlzLnVuaG92ZXJ9XHJcblx0XHRcdFx0ey4uLnByb3BzfVxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0e3RoaXMucmVuZGVySWNvbigpfVxyXG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cIlBvcG91dExpc3RfX2l0ZW1fX2xhYmVsXCI+XHJcblx0XHRcdFx0XHR7dGhpcy5wcm9wcy5sYWJlbH1cclxuXHRcdFx0XHQ8L3NwYW4+XHJcblx0XHRcdDwvYnV0dG9uPlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUG9wb3V0TGlzdEl0ZW07XHJcbiIsIi8qKlxyXG4gKiBSZW5kZXIgYSBwb3BvdXQgcGFuZSwgY2FsbHMgcHJvcHMub25MYXlvdXQgd2hlbiB0aGUgY29tcG9uZW50IG1vdW50c1xyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBibGFja2xpc3QgZnJvbSAnYmxhY2tsaXN0JztcclxuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcblxyXG52YXIgUG9wb3V0UGFuZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ1BvcG91dFBhbmUnLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0Y2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXHJcblx0XHRjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRvbkxheW91dDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcblx0fSxcclxuXHRnZXREZWZhdWx0UHJvcHMgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0b25MYXlvdXQ6ICgpID0+IHt9LFxyXG5cdFx0fTtcclxuXHR9LFxyXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuXHRcdHRoaXMucHJvcHMub25MYXlvdXQodGhpcy5yZWZzLmVsLm9mZnNldEhlaWdodCk7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgY2xhc3NOYW1lID0gY2xhc3NuYW1lcygnUG9wb3V0X19wYW5lJywgdGhpcy5wcm9wcy5jbGFzc05hbWUpO1xyXG5cdFx0Y29uc3QgcHJvcHMgPSBibGFja2xpc3QodGhpcy5wcm9wcywgJ2NsYXNzTmFtZScsICdvbkxheW91dCcpO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgcmVmPVwiZWxcIiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gey4uLnByb3BzfSAvPlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUG9wb3V0UGFuZTtcclxuIiwiLyoqXHJcbiAqIEEgUG9wb3V0IGNvbXBvbmVudC5cclxuICogT25lIGNhbiBhbHNvIGFkZCBhIEhlYWRlciAoUG9wb3V0L0hlYWRlciksIGEgRm9vdGVyXHJcbiAqIChQb3BvdXQvRm9vdGVyKSwgYSBCb2R5IChQb3BvdXQvQm9keSkgYW5kIGEgUGFuIChQb3BvdXQvUGFuZSkuXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFBvcnRhbCBmcm9tICcuLi9Qb3J0YWwnO1xyXG5pbXBvcnQgVHJhbnNpdGlvbiBmcm9tICdyZWFjdC1hZGRvbnMtY3NzLXRyYW5zaXRpb24tZ3JvdXAnO1xyXG5cclxuY29uc3QgU0laRVMgPSB7XHJcblx0YXJyb3dIZWlnaHQ6IDEyLFxyXG5cdGFycm93V2lkdGg6IDE2LFxyXG5cdGhvcml6b250YWxNYXJnaW46IDIwLFxyXG59O1xyXG5cclxudmFyIFBvcG91dCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ1BvcG91dCcsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRpc09wZW46IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG5cdFx0b25DYW5jZWw6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdFx0b25TdWJtaXQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdFx0cmVsYXRpdmVUb0lEOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcblx0XHR3aWR0aDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcclxuXHR9LFxyXG5cdGdldERlZmF1bHRQcm9wcyAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR3aWR0aDogMzIwLFxyXG5cdFx0fTtcclxuXHR9LFxyXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XHJcblx0XHRyZXR1cm4ge307XHJcblx0fSxcclxuXHRjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHMpIHtcclxuXHRcdGlmICghdGhpcy5wcm9wcy5pc09wZW4gJiYgbmV4dFByb3BzLmlzT3Blbikge1xyXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5jYWxjdWxhdGVQb3NpdGlvbik7XHJcblx0XHRcdHRoaXMuY2FsY3VsYXRlUG9zaXRpb24obmV4dFByb3BzLmlzT3Blbik7XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMucHJvcHMuaXNPcGVuICYmICFuZXh0UHJvcHMuaXNPcGVuKSB7XHJcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmNhbGN1bGF0ZVBvc2l0aW9uKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdGdldFBvcnRhbERPTU5vZGUgKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucmVmcy5wb3J0YWwuZ2V0UG9ydGFsRE9NTm9kZSgpO1xyXG5cdH0sXHJcblx0Y2FsY3VsYXRlUG9zaXRpb24gKGlzT3Blbikge1xyXG5cdFx0aWYgKCFpc09wZW4pIHJldHVybjtcclxuXHRcdGxldCBwb3NOb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5wcm9wcy5yZWxhdGl2ZVRvSUQpO1xyXG5cclxuXHRcdGNvbnN0IHBvcyA9IHtcclxuXHRcdFx0dG9wOiAwLFxyXG5cdFx0XHRsZWZ0OiAwLFxyXG5cdFx0XHR3aWR0aDogcG9zTm9kZS5vZmZzZXRXaWR0aCxcclxuXHRcdFx0aGVpZ2h0OiBwb3NOb2RlLm9mZnNldEhlaWdodCxcclxuXHRcdH07XHJcblx0XHR3aGlsZSAocG9zTm9kZS5vZmZzZXRQYXJlbnQpIHtcclxuXHRcdFx0cG9zLnRvcCArPSBwb3NOb2RlLm9mZnNldFRvcDtcclxuXHRcdFx0cG9zLmxlZnQgKz0gcG9zTm9kZS5vZmZzZXRMZWZ0O1xyXG5cdFx0XHRwb3NOb2RlID0gcG9zTm9kZS5vZmZzZXRQYXJlbnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGxlZnRPZmZzZXQgPSBNYXRoLm1heChwb3MubGVmdCArIChwb3Mud2lkdGggLyAyKSAtICh0aGlzLnByb3BzLndpZHRoIC8gMiksIFNJWkVTLmhvcml6b250YWxNYXJnaW4pO1xyXG5cdFx0bGV0IHRvcE9mZnNldCA9IHBvcy50b3AgKyBwb3MuaGVpZ2h0ICsgU0laRVMuYXJyb3dIZWlnaHQ7XHJcblxyXG5cdFx0dmFyIHNwYWNlT25SaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gKGxlZnRPZmZzZXQgKyB0aGlzLnByb3BzLndpZHRoICsgU0laRVMuaG9yaXpvbnRhbE1hcmdpbik7XHJcblx0XHRpZiAoc3BhY2VPblJpZ2h0IDwgMCkge1xyXG5cdFx0XHRsZWZ0T2Zmc2V0ID0gbGVmdE9mZnNldCArIHNwYWNlT25SaWdodDtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBhcnJvd0xlZnRPZmZzZXQgPSBsZWZ0T2Zmc2V0ID09PSBTSVpFUy5ob3Jpem9udGFsTWFyZ2luXHJcblx0XHRcdD8gcG9zLmxlZnQgKyAocG9zLndpZHRoIC8gMikgLSAoU0laRVMuYXJyb3dXaWR0aCAvIDIpIC0gU0laRVMuaG9yaXpvbnRhbE1hcmdpblxyXG5cdFx0XHQ6IG51bGw7XHJcblxyXG5cdFx0Y29uc3QgbmV3U3RhdGVBdmFsaWFibGUgPSB0aGlzLnN0YXRlLmxlZnRPZmZzZXQgIT09IGxlZnRPZmZzZXRcclxuXHRcdFx0fHwgdGhpcy5zdGF0ZS50b3BPZmZzZXQgIT09IHRvcE9mZnNldFxyXG5cdFx0XHR8fCB0aGlzLnN0YXRlLmFycm93TGVmdE9mZnNldCAhPT0gYXJyb3dMZWZ0T2Zmc2V0O1xyXG5cclxuXHRcdGlmIChuZXdTdGF0ZUF2YWxpYWJsZSkge1xyXG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0XHRsZWZ0T2Zmc2V0OiBsZWZ0T2Zmc2V0LFxyXG5cdFx0XHRcdHRvcE9mZnNldDogdG9wT2Zmc2V0LFxyXG5cdFx0XHRcdGFycm93TGVmdE9mZnNldDogYXJyb3dMZWZ0T2Zmc2V0LFxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdHJlbmRlclBvcG91dCAoKSB7XHJcblx0XHRpZiAoIXRoaXMucHJvcHMuaXNPcGVuKSByZXR1cm4gbnVsbDtcclxuXHJcblx0XHRjb25zdCB7IHdpZHRoIH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0Y29uc3QgeyBhcnJvd0xlZnRPZmZzZXQsIGxlZnRPZmZzZXQ6IGxlZnQsIHRvcE9mZnNldDogdG9wIH0gPSB0aGlzLnN0YXRlO1xyXG5cclxuXHRcdGNvbnN0IGFycm93U3R5bGVzID0gYXJyb3dMZWZ0T2Zmc2V0XHJcblx0XHRcdD8geyBsZWZ0OiAwLCBtYXJnaW5MZWZ0OiBhcnJvd0xlZnRPZmZzZXQgfVxyXG5cdFx0XHQ6IG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJQb3BvdXRcIiBzdHlsZT17eyBsZWZ0LCB0b3AsIHdpZHRoIH19PlxyXG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cIlBvcG91dF9fYXJyb3dcIiBzdHlsZT17YXJyb3dTdHlsZXN9IC8+XHJcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJQb3BvdXRfX2lubmVyXCI+XHJcblx0XHRcdFx0XHR7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyQmxvY2tvdXQgKCkge1xyXG5cdFx0aWYgKCF0aGlzLnByb3BzLmlzT3BlbikgcmV0dXJuO1xyXG5cdFx0cmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiYmxvY2tvdXRcIiBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2FuY2VsfSAvPjtcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8UG9ydGFsIGNsYXNzTmFtZT1cIlBvcG91dC13cmFwcGVyXCIgcmVmPVwicG9ydGFsXCI+XHJcblx0XHRcdFx0PFRyYW5zaXRpb25cclxuXHRcdFx0XHRcdHRyYW5zaXRpb25FbnRlclRpbWVvdXQ9ezIwMH1cclxuXHRcdFx0XHRcdHRyYW5zaXRpb25MZWF2ZVRpbWVvdXQ9ezIwMH1cclxuXHRcdFx0XHRcdHRyYW5zaXRpb25OYW1lPVwiUG9wb3V0XCJcclxuXHRcdFx0XHQ+XHJcblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJQb3BvdXQoKX1cclxuXHRcdFx0XHQ8L1RyYW5zaXRpb24+XHJcblx0XHRcdFx0e3RoaXMucmVuZGVyQmxvY2tvdXQoKX1cclxuXHRcdFx0PC9Qb3J0YWw+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQb3BvdXQ7XHJcblxyXG4vLyBleHBvc2UgdGhlIGNoaWxkIHRvIHRoZSB0b3AgbGV2ZWwgZXhwb3J0XHJcbm1vZHVsZS5leHBvcnRzLkhlYWRlciA9IHJlcXVpcmUoJy4vUG9wb3V0SGVhZGVyJyk7XHJcbm1vZHVsZS5leHBvcnRzLkJvZHkgPSByZXF1aXJlKCcuL1BvcG91dEJvZHknKTtcclxubW9kdWxlLmV4cG9ydHMuRm9vdGVyID0gcmVxdWlyZSgnLi9Qb3BvdXRGb290ZXInKTtcclxubW9kdWxlLmV4cG9ydHMuUGFuZSA9IHJlcXVpcmUoJy4vUG9wb3V0UGFuZScpO1xyXG4iLCIvKipcclxuICogVXNlZCBieSB0aGUgUG9wb3V0IGNvbXBvbmVudCBhbmQgdGhlIExpZ2h0Ym94IGNvbXBvbmVudCBvZiB0aGUgZmllbGRzIGZvclxyXG4gKiBwb3BvdXRzLiBSZW5kZXJzIGEgbm9uLXJlYWN0IERPTSBub2RlLlxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdQb3J0YWwnLFxyXG5cdHBvcnRhbEVsZW1lbnQ6IG51bGwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvc29ydC1jb21wXHJcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xyXG5cdFx0Y29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpO1xyXG5cdFx0dGhpcy5wb3J0YWxFbGVtZW50ID0gZWw7XHJcblx0XHR0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSgpO1xyXG5cdH0sXHJcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xyXG5cdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLnBvcnRhbEVsZW1lbnQpO1xyXG5cdH0sXHJcblx0Y29tcG9uZW50RGlkVXBkYXRlICgpIHtcclxuXHRcdFJlYWN0RE9NLnJlbmRlcig8ZGl2IHsuLi50aGlzLnByb3BzfSAvPiwgdGhpcy5wb3J0YWxFbGVtZW50KTtcclxuXHR9LFxyXG5cdGdldFBvcnRhbERPTU5vZGUgKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucG9ydGFsRWxlbWVudDtcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9LFxyXG59KTtcclxuIiwiaW1wb3J0IHsgcm91dGVyUmVkdWNlciwgcm91dGVyTWlkZGxld2FyZSB9IGZyb20gJ3JlYWN0LXJvdXRlci1yZWR1eCc7XHJcbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSB9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHsgYnJvd3Nlckhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xyXG5pbXBvcnQgY3JlYXRlU2FnYU1pZGRsZXdhcmUgZnJvbSAncmVkdXgtc2FnYSc7XHJcblxyXG5pbXBvcnQgbGlzdHNSZWR1Y2VyIGZyb20gJy4vc2NyZWVucy9MaXN0L3JlZHVjZXJzL21haW4nO1xyXG5pbXBvcnQgYWN0aXZlUmVkdWNlciBmcm9tICcuL3NjcmVlbnMvTGlzdC9yZWR1Y2Vycy9hY3RpdmUnO1xyXG5pbXBvcnQgaXRlbVJlZHVjZXIgZnJvbSAnLi9zY3JlZW5zL0l0ZW0vcmVkdWNlcic7XHJcbmltcG9ydCBob21lUmVkdWNlciBmcm9tICcuL3NjcmVlbnMvSG9tZS9yZWR1Y2VyJztcclxuXHJcbmltcG9ydCByb290U2FnYSBmcm9tICcuL3NhZ2FzJztcclxuXHJcblxyXG4vLyBDb21iaW5lIHRoZSByZWR1Y2VycyB0byBvbmUgc3RhdGVcclxuY29uc3QgcmVkdWNlcnMgPSBjb21iaW5lUmVkdWNlcnMoe1xyXG5cdGxpc3RzOiBsaXN0c1JlZHVjZXIsXHJcblx0YWN0aXZlOiBhY3RpdmVSZWR1Y2VyLFxyXG5cdGl0ZW06IGl0ZW1SZWR1Y2VyLFxyXG5cdGhvbWU6IGhvbWVSZWR1Y2VyLFxyXG5cdHJvdXRpbmc6IHJvdXRlclJlZHVjZXIsXHJcbn0pO1xyXG5cclxuY29uc3Qgc2FnYU1pZGRsZXdhcmUgPSBjcmVhdGVTYWdhTWlkZGxld2FyZSgpO1xyXG5cclxuLy8gQ3JlYXRlIHRoZSBzdG9yZVxyXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKFxyXG5cdHJlZHVjZXJzLFxyXG5cdGNvbXBvc2UoXHJcblx0XHRhcHBseU1pZGRsZXdhcmUoXHJcblx0XHRcdC8vIFN1cHBvcnQgdGh1bmtlZCBhY3Rpb25zIGFuZCByZWFjdC1yb3V0ZXItcmVkdXhcclxuXHRcdFx0dGh1bmssXHJcblx0XHRcdHJvdXRlck1pZGRsZXdhcmUoYnJvd3Nlckhpc3RvcnkpLFxyXG5cdFx0XHRzYWdhTWlkZGxld2FyZVxyXG5cdFx0KSxcclxuXHRcdC8vIFN1cHBvcnQgdGhlIENocm9tZSBEZXZUb29scyBleHRlbnNpb25cclxuXHRcdHdpbmRvdy5kZXZUb29sc0V4dGVuc2lvbiA/IHdpbmRvdy5kZXZUb29sc0V4dGVuc2lvbigpIDogZiA9PiBmXHJcblx0KVxyXG4pO1xyXG5cclxuc2FnYU1pZGRsZXdhcmUucnVuKHJvb3RTYWdhKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHN0b3JlO1xyXG4iLCIvKipcclxuICogQ29uc3RhbnRzXHJcbiAqL1xyXG5cclxuLy8gYnJlYWtwb2ludHNcclxuZXhwb3J0cy5icmVha3BvaW50ID0ge1xyXG5cdHhzOiA0ODAsXHJcblx0c206IDc2OCxcclxuXHRtZDogOTkyLFxyXG5cdGxnOiAxMjAwLFxyXG59O1xyXG5cclxuLy8gYm9yZGVyIHJhZGlpXHJcbmV4cG9ydHMuYm9yZGVyUmFkaXVzID0ge1xyXG5cdHhzOiAyLFxyXG5cdHNtOiA0LFxyXG5cdG1kOiA4LFxyXG5cdGxnOiAxNixcclxuXHR4bDogMzIsXHJcbn07XHJcblxyXG4vLyBjb2xvclxyXG5leHBvcnRzLmNvbG9yID0ge1xyXG5cdGFwcERhbmdlcjogJyNkNjQyNDInLFxyXG5cdGFwcEluZm86ICcjNTZjZGZjJyxcclxuXHRhcHBQcmltYXJ5OiAnIzEzODVlNScsXHJcblx0YXBwU3VjY2VzczogJyMzNGMyNDAnLFxyXG5cdGFwcFdhcm5pbmc6ICcjZmE5ZjQ3JyxcclxufTtcclxuXHJcbi8vIHNwYWNpbmdcclxuZXhwb3J0cy5zcGFjaW5nID0ge1xyXG5cdHhzOiA1LFxyXG5cdHNtOiAxMCxcclxuXHRtZDogMjAsXHJcblx0bGc6IDQwLFxyXG5cdHhsOiA4MCxcclxufTtcclxuXHJcbi8vIHRhYmxlIGNvbnN0YW50c1xyXG5cclxuZXhwb3J0cy5UQUJMRV9DT05UUk9MX0NPTFVNTl9XSURUSCA9IDI2OyAgLy8gaWNvbiArIHBhZGRpbmdcclxuZXhwb3J0cy5ORVRXT1JLX0VSUk9SX1JFVFJZX0RFTEFZID0gNTAwOyAvLyBpbiBtc1xyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBrZXktc3BhY2luZyAqL1xyXG5jb25zdCB0aGVtZSA9IHt9O1xyXG5jb25zdCB7IGJsZW5kLCBkYXJrZW4sIGZhZGUsIGxpZ2h0ZW4gfSA9IHJlcXVpcmUoJy4vdXRpbHMvY29sb3InKTtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBDT01NT05cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vLyBicmVha3BvaW50XHJcblxyXG50aGVtZS5icmVha3BvaW50TnVtZXJpYyA9IHtcclxuXHRtb2JpbGU6ICAgICAgICAgICA0ODAsXHJcblx0dGFibGV0UG9ydHJhaXQ6ICAgNzY4LFxyXG5cdHRhYmxldExhbmRzY2FwZTogIDk5MixcclxuXHRkZXNrdG9wOiAgICAgICAgICAxMjAwLFxyXG59O1xyXG50aGVtZS5icmVha3BvaW50ID0ge1xyXG5cdHRhYmxldFBvcnRyYWl0TWluOiAgKHRoZW1lLmJyZWFrcG9pbnROdW1lcmljLm1vYmlsZSArIDEpICsgJ3B4JyxcclxuXHR0YWJsZXRMYW5kc2NhcGVNaW46ICh0aGVtZS5icmVha3BvaW50TnVtZXJpYy50YWJsZXRQb3J0cmFpdCArIDEpICsgJ3B4JyxcclxuXHRkZXNrdG9wTWluOiAgICAgICAgICh0aGVtZS5icmVha3BvaW50TnVtZXJpYy50YWJsZXRMYW5kc2NhcGUgKyAxKSArICdweCcsXHJcblx0ZGVza3RvcExhcmdlTWluOiAgICAodGhlbWUuYnJlYWtwb2ludE51bWVyaWMuZGVza3RvcCArIDEpICsgJ3B4JyxcclxuXHJcblx0bW9iaWxlTWF4OiAgICAgICAgICAgdGhlbWUuYnJlYWtwb2ludE51bWVyaWMubW9iaWxlICsgJ3B4JyxcclxuXHR0YWJsZXRQb3J0cmFpdE1heDogICB0aGVtZS5icmVha3BvaW50TnVtZXJpYy50YWJsZXRQb3J0cmFpdCArICdweCcsXHJcblx0dGFibGV0TGFuZHNjYXBlTWF4OiAgdGhlbWUuYnJlYWtwb2ludE51bWVyaWMudGFibGV0TGFuZHNjYXBlICsgJ3B4JyxcclxuXHRkZXNrdG9wTWF4OiAgICAgICAgICB0aGVtZS5icmVha3BvaW50TnVtZXJpYy5kZXNrdG9wICsgJ3B4JyxcclxufTtcclxuXHJcbi8vIGNvbnRhaW5lclxyXG5cclxudGhlbWUuY29udGFpbmVyID0ge1xyXG5cdGd1dHRlcjogMjAsXHJcblx0c2l6ZToge1xyXG5cdFx0c21hbGw6ICA3NTAsXHJcblx0XHRtZWRpdW06IDk3MCxcclxuXHRcdGxhcmdlOiAxMTcwLFxyXG5cdH0sXHJcbn07XHJcblxyXG4vLyBjb2xvclxyXG5cclxudGhlbWUuY29sb3IgPSB7XHJcblx0Ym9keTogICAgICAgICAgICAgICAgJyNmYWZhZmEnLFxyXG5cdGxpbms6ICAgICAgICAgICAgICAgICcjMTM4NWU1JyxcclxuXHRsaW5rSG92ZXI6ICAgICAgICAgICBsaWdodGVuKCcjMTM4NWU1JywgMTApLFxyXG5cdHRleHQ6ICAgICAgICAgICAgICAgICcjMUExQTFBJyxcclxuXHJcblx0Ly8gY29udGV4dHVhbFxyXG5cdHN1Y2Nlc3M6ICAgICAgICAgICAgICcjMzRjMjQwJyxcclxuXHRjcmVhdGU6ICAgICAgICAgICAgICAnIzM0YzI0MCcsIC8vIGFsaWFzIGZvciBzdWNjZXNzXHJcblx0cHJpbWFyeTogICAgICAgICAgICAgJyMxMzg1ZTUnLFxyXG5cdGluZm86ICAgICAgICAgICAgICAgICcjMTM4NWU1JywgLy8gYWxpYXMgZm9yIHByaW1hcnlcclxuXHR3YXJuaW5nOiAgICAgICAgICAgICAnI0ZBMycsXHJcblx0ZGFuZ2VyOiAgICAgICAgICAgICAgJyNkNjQyNDInLFxyXG5cdGVycm9yOiAgICAgICAgICAgICAgICcjZDY0MjQyJywgLy8gYWxpYXMgZm9yIGRhbmdlclxyXG5cclxuXHQvLyBuZXV0cmFsc1xyXG5cdGdyYXk5MDogICAgICAgICAgICAgICcjMUExQTFBJyxcclxuXHRncmF5ODA6ICAgICAgICAgICAgICAnIzMzMycsXHJcblx0Z3JheTcwOiAgICAgICAgICAgICAgJyM0RDRENEQnLFxyXG5cdGdyYXk2MDogICAgICAgICAgICAgICcjNjY2JyxcclxuXHRncmF5NTA6ICAgICAgICAgICAgICAnIzdGN0Y3RicsXHJcblx0Z3JheTQwOiAgICAgICAgICAgICAgJyM5OTknLFxyXG5cdGdyYXkzMDogICAgICAgICAgICAgICcjQjNCM0IzJyxcclxuXHRncmF5MjA6ICAgICAgICAgICAgICAnI0NDQycsXHJcblx0Z3JheTE1OiAgICAgICAgICAgICAgJyNEOUQ5RDknLFxyXG5cdGdyYXkxMDogICAgICAgICAgICAgICcjRTVFNUU1JyxcclxuXHRncmF5MDU6ICAgICAgICAgICAgICAnI0YyRjJGMicsXHJcblxyXG5cdC8vIHNvY2lhbFxyXG5cdGZhY2Vib29rOiAgICAgICAgICAgICcjM0I1OTk4JyxcclxuXHRnb29nbGU6ICAgICAgICAgICAgICAnI0RDNEU0MScsXHJcblx0aW5zdGFncmFtOiAgICAgICAgICAgJyMzZjcyOWInLFxyXG5cdHBpbnRlcmVzdDogICAgICAgICAgICcjYmQwODFjJyxcclxuXHR0dW1ibHI6ICAgICAgICAgICAgICAnIzM1NDY1YycsXHJcblx0dHdpdHRlcjogICAgICAgICAgICAgJyM1NUFDRUUnLFxyXG5cdHlvdXR1YmU6ICAgICAgICAgICAgICcjY2QyMDFmJyxcclxuXHR2aW1lbzogICAgICAgICAgICAgICAnIzFhYjdlYScsXHJcbn07XHJcblxyXG4vLyBib3JkZXIgcmFkaWlcclxuXHJcbnRoZW1lLmJvcmRlclJhZGl1cyA9IHtcclxuXHRzbWFsbDogJzAuMTI1cmVtJyxcclxuXHRkZWZhdWx0OiAnMC4zcmVtJyxcclxuXHRsYXJnZTogJzAuNXJlbScsXHJcbn07XHJcblxyXG4vLyBzcGFjaW5nXHJcblxyXG50aGVtZS5zcGFjaW5nID0ge1xyXG5cdHhzbWFsbDogICAgICA1LFxyXG5cdHNtYWxsOiAgICAgICAxMCxcclxuXHRkZWZhdWx0OiAgICAgMjAsXHJcblx0bGFyZ2U6ICAgICAgIDMwLFxyXG5cdHhsYXJnZTogICAgICA0MCxcclxuXHR4eGxhcmdlOiAgICAgNjAsXHJcbn07XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gRUxFTUVOVEFMIFNQRUNJRklDXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuLy8gYnV0dG9uXHJcblxyXG50aGVtZS5idXR0b24gPSB7XHJcblx0Ym9yZGVyUmFkaXVzOiB0aGVtZS5ib3JkZXJSYWRpdXMuZGVmYXVsdCxcclxuXHRib3JkZXJXaWR0aDogMSxcclxuXHRmb250OiB7XHJcblx0XHR3ZWlnaHQ6IDUwMCxcclxuXHR9LFxyXG5cdHBhZGRpbmdIb3Jpem9udGFsOiAnMWVtJyxcclxuXHRkZWZhdWx0OiB7XHJcblx0XHRiZ0NvbG9yOiB0aGVtZS5jb2xvci5wcmltYXJ5LFxyXG5cdFx0Ym9yZGVyQ29sb3I6IGJsZW5kKHRoZW1lLmNvbG9yLnByaW1hcnksIHRoZW1lLmNvbG9yLmJvZHksIDYwKSxcclxuXHRcdHRleHRDb2xvcjogdGhlbWUuY29sb3IucHJpbWFyeSxcclxuXHR9LFxyXG5cdHByaW1hcnk6IHtcclxuXHRcdGJnQ29sb3I6IHRoZW1lLmNvbG9yLnByaW1hcnksXHJcblx0XHRib3JkZXJDb2xvcjogYmxlbmQodGhlbWUuY29sb3IucHJpbWFyeSwgdGhlbWUuY29sb3IuYm9keSwgNjApLFxyXG5cdFx0dGV4dENvbG9yOiB0aGVtZS5jb2xvci5wcmltYXJ5LFxyXG5cdH0sXHJcblx0c3VjY2Vzczoge1xyXG5cdFx0YmdDb2xvcjogdGhlbWUuY29sb3Iuc3VjY2VzcyxcclxuXHRcdGJvcmRlckNvbG9yOiBibGVuZCh0aGVtZS5jb2xvci5zdWNjZXNzLCB0aGVtZS5jb2xvci5ib2R5LCA2MCksXHJcblx0XHR0ZXh0Q29sb3I6IHRoZW1lLmNvbG9yLnN1Y2Nlc3MsXHJcblx0fSxcclxuXHR3YXJuaW5nOiB7XHJcblx0XHRiZ0NvbG9yOiB0aGVtZS5jb2xvci53YXJuaW5nLFxyXG5cdFx0Ym9yZGVyQ29sb3I6IGJsZW5kKHRoZW1lLmNvbG9yLndhcm5pbmcsIHRoZW1lLmNvbG9yLmJvZHksIDYwKSxcclxuXHRcdHRleHRDb2xvcjogdGhlbWUuY29sb3Iud2FybmluZyxcclxuXHR9LFxyXG5cdGRhbmdlcjoge1xyXG5cdFx0YmdDb2xvcjogdGhlbWUuY29sb3IuZGFuZ2VyLFxyXG5cdFx0Ym9yZGVyQ29sb3I6IGJsZW5kKHRoZW1lLmNvbG9yLmRhbmdlciwgdGhlbWUuY29sb3IuYm9keSwgNjApLFxyXG5cdFx0dGV4dENvbG9yOiB0aGVtZS5jb2xvci5kYW5nZXIsXHJcblx0fSxcclxufTtcclxuXHJcbi8vIGJsYW5rIHN0YXRlXHJcblxyXG50aGVtZS5ibGFua3N0YXRlID0ge1xyXG5cdGJhY2tncm91bmQ6IGRhcmtlbih0aGVtZS5jb2xvci5ib2R5LCA0KSxcclxuXHRib3JkZXJSYWRpdXM6IHRoZW1lLmJvcmRlclJhZGl1cy5kZWZhdWx0LFxyXG5cdGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5NDAsXHJcblx0cGFkZGluZ0hvcml6b250YWw6ICcyZW0nLFxyXG5cdHBhZGRpbmdWZXJ0aWNhbDogJzRlbScsXHJcbn07XHJcblxyXG4vLyBmb250XHJcblxyXG50aGVtZS5mb250ID0ge1xyXG5cdGZhbWlseToge1xyXG5cdFx0bW9ubzogJ01lbmxvLCBNb25hY28sIENvbnNvbGFzLCBcIkNvdXJpZXIgTmV3XCIsIG1vbm9zcGFjZScsXHJcblx0XHRzYW5zU2VyaWY6ICdcIkhlbHZldGljYSBOZXVlXCIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWYnLFxyXG5cdFx0c2VyaWY6ICdHZW9yZ2lhLCBUaW1lcyBOZXcgUm9tYW4sIFRpbWVzLCBzZXJpZicsXHJcblx0fSxcclxuXHRzaXplOiB7XHJcblx0XHR4eHNtYWxsOiAnMC42NXJlbScsXHJcblx0XHR4c21hbGw6ICcwLjc1cmVtJyxcclxuXHRcdHNtYWxsOiAnMC44NXJlbScsXHJcblx0XHRkZWZhdWx0OiAnMXJlbScsXHJcblx0XHRtZWRpdW06ICcxLjJyZW0nLFxyXG5cdFx0bGFyZ2U6ICcxLjZyZW0nLFxyXG5cdFx0eGxhcmdlOiAnMi40cmVtJyxcclxuXHRcdHh4bGFyZ2U6ICczLjJyZW0nLFxyXG5cdH0sXHJcbn07XHJcblxyXG4vLyBmb3JtXHJcblxyXG50aGVtZS5mb3JtID0ge1xyXG5cdGxhYmVsOiB7XHJcblx0XHRjb2xvcjogdGhlbWUuY29sb3IuZ3JheTUwLFxyXG5cdFx0Zm9udFNpemU6ICcxcmVtJyxcclxuXHRcdGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxyXG5cdFx0d2lkdGg6IDE4MCxcclxuXHR9LFxyXG5cdG5vdGU6IHtcclxuXHRcdGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5NDAsXHJcblx0XHRmb250U2l6ZTogJzAuOWVtJyxcclxuXHR9LFxyXG59O1xyXG5cclxuLy8gY29tcG9uZW50XHJcblxyXG50aGVtZS5jb21wb25lbnQgPSB7XHJcblx0bGluZUhlaWdodDogJzIuM2VtJyxcclxuXHRoZWlnaHQ6ICcyLjRlbScsXHJcblx0cGFkZGluZzogJzFlbScsXHJcbn07XHJcblxyXG4vLyBpbnB1dFxyXG5cclxudGhlbWUuaW5wdXQgPSB7XHJcblx0YmFja2dyb3VuZDoge1xyXG5cdFx0ZGVmYXVsdDogJ3doaXRlJyxcclxuXHRcdGRpc2FibGVkOiAnI2ZhZmFmYScsXHJcblx0XHRub2VkaXQ6IGRhcmtlbih0aGVtZS5jb2xvci5ib2R5LCAyKSxcclxuXHR9LFxyXG5cdHBsYWNlaG9sZGVyQ29sb3I6ICcjYWFhJyxcclxuXHRsaW5lSGVpZ2h0OiB0aGVtZS5jb21wb25lbnQubGluZUhlaWdodCxcclxuXHRoZWlnaHQ6IHRoZW1lLmNvbXBvbmVudC5oZWlnaHQsXHJcblx0Ym9yZGVyOiB7XHJcblx0XHRjb2xvcjoge1xyXG5cdFx0XHRkZWZhdWx0OiAnI2NjYycsXHJcblx0XHRcdGZvY3VzOiB0aGVtZS5jb2xvci5pbmZvLFxyXG5cdFx0XHRob3ZlcjogJyNiYmInLFxyXG5cdFx0XHRub2VkaXQ6IGRhcmtlbih0aGVtZS5jb2xvci5ib2R5LCA4KSxcclxuXHRcdH0sXHJcblx0XHRyYWRpdXM6IHRoZW1lLmJvcmRlclJhZGl1cy5kZWZhdWx0LFxyXG5cdFx0d2lkdGg6IDEsXHJcblx0fSxcclxuXHRib3hTaGFkb3c6ICdpbnNldCAwIDFweCAxcHggcmdiYSgwLCAwLCAwLCAwLjA3NSknLFxyXG5cdGJveFNoYWRvd0ZvY3VzOiBgaW5zZXQgMCAxcHggMXB4IHJnYmEoMCwgMCwgMCwgMC4wNzUpLCAwIDAgMCAzcHggJHtmYWRlKHRoZW1lLmNvbG9yLmluZm8sIDEwKX1gLFxyXG5cdHBhZGRpbmdIb3Jpem9udGFsOiAnLjc1ZW0nLFxyXG59O1xyXG5cclxuLy8gc2VsZWN0XHJcblxyXG50aGVtZS5zZWxlY3QgPSB7XHJcblx0Ym94U2hhZG93OiAnMCAxcHggMXB4IHJnYmEoMCwgMCwgMCwgMC4wNzUpJyxcclxufTtcclxuXHJcbi8vIGFsZXJ0XHJcblxyXG50aGVtZS5hbGVydCA9IHtcclxuXHRwYWRkaW5nOiAnMC43NWVtICAxZW0nLFxyXG5cdG1hcmdpbjogJzAgMCAxZW0nLFxyXG5cdGJvcmRlcldpZHRoOiAxLFxyXG5cdGJvcmRlclJhZGl1czogdGhlbWUuYm9yZGVyUmFkaXVzLmRlZmF1bHQsXHJcblxyXG5cdGNvbG9yOiB7XHJcblx0XHRkYW5nZXI6IHtcclxuXHRcdFx0YmFja2dyb3VuZDogZmFkZSh0aGVtZS5jb2xvci5kYW5nZXIsIDEwKSxcclxuXHRcdFx0Ym9yZGVyOiBmYWRlKHRoZW1lLmNvbG9yLmRhbmdlciwgMTApLFxyXG5cdFx0XHR0ZXh0OiB0aGVtZS5jb2xvci5kYW5nZXIsXHJcblx0XHR9LFxyXG5cdFx0aW5mbzoge1xyXG5cdFx0XHRiYWNrZ3JvdW5kOiBmYWRlKHRoZW1lLmNvbG9yLnByaW1hcnksIDEwKSxcclxuXHRcdFx0Ym9yZGVyOiBmYWRlKHRoZW1lLmNvbG9yLnByaW1hcnksIDEwKSxcclxuXHRcdFx0dGV4dDogdGhlbWUuY29sb3IucHJpbWFyeSxcclxuXHRcdH0sXHJcblx0XHRzdWNjZXNzOiB7XHJcblx0XHRcdGJhY2tncm91bmQ6IGZhZGUodGhlbWUuY29sb3Iuc3VjY2VzcywgMTApLFxyXG5cdFx0XHRib3JkZXI6IGZhZGUodGhlbWUuY29sb3Iuc3VjY2VzcywgMTApLFxyXG5cdFx0XHR0ZXh0OiB0aGVtZS5jb2xvci5zdWNjZXNzLFxyXG5cdFx0fSxcclxuXHRcdHdhcm5pbmc6IHtcclxuXHRcdFx0YmFja2dyb3VuZDogZmFkZSh0aGVtZS5jb2xvci53YXJuaW5nLCAxMCksXHJcblx0XHRcdGJvcmRlcjogZmFkZSh0aGVtZS5jb2xvci53YXJuaW5nLCAxMCksXHJcblx0XHRcdHRleHQ6IHRoZW1lLmNvbG9yLndhcm5pbmcsXHJcblx0XHR9LFxyXG5cdH0sXHJcbn07XHJcblxyXG4vLyBnbHlwaFxyXG5cclxudGhlbWUuZ2x5cGggPSB7XHJcblx0Y29sb3I6IHtcclxuXHRcdGRhbmdlcjogdGhlbWUuY29sb3IuZGFuZ2VyLFxyXG5cdFx0aW5oZXJpdDogJ2luaGVyaXQnLFxyXG5cdFx0aW52ZXJ0ZWQ6ICd3aGl0ZScsXHJcblx0XHRwcmltYXJ5OiB0aGVtZS5jb2xvci5wcmltYXJ5LFxyXG5cdFx0c3VjY2VzczogdGhlbWUuY29sb3Iuc3VjY2VzcyxcclxuXHRcdHdhcm5pbmc6IHRoZW1lLmNvbG9yLndhcm5pbmcsXHJcblx0fSxcclxuXHRzaXplOiB7XHJcblx0XHRzbWFsbDogMTYsXHJcblx0XHRtZWRpdW06IDMyLFxyXG5cdFx0bGFyZ2U6IDY0LFxyXG5cdH0sXHJcbn07XHJcblxyXG4vLyBtb2RhbFxyXG5cclxudGhlbWUubW9kYWwgPSB7XHJcblx0YmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC44KScsXHJcblx0ekluZGV4OiAxMDAsXHJcblx0cGFkZGluZzoge1xyXG5cdFx0ZGlhbG9nOiB7XHJcblx0XHRcdGhvcml6b250YWw6ICcxZW0nLFxyXG5cdFx0XHR2ZXJ0aWNhbDogMCxcclxuXHRcdH0sXHJcblx0XHRib2R5OiB7XHJcblx0XHRcdGhvcml6b250YWw6IDAsXHJcblx0XHRcdHZlcnRpY2FsOiAnMWVtJyxcclxuXHRcdH0sXHJcblx0XHRmb290ZXI6IHtcclxuXHRcdFx0aG9yaXpvbnRhbDogMCxcclxuXHRcdFx0dmVydGljYWw6ICcxZW0nLFxyXG5cdFx0fSxcclxuXHRcdGhlYWRlcjoge1xyXG5cdFx0XHRob3Jpem9udGFsOiAwLFxyXG5cdFx0XHR2ZXJ0aWNhbDogJzAuNmVtJyxcclxuXHRcdH0sXHJcblx0fSxcclxufTtcclxuXHJcbi8vIHBhZ2luYXRpb25cclxuXHJcbnRoZW1lLnBhZ2luYXRpb24gPSB7XHJcblx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk2MCxcclxuXHJcblx0aG92ZXI6IHtcclxuXHRcdGJhY2tncm91bmQ6ICd3aGl0ZScsXHJcblx0XHRib3JkZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMSknLFxyXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk2MCxcclxuXHR9LFxyXG5cdHNlbGVjdGVkOiB7XHJcblx0XHRiYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjA1KScsXHJcblx0XHRib3JkZXI6ICd0cmFuc3BhcmVudCcsXHJcblx0XHRjb2xvcjogdGhlbWUuY29sb3IuZ3JheTYwLFxyXG5cdH0sXHJcblx0ZGlzYWJsZWQ6IHtcclxuXHRcdGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCcsXHJcblx0XHRjb2xvcjogdGhlbWUuY29sb3IuZ3JheTQwLFxyXG5cdH0sXHJcbn07XHJcblxyXG4vLyBzcGlubmVyXHJcblxyXG50aGVtZS5zcGlubmVyID0ge1xyXG5cdGNvbG9yOiB7XHJcblx0XHRkYW5nZXI6IHRoZW1lLmNvbG9yLmRhbmdlcixcclxuXHRcdGRlZmF1bHQ6IHRoZW1lLmNvbG9yLmdyYXk0MCxcclxuXHRcdGludmVydGVkOiAnd2hpdGUnLFxyXG5cdFx0cHJpbWFyeTogdGhlbWUuY29sb3IucHJpbWFyeSxcclxuXHRcdHN1Y2Nlc3M6IHRoZW1lLmNvbG9yLnN1Y2Nlc3MsXHJcblx0XHR3YXJuaW5nOiB0aGVtZS5jb2xvci53YXJuaW5nLFxyXG5cdH0sXHJcblx0c2l6ZToge1xyXG5cdFx0c21hbGw6XHQ0LFxyXG5cdFx0bWVkaXVtOlx0OCxcclxuXHRcdGxhcmdlOlx0MTYsXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gdGhlbWU7XHJcbiIsIi8qKlxyXG4gKiBIZWxwZXIgbWV0aG9kIHRvIGhhbmRsZSBMaXN0IG9wZXJhdGlvbnMsIGUuZy4gY3JlYXRpbmcgaXRlbXMsIGRlbGV0aW5nIGl0ZW1zLFxyXG4gKiBnZXR0aW5nIGluZm9ybWF0aW9uIGFib3V0IHRob3NlIGxpc3RzLCBldGMuXHJcbiAqL1xyXG5cclxuY29uc3QgbGlzdFRvQXJyYXkgPSByZXF1aXJlKCdsaXN0LXRvLWFycmF5Jyk7XHJcbmNvbnN0IHFzID0gcmVxdWlyZSgncXMnKTtcclxuY29uc3QgeGhyID0gcmVxdWlyZSgneGhyJyk7XHJcbmNvbnN0IGFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcclxuLy8gRmlsdGVycyBmb3IgdHJ1dGh5IGVsZW1lbnRzIGluIGFuIGFycmF5XHJcbmNvbnN0IHRydXRoeSA9IChpKSA9PiBpO1xyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgY29sdW1ucyBvZiBhIGxpc3QsIHN0cnVjdHVyZWQgYnkgZmllbGRzIGFuZCBoZWFkaW5nc1xyXG4gKlxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IGxpc3QgVGhlIGxpc3Qgd2Ugd2FudCB0aGUgY29sdW1ucyBvZlxyXG4gKlxyXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgVGhlIGNvbHVtbnNcclxuICovXHJcbmZ1bmN0aW9uIGdldENvbHVtbnMobGlzdCkge1xyXG5cdHJldHVybiBsaXN0LnVpRWxlbWVudHMubWFwKChjb2wpID0+IHtcclxuXHRcdGlmIChjb2wudHlwZSA9PT0gJ2hlYWRpbmcnKSB7XHJcblx0XHRcdHJldHVybiB7IHR5cGU6ICdoZWFkaW5nJywgY29udGVudDogY29sLmNvbnRlbnQgfTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBmaWVsZCA9IGxpc3QuZmllbGRzW2NvbC5maWVsZF07XHJcblx0XHRcdHJldHVybiBmaWVsZCA/IHsgdHlwZTogJ2ZpZWxkJywgZmllbGQ6IGZpZWxkLCB0aXRsZTogZmllbGQubGFiZWwsIHBhdGg6IGZpZWxkLnBhdGggfSA6IG51bGw7XHJcblx0XHR9XHJcblx0fSkuZmlsdGVyKHRydXRoeSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYWtlIGFuIGFycmF5IG9mIGZpbHRlcnMgYW4gb2JqZWN0IGtleWVkIGJ5IHRoZSBmaWx0ZXJpbmcgcGF0aFxyXG4gKlxyXG4gKiBAcGFyYW0gIHtBcnJheX0gZmlsdGVyQXJyYXkgVGhlIGFycmF5IG9mIGZpbHRlcnNcclxuICpcclxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgIFRoZSBjb3JyZWN0ZWQgZmlsdGVycywga2V5ZWQgYnkgcGF0aFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0RmlsdGVycyhmaWx0ZXJBcnJheSkge1xyXG5cdHZhciBmaWx0ZXJzID0ge307XHJcblx0ZmlsdGVyQXJyYXkuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XHJcblx0XHRmaWx0ZXJzW2ZpbHRlci5maWVsZC5wYXRoXSA9IGZpbHRlci52YWx1ZTtcclxuXHR9KTtcclxuXHRyZXR1cm4gZmlsdGVycztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIHNvcnRpbmcgc3RyaW5nIGZvciB0aGUgVVJJXHJcbiAqXHJcbiAqIEBwYXJhbSAge0FycmF5fSBzb3J0LnBhdGhzIFRoZSBwYXRocyB3ZSB3YW50IHRvIHNvcnRcclxuICpcclxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgQWxsIHRoZSBzb3J0aW5nIHF1ZXJpZXMgd2Ugd2FudCBhcyBhIHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0U29ydFN0cmluZyhzb3J0KSB7XHJcblx0cmV0dXJuIHNvcnQucGF0aHMubWFwKGkgPT4ge1xyXG5cdFx0Ly8gSWYgd2Ugd2FudCB0byBzb3J0IGludmVydGVkLCB3ZSBwcmVmaXggYSBcIi1cIiBiZWZvcmUgdGhlIHNvcnQgcGF0aFxyXG5cdFx0cmV0dXJuIGkuaW52ZXJ0ID8gJy0nICsgaS5wYXRoIDogaS5wYXRoO1xyXG5cdH0pLmZpbHRlcih0cnV0aHkpLmpvaW4oJywnKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBCdWlsZCBhIHF1ZXJ5IHN0cmluZyBmcm9tIGEgYnVuY2ggb2Ygb3B0aW9uc1xyXG4gKi9cclxuZnVuY3Rpb24gYnVpbGRRdWVyeVN0cmluZyhvcHRpb25zKSB7XHJcblx0Y29uc3QgcXVlcnkgPSB7fTtcclxuXHRpZiAob3B0aW9ucy5zZWFyY2gpIHF1ZXJ5LnNlYXJjaCA9IG9wdGlvbnMuc2VhcmNoO1xyXG5cdGlmIChvcHRpb25zLmZpbHRlcnMubGVuZ3RoKSBxdWVyeS5maWx0ZXJzID0gSlNPTi5zdHJpbmdpZnkoZ2V0RmlsdGVycyhvcHRpb25zLmZpbHRlcnMpKTtcclxuXHRpZiAob3B0aW9ucy5jb2x1bW5zKSBxdWVyeS5maWVsZHMgPSBvcHRpb25zLmNvbHVtbnMubWFwKGkgPT4gaS5wYXRoKS5qb2luKCcsJyk7XHJcblx0aWYgKG9wdGlvbnMucGFnZSAmJiBvcHRpb25zLnBhZ2Uuc2l6ZSkgcXVlcnkubGltaXQgPSBvcHRpb25zLnBhZ2Uuc2l6ZTtcclxuXHRpZiAob3B0aW9ucy5wYWdlICYmIG9wdGlvbnMucGFnZS5pbmRleCA+IDEpIHF1ZXJ5LnNraXAgPSAob3B0aW9ucy5wYWdlLmluZGV4IC0gMSkgKiBvcHRpb25zLnBhZ2Uuc2l6ZTtcclxuXHRpZiAob3B0aW9ucy5zb3J0KSBxdWVyeS5zb3J0ID0gZ2V0U29ydFN0cmluZyhvcHRpb25zLnNvcnQpO1xyXG5cdHF1ZXJ5LmV4cGFuZFJlbGF0aW9uc2hpcEZpZWxkcyA9IHRydWU7XHJcblxyXG5cdC8vIEN1c3RvbSBGaWx0ZXIgdG8gRmV0Y2ggYWxsIFJlY29yZHMgV2hpbGUgU2VsZWN0aW5nIE1hbmFnZSBBbGxcclxuXHJcblx0aWYgKG9wdGlvbnMuZmlsdGVycy5mZXRjaF9hbGxfZGF0YSkge1xyXG5cdFx0cXVlcnkubGltaXQgPSBvcHRpb25zLmZpbHRlcnMuaXRlbV9jb3VudDtcclxuXHR9XHJcblxyXG5cdHJldHVybiAnPycgKyBxcy5zdHJpbmdpZnkocXVlcnkpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRoZSBtYWluIGxpc3QgaGVscGVyIGNsYXNzXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXHJcbiAqL1xyXG5jb25zdCBMaXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHQvLyBUT0RPIHRoZXNlIG9wdGlvbnMgYXJlIHBvc3NpYmx5IHVudXNlZFxyXG5cdGFzc2lnbih0aGlzLCBvcHRpb25zKTtcclxuXHR0aGlzLmNvbHVtbnMgPSBnZXRDb2x1bW5zKHRoaXMpO1xyXG5cdHRoaXMuZXhwYW5kZWREZWZhdWx0Q29sdW1ucyA9IHRoaXMuZXhwYW5kQ29sdW1ucyh0aGlzLmRlZmF1bHRDb2x1bW5zKTtcclxuXHR0aGlzLmRlZmF1bHRDb2x1bW5QYXRocyA9IHRoaXMuZXhwYW5kZWREZWZhdWx0Q29sdW1ucy5tYXAoaSA9PiBpLnBhdGgpLmpvaW4oJywnKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgYW4gaXRlbSB2aWEgdGhlIEFQSVxyXG4gKlxyXG4gKiBAcGFyYW0gIHtGb3JtRGF0YX0gZm9ybURhdGEgVGhlIHN1Ym1pdHRlZCBmb3JtIGRhdGFcclxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciB0aGUgQVBJIGNhbGxcclxuICovXHJcbkxpc3QucHJvdG90eXBlLmNyZWF0ZUl0ZW0gPSBmdW5jdGlvbiAoZm9ybURhdGEsIGNhbGxiYWNrKSB7XHJcblx0eGhyKHtcclxuXHRcdHVybDogYCR7S2V5c3RvbmUuYWRtaW5QYXRofS9hcGkvJHt0aGlzLnBhdGh9L2NyZWF0ZWAsXHJcblx0XHRyZXNwb25zZVR5cGU6ICdqc29uJyxcclxuXHRcdG1ldGhvZDogJ1BPU1QnLFxyXG5cdFx0aGVhZGVyczogYXNzaWduKHt9LCBLZXlzdG9uZS5jc3JmLmhlYWRlciksXHJcblx0XHRib2R5OiBmb3JtRGF0YSxcclxuXHR9LCAoZXJyLCByZXNwLCBkYXRhKSA9PiB7XHJcblx0XHRpZiAoZXJyKSBjYWxsYmFjayhlcnIpO1xyXG5cdFx0aWYgKHJlc3Auc3RhdHVzQ29kZSA9PT0gMjAwKSB7XHJcblx0XHRcdGNhbGxiYWNrKG51bGwsIGRhdGEpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gTk9URTogeGhyIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHdpdGggYW4gRXJyb3IgaWZcclxuXHRcdFx0Ly8gIHRoZXJlIGlzIGFuIGVycm9yIGluIHRoZSBicm93c2VyIHRoYXQgcHJldmVudHNcclxuXHRcdFx0Ly8gIHNlbmRpbmcgdGhlIHJlcXVlc3QuIEEgSFRUUCA1MDAgcmVzcG9uc2UgaXMgbm90XHJcblx0XHRcdC8vICBnb2luZyB0byBjYXVzZSBhbiBlcnJvciB0byBiZSByZXR1cm5lZC5cclxuXHRcdFx0Y2FsbGJhY2soZGF0YSwgbnVsbCk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn07XHJcblxyXG4vKipcclxuICogVXBkYXRlIGEgc3BlY2lmaWMgaXRlbVxyXG4gKlxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgaWQgICAgICAgVGhlIGlkIG9mIHRoZSBpdGVtIHdlIHdhbnQgdG8gdXBkYXRlXHJcbiAqIEBwYXJhbSAge0Zvcm1EYXRhfSBmb3JtRGF0YSBUaGUgc3VibWl0dGVkIGZvcm0gZGF0YVxyXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHRoZSBBUEkgY2FsbFxyXG4gKi9cclxuTGlzdC5wcm90b3R5cGUudXBkYXRlSXRlbSA9IGZ1bmN0aW9uIChpZCwgZm9ybURhdGEsIGNhbGxiYWNrKSB7XHJcblx0eGhyKHtcclxuXHRcdHVybDogYCR7S2V5c3RvbmUuYWRtaW5QYXRofS9hcGkvJHt0aGlzLnBhdGh9LyR7aWR9YCxcclxuXHRcdHJlc3BvbnNlVHlwZTogJ2pzb24nLFxyXG5cdFx0bWV0aG9kOiAnUE9TVCcsXHJcblx0XHRoZWFkZXJzOiBhc3NpZ24oe30sIEtleXN0b25lLmNzcmYuaGVhZGVyKSxcclxuXHRcdGJvZHk6IGZvcm1EYXRhLFxyXG5cdH0sIChlcnIsIHJlc3AsIGRhdGEpID0+IHtcclxuXHRcdGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xyXG5cdFx0aWYgKHJlc3Auc3RhdHVzQ29kZSA9PT0gMjAwKSB7XHJcblx0XHRcdGNhbGxiYWNrKG51bGwsIGRhdGEpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y2FsbGJhY2soZGF0YSk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn07XHJcblxyXG5MaXN0LnByb3RvdHlwZS5leHBhbmRDb2x1bW5zID0gZnVuY3Rpb24gKGlucHV0KSB7XHJcblx0bGV0IG5hbWVJbmNsdWRlZCA9IGZhbHNlO1xyXG5cdGNvbnN0IGNvbHMgPSBsaXN0VG9BcnJheShpbnB1dCkubWFwKGkgPT4ge1xyXG5cdFx0Y29uc3Qgc3BsaXQgPSBpLnNwbGl0KCd8Jyk7XHJcblx0XHRsZXQgcGF0aCA9IHNwbGl0WzBdO1xyXG5cdFx0bGV0IHdpZHRoID0gc3BsaXRbMV07XHJcblx0XHRpZiAocGF0aCA9PT0gJ19fbmFtZV9fJykge1xyXG5cdFx0XHRwYXRoID0gdGhpcy5uYW1lUGF0aDtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGZpZWxkID0gdGhpcy5maWVsZHNbcGF0aF07XHJcblx0XHRpZiAoIWZpZWxkKSB7XHJcblx0XHRcdC8vIFRPRE86IFN1cHBvcnQgYXJiaXRhcnkgZG9jdW1lbnQgcGF0aHNcclxuXHRcdFx0aWYgKCF0aGlzLmhpZGRlbikge1xyXG5cdFx0XHRcdGlmIChwYXRoID09PSB0aGlzLm5hbWVQYXRoKSB7XHJcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oYExpc3QgJHt0aGlzLmtleX0gZGlkIG5vdCBzcGVjaWZ5IGFueSBkZWZhdWx0IGNvbHVtbnMgb3IgYSBuYW1lIGZpZWxkYCk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGNvbnNvbGUud2FybihgTGlzdCAke3RoaXMua2V5fSBzcGVjaWZpZWQgYW4gaW52YWxpZCBkZWZhdWx0IGNvbHVtbjogJHtwYXRofWApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRpZiAocGF0aCA9PT0gdGhpcy5uYW1lUGF0aCkge1xyXG5cdFx0XHRuYW1lSW5jbHVkZWQgPSB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0ZmllbGQ6IGZpZWxkLFxyXG5cdFx0XHRsYWJlbDogZmllbGQubGFiZWwsXHJcblx0XHRcdHBhdGg6IGZpZWxkLnBhdGgsXHJcblx0XHRcdHR5cGU6IGZpZWxkLnR5cGUsXHJcblx0XHRcdHdpZHRoOiB3aWR0aCxcclxuXHRcdH07XHJcblx0fSkuZmlsdGVyKHRydXRoeSk7XHJcblx0aWYgKCFuYW1lSW5jbHVkZWQpIHtcclxuXHRcdGNvbHMudW5zaGlmdCh7XHJcblx0XHRcdHR5cGU6ICdpZCcsXHJcblx0XHRcdGxhYmVsOiAnSUQnLFxyXG5cdFx0XHRwYXRoOiAnaWQnLFxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHJldHVybiBjb2xzO1xyXG59O1xyXG5cclxuTGlzdC5wcm90b3R5cGUuZXhwYW5kU29ydCA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG5cdGNvbnN0IHNvcnQgPSB7XHJcblx0XHRyYXdJbnB1dDogaW5wdXQgfHwgdGhpcy5kZWZhdWx0U29ydCxcclxuXHRcdGlzRGVmYXVsdFNvcnQ6IGZhbHNlLFxyXG5cdH07XHJcblx0c29ydC5pbnB1dCA9IHNvcnQucmF3SW5wdXQ7XHJcblx0aWYgKHNvcnQuaW5wdXQgPT09ICdfX2RlZmF1bHRfXycpIHtcclxuXHRcdHNvcnQuaXNEZWZhdWx0U29ydCA9IHRydWU7XHJcblx0XHRzb3J0LmlucHV0ID0gdGhpcy5zb3J0YWJsZSA/ICdzb3J0T3JkZXInIDogdGhpcy5uYW1lUGF0aDtcclxuXHR9XHJcblx0c29ydC5wYXRocyA9IGxpc3RUb0FycmF5KHNvcnQuaW5wdXQpLm1hcChwYXRoID0+IHtcclxuXHRcdGxldCBpbnZlcnQgPSBmYWxzZTtcclxuXHRcdGlmIChwYXRoLmNoYXJBdCgwKSA9PT0gJy0nKSB7XHJcblx0XHRcdGludmVydCA9IHRydWU7XHJcblx0XHRcdHBhdGggPSBwYXRoLnN1YnN0cigxKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHBhdGguY2hhckF0KDApID09PSAnKycpIHtcclxuXHRcdFx0cGF0aCA9IHBhdGguc3Vic3RyKDEpO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgZmllbGQgPSB0aGlzLmZpZWxkc1twYXRoXTtcclxuXHRcdGlmICghZmllbGQpIHtcclxuXHRcdFx0Ly8gVE9ETzogU3VwcG9ydCBhcmJpdGFyeSBkb2N1bWVudCBwYXRoc1xyXG5cdFx0XHRjb25zb2xlLndhcm4oJ0ludmFsaWQgU29ydCBzcGVjaWZpZWQ6JywgcGF0aCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGZpZWxkOiBmaWVsZCxcclxuXHRcdFx0dHlwZTogZmllbGQudHlwZSxcclxuXHRcdFx0bGFiZWw6IGZpZWxkLmxhYmVsLFxyXG5cdFx0XHRwYXRoOiBmaWVsZC5wYXRoLFxyXG5cdFx0XHRpbnZlcnQ6IGludmVydCxcclxuXHRcdH07XHJcblx0fSkuZmlsdGVyKHRydXRoeSk7XHJcblx0cmV0dXJuIHNvcnQ7XHJcbn07XHJcblxyXG4vKipcclxuICogTG9hZCBhIHNwZWNpZmljIGl0ZW0gdmlhIHRoZSBBUElcclxuICpcclxuICogQHBhcmFtICB7U3RyaW5nfSAgIGl0ZW1JZCAgIFRoZSBpZCBvZiB0aGUgaXRlbSB3ZSB3YW50IHRvIGxvYWRcclxuICogQHBhcmFtICB7T2JqZWN0fSAgIG9wdGlvbnNcclxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXHJcbiAqL1xyXG5MaXN0LnByb3RvdHlwZS5sb2FkSXRlbSA9IGZ1bmN0aW9uIChpdGVtSWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XHJcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdGNhbGxiYWNrID0gb3B0aW9ucztcclxuXHRcdG9wdGlvbnMgPSBudWxsO1xyXG5cdH1cclxuXHRsZXQgdXJsID0gS2V5c3RvbmUuYWRtaW5QYXRoICsgJy9hcGkvJyArIHRoaXMucGF0aCArICcvJyArIGl0ZW1JZDtcclxuXHRjb25zdCBxdWVyeSA9IHFzLnN0cmluZ2lmeShvcHRpb25zKTtcclxuXHRpZiAocXVlcnkubGVuZ3RoKSB1cmwgKz0gJz8nICsgcXVlcnk7XHJcblx0eGhyKHtcclxuXHRcdHVybDogdXJsLFxyXG5cdFx0cmVzcG9uc2VUeXBlOiAnanNvbicsXHJcblx0fSwgKGVyciwgcmVzcCwgZGF0YSkgPT4ge1xyXG5cdFx0aWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XHJcblx0XHQvLyBQYXNzIHRoZSBkYXRhIGFzIHJlc3VsdCBvciBlcnJvciwgZGVwZW5kaW5nIG9uIHRoZSBzdGF0dXNDb2RlXHJcblx0XHRpZiAocmVzcC5zdGF0dXNDb2RlID09PSAyMDApIHtcclxuXHRcdFx0Y2FsbGJhY2sobnVsbCwgZGF0YSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjYWxsYmFjayhkYXRhKTtcclxuXHRcdH1cclxuXHR9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBMb2FkIGFsbCBpdGVtcyBvZiBhIGxpc3QsIG9wdGlvbmFsbHkgcGFzc2luZyBvYmplY3RzIHRvIGJ1aWxkIGEgcXVlcnkgc3RyaW5nXHJcbiAqIGZvciBzb3J0aW5nIG9yIHNlYXJjaGluZ1xyXG4gKlxyXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgb3B0aW9uc1xyXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICovXHJcbkxpc3QucHJvdG90eXBlLmxvYWRJdGVtcyA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xyXG5cdGNvbnN0IHVybCA9IEtleXN0b25lLmFkbWluUGF0aCArICcvYXBpLycgKyB0aGlzLnBhdGggKyBidWlsZFF1ZXJ5U3RyaW5nKG9wdGlvbnMpO1xyXG5cdHhocih7XHJcblx0XHR1cmw6IHVybCxcclxuXHRcdHJlc3BvbnNlVHlwZTogJ2pzb24nLFxyXG5cdH0sIChlcnIsIHJlc3AsIGRhdGEpID0+IHtcclxuXHRcdGlmIChlcnIpIGNhbGxiYWNrKGVycik7XHJcblx0XHQvLyBQYXNzIHRoZSBkYXRhIGFzIHJlc3VsdCBvciBlcnJvciwgZGVwZW5kaW5nIG9uIHRoZSBzdGF0dXNDb2RlXHJcblx0XHRpZiAocmVzcC5zdGF0dXNDb2RlID09PSAyMDApIHtcclxuXHRcdFx0Y2FsbGJhY2sobnVsbCwgZGF0YSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjYWxsYmFjayhkYXRhKTtcclxuXHRcdH1cclxuXHR9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgZG93bmxvYWQgVVJMIHRvIGRvd25sb2FkIGEgbGlzdCB3aXRoIHRoZSBjdXJyZW50IHNvcnRpbmcsIGZpbHRlcmluZyxcclxuICogc2VsZWN0aW9uIGFuZCBzZWFyY2hpbmcgb3B0aW9uc1xyXG4gKlxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcclxuICpcclxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgIFRoZSBkb3dubG9hZCBVUkxcclxuICovXHJcbkxpc3QucHJvdG90eXBlLmdldERvd25sb2FkVVJMID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHRjb25zdCB1cmwgPSBLZXlzdG9uZS5hZG1pblBhdGggKyAnL2FwaS8nICsgdGhpcy5wYXRoO1xyXG5cdGNvbnN0IHBhcnRzID0gW107XHJcblx0aWYgKG9wdGlvbnMuZm9ybWF0ICE9PSAnanNvbicpIHtcclxuXHRcdG9wdGlvbnMuZm9ybWF0ID0gJ2Nzdic7XHJcblx0fVxyXG5cdHBhcnRzLnB1c2gob3B0aW9ucy5zZWFyY2ggPyAnc2VhcmNoPScgKyBvcHRpb25zLnNlYXJjaCA6ICcnKTtcclxuXHRwYXJ0cy5wdXNoKG9wdGlvbnMuZmlsdGVycy5sZW5ndGggPyAnZmlsdGVycz0nICsgSlNPTi5zdHJpbmdpZnkoZ2V0RmlsdGVycyhvcHRpb25zLmZpbHRlcnMpKSA6ICcnKTtcclxuXHRwYXJ0cy5wdXNoKG9wdGlvbnMuY29sdW1ucyA/ICdzZWxlY3Q9JyArIG9wdGlvbnMuY29sdW1ucy5tYXAoaSA9PiBpLnBhdGgpLmpvaW4oJywnKSA6ICcnKTtcclxuXHRwYXJ0cy5wdXNoKG9wdGlvbnMuc29ydCA/ICdzb3J0PScgKyBnZXRTb3J0U3RyaW5nKG9wdGlvbnMuc29ydCkgOiAnJyk7XHJcblx0cGFydHMucHVzaCgnZXhwYW5kUmVsYXRpb25zaGlwRmllbGRzPXRydWUnKTtcclxuXHRyZXR1cm4gdXJsICsgJy9leHBvcnQuJyArIG9wdGlvbnMuZm9ybWF0ICsgJz8nICsgcGFydHMuZmlsdGVyKHRydXRoeSkuam9pbignJicpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIERlbGV0ZSBhIHNwZWNpZmljIGl0ZW0gdmlhIHRoZSBBUElcclxuICpcclxuICogQHBhcmFtICB7U3RyaW5nfSAgIGl0ZW1JZCAgIFRoZSBpZCBvZiB0aGUgaXRlbSB3ZSB3YW50IHRvIGRlbGV0ZVxyXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICovXHJcbkxpc3QucHJvdG90eXBlLmRlbGV0ZUl0ZW0gPSBmdW5jdGlvbiAoaXRlbUlkLCBjYWxsYmFjaykge1xyXG5cdHRoaXMuZGVsZXRlSXRlbXMoW2l0ZW1JZF0sIGNhbGxiYWNrKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBEZWxldGUgbXVsdGlwbGUgaXRlbXMgYXQgb25jZSB2aWEgdGhlIEFQSVxyXG4gKlxyXG4gKiBAcGFyYW0gIHtBcnJheX0gICBpdGVtSWRzICBBbiBhcnJheSBvZiBpZHMgb2YgaXRlbXMgd2Ugd2FudCB0byBkZWxldGVcclxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXHJcbiAqL1xyXG5MaXN0LnByb3RvdHlwZS5kZWxldGVJdGVtcyA9IGZ1bmN0aW9uIChpdGVtSWRzLCBjYWxsYmFjaykge1xyXG5cdGNvbnN0IHVybCA9IEtleXN0b25lLmFkbWluUGF0aCArICcvYXBpLycgKyB0aGlzLnBhdGggKyAnL2RlbGV0ZSc7XHJcblx0eGhyKHtcclxuXHRcdHVybDogdXJsLFxyXG5cdFx0bWV0aG9kOiAnUE9TVCcsXHJcblx0XHRoZWFkZXJzOiBhc3NpZ24oe30sIEtleXN0b25lLmNzcmYuaGVhZGVyKSxcclxuXHRcdGpzb246IHtcclxuXHRcdFx0aWRzOiBpdGVtSWRzLFxyXG5cdFx0fSxcclxuXHR9LCAoZXJyLCByZXNwLCBib2R5KSA9PiB7XHJcblx0XHRpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcclxuXHRcdC8vIFBhc3MgdGhlIGJvZHkgYXMgcmVzdWx0IG9yIGVycm9yLCBkZXBlbmRpbmcgb24gdGhlIHN0YXR1c0NvZGVcclxuXHRcdGlmIChyZXNwLnN0YXR1c0NvZGUgPT09IDIwMCkge1xyXG5cdFx0XHRjYWxsYmFjayhudWxsLCBib2R5KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGNhbGxiYWNrKGJvZHkpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59O1xyXG5cclxuTGlzdC5wcm90b3R5cGUucmVvcmRlckl0ZW1zID0gZnVuY3Rpb24gKGl0ZW0sIG9sZFNvcnRPcmRlciwgbmV3U29ydE9yZGVyLCBwYWdlT3B0aW9ucywgY2FsbGJhY2spIHtcclxuXHRjb25zdCB1cmwgPSBLZXlzdG9uZS5hZG1pblBhdGggKyAnL2FwaS8nICsgdGhpcy5wYXRoICsgJy8nICsgaXRlbS5pZCArICcvc29ydE9yZGVyLycgKyBvbGRTb3J0T3JkZXIgKyAnLycgKyBuZXdTb3J0T3JkZXIgKyAnLycgKyBidWlsZFF1ZXJ5U3RyaW5nKHBhZ2VPcHRpb25zKTtcclxuXHR4aHIoe1xyXG5cdFx0dXJsOiB1cmwsXHJcblx0XHRtZXRob2Q6ICdQT1NUJyxcclxuXHRcdGhlYWRlcnM6IGFzc2lnbih7fSwgS2V5c3RvbmUuY3NyZi5oZWFkZXIpLFxyXG5cdH0sIChlcnIsIHJlc3AsIGJvZHkpID0+IHtcclxuXHRcdGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Ym9keSA9IEpTT04ucGFyc2UoYm9keSk7XHJcblx0XHR9IGNhdGNoIChlKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKCdFcnJvciBwYXJzaW5nIHJlc3VsdHMganNvbjonLCBlLCBib2R5KTtcclxuXHRcdFx0cmV0dXJuIGNhbGxiYWNrKGUpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gUGFzcyB0aGUgYm9keSBhcyByZXN1bHQgb3IgZXJyb3IsIGRlcGVuZGluZyBvbiB0aGUgc3RhdHVzQ29kZVxyXG5cdFx0aWYgKHJlc3Auc3RhdHVzQ29kZSA9PT0gMjAwKSB7XHJcblx0XHRcdGNhbGxiYWNrKG51bGwsIGJvZHkpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y2FsbGJhY2soYm9keSk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn07XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBMaXN0O1xyXG4iLCIvKipcclxuXHRWYWxpZGF0ZSBIZXhcclxuXHQ9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcblx0QHBhcmFtIHtTdHJpbmd9IGhleFxyXG5cclxuXHQxLiByZW1vdmUgaGFzaCBpZiBwcmVzZW50XHJcblx0Mi4gY29udmVydCBmcm9tIDMgdG8gNiBkaWdpdCBjb2xvciBjb2RlICYgZW5zdXJlIHZhbGlkIGhleFxyXG4qL1xyXG5cclxuZnVuY3Rpb24gdmFsaWRhdGVIZXggKGNvbG9yKSB7XHJcblx0Y29uc3QgaGV4ID0gY29sb3IucmVwbGFjZSgnIycsICcnKTtcclxuXHJcblx0aWYgKGhleC5sZW5ndGggPT09IDMpIHtcclxuXHRcdHJldHVybiBoZXhbMF0gKyBoZXhbMF0gKyBoZXhbMV0gKyBoZXhbMV0gKyBoZXhbMl0gKyBoZXhbMl07XHJcblx0fVxyXG5cdGlmIChoZXgubGVuZ3RoICE9PSA2KSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgY29sb3IgdmFsdWUgcHJvdmlkZWQ6IFwiJHtjb2xvcn1cImApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGhleDtcclxufTtcclxuXHJcbi8qKlxyXG5cdEZhZGUgQ29sb3JcclxuXHQ9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcblx0VGFrZXMgYSBoZXhpZGVjaW1hbCBjb2xvciwgY29udmVydHMgaXQgdG8gUkdCIGFuZCBhcHBsaWVzIGFuIGFscGhhIHZhbHVlLlxyXG5cclxuXHRAcGFyYW0ge1N0cmluZ30gY29sb3JcclxuXHRAcGFyYW0ge051bWJlcn0gb3BhY2l0eSAoMC0xMDApXHJcblxyXG5cdDEuIGNvbnZlcnQgaGV4IHRvIFJHQlxyXG5cdDIuIGNvbWJpbmUgYW5kIGFkZCBhbHBoYSBjaGFubmVsXHJcbiovXHJcblxyXG5mdW5jdGlvbiBmYWRlIChjb2xvciwgb3BhY2l0eSA9IDEwMCkge1xyXG5cdGNvbnN0IGRlY2ltYWxGcmFjdGlvbiA9IG9wYWNpdHkgLyAxMDA7XHJcblx0Y29uc3QgaGV4ID0gdmFsaWRhdGVIZXgoY29sb3IpO1xyXG5cclxuXHQvLyAxLlxyXG5cdGNvbnN0IHIgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDAsIDIpLCAxNik7XHJcblx0Y29uc3QgZyA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoMiwgNCksIDE2KTtcclxuXHRjb25zdCBiID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZyg0LCA2KSwgMTYpO1xyXG5cclxuXHQvLyAyLlxyXG5cdGNvbnN0IHJlc3VsdCA9ICdyZ2JhKCdcclxuXHRcdCsgciArICcsJ1xyXG5cdFx0KyBnICsgJywnXHJcblx0XHQrIGIgKyAnLCdcclxuXHRcdCsgZGVjaW1hbEZyYWN0aW9uXHJcblx0XHQrICcpJztcclxuXHJcblx0cmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcblxyXG4vKipcclxuXHRTaGFkZSBDb2xvclxyXG5cdD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuXHRUYWtlcyBhIGhleGlkZWNpbWFsIGNvbG9yLCBjb252ZXJ0cyBpdCB0byBSR0IgYW5kIGxpZ2h0ZW5zIG9yIGRhcmtlbnNcclxuXHJcblx0QHBhcmFtIHtTdHJpbmd9IGNvbG9yXHJcblx0QHBhcmFtIHtOdW1iZXJ9IG9wYWNpdHkgKDAtMTAwKVxyXG5cclxuXHQxLiBkbyBmYW5jeSBSR0IgYml0d2lzZSBvcGVyYXRpb25zXHJcblx0Mi4gY29tYmluZSBiYWNrIGludG8gYSBoZXggdmFsdWVcclxuKi9cclxuXHJcbmZ1bmN0aW9uIHNoYWRlIChjb2xvciwgcGVyY2VudCkge1xyXG5cdGNvbnN0IGRlY2ltYWxGcmFjdGlvbiA9IHBlcmNlbnQgLyAxMDA7XHJcblx0Y29uc3QgaGV4ID0gdmFsaWRhdGVIZXgoY29sb3IpO1xyXG5cclxuXHQvLyAxLlxyXG5cdGxldCBmID0gcGFyc2VJbnQoaGV4LCAxNik7XHJcblx0bGV0IHQgPSBkZWNpbWFsRnJhY3Rpb24gPCAwID8gMCA6IDI1NTtcclxuXHRsZXQgcCA9IGRlY2ltYWxGcmFjdGlvbiA8IDAgPyBkZWNpbWFsRnJhY3Rpb24gKiAtMSA6IGRlY2ltYWxGcmFjdGlvbjtcclxuXHJcblx0Y29uc3QgUiA9IGYgPj4gMTY7XHJcblx0Y29uc3QgRyA9IGYgPj4gOCAmIDB4MDBGRjtcclxuXHRjb25zdCBCID0gZiAmIDB4MDAwMEZGO1xyXG5cclxuXHQvLyAyLlxyXG5cdHJldHVybiAnIycgKyAoMHgxMDAwMDAwXHJcblx0XHQrIChNYXRoLnJvdW5kKCh0IC0gUikgKiBwKSArIFIpICogMHgxMDAwMFxyXG5cdFx0KyAoTWF0aC5yb3VuZCgodCAtIEcpICogcCkgKyBHKSAqIDB4MTAwXHJcblx0XHQrIChNYXRoLnJvdW5kKCh0IC0gQikgKiBwKSArIEIpKS50b1N0cmluZygxNikuc2xpY2UoMSk7XHJcbn07XHJcblxyXG4vLyBzaGFkZSBoZWxwZXJzXHJcbmNvbnN0IGxpZ2h0ZW4gPSBzaGFkZTtcclxuZnVuY3Rpb24gZGFya2VuIChjb2xvciwgcGVyY2VudCkge1xyXG5cdHJldHVybiBzaGFkZShjb2xvciwgcGVyY2VudCAqIC0xKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuXHRCbGVuZCBDb2xvclxyXG5cdD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuXHRUYWtlcyB0d28gaGV4aWRlY2ltYWwgY29sb3JzIGFuZCBibGVuZCB0aGVtIHRvZ2V0aGVyXHJcblxyXG5cdEBwYXJhbSB7U3RyaW5nfSBjb2xvcjFcclxuXHRAcGFyYW0ge1N0cmluZ30gY29sb3IyXHJcblx0QHBhcmFtIHtOdW1iZXJ9IHBlcmNlbnQgKDAtMTAwKVxyXG5cclxuXHQxLiBkbyBmYW5jeSBSR0IgYml0d2lzZSBvcGVyYXRpb25zXHJcblx0Mi4gY29tYmluZSBiYWNrIGludG8gYSBoZXggdmFsdWVcclxuKi9cclxuXHJcbmZ1bmN0aW9uIGJsZW5kIChjb2xvcjEsIGNvbG9yMiwgcGVyY2VudCkge1xyXG5cdGNvbnN0IGRlY2ltYWxGcmFjdGlvbiA9IHBlcmNlbnQgLyAxMDA7XHJcblx0Y29uc3QgaGV4MSA9IHZhbGlkYXRlSGV4KGNvbG9yMSk7XHJcblx0Y29uc3QgaGV4MiA9IHZhbGlkYXRlSGV4KGNvbG9yMik7XHJcblxyXG5cdC8vIDEuXHJcblx0Y29uc3QgZiA9IHBhcnNlSW50KGhleDEsIDE2KTtcclxuXHRjb25zdCB0ID0gcGFyc2VJbnQoaGV4MiwgMTYpO1xyXG5cclxuXHRjb25zdCBSMSA9IGYgPj4gMTY7XHJcblx0Y29uc3QgRzEgPSBmID4+IDggJiAweDAwRkY7XHJcblx0Y29uc3QgQjEgPSBmICYgMHgwMDAwRkY7XHJcblxyXG5cdGNvbnN0IFIyID0gdCA+PiAxNjtcclxuXHRjb25zdCBHMiA9IHQgPj4gOCAmIDB4MDBGRjtcclxuXHRjb25zdCBCMiA9IHQgJiAweDAwMDBGRjtcclxuXHJcblx0Ly8gMi5cclxuXHRyZXR1cm4gJyMnICsgKDB4MTAwMDAwMFxyXG5cdFx0KyAoTWF0aC5yb3VuZCgoUjIgLSBSMSkgKiBkZWNpbWFsRnJhY3Rpb24pICsgUjEpICogMHgxMDAwMFxyXG5cdFx0KyAoTWF0aC5yb3VuZCgoRzIgLSBHMSkgKiBkZWNpbWFsRnJhY3Rpb24pICsgRzEpICogMHgxMDBcclxuXHRcdCsgKE1hdGgucm91bmQoKEIyIC0gQjEpICogZGVjaW1hbEZyYWN0aW9uKSArIEIxKSkudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRibGVuZCxcclxuXHRkYXJrZW4sXHJcblx0ZmFkZSxcclxuXHRsaWdodGVuLFxyXG59O1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIENvbmNhdGVuYXRlIENsYXNzbmFtZXNcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBTdXBwb3J0IGNsYXNzTmFtZSBhcyBhbiBhcnJheTpcclxuLy8gZm9yY2UgY2xhc3NuYW1lIHByb3AgaW50byBhbiBhcnJheSAocG9zc2libHkgb2YgYXJyYXlzKSB0aGVuIGZsYXR0ZW5cclxuXHJcbi8qXHJcblx0Ly8gVG8gdXNlIHNwcmVhZCB0aGUgbmV3IGFycmF5IGludG8gYXBocm9kaXRlJ3MgYGNzc2AgZnVuY3Rpb25cclxuXHJcblx0ZnVuY3Rpb24gQ29tcG9uZW50ICh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSkge1xyXG5cdFx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0XHRjbGFzc2VzLmNvbXBvbmVudCxcclxuXHRcdFx0Li4uY29uY2F0Q2xhc3NuYW1lcyhjbGFzc05hbWUpXHJcblx0XHQpO1xyXG5cclxuXHRcdHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz47XHJcblx0fTtcclxuKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29uY2F0Q2xhc3NuYW1lcyAoY2xhc3NOYW1lKSB7XHJcblx0cmV0dXJuIFtjbGFzc05hbWVdLnJlZHVjZSgoYSwgYikgPT4ge1xyXG5cdFx0cmV0dXJuIGEuY29uY2F0KGIpO1xyXG5cdH0sIFtdKTtcclxufTtcclxuIiwiLyoqXHJcblx0TGluZWFyIEdyYWRpZW50XHJcblx0PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5cdFNob3J0LWhhbmQgaGVscGVyIGZvciBhZGRpbmcgYSBsaW5lYXIgZ3JhZGllbnQgdG8geW91ciBjb21wb25lbnQuXHJcblxyXG5cdC0gQHBhcmFtIHtTdHJpbmd9IHNpZGVPckNvcm5lclxyXG5cdC0gQHBhcmFtIHtTdHJpbmd9IHRvcFxyXG5cdC0gQHBhcmFtIHtTdHJpbmd9IGJvdHRvbVxyXG5cdC0gQHBhcmFtIHtTdHJpbmd9IGJhc2UgKG9wdGlvbmFsKVxyXG5cdC0gQHJldHVybnMge09iamVjdH0gY3NzIGxpbmVhciBncmFkaWVudCBkZWNsYXJhdGlvblxyXG5cclxuXHRTcHJlYWQgdGhlIGRlY2xhcmF0aW9uIGludG8geW91ciBjb21wb25lbnQgY2xhc3M6XHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5cdG15Q29tcG9uZW50Q2xhc3M6IHtcclxuXHRcdC4uLmxpbmVhckdyYWRpZW50KHJlZCwgYmx1ZSksXHJcblx0fVxyXG4qL1xyXG5cclxuZnVuY3Rpb24gbGluZWFyR3JhZGllbnQgKGRpcmVjdGlvbiwgdG9wLCBib3R0b20sIGJhc2UgPSAnJykge1xyXG5cdHJldHVybiB7XHJcblx0XHRiYWNrZ3JvdW5kOiBgbGluZWFyLWdyYWRpZW50KCR7ZGlyZWN0aW9ufSwgJHt0b3B9IDAlLCAke2JvdHRvbX0gMTAwJSkgJHtiYXNlfWAsXHJcblx0fTtcclxufVxyXG5cclxuLy8gVmVydGljYWwgR3JhZGllbnRcclxuZnVuY3Rpb24gZ3JhZGllbnRWZXJ0aWNhbCAodG9wLCBib3R0b20sIGJhc2UpIHtcclxuXHRyZXR1cm4gbGluZWFyR3JhZGllbnQoJ3RvIGJvdHRvbScsIHRvcCwgYm90dG9tLCBiYXNlKTtcclxufVxyXG5cclxuLy8gSG9yaXpvbnRhbCBHcmFkaWVudFxyXG5mdW5jdGlvbiBncmFkaWVudEhvcml6b250YWwgKHRvcCwgYm90dG9tLCBiYXNlKSB7XHJcblx0cmV0dXJuIGxpbmVhckdyYWRpZW50KCd0byByaWdodCcsIHRvcCwgYm90dG9tLCBiYXNlKTtcclxufVxyXG5cclxuLyoqXHJcblx0Qm9yZGVyIFJhZGl1c1xyXG5cdD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuXHRTaG9ydC1oYW5kIGhlbHBlciBmb3IgYm9yZGVyIHJhZGlpXHJcbiovXHJcblxyXG4vLyB0b3BcclxuZnVuY3Rpb24gYm9yZGVyVG9wUmFkaXVzIChyYWRpdXMpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0Ym9yZGVyVG9wTGVmdFJhZGl1czogcmFkaXVzLFxyXG5cdFx0Ym9yZGVyVG9wUmlnaHRSYWRpdXM6IHJhZGl1cyxcclxuXHR9O1xyXG59XHJcblxyXG4vLyByaWdodFxyXG5mdW5jdGlvbiBib3JkZXJSaWdodFJhZGl1cyAocmFkaXVzKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiByYWRpdXMsXHJcblx0XHRib3JkZXJUb3BSaWdodFJhZGl1czogcmFkaXVzLFxyXG5cdH07XHJcbn1cclxuXHJcbi8vIGJvdHRvbVxyXG5mdW5jdGlvbiBib3JkZXJCb3R0b21SYWRpdXMgKHJhZGl1cykge1xyXG5cdHJldHVybiB7XHJcblx0XHRib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiByYWRpdXMsXHJcblx0XHRib3JkZXJCb3R0b21SaWdodFJhZGl1czogcmFkaXVzLFxyXG5cdH07XHJcbn1cclxuXHJcbi8vIGxlZnRcclxuZnVuY3Rpb24gYm9yZGVyTGVmdFJhZGl1cyAocmFkaXVzKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IHJhZGl1cyxcclxuXHRcdGJvcmRlclRvcExlZnRSYWRpdXM6IHJhZGl1cyxcclxuXHR9O1xyXG59XHJcblxyXG4vLyBSZXR1cm5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdGJvcmRlclRvcFJhZGl1cyxcclxuXHRib3JkZXJSaWdodFJhZGl1cyxcclxuXHRib3JkZXJCb3R0b21SYWRpdXMsXHJcblx0Ym9yZGVyTGVmdFJhZGl1cyxcclxuXHJcblx0Z3JhZGllbnRIb3Jpem9udGFsLFxyXG5cdGdyYWRpZW50VmVydGljYWwsXHJcbn07XHJcbiIsIi8qKlxyXG4gKiBFeHBvcnRzIGFuIG9iamVjdCBvZiBsaXN0cywga2V5ZWQgd2l0aCB0aGVpciBrZXkgaW5zdGVhZCBvZiB0aGVpciBuYW1lIGFuZFxyXG4gKiB3cmFwcGVkIHdpdGggdGhlIExpc3QgaGVscGVyICguL0xpc3QuanMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IExpc3QgZnJvbSAnLi9MaXN0JztcclxuXHJcbmV4cG9ydHMubGlzdHNCeUtleSA9IHt9O1xyXG5leHBvcnRzLmxpc3RzQnlQYXRoID0ge307XHJcblxyXG5mb3IgKGNvbnN0IGtleSBpbiBLZXlzdG9uZS5saXN0cykge1xyXG5cdC8vIEd1YXJkIGZvci1pbnNcclxuXHRpZiAoe30uaGFzT3duUHJvcGVydHkuY2FsbChLZXlzdG9uZS5saXN0cywga2V5KSkge1xyXG5cdFx0dmFyIGxpc3QgPSBuZXcgTGlzdChLZXlzdG9uZS5saXN0c1trZXldKTtcclxuXHRcdGV4cG9ydHMubGlzdHNCeUtleVtrZXldID0gbGlzdDtcclxuXHRcdGV4cG9ydHMubGlzdHNCeVBhdGhbbGlzdC5wYXRoXSA9IGxpc3Q7XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCBhc3NpZ24gZnJvbSAnb2JqZWN0LWFzc2lnbic7XHJcbmltcG9ydCBibGFja2xpc3QgZnJvbSAnYmxhY2tsaXN0JztcclxuaW1wb3J0IGlzRXF1YWwgZnJvbSAnbG9kYXNoL2lzRXF1YWwnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRm9yUXVlcnlDaGFuZ2UgKG5leHRQcm9wcywgdGhpc1Byb3BzKSB7XHJcblx0Y29uc3QgeyBxdWVyeSB9ID0gbmV4dFByb3BzLmxvY2F0aW9uO1xyXG5cdGNvbnN0IHsgY2FjaGVkUXVlcnkgfSA9IG5leHRQcm9wcy5hY3RpdmU7XHJcblxyXG5cdGNvbnN0IHBhcnNlZFF1ZXJ5ID0gT2JqZWN0LmFzc2lnbihcclxuXHRcdHt9LFxyXG5cdFx0cXVlcnksXHJcblx0XHR7IHBhZ2U6IHBhcnNlSW50KHF1ZXJ5LnBhZ2UpIH1cclxuXHQpO1xyXG5cclxuXHRpZiAoIXBhcnNlZFF1ZXJ5LnBhZ2UpIGRlbGV0ZSBwYXJzZWRRdWVyeS5wYWdlO1xyXG5cclxuXHRjb25zdCBhdHRlbnVhdGVkUXVlcnkgPSBibGFja2xpc3QocGFyc2VkUXVlcnksICdzZWFyY2gnKTtcclxuXHRjb25zdCBhdHRlbnVhdGVkQ2FjaGUgPSBibGFja2xpc3QoY2FjaGVkUXVlcnksICdzZWFyY2gnKTtcclxuXHJcblx0aWYgKG5leHRQcm9wcy5sb2NhdGlvbi5wYXRobmFtZSAhPT0gdGhpc1Byb3BzLmxvY2F0aW9uLnBhdGhuYW1lKSByZXR1cm4gdHJ1ZTtcclxuXHJcblx0aWYgKCFpc0VxdWFsKGF0dGVudWF0ZWRRdWVyeSwgYXR0ZW51YXRlZENhY2hlKSkgcmV0dXJuIHRydWU7XHJcblxyXG5cdHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGlzZVZhbHVlICh2YWx1ZSwgYmVuY2htYXJrKSB7XHJcblx0aWYgKHZhbHVlID09PSBiZW5jaG1hcmspIHJldHVybiB2b2lkIDA7XHJcblx0cmV0dXJuIHZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU29ydFF1ZXJ5UGFyYW1zIChyYXdJbnB1dCwgZGVmYXVsdFNvcnQpIHtcclxuXHRyZXR1cm4gbm9ybWFsaXNlVmFsdWUocmF3SW5wdXQsIGRlZmF1bHRTb3J0KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBhZ2VRdWVyeVBhcmFtcyAocGFnZSwgZGVmYXVsdFZhbHVlKSB7XHJcblx0cmV0dXJuIG5vcm1hbGlzZVZhbHVlKHBhZ2UsIGRlZmF1bHRWYWx1ZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVcGRhdGVzIHRoZSBxdWVyeSBwYXJhbWV0ZXJzIHdpdGggdGhlIG9uZXMgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxyXG4gKlxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IHBhcmFtcyAgICAgICAgIFRoZSBuZXcgcGFyYW1ldGVycyB0byBiZSBhZGRlZFxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IGxvY2F0aW9uICAgICAgIFRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVF1ZXJ5UGFyYW1zIChwYXJhbXMsIGxvY2F0aW9uKSB7XHJcblx0aWYgKCFsb2NhdGlvbikgcmV0dXJuO1xyXG5cdGNvbnN0IG5ld1BhcmFtcyA9IGFzc2lnbih7fSwgbG9jYXRpb24ucXVlcnkpO1xyXG5cdC8vIFN0cmluZ2lmeSBuZXN0ZWQgb2JqZWN0cyBpbnNpZGUgdGhlIHBhcmFtZXRlcnNcclxuXHRPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goaSA9PiB7XHJcblx0XHRpZiAocGFyYW1zW2ldKSB7XHJcblx0XHRcdG5ld1BhcmFtc1tpXSA9IHBhcmFtc1tpXTtcclxuXHRcdFx0aWYgKHR5cGVvZiBuZXdQYXJhbXNbaV0gPT09ICdvYmplY3QnKSB7XHJcblx0XHRcdFx0bmV3UGFyYW1zW2ldID0gSlNPTi5zdHJpbmdpZnkobmV3UGFyYW1zW2ldKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZGVsZXRlIG5ld1BhcmFtc1tpXTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0cmV0dXJuIG5ld1BhcmFtcztcclxufVxyXG5cclxuLyoqXHJcbiAqIFN0cmluZ2lmeSB0aGUgY29sdW1ucyBhcnJheSBmcm9tIHRoZSBzdGF0ZVxyXG4gKlxyXG4gKiBAcGFyYW0gIHtBcnJheX0gIGNvbHVtbnMgICAgICAgICAgICBUaGUgY29sdW1ucyBmcm9tIHRoZSBhY3RpdmUgc3RhdGVcclxuICogQHBhcmFtICB7U3RyaW5nfSBkZWZhdWx0Q29sdW1uUGF0aHMgVGhlIGRlZmF1bHQgY29sdW1uIHBhdGhzIG9mIHRoZSBjdXJyZW50IGxpc3RcclxuICpcclxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgICAgICAgICAgVGhlIGNvbHVtbiBhcnJheSwgc3RyaW5naWZpZWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnlDb2x1bW5zIChjb2x1bW5zLCBkZWZhdWx0Q29sdW1uUGF0aHMpIHtcclxuXHRpZiAoIWNvbHVtbnMpIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0Ly8gVHVybnMgW3sgcGF0aDogJ3NvbWVDb2x1bW4nIH0sIHsgcGF0aDogJ3NvbWVPdGhlckNvbHVtbicgfV1cclxuXHQvLyBpbnRvIFsnc29tZUNvbHVtbicsICdzb21lT3RoZXJDb2x1bW4nXVxyXG5cdGxldCBjb2x1bW5TdHJpbmcgPSBjb2x1bW5zLm1hcCgoY29sdW1uKSA9PiBjb2x1bW4ucGF0aCk7XHJcblx0Ly8gVHVybnMgdGhhdCBhcnJheSBpbnRvICdzb21lQ29sdW1uLHNvbWVPdGhlckNvbHVtbidcclxuXHRpZiAoQXJyYXkuaXNBcnJheShjb2x1bW5TdHJpbmcpKSBjb2x1bW5TdHJpbmcgPSBjb2x1bW5TdHJpbmcuam9pbignLCcpO1xyXG5cdC8vIElmIHRoYXQgaXMgdGhlIHNhbWUgYXMgdGhlIGRlZmF1bHQgY29sdW1ucywgZG9uJ3Qgc2V0IHRoZSBxdWVyeSBwYXJhbVxyXG5cdGlmIChjb2x1bW5TdHJpbmcgPT09IGRlZmF1bHRDb2x1bW5QYXRocykgY29sdW1uU3RyaW5nID0gdW5kZWZpbmVkO1xyXG5cdHJldHVybiBjb2x1bW5TdHJpbmc7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRmxhdHRlbnMgZmlsdGVycyBmcm9tIHN0YXRlIGludG8gdGhlIG1pbmltdW0gbmVlZGVkIG9iamVjdCB0byBiZSB1c2VkIGFzIGEgdXJsXHJcbiAqIHBhcmFtXHJcbiAqXHJcbiAqIEBwYXJhbSAge09iamVjdH0gZmlsdGVyQXJyYXkgICAgICAgICBUaGUgYXJyYXkgb2YgZmlsdGVycyBmcm9tIHN0YXRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcGFyYW1ldGl6ZUZpbHRlcnMgKGZpbHRlckFycmF5KSB7XHJcblx0aWYgKCFmaWx0ZXJBcnJheSB8fCBmaWx0ZXJBcnJheS5sZW5ndGggPT09IDApIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0cmV0dXJuIGZpbHRlckFycmF5Lm1hcCgoZmlsdGVyKSA9PiB7XHJcblx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbih7XHJcblx0XHRcdHBhdGg6IGZpbHRlci5maWVsZC5wYXRoLFxyXG5cdFx0fSwgZmlsdGVyLnZhbHVlKTtcclxuXHR9KTtcclxufVxyXG4iLCIvKipcclxuICogQSBmZXcgaGVscGVyIG1ldGhvZHMgZm9yIHN0cmluZ3NcclxuICovXHJcblxyXG5pbXBvcnQgaW5mbGVjdCBmcm9tICdpJztcclxuaW1wb3J0IHsgY29tcGFjdCwgc2l6ZSB9IGZyb20gJ2xvZGFzaCc7XHJcblxyXG4vKipcclxuICogRGlzcGxheXMgdGhlIHNpbmd1bGFyIG9yIHBsdXJhbCBvZiBhIHN0cmluZyBiYXNlZCBvbiBhIG51bWJlclxyXG4gKiBvciBudW1iZXIgb2YgaXRlbXMgaW4gYW4gYXJyYXkuXHJcbiAqXHJcbiAqIElmIGFyaXR5IGlzIDEsIHJldHVybnMgdGhlIHBsdXJhbCBmb3JtIG9mIHRoZSB3b3JkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY291bnRcclxuICogQHBhcmFtIHtTdHJpbmd9IHNpbmd1bGFyIHN0cmluZ1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gcGx1cmFsIHN0cmluZ1xyXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHNpbmd1bGFyIG9yIHBsdXJhbCwgKiBpcyByZXBsYWNlZCB3aXRoIGNvdW50XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5wbHVyYWwgPSBmdW5jdGlvbiAoY291bnQsIHNuLCBwbCkge1xyXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XHJcblx0XHRyZXR1cm4gaW5mbGVjdC5wbHVyYWxpemUoY291bnQpO1xyXG5cdH1cclxuXHRpZiAodHlwZW9mIHNuICE9PSAnc3RyaW5nJykgc24gPSAnJztcclxuXHRpZiAoIXBsKSB7XHJcblx0XHRwbCA9IGluZmxlY3QucGx1cmFsaXplKHNuKTtcclxuXHR9XHJcblx0aWYgKHR5cGVvZiBjb3VudCA9PT0gJ3N0cmluZycpIHtcclxuXHRcdGNvdW50ID0gTnVtYmVyKGNvdW50KTtcclxuXHR9IGVsc2UgaWYgKHR5cGVvZiBjb3VudCAhPT0gJ251bWJlcicpIHtcclxuXHRcdGNvdW50ID0gc2l6ZShjb3VudCk7XHJcblx0fVxyXG5cdHJldHVybiAoY291bnQgPT09IDEgPyBzbiA6IHBsKS5yZXBsYWNlKCcqJywgY291bnQpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgZmlyc3QgbGV0dGVyIGluIGEgc3RyaW5nIHRvIHVwcGVyY2FzZVxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4ge1N0cmluZ30gU3RyXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZXhwb3J0cy51cGNhc2UgPSBmdW5jdGlvbiAoc3RyKSB7XHJcblx0aWYgKHN0ciAmJiBzdHIudG9TdHJpbmcpIHN0ciA9IHN0ci50b1N0cmluZygpO1xyXG5cdGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCAhc3RyLmxlbmd0aCkgcmV0dXJuICcnO1xyXG5cdHJldHVybiAoc3RyLnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpICsgc3RyLnN1YnN0cigxKSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBmaXJzdCBsZXR0ZXIgaW4gYSBzdHJpbmcgdG8gbG93ZXJjYXNlXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBTdHJcclxuICogQHJldHVybiB7U3RyaW5nfSBzdHJcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5leHBvcnRzLmRvd25jYXNlID0gZnVuY3Rpb24gKHN0cikge1xyXG5cdGlmIChzdHIgJiYgc3RyLnRvU3RyaW5nKSBzdHIgPSBzdHIudG9TdHJpbmcoKTtcclxuXHRpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgIXN0ci5sZW5ndGgpIHJldHVybiAnJztcclxuXHRyZXR1cm4gKHN0ci5zdWJzdHIoMCwgMSkudG9Mb3dlckNhc2UoKSArIHN0ci5zdWJzdHIoMSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhIHN0cmluZyB0byB0aXRsZSBjYXNlXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcclxuICogQHJldHVybiB7U3RyaW5nfSBUaXRsZSBDYXNlIGZvcm0gb2Ygc3RyXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZXhwb3J0cy50aXRsZWNhc2UgPSBmdW5jdGlvbiAoc3RyKSB7XHJcblx0aWYgKHN0ciAmJiBzdHIudG9TdHJpbmcpIHN0ciA9IHN0ci50b1N0cmluZygpO1xyXG5cdGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCAhc3RyLmxlbmd0aCkgcmV0dXJuICcnO1xyXG5cdHN0ciA9IHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEgJDInKTtcclxuXHR2YXIgcGFydHMgPSBzdHIuc3BsaXQoL1xcc3xffFxcLS8pO1xyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdGlmIChwYXJ0c1tpXSAmJiAhL15bQS1aMC05XSskLy50ZXN0KHBhcnRzW2ldKSkge1xyXG5cdFx0XHRwYXJ0c1tpXSA9IGV4cG9ydHMudXBjYXNlKHBhcnRzW2ldKTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGNvbXBhY3QocGFydHMpLmpvaW4oJyAnKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ29udmVydHMgYSBzdHJpbmcgdG8gY2FtZWwgY2FzZVxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gbG93ZXJjYXNlRmlyc3RXb3JkXHJcbiAqIEByZXR1cm4ge1N0cmluZ30gY2FtZWwtY2FzZSBmb3JtIG9mIHN0clxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmV4cG9ydHMuY2FtZWxjYXNlID0gZnVuY3Rpb24gKHN0ciwgbGMpIHtcclxuXHRyZXR1cm4gaW5mbGVjdC5jYW1lbGl6ZShzdHIsICEobGMpKTtcclxufTtcclxuIiwidmFyIEV4TWF0Y2ggPSByZXF1aXJlKCdleHByZXNzaW9uLW1hdGNoJyk7IC8vIE1hdGNoZXMgb2JqZWN0cyB3aXRoIGV4cHJlc3Npb25zXHJcblxyXG4vKipcclxuICogQ2hlY2tzIGlmIHNvbWV0aGluZyBpcyBhbiBvYmplY3RcclxuICpcclxuICogQHBhcmFtICB7QW55fSBhcmcgICBUaGUgc29tZXRoaW5nIHdlIHdhbnQgdG8gY2hlY2sgdGhlIHR5cGUgb2ZcclxuICogQHJldHVybiB7Qm9vbGVhbn0gSWYgYXJnIGlzIGFuIG9iamVjdCBvciBub3RcclxuICovXHJcbmZ1bmN0aW9uIGlzT2JqZWN0IChhcmcpIHtcclxuXHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEV2YWx1YXRlcyB0aGUgdmlzaWJpbGl0eSBvZiBhIGZpZWxkIGJhc2VkIG9uIGl0cyBkZXBlbmRlbmNpZXMgYW5kIHRoZWlyIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0gIHtPYmplY3R8QW55fSBkZXBlbmRzT24gVGhlIGRlcGVuZHNPbiB2YXJpYWJsZSB3ZSBnZXQgZnJvbSB0aGUgZmllbGRcclxuICogQHBhcmFtICB7T2JqZWN0fVx0XHR2YWx1ZXMgICAgVGhlIHZhbHVlcyBjdXJyZW50bHkgaW4gdGhlIGZpZWxkc1xyXG4gKiBAcmV0dXJuIHtCb29sZWFufVx0XHRcdCAgSWYgdGhlIGN1cnJlbnQgZmllbGQgc2hvdWxkIGJlIGRpc3BsYXllZCBiYXNlZFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgXHQgIG9uIGl0J3MgZGVwZW5kZW5jaWVzIGFuZCB0aGVpciB2YWx1ZXNcclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXZhbERlcGVuZHNPbiAoZGVwZW5kc09uLCB2YWx1ZXMpIHtcclxuXHRpZiAoIWlzT2JqZWN0KGRlcGVuZHNPbikgfHwgIU9iamVjdC5rZXlzKGRlcGVuZHNPbikubGVuZ3RoKSB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdC8vIENoZWNrcyBpZiB0aGUgY3VycmVudCBmaWVsZCBzaG91bGQgYmUgZGlzcGxheWVkLCBiYXNlZCBvbiB0aGUgdmFsdWVzIG9mXHJcblx0Ly8gb3RoZXIgZmllbGRzIGFuZCB0aGUgZGVwZW5kc09uIGNvbmZpZ3VyYXRpb24gb2YgdGhpcyBmaWVsZFxyXG5cdHZhciBNYXRjaCA9IG5ldyBFeE1hdGNoKGRlcGVuZHNPbiwgdmFsdWVzLCBmYWxzZSk7XHJcblx0cmV0dXJuIE1hdGNoLm1hdGNoKCk7XHJcbn07XHJcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG4iLCJ2YXIgaGFzaENsZWFyID0gcmVxdWlyZSgnLi9faGFzaENsZWFyJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaGFzaFNldCA9IHJlcXVpcmUoJy4vX2hhc2hTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaDtcbiIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKSxcbiAgICBzZXRDYWNoZUFkZCA9IHJlcXVpcmUoJy4vX3NldENhY2hlQWRkJyksXG4gICAgc2V0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19zZXRDYWNoZUhhcycpO1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0Q2FjaGU7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgc3RhY2tDbGVhciA9IHJlcXVpcmUoJy4vX3N0YWNrQ2xlYXInKSxcbiAgICBzdGFja0RlbGV0ZSA9IHJlcXVpcmUoJy4vX3N0YWNrRGVsZXRlJyksXG4gICAgc3RhY2tHZXQgPSByZXF1aXJlKCcuL19zdGFja0dldCcpLFxuICAgIHN0YWNrSGFzID0gcmVxdWlyZSgnLi9fc3RhY2tIYXMnKSxcbiAgICBzdGFja1NldCA9IHJlcXVpcmUoJy4vX3N0YWNrU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGFjaztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVB1c2g7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5U29tZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldEFsbEtleXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCJ2YXIgYmFzZUlzRXF1YWxEZWVwID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWxEZWVwJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gIH1cbiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWw7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBlcXVhbEJ5VGFnID0gcmVxdWlyZSgnLi9fZXF1YWxCeVRhZycpLFxuICAgIGVxdWFsT2JqZWN0cyA9IHJlcXVpcmUoJy4vX2VxdWFsT2JqZWN0cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbERlZXA7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCJ2YXIgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5cztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmFyeTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhY2hlSGFzO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlTb21lID0gcmVxdWlyZSgnLi9fYXJyYXlTb21lJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQXJyYXlzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5JyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIG1hcFRvQXJyYXkgPSByZXF1aXJlKCcuL19tYXBUb0FycmF5JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEJ5VGFnO1xuIiwidmFyIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsT2JqZWN0cztcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBiYXNlR2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRBbGxLZXlzJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5cztcbiIsInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG4iLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRQcm90b3R5cGU7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTeW1ib2xzO1xuIiwidmFyIERhdGFWaWV3ID0gcmVxdWlyZSgnLi9fRGF0YVZpZXcnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBQcm9taXNlID0gcmVxdWlyZSgnLi9fUHJvbWlzZScpLFxuICAgIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLFxuICAgIFdlYWtNYXAgPSByZXF1aXJlKCcuL19XZWFrTWFwJyksXG4gICAgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGFnO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVlKSkgJiZcbiAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbmRleDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG4iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1Byb3RvdHlwZTtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVDbGVhcjtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZURlbGV0ZTtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVHZXQ7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUhhcztcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZVNldDtcbiIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVHZXQ7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUhhcztcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVTZXQ7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcFRvQXJyYXk7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlckFyZztcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsIi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlQWRkO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlSGFzO1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb0FycmF5O1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsInZhciBiYXNlSXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL19iYXNlSXNBcmd1bWVudHMnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FyZ3VtZW50cztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKlxuICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICogZXF1aXZhbGVudC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogb2JqZWN0ID09PSBvdGhlcjtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXF1YWw7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQbGFpbk9iamVjdDtcbiIsInZhciBiYXNlSXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fYmFzZUlzVHlwZWRBcnJheScpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUeXBlZEFycmF5O1xuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViQXJyYXk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2VmZmVjdHMnKSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9pbyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvaW8nKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICd0YWtlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLnRha2U7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICd0YWtlbScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby50YWtlbTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3B1dCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5wdXQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdyYWNlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLnJhY2U7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjYWxsJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLmNhbGw7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdhcHBseScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5hcHBseTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NwcycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5jcHM7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdmb3JrJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLmZvcms7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdzcGF3bicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5zcGF3bjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2pvaW4nLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uam9pbjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NhbmNlbCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5jYW5jZWw7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdzZWxlY3QnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uc2VsZWN0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnYWN0aW9uQ2hhbm5lbCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5hY3Rpb25DaGFubmVsO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnY2FuY2VsbGVkJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLmNhbmNlbGxlZDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2ZsdXNoJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLmZsdXNoO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAndGFrZUV2ZXJ5Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLnRha2VFdmVyeTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3Rha2VMYXRlc3QnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8udGFrZUxhdGVzdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3Rocm90dGxlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLnRocm90dGxlO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmJ1ZmZlcnMgPSBleHBvcnRzLkJVRkZFUl9PVkVSRkxPVyA9IHVuZGVmaW5lZDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIEJVRkZFUl9PVkVSRkxPVyA9IGV4cG9ydHMuQlVGRkVSX09WRVJGTE9XID0gJ0NoYW5uZWxcXCdzIEJ1ZmZlciBvdmVyZmxvdyEnO1xuXG52YXIgT05fT1ZFUkZMT1dfVEhST1cgPSAxO1xudmFyIE9OX09WRVJGTE9XX0RST1AgPSAyO1xudmFyIE9OX09WRVJGTE9XX1NMSURFID0gMztcbnZhciBPTl9PVkVSRkxPV19FWFBBTkQgPSA0O1xuXG52YXIgemVyb0J1ZmZlciA9IHsgaXNFbXB0eTogX3V0aWxzLmtUcnVlLCBwdXQ6IF91dGlscy5ub29wLCB0YWtlOiBfdXRpbHMubm9vcCB9O1xuXG5mdW5jdGlvbiByaW5nQnVmZmVyKCkge1xuICB2YXIgbGltaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDEwO1xuICB2YXIgb3ZlcmZsb3dBY3Rpb24gPSBhcmd1bWVudHNbMV07XG5cbiAgdmFyIGFyciA9IG5ldyBBcnJheShsaW1pdCk7XG4gIHZhciBsZW5ndGggPSAwO1xuICB2YXIgcHVzaEluZGV4ID0gMDtcbiAgdmFyIHBvcEluZGV4ID0gMDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2goaXQpIHtcbiAgICBhcnJbcHVzaEluZGV4XSA9IGl0O1xuICAgIHB1c2hJbmRleCA9IChwdXNoSW5kZXggKyAxKSAlIGxpbWl0O1xuICAgIGxlbmd0aCsrO1xuICB9O1xuXG4gIHZhciB0YWtlID0gZnVuY3Rpb24gdGFrZSgpIHtcbiAgICBpZiAobGVuZ3RoICE9IDApIHtcbiAgICAgIHZhciBpdCA9IGFycltwb3BJbmRleF07XG4gICAgICBhcnJbcG9wSW5kZXhdID0gbnVsbDtcbiAgICAgIGxlbmd0aC0tO1xuICAgICAgcG9wSW5kZXggPSAocG9wSW5kZXggKyAxKSAlIGxpbWl0O1xuICAgICAgcmV0dXJuIGl0O1xuICAgIH1cbiAgfTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICB3aGlsZSAobGVuZ3RoKSB7XG4gICAgICBpdGVtcy5wdXNoKHRha2UoKSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtcztcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGlzRW1wdHk6IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoID09IDA7XG4gICAgfSxcbiAgICBwdXQ6IGZ1bmN0aW9uIHB1dChpdCkge1xuICAgICAgaWYgKGxlbmd0aCA8IGxpbWl0KSB7XG4gICAgICAgIHB1c2goaXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGRvdWJsZWRMaW1pdCA9IHZvaWQgMDtcbiAgICAgICAgc3dpdGNoIChvdmVyZmxvd0FjdGlvbikge1xuICAgICAgICAgIGNhc2UgT05fT1ZFUkZMT1dfVEhST1c6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQlVGRkVSX09WRVJGTE9XKTtcbiAgICAgICAgICBjYXNlIE9OX09WRVJGTE9XX1NMSURFOlxuICAgICAgICAgICAgYXJyW3B1c2hJbmRleF0gPSBpdDtcbiAgICAgICAgICAgIHB1c2hJbmRleCA9IChwdXNoSW5kZXggKyAxKSAlIGxpbWl0O1xuICAgICAgICAgICAgcG9wSW5kZXggPSBwdXNoSW5kZXg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIE9OX09WRVJGTE9XX0VYUEFORDpcbiAgICAgICAgICAgIGRvdWJsZWRMaW1pdCA9IDIgKiBsaW1pdDtcblxuICAgICAgICAgICAgYXJyID0gZmx1c2goKTtcblxuICAgICAgICAgICAgbGVuZ3RoID0gYXJyLmxlbmd0aDtcbiAgICAgICAgICAgIHB1c2hJbmRleCA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICBwb3BJbmRleCA9IDA7XG5cbiAgICAgICAgICAgIGFyci5sZW5ndGggPSBkb3VibGVkTGltaXQ7XG4gICAgICAgICAgICBsaW1pdCA9IGRvdWJsZWRMaW1pdDtcblxuICAgICAgICAgICAgcHVzaChpdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vIERST1BcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdGFrZTogdGFrZSwgZmx1c2g6IGZsdXNoXG4gIH07XG59XG5cbnZhciBidWZmZXJzID0gZXhwb3J0cy5idWZmZXJzID0ge1xuICBub25lOiBmdW5jdGlvbiBub25lKCkge1xuICAgIHJldHVybiB6ZXJvQnVmZmVyO1xuICB9LFxuICBmaXhlZDogZnVuY3Rpb24gZml4ZWQobGltaXQpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihsaW1pdCwgT05fT1ZFUkZMT1dfVEhST1cpO1xuICB9LFxuICBkcm9wcGluZzogZnVuY3Rpb24gZHJvcHBpbmcobGltaXQpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihsaW1pdCwgT05fT1ZFUkZMT1dfRFJPUCk7XG4gIH0sXG4gIHNsaWRpbmc6IGZ1bmN0aW9uIHNsaWRpbmcobGltaXQpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihsaW1pdCwgT05fT1ZFUkZMT1dfU0xJREUpO1xuICB9LFxuICBleHBhbmRpbmc6IGZ1bmN0aW9uIGV4cGFuZGluZyhpbml0aWFsU2l6ZSkge1xuICAgIHJldHVybiByaW5nQnVmZmVyKGluaXRpYWxTaXplLCBPTl9PVkVSRkxPV19FWFBBTkQpO1xuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVU5ERUZJTkVEX0lOUFVUX0VSUk9SID0gZXhwb3J0cy5JTlZBTElEX0JVRkZFUiA9IGV4cG9ydHMuaXNFbmQgPSBleHBvcnRzLkVORCA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZXhwb3J0cy5lbWl0dGVyID0gZW1pdHRlcjtcbmV4cG9ydHMuY2hhbm5lbCA9IGNoYW5uZWw7XG5leHBvcnRzLmV2ZW50Q2hhbm5lbCA9IGV2ZW50Q2hhbm5lbDtcbmV4cG9ydHMuc3RkQ2hhbm5lbCA9IHN0ZENoYW5uZWw7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBfYnVmZmVycyA9IHJlcXVpcmUoJy4vYnVmZmVycycpO1xuXG52YXIgX3NjaGVkdWxlciA9IHJlcXVpcmUoJy4vc2NoZWR1bGVyJyk7XG5cbnZhciBDSEFOTkVMX0VORF9UWVBFID0gJ0BAcmVkdXgtc2FnYS9DSEFOTkVMX0VORCc7XG52YXIgRU5EID0gZXhwb3J0cy5FTkQgPSB7IHR5cGU6IENIQU5ORUxfRU5EX1RZUEUgfTtcbnZhciBpc0VuZCA9IGV4cG9ydHMuaXNFbmQgPSBmdW5jdGlvbiBpc0VuZChhKSB7XG4gIHJldHVybiBhICYmIGEudHlwZSA9PT0gQ0hBTk5FTF9FTkRfVFlQRTtcbn07XG5cbmZ1bmN0aW9uIGVtaXR0ZXIoKSB7XG4gIHZhciBzdWJzY3JpYmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShzdWIpIHtcbiAgICBzdWJzY3JpYmVycy5wdXNoKHN1Yik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAoMCwgX3V0aWxzLnJlbW92ZSkoc3Vic2NyaWJlcnMsIHN1Yik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXQoaXRlbSkge1xuICAgIHZhciBhcnIgPSBzdWJzY3JpYmVycy5zbGljZSgpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFycltpXShpdGVtKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGVtaXQ6IGVtaXRcbiAgfTtcbn1cblxudmFyIElOVkFMSURfQlVGRkVSID0gZXhwb3J0cy5JTlZBTElEX0JVRkZFUiA9ICdpbnZhbGlkIGJ1ZmZlciBwYXNzZWQgdG8gY2hhbm5lbCBmYWN0b3J5IGZ1bmN0aW9uJztcbnZhciBVTkRFRklORURfSU5QVVRfRVJST1IgPSBleHBvcnRzLlVOREVGSU5FRF9JTlBVVF9FUlJPUiA9ICdTYWdhIHdhcyBwcm92aWRlZCB3aXRoIGFuIHVuZGVmaW5lZCBhY3Rpb24nO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLlVOREVGSU5FRF9JTlBVVF9FUlJPUiA9IFVOREVGSU5FRF9JTlBVVF9FUlJPUiArPSAnXFxuSGludHM6XFxuICAgIC0gY2hlY2sgdGhhdCB5b3VyIEFjdGlvbiBDcmVhdG9yIHJldHVybnMgYSBub24tdW5kZWZpbmVkIHZhbHVlXFxuICAgIC0gaWYgdGhlIFNhZ2Egd2FzIHN0YXJ0ZWQgdXNpbmcgcnVuU2FnYSwgY2hlY2sgdGhhdCB5b3VyIHN1YnNjcmliZSBzb3VyY2UgcHJvdmlkZXMgdGhlIGFjdGlvbiB0byBpdHMgbGlzdGVuZXJzXFxuICAnO1xufVxuXG5mdW5jdGlvbiBjaGFubmVsKCkge1xuICB2YXIgYnVmZmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBfYnVmZmVycy5idWZmZXJzLmZpeGVkKCk7XG5cbiAgdmFyIGNsb3NlZCA9IGZhbHNlO1xuICB2YXIgdGFrZXJzID0gW107XG5cbiAgKDAsIF91dGlscy5jaGVjaykoYnVmZmVyLCBfdXRpbHMuaXMuYnVmZmVyLCBJTlZBTElEX0JVRkZFUik7XG5cbiAgZnVuY3Rpb24gY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKSB7XG4gICAgaWYgKGNsb3NlZCAmJiB0YWtlcnMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyAoMCwgX3V0aWxzLmludGVybmFsRXJyKSgnQ2Fubm90IGhhdmUgYSBjbG9zZWQgY2hhbm5lbCB3aXRoIHBlbmRpbmcgdGFrZXJzJyk7XG4gICAgfVxuICAgIGlmICh0YWtlcnMubGVuZ3RoICYmICFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgICB0aHJvdyAoMCwgX3V0aWxzLmludGVybmFsRXJyKSgnQ2Fubm90IGhhdmUgcGVuZGluZyB0YWtlcnMgd2l0aCBub24gZW1wdHkgYnVmZmVyJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHV0KGlucHV0KSB7XG4gICAgY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKTtcbiAgICAoMCwgX3V0aWxzLmNoZWNrKShpbnB1dCwgX3V0aWxzLmlzLm5vdFVuZGVmLCBVTkRFRklORURfSU5QVVRfRVJST1IpO1xuICAgIGlmIChjbG9zZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0YWtlcnMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYnVmZmVyLnB1dChpbnB1dCk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2IgPSB0YWtlcnNbaV07XG4gICAgICBpZiAoIWNiW191dGlscy5NQVRDSF0gfHwgY2JbX3V0aWxzLk1BVENIXShpbnB1dCkpIHtcbiAgICAgICAgdGFrZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgcmV0dXJuIGNiKGlucHV0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0YWtlKGNiKSB7XG4gICAgY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKTtcbiAgICAoMCwgX3V0aWxzLmNoZWNrKShjYiwgX3V0aWxzLmlzLmZ1bmMsICdjaGFubmVsLnRha2VcXCdzIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gICAgaWYgKGNsb3NlZCAmJiBidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgICBjYihFTkQpO1xuICAgIH0gZWxzZSBpZiAoIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICAgIGNiKGJ1ZmZlci50YWtlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YWtlcnMucHVzaChjYik7XG4gICAgICBjYi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX3V0aWxzLnJlbW92ZSkodGFrZXJzLCBjYik7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKGNiKSB7XG4gICAgY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKTsgLy8gVE9ETzogY2hlY2sgaWYgc29tZSBuZXcgc3RhdGUgc2hvdWxkIGJlIGZvcmJpZGRlbiBub3dcbiAgICAoMCwgX3V0aWxzLmNoZWNrKShjYiwgX3V0aWxzLmlzLmZ1bmMsICdjaGFubmVsLmZsdXNoXFwnIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIGlmIChjbG9zZWQgJiYgYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgY2IoRU5EKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2IoYnVmZmVyLmZsdXNoKCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgY2hlY2tGb3JiaWRkZW5TdGF0ZXMoKTtcbiAgICBpZiAoIWNsb3NlZCkge1xuICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgIGlmICh0YWtlcnMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnIgPSB0YWtlcnM7XG4gICAgICAgIHRha2VycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgYXJyW2ldKEVORCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4geyB0YWtlOiB0YWtlLCBwdXQ6IHB1dCwgZmx1c2g6IGZsdXNoLCBjbG9zZTogY2xvc2UsXG4gICAgZ2V0IF9fdGFrZXJzX18oKSB7XG4gICAgICByZXR1cm4gdGFrZXJzO1xuICAgIH0sXG4gICAgZ2V0IF9fY2xvc2VkX18oKSB7XG4gICAgICByZXR1cm4gY2xvc2VkO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZXZlbnRDaGFubmVsKHN1YnNjcmliZSkge1xuICB2YXIgYnVmZmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBfYnVmZmVycy5idWZmZXJzLm5vbmUoKTtcbiAgdmFyIG1hdGNoZXIgPSBhcmd1bWVudHNbMl07XG5cbiAgLyoqXG4gICAgc2hvdWxkIGJlIGlmKHR5cGVvZiBtYXRjaGVyICE9PSB1bmRlZmluZWQpIGluc3RlYWQ/XG4gICAgc2VlIFBSICMyNzMgZm9yIGEgYmFja2dyb3VuZCBkaXNjdXNzaW9uXG4gICoqL1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAoMCwgX3V0aWxzLmNoZWNrKShtYXRjaGVyLCBfdXRpbHMuaXMuZnVuYywgJ0ludmFsaWQgbWF0Y2ggZnVuY3Rpb24gcGFzc2VkIHRvIGV2ZW50Q2hhbm5lbCcpO1xuICB9XG5cbiAgdmFyIGNoYW4gPSBjaGFubmVsKGJ1ZmZlcik7XG4gIHZhciB1bnN1YnNjcmliZSA9IHN1YnNjcmliZShmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoaXNFbmQoaW5wdXQpKSB7XG4gICAgICBjaGFuLmNsb3NlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChtYXRjaGVyICYmICFtYXRjaGVyKGlucHV0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjaGFuLnB1dChpbnB1dCk7XG4gIH0pO1xuXG4gIGlmICghX3V0aWxzLmlzLmZ1bmModW5zdWJzY3JpYmUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbiBldmVudENoYW5uZWw6IHN1YnNjcmliZSBzaG91bGQgcmV0dXJuIGEgZnVuY3Rpb24gdG8gdW5zdWJzY3JpYmUnKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdGFrZTogY2hhbi50YWtlLFxuICAgIGZsdXNoOiBjaGFuLmZsdXNoLFxuICAgIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgIGlmICghY2hhbi5fX2Nsb3NlZF9fKSB7XG4gICAgICAgIGNoYW4uY2xvc2UoKTtcbiAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0ZENoYW5uZWwoc3Vic2NyaWJlKSB7XG4gIHZhciBjaGFuID0gZXZlbnRDaGFubmVsKGZ1bmN0aW9uIChjYikge1xuICAgIHJldHVybiBzdWJzY3JpYmUoZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICBpZiAoaW5wdXRbX3V0aWxzLlNBR0FfQUNUSU9OXSkge1xuICAgICAgICBjYihpbnB1dCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICgwLCBfc2NoZWR1bGVyLmFzYXApKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNiKGlucHV0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGNoYW4sIHtcbiAgICB0YWtlOiBmdW5jdGlvbiB0YWtlKGNiLCBtYXRjaGVyKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgKDAsIF91dGlscy5jaGVjaykobWF0Y2hlciwgX3V0aWxzLmlzLmZ1bmMsICdjaGFubmVsLnRha2VcXCdzIG1hdGNoZXIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgIGNiW191dGlscy5NQVRDSF0gPSBtYXRjaGVyO1xuICAgICAgfVxuICAgICAgY2hhbi50YWtlKGNiKTtcbiAgICB9XG4gIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYXNFZmZlY3QgPSBleHBvcnRzLnRha2VtID0gdW5kZWZpbmVkO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbmV4cG9ydHMudGFrZSA9IHRha2U7XG5leHBvcnRzLnB1dCA9IHB1dDtcbmV4cG9ydHMucmFjZSA9IHJhY2U7XG5leHBvcnRzLmNhbGwgPSBjYWxsO1xuZXhwb3J0cy5hcHBseSA9IGFwcGx5O1xuZXhwb3J0cy5jcHMgPSBjcHM7XG5leHBvcnRzLmZvcmsgPSBmb3JrO1xuZXhwb3J0cy5zcGF3biA9IHNwYXduO1xuZXhwb3J0cy5qb2luID0gam9pbjtcbmV4cG9ydHMuY2FuY2VsID0gY2FuY2VsO1xuZXhwb3J0cy5zZWxlY3QgPSBzZWxlY3Q7XG5leHBvcnRzLmFjdGlvbkNoYW5uZWwgPSBhY3Rpb25DaGFubmVsO1xuZXhwb3J0cy5jYW5jZWxsZWQgPSBjYW5jZWxsZWQ7XG5leHBvcnRzLmZsdXNoID0gZmx1c2g7XG5leHBvcnRzLnRha2VFdmVyeSA9IHRha2VFdmVyeTtcbmV4cG9ydHMudGFrZUxhdGVzdCA9IHRha2VMYXRlc3Q7XG5leHBvcnRzLnRocm90dGxlID0gdGhyb3R0bGU7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBfc2FnYUhlbHBlcnMgPSByZXF1aXJlKCcuL3NhZ2FIZWxwZXJzJyk7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBJTyA9ICgwLCBfdXRpbHMuc3ltKSgnSU8nKTtcbnZhciBUQUtFID0gJ1RBS0UnO1xudmFyIFBVVCA9ICdQVVQnO1xudmFyIFJBQ0UgPSAnUkFDRSc7XG52YXIgQ0FMTCA9ICdDQUxMJztcbnZhciBDUFMgPSAnQ1BTJztcbnZhciBGT1JLID0gJ0ZPUksnO1xudmFyIEpPSU4gPSAnSk9JTic7XG52YXIgQ0FOQ0VMID0gJ0NBTkNFTCc7XG52YXIgU0VMRUNUID0gJ1NFTEVDVCc7XG52YXIgQUNUSU9OX0NIQU5ORUwgPSAnQUNUSU9OX0NIQU5ORUwnO1xudmFyIENBTkNFTExFRCA9ICdDQU5DRUxMRUQnO1xudmFyIEZMVVNIID0gJ0ZMVVNIJztcblxudmFyIGRlcHJlY2F0aW9uV2FybmluZyA9IGZ1bmN0aW9uIGRlcHJlY2F0aW9uV2FybmluZyhkZXByZWNhdGVkLCBwcmVmZXJyZWQpIHtcbiAgcmV0dXJuIGRlcHJlY2F0ZWQgKyAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgJyArIHByZWZlcnJlZCArICcsIHBsZWFzZSB1cGRhdGUgeW91ciBjb2RlJztcbn07XG5cbnZhciBlZmZlY3QgPSBmdW5jdGlvbiBlZmZlY3QodHlwZSwgcGF5bG9hZCkge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgSU8sIHRydWUpLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgdHlwZSwgcGF5bG9hZCksIF9yZWY7XG59O1xuXG5mdW5jdGlvbiB0YWtlKCkge1xuICB2YXIgcGF0dGVybk9yQ2hhbm5lbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyonO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgKDAsIF91dGlscy5jaGVjaykoYXJndW1lbnRzWzBdLCBfdXRpbHMuaXMubm90VW5kZWYsICd0YWtlKHBhdHRlcm5PckNoYW5uZWwpOiBwYXR0ZXJuT3JDaGFubmVsIGlzIHVuZGVmaW5lZCcpO1xuICB9XG4gIGlmIChfdXRpbHMuaXMucGF0dGVybihwYXR0ZXJuT3JDaGFubmVsKSkge1xuICAgIHJldHVybiBlZmZlY3QoVEFLRSwgeyBwYXR0ZXJuOiBwYXR0ZXJuT3JDaGFubmVsIH0pO1xuICB9XG4gIGlmIChfdXRpbHMuaXMuY2hhbm5lbChwYXR0ZXJuT3JDaGFubmVsKSkge1xuICAgIHJldHVybiBlZmZlY3QoVEFLRSwgeyBjaGFubmVsOiBwYXR0ZXJuT3JDaGFubmVsIH0pO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcigndGFrZShwYXR0ZXJuT3JDaGFubmVsKTogYXJndW1lbnQgJyArIFN0cmluZyhwYXR0ZXJuT3JDaGFubmVsKSArICcgaXMgbm90IHZhbGlkIGNoYW5uZWwgb3IgYSB2YWxpZCBwYXR0ZXJuJyk7XG59XG5cbnRha2UubWF5YmUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBlZmYgPSB0YWtlLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgZWZmW1RBS0VdLm1heWJlID0gdHJ1ZTtcbiAgcmV0dXJuIGVmZjtcbn07XG5cbnZhciB0YWtlbSA9IGV4cG9ydHMudGFrZW0gPSAoMCwgX3V0aWxzLmRlcHJlY2F0ZSkodGFrZS5tYXliZSwgZGVwcmVjYXRpb25XYXJuaW5nKCd0YWtlbScsICd0YWtlLm1heWJlJykpO1xuXG5mdW5jdGlvbiBwdXQoY2hhbm5lbCwgYWN0aW9uKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICgwLCBfdXRpbHMuY2hlY2spKGNoYW5uZWwsIF91dGlscy5pcy5ub3RVbmRlZiwgJ3B1dChjaGFubmVsLCBhY3Rpb24pOiBhcmd1bWVudCBjaGFubmVsIGlzIHVuZGVmaW5lZCcpO1xuICAgICgwLCBfdXRpbHMuY2hlY2spKGNoYW5uZWwsIF91dGlscy5pcy5jaGFubmVsLCAncHV0KGNoYW5uZWwsIGFjdGlvbik6IGFyZ3VtZW50ICcgKyBjaGFubmVsICsgJyBpcyBub3QgYSB2YWxpZCBjaGFubmVsJyk7XG4gICAgKDAsIF91dGlscy5jaGVjaykoYWN0aW9uLCBfdXRpbHMuaXMubm90VW5kZWYsICdwdXQoY2hhbm5lbCwgYWN0aW9uKTogYXJndW1lbnQgYWN0aW9uIGlzIHVuZGVmaW5lZCcpO1xuICB9IGVsc2Uge1xuICAgICgwLCBfdXRpbHMuY2hlY2spKGNoYW5uZWwsIF91dGlscy5pcy5ub3RVbmRlZiwgJ3B1dChhY3Rpb24pOiBhcmd1bWVudCBhY3Rpb24gaXMgdW5kZWZpbmVkJyk7XG4gICAgYWN0aW9uID0gY2hhbm5lbDtcbiAgICBjaGFubmVsID0gbnVsbDtcbiAgfVxuICByZXR1cm4gZWZmZWN0KFBVVCwgeyBjaGFubmVsOiBjaGFubmVsLCBhY3Rpb246IGFjdGlvbiB9KTtcbn1cblxucHV0LnJlc29sdmUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBlZmYgPSBwdXQuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICBlZmZbUFVUXS5yZXNvbHZlID0gdHJ1ZTtcbiAgcmV0dXJuIGVmZjtcbn07XG5cbnB1dC5zeW5jID0gKDAsIF91dGlscy5kZXByZWNhdGUpKHB1dC5yZXNvbHZlLCBkZXByZWNhdGlvbldhcm5pbmcoJ3B1dC5zeW5jJywgJ3B1dC5yZXNvbHZlJykpO1xuXG5mdW5jdGlvbiByYWNlKGVmZmVjdHMpIHtcbiAgcmV0dXJuIGVmZmVjdChSQUNFLCBlZmZlY3RzKTtcbn1cblxuZnVuY3Rpb24gZ2V0Rm5DYWxsRGVzYyhtZXRoLCBmbiwgYXJncykge1xuICAoMCwgX3V0aWxzLmNoZWNrKShmbiwgX3V0aWxzLmlzLm5vdFVuZGVmLCBtZXRoICsgJzogYXJndW1lbnQgZm4gaXMgdW5kZWZpbmVkJyk7XG5cbiAgdmFyIGNvbnRleHQgPSBudWxsO1xuICBpZiAoX3V0aWxzLmlzLmFycmF5KGZuKSkge1xuICAgIHZhciBfZm4gPSBmbjtcblxuICAgIHZhciBfZm4yID0gX3NsaWNlZFRvQXJyYXkoX2ZuLCAyKTtcblxuICAgIGNvbnRleHQgPSBfZm4yWzBdO1xuICAgIGZuID0gX2ZuMlsxXTtcbiAgfSBlbHNlIGlmIChmbi5mbikge1xuICAgIHZhciBfZm4zID0gZm47XG4gICAgY29udGV4dCA9IF9mbjMuY29udGV4dDtcbiAgICBmbiA9IF9mbjMuZm47XG4gIH1cbiAgKDAsIF91dGlscy5jaGVjaykoZm4sIF91dGlscy5pcy5mdW5jLCBtZXRoICsgJzogYXJndW1lbnQgJyArIGZuICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXG4gIHJldHVybiB7IGNvbnRleHQ6IGNvbnRleHQsIGZuOiBmbiwgYXJnczogYXJncyB9O1xufVxuXG5mdW5jdGlvbiBjYWxsKGZuKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdChDQUxMLCBnZXRGbkNhbGxEZXNjKCdjYWxsJywgZm4sIGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gYXBwbHkoY29udGV4dCwgZm4pIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xuXG4gIHJldHVybiBlZmZlY3QoQ0FMTCwgZ2V0Rm5DYWxsRGVzYygnYXBwbHknLCB7IGNvbnRleHQ6IGNvbnRleHQsIGZuOiBmbiB9LCBhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGNwcyhmbikge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHJldHVybiBlZmZlY3QoQ1BTLCBnZXRGbkNhbGxEZXNjKCdjcHMnLCBmbiwgYXJncykpO1xufVxuXG5mdW5jdGlvbiBmb3JrKGZuKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4zID4gMSA/IF9sZW4zIC0gMSA6IDApLCBfa2V5MyA9IDE7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhcmdzW19rZXkzIC0gMV0gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdChGT1JLLCBnZXRGbkNhbGxEZXNjKCdmb3JrJywgZm4sIGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gc3Bhd24oZm4pIHtcbiAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjQgPiAxID8gX2xlbjQgLSAxIDogMCksIF9rZXk0ID0gMTsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIGFyZ3NbX2tleTQgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gIH1cblxuICB2YXIgZWZmID0gZm9yay5hcHBseSh1bmRlZmluZWQsIFtmbl0uY29uY2F0KGFyZ3MpKTtcbiAgZWZmW0ZPUktdLmRldGFjaGVkID0gdHJ1ZTtcbiAgcmV0dXJuIGVmZjtcbn1cblxudmFyIGlzRm9ya2VkVGFzayA9IGZ1bmN0aW9uIGlzRm9ya2VkVGFzayh0YXNrKSB7XG4gIHJldHVybiB0YXNrW191dGlscy5UQVNLXTtcbn07XG5cbmZ1bmN0aW9uIGpvaW4odGFzaykge1xuICBpZiAoX3V0aWxzLmlzLmFycmF5KHRhc2spKSB7XG4gICAgcmV0dXJuIHRhc2subWFwKGpvaW4pO1xuICB9XG4gICgwLCBfdXRpbHMuY2hlY2spKHRhc2ssIF91dGlscy5pcy5ub3RVbmRlZiwgJ2pvaW4odGFzayk6IGFyZ3VtZW50IHRhc2sgaXMgdW5kZWZpbmVkJyk7XG4gIGlmICghaXNGb3JrZWRUYXNrKHRhc2spKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdqb2luKHRhc2spOiBhcmd1bWVudCAnICsgdGFzayArICcgaXMgbm90IGEgdmFsaWQgVGFzayBvYmplY3QgXFxuKEhJTlQ6IGlmIHlvdSBhcmUgZ2V0dGluZyB0aGlzIGVycm9ycyBpbiB0ZXN0cywgY29uc2lkZXIgdXNpbmcgY3JlYXRlTW9ja1Rhc2sgZnJvbSByZWR1eC1zYWdhL3V0aWxzKScpO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdChKT0lOLCB0YXNrKTtcbn1cblxuZnVuY3Rpb24gY2FuY2VsKHRhc2spIHtcbiAgKDAsIF91dGlscy5jaGVjaykodGFzaywgX3V0aWxzLmlzLm5vdFVuZGVmLCAnY2FuY2VsKHRhc2spOiBhcmd1bWVudCB0YXNrIGlzIHVuZGVmaW5lZCcpO1xuICBpZiAoIWlzRm9ya2VkVGFzayh0YXNrKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2FuY2VsKHRhc2spOiBhcmd1bWVudCAnICsgdGFzayArICcgaXMgbm90IGEgdmFsaWQgVGFzayBvYmplY3QgXFxuKEhJTlQ6IGlmIHlvdSBhcmUgZ2V0dGluZyB0aGlzIGVycm9ycyBpbiB0ZXN0cywgY29uc2lkZXIgdXNpbmcgY3JlYXRlTW9ja1Rhc2sgZnJvbSByZWR1eC1zYWdhL3V0aWxzKScpO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdChDQU5DRUwsIHRhc2spO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Qoc2VsZWN0b3IpIHtcbiAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjUgPiAxID8gX2xlbjUgLSAxIDogMCksIF9rZXk1ID0gMTsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgIGFyZ3NbX2tleTUgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gIH1cblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHNlbGVjdG9yID0gX3V0aWxzLmlkZW50O1xuICB9IGVsc2Uge1xuICAgICgwLCBfdXRpbHMuY2hlY2spKHNlbGVjdG9yLCBfdXRpbHMuaXMubm90VW5kZWYsICdzZWxlY3Qoc2VsZWN0b3IsWy4uLl0pOiBhcmd1bWVudCBzZWxlY3RvciBpcyB1bmRlZmluZWQnKTtcbiAgICAoMCwgX3V0aWxzLmNoZWNrKShzZWxlY3RvciwgX3V0aWxzLmlzLmZ1bmMsICdzZWxlY3Qoc2VsZWN0b3IsWy4uLl0pOiBhcmd1bWVudCAnICsgc2VsZWN0b3IgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgcmV0dXJuIGVmZmVjdChTRUxFQ1QsIHsgc2VsZWN0b3I6IHNlbGVjdG9yLCBhcmdzOiBhcmdzIH0pO1xufVxuXG4vKipcbiAgY2hhbm5lbChwYXR0ZXJuLCBbYnVmZmVyXSkgICAgPT4gY3JlYXRlcyBhbiBldmVudCBjaGFubmVsIGZvciBzdG9yZSBhY3Rpb25zXG4qKi9cbmZ1bmN0aW9uIGFjdGlvbkNoYW5uZWwocGF0dGVybiwgYnVmZmVyKSB7XG4gICgwLCBfdXRpbHMuY2hlY2spKHBhdHRlcm4sIF91dGlscy5pcy5ub3RVbmRlZiwgJ2FjdGlvbkNoYW5uZWwocGF0dGVybiwuLi4pOiBhcmd1bWVudCBwYXR0ZXJuIGlzIHVuZGVmaW5lZCcpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAoMCwgX3V0aWxzLmNoZWNrKShidWZmZXIsIF91dGlscy5pcy5ub3RVbmRlZiwgJ2FjdGlvbkNoYW5uZWwocGF0dGVybiwgYnVmZmVyKTogYXJndW1lbnQgYnVmZmVyIGlzIHVuZGVmaW5lZCcpO1xuICAgICgwLCBfdXRpbHMuY2hlY2spKGJ1ZmZlciwgX3V0aWxzLmlzLmJ1ZmZlciwgJ2FjdGlvbkNoYW5uZWwocGF0dGVybiwgYnVmZmVyKTogYXJndW1lbnQgJyArIGJ1ZmZlciArICcgaXMgbm90IGEgdmFsaWQgYnVmZmVyJyk7XG4gIH1cbiAgcmV0dXJuIGVmZmVjdChBQ1RJT05fQ0hBTk5FTCwgeyBwYXR0ZXJuOiBwYXR0ZXJuLCBidWZmZXI6IGJ1ZmZlciB9KTtcbn1cblxuZnVuY3Rpb24gY2FuY2VsbGVkKCkge1xuICByZXR1cm4gZWZmZWN0KENBTkNFTExFRCwge30pO1xufVxuXG5mdW5jdGlvbiBmbHVzaChjaGFubmVsKSB7XG4gICgwLCBfdXRpbHMuY2hlY2spKGNoYW5uZWwsIF91dGlscy5pcy5jaGFubmVsLCAnZmx1c2goY2hhbm5lbCk6IGFyZ3VtZW50ICcgKyBjaGFubmVsICsgJyBpcyBub3QgdmFsaWQgY2hhbm5lbCcpO1xuICByZXR1cm4gZWZmZWN0KEZMVVNILCBjaGFubmVsKTtcbn1cblxuZnVuY3Rpb24gdGFrZUV2ZXJ5KHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuNiA+IDIgPyBfbGVuNiAtIDIgOiAwKSwgX2tleTYgPSAyOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgYXJnc1tfa2V5NiAtIDJdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgfVxuXG4gIHJldHVybiBmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW19zYWdhSGVscGVycy50YWtlRXZlcnlIZWxwZXIsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gdGFrZUxhdGVzdChwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbjcgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjcgPiAyID8gX2xlbjcgLSAyIDogMCksIF9rZXk3ID0gMjsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgIGFyZ3NbX2tleTcgLSAyXSA9IGFyZ3VtZW50c1tfa2V5N107XG4gIH1cblxuICByZXR1cm4gZm9yay5hcHBseSh1bmRlZmluZWQsIFtfc2FnYUhlbHBlcnMudGFrZUxhdGVzdEhlbHBlciwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuXG5mdW5jdGlvbiB0aHJvdHRsZShtcywgcGF0dGVybiwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW44ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW44ID4gMyA/IF9sZW44IC0gMyA6IDApLCBfa2V5OCA9IDM7IF9rZXk4IDwgX2xlbjg7IF9rZXk4KyspIHtcbiAgICBhcmdzW19rZXk4IC0gM10gPSBhcmd1bWVudHNbX2tleThdO1xuICB9XG5cbiAgcmV0dXJuIGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbX3NhZ2FIZWxwZXJzLnRocm90dGxlSGVscGVyLCBtcywgcGF0dGVybiwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuXG52YXIgY3JlYXRlQXNFZmZlY3RUeXBlID0gZnVuY3Rpb24gY3JlYXRlQXNFZmZlY3RUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlZmZlY3QpIHtcbiAgICByZXR1cm4gZWZmZWN0ICYmIGVmZmVjdFtJT10gJiYgZWZmZWN0W3R5cGVdO1xuICB9O1xufTtcblxudmFyIGFzRWZmZWN0ID0gZXhwb3J0cy5hc0VmZmVjdCA9IHtcbiAgdGFrZTogY3JlYXRlQXNFZmZlY3RUeXBlKFRBS0UpLFxuICBwdXQ6IGNyZWF0ZUFzRWZmZWN0VHlwZShQVVQpLFxuICByYWNlOiBjcmVhdGVBc0VmZmVjdFR5cGUoUkFDRSksXG4gIGNhbGw6IGNyZWF0ZUFzRWZmZWN0VHlwZShDQUxMKSxcbiAgY3BzOiBjcmVhdGVBc0VmZmVjdFR5cGUoQ1BTKSxcbiAgZm9yazogY3JlYXRlQXNFZmZlY3RUeXBlKEZPUkspLFxuICBqb2luOiBjcmVhdGVBc0VmZmVjdFR5cGUoSk9JTiksXG4gIGNhbmNlbDogY3JlYXRlQXNFZmZlY3RUeXBlKENBTkNFTCksXG4gIHNlbGVjdDogY3JlYXRlQXNFZmZlY3RUeXBlKFNFTEVDVCksXG4gIGFjdGlvbkNoYW5uZWw6IGNyZWF0ZUFzRWZmZWN0VHlwZShBQ1RJT05fQ0hBTk5FTCksXG4gIGNhbmNlbGxlZDogY3JlYXRlQXNFZmZlY3RUeXBlKENBTkNFTExFRCksXG4gIGZsdXNoOiBjcmVhdGVBc0VmZmVjdFR5cGUoRkxVU0gpXG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudGhyb3R0bGUgPSBleHBvcnRzLnRha2VMYXRlc3QgPSBleHBvcnRzLnRha2VFdmVyeSA9IHVuZGVmaW5lZDtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG5leHBvcnRzLnRha2VFdmVyeUhlbHBlciA9IHRha2VFdmVyeUhlbHBlcjtcbmV4cG9ydHMudGFrZUxhdGVzdEhlbHBlciA9IHRha2VMYXRlc3RIZWxwZXI7XG5leHBvcnRzLnRocm90dGxlSGVscGVyID0gdGhyb3R0bGVIZWxwZXI7XG5cbnZhciBfY2hhbm5lbCA9IHJlcXVpcmUoJy4vY2hhbm5lbCcpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgX2lvID0gcmVxdWlyZSgnLi9pbycpO1xuXG52YXIgX2J1ZmZlcnMgPSByZXF1aXJlKCcuL2J1ZmZlcnMnKTtcblxudmFyIGRvbmUgPSB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcbnZhciBxRW5kID0ge307XG5cbmZ1bmN0aW9uIGZzbUl0ZXJhdG9yKGZzbSwgcTApIHtcbiAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdpdGVyYXRvcic7XG5cbiAgdmFyIHVwZGF0ZVN0YXRlID0gdm9pZCAwLFxuICAgICAgcU5leHQgPSBxMDtcblxuICBmdW5jdGlvbiBuZXh0KGFyZywgZXJyb3IpIHtcbiAgICBpZiAocU5leHQgPT09IHFFbmQpIHtcbiAgICAgIHJldHVybiBkb25lO1xuICAgIH1cblxuICAgIGlmIChlcnJvcikge1xuICAgICAgcU5leHQgPSBxRW5kO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZVN0YXRlICYmIHVwZGF0ZVN0YXRlKGFyZyk7XG5cbiAgICAgIHZhciBfZnNtJHFOZXh0ID0gZnNtW3FOZXh0XSgpLFxuICAgICAgICAgIF9mc20kcU5leHQyID0gX3NsaWNlZFRvQXJyYXkoX2ZzbSRxTmV4dCwgMyksXG4gICAgICAgICAgcSA9IF9mc20kcU5leHQyWzBdLFxuICAgICAgICAgIG91dHB1dCA9IF9mc20kcU5leHQyWzFdLFxuICAgICAgICAgIF91cGRhdGVTdGF0ZSA9IF9mc20kcU5leHQyWzJdO1xuXG4gICAgICBxTmV4dCA9IHE7XG4gICAgICB1cGRhdGVTdGF0ZSA9IF91cGRhdGVTdGF0ZTtcbiAgICAgIHJldHVybiBxTmV4dCA9PT0gcUVuZCA/IGRvbmUgOiBvdXRwdXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICgwLCBfdXRpbHMubWFrZUl0ZXJhdG9yKShuZXh0LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICByZXR1cm4gbmV4dChudWxsLCBlcnJvcik7XG4gIH0sIG5hbWUsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSB7XG4gIGlmIChfdXRpbHMuaXMuY2hhbm5lbChwYXR0ZXJuT3JDaGFubmVsKSkge1xuICAgIHJldHVybiAnY2hhbm5lbCc7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuT3JDaGFubmVsKSkge1xuICAgIHJldHVybiBTdHJpbmcocGF0dGVybk9yQ2hhbm5lbC5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICByZXR1cm4gU3RyaW5nKGVudHJ5KTtcbiAgICB9KSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFN0cmluZyhwYXR0ZXJuT3JDaGFubmVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0YWtlRXZlcnlIZWxwZXIocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHlUYWtlID0geyBkb25lOiBmYWxzZSwgdmFsdWU6ICgwLCBfaW8udGFrZSkocGF0dGVybk9yQ2hhbm5lbCkgfTtcbiAgdmFyIHlGb3JrID0gZnVuY3Rpb24geUZvcmsoYWMpIHtcbiAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IF9pby5mb3JrLmFwcGx5KHVuZGVmaW5lZCwgW3dvcmtlcl0uY29uY2F0KGFyZ3MsIFthY10pKSB9O1xuICB9O1xuXG4gIHZhciBhY3Rpb24gPSB2b2lkIDAsXG4gICAgICBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlUYWtlLCBzZXRBY3Rpb25dO1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbiA9PT0gX2NoYW5uZWwuRU5EID8gW3FFbmRdIDogWydxMScsIHlGb3JrKGFjdGlvbildO1xuICAgIH1cbiAgfSwgJ3ExJywgJ3Rha2VFdmVyeSgnICsgc2FmZU5hbWUocGF0dGVybk9yQ2hhbm5lbCkgKyAnLCAnICsgd29ya2VyLm5hbWUgKyAnKScpO1xufVxuXG5mdW5jdGlvbiB0YWtlTGF0ZXN0SGVscGVyKHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHZhciB5VGFrZSA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiAoMCwgX2lvLnRha2UpKHBhdHRlcm5PckNoYW5uZWwpIH07XG4gIHZhciB5Rm9yayA9IGZ1bmN0aW9uIHlGb3JrKGFjKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBfaW8uZm9yay5hcHBseSh1bmRlZmluZWQsIFt3b3JrZXJdLmNvbmNhdChhcmdzLCBbYWNdKSkgfTtcbiAgfTtcbiAgdmFyIHlDYW5jZWwgPSBmdW5jdGlvbiB5Q2FuY2VsKHRhc2spIHtcbiAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6ICgwLCBfaW8uY2FuY2VsKSh0YXNrKSB9O1xuICB9O1xuXG4gIHZhciB0YXNrID0gdm9pZCAwLFxuICAgICAgYWN0aW9uID0gdm9pZCAwO1xuICB2YXIgc2V0VGFzayA9IGZ1bmN0aW9uIHNldFRhc2sodCkge1xuICAgIHJldHVybiB0YXNrID0gdDtcbiAgfTtcbiAgdmFyIHNldEFjdGlvbiA9IGZ1bmN0aW9uIHNldEFjdGlvbihhYykge1xuICAgIHJldHVybiBhY3Rpb24gPSBhYztcbiAgfTtcblxuICByZXR1cm4gZnNtSXRlcmF0b3Ioe1xuICAgIHExOiBmdW5jdGlvbiBxMSgpIHtcbiAgICAgIHJldHVybiBbJ3EyJywgeVRha2UsIHNldEFjdGlvbl07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4gYWN0aW9uID09PSBfY2hhbm5lbC5FTkQgPyBbcUVuZF0gOiB0YXNrID8gWydxMycsIHlDYW5jZWwodGFzayldIDogWydxMScsIHlGb3JrKGFjdGlvbiksIHNldFRhc2tdO1xuICAgIH0sXG4gICAgcTM6IGZ1bmN0aW9uIHEzKCkge1xuICAgICAgcmV0dXJuIFsncTEnLCB5Rm9yayhhY3Rpb24pLCBzZXRUYXNrXTtcbiAgICB9XG4gIH0sICdxMScsICd0YWtlTGF0ZXN0KCcgKyBzYWZlTmFtZShwYXR0ZXJuT3JDaGFubmVsKSArICcsICcgKyB3b3JrZXIubmFtZSArICcpJyk7XG59XG5cbmZ1bmN0aW9uIHRocm90dGxlSGVscGVyKGRlbGF5TGVuZ3RoLCBwYXR0ZXJuLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjMgPiAzID8gX2xlbjMgLSAzIDogMCksIF9rZXkzID0gMzsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIGFyZ3NbX2tleTMgLSAzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cblxuICB2YXIgYWN0aW9uID0gdm9pZCAwLFxuICAgICAgY2hhbm5lbCA9IHZvaWQgMDtcblxuICB2YXIgeUFjdGlvbkNoYW5uZWwgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogKDAsIF9pby5hY3Rpb25DaGFubmVsKShwYXR0ZXJuLCBfYnVmZmVycy5idWZmZXJzLnNsaWRpbmcoMSkpIH07XG4gIHZhciB5VGFrZSA9IGZ1bmN0aW9uIHlUYWtlKCkge1xuICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogKDAsIF9pby50YWtlKShjaGFubmVsLCBwYXR0ZXJuKSB9O1xuICB9O1xuICB2YXIgeUZvcmsgPSBmdW5jdGlvbiB5Rm9yayhhYykge1xuICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogX2lvLmZvcmsuYXBwbHkodW5kZWZpbmVkLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpIH07XG4gIH07XG4gIHZhciB5RGVsYXkgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogKDAsIF9pby5jYWxsKShfdXRpbHMuZGVsYXksIGRlbGF5TGVuZ3RoKSB9O1xuXG4gIHZhciBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG4gIHZhciBzZXRDaGFubmVsID0gZnVuY3Rpb24gc2V0Q2hhbm5lbChjaCkge1xuICAgIHJldHVybiBjaGFubmVsID0gY2g7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlBY3Rpb25DaGFubmVsLCBzZXRDaGFubmVsXTtcbiAgICB9LFxuICAgIHEyOiBmdW5jdGlvbiBxMigpIHtcbiAgICAgIHJldHVybiBbJ3EzJywgeVRha2UoKSwgc2V0QWN0aW9uXTtcbiAgICB9LFxuICAgIHEzOiBmdW5jdGlvbiBxMygpIHtcbiAgICAgIHJldHVybiBhY3Rpb24gPT09IF9jaGFubmVsLkVORCA/IFtxRW5kXSA6IFsncTQnLCB5Rm9yayhhY3Rpb24pXTtcbiAgICB9LFxuICAgIHE0OiBmdW5jdGlvbiBxNCgpIHtcbiAgICAgIHJldHVybiBbJ3EyJywgeURlbGF5XTtcbiAgICB9XG4gIH0sICdxMScsICd0aHJvdHRsZSgnICsgc2FmZU5hbWUocGF0dGVybikgKyAnLCAnICsgd29ya2VyLm5hbWUgKyAnKScpO1xufVxuXG52YXIgZGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24gZGVwcmVjYXRpb25XYXJuaW5nKGhlbHBlck5hbWUpIHtcbiAgcmV0dXJuICdpbXBvcnQgJyArIGhlbHBlck5hbWUgKyAnIGZyb20gXFwncmVkdXgtc2FnYVxcJyBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm9yIG9mIGltcG9ydCAnICsgaGVscGVyTmFtZSArICcgZnJvbSBcXCdyZWR1eC1zYWdhL2VmZmVjdHNcXCcuXFxuVGhlIGxhdHRlciB3aWxsIG5vdCB3b3JrIHdpdGggeWllbGQqLCBhcyBoZWxwZXIgZWZmZWN0cyBhcmUgd3JhcHBlZCBhdXRvbWF0aWNhbGx5IGZvciB5b3UgaW4gZm9yayBlZmZlY3QuXFxuVGhlcmVmb3JlIHlpZWxkICcgKyBoZWxwZXJOYW1lICsgJyB3aWxsIHJldHVybiB0YXNrIGRlc2NyaXB0b3IgdG8geW91ciBzYWdhIGFuZCBleGVjdXRlIG5leHQgbGluZXMgb2YgY29kZS4nO1xufTtcbnZhciB0YWtlRXZlcnkgPSBleHBvcnRzLnRha2VFdmVyeSA9ICgwLCBfdXRpbHMuZGVwcmVjYXRlKSh0YWtlRXZlcnlIZWxwZXIsIGRlcHJlY2F0aW9uV2FybmluZygndGFrZUV2ZXJ5JykpO1xudmFyIHRha2VMYXRlc3QgPSBleHBvcnRzLnRha2VMYXRlc3QgPSAoMCwgX3V0aWxzLmRlcHJlY2F0ZSkodGFrZUxhdGVzdEhlbHBlciwgZGVwcmVjYXRpb25XYXJuaW5nKCd0YWtlTGF0ZXN0JykpO1xudmFyIHRocm90dGxlID0gZXhwb3J0cy50aHJvdHRsZSA9ICgwLCBfdXRpbHMuZGVwcmVjYXRlKSh0aHJvdHRsZUhlbHBlciwgZGVwcmVjYXRpb25XYXJuaW5nKCd0aHJvdHRsZScpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYXNhcCA9IGFzYXA7XG5leHBvcnRzLnN1c3BlbmQgPSBzdXNwZW5kO1xuZXhwb3J0cy5mbHVzaCA9IGZsdXNoO1xuXG52YXIgcXVldWUgPSBbXTtcbi8qKlxuICBWYXJpYWJsZSB0byBob2xkIGEgY291bnRpbmcgc2VtYXBob3JlXG4gIC0gSW5jcmVtZW50aW5nIGFkZHMgYSBsb2NrIGFuZCBwdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgc3VzcGVuZGVkYCBzdGF0ZSAoaWYgaXQncyBub3RcbiAgICBhbHJlYWR5IHN1c3BlbmRlZClcbiAgLSBEZWNyZW1lbnRpbmcgcmVsZWFzZXMgYSBsb2NrLiBaZXJvIGxvY2tzIHB1dHMgdGhlIHNjaGVkdWxlciBpbiBhIGByZWxlYXNlZGAgc3RhdGUuIFRoaXNcbiAgICB0cmlnZ2VycyBmbHVzaGluZyB0aGUgcXVldWVkIHRhc2tzLlxuKiovXG52YXIgc2VtYXBob3JlID0gMDtcblxuLyoqXG4gIEV4ZWN1dGVzIGEgdGFzayAnYXRvbWljYWxseScuIFRhc2tzIHNjaGVkdWxlZCBkdXJpbmcgdGhpcyBleGVjdXRpb24gd2lsbCBiZSBxdWV1ZWRcbiAgYW5kIGZsdXNoZWQgYWZ0ZXIgdGhpcyB0YXNrIGhhcyBmaW5pc2hlZCAoYXNzdW1pbmcgdGhlIHNjaGVkdWxlciBlbmR1cCBpbiBhIHJlbGVhc2VkXG4gIHN0YXRlKS5cbioqL1xuZnVuY3Rpb24gZXhlYyh0YXNrKSB7XG4gIHRyeSB7XG4gICAgc3VzcGVuZCgpO1xuICAgIHRhc2soKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBmbHVzaCgpO1xuICB9XG59XG5cbi8qKlxuICBFeGVjdXRlcyBvciBxdWV1ZXMgYSB0YXNrIGRlcGVuZGluZyBvbiB0aGUgc3RhdGUgb2YgdGhlIHNjaGVkdWxlciAoYHN1c3BlbmRlZGAgb3IgYHJlbGVhc2VkYClcbioqL1xuZnVuY3Rpb24gYXNhcCh0YXNrKSB7XG4gIGlmICghc2VtYXBob3JlKSB7XG4gICAgZXhlYyh0YXNrKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZS5wdXNoKHRhc2spO1xuICB9XG59XG5cbi8qKlxuICBQdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgc3VzcGVuZGVkYCBzdGF0ZS4gU2NoZWR1bGVkIHRhc2tzIHdpbGwgYmUgcXVldWVkIHVudGlsIHRoZVxuICBzY2hlZHVsZXIgaXMgcmVsZWFzZWQuXG4qKi9cbmZ1bmN0aW9uIHN1c3BlbmQoKSB7XG4gIHNlbWFwaG9yZSsrO1xufVxuXG4vKipcbiAgUmVsZWFzZXMgdGhlIGN1cnJlbnQgbG9jay4gRXhlY3V0ZXMgYWxsIHF1ZXVlZCB0YXNrcyBpZiB0aGUgc2NoZWR1bGVyIGlzIGluIHRoZSByZWxlYXNlZCBzdGF0ZS5cbioqL1xuZnVuY3Rpb24gZmx1c2goKSB7XG4gIHNlbWFwaG9yZS0tO1xuICBpZiAoIXNlbWFwaG9yZSAmJiBxdWV1ZS5sZW5ndGgpIHtcbiAgICBleGVjKHF1ZXVlLnNoaWZ0KCkpO1xuICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydHMuY2hlY2sgPSBjaGVjaztcbmV4cG9ydHMuaGFzT3duID0gaGFzT3duO1xuZXhwb3J0cy5yZW1vdmUgPSByZW1vdmU7XG5leHBvcnRzLmRlZmVycmVkID0gZGVmZXJyZWQ7XG5leHBvcnRzLmFycmF5T2ZEZWZmZXJlZCA9IGFycmF5T2ZEZWZmZXJlZDtcbmV4cG9ydHMuZGVsYXkgPSBkZWxheTtcbmV4cG9ydHMuY3JlYXRlTW9ja1Rhc2sgPSBjcmVhdGVNb2NrVGFzaztcbmV4cG9ydHMuYXV0b0luYyA9IGF1dG9JbmM7XG5leHBvcnRzLm1ha2VJdGVyYXRvciA9IG1ha2VJdGVyYXRvcjtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5kZXByZWNhdGUgPSBkZXByZWNhdGU7XG5leHBvcnRzLndyYXBTYWdhRGlzcGF0Y2ggPSB3cmFwU2FnYURpc3BhdGNoO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgc3ltID0gZXhwb3J0cy5zeW0gPSBmdW5jdGlvbiBzeW0oaWQpIHtcbiAgcmV0dXJuICdAQHJlZHV4LXNhZ2EvJyArIGlkO1xufTtcbnZhciBUQVNLID0gZXhwb3J0cy5UQVNLID0gc3ltKCdUQVNLJyk7XG52YXIgSEVMUEVSID0gZXhwb3J0cy5IRUxQRVIgPSBzeW0oJ0hFTFBFUicpO1xudmFyIE1BVENIID0gZXhwb3J0cy5NQVRDSCA9IHN5bSgnTUFUQ0gnKTtcbnZhciBDQU5DRUwgPSBleHBvcnRzLkNBTkNFTCA9IHN5bSgnY2FuY2VsUHJvbWlzZScpO1xudmFyIFNBR0FfQUNUSU9OID0gZXhwb3J0cy5TQUdBX0FDVElPTiA9IHN5bSgnU0FHQV9BQ1RJT04nKTtcbnZhciBrb25zdCA9IGV4cG9ydHMua29uc3QgPSBmdW5jdGlvbiBrb25zdCh2KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG59O1xudmFyIGtUcnVlID0gZXhwb3J0cy5rVHJ1ZSA9IGtvbnN0KHRydWUpO1xudmFyIGtGYWxzZSA9IGV4cG9ydHMua0ZhbHNlID0ga29uc3QoZmFsc2UpO1xudmFyIG5vb3AgPSBleHBvcnRzLm5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG52YXIgaWRlbnQgPSBleHBvcnRzLmlkZW50ID0gZnVuY3Rpb24gaWRlbnQodikge1xuICByZXR1cm4gdjtcbn07XG5cbnZhciBpc0RldiA9IGV4cG9ydHMuaXNEZXYgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JztcblxuZnVuY3Rpb24gY2hlY2sodmFsdWUsIHByZWRpY2F0ZSwgZXJyb3IpIHtcbiAgaWYgKCFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgbG9nKCdlcnJvcicsICd1bmNhdWdodCBhdCBjaGVjaycsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICB9XG59XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gaXMubm90VW5kZWYob2JqZWN0KSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpO1xufVxuXG52YXIgaXMgPSBleHBvcnRzLmlzID0ge1xuICB1bmRlZjogZnVuY3Rpb24gdW5kZWYodikge1xuICAgIHJldHVybiB2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZDtcbiAgfSxcbiAgbm90VW5kZWY6IGZ1bmN0aW9uIG5vdFVuZGVmKHYpIHtcbiAgICByZXR1cm4gdiAhPT0gbnVsbCAmJiB2ICE9PSB1bmRlZmluZWQ7XG4gIH0sXG4gIGZ1bmM6IGZ1bmN0aW9uIGZ1bmMoZikge1xuICAgIHJldHVybiB0eXBlb2YgZiA9PT0gJ2Z1bmN0aW9uJztcbiAgfSxcbiAgbnVtYmVyOiBmdW5jdGlvbiBudW1iZXIobikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PT0gJ251bWJlcic7XG4gIH0sXG4gIGFycmF5OiBBcnJheS5pc0FycmF5LFxuICBwcm9taXNlOiBmdW5jdGlvbiBwcm9taXNlKHApIHtcbiAgICByZXR1cm4gcCAmJiBpcy5mdW5jKHAudGhlbik7XG4gIH0sXG4gIGl0ZXJhdG9yOiBmdW5jdGlvbiBpdGVyYXRvcihpdCkge1xuICAgIHJldHVybiBpdCAmJiBpcy5mdW5jKGl0Lm5leHQpICYmIGlzLmZ1bmMoaXQudGhyb3cpO1xuICB9LFxuICB0YXNrOiBmdW5jdGlvbiB0YXNrKHQpIHtcbiAgICByZXR1cm4gdCAmJiB0W1RBU0tdO1xuICB9LFxuICBvYnNlcnZhYmxlOiBmdW5jdGlvbiBvYnNlcnZhYmxlKG9iKSB7XG4gICAgcmV0dXJuIG9iICYmIGlzLmZ1bmMob2Iuc3Vic2NyaWJlKTtcbiAgfSxcbiAgYnVmZmVyOiBmdW5jdGlvbiBidWZmZXIoYnVmKSB7XG4gICAgcmV0dXJuIGJ1ZiAmJiBpcy5mdW5jKGJ1Zi5pc0VtcHR5KSAmJiBpcy5mdW5jKGJ1Zi50YWtlKSAmJiBpcy5mdW5jKGJ1Zi5wdXQpO1xuICB9LFxuICBwYXR0ZXJuOiBmdW5jdGlvbiBwYXR0ZXJuKHBhdCkge1xuICAgIHJldHVybiBwYXQgJiYgKHR5cGVvZiBwYXQgPT09ICdzdHJpbmcnIHx8ICh0eXBlb2YgcGF0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXQpKSA9PT0gJ3N5bWJvbCcgfHwgaXMuZnVuYyhwYXQpIHx8IGlzLmFycmF5KHBhdCkpO1xuICB9LFxuICBjaGFubmVsOiBmdW5jdGlvbiBjaGFubmVsKGNoKSB7XG4gICAgcmV0dXJuIGNoICYmIGlzLmZ1bmMoY2gudGFrZSkgJiYgaXMuZnVuYyhjaC5jbG9zZSk7XG4gIH0sXG4gIGhlbHBlcjogZnVuY3Rpb24gaGVscGVyKGl0KSB7XG4gICAgcmV0dXJuIGl0ICYmIGl0W0hFTFBFUl07XG4gIH0sXG4gIHN0cmluZ2FibGVGdW5jOiBmdW5jdGlvbiBzdHJpbmdhYmxlRnVuYyhmKSB7XG4gICAgcmV0dXJuIGlzLmZ1bmMoZikgJiYgaGFzT3duKGYsICd0b1N0cmluZycpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZW1vdmUoYXJyYXksIGl0ZW0pIHtcbiAgdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcbiAgaWYgKGluZGV4ID49IDApIHtcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmVycmVkKCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHZhciBkZWYgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBkZWYucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgZGVmLnJlamVjdCA9IHJlamVjdDtcbiAgfSk7XG4gIGRlZi5wcm9taXNlID0gcHJvbWlzZTtcbiAgcmV0dXJuIGRlZjtcbn1cblxuZnVuY3Rpb24gYXJyYXlPZkRlZmZlcmVkKGxlbmd0aCkge1xuICB2YXIgYXJyID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBhcnIucHVzaChkZWZlcnJlZCgpKTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBkZWxheShtcykge1xuICB2YXIgdmFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuXG4gIHZhciB0aW1lb3V0SWQgPSB2b2lkIDA7XG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXNvbHZlKHZhbCk7XG4gICAgfSwgbXMpO1xuICB9KTtcblxuICBwcm9taXNlW0NBTkNFTF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICB9O1xuXG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNb2NrVGFzaygpIHtcbiAgdmFyIF9yZWY7XG5cbiAgdmFyIHJ1bm5pbmcgPSB0cnVlO1xuICB2YXIgX3Jlc3VsdCA9IHZvaWQgMCxcbiAgICAgIF9lcnJvciA9IHZvaWQgMDtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgVEFTSywgdHJ1ZSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCAnaXNSdW5uaW5nJywgZnVuY3Rpb24gaXNSdW5uaW5nKCkge1xuICAgIHJldHVybiBydW5uaW5nO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsICdyZXN1bHQnLCBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgcmV0dXJuIF9yZXN1bHQ7XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgJ2Vycm9yJywgZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgcmV0dXJuIF9lcnJvcjtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCAnc2V0UnVubmluZycsIGZ1bmN0aW9uIHNldFJ1bm5pbmcoYikge1xuICAgIHJldHVybiBydW5uaW5nID0gYjtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCAnc2V0UmVzdWx0JywgZnVuY3Rpb24gc2V0UmVzdWx0KHIpIHtcbiAgICByZXR1cm4gX3Jlc3VsdCA9IHI7XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgJ3NldEVycm9yJywgZnVuY3Rpb24gc2V0RXJyb3IoZSkge1xuICAgIHJldHVybiBfZXJyb3IgPSBlO1xuICB9KSwgX3JlZjtcbn1cblxuZnVuY3Rpb24gYXV0b0luYygpIHtcbiAgdmFyIHNlZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKytzZWVkO1xuICB9O1xufVxuXG52YXIgdWlkID0gZXhwb3J0cy51aWQgPSBhdXRvSW5jKCk7XG5cbnZhciBrVGhyb3cgPSBmdW5jdGlvbiBrVGhyb3coZXJyKSB7XG4gIHRocm93IGVycjtcbn07XG52YXIga1JldHVybiA9IGZ1bmN0aW9uIGtSZXR1cm4odmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiB0cnVlIH07XG59O1xuZnVuY3Rpb24gbWFrZUl0ZXJhdG9yKG5leHQpIHtcbiAgdmFyIHRocm8gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGtUaHJvdztcbiAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnO1xuICB2YXIgaXNIZWxwZXIgPSBhcmd1bWVudHNbM107XG5cbiAgdmFyIGl0ZXJhdG9yID0geyBuYW1lOiBuYW1lLCBuZXh0OiBuZXh0LCB0aHJvdzogdGhybywgcmV0dXJuOiBrUmV0dXJuIH07XG5cbiAgaWYgKGlzSGVscGVyKSB7XG4gICAgaXRlcmF0b3JbSEVMUEVSXSA9IHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICB9O1xuICB9XG4gIHJldHVybiBpdGVyYXRvcjtcbn1cblxuLyoqXG4gIFByaW50IGVycm9yIGluIGEgdXNlZnVsIHdheSB3aGV0aGVyIGluIGEgYnJvd3NlciBlbnZpcm9ubWVudFxuICAod2l0aCBleHBhbmRhYmxlIGVycm9yIHN0YWNrIHRyYWNlcyksIG9yIGluIGEgbm9kZS5qcyBlbnZpcm9ubWVudFxuICAodGV4dC1vbmx5IGxvZyBvdXRwdXQpXG4gKiovXG5mdW5jdGlvbiBsb2cobGV2ZWwsIG1lc3NhZ2UpIHtcbiAgdmFyIGVycm9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnJztcblxuICAvKmVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUqL1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmxvZygncmVkdXgtc2FnYSAnICsgbGV2ZWwgKyAnOiAnICsgbWVzc2FnZSArICdcXG4nICsgKGVycm9yICYmIGVycm9yLnN0YWNrIHx8IGVycm9yKSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZVtsZXZlbF0obWVzc2FnZSwgZXJyb3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZShmbiwgZGVwcmVjYXRpb25XYXJuaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzRGV2KSBsb2coJ3dhcm4nLCBkZXByZWNhdGlvbldhcm5pbmcpO1xuICAgIHJldHVybiBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbnZhciBpbnRlcm5hbEVyciA9IGV4cG9ydHMuaW50ZXJuYWxFcnIgPSBmdW5jdGlvbiBpbnRlcm5hbEVycihlcnIpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcignXFxuICByZWR1eC1zYWdhOiBFcnJvciBjaGVja2luZyBob29rcyBkZXRlY3RlZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuIFRoaXMgaXMgbGlrZWx5IGEgYnVnXFxuICBpbiByZWR1eC1zYWdhIGNvZGUgYW5kIG5vdCB5b3Vycy4gVGhhbmtzIGZvciByZXBvcnRpbmcgdGhpcyBpbiB0aGUgcHJvamVjdFxcJ3MgZ2l0aHViIHJlcG8uXFxuICBFcnJvcjogJyArIGVyciArICdcXG4nKTtcbn07XG5cbmZ1bmN0aW9uIHdyYXBTYWdhRGlzcGF0Y2goZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNhZ2FEaXNwYXRjaChhY3Rpb24pIHtcbiAgICB2YXIgd3JhcHBlZEFjdGlvbiA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY3Rpb24sIFNBR0FfQUNUSU9OLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgIHJldHVybiBkaXNwYXRjaCh3cmFwcGVkQWN0aW9uKTtcbiAgfTtcbn0iXX0=

(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
"use strict";

require("core-js/shim");

require("regenerator-runtime/runtime");

require("core-js/fn/regexp/escape");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"core-js/fn/regexp/escape":3,"core-js/shim":326,"regenerator-runtime/runtime":2}],2:[function(require,module,exports){
(function (global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(require,module,exports){
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;

},{"../../modules/_core":24,"../../modules/core.regexp.escape":129}],4:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],5:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

},{"./_cof":19}],6:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_hide":43,"./_wks":127}],7:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
    throw TypeError(name + ': incorrect invocation!');
  }return it;
};

},{}],8:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":52}],9:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';

var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];else delete O[to];
    to += inc;
    from += inc;
  }return O;
};

},{"./_to-absolute-index":112,"./_to-length":116,"./_to-object":117}],10:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';

var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"./_to-absolute-index":112,"./_to-length":116,"./_to-object":117}],11:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":40}],12:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    }return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":112,"./_to-iobject":115,"./_to-length":116}],13:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (; length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res; // map
        else if (res) switch (TYPE) {
            case 3:
              return true; // some
            case 5:
              return val; // find
            case 6:
              return index; // findIndex
            case 2:
              result.push(val); // filter
          } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_array-species-create":16,"./_ctx":26,"./_iobject":48,"./_to-length":116,"./_to-object":117}],14:[function(require,module,exports){
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var toLength = require('./_to-length');

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (; isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

},{"./_a-function":4,"./_iobject":48,"./_to-length":116,"./_to-object":117}],15:[function(require,module,exports){
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  }return C === undefined ? Array : C;
};

},{"./_is-array":50,"./_is-object":52,"./_wks":127}],16:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":15}],17:[function(require,module,exports){
'use strict';

var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  }return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function () /* args... */{
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":4,"./_invoke":47,"./_is-object":52}],18:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () {
  return arguments;
}()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) {/* empty */}
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
  // @@toStringTag case
  : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
  // builtinTag case
  : ARG ? cof(O)
  // ES3 arguments fallback
  : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":19,"./_wks":127}],19:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],20:[function(require,module,exports){
'use strict';

var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type
      that._i = create(null); // index
      that._f = undefined; // first entry
      that._l = undefined; // last entry
      that[SIZE] = 0; // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        }return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
      // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key, // <- key
        v: value, // <- value
        p: prev = that._l, // <- previous entry
        n: undefined, // <- next entry
        r: false // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    }return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind; // kind
      this._l = undefined; // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_an-instance":7,"./_ctx":26,"./_descriptors":30,"./_for-of":40,"./_iter-define":56,"./_iter-step":58,"./_meta":66,"./_object-create":71,"./_object-dp":72,"./_redefine-all":91,"./_set-species":98,"./_validate-collection":124}],21:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof');
var from = require('./_array-from-iterable');
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};

},{"./_array-from-iterable":11,"./_classof":18}],22:[function(require,module,exports){
'use strict';

var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type
      that._i = id++; // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_an-instance":7,"./_an-object":8,"./_array-methods":13,"./_for-of":40,"./_has":42,"./_is-object":52,"./_meta":66,"./_redefine-all":91,"./_validate-collection":124}],23:[function(require,module,exports){
'use strict';

var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY, KEY == 'delete' ? function (a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'has' ? function has(a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'get' ? function get(a) {
      return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'add' ? function add(a) {
      fn.call(this, a === 0 ? 0 : a);return this;
    } : function set(a, b) {
      fn.call(this, a === 0 ? 0 : a, b);return this;
    });
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () {
      instance.has(1);
    });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) {
      new C(iter);
    }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_an-instance":7,"./_export":34,"./_fails":36,"./_for-of":40,"./_global":41,"./_inherit-if-required":46,"./_is-object":52,"./_iter-detect":57,"./_meta":66,"./_redefine":92,"./_redefine-all":91,"./_set-to-string-tag":99}],24:[function(require,module,exports){
var core = module.exports = { version: '2.5.7' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],25:[function(require,module,exports){
'use strict';

var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
};

},{"./_object-dp":72,"./_property-desc":90}],26:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1:
      return function (a) {
        return fn.call(that, a);
      };
    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };
    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }
  return function () /* ...args */{
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":4}],27:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

var fails = require('./_fails');
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
}) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

},{"./_fails":36}],28:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"./_an-object":8,"./_to-primitive":118}],29:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],30:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () {
      return 7;
    } }).a != 7;
});

},{"./_fails":36}],31:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":41,"./_is-object":52}],32:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

},{}],33:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  }return result;
};

},{"./_object-gops":78,"./_object-keys":81,"./_object-pie":82}],34:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1; // forced
$export.G = 2; // global
$export.S = 4; // static
$export.P = 8; // proto
$export.B = 16; // bind
$export.W = 32; // wrap
$export.U = 64; // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":24,"./_ctx":26,"./_global":41,"./_hide":43,"./_redefine":92}],35:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) {/* empty */}
  }return true;
};

},{"./_wks":127}],36:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],37:[function(require,module,exports){
'use strict';

var hide = require('./_hide');
var redefine = require('./_redefine');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (fails(function () {
    var O = {};
    O[SYMBOL] = function () {
      return 7;
    };
    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
    // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
    // 21.2.5.11 RegExp.prototype[@@split](string, limit)
    ? function (string, arg) {
      return rxfn.call(string, this, arg);
    }
    // 21.2.5.6 RegExp.prototype[@@match](string)
    // 21.2.5.9 RegExp.prototype[@@search](string)
    : function (string) {
      return rxfn.call(string, this);
    });
  }
};

},{"./_defined":29,"./_fails":36,"./_hide":43,"./_redefine":92,"./_wks":127}],38:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags

var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":8}],39:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

var isArray = require('./_is-array');
var isObject = require('./_is-object');
var toLength = require('./_to-length');
var ctx = require('./_ctx');
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

},{"./_ctx":26,"./_is-array":50,"./_is-object":52,"./_to-length":116,"./_wks":127}],40:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () {
    return iterable;
  } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":8,"./_ctx":26,"./_is-array-iter":49,"./_iter-call":54,"./_to-length":116,"./core.get-iterator-method":128}],41:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
// eslint-disable-next-line no-new-func
: Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],42:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],43:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":30,"./_object-dp":72,"./_property-desc":90}],44:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":41}],45:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () {
      return 7;
    } }).a != 7;
});

},{"./_descriptors":30,"./_dom-create":31,"./_fails":36}],46:[function(require,module,exports){
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  }return that;
};

},{"./_is-object":52,"./_set-proto":97}],47:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
                  var un = that === undefined;
                  switch (args.length) {
                                    case 0:
                                                      return un ? fn() : fn.call(that);
                                    case 1:
                                                      return un ? fn(args[0]) : fn.call(that, args[0]);
                                    case 2:
                                                      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
                                    case 3:
                                                      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
                                    case 4:
                                                      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
                  }return fn.apply(that, args);
};

},{}],48:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":19}],49:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":59,"./_wks":127}],50:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":19}],51:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":52}],52:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],53:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_cof":19,"./_is-object":52,"./_wks":127}],54:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":8}],55:[function(require,module,exports){
'use strict';

var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () {
  return this;
});

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":43,"./_object-create":71,"./_property-desc":90,"./_set-to-string-tag":99,"./_wks":127}],56:[function(require,module,exports){
'use strict';

var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () {
  return this;
};

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS:
        return function keys() {
          return new Constructor(this, kind);
        };
      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }return function entries() {
      return new Constructor(this, kind);
    };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() {
      return $native.call(this);
    };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":34,"./_hide":43,"./_iter-create":55,"./_iterators":59,"./_library":60,"./_object-gpo":79,"./_redefine":92,"./_set-to-string-tag":99,"./_wks":127}],57:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () {
    SAFE_CLOSING = true;
  };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () {
    throw 2;
  });
} catch (e) {/* empty */}

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () {
      return { done: safe = true };
    };
    arr[ITERATOR] = function () {
      return iter;
    };
    exec(arr);
  } catch (e) {/* empty */}
  return safe;
};

},{"./_wks":127}],58:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],59:[function(require,module,exports){
module.exports = {};

},{}],60:[function(require,module,exports){
module.exports = false;

},{}],61:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = !$expm1
// Old FF bug
|| $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
// Tor Browser bug
|| $expm1(-2e-17) != -2e-17 ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],62:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var sign = require('./_math-sign');
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"./_math-sign":65}],63:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],64:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (arguments.length === 0
  // eslint-disable-next-line no-self-compare
  || x != x
  // eslint-disable-next-line no-self-compare
  || inLow != inLow
  // eslint-disable-next-line no-self-compare
  || inHigh != inHigh
  // eslint-disable-next-line no-self-compare
  || outLow != outLow
  // eslint-disable-next-line no-self-compare
  || outHigh != outHigh) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};

},{}],65:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],66:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
      i: 'O' + ++id, // object ID
      w: {} // weak collections IDs
    } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
    // return object ID
  }return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
    // return hash weak collections IDs
  }return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":36,"./_has":42,"./_is-object":52,"./_object-dp":72,"./_uid":122}],67:[function(require,module,exports){
var Map = require('./es6.map');
var $export = require('./_export');
var shared = require('./_shared')('metadata');
var store = shared.store || (shared.store = new (require('./es6.weak-map'))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  }return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) {
    keys.push(key);
  });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};

},{"./_export":34,"./_shared":101,"./es6.map":159,"./es6.weak-map":265}],68:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();else last = undefined;
        throw e;
      }
    }last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
    // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
    // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    }last = task;
  };
};

},{"./_cof":19,"./_global":41,"./_task":111}],69:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)

var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":4}],70:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)

var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) {
    B[k] = k;
  });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) {
  // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  }return T;
} : $assign;

},{"./_fails":36,"./_iobject":48,"./_object-gops":78,"./_object-keys":81,"./_object-pie":82,"./_to-object":117}],71:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () {/* empty */};
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":8,"./_dom-create":31,"./_enum-bug-keys":32,"./_html":44,"./_object-dps":73,"./_shared-key":100}],72:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) {/* empty */}
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":8,"./_descriptors":30,"./_ie8-dom-define":45,"./_to-primitive":118}],73:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":8,"./_descriptors":30,"./_object-dp":72,"./_object-keys":81}],74:[function(require,module,exports){
'use strict';
// Forced replacement prototype accessors methods

module.exports = require('./_library') || !require('./_fails')(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () {/* empty */});
  delete require('./_global')[K];
});

},{"./_fails":36,"./_global":41,"./_library":60}],75:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) {/* empty */}
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":30,"./_has":42,"./_ie8-dom-define":45,"./_object-pie":82,"./_property-desc":90,"./_to-iobject":115,"./_to-primitive":118}],76:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":77,"./_to-iobject":115}],77:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":32,"./_object-keys-internal":80}],78:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],79:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  }return O instanceof Object ? ObjectProto : null;
};

},{"./_has":42,"./_shared-key":100,"./_to-object":117}],80:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":12,"./_has":42,"./_shared-key":100,"./_to-iobject":115}],81:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":32,"./_object-keys-internal":80}],82:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],83:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () {
    fn(1);
  }), 'Object', exp);
};

},{"./_core":24,"./_export":34,"./_fails":36}],84:[function(require,module,exports){
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    }return result;
  };
};

},{"./_object-keys":81,"./_object-pie":82,"./_to-iobject":115}],85:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN = require('./_object-gopn');
var gOPS = require('./_object-gops');
var anObject = require('./_an-object');
var Reflect = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"./_an-object":8,"./_global":41,"./_object-gopn":77,"./_object-gops":78}],86:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat;
var $trim = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"./_global":41,"./_string-trim":109,"./_string-ws":110}],87:[function(require,module,exports){
var $parseInt = require('./_global').parseInt;
var $trim = require('./_string-trim').trim;
var ws = require('./_string-ws');
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"./_global":41,"./_string-trim":109,"./_string-ws":110}],88:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],89:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":8,"./_is-object":52,"./_new-promise-capability":69}],90:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],91:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":92}],92:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_core":24,"./_global":41,"./_has":42,"./_hide":43,"./_uid":122}],93:[function(require,module,exports){
module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};

},{}],94:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],95:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/

var $export = require('./_export');
var aFunction = require('./_a-function');
var ctx = require('./_ctx');
var forOf = require('./_for-of');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
      var mapFn = arguments[1];
      var mapping, A, n, cb;
      aFunction(this);
      mapping = mapFn !== undefined;
      if (mapping) aFunction(mapFn);
      if (source == undefined) return new this();
      A = [];
      if (mapping) {
        n = 0;
        cb = ctx(mapFn, arguments[2], 2);
        forOf(source, false, function (nextItem) {
          A.push(cb(nextItem, n++));
        });
      } else {
        forOf(source, false, A.push, A);
      }
      return new this(A);
    } });
};

},{"./_a-function":4,"./_ctx":26,"./_export":34,"./_for-of":40}],96:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/

var $export = require('./_export');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
      var length = arguments.length;
      var A = new Array(length);
      while (length--) A[length] = arguments[length];
      return new this(A);
    } });
};

},{"./_export":34}],97:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
  function (test, buggy, set) {
    try {
      set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
      set(test, []);
      buggy = !(test instanceof Array);
    } catch (e) {
      buggy = true;
    }
    return function setPrototypeOf(O, proto) {
      check(O, proto);
      if (buggy) O.__proto__ = proto;else set(O, proto);
      return O;
    };
  }({}, false) : undefined),
  check: check
};

},{"./_an-object":8,"./_ctx":26,"./_is-object":52,"./_object-gopd":75}],98:[function(require,module,exports){
'use strict';

var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () {
      return this;
    }
  });
};

},{"./_descriptors":30,"./_global":41,"./_object-dp":72,"./_wks":127}],99:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":42,"./_object-dp":72,"./_wks":127}],100:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":101,"./_uid":122}],101:[function(require,module,exports){
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":24,"./_global":41,"./_library":60}],102:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":4,"./_an-object":8,"./_wks":127}],103:[function(require,module,exports){
'use strict';

var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () {/* empty */}, 1) : method.call(null);
  });
};

},{"./_fails":36}],104:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":29,"./_to-integer":114}],105:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_defined":29,"./_is-regexp":53}],106:[function(require,module,exports){
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"./_defined":29,"./_export":34,"./_fails":36}],107:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length');
var repeat = require('./_string-repeat');
var defined = require('./_defined');

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":29,"./_string-repeat":108,"./_to-length":116}],108:[function(require,module,exports){
'use strict';

var toInteger = require('./_to-integer');
var defined = require('./_defined');

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"./_defined":29,"./_to-integer":114}],109:[function(require,module,exports){
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"./_defined":29,"./_export":34,"./_fails":36,"./_string-ws":110}],110:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],111:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
    // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
    // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
    // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
    // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":19,"./_ctx":26,"./_dom-create":31,"./_global":41,"./_html":44,"./_invoke":47}],112:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":114}],113:[function(require,module,exports){
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"./_to-integer":114,"./_to-length":116}],114:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],115:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":29,"./_iobject":48}],116:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":114}],117:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":29}],118:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":52}],119:[function(require,module,exports){
'use strict';

if (require('./_descriptors')) {
  var LIBRARY = require('./_library');
  var global = require('./_global');
  var fails = require('./_fails');
  var $export = require('./_export');
  var $typed = require('./_typed');
  var $buffer = require('./_typed-buffer');
  var ctx = require('./_ctx');
  var anInstance = require('./_an-instance');
  var propertyDesc = require('./_property-desc');
  var hide = require('./_hide');
  var redefineAll = require('./_redefine-all');
  var toInteger = require('./_to-integer');
  var toLength = require('./_to-length');
  var toIndex = require('./_to-index');
  var toAbsoluteIndex = require('./_to-absolute-index');
  var toPrimitive = require('./_to-primitive');
  var has = require('./_has');
  var classof = require('./_classof');
  var isObject = require('./_is-object');
  var toObject = require('./_to-object');
  var isArrayIter = require('./_is-array-iter');
  var create = require('./_object-create');
  var getPrototypeOf = require('./_object-gpo');
  var gOPN = require('./_object-gopn').f;
  var getIterFn = require('./core.get-iterator-method');
  var uid = require('./_uid');
  var wks = require('./_wks');
  var createArrayMethod = require('./_array-methods');
  var createArrayIncludes = require('./_array-includes');
  var speciesConstructor = require('./_species-constructor');
  var ArrayIterators = require('./es6.array.iterator');
  var Iterators = require('./_iterators');
  var $iterDetect = require('./_iter-detect');
  var setSpecies = require('./_set-species');
  var arrayFill = require('./_array-fill');
  var arrayCopyWithin = require('./_array-copy-within');
  var $DP = require('./_object-dp');
  var $GOPD = require('./_object-gopd');
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    }return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () {
        return this._d[internal];
      } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      }O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of() /* ...items */{
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
    arrayToLocaleString.call(new Uint8Array(1));
  });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) {
      // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) {
      // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) {
      // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) {
      // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) {
      // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      }return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target) && target[TYPED_ARRAY] && typeof key != 'symbol' && key in target && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set')
    // TODO: add validation descriptor w/o calling accessors
    && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
      target[key] = desc.value;
      return target;
    }return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () {
    arrayToString.call({});
  })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () {/* noop */},
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () {
      return this[TYPED_ARRAY];
    }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () {
          return NAME;
        }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () {
      Base.of.call(TypedArray, 1);
    }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () {/* empty */};

},{"./_an-instance":7,"./_array-copy-within":9,"./_array-fill":10,"./_array-includes":12,"./_array-methods":13,"./_classof":18,"./_ctx":26,"./_descriptors":30,"./_export":34,"./_fails":36,"./_global":41,"./_has":42,"./_hide":43,"./_is-array-iter":49,"./_is-object":52,"./_iter-detect":57,"./_iterators":59,"./_library":60,"./_object-create":71,"./_object-dp":72,"./_object-gopd":75,"./_object-gopn":77,"./_object-gpo":79,"./_property-desc":90,"./_redefine-all":91,"./_set-species":98,"./_species-constructor":102,"./_to-absolute-index":112,"./_to-index":113,"./_to-integer":114,"./_to-length":116,"./_to-object":117,"./_to-primitive":118,"./_typed":121,"./_typed-buffer":120,"./_uid":122,"./_wks":127,"./core.get-iterator-method":128,"./es6.array.iterator":140}],120:[function(require,module,exports){
'use strict';

var global = require('./_global');
var DESCRIPTORS = require('./_descriptors');
var LIBRARY = require('./_library');
var $typed = require('./_typed');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var fails = require('./_fails');
var anInstance = require('./_an-instance');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var toIndex = require('./_to-index');
var gOPN = require('./_object-gopn').f;
var dP = require('./_object-dp').f;
var arrayFill = require('./_array-fill');
var setToStringTag = require('./_set-to-string-tag');
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  }return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () {
      return this[internal];
    } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"./_an-instance":7,"./_array-fill":10,"./_descriptors":30,"./_fails":36,"./_global":41,"./_hide":43,"./_library":60,"./_object-dp":72,"./_object-gopn":77,"./_redefine-all":91,"./_set-to-string-tag":99,"./_to-index":113,"./_to-integer":114,"./_to-length":116,"./_typed":121}],121:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var uid = require('./_uid');
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"./_global":41,"./_hide":43,"./_uid":122}],122:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],123:[function(require,module,exports){
var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":41}],124:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":52}],125:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":24,"./_global":41,"./_library":60,"./_object-dp":72,"./_wks-ext":126}],126:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":127}],127:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":41,"./_shared":101,"./_uid":122}],128:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
};

},{"./_classof":18,"./_core":24,"./_iterators":59,"./_wks":127}],129:[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export');
var $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) {
    return $re(it);
  } });

},{"./_export":34,"./_replacer":93}],130:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });

require('./_add-to-unscopables')('copyWithin');

},{"./_add-to-unscopables":6,"./_array-copy-within":9,"./_export":34}],131:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $every = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":13,"./_export":34,"./_strict-method":103}],132:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { fill: require('./_array-fill') });

require('./_add-to-unscopables')('fill');

},{"./_add-to-unscopables":6,"./_array-fill":10,"./_export":34}],133:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":13,"./_export":34,"./_strict-method":103}],134:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":6,"./_array-methods":13,"./_export":34}],135:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":6,"./_array-methods":13,"./_export":34}],136:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $forEach = require('./_array-methods')(0);
var STRICT = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":13,"./_export":34,"./_strict-method":103}],137:[function(require,module,exports){
'use strict';

var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) {
  Array.from(iter);
}), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":25,"./_ctx":26,"./_export":34,"./_is-array-iter":49,"./_iter-call":54,"./_iter-detect":57,"./_to-length":116,"./_to-object":117,"./core.get-iterator-method":128}],138:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $indexOf = require('./_array-includes')(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
    // convert -0 to +0
    ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"./_array-includes":12,"./_export":34,"./_strict-method":103}],139:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', { isArray: require('./_is-array') });

},{"./_export":34,"./_is-array":50}],140:[function(require,module,exports){
'use strict';

var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0; // next index
  this._k = kind; // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":6,"./_iter-define":56,"./_iter-step":58,"./_iterators":59,"./_to-iobject":115}],141:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)

var $export = require('./_export');
var toIObject = require('./_to-iobject');
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

},{"./_export":34,"./_iobject":48,"./_strict-method":103,"./_to-iobject":115}],142:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (; index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

},{"./_export":34,"./_strict-method":103,"./_to-integer":114,"./_to-iobject":115,"./_to-length":116}],143:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $map = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":13,"./_export":34,"./_strict-method":103}],144:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() {/* empty */}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of() /* ...args */{
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_create-property":25,"./_export":34,"./_fails":36}],145:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

},{"./_array-reduce":14,"./_export":34,"./_strict-method":103}],146:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

},{"./_array-reduce":14,"./_export":34,"./_strict-method":103}],147:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var html = require('./_html');
var cof = require('./_cof');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
    return cloned;
  }
});

},{"./_cof":19,"./_export":34,"./_fails":36,"./_html":44,"./_to-absolute-index":112,"./_to-length":116}],148:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $some = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":13,"./_export":34,"./_strict-method":103}],149:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"./_a-function":4,"./_export":34,"./_fails":36,"./_strict-method":103,"./_to-object":117}],150:[function(require,module,exports){
require('./_set-species')('Array');

},{"./_set-species":98}],151:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', { now: function () {
    return new Date().getTime();
  } });

},{"./_export":34}],152:[function(require,module,exports){
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export');
var toISOString = require('./_date-to-iso-string');

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

},{"./_date-to-iso-string":27,"./_export":34}],153:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function () {
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({ toISOString: function () {
      return 1;
    } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"./_export":34,"./_fails":36,"./_to-object":117,"./_to-primitive":118}],154:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

},{"./_date-to-primitive":28,"./_hide":43,"./_wks":127}],155:[function(require,module,exports){
var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  require('./_redefine')(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

},{"./_redefine":92}],156:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', { bind: require('./_bind') });

},{"./_bind":17,"./_export":34}],157:[function(require,module,exports){
'use strict';

var isObject = require('./_is-object');
var getPrototypeOf = require('./_object-gpo');
var HAS_INSTANCE = require('./_wks')('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
    if (typeof this != 'function' || !isObject(O)) return false;
    if (!isObject(this.prototype)) return O instanceof this;
    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
    while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
    return false;
  } });

},{"./_is-object":52,"./_object-dp":72,"./_object-gpo":79,"./_wks":127}],158:[function(require,module,exports){
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"./_descriptors":30,"./_object-dp":72}],159:[function(require,module,exports){
'use strict';

var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection":23,"./_collection-strong":20,"./_validate-collection":124}],160:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
// V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
&& Math.floor($acosh(Number.MAX_VALUE)) == 710
// Tor Browser bug: Math.acosh(Infinity) -> NaN
&& $acosh(Infinity) == Infinity), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":34,"./_math-log1p":63}],161:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"./_export":34}],162:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"./_export":34}],163:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export');
var sign = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"./_export":34,"./_math-sign":65}],164:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"./_export":34}],165:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"./_export":34}],166:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":34,"./_math-expm1":61}],167:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export = require('./_export');

$export($export.S, 'Math', { fround: require('./_math-fround') });

},{"./_export":34,"./_math-fround":62}],168:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export');
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) {
    // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"./_export":34}],169:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"./_export":34,"./_fails":36}],170:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"./_export":34}],171:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":34,"./_math-log1p":63}],172:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"./_export":34}],173:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', { sign: require('./_math-sign') });

},{"./_export":34,"./_math-sign":65}],174:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":34,"./_fails":36,"./_math-expm1":61}],175:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"./_export":34,"./_math-expm1":61}],176:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"./_export":34}],177:[function(require,module,exports){
'use strict';

var global = require('./_global');
var has = require('./_has');
var cof = require('./_cof');
var inheritIfRequired = require('./_inherit-if-required');
var toPrimitive = require('./_to-primitive');
var fails = require('./_fails');
var gOPN = require('./_object-gopn').f;
var gOPD = require('./_object-gopd').f;
var dP = require('./_object-dp').f;
var $trim = require('./_string-trim').trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66:case 98:
          radix = 2;maxCode = 49;break; // fast equal /^0b[01]+$/i
        case 79:case 111:
          radix = 8;maxCode = 55;break; // fast equal /^0o[0-7]+$/i
        default:
          return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      }return parseInt(digits, radix);
    }
  }return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
    // check on 1..constructor(foo) case
    && (BROKEN_COF ? fails(function () {
      proto.valueOf.call(that);
    }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = require('./_descriptors') ? gOPN(Base) : (
  // ES3:
  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
  // ES6 (in case, if modules with ES6 Number statics required before):
  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}

},{"./_cof":19,"./_descriptors":30,"./_fails":36,"./_global":41,"./_has":42,"./_inherit-if-required":46,"./_object-create":71,"./_object-dp":72,"./_object-gopd":75,"./_object-gopn":77,"./_redefine":92,"./_string-trim":109,"./_to-primitive":118}],178:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"./_export":34}],179:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export = require('./_export');
var _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"./_export":34,"./_global":41}],180:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":34,"./_is-integer":51}],181:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"./_export":34}],182:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"./_export":34,"./_is-integer":51}],183:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"./_export":34}],184:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"./_export":34}],185:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"./_export":34,"./_parse-float":86}],186:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"./_export":34,"./_parse-int":87}],187:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toInteger = require('./_to-integer');
var aNumberValue = require('./_a-number-value');
var repeat = require('./_string-repeat');
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = c % n * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  }return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  }return n;
};

$export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !require('./_fails')(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    }return m;
  }
});

},{"./_a-number-value":5,"./_export":34,"./_fails":36,"./_string-repeat":108,"./_to-integer":114}],188:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $fails = require('./_fails');
var aNumberValue = require('./_a-number-value');
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

},{"./_a-number-value":5,"./_export":34,"./_fails":36}],189:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":34,"./_object-assign":70}],190:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":34,"./_object-create":71}],191:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });

},{"./_descriptors":30,"./_export":34,"./_object-dps":73}],192:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_descriptors":30,"./_export":34,"./_object-dp":72}],193:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"./_is-object":52,"./_meta":66,"./_object-sap":83}],194:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_object-gopd":75,"./_object-sap":83,"./_to-iobject":115}],195:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-gopn-ext":76,"./_object-sap":83}],196:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_object-gpo":79,"./_object-sap":83,"./_to-object":117}],197:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"./_is-object":52,"./_object-sap":83}],198:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"./_is-object":52,"./_object-sap":83}],199:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"./_is-object":52,"./_object-sap":83}],200:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', { is: require('./_same-value') });

},{"./_export":34,"./_same-value":94}],201:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_object-keys":81,"./_object-sap":83,"./_to-object":117}],202:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"./_is-object":52,"./_meta":66,"./_object-sap":83}],203:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"./_is-object":52,"./_meta":66,"./_object-sap":83}],204:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":34,"./_set-proto":97}],205:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()

var classof = require('./_classof');
var test = {};
test[require('./_wks')('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  require('./_redefine')(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"./_classof":18,"./_redefine":92,"./_wks":127}],206:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });

},{"./_export":34,"./_parse-float":86}],207:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });

},{"./_export":34,"./_parse-int":87}],208:[function(require,module,exports){
'use strict';

var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () {/* empty */};
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise
    // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // we can't detect it synchronously, so just check versions
    && v8.indexOf('6.6') !== 0 && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) {/* empty */}
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    }promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = []; // <- awaiting reactions
    this._a = undefined; // <- checked in isUnhandled reactions
    this._s = 0; // <- state
    this._d = false; // <- done
    this._v = undefined; // <- value
    this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false; // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":4,"./_an-instance":7,"./_classof":18,"./_core":24,"./_ctx":26,"./_export":34,"./_for-of":40,"./_global":41,"./_is-object":52,"./_iter-detect":57,"./_library":60,"./_microtask":68,"./_new-promise-capability":69,"./_perform":88,"./_promise-resolve":89,"./_redefine-all":91,"./_set-species":98,"./_set-to-string-tag":99,"./_species-constructor":102,"./_task":111,"./_user-agent":123,"./_wks":127}],209:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function () {
  rApply(function () {/* empty */});
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"./_a-function":4,"./_an-object":8,"./_export":34,"./_fails":36,"./_global":41}],210:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() {/* empty */}
  return !(rConstruct(function () {/* empty */}, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () {/* empty */});
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0:
          return new Target();
        case 1:
          return new Target(args[0]);
        case 2:
          return new Target(args[0], args[1]);
        case 3:
          return new Target(args[0], args[1], args[2]);
        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"./_a-function":4,"./_an-object":8,"./_bind":17,"./_export":34,"./_fails":36,"./_global":41,"./_is-object":52,"./_object-create":71}],211:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":8,"./_export":34,"./_fails":36,"./_object-dp":72,"./_to-primitive":118}],212:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = require('./_export');
var gOPD = require('./_object-gopd').f;
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"./_an-object":8,"./_export":34,"./_object-gopd":75}],213:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)

var $export = require('./_export');
var anObject = require('./_an-object');
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0; // next index
  var keys = this._k = []; // keys
  var key;
  for (key in iterated) keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

},{"./_an-object":8,"./_export":34,"./_iter-create":55}],214:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = require('./_object-gopd');
var $export = require('./_export');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"./_an-object":8,"./_export":34,"./_object-gopd":75}],215:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = require('./_export');
var getProto = require('./_object-gpo');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"./_an-object":8,"./_export":34,"./_object-gpo":79}],216:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var isObject = require('./_is-object');
var anObject = require('./_an-object');

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"./_an-object":8,"./_export":34,"./_has":42,"./_is-object":52,"./_object-gopd":75,"./_object-gpo":79}],217:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"./_export":34}],218:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"./_an-object":8,"./_export":34}],219:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });

},{"./_export":34,"./_own-keys":85}],220:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":8,"./_export":34}],221:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = require('./_export');
var setProto = require('./_set-proto');

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":34,"./_set-proto":97}],222:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = require('./_object-dp');
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var createDesc = require('./_property-desc');
var anObject = require('./_an-object');
var isObject = require('./_is-object');

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"./_an-object":8,"./_export":34,"./_has":42,"./_is-object":52,"./_object-dp":72,"./_object-gopd":75,"./_object-gpo":79,"./_property-desc":90}],223:[function(require,module,exports){
var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () {
        return Base[key];
      },
      set: function (it) {
        Base[key] = it;
      }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');

},{"./_descriptors":30,"./_fails":36,"./_flags":38,"./_global":41,"./_inherit-if-required":46,"./_is-regexp":53,"./_object-dp":72,"./_object-gopn":77,"./_redefine":92,"./_set-species":98,"./_wks":127}],224:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});

},{"./_descriptors":30,"./_flags":38,"./_object-dp":72}],225:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';

    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});

},{"./_fix-re-wks":37}],226:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';

    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});

},{"./_fix-re-wks":37}],227:[function(require,module,exports){
// @@search logic
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    'use strict';

    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});

},{"./_fix-re-wks":37}],228:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {
  'use strict';

  var isRegExp = require('./_is-regexp');
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
    // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});

},{"./_fix-re-wks":37,"./_is-regexp":53}],229:[function(require,module,exports){
'use strict';

require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function () {
  return $toString.call({ source: 'a', flags: 'b' }) != '/a/b';
})) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
  // FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"./_an-object":8,"./_descriptors":30,"./_fails":36,"./_flags":38,"./_redefine":92,"./es6.regexp.flags":224}],230:[function(require,module,exports){
'use strict';

var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection":23,"./_collection-strong":20,"./_validate-collection":124}],231:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)

require('./_string-html')('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"./_string-html":106}],232:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()

require('./_string-html')('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"./_string-html":106}],233:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()

require('./_string-html')('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"./_string-html":106}],234:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()

require('./_string-html')('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"./_string-html":106}],235:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"./_export":34,"./_string-at":104}],236:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';

var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
  }
});

},{"./_export":34,"./_fails-is-regexp":35,"./_string-context":105,"./_to-length":116}],237:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()

require('./_string-html')('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"./_string-html":106}],238:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)

require('./_string-html')('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"./_string-html":106}],239:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)

require('./_string-html')('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"./_string-html":106}],240:[function(require,module,exports){
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) {
    // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
    }return res.join('');
  }
});

},{"./_export":34,"./_to-absolute-index":112}],241:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';

var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":34,"./_fails-is-regexp":35,"./_string-context":105}],242:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()

require('./_string-html')('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"./_string-html":106}],243:[function(require,module,exports){
'use strict';

var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0; // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":56,"./_string-at":104}],244:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)

require('./_string-html')('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"./_string-html":106}],245:[function(require,module,exports){
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    }return res.join('');
  }
});

},{"./_export":34,"./_to-iobject":115,"./_to-length":116}],246:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});

},{"./_export":34,"./_string-repeat":108}],247:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()

require('./_string-html')('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"./_string-html":106}],248:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';

var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
  }
});

},{"./_export":34,"./_fails-is-regexp":35,"./_string-context":105,"./_to-length":116}],249:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()

require('./_string-html')('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"./_string-html":106}],250:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()

require('./_string-html')('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"./_string-html":106}],251:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()

require('./_string-html')('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"./_string-html":106}],252:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()

require('./_string-trim')('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

},{"./_string-trim":109}],253:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim

var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () {
      return dP(this, 'a', { value: 7 }).a;
    }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    }return setSymbolDesc(it, key, D);
  }return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  }return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  }return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols =
// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () {
    setter = true;
  },
  useSimple: function () {
    setter = false;
  }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":8,"./_descriptors":30,"./_enum-keys":33,"./_export":34,"./_fails":36,"./_global":41,"./_has":42,"./_hide":43,"./_is-array":50,"./_is-object":52,"./_library":60,"./_meta":66,"./_object-create":71,"./_object-dp":72,"./_object-gopd":75,"./_object-gopn":77,"./_object-gopn-ext":76,"./_object-gops":78,"./_object-keys":81,"./_object-pie":82,"./_property-desc":90,"./_redefine":92,"./_set-to-string-tag":99,"./_shared":101,"./_to-iobject":115,"./_to-primitive":118,"./_uid":122,"./_wks":127,"./_wks-define":125,"./_wks-ext":126}],254:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    }return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);

},{"./_an-object":8,"./_export":34,"./_fails":36,"./_global":41,"./_is-object":52,"./_set-species":98,"./_species-constructor":102,"./_to-absolute-index":112,"./_to-length":116,"./_typed":121,"./_typed-buffer":120}],255:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});

},{"./_export":34,"./_typed":121,"./_typed-buffer":120}],256:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],257:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],258:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],259:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],260:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],261:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],262:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],263:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":119}],264:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"./_typed-array":119}],265:[function(require,module,exports){
'use strict';

var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var fails = require('./_fails');
var validate = require('./_validate-collection');
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () {
  return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7;
})) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
        // store all the rest on native weakmap
      }return method.call(this, a, b);
    });
  });
}

},{"./_array-methods":13,"./_collection":23,"./_collection-weak":22,"./_fails":36,"./_is-object":52,"./_meta":66,"./_object-assign":70,"./_redefine":92,"./_validate-collection":124}],266:[function(require,module,exports){
'use strict';

var weak = require('./_collection-weak');
var validate = require('./_validate-collection');
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
require('./_collection')(WEAK_SET, function (get) {
  return function WeakSet() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"./_collection":23,"./_collection-weak":22,"./_validate-collection":124}],267:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var aFunction = require('./_a-function');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

require('./_add-to-unscopables')('flatMap');

},{"./_a-function":4,"./_add-to-unscopables":6,"./_array-species-create":16,"./_export":34,"./_flatten-into-array":39,"./_to-length":116,"./_to-object":117}],268:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten

var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatten: function flatten() /* depthArg = 1 */{
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

require('./_add-to-unscopables')('flatten');

},{"./_add-to-unscopables":6,"./_array-species-create":16,"./_export":34,"./_flatten-into-array":39,"./_to-integer":114,"./_to-length":116,"./_to-object":117}],269:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes

var $export = require('./_export');
var $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');

},{"./_add-to-unscopables":6,"./_array-includes":12,"./_export":34}],270:[function(require,module,exports){
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = require('./_export');
var microtask = require('./_microtask')();
var process = require('./_global').process;
var isNode = require('./_cof')(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});

},{"./_cof":19,"./_export":34,"./_global":41,"./_microtask":68}],271:[function(require,module,exports){
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export');
var cof = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});

},{"./_cof":19,"./_export":34}],272:[function(require,module,exports){
// https://github.com/tc39/proposal-global
var $export = require('./_export');

$export($export.G, { global: require('./_global') });

},{"./_export":34,"./_global":41}],273:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
require('./_set-collection-from')('Map');

},{"./_set-collection-from":95}],274:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
require('./_set-collection-of')('Map');

},{"./_set-collection-of":96}],275:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });

},{"./_collection-to-json":21,"./_export":34}],276:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});

},{"./_export":34}],277:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });

},{"./_export":34}],278:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});

},{"./_export":34}],279:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var scale = require('./_math-scale');
var fround = require('./_math-fround');

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});

},{"./_export":34,"./_math-fround":62,"./_math-scale":64}],280:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});

},{"./_export":34}],281:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});

},{"./_export":34}],282:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});

},{"./_export":34}],283:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });

},{"./_export":34}],284:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});

},{"./_export":34}],285:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { scale: require('./_math-scale') });

},{"./_export":34,"./_math-scale":64}],286:[function(require,module,exports){
// http://jfbastien.github.io/papers/Math.signbit.html
var $export = require('./_export');

$export($export.S, 'Math', { signbit: function signbit(x) {
    // eslint-disable-next-line no-self-compare
    return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
  } });

},{"./_export":34}],287:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});

},{"./_export":34}],288:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});

},{"./_a-function":4,"./_descriptors":30,"./_export":34,"./_object-dp":72,"./_object-forced-pam":74,"./_to-object":117}],289:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});

},{"./_a-function":4,"./_descriptors":30,"./_export":34,"./_object-dp":72,"./_object-forced-pam":74,"./_to-object":117}],290:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":34,"./_object-to-array":84}],291:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = require('./_export');
var ownKeys = require('./_own-keys');
var toIObject = require('./_to-iobject');
var gOPD = require('./_object-gopd');
var createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"./_create-property":25,"./_export":34,"./_object-gopd":75,"./_own-keys":85,"./_to-iobject":115}],292:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_descriptors":30,"./_export":34,"./_object-forced-pam":74,"./_object-gopd":75,"./_object-gpo":79,"./_to-object":117,"./_to-primitive":118}],293:[function(require,module,exports){
'use strict';

var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_descriptors":30,"./_export":34,"./_object-forced-pam":74,"./_object-gopd":75,"./_object-gpo":79,"./_to-object":117,"./_to-primitive":118}],294:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"./_export":34,"./_object-to-array":84}],295:[function(require,module,exports){
'use strict';
// https://github.com/zenparsing/es-observable

var $export = require('./_export');
var global = require('./_global');
var core = require('./_core');
var microtask = require('./_microtask')();
var OBSERVABLE = require('./_wks')('observable');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var anInstance = require('./_an-instance');
var redefineAll = require('./_redefine-all');
var hide = require('./_hide');
var forOf = require('./_for-of');
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () {
        subscription.unsubscribe();
      };else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  }if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() {
    closeSubscription(this);
  }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    }cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      }cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          }observer.complete();
        }
      });
      return function () {
        done = true;
      };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          }observer.complete();
        }
      });
      return function () {
        done = true;
      };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () {
  return this;
});

$export($export.G, { Observable: $Observable });

require('./_set-species')('Observable');

},{"./_a-function":4,"./_an-instance":7,"./_an-object":8,"./_core":24,"./_export":34,"./_for-of":40,"./_global":41,"./_hide":43,"./_microtask":68,"./_redefine-all":91,"./_set-species":98,"./_wks":127}],296:[function(require,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';

var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
    var C = speciesConstructor(this, core.Promise || global.Promise);
    var isFunction = typeof onFinally == 'function';
    return this.then(isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () {
        return x;
      });
    } : onFinally, isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () {
        throw e;
      });
    } : onFinally);
  } });

},{"./_core":24,"./_export":34,"./_global":41,"./_promise-resolve":89,"./_species-constructor":102}],297:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-promise-try

var $export = require('./_export');
var newPromiseCapability = require('./_new-promise-capability');
var perform = require('./_perform');

$export($export.S, 'Promise', { 'try': function (callbackfn) {
    var promiseCapability = newPromiseCapability.f(this);
    var result = perform(callbackfn);
    (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
    return promiseCapability.promise;
  } });

},{"./_export":34,"./_new-promise-capability":69,"./_perform":88}],298:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
    ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
  } });

},{"./_an-object":8,"./_metadata":67}],299:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
    var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
    var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
    if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
    if (metadataMap.size) return true;
    var targetMetadata = store.get(target);
    targetMetadata['delete'](targetKey);
    return !!targetMetadata.size || store['delete'](target);
  } });

},{"./_an-object":8,"./_metadata":67}],300:[function(require,module,exports){
var Set = require('./es6.set');
var from = require('./_array-from-iterable');
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
    return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
  } });

},{"./_an-object":8,"./_array-from-iterable":11,"./_metadata":67,"./_object-gpo":79,"./es6.set":230}],301:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
    return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  } });

},{"./_an-object":8,"./_metadata":67,"./_object-gpo":79}],302:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
    return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
  } });

},{"./_an-object":8,"./_metadata":67}],303:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
    return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  } });

},{"./_an-object":8,"./_metadata":67}],304:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
    return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  } });

},{"./_an-object":8,"./_metadata":67,"./_object-gpo":79}],305:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
    return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
  } });

},{"./_an-object":8,"./_metadata":67}],306:[function(require,module,exports){
var $metadata = require('./_metadata');
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
    return function decorator(target, targetKey) {
      ordinaryDefineOwnMetadata(metadataKey, metadataValue, (targetKey !== undefined ? anObject : aFunction)(target), toMetaKey(targetKey));
    };
  } });

},{"./_a-function":4,"./_an-object":8,"./_metadata":67}],307:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
require('./_set-collection-from')('Set');

},{"./_set-collection-from":95}],308:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
require('./_set-collection-of')('Set');

},{"./_set-collection-of":96}],309:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });

},{"./_collection-to-json":21,"./_export":34}],310:[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at

var $export = require('./_export');
var $at = require('./_string-at')(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});

},{"./_export":34,"./_string-at":104}],311:[function(require,module,exports){
'use strict';
// https://tc39.github.io/String.prototype.matchAll/

var $export = require('./_export');
var defined = require('./_defined');
var toLength = require('./_to-length');
var isRegExp = require('./_is-regexp');
var getFlags = require('./_flags');
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});

},{"./_defined":29,"./_export":34,"./_flags":38,"./_is-regexp":53,"./_iter-create":55,"./_to-length":116}],312:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end

var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"./_export":34,"./_string-pad":107,"./_user-agent":123}],313:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end

var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"./_export":34,"./_string-pad":107,"./_user-agent":123}],314:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

require('./_string-trim')('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

},{"./_string-trim":109}],315:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

require('./_string-trim')('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

},{"./_string-trim":109}],316:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":125}],317:[function(require,module,exports){
require('./_wks-define')('observable');

},{"./_wks-define":125}],318:[function(require,module,exports){
// https://github.com/tc39/proposal-global
var $export = require('./_export');

$export($export.S, 'System', { global: require('./_global') });

},{"./_export":34,"./_global":41}],319:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
require('./_set-collection-from')('WeakMap');

},{"./_set-collection-from":95}],320:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
require('./_set-collection-of')('WeakMap');

},{"./_set-collection-of":96}],321:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
require('./_set-collection-from')('WeakSet');

},{"./_set-collection-from":95}],322:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
require('./_set-collection-of')('WeakSet');

},{"./_set-collection-of":96}],323:[function(require,module,exports){
var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./_global":41,"./_hide":43,"./_iterators":59,"./_object-keys":81,"./_redefine":92,"./_wks":127,"./es6.array.iterator":140}],324:[function(require,module,exports){
var $export = require('./_export');
var $task = require('./_task');
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"./_export":34,"./_task":111}],325:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global = require('./_global');
var $export = require('./_export');
var userAgent = require('./_user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"./_export":34,"./_global":41,"./_user-agent":123}],326:[function(require,module,exports){
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.array.flat-map');
require('./modules/es7.array.flatten');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.map.of');
require('./modules/es7.set.of');
require('./modules/es7.weak-map.of');
require('./modules/es7.weak-set.of');
require('./modules/es7.map.from');
require('./modules/es7.set.from');
require('./modules/es7.weak-map.from');
require('./modules/es7.weak-set.from');
require('./modules/es7.global');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.clamp');
require('./modules/es7.math.deg-per-rad');
require('./modules/es7.math.degrees');
require('./modules/es7.math.fscale');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.rad-per-deg');
require('./modules/es7.math.radians');
require('./modules/es7.math.scale');
require('./modules/es7.math.umulh');
require('./modules/es7.math.signbit');
require('./modules/es7.promise.finally');
require('./modules/es7.promise.try');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');

},{"./modules/_core":24,"./modules/es6.array.copy-within":130,"./modules/es6.array.every":131,"./modules/es6.array.fill":132,"./modules/es6.array.filter":133,"./modules/es6.array.find":135,"./modules/es6.array.find-index":134,"./modules/es6.array.for-each":136,"./modules/es6.array.from":137,"./modules/es6.array.index-of":138,"./modules/es6.array.is-array":139,"./modules/es6.array.iterator":140,"./modules/es6.array.join":141,"./modules/es6.array.last-index-of":142,"./modules/es6.array.map":143,"./modules/es6.array.of":144,"./modules/es6.array.reduce":146,"./modules/es6.array.reduce-right":145,"./modules/es6.array.slice":147,"./modules/es6.array.some":148,"./modules/es6.array.sort":149,"./modules/es6.array.species":150,"./modules/es6.date.now":151,"./modules/es6.date.to-iso-string":152,"./modules/es6.date.to-json":153,"./modules/es6.date.to-primitive":154,"./modules/es6.date.to-string":155,"./modules/es6.function.bind":156,"./modules/es6.function.has-instance":157,"./modules/es6.function.name":158,"./modules/es6.map":159,"./modules/es6.math.acosh":160,"./modules/es6.math.asinh":161,"./modules/es6.math.atanh":162,"./modules/es6.math.cbrt":163,"./modules/es6.math.clz32":164,"./modules/es6.math.cosh":165,"./modules/es6.math.expm1":166,"./modules/es6.math.fround":167,"./modules/es6.math.hypot":168,"./modules/es6.math.imul":169,"./modules/es6.math.log10":170,"./modules/es6.math.log1p":171,"./modules/es6.math.log2":172,"./modules/es6.math.sign":173,"./modules/es6.math.sinh":174,"./modules/es6.math.tanh":175,"./modules/es6.math.trunc":176,"./modules/es6.number.constructor":177,"./modules/es6.number.epsilon":178,"./modules/es6.number.is-finite":179,"./modules/es6.number.is-integer":180,"./modules/es6.number.is-nan":181,"./modules/es6.number.is-safe-integer":182,"./modules/es6.number.max-safe-integer":183,"./modules/es6.number.min-safe-integer":184,"./modules/es6.number.parse-float":185,"./modules/es6.number.parse-int":186,"./modules/es6.number.to-fixed":187,"./modules/es6.number.to-precision":188,"./modules/es6.object.assign":189,"./modules/es6.object.create":190,"./modules/es6.object.define-properties":191,"./modules/es6.object.define-property":192,"./modules/es6.object.freeze":193,"./modules/es6.object.get-own-property-descriptor":194,"./modules/es6.object.get-own-property-names":195,"./modules/es6.object.get-prototype-of":196,"./modules/es6.object.is":200,"./modules/es6.object.is-extensible":197,"./modules/es6.object.is-frozen":198,"./modules/es6.object.is-sealed":199,"./modules/es6.object.keys":201,"./modules/es6.object.prevent-extensions":202,"./modules/es6.object.seal":203,"./modules/es6.object.set-prototype-of":204,"./modules/es6.object.to-string":205,"./modules/es6.parse-float":206,"./modules/es6.parse-int":207,"./modules/es6.promise":208,"./modules/es6.reflect.apply":209,"./modules/es6.reflect.construct":210,"./modules/es6.reflect.define-property":211,"./modules/es6.reflect.delete-property":212,"./modules/es6.reflect.enumerate":213,"./modules/es6.reflect.get":216,"./modules/es6.reflect.get-own-property-descriptor":214,"./modules/es6.reflect.get-prototype-of":215,"./modules/es6.reflect.has":217,"./modules/es6.reflect.is-extensible":218,"./modules/es6.reflect.own-keys":219,"./modules/es6.reflect.prevent-extensions":220,"./modules/es6.reflect.set":222,"./modules/es6.reflect.set-prototype-of":221,"./modules/es6.regexp.constructor":223,"./modules/es6.regexp.flags":224,"./modules/es6.regexp.match":225,"./modules/es6.regexp.replace":226,"./modules/es6.regexp.search":227,"./modules/es6.regexp.split":228,"./modules/es6.regexp.to-string":229,"./modules/es6.set":230,"./modules/es6.string.anchor":231,"./modules/es6.string.big":232,"./modules/es6.string.blink":233,"./modules/es6.string.bold":234,"./modules/es6.string.code-point-at":235,"./modules/es6.string.ends-with":236,"./modules/es6.string.fixed":237,"./modules/es6.string.fontcolor":238,"./modules/es6.string.fontsize":239,"./modules/es6.string.from-code-point":240,"./modules/es6.string.includes":241,"./modules/es6.string.italics":242,"./modules/es6.string.iterator":243,"./modules/es6.string.link":244,"./modules/es6.string.raw":245,"./modules/es6.string.repeat":246,"./modules/es6.string.small":247,"./modules/es6.string.starts-with":248,"./modules/es6.string.strike":249,"./modules/es6.string.sub":250,"./modules/es6.string.sup":251,"./modules/es6.string.trim":252,"./modules/es6.symbol":253,"./modules/es6.typed.array-buffer":254,"./modules/es6.typed.data-view":255,"./modules/es6.typed.float32-array":256,"./modules/es6.typed.float64-array":257,"./modules/es6.typed.int16-array":258,"./modules/es6.typed.int32-array":259,"./modules/es6.typed.int8-array":260,"./modules/es6.typed.uint16-array":261,"./modules/es6.typed.uint32-array":262,"./modules/es6.typed.uint8-array":263,"./modules/es6.typed.uint8-clamped-array":264,"./modules/es6.weak-map":265,"./modules/es6.weak-set":266,"./modules/es7.array.flat-map":267,"./modules/es7.array.flatten":268,"./modules/es7.array.includes":269,"./modules/es7.asap":270,"./modules/es7.error.is-error":271,"./modules/es7.global":272,"./modules/es7.map.from":273,"./modules/es7.map.of":274,"./modules/es7.map.to-json":275,"./modules/es7.math.clamp":276,"./modules/es7.math.deg-per-rad":277,"./modules/es7.math.degrees":278,"./modules/es7.math.fscale":279,"./modules/es7.math.iaddh":280,"./modules/es7.math.imulh":281,"./modules/es7.math.isubh":282,"./modules/es7.math.rad-per-deg":283,"./modules/es7.math.radians":284,"./modules/es7.math.scale":285,"./modules/es7.math.signbit":286,"./modules/es7.math.umulh":287,"./modules/es7.object.define-getter":288,"./modules/es7.object.define-setter":289,"./modules/es7.object.entries":290,"./modules/es7.object.get-own-property-descriptors":291,"./modules/es7.object.lookup-getter":292,"./modules/es7.object.lookup-setter":293,"./modules/es7.object.values":294,"./modules/es7.observable":295,"./modules/es7.promise.finally":296,"./modules/es7.promise.try":297,"./modules/es7.reflect.define-metadata":298,"./modules/es7.reflect.delete-metadata":299,"./modules/es7.reflect.get-metadata":301,"./modules/es7.reflect.get-metadata-keys":300,"./modules/es7.reflect.get-own-metadata":303,"./modules/es7.reflect.get-own-metadata-keys":302,"./modules/es7.reflect.has-metadata":304,"./modules/es7.reflect.has-own-metadata":305,"./modules/es7.reflect.metadata":306,"./modules/es7.set.from":307,"./modules/es7.set.of":308,"./modules/es7.set.to-json":309,"./modules/es7.string.at":310,"./modules/es7.string.match-all":311,"./modules/es7.string.pad-end":312,"./modules/es7.string.pad-start":313,"./modules/es7.string.trim-left":314,"./modules/es7.string.trim-right":315,"./modules/es7.symbol.async-iterator":316,"./modules/es7.symbol.observable":317,"./modules/es7.system.global":318,"./modules/es7.weak-map.from":319,"./modules/es7.weak-map.of":320,"./modules/es7.weak-set.from":321,"./modules/es7.weak-set.of":322,"./modules/web.dom.iterable":323,"./modules/web.immediate":324,"./modules/web.timers":325}],327:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('./elemental');

var _reactRouter = require('react-router');

var _glamor = require('glamor');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Mobile = require('./components/Navigation/Mobile');

var _Mobile2 = _interopRequireDefault(_Mobile);

var _Primary = require('./components/Navigation/Primary');

var _Primary2 = _interopRequireDefault(_Primary);

var _Secondary = require('./components/Navigation/Secondary');

var _Secondary2 = _interopRequireDefault(_Secondary);

var _Footer = require('./components/Footer');

var _Footer2 = _interopRequireDefault(_Footer);

var _IframeContent = require('./shared/IframeContent');

var _IframeContent2 = _interopRequireDefault(_IframeContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The App component is the component that is rendered around all views, and
 * contains common things like navigation, footer, etc.
 */

var classes = {
	wrapper: {
		display: 'flex',
		flexDirection: 'column',
		minHeight: '100vh'
	},
	body: {
		flexGrow: 1
	}
};

var App = function App(props) {
	var listsByPath = require('../utils/lists').listsByPath;
	var children = props.children;
	// If we're on either a list or an item view
	var currentList = void 0,
	    currentSection = void 0;
	if (props.params.listId) {
		currentList = listsByPath[props.params.listId];
		// If we're on a list path that doesn't exist (e.g. /keystone/gibberishasfw34afsd) this will
		// be undefined
		if (!currentList) {
			var section = _lodash2.default.find(Keystone.nav.sections, { lists: [{ path: props.location.pathname, external: true }] });
			if (section) {
				var path = _lodash2.default.find(section.lists, { path: props.location.pathname, external: true });
				console.log(path);
				children = _react2.default.createElement(_IframeContent2.default, { src: path.href, show: true, onCancel: function onCancel() {
						console.log('frame cancel');
					}, onSave: function onSave() {
						console.log('frame save');
					} });
			} else {
				children = _react2.default.createElement(
					_elemental.Container,
					null,
					_react2.default.createElement(
						'p',
						null,
						'List not found!'
					),
					_react2.default.createElement(
						_reactRouter.Link,
						{ to: '' + Keystone.adminPath },
						'Go back home'
					)
				);
			}
		} else {
			// Get the current section we're in for the navigation
			currentSection = Keystone.nav.by.list[currentList.key];
		}
	}
	// Default current section key to dashboard
	var currentSectionKey = currentSection && currentSection.key || 'dashboard';
	return _react2.default.createElement(
		'div',
		{ className: (0, _glamor.css)(classes.wrapper) },
		_react2.default.createElement(
			'header',
			null,
			_react2.default.createElement(_Mobile2.default, {
				brand: Keystone.brand,
				currentListKey: props.params.listId,
				currentSectionKey: currentSectionKey,
				sections: Keystone.nav.sections,
				signoutUrl: Keystone.signoutUrl
			}),
			_react2.default.createElement(_Primary2.default, {
				currentSectionKey: currentSectionKey,
				brand: Keystone.brand,
				sections: Keystone.nav.sections,
				signoutUrl: Keystone.signoutUrl
			}),
			currentSection ? _react2.default.createElement(_Secondary2.default, {
				currentListKey: props.params.listId,
				lists: currentSection.lists,
				itemId: props.params.itemId
			}) : null
		),
		_react2.default.createElement(
			'main',
			{ className: (0, _glamor.css)(classes.body) },
			children
		),
		_react2.default.createElement(_Footer2.default, {
			appversion: Keystone.appversion,
			backUrl: Keystone.backUrl,
			brand: Keystone.brand,
			User: Keystone.User,
			user: Keystone.user,
			version: Keystone.version
		})
	);
};

module.exports = App;

},{"../utils/lists":482,"./components/Footer":328,"./components/Navigation/Mobile":331,"./components/Navigation/Primary":333,"./components/Navigation/Secondary":335,"./elemental":399,"./shared/IframeContent":463,"glamor":undefined,"lodash":undefined,"react":undefined,"react-router":undefined}],328:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _elemental = require('../../elemental');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The global Footer, displays a link to the website and the current Keystone
 * version in use
 */

var Footer = _react2.default.createClass({
	displayName: 'Footer',
	propTypes: {
		appversion: _react2.default.PropTypes.string,
		backUrl: _react2.default.PropTypes.string,
		brand: _react2.default.PropTypes.string,
		user: _react2.default.PropTypes.object,
		User: _react2.default.PropTypes.object, // eslint-disable-line react/sort-prop-types
		version: _react2.default.PropTypes.string
	},
	// Render the user
	renderUser: function renderUser() {
		var _props = this.props,
		    User = _props.User,
		    user = _props.user;

		if (!user) return null;

		return _react2.default.createElement(
			'span',
			null,
			_react2.default.createElement(
				'span',
				null,
				' Signed in as '
			),
			_react2.default.createElement(
				'a',
				{ href: Keystone.adminPath + '/' + User.path + '/' + user.id, tabIndex: '-1', className: (0, _glamor.css)(classes.link) },
				user.name
			),
			_react2.default.createElement(
				'span',
				null,
				'.'
			)
		);
	},
	render: function render() {
		var _props2 = this.props,
		    backUrl = _props2.backUrl,
		    brand = _props2.brand,
		    appversion = _props2.appversion,
		    version = _props2.version;


		return _react2.default.createElement(
			'footer',
			{ className: (0, _glamor.css)(classes.footer), 'data-keystone-footer': true },
			_react2.default.createElement(
				_elemental.Container,
				null,
				_react2.default.createElement(
					'a',
					{
						href: backUrl,
						tabIndex: '-1',
						className: (0, _glamor.css)(classes.link)
					},
					brand + (appversion ? ' ' + appversion : '')
				),
				_react2.default.createElement(
					'span',
					null,
					' powered by '
				),
				_react2.default.createElement(
					'a',
					{
						href: 'http://keystonejs.com',
						target: '_blank',
						className: (0, _glamor.css)(classes.link),
						tabIndex: '-1'
					},
					'KeystoneJS'
				),
				_react2.default.createElement(
					'span',
					null,
					' version ',
					version,
					'.'
				),
				this.renderUser()
			)
		);
	}
});

/* eslint quote-props: ["error", "as-needed"] */
var linkHoverAndFocus = {
	color: _theme2.default.color.gray60,
	outline: 'none'
};
var classes = {
	footer: {
		boxShadow: '0 -1px 0 rgba(0, 0, 0, 0.1)',
		color: _theme2.default.color.gray40,
		fontSize: _theme2.default.font.size.small,
		paddingBottom: 30,
		paddingTop: 40,
		textAlign: 'center',
		display: 'none'
	},
	link: {
		color: _theme2.default.color.gray60,

		':hover': linkHoverAndFocus,
		':focus': linkHoverAndFocus
	}
};

module.exports = Footer;

},{"../../../theme":477,"../../elemental":399,"glamor":undefined,"react":undefined}],329:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A list item of the mobile navigation
 */

var MobileListItem = _react2.default.createClass({
	displayName: 'MobileListItem',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string,
		href: _react2.default.PropTypes.string.isRequired,
		onClick: _react2.default.PropTypes.func
	},
	render: function render() {
		return _react2.default.createElement(
			_reactRouter.Link,
			{
				className: this.props.className,
				to: this.props.href,
				onClick: this.props.onClick,
				tabIndex: '-1'
			},
			this.props.children
		);
	}
});

module.exports = MobileListItem;

},{"react":undefined,"react-router":undefined}],330:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ListItem = require('./ListItem');

var _ListItem2 = _interopRequireDefault(_ListItem);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MobileSectionItem = _react2.default.createClass({
	displayName: 'MobileSectionItem',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string,
		currentListKey: _react2.default.PropTypes.string,
		href: _react2.default.PropTypes.string.isRequired,
		lists: _react2.default.PropTypes.array
	},
	// Render the lists
	renderLists: function renderLists() {
		var _this = this;

		if (!this.props.lists || this.props.lists.length <= 1) return null;

		var navLists = this.props.lists.map(function (item) {
			// Get the link and the classname
			var href = item.external ? item.path : Keystone.adminPath + '/' + item.path;
			var className = _this.props.currentListKey && _this.props.currentListKey === item.path ? 'MobileNavigation__list-item is-active' : 'MobileNavigation__list-item';

			return _react2.default.createElement(
				_ListItem2.default,
				{ key: item.path, href: href, className: className, onClick: _this.props.onClick },
				item.label
			);
		});

		return _react2.default.createElement(
			'div',
			{ className: 'MobileNavigation__lists' },
			navLists
		);
	},
	render: function render() {
		return _react2.default.createElement(
			'div',
			{ className: this.props.className },
			_react2.default.createElement(
				_reactRouter.Link,
				{
					className: 'MobileNavigation__section-item',
					to: this.props.href,
					tabIndex: '-1',
					onClick: this.props.onClick
				},
				this.props.children
			),
			this.renderLists()
		);
	}
}); /**
     * A mobile section
     */

module.exports = MobileSectionItem;

},{"./ListItem":329,"react":undefined,"react-router":undefined}],331:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _SectionItem = require('./SectionItem');

var _SectionItem2 = _interopRequireDefault(_SectionItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ESCAPE_KEY_CODE = 27; /**
                           * The mobile navigation, displayed on screens < 768px
                           */

var MobileNavigation = _react2.default.createClass({
	displayName: 'MobileNavigation',
	propTypes: {
		brand: _react2.default.PropTypes.string,
		currentListKey: _react2.default.PropTypes.string,
		currentSectionKey: _react2.default.PropTypes.string,
		sections: _react2.default.PropTypes.array.isRequired,
		signoutUrl: _react2.default.PropTypes.string
	},
	getInitialState: function getInitialState() {
		return {
			barIsVisible: false
		};
	},

	// Handle showing and hiding the menu based on the window size when
	// resizing
	componentDidMount: function componentDidMount() {
		this.handleResize();
		window.addEventListener('resize', this.handleResize);
	},
	componentWillUnmount: function componentWillUnmount() {
		window.removeEventListener('resize', this.handleResize);
	},
	handleResize: function handleResize() {
		this.setState({
			barIsVisible: window.innerWidth < 768
		});
	},

	// Toggle the menu
	toggleMenu: function toggleMenu() {
		this[this.state.menuIsVisible ? 'hideMenu' : 'showMenu']();
	},

	// Show the menu
	showMenu: function showMenu() {
		this.setState({
			menuIsVisible: true
		});

		// Make the body unscrollable, so you can only scroll in the menu
		document.body.style.overflow = 'hidden';
		document.body.addEventListener('keyup', this.handleEscapeKey, false);
	},

	// Hide the menu
	hideMenu: function hideMenu() {
		this.setState({
			menuIsVisible: false
		});

		// Make the body scrollable again
		document.body.style.overflow = null;
		document.body.removeEventListener('keyup', this.handleEscapeKey, false);
	},

	// If the escape key was pressed, hide the menu
	handleEscapeKey: function handleEscapeKey(event) {
		if (event.which === ESCAPE_KEY_CODE) {
			this.hideMenu();
		}
	},
	renderNavigation: function renderNavigation() {
		var _this = this;

		if (!this.props.sections || !this.props.sections.length) return null;

		return this.props.sections.map(function (section) {
			// Get the link and the classname
			var href = section.lists[0].external ? section.lists[0].path : Keystone.adminPath + '/' + section.lists[0].path;
			var className = _this.props.currentSectionKey && _this.props.currentSectionKey === section.key ? 'MobileNavigation__section is-active' : 'MobileNavigation__section';

			// Render a SectionItem
			return _react2.default.createElement(
				_SectionItem2.default,
				{
					key: section.key,
					className: className,
					href: href,
					lists: section.lists,
					currentListKey: _this.props.currentListKey,
					onClick: _this.toggleMenu
				},
				section.label
			);
		});
	},

	// Render a blockout
	renderBlockout: function renderBlockout() {
		if (!this.state.menuIsVisible) return null;

		return _react2.default.createElement('div', { className: 'MobileNavigation__blockout', onClick: this.toggleMenu });
	},

	// Render the sidebar menu
	renderMenu: function renderMenu() {
		if (!this.state.menuIsVisible) return null;

		return _react2.default.createElement(
			'nav',
			{ className: 'MobileNavigation__menu' },
			_react2.default.createElement(
				'div',
				{ className: 'MobileNavigation__sections' },
				this.renderNavigation()
			)
		);
	},
	render: function render() {
		if (!this.state.barIsVisible) return null;

		return _react2.default.createElement(
			'div',
			{ className: 'MobileNavigation' },
			_react2.default.createElement(
				'div',
				{ className: 'MobileNavigation__bar' },
				_react2.default.createElement(
					'button',
					{
						type: 'button',
						onClick: this.toggleMenu,
						className: 'MobileNavigation__bar__button MobileNavigation__bar__button--menu'
					},
					_react2.default.createElement('span', { className: 'MobileNavigation__bar__icon octicon octicon-' + (this.state.menuIsVisible ? 'x' : 'three-bars') })
				),
				_react2.default.createElement(
					'span',
					{ className: 'MobileNavigation__bar__label' },
					this.props.brand
				),
				_react2.default.createElement(
					'a',
					{
						href: this.props.signoutUrl,
						className: 'MobileNavigation__bar__button MobileNavigation__bar__button--signout'
					},
					_react2.default.createElement('span', { className: 'MobileNavigation__bar__icon octicon octicon-sign-out' })
				)
			),
			_react2.default.createElement('div', { className: 'MobileNavigation__bar--placeholder' }),
			_react2.default.createElement(
				_reactAddonsCssTransitionGroup2.default,
				{
					transitionName: 'MobileNavigation__menu',
					transitionEnterTimeout: 260,
					transitionLeaveTimeout: 200
				},
				this.renderMenu()
			),
			_react2.default.createElement(
				_reactAddonsCssTransitionGroup2.default,
				{
					transitionName: 'react-transitiongroup-fade',
					transitionEnterTimeout: 0,
					transitionLeaveTimeout: 0
				},
				this.renderBlockout()
			)
		);
	}
});

module.exports = MobileNavigation;

},{"./SectionItem":330,"react":undefined,"react-addons-css-transition-group":undefined}],332:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimaryNavItem = function PrimaryNavItem(_ref) {
	var children = _ref.children,
	    className = _ref.className,
	    href = _ref.href,
	    label = _ref.label,
	    title = _ref.title,
	    to = _ref.to,
	    active = _ref.active;

	var itemClassName = (0, _classnames2.default)('primary-navbar__item', className);

	var Button = to ? _react2.default.createElement(
		_reactRouter.Link,
		{
			className: 'primary-navbar__link',
			key: title,
			tabIndex: '-1',
			title: title,
			to: to
			// Block clicks on active link
			, onClick: function onClick(evt) {
				if (active) evt.preventDefault();
			}
		},
		children
	) : _react2.default.createElement(
		'a',
		{
			className: 'primary-navbar__link',
			href: href,
			key: title,
			tabIndex: '-1',
			title: title
		},
		children
	);

	return _react2.default.createElement(
		'li',
		{
			className: itemClassName,
			'data-section-label': label
		},
		Button
	);
}; /**
    * A item in the primary navigation. If it has a "to" prop it'll render a
    * react-router "Link", if it has a "href" prop it'll render a simple "a" tag
    */

PrimaryNavItem.displayName = 'PrimaryNavItem';
PrimaryNavItem.propTypes = {
	children: _react.PropTypes.node.isRequired,
	className: _react.PropTypes.string,
	href: _react.PropTypes.string,
	label: _react.PropTypes.string,
	title: _react.PropTypes.string,
	to: _react.PropTypes.string
};

module.exports = PrimaryNavItem;

},{"classnames":undefined,"react":undefined,"react-router":undefined}],333:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../../elemental');

var _NavItem = require('./NavItem');

var _NavItem2 = _interopRequireDefault(_NavItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PrimaryNavigation = _react2.default.createClass({
	displayName: 'PrimaryNavigation',
	propTypes: {
		brand: _react2.default.PropTypes.string,
		currentSectionKey: _react2.default.PropTypes.string,
		sections: _react2.default.PropTypes.array.isRequired,
		signoutUrl: _react2.default.PropTypes.string
	},
	getInitialState: function getInitialState() {
		return {};
	},

	// Handle resizing, hide this navigation on mobile (i.e. < 768px) screens
	componentDidMount: function componentDidMount() {
		this.handleResize();
		window.addEventListener('resize', this.handleResize);
	},
	componentWillUnmount: function componentWillUnmount() {
		window.removeEventListener('resize', this.handleResize);
	},
	handleResize: function handleResize() {
		this.setState({
			navIsVisible: window.innerWidth >= 768
		});
	},

	// Render the sign out button
	renderSignout: function renderSignout() {
		if (!this.props.signoutUrl) return null;

		return _react2.default.createElement(
			_NavItem2.default,
			{
				label: 'glyphicon glyphicon-log',
				href: this.props.signoutUrl,
				title: 'Sign Out'
			},
			'Sign Out'
		);
	},

	// Render the back button
	renderBackButton: function renderBackButton() {
		if (!Keystone.backUrl) return null;

		return _react2.default.createElement(
			_NavItem2.default,
			{
				label: 'octicon-globe',
				href: Keystone.backUrl,
				title: 'Front page - ' + this.props.brand
			},
			_react2.default.createElement('span', { className: 'octicon octicon-globe' })
		);
	},

	// Render the link to the webpage
	renderFrontLink: function renderFrontLink() {
		return _react2.default.createElement(
			'ul',
			{ className: 'app-nav app-nav--primary app-nav--right' },
			this.renderSignout()
		);
	},
	renderBrand: function renderBrand() {
		// TODO: support navbarLogo from keystone config
		if (!Keystone.backUrl) return null;

		var _props = this.props,
		    brand = _props.brand,
		    currentSectionKey = _props.currentSectionKey;

		var className = currentSectionKey === 'dashboard' ? 'primary-navbar__brand primary-navbar__item--active' : 'primary-navbar__brand';
		return _react2.default.createElement(
			_NavItem2.default,
			{
				className: className,
				href: Keystone.backUrl,
				label: 'octicon-home',
				title: 'Front page - ' + this.props.brand
			},
			'Home'
		);
	},

	// Render the navigation
	renderNavigation: function renderNavigation() {
		var _this = this;

		if (!this.props.sections || !this.props.sections.length) return null;

		return this.props.sections.map(function (section) {
			// Get the link and the class name
			var href = section.lists[0].external ? section.lists[0].path : Keystone.adminPath + '/' + section.lists[0].path;
			var isActive = _this.props.currentSectionKey && _this.props.currentSectionKey === section.key;
			var className = isActive ? 'primary-navbar__item--active' : null;

			return _react2.default.createElement(
				_NavItem2.default,
				{
					active: isActive,
					key: section.key,
					label: section.label,
					className: className,
					to: href
				},
				section.label
			);
		});
	},
	render: function render() {
		if (!this.state.navIsVisible) return null;

		return _react2.default.createElement(
			'nav',
			{ className: 'primary-navbar' },
			_react2.default.createElement(
				'ul',
				{ className: 'app-nav app-nav--primary app-nav--left' },
				this.renderBrand(),
				this.renderNavigation()
			),
			this.renderFrontLink()
		);
	}
}); /**
     * The primary (i.e. uppermost) navigation on desktop. Renders all sections and
     * the home-, website- and signout buttons.
     */

module.exports = PrimaryNavigation;

},{"../../../elemental":399,"./NavItem":332,"react":undefined}],334:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A navigation item of the secondary navigation
 */

var SecondaryNavItem = _react2.default.createClass({
	displayName: 'SecondaryNavItem',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string,
		href: _react2.default.PropTypes.string.isRequired,
		onClick: _react2.default.PropTypes.func,
		path: _react2.default.PropTypes.string,
		title: _react2.default.PropTypes.string
	},
	render: function render() {
		return _react2.default.createElement(
			'li',
			{ className: this.props.className, 'data-list-path': this.props.path },
			_react2.default.createElement(
				_reactRouter.Link,
				{
					to: this.props.href,
					onClick: this.props.onClick,
					title: this.props.title,
					tabIndex: '-1'
				},
				this.props.children
			)
		);
	}
});

module.exports = SecondaryNavItem;

},{"react":undefined,"react-router":undefined}],335:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _elemental = require('../../../elemental');

var _active = require('../../../screens/List/actions/active');

var _NavItem = require('./NavItem');

var _NavItem2 = _interopRequireDefault(_NavItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SecondaryNavigation = _react2.default.createClass({
	displayName: 'SecondaryNavigation',
	propTypes: {
		currentListKey: _react2.default.PropTypes.string,
		lists: _react2.default.PropTypes.array.isRequired
	},
	getInitialState: function getInitialState() {
		return {};
	},

	// Handle resizing and hide this nav on mobile (i.e. < 768px) screens
	componentDidMount: function componentDidMount() {
		this.handleResize();
		window.addEventListener('resize', this.handleResize);
	},
	componentWillUnmount: function componentWillUnmount() {
		window.removeEventListener('resize', this.handleResize);
	},
	handleResize: function handleResize() {
		this.setState({
			navIsVisible: this.props.lists && Object.keys(this.props.lists).length > 0 && window.innerWidth >= 768
		});
	},

	// Render the navigation
	renderNavigation: function renderNavigation(lists) {
		var _this = this;

		var navigation = Object.keys(lists).map(function (key) {
			var list = lists[key];
			// Get the link and the classname
			var href = list.external ? list.path : Keystone.adminPath + '/' + list.path;
			var isActive = _this.props.currentListKey && _this.props.currentListKey === list.path;
			var className = isActive ? 'active' : null;
			var onClick = function onClick(evt) {
				// If it's the currently active navigation item and we're not on the item view,
				// clear the query params on click
				if (isActive && !_this.props.itemId) {
					evt.preventDefault();
					_this.props.dispatch((0, _active.setActiveList)(_this.props.currentList, _this.props.currentListKey));
				}
			};

			return _react2.default.createElement(
				_NavItem2.default,
				{
					key: list.path,
					path: list.path,
					className: className,
					href: href,
					onClick: onClick
				},
				list.label
			);
		});

		return _react2.default.createElement(
			'ul',
			{ className: 'app-nav app-nav--secondary app-nav--left' },
			navigation
		);
	},
	render: function render() {
		if (!this.state.navIsVisible) return null;

		return _react2.default.createElement(
			'nav',
			{ className: 'secondary-navbar' },
			_react2.default.createElement(
				_elemental.Container,
				{ clearFloatingChildren: true },
				this.renderNavigation(this.props.lists)
			)
		);
	}
}); /**
     * The secondary navigation links to inidvidual lists of a section
     */

module.exports = (0, _reactRedux.connect)(function (state) {
	return {
		currentList: state.lists.currentList
	};
})(SecondaryNavigation);

},{"../../../elemental":399,"../../../screens/List/actions/active":430,"./NavItem":334,"react":undefined,"react-redux":undefined}],336:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	danger: _theme2.default.alert.color.danger,
	error: _theme2.default.alert.color.danger,
	info: _theme2.default.alert.color.info,
	success: _theme2.default.alert.color.success,
	warning: _theme2.default.alert.color.warning
};

},{"../../../theme":477}],337:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// clone children if a class exists for the tagname
var cloneWithClassnames = function cloneWithClassnames(c) {
	var type = c.type && c.type.displayName ? c.type.displayName : c.type || null;

	if (!type || !_styles2.default[type]) return c;

	return (0, _react.cloneElement)(c, {
		className: (0, _glamor.css)(_styles2.default[type])
	});
};

function Alert(_ref) {
	var children = _ref.children,
	    className = _ref.className,
	    color = _ref.color,
	    Component = _ref.component,
	    props = _objectWithoutProperties(_ref, ['children', 'className', 'color', 'component']);

	props.className = (0, _glamor.css)(_styles2.default.alert, _styles2.default[color], className);
	props.children = _react.Children.map(children, cloneWithClassnames);

	return _react2.default.createElement(Component, _extends({}, props, { 'data-alert-type': color }));
};

Alert.propTypes = {
	color: _react.PropTypes.oneOf(Object.keys(_colors2.default)).isRequired,
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string])
};
Alert.defaultProps = {
	component: 'div'
};

module.exports = Alert;

},{"./colors":336,"./styles":338,"glamor":undefined,"react":undefined}],338:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Alert
// ==============================

/* eslint quote-props: ["error", "as-needed"] */

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Prepare variants
var colorVariants = {};
Object.keys(_colors2.default).forEach(function (color) {
	colorVariants[color] = {
		backgroundColor: _colors2.default[color].background,
		borderColor: _colors2.default[color].border,
		color: _colors2.default[color].text
	};
});

// Prepare headings
var headingTagnames = {};
['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].forEach(function (tag) {
	headingTagnames[tag] = { color: 'inherit' };
});

var linkStyles = {
	color: 'inherit',
	textDecoration: 'underline',

	':hover': { color: 'inherit' },
	':focus': { color: 'inherit' }
};

module.exports = _extends({
	alert: {
		borderColor: 'transparent',
		borderRadius: _theme2.default.alert.borderRadius,
		borderStyle: 'solid',
		borderWidth: _theme2.default.alert.borderWidth,
		margin: _theme2.default.alert.margin,
		padding: _theme2.default.alert.padding
	},

	// tagnames
	a: linkStyles,
	Link: linkStyles,
	strong: {
		fontWeight: 500
	}

}, headingTagnames, colorVariants);

},{"../../../theme":477,"./colors":336}],339:[function(require,module,exports){
'use strict';

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function BlankState(_ref) {
	var className = _ref.className,
	    children = _ref.children,
	    heading = _ref.heading,
	    Component = _ref.component,
	    props = _objectWithoutProperties(_ref, ['className', 'children', 'heading', 'component']);

	props.className = (0, _glamor.css)(classes.container, className);

	return _react2.default.createElement(
		Component,
		props,
		!!heading && _react2.default.createElement(
			'h2',
			{ 'data-e2e-blank-state-heading': true, className: (0, _glamor.css)(classes.heading) },
			heading
		),
		children
	);
};

BlankState.propTypes = {
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]).isRequired,
	heading: _react.PropTypes.string
};
BlankState.defaultProps = {
	component: 'div'
};

/* eslint quote-props: ["error", "as-needed"] */

var classes = {
	container: {
		backgroundColor: _theme2.default.blankstate.background,
		borderRadius: _theme2.default.blankstate.borderRadius,
		color: _theme2.default.blankstate.color,
		paddingBottom: _theme2.default.blankstate.paddingVertical,
		paddingLeft: _theme2.default.blankstate.paddingHorizontal,
		paddingRight: _theme2.default.blankstate.paddingHorizontal,
		paddingTop: _theme2.default.blankstate.paddingVertical,
		textAlign: 'center'
	},

	heading: {
		color: 'inherit',

		':last-child': {
			marginBottom: 0
		}
	}
};

module.exports = BlankState;

},{"../../../theme":477,"glamor":undefined,"react":undefined}],340:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var commonClasses = _styles2.default.common;
var stylesheetCache = {};
function getStyleSheet(variant, color) {
	var cacheKey = variant + '-' + color;
	if (!stylesheetCache[cacheKey]) {
		var variantStyles = _styles2.default[variant](color);
		stylesheetCache[cacheKey] = variantStyles;
	}
	return stylesheetCache[cacheKey];
}

var BUTTON_SIZES = ['large', 'medium', 'small', 'xsmall'];
var BUTTON_VARIANTS = ['fill', 'hollow', 'link'];
var BUTTON_COLORS = ['default', 'primary', 'success', 'warning', 'danger', 'cancel', 'delete'];

// NOTE must NOT be functional component to allow `refs`

var Button = function (_Component) {
	_inherits(Button, _Component);

	function Button() {
		_classCallCheck(this, Button);

		return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
	}

	_createClass(Button, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    active = _props.active,
			    aphroditeStyles = _props.aphroditeStyles,
			    block = _props.block,
			    className = _props.className,
			    color = _props.color,
			    Tag = _props.component,
			    disabled = _props.disabled,
			    size = _props.size,
			    variant = _props.variant,
			    props = _objectWithoutProperties(_props, ['active', 'aphroditeStyles', 'block', 'className', 'color', 'component', 'disabled', 'size', 'variant']);

			// get the styles


			var variantClasses = getStyleSheet(variant, color);
			props.className = _glamor.css.apply(undefined, [commonClasses.base, commonClasses[size], variantClasses.base, block ? commonClasses.block : null, disabled ? commonClasses.disabled : null, active ? variantClasses.active : null].concat(_toConsumableArray(aphroditeStyles)));
			if (className) {
				props.className += ' ' + className;
			}

			// return an anchor or button
			if (!Tag) {
				Tag = props.href ? 'a' : 'button';
			}
			// Ensure buttons don't submit by default
			if (Tag === 'button' && !props.type) {
				props.type = 'button';
			}

			return _react2.default.createElement(Tag, props);
		}
	}]);

	return Button;
}(_react.Component);

;

Button.propTypes = {
	active: _react.PropTypes.bool,
	aphroditeStyles: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		_definition: _react.PropTypes.object,
		_name: _react.PropTypes.string
	})),
	block: _react.PropTypes.bool,
	color: _react.PropTypes.oneOf(BUTTON_COLORS),
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
	disabled: _react.PropTypes.bool,
	href: _react.PropTypes.string,
	size: _react.PropTypes.oneOf(BUTTON_SIZES),
	variant: _react.PropTypes.oneOf(BUTTON_VARIANTS)
};
Button.defaultProps = {
	aphroditeStyles: [],
	color: 'default',
	variant: 'fill'
};

module.exports = Button;

},{"./styles":341,"glamor":undefined,"react":undefined}],341:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Button
// ==============================

var _css = require('../../../utils/css');

var _color = require('../../../utils/color');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Common Styles
// ----------------

exports.common = {
	// Base Button
	// ----------------
	base: {
		'appearance': 'none',
		'background': 'none',
		'borderWidth': _theme2.default.button.borderWidth,
		'borderStyle': 'solid',
		'borderColor': 'transparent',
		'borderRadius': _theme2.default.button.borderRadius,
		'cursor': 'pointer',
		'display': 'inline-block',
		'fontWeight': _theme2.default.button.font.weight,
		'height': _theme2.default.component.height,
		'lineHeight': _theme2.default.component.lineHeight,
		'marginBottom': 0,
		'padding': '0 ' + _theme2.default.button.paddingHorizontal,
		'outline': 0,
		'textAlign': 'center',
		'touchAction': 'manipulation',
		'userSelect': 'none',
		'verticalAlign': 'middle',
		'whiteSpace': 'nowrap',

		':hover': {
			color: _theme2.default.button.default.textColor,
			textDecoration: 'none'
		},
		':focus': {
			color: _theme2.default.button.default.textColor,
			textDecoration: 'none'
		}
	},
	// Block Display
	// ----------------
	block: {
		display: 'block',
		width: '100%'
	},
	// Disabled
	// ----------------
	disabled: {
		opacity: 0.4,
		pointerEvents: 'none'
	},
	// Sizes
	// ----------------
	large: {
		fontSize: _theme2.default.font.size.large
	},
	default: {
		fontSize: _theme2.default.font.size.default
	},
	small: {
		fontSize: _theme2.default.font.size.small
	},
	xsmall: {
		fontSize: _theme2.default.font.size.xsmall,
		lineHeight: '1.9',
		paddingLeft: '.66em',
		paddingRight: '.66em'
	}
};

// Fill Variant
// ----------------
function buttonFillVariant(textColor, bgColor) {
	var hoverStyles = _extends({}, (0, _css.gradientVertical)((0, _color.lighten)(bgColor, 10), (0, _color.darken)(bgColor, 5)), {
		borderColor: (0, _color.darken)(bgColor, 5) + ' ' + (0, _color.darken)(bgColor, 10) + ' ' + (0, _color.darken)(bgColor, 15),
		boxShadow: '0 1px 0 rgba(0,0,0,0.1)',
		color: textColor,
		outline: 'none'
	});
	var focusStyles = _extends({}, (0, _css.gradientVertical)((0, _color.lighten)(bgColor, 10), (0, _color.darken)(bgColor, 5)), {
		borderColor: (0, _color.darken)(bgColor, 5) + ' ' + (0, _color.darken)(bgColor, 10) + ' ' + (0, _color.darken)(bgColor, 15),
		boxShadow: '0 0 0 3px ' + (0, _color.fade)(bgColor, 25),
		color: textColor,
		outline: 'none'
	});
	var activeStyles = {
		backgroundColor: (0, _color.darken)(bgColor, 10),
		backgroundImage: 'none',
		borderColor: (0, _color.darken)(bgColor, 25) + ' ' + (0, _color.darken)(bgColor, 15) + ' ' + (0, _color.darken)(bgColor, 10),
		boxShadow: 'inset 0 1px 2px rgba(0, 0, 0, 0.1)'
	};
	return {
		base: _extends({}, (0, _css.gradientVertical)((0, _color.lighten)(bgColor, 5), (0, _color.darken)(bgColor, 10), bgColor), {
			'borderColor': (0, _color.darken)(bgColor, 10) + ' ' + (0, _color.darken)(bgColor, 20) + ' ' + (0, _color.darken)(bgColor, 25),
			'boxShadow': 'inset 0 1px 0 rgba(255, 255, 255, 0.1)',
			'color': textColor,
			'fontWeight': 400,
			'textShadow': '0 -1px 0 rgba(0, 0, 0, 0.25)',

			':hover': hoverStyles,
			':focus': focusStyles,
			':active': activeStyles
		}),
		active: activeStyles
	};
}
// TODO: This is pretty hacky, needs to be consolidated with the Variant() method
// above (needs more theme variables to be implemented though)
function buttonFillDefault() {
	var borderColor = _theme2.default.input.border.color.default;
	var hoverStyles = _extends({}, (0, _css.gradientVertical)('#fff', '#eee'), {
		borderColor: (0, _color.darken)(borderColor, 5) + ' ' + (0, _color.darken)(borderColor, 5) + ' ' + (0, _color.darken)(borderColor, 10),
		boxShadow: '0 1px 0 rgba(0,0,0,0.1)',
		color: _theme2.default.color.text
	});
	var focusStyles = {
		borderColor: _theme2.default.color.primary,
		boxShadow: '0 0 0 3px ' + (0, _color.fade)(_theme2.default.color.primary, 10),
		color: _theme2.default.color.text,
		outline: 'none'
	};
	var activeStyles = {
		background: '#e6e6e6',
		borderColor: (0, _color.darken)(borderColor, 10),
		boxShadow: 'inset 0 1px 2px rgba(0, 0, 0, 0.1)',
		color: _theme2.default.color.text
	};
	return {
		base: _extends({}, (0, _css.gradientVertical)('#fafafa', '#eaeaea'), {
			'borderColor': borderColor + ' ' + (0, _color.darken)(borderColor, 6) + ' ' + (0, _color.darken)(borderColor, 12),
			'color': _theme2.default.color.text,
			'textShadow': '0 1px 0 white',

			':hover': hoverStyles,
			':focus': focusStyles,
			':active': activeStyles
		}),

		// gross hack
		active: _extends({}, activeStyles, {

			':hover': activeStyles,
			':focus': _extends({}, activeStyles, focusStyles, {
				boxShadow: '0 0 0 3px ' + (0, _color.fade)(_theme2.default.color.primary, 10) + ', inset 0 1px 2px rgba(0, 0, 0, 0.1)'
			}),
			':active': activeStyles
		})
	};
}
exports.fill = function (color) {
	switch (color) {
		case 'default':
			return buttonFillDefault();
		case 'cancel':
		case 'delete':
			return buttonFillVariant('white', _theme2.default.button.danger.bgColor);
		default:
			return buttonFillVariant('white', _theme2.default.button[color].bgColor);
	}
};

// Hollow Variant
// ----------------
function buttonHollowVariant(textColor, borderColor) {
	var focusAndHoverStyles = {
		backgroundImage: 'none',
		backgroundColor: (0, _color.fade)(borderColor, 15),
		borderColor: (0, _color.darken)(borderColor, 15),
		boxShadow: 'none',
		color: textColor,
		outline: 'none'
	};
	var focusOnlyStyles = {
		boxShadow: '0 0 0 3px ' + (0, _color.fade)(borderColor, 10)
	};
	var activeStyles = {
		backgroundColor: (0, _color.fade)(borderColor, 35),
		borderColor: (0, _color.darken)(borderColor, 25),
		boxShadow: 'none'
	};

	return {
		base: {
			'background': 'none',
			'borderColor': borderColor,
			'color': textColor,

			':hover': focusAndHoverStyles,
			':focus ': _extends({}, focusAndHoverStyles, focusOnlyStyles),
			':active': activeStyles
		},
		active: activeStyles
	};
};
exports.hollow = function (color) {
	// TODO: better handling of cancel and delete colors
	if (color === 'cancel' || color === 'delete') color = 'danger';

	return buttonHollowVariant(_theme2.default.button[color].bgColor, _theme2.default.button[color].borderColor);
};

// Link Variant
// ----------------
function buttonLinkVariant(textColor, hoverColor) {
	var hoverStyles = {
		color: hoverColor,
		textDecoration: 'underline'
	};
	return {
		base: {
			'background': 'none',
			'border': 0,
			'boxShadow': 'none',
			'color': textColor,
			'fontWeight': 'normal',
			'outline': 'none',

			':hover': hoverStyles,
			':focus': hoverStyles,
			':active': hoverStyles
		},
		active: hoverStyles
	};
};
function buttonLinkDelete() {
	var styles = buttonLinkVariant(_theme2.default.color.gray40, _theme2.default.color.danger);
	var hoverStyles = _extends({}, (0, _css.gradientVertical)((0, _color.lighten)(_theme2.default.color.danger, 10), (0, _color.darken)(_theme2.default.color.danger, 10)), {
		backgroundColor: _theme2.default.color.danger,
		borderColor: (0, _color.darken)(_theme2.default.color.danger, 4) + ' ' + (0, _color.darken)(_theme2.default.color.danger, 8) + ' ' + (0, _color.darken)(_theme2.default.color.danger, 12),
		boxShadow: '0 1px 0 rgba(0,0,0,0.1)',
		color: 'white',
		textDecoration: 'none'
	});
	var activeStyles = {
		backgroundColor: (0, _color.darken)(_theme2.default.color.danger, 4),
		backgroundImage: 'none',
		borderColor: (0, _color.darken)(_theme2.default.color.danger, 12) + ' ' + (0, _color.darken)(_theme2.default.color.danger, 8) + ' ' + (0, _color.darken)(_theme2.default.color.danger, 8),
		boxShadow: 'inset 0 1px 2px rgba(0, 0, 0, 0.1)',
		color: 'white'
	};
	return {
		base: _extends({}, styles.base, {
			':hover': hoverStyles,
			':focus': hoverStyles,
			':active': activeStyles
		}),
		active: activeStyles
	};
}

exports.link = function (color) {
	switch (color) {
		case 'default':
			return buttonLinkVariant(_theme2.default.color.link, _theme2.default.color.linkHover);
		case 'cancel':
			return buttonLinkVariant(_theme2.default.color.gray40, _theme2.default.color.danger);
		case 'delete':
			return buttonLinkDelete();
		default:
			return buttonLinkVariant(_theme2.default.color[color], _theme2.default.color[color]);
	}
};

},{"../../../theme":477,"../../../utils/color":479,"../../../utils/css":481}],342:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Center(_ref) {
	var className = _ref.className,
	    Component = _ref.component,
	    height = _ref.height,
	    style = _ref.style,
	    props = _objectWithoutProperties(_ref, ['className', 'component', 'height', 'style']);

	props.className = (0, _glamor.css)(_styles2.default.center, className);
	props.style = _extends({ height: height }, style);

	return _react2.default.createElement(Component, props);
};
Center.propTypes = {
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
	height: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};
Center.defaultProps = {
	component: 'div',
	height: 'auto'
};

module.exports = Center;

},{"./styles":343,"glamor":undefined,"react":undefined}],343:[function(require,module,exports){
'use strict';

// ==============================
// Center
// ==============================

module.exports = {
	center: {
		display: 'flex',
		alignItems: 'center',
		justifyContent: 'center'
	}
};

},{}],344:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _color = require('../../../utils/color');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var baseColors = {};
['danger', 'info', 'primary', 'success', 'warning'].forEach(function (color) {
	baseColors[color] = {
		background: (0, _color.fade)(_theme2.default.color[color], 10),
		backgroundActive: (0, _color.fade)(_theme2.default.color[color], 20),
		backgroundHover: (0, _color.fade)(_theme2.default.color[color], 15),
		text: _theme2.default.color[color]
	};
});
var invertedColors = {};
['danger', 'info', 'primary', 'success', 'warning'].forEach(function (color) {
	invertedColors[color + '__inverted'] = {
		background: _theme2.default.color[color],
		backgroundActive: (0, _color.lighten)(_theme2.default.color[color], 5),
		backgroundHover: (0, _color.lighten)(_theme2.default.color[color], 15),
		text: 'white'
	};
});

module.exports = _extends({
	default: {
		background: _theme2.default.color.gray10,
		backgroundActive: _theme2.default.color.gray20,
		backgroundHover: _theme2.default.color.gray15,
		text: _theme2.default.color.gray60
	}
}, baseColors, {

	// inverted
	default__inverted: {
		background: _theme2.default.color.gray60,
		backgroundActive: (0, _color.lighten)(_theme2.default.color.gray60, 5),
		backgroundHover: (0, _color.lighten)(_theme2.default.color.gray60, 15),
		text: 'white'
	}
}, invertedColors);

},{"../../../theme":477,"../../../utils/color":479}],345:[function(require,module,exports){
'use strict';

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Chip(_ref) {
	var className = _ref.className,
	    children = _ref.children,
	    color = _ref.color,
	    inverted = _ref.inverted,
	    label = _ref.label,
	    onClear = _ref.onClear,
	    onClick = _ref.onClick,
	    props = _objectWithoutProperties(_ref, ['className', 'children', 'color', 'inverted', 'label', 'onClear', 'onClick']);

	props.className = (0, _glamor.css)(_styles2.default.chip, className);
	var labelClassName = (0, _glamor.css)(_styles2.default.button, _styles2.default.label, _styles2.default['button__' + color + (inverted ? '__inverted' : '')]);
	var clearClassName = (0, _glamor.css)(_styles2.default.button, _styles2.default.clear, _styles2.default['button__' + color + (inverted ? '__inverted' : '')]);

	return _react2.default.createElement(
		'div',
		props,
		_react2.default.createElement(
			'button',
			{ type: 'button', onClick: onClick, className: labelClassName },
			label,
			children
		),
		!!onClear && _react2.default.createElement(
			'button',
			{ type: 'button', onClick: onClear, className: clearClassName },
			'\xD7'
		)
	);
};

Chip.propTypes = {
	color: _react.PropTypes.oneOf(Object.keys(_colors2.default)).isRequired,
	inverted: _react.PropTypes.bool,
	label: _react2.default.PropTypes.string.isRequired,
	onClear: _react2.default.PropTypes.func,
	onClick: _react2.default.PropTypes.func
};
Chip.defaultProps = {
	color: 'default'
};

module.exports = Chip;

},{"./colors":344,"./styles":346,"glamor":undefined,"react":undefined}],346:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Alert
// ==============================

/* eslint quote-props: ["error", "as-needed"] */

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _css = require('../../../utils/css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Prepare variants
var colorVariants = {};
Object.keys(_colors2.default).forEach(function (color) {
	var hoverStyles = {
		backgroundColor: _colors2.default[color].backgroundHover
	};

	colorVariants['button__' + color] = {
		backgroundColor: _colors2.default[color].background,
		color: _colors2.default[color].text,

		':hover': hoverStyles,
		':focus': hoverStyles,
		':active': {
			backgroundColor: _colors2.default[color].backgroundActive
		}
	};
});

module.exports = _extends({
	chip: {
		display: 'inline-block',
		fontSize: _theme2.default.font.size.small,
		fontWeight: 500,
		marginRight: '0.5em',
		overflow: 'hidden',
		lineHeight: '2.2em'
	},

	// tagnames
	button: {
		appearance: 'none',
		background: 'none',
		border: 'none',
		cursor: 'pointer',
		display: 'block',
		float: 'left',
		padding: '0 .9em',
		outline: 'none',

		// make pills - exaggerate the padding toward the radii so it looks even
		':first-child': _extends({}, (0, _css.borderLeftRadius)('3em'), {
			paddingLeft: '1.1em'
		}),
		':last-child': _extends({}, (0, _css.borderRightRadius)('3em'), {
			paddingRight: '1.1em'
		})
	},

	// provide separation between the label and clear buttons
	// floating stops the margins from collapsing into eaching

	label: { marginRight: 1 },
	clear: { marginLeft: 1 }

}, colorVariants);

},{"../../../theme":477,"../../../utils/css":481,"./colors":344}],347:[function(require,module,exports){
'use strict';

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _sizes = require('./sizes');

var _sizes2 = _interopRequireDefault(_sizes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Container(_ref) {
	var className = _ref.className,
	    clearFloatingChildren = _ref.clearFloatingChildren,
	    Component = _ref.component,
	    width = _ref.width,
	    props = _objectWithoutProperties(_ref, ['className', 'clearFloatingChildren', 'component', 'width']);

	props.className = (0, _glamor.css)(_styles2.default.container, _styles2.default[width], clearFloatingChildren ? _styles2.default.clearfix : null);
	props.className = props.className + ' ' + className;
	return _react2.default.createElement(Component, props);
};

Container.propTypes = {
	clearFloatingChildren: _react.PropTypes.bool,
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]).isRequired,
	width: _react.PropTypes.oneOf(Object.keys(_sizes2.default)).isRequired
};
Container.defaultProps = {
	component: 'div',
	width: 'large'
};

module.exports = Container;

},{"./sizes":348,"./styles":349,"glamor":undefined,"react":undefined}],348:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	small: _theme2.default.container.size.small,
	medium: _theme2.default.container.size.medium,
	large: _theme2.default.container.size.large
};

},{"../../../theme":477}],349:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Container
// ==============================

/* eslint quote-props: ["error", "as-needed"] */

var _sizes = require('./sizes');

var _sizes2 = _interopRequireDefault(_sizes);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Prepare sizes
var sizeVariants = {};
Object.keys(_sizes2.default).forEach(function (size) {
	sizeVariants[size] = {
		maxWidth: _sizes2.default[size]
	};
});

/*
	Micro clearfix hack
	1.	The space content is one way to avoid an Opera bug when the
			contenteditable attribute is included anywhere else in the document.
			Otherwise it causes space to appear at the top and bottom of elements
			that are clearfixed.
	2.	The use of `table` rather than `block` is only necessary if using
			`:before` to contain the top-margins of child elements.
*/
var clearfixStyles = {
	clear: 'both',
	content: '" "', // 1
	display: 'table' // 2
};

module.exports = _extends({
	container: {
		marginLeft: 'auto',
		marginRight: 'auto',
		paddingLeft: _theme2.default.container.gutter,
		paddingRight: _theme2.default.container.gutter
	},

	// clear floating children
	clearfix: {
		':before': clearfixStyles,
		':after': clearfixStyles
	}

}, sizeVariants);

},{"../../../theme":477,"./sizes":348}],350:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /* eslint quote-props: ["error", "as-needed"] */

function DropdownButton(_ref) {
	var children = _ref.children,
	    props = _objectWithoutProperties(_ref, ['children']);

	return _react2.default.createElement(
		_Button2.default,
		props,
		children,
		_react2.default.createElement('span', { className: (0, _glamor.css)(classes.arrow) })
	);
};

// NOTE
// 1: take advantage of `currentColor` by leaving border top color undefined
// 2: even though the arrow is vertically centered, visually it appears too low
//    because of lowercase characters beside it
var classes = {
	arrow: {
		borderLeft: '0.3em solid transparent',
		borderRight: '0.3em solid transparent',
		borderTop: '0.3em solid', // 1
		display: 'inline-block',
		height: 0,
		marginTop: '-0.125em', // 2
		verticalAlign: 'middle',
		width: 0,

		// add spacing
		':first-child': {
			marginRight: '0.5em'
		},
		':last-child': {
			marginLeft: '0.5em'
		}
	}
};

module.exports = DropdownButton;

},{"../Button":340,"glamor":undefined,"react":undefined}],351:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _FormLabel = require('../FormLabel');

var _FormLabel2 = _interopRequireDefault(_FormLabel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FormField = function (_Component) {
	_inherits(FormField, _Component);

	function FormField() {
		_classCallCheck(this, FormField);

		var _this = _possibleConstructorReturn(this, (FormField.__proto__ || Object.getPrototypeOf(FormField)).call(this));

		_this.formFieldId = generateId();
		return _this;
	}

	_createClass(FormField, [{
		key: 'getChildContext',
		value: function getChildContext() {
			return {
				formFieldId: this.formFieldId
			};
		}
	}, {
		key: 'render',
		value: function render() {
			var _context = this.context,
			    _context$formLayout = _context.formLayout,
			    formLayout = _context$formLayout === undefined ? 'basic' : _context$formLayout,
			    labelWidth = _context.labelWidth;

			var _props = this.props,
			    aphroditeStyles = _props.aphroditeStyles,
			    children = _props.children,
			    className = _props.className,
			    cropLabel = _props.cropLabel,
			    htmlFor = _props.htmlFor,
			    label = _props.label,
			    offsetAbsentLabel = _props.offsetAbsentLabel,
			    props = _objectWithoutProperties(_props, ['aphroditeStyles', 'children', 'className', 'cropLabel', 'htmlFor', 'label', 'offsetAbsentLabel']);

			props.className = (0, _glamor.css)(_styles2.default.FormField, _styles2.default['FormField--form-layout-' + formLayout], offsetAbsentLabel ? _styles2.default['FormField--offset-absent-label'] : null, aphroditeStyles);
			if (className) {
				props.className += ' ' + className;
			}
			if (offsetAbsentLabel && labelWidth) {
				props.style = _extends({
					paddingLeft: labelWidth
				}, props.style);
			}

			// elements
			var componentLabel = label ? _react2.default.createElement(
				_FormLabel2.default,
				{ htmlFor: htmlFor, cropText: cropLabel },
				label
			) : null;

			return _react2.default.createElement(
				'div',
				_extends({}, props, { htmlFor: htmlFor }),
				componentLabel,
				children
			);
		}
	}]);

	return FormField;
}(_react.Component);

;

var stylesShape = {
	_definition: _react.PropTypes.object,
	_name: _react.PropTypes.string
};

FormField.contextTypes = {
	formLayout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline']),
	labelWidth: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};
FormField.childContextTypes = {
	formFieldId: _react.PropTypes.string
};
FormField.propTypes = {
	aphroditeStyles: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.shape(stylesShape)), _react.PropTypes.shape(stylesShape)]),
	children: _react.PropTypes.node,
	cropLabel: _react.PropTypes.bool,
	htmlFor: _react2.default.PropTypes.string,
	label: _react2.default.PropTypes.string,
	offsetAbsentLabel: _react2.default.PropTypes.bool
};

function generateId() {
	return Math.random().toString(36).substr(2, 9);
};

module.exports = FormField;

},{"../FormLabel":356,"./styles":352,"glamor":undefined,"react":undefined}],352:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } // ==============================
// Form Field
// ==============================

module.exports = {
	'FormField': {
		marginBottom: '1em',
		position: 'relative'
	},

	// when inside a horizontal form

	'FormField--form-layout-horizontal': _defineProperty({}, '@media (min-width: ' + _theme2.default.breakpoint.tabletLandscapeMin + ')', {
		display: 'table',
		tableLayout: 'fixed',
		width: '100%'
	}),

	// inside horizontal form
	// typically for use with submit button inside
	'FormField--offset-absent-label': {
		paddingLeft: _theme2.default.form.label.width
	},

	// when inside an inline form

	'FormField--form-layout-inline': {
		'display': 'inline-block',
		'paddingLeft': '0.25em',
		'paddingRight': '0.25em',
		'verticalAlign': 'top',

		':first-child': { paddingLeft: 0 },
		':last-child': { paddingRight: 0 }
	}
};

},{"../../../theme":477}],353:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _concatClassnames = require('../../../utils/concatClassnames');

var _concatClassnames2 = _interopRequireDefault(_concatClassnames);

var _noedit = require('./noedit');

var _noedit2 = _interopRequireDefault(_noedit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// NOTE must NOT be functional component to allow `refs`

var FormInput = function (_Component) {
	_inherits(FormInput, _Component);

	function FormInput() {
		_classCallCheck(this, FormInput);

		return _possibleConstructorReturn(this, (FormInput.__proto__ || Object.getPrototypeOf(FormInput)).apply(this, arguments));
	}

	_createClass(FormInput, [{
		key: 'blur',
		value: function blur() {
			this.target.blur();
		}
	}, {
		key: 'focus',
		value: function focus() {
			this.target.focus();
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    aphroditeStyles = _props.aphroditeStyles,
			    className = _props.className,
			    disabled = _props.disabled,
			    id = _props.id,
			    multiline = _props.multiline,
			    noedit = _props.noedit,
			    size = _props.size,
			    props = _objectWithoutProperties(_props, ['aphroditeStyles', 'className', 'disabled', 'id', 'multiline', 'noedit', 'size']);

			// NOTE return a different component for `noedit`


			if (noedit) return _react2.default.createElement(_noedit2.default, this.props);

			var _context = this.context,
			    formFieldId = _context.formFieldId,
			    formLayout = _context.formLayout;


			props.id = id || formFieldId;
			props.className = _glamor.css.apply(undefined, [_styles2.default.FormInput, _styles2.default['FormInput__size--' + size], disabled ? _styles2.default['FormInput--disabled'] : null, formLayout ? _styles2.default['FormInput--form-layout-' + formLayout] : null].concat(_toConsumableArray((0, _concatClassnames2.default)(aphroditeStyles))));
			if (className) {
				props.className += ' ' + className;
			}

			var setRef = function setRef(n) {
				return _this2.target = n;
			};
			var Tag = multiline ? 'textarea' : 'input';

			return _react2.default.createElement(Tag, _extends({
				ref: setRef,
				disabled: props.disabled
			}, props));
		}
	}]);

	return FormInput;
}(_react.Component);

;

var stylesShape = {
	_definition: _react.PropTypes.object,
	_name: _react.PropTypes.string
};

FormInput.propTypes = {
	aphroditeStyles: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.shape(stylesShape)), _react.PropTypes.shape(stylesShape)]),
	multiline: _react.PropTypes.bool,
	size: _react.PropTypes.oneOf(['default', 'small', 'large']),
	type: _react.PropTypes.string
};
FormInput.defaultProps = {
	size: 'default',
	type: 'text'
};
FormInput.contextTypes = {
	formLayout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline']),
	formFieldId: _react.PropTypes.string
};

module.exports = FormInput;

},{"../../../utils/concatClassnames":480,"./noedit":354,"./styles":355,"glamor":undefined,"react":undefined}],354:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _color = require('../../../utils/color');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/* eslint quote-props: ["error", "as-needed"] */

function FormInputNoedit(_ref) {
	var className = _ref.className,
	    Component = _ref.component,
	    cropText = _ref.cropText,
	    multiline = _ref.multiline,
	    noedit = _ref.noedit,
	    type = _ref.type,
	    props = _objectWithoutProperties(_ref, ['className', 'component', 'cropText', 'multiline', 'noedit', 'type']);

	props.className = (0, _glamor.css)(classes.noedit, cropText ? classes.cropText : null, multiline ? classes.multiline : null, props.href || props.onClick ? classes.anchor : null, className);

	return _react2.default.createElement(Component, props);
};

FormInputNoedit.propTypes = {
	component: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
	cropText: _react.PropTypes.bool
};
FormInputNoedit.defaultProps = {
	component: 'span'
};

var anchorHoverAndFocusStyles = {
	backgroundColor: (0, _color.fade)(_theme2.default.color.link, 10),
	borderColor: (0, _color.fade)(_theme2.default.color.link, 10),
	color: _theme2.default.color.link,
	outline: 'none',
	textDecoration: 'underline'
};

var classes = {
	noedit: {
		appearance: 'none',
		backgroundColor: _theme2.default.input.background.noedit,
		backgroundImage: 'none',
		borderColor: _theme2.default.input.border.color.noedit,
		borderRadius: _theme2.default.input.border.radius,
		borderStyle: 'solid',
		borderWidth: _theme2.default.input.border.width,
		color: _theme2.default.color.gray80,
		display: 'inline-block',
		height: _theme2.default.input.height,
		lineHeight: _theme2.default.input.lineHeight,
		padding: '0 ' + _theme2.default.input.paddingHorizontal,
		transition: 'border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s',
		verticalAlign: 'middle',

		// prevent empty inputs from collapsing by adding content
		':empty:before': {
			color: _theme2.default.color.gray40,
			content: '"(no value)"'
		}
	},

	multiline: {
		display: 'block',
		height: 'auto',
		lineHeight: '1.4',
		paddingBottom: '0.6em',
		paddingTop: '0.6em'
	},

	// indicate clickability when using an anchor
	anchor: {
		backgroundColor: (0, _color.fade)(_theme2.default.color.link, 5),
		borderColor: (0, _color.fade)(_theme2.default.color.link, 10),
		color: _theme2.default.color.link,
		marginRight: 5,
		minWidth: 0,
		textDecoration: 'none',

		':hover': anchorHoverAndFocusStyles,
		':focus': anchorHoverAndFocusStyles
	}
};

module.exports = FormInputNoedit;

},{"../../../theme":477,"../../../utils/color":479,"glamor":undefined,"react":undefined}],355:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	'FormInput': {
		'appearance': 'none',
		'backgroundColor': _theme2.default.input.background.default,
		'backgroundImage': 'none',
		'borderColor': _theme2.default.input.border.color.default,
		'borderRadius': _theme2.default.input.border.radius,
		'borderStyle': 'solid',
		'borderWidth': _theme2.default.input.border.width,
		'boxShadow': _theme2.default.input.boxShadow,
		'color': 'inherit', // FIXME
		'display': 'block',
		'height': _theme2.default.input.height,
		'lineHeight': _theme2.default.input.lineHeight,
		'padding': '0 ' + _theme2.default.input.paddingHorizontal,
		'transition': 'border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s',
		'width': '100%',

		':hover': {
			borderColor: _theme2.default.input.border.color.hover,
			outline: 0
		},
		':focus': {
			borderColor: _theme2.default.input.border.color.focus,
			boxShadow: _theme2.default.input.boxShadowFocus,
			outline: 0
		}
	},
	'FormInput--disabled': {
		backgroundColor: _theme2.default.input.background.disabled,
		pointerEvents: 'none'
	},

	// sizes
	'FormInput__size--small': {
		fontSize: _theme2.default.font.size.small
	},
	'FormInput__size--large': {
		fontSize: _theme2.default.font.size.large
	}
}; // ==============================
// Form Input
// ==============================

},{"../../../theme":477}],356:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function FormLabel(_ref, _ref2) {
	var formFieldId = _ref2.formFieldId,
	    formLayout = _ref2.formLayout,
	    labelWidth = _ref2.labelWidth;

	var aphroditeStyles = _ref.aphroditeStyles,
	    className = _ref.className,
	    Component = _ref.component,
	    cropText = _ref.cropText,
	    htmlFor = _ref.htmlFor,
	    props = _objectWithoutProperties(_ref, ['aphroditeStyles', 'className', 'component', 'cropText', 'htmlFor']);

	props.htmlFor = htmlFor || formFieldId;
	props.className = (0, _glamor.css)(_styles2.default.FormLabel, formLayout ? _styles2.default['FormLabel--form-layout-' + formLayout] : null, cropText ? _styles2.default['FormLabel--crop-text'] : null, aphroditeStyles);
	if (className) {
		props.className += ' ' + className;
	}
	if (labelWidth) {
		props.style = _extends({
			width: labelWidth
		}, props.style);
	}

	return _react2.default.createElement(Component, props);
};

var stylesShape = {
	_definition: _react.PropTypes.object,
	_name: _react.PropTypes.string
};

FormLabel.propTypes = {
	aphroditeStyles: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.shape(stylesShape)), _react.PropTypes.shape(stylesShape)]),
	component: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
	cropText: _react.PropTypes.bool
};
FormLabel.defaultProps = {
	component: 'label'
};
FormLabel.contextTypes = {
	formLayout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline']),
	formFieldId: _react.PropTypes.string,
	labelWidth: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};

module.exports = FormLabel;

},{"./styles":357,"glamor":undefined,"react":undefined}],357:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } // ==============================
// Form Label
// ==============================

module.exports = {
	'FormLabel': {
		color: _theme2.default.form.label.color,
		fontSize: _theme2.default.form.label.fontSize,
		fontWeight: _theme2.default.form.label.fontWeight,
		display: 'inline-block',
		marginBottom: '0.5em'
	},

	// when inside a horizontal form

	'FormLabel--form-layout-horizontal': _defineProperty({}, '@media (min-width: ' + _theme2.default.breakpoint.tabletLandscapeMin + ')', {
		display: 'table-cell',
		lineHeight: _theme2.default.component.lineHeight, // fix
		marginBottom: 0,
		paddingRight: 5,
		verticalAlign: 'top',
		width: _theme2.default.form.label.width
	}),

	// crop long text

	'FormLabel--crop-text': {
		overflow: 'hidden',
		textOverflow: 'ellipsis',
		whiteSpace: 'nowrap'
	}
};

},{"../../../theme":477}],358:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function FormNote(_ref) {
	var className = _ref.className,
	    children = _ref.children,
	    Component = _ref.component,
	    html = _ref.html,
	    props = _objectWithoutProperties(_ref, ['className', 'children', 'component', 'html']);

	props.className = (0, _glamor.css)(_styles2.default.note, className);

	// Property Violation
	if (children && html) {
		console.error('Warning: FormNote cannot render `children` and `html`. You must provide one or the other.');
	}

	return html ? _react2.default.createElement(Component, _extends({}, props, { dangerouslySetInnerHTML: { __html: html } })) : _react2.default.createElement(
		Component,
		props,
		children
	);
};
FormNote.propTypes = {
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
	html: _react.PropTypes.string
};
FormNote.defaultProps = {
	component: 'div'
};

module.exports = FormNote;

},{"./styles":359,"glamor":undefined,"react":undefined}],359:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	note: {
		color: _theme2.default.form.note.color,
		fontSize: _theme2.default.form.note.fontSize,
		marginTop: _theme2.default.spacing.small
	}
}; // ==============================
// Form Note
// ==============================

},{"../../../theme":477}],360:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FormSelect = function (_Component) {
	_inherits(FormSelect, _Component);

	function FormSelect() {
		_classCallCheck(this, FormSelect);

		return _possibleConstructorReturn(this, (FormSelect.__proto__ || Object.getPrototypeOf(FormSelect)).apply(this, arguments));
	}

	_createClass(FormSelect, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    children = _props.children,
			    id = _props.id,
			    options = _props.options,
			    props = _objectWithoutProperties(_props, ['children', 'id', 'options']);

			var formFieldId = this.context.formFieldId;


			props.className = (0, _glamor.css)(_styles2.default.select, props.disabled ? _styles2.default['select--disabled'] : null);
			props.id = id || formFieldId;

			// Property Violation
			if (options && children) {
				console.error('Warning: FormSelect cannot render `children` and `options`. You must provide one or the other.');
			}

			return _react2.default.createElement(
				'div',
				{ className: (0, _glamor.css)(_styles2.default.container) },
				options ? _react2.default.createElement(
					'select',
					props,
					options.map(function (opt) {
						return _react2.default.createElement(
							'option',
							{ key: opt.value, value: opt.value },
							opt.label
						);
					})
				) : _react2.default.createElement(
					'select',
					props,
					children
				),
				_react2.default.createElement(
					'span',
					{ className: (0, _glamor.css)(_styles2.default.arrows, props.disabled ? _styles2.default['arrows--disabled'] : null) },
					_react2.default.createElement('span', { className: (0, _glamor.css)(_styles2.default.arrow, _styles2.default.arrowTop) }),
					_react2.default.createElement('span', { className: (0, _glamor.css)(_styles2.default.arrow, _styles2.default.arrowBottom) })
				)
			);
		}
	}]);

	return FormSelect;
}(_react.Component);

;

FormSelect.contextTypes = {
	formFieldId: _react.PropTypes.string
};
FormSelect.propTypes = {
	onChange: _react.PropTypes.func.isRequired,
	options: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
		label: _react2.default.PropTypes.string,
		value: _react2.default.PropTypes.string
	})),
	value: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};

module.exports = FormSelect;

},{"./styles":361,"glamor":undefined,"react":undefined}],361:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _color = require('../../../utils/color');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// ==============================
// Form Select
// ==============================

/* eslint quote-props: ["error", "as-needed"] */

module.exports = {
	container: {
		position: 'relative'
	},

	// select node
	select: {
		appearance: 'none',
		backgroundColor: _theme2.default.input.background.default,
		backgroundImage: 'none',
		borderColor: _theme2.default.input.border.color.default,
		borderBottomColor: (0, _color.darken)(_theme2.default.input.border.color.default, 4),
		borderTopColor: (0, _color.lighten)(_theme2.default.input.border.color.default, 4),
		borderRadius: _theme2.default.input.border.radius,
		borderStyle: 'solid',
		borderWidth: _theme2.default.input.border.width,
		boxShadow: _theme2.default.select.boxShadow,
		color: 'inherit', // FIXME
		display: 'block',
		height: _theme2.default.input.height,
		lineHeight: _theme2.default.input.lineHeight,
		padding: '0 ' + _theme2.default.input.paddingHorizontal,
		transition: 'border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s',
		width: '100%',

		':hover': {
			borderColor: _theme2.default.input.border.color.hover,
			outline: 0
		},
		':focus': {
			borderColor: _theme2.default.input.border.color.focus,
			boxShadow: _theme2.default.input.boxShadowFocus,
			outline: 0
		}
	},
	'select--disabled': {
		backgroundColor: _theme2.default.input.background.disabled,
		pointerEvents: 'none'
	},

	// arrows
	arrows: {
		alignItems: 'center',
		display: 'flex',
		flexDirection: 'column',
		height: _theme2.default.input.height,
		justifyContent: 'center',
		pointerEvents: 'none',
		position: 'absolute',
		right: 0,
		top: 0,
		width: _theme2.default.input.height
	},
	arrow: {
		borderLeft: '0.3em solid transparent',
		borderRight: '0.3em solid transparent',
		display: 'inline-block',
		height: 0,
		verticalAlign: 'middle',
		width: 0,
		zIndex: 1
	},
	arrowTop: {
		borderBottom: '0.3em solid',
		marginBottom: '0.1em'
	},
	arrowBottom: {
		borderTop: '0.3em solid',
		marginTop: '0.1em'
	}
};

},{"../../../theme":477,"../../../utils/color":479}],362:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Form = function (_Component) {
	_inherits(Form, _Component);

	function Form() {
		_classCallCheck(this, Form);

		return _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).apply(this, arguments));
	}

	_createClass(Form, [{
		key: 'getChildContext',
		value: function getChildContext() {
			return {
				formLayout: this.props.layout,
				labelWidth: this.props.labelWidth
			};
		}
	}, {
		key: 'render',
		value: function render() {
			// NOTE `labelWidth` is declared to remove it from `props`, though never used
			var _props = this.props,
			    className = _props.className,
			    Component = _props.component,
			    labelWidth = _props.labelWidth,
			    layout = _props.layout,
			    props = _objectWithoutProperties(_props, ['className', 'component', 'labelWidth', 'layout']);

			props.className = (0, _glamor.css)(_styles2.default.Form, _styles2.default['Form__' + layout], className);

			return _react2.default.createElement(Component, props);
		}
	}]);

	return Form;
}(_react.Component);

;

Form.childContextTypes = {
	formLayout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline']),
	labelWidth: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};
Form.propTypes = {
	children: _react.PropTypes.node.isRequired,
	component: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
	layout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline'])
};
Form.defaultProps = {
	component: 'form',
	layout: 'basic'
};

module.exports = Form;

},{"./styles":363,"glamor":undefined,"react":undefined}],363:[function(require,module,exports){
"use strict";

// ==============================
// Form
// ==============================

module.exports = {
	Form: {}
};

},{}],364:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _Glyph = require('../Glyph');

var _Glyph2 = _interopRequireDefault(_Glyph);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /* eslint quote-props: ["error", "as-needed"] */

function GlyphButton(_ref) {
	var children = _ref.children,
	    glyph = _ref.glyph,
	    glyphColor = _ref.glyphColor,
	    glyphSize = _ref.glyphSize,
	    glyphStyle = _ref.glyphStyle,
	    position = _ref.position,
	    props = _objectWithoutProperties(_ref, ['children', 'glyph', 'glyphColor', 'glyphSize', 'glyphStyle', 'position']);

	var isDefault = position === 'default';
	var isLeft = position === 'left';
	var isRight = position === 'right';

	var offset = {};
	if (isLeft) offset.marginRight = '0.5em';
	if (isRight) offset.marginLeft = '0.5em';

	var glyphStyles = _extends({}, offset, glyphStyle);

	var icon = _react2.default.createElement(_Glyph2.default, {
		aphroditeStyles: classes.glyph,
		color: glyphColor,
		name: glyph,
		size: glyphSize,
		style: glyphStyles
	});

	return _react2.default.createElement(
		_Button2.default,
		props,
		(isDefault || isLeft) && icon,
		children,
		isRight && icon
	);
};

// For props "glyph", "glyphColor", and "glyphSize":
// prop type validation will occur within the Glyph component, no need to
// duplicate, just pass it through.
GlyphButton.propTypes = {
	glyph: _react.PropTypes.string,
	glyphColor: _react.PropTypes.string,
	glyphSize: _react.PropTypes.string,
	glyphStyle: _react.PropTypes.object,
	position: _react.PropTypes.oneOf(['default', 'left', 'right'])
};
GlyphButton.defaultProps = {
	glyphStyle: {},
	position: 'default' // no margin, assumes no children
};

var classes = {
	glyph: {
		display: 'inline-block',
		marginTop: '-0.125em', // fix icon alignment
		verticalAlign: 'middle'
	}
};

module.exports = GlyphButton;

},{"../Button":340,"../Glyph":367,"react":undefined}],365:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FormField = require('../FormField');

var _FormField2 = _interopRequireDefault(_FormField);

var _Glyph = require('../Glyph');

var _Glyph2 = _interopRequireDefault(_Glyph);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /* eslint quote-props: ["error", "as-needed"] */

function GlyphField(_ref) {
	var children = _ref.children,
	    glyph = _ref.glyph,
	    glyphColor = _ref.glyphColor,
	    glyphSize = _ref.glyphSize,
	    position = _ref.position,
	    props = _objectWithoutProperties(_ref, ['children', 'glyph', 'glyphColor', 'glyphSize', 'position']);

	var isLeft = position === 'left';
	var isRight = position === 'right';

	var glyphStyles = {};
	if (isLeft) glyphStyles.marginRight = '0.5em';
	if (isRight) glyphStyles.marginLeft = '0.5em';

	var icon = _react2.default.createElement(_Glyph2.default, {
		aphroditeStyles: classes.glyph,
		color: glyphColor,
		name: glyph,
		size: glyphSize,
		style: glyphStyles
	});

	return _react2.default.createElement(
		_FormField2.default,
		_extends({ aphroditeStyles: classes.wrapper }, props),
		isLeft && icon,
		children,
		isRight && icon
	);
};

// For props "glyph", "glyphColor", and "glyphSize":
// prop type validation will occur within the Glyph component, no need to
// duplicate, just pass it through.
GlyphField.propTypes = {
	glyph: _react.PropTypes.string,
	glyphColor: _react.PropTypes.string,
	glyphSize: _react.PropTypes.string,
	position: _react.PropTypes.oneOf(['left', 'right'])
};
GlyphField.defaultProps = {
	position: 'left'
};

var classes = {
	wrapper: {
		alignItems: 'center',
		display: 'flex'
	},
	glyph: {
		display: 'inline-block',
		marginTop: '-0.125em', // fix icon alignment
		verticalAlign: 'middle'
	}
};

module.exports = GlyphField;

},{"../FormField":351,"../Glyph":367,"react":undefined}],366:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	danger: _theme2.default.glyph.color.danger,
	inherit: _theme2.default.glyph.color.inherit,
	inverted: _theme2.default.glyph.color.inverted,
	primary: _theme2.default.glyph.color.primary,
	success: _theme2.default.glyph.color.success,
	warning: _theme2.default.glyph.color.warning
};

},{"../../../theme":477}],367:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _octicons = require('./octicons');

var _octicons2 = _interopRequireDefault(_octicons);

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _sizes = require('./sizes');

var _sizes2 = _interopRequireDefault(_sizes);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// FIXME static octicon classes leaning on Elemental to avoid duplicate
// font and CSS; inflating the project size

function Glyph(_ref) {
	var aphroditeStyles = _ref.aphroditeStyles,
	    className = _ref.className,
	    color = _ref.color,
	    Component = _ref.component,
	    name = _ref.name,
	    size = _ref.size,
	    style = _ref.style,
	    props = _objectWithoutProperties(_ref, ['aphroditeStyles', 'className', 'color', 'component', 'name', 'size', 'style']);

	var colorIsValidType = Object.keys(_colors2.default).includes(color);
	props.className = (0, _glamor.css)(_styles2.default.glyph, colorIsValidType && _styles2.default['color__' + color], _styles2.default['size__' + size], aphroditeStyles) + (' ' + _octicons2.default[name]);
	if (className) {
		props.className += ' ' + className;
	}

	// support random color strings
	props.style = _extends({
		color: !colorIsValidType ? color : null
	}, style);

	return _react2.default.createElement(Component, props);
};

Glyph.propTypes = {
	aphroditeStyles: _react.PropTypes.shape({
		_definition: _react.PropTypes.object,
		_name: _react.PropTypes.string
	}),
	color: _react.PropTypes.oneOfType([_react.PropTypes.oneOf(Object.keys(_colors2.default)), _react.PropTypes.string] // support random color strings
	),
	name: _react.PropTypes.oneOf(Object.keys(_octicons2.default)).isRequired,
	size: _react.PropTypes.oneOf(Object.keys(_sizes2.default))
};
Glyph.defaultProps = {
	component: 'i',
	color: 'inherit',
	size: 'small'
};

module.exports = Glyph;

},{"./colors":366,"./octicons":368,"./sizes":369,"./styles":370,"glamor":undefined,"react":undefined}],368:[function(require,module,exports){
'use strict';

/* eslint quote-props: ["error", "as-needed"] */

module.exports = {
	alert: 'octicon octicon-alert',
	'arrow-down': 'octicon octicon-arrow-down',
	'arrow-left': 'octicon octicon-arrow-left',
	'arrow-right': 'octicon octicon-arrow-right',
	'arrow-small-down': 'octicon octicon-arrow-small-down',
	'arrow-small-left': 'octicon octicon-arrow-small-left',
	'arrow-small-right': 'octicon octicon-arrow-small-right',
	'arrow-small-up': 'octicon octicon-arrow-small-up',
	'arrow-up': 'octicon octicon-arrow-up',
	microscope: 'octicon octicon-microscope',
	beaker: 'octicon octicon-beaker',
	bell: 'octicon octicon-bell',
	book: 'octicon octicon-book',
	bookmark: 'octicon octicon-bookmark',
	briefcase: 'octicon octicon-briefcase',
	broadcast: 'octicon octicon-broadcast',
	browser: 'octicon octicon-browser',
	bug: 'octicon octicon-bug',
	calendar: 'octicon octicon-calendar',
	check: 'octicon octicon-check',
	checklist: 'octicon octicon-checklist',
	'chevron-down': 'octicon octicon-chevron-down',
	'chevron-left': 'octicon octicon-chevron-left',
	'chevron-right': 'octicon octicon-chevron-right',
	'chevron-up': 'octicon octicon-chevron-up',
	'circle-slash': 'octicon octicon-circle-slash',
	'circuit-board': 'octicon octicon-circuit-board',
	clippy: 'octicon octicon-clippy',
	clock: 'octicon octicon-clock',
	'cloud-download': 'octicon octicon-cloud-download',
	'cloud-upload': 'octicon octicon-cloud-upload',
	code: 'octicon octicon-code',
	'color-mode': 'octicon octicon-color-mode',
	'comment-add': 'octicon octicon-comment-add',
	comment: 'octicon octicon-comment',
	'comment-discussion': 'octicon octicon-comment-discussion',
	'credit-card': 'octicon octicon-credit-card',
	dash: 'octicon octicon-dash',
	dashboard: 'octicon octicon-dashboard',
	database: 'octicon octicon-database',
	clone: 'octicon octicon-clone',
	'desktop-download': 'octicon octicon-desktop-download',
	'device-camera': 'octicon octicon-device-camera',
	'device-camera-video': 'octicon octicon-device-camera-video',
	'device-desktop': 'octicon octicon-device-desktop',
	'device-mobile': 'octicon octicon-device-mobile',
	diff: 'octicon octicon-diff',
	'diff-added': 'octicon octicon-diff-added',
	'diff-ignored': 'octicon octicon-diff-ignored',
	'diff-modified': 'octicon octicon-diff-modified',
	'diff-removed': 'octicon octicon-diff-removed',
	'diff-renamed': 'octicon octicon-diff-renamed',
	ellipsis: 'octicon octicon-ellipsis',
	'eye-unwatch': 'octicon octicon-eye-unwatch',
	'eye-watch': 'octicon octicon-eye-watch',
	eye: 'octicon octicon-eye',
	'file-binary': 'octicon octicon-file-binary',
	'file-code': 'octicon octicon-file-code',
	'file-directory': 'octicon octicon-file-directory',
	'file-media': 'octicon octicon-file-media',
	'file-pdf': 'octicon octicon-file-pdf',
	'file-submodule': 'octicon octicon-file-submodule',
	'file-symlink-directory': 'octicon octicon-file-symlink-directory',
	'file-symlink-file': 'octicon octicon-file-symlink-file',
	'file-text': 'octicon octicon-file-text',
	'file-zip': 'octicon octicon-file-zip',
	flame: 'octicon octicon-flame',
	fold: 'octicon octicon-fold',
	gear: 'octicon octicon-gear',
	gift: 'octicon octicon-gift',
	gist: 'octicon octicon-gist',
	'gist-secret': 'octicon octicon-gist-secret',
	'git-branch-create': 'octicon octicon-git-branch-create',
	'git-branch-delete': 'octicon octicon-git-branch-delete',
	'git-branch': 'octicon octicon-git-branch',
	'git-commit': 'octicon octicon-git-commit',
	'git-compare': 'octicon octicon-git-compare',
	'git-merge': 'octicon octicon-git-merge',
	'git-pull-request-abandoned': 'octicon octicon-git-pull-request-abandoned',
	'git-pull-request': 'octicon octicon-git-pull-request',
	globe: 'octicon octicon-globe',
	graph: 'octicon octicon-graph',
	heart: 'octicon octicon-heart',
	history: 'octicon octicon-history',
	home: 'octicon octicon-home',
	'horizontal-rule': 'octicon octicon-horizontal-rule',
	hubot: 'octicon octicon-hubot',
	inbox: 'octicon octicon-inbox',
	info: 'octicon octicon-info',
	'issue-closed': 'octicon octicon-issue-closed',
	'issue-opened': 'octicon octicon-issue-opened',
	'issue-reopened': 'octicon octicon-issue-reopened',
	jersey: 'octicon octicon-jersey',
	key: 'octicon octicon-key',
	keyboard: 'octicon octicon-keyboard',
	law: 'octicon octicon-law',
	'light-bulb': 'octicon octicon-light-bulb',
	link: 'octicon octicon-link',
	'link-external': 'octicon octicon-link-external',
	'list-ordered': 'octicon octicon-list-ordered',
	'list-unordered': 'octicon octicon-list-unordered',
	location: 'octicon octicon-location',
	'gist-private': 'octicon octicon-gist-private',
	'mirror-private': 'octicon octicon-mirror-private',
	'git-fork-private': 'octicon octicon-git-fork-private',
	lock: 'octicon octicon-lock',
	'logo-github': 'octicon octicon-logo-github',
	mail: 'octicon octicon-mail',
	'mail-read': 'octicon octicon-mail-read',
	'mail-reply': 'octicon octicon-mail-reply',
	'mark-github': 'octicon octicon-mark-github',
	markdown: 'octicon octicon-markdown',
	megaphone: 'octicon octicon-megaphone',
	mention: 'octicon octicon-mention',
	milestone: 'octicon octicon-milestone',
	'mirror-public': 'octicon octicon-mirror-public',
	mirror: 'octicon octicon-mirror',
	'mortar-board': 'octicon octicon-mortar-board',
	mute: 'octicon octicon-mute',
	'no-newline': 'octicon octicon-no-newline',
	octoface: 'octicon octicon-octoface',
	organization: 'octicon octicon-organization',
	package: 'octicon octicon-package',
	paintcan: 'octicon octicon-paintcan',
	pencil: 'octicon octicon-pencil',
	'person-add': 'octicon octicon-person-add',
	'person-follow': 'octicon octicon-person-follow',
	person: 'octicon octicon-person',
	pin: 'octicon octicon-pin',
	plug: 'octicon octicon-plug',
	'repo-create': 'octicon octicon-repo-create',
	'gist-new': 'octicon octicon-gist-new',
	'file-directory-create': 'octicon octicon-file-directory-create',
	'file-add': 'octicon octicon-file-add',
	plus: 'octicon octicon-plus',
	'primitive-dot': 'octicon octicon-primitive-dot',
	'primitive-square': 'octicon octicon-primitive-square',
	pulse: 'octicon octicon-pulse',
	question: 'octicon octicon-question',
	quote: 'octicon octicon-quote',
	'radio-tower': 'octicon octicon-radio-tower',
	'repo-delete': 'octicon octicon-repo-delete',
	repo: 'octicon octicon-repo',
	'repo-clone': 'octicon octicon-repo-clone',
	'repo-force-push': 'octicon octicon-repo-force-push',
	'gist-fork': 'octicon octicon-gist-fork',
	'repo-forked': 'octicon octicon-repo-forked',
	'repo-pull': 'octicon octicon-repo-pull',
	'repo-push': 'octicon octicon-repo-push',
	rocket: 'octicon octicon-rocket',
	rss: 'octicon octicon-rss',
	ruby: 'octicon octicon-ruby',
	'screen-full': 'octicon octicon-screen-full',
	'screen-normal': 'octicon octicon-screen-normal',
	'search-save': 'octicon octicon-search-save',
	search: 'octicon octicon-search',
	server: 'octicon octicon-server',
	settings: 'octicon octicon-settings',
	shield: 'octicon octicon-shield',
	'log-in': 'octicon octicon-log-in',
	'sign-in': 'octicon octicon-sign-in',
	'log-out': 'octicon octicon-log-out',
	'sign-out': 'octicon octicon-sign-out',
	squirrel: 'octicon octicon-squirrel',
	'star-add': 'octicon octicon-star-add',
	'star-delete': 'octicon octicon-star-delete',
	star: 'octicon octicon-star',
	stop: 'octicon octicon-stop',
	'repo-sync': 'octicon octicon-repo-sync',
	sync: 'octicon octicon-sync',
	'tag-remove': 'octicon octicon-tag-remove',
	'tag-add': 'octicon octicon-tag-add',
	tag: 'octicon octicon-tag',
	telescope: 'octicon octicon-telescope',
	terminal: 'octicon octicon-terminal',
	'three-bars': 'octicon octicon-three-bars',
	thumbsdown: 'octicon octicon-thumbsdown',
	thumbsup: 'octicon octicon-thumbsup',
	tools: 'octicon octicon-tools',
	trashcan: 'octicon octicon-trashcan',
	'triangle-down': 'octicon octicon-triangle-down',
	'triangle-left': 'octicon octicon-triangle-left',
	'triangle-right': 'octicon octicon-triangle-right',
	'triangle-up': 'octicon octicon-triangle-up',
	unfold: 'octicon octicon-unfold',
	unmute: 'octicon octicon-unmute',
	versions: 'octicon octicon-versions',
	watch: 'octicon octicon-watch',
	'remove-close': 'octicon octicon-remove-close',
	x: 'octicon octicon-x',
	zap: 'octicon octicon-zap'
};

},{}],369:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	small: _theme2.default.glyph.size.small,
	medium: _theme2.default.glyph.size.medium,
	large: _theme2.default.glyph.size.large
};

},{"../../../theme":477}],370:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Glyph
// ==============================

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _sizes = require('./sizes');

var _sizes2 = _interopRequireDefault(_sizes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Prepare variants
var colorVariants = {};
Object.keys(_colors2.default).forEach(function (color) {
	colorVariants['color__' + color] = {
		color: _colors2.default[color]
	};
});

// Prepare sizes
var sizeVariants = {};
Object.keys(_sizes2.default).forEach(function (size) {
	sizeVariants['size__' + size] = {
		fontSize: _sizes2.default[size]
	};
});

module.exports = _extends({
	glyph: {}

}, colorVariants, sizeVariants);

},{"./colors":366,"./sizes":369}],371:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WIDTHS = {
	'one-whole': '100%',
	'one-half': '50%',
	'one-third': '33.33%',
	'two-thirds': '66.66%',
	'one-quarter': '25%',
	'three-quarters': '75%',

	'one-fifth': '20%',
	'two-fifths': '40%',
	'three-fifths': '60%',
	'four-fifths': '80%',

	'one-sixth': '16.66%',
	'five-sixths': '83.33%'
};

var GridCol = function GridCol(props, context) {
	var gutter = props.gutter || context.gutter;
	var xsmall = props.xsmall || context.xsmall;
	var small = props.small || context.small;
	var medium = props.medium || context.medium;
	var large = props.large || context.large;

	var className = (0, _glamor.css)(classes['xsmall-' + xsmall], classes['small-' + small], classes['medium-' + medium], classes['large-' + large]);

	var componentClassName = '' + className + (props.className ? ' ' + props.className : '');
	var componentStyles = gutter ? {
		paddingLeft: gutter / 2,
		paddingRight: gutter / 2
	} : {};

	return _react2.default.createElement(
		'div',
		{ className: componentClassName, style: componentStyles },
		props.children
	);
};

GridCol.contextTypes = {
	gutter: _react.PropTypes.number,
	large: _react.PropTypes.string,
	medium: _react.PropTypes.string,
	small: _react.PropTypes.string,
	xsmall: _react.PropTypes.string
};

GridCol.propTypes = {
	gutter: _react.PropTypes.number,
	large: _react.PropTypes.string,
	medium: _react.PropTypes.string,
	small: _react.PropTypes.string,
	xsmall: _react.PropTypes.string
};

var classes = _extends({}, prepareWidths('xsmall', WIDTHS), prepareWidths('small', WIDTHS), prepareWidths('medium', WIDTHS), prepareWidths('large', WIDTHS));

/* eslint-disable guard-for-in */
function prepareWidths(prefix, obj) {
	var classes = {};
	switch (prefix) {
		case 'small':
			for (var prop in obj) {
				classes[prefix + '-' + prop] = _defineProperty({}, '@media (min-width: ' + _theme2.default.breakpoint.tabletPortraitMin + ')', {
					width: obj[prop]
				});
			}
			break;
		case 'medium':
			for (var _prop in obj) {
				classes[prefix + '-' + _prop] = _defineProperty({}, '@media (min-width: ' + _theme2.default.breakpoint.tabletLandscapeMin + ')', {
					width: obj[_prop]
				});
			}
			break;
		case 'large':
			for (var _prop2 in obj) {
				classes[prefix + '-' + _prop2] = _defineProperty({}, '@media (min-width: ' + _theme2.default.breakpoint.desktopMin + ')', {
					width: obj[_prop2]
				});
			}
			break;
		default:
			for (var _prop3 in obj) {
				classes[prefix + '-' + _prop3] = {
					width: obj[_prop3]
				};
			}

	}

	return classes;
};

module.exports = GridCol;

},{"../../../theme":477,"glamor":undefined,"react":undefined}],372:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GridRow = function (_Component) {
	_inherits(GridRow, _Component);

	function GridRow() {
		_classCallCheck(this, GridRow);

		return _possibleConstructorReturn(this, (GridRow.__proto__ || Object.getPrototypeOf(GridRow)).apply(this, arguments));
	}

	_createClass(GridRow, [{
		key: 'getChildContext',
		value: function getChildContext() {
			return {
				gutter: this.props.gutter,
				xsmall: this.props.xsmall,
				small: this.props.small,
				medium: this.props.medium,
				large: this.props.large
			};
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    children = _props.children,
			    className = _props.className,
			    gutter = _props.gutter,
			    _props$styles = _props.styles,
			    styles = _props$styles === undefined ? {} : _props$styles;


			var componentClassName = '' + (0, _glamor.css)(classes.grid) + (className ? ' ' + className : '');
			var componentStyles = _extends(styles, {
				marginLeft: gutter / -2,
				marginRight: gutter / -2
			});

			return _react2.default.createElement(
				'div',
				{ className: componentClassName, style: componentStyles },
				children
			);
		}
	}]);

	return GridRow;
}(_react.Component);

;

GridRow.childContextTypes = {
	gutter: _react.PropTypes.number,
	xsmall: _react.PropTypes.string,
	small: _react.PropTypes.string,
	medium: _react.PropTypes.string,
	large: _react.PropTypes.string
};

GridRow.propTypes = {
	gutter: _react.PropTypes.number,
	large: _react.PropTypes.string,
	medium: _react.PropTypes.string,
	small: _react.PropTypes.string,
	xsmall: _react.PropTypes.string
};

GridRow.defaultProps = {
	gutter: 0,
	xsmall: 'one-whole'
};

var classes = {
	grid: {
		display: 'flex',
		flexWrap: 'wrap'
	}
};

module.exports = GridRow;

},{"glamor":undefined,"react":undefined}],373:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Row = exports.Col = undefined;

var _GridCol = require('../GridCol');

var _GridCol2 = _interopRequireDefault(_GridCol);

var _GridRow = require('../GridRow');

var _GridRow2 = _interopRequireDefault(_GridRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.Col = _GridCol2.default;
exports.Row = _GridRow2.default;

},{"../GridCol":371,"../GridRow":372}],374:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// NOTE: Inline Group Section accepts a single child

function InlineGroupSection(_ref) {
	var active = _ref.active,
	    aphroditeStyles = _ref.aphroditeStyles,
	    children = _ref.children,
	    className = _ref.className,
	    contiguous = _ref.contiguous,
	    grow = _ref.grow,
	    position = _ref.position,
	    props = _objectWithoutProperties(_ref, ['active', 'aphroditeStyles', 'children', 'className', 'contiguous', 'grow', 'position']);

	// evaluate position
	var separate = position === 'last' || position === 'middle';

	// A `contiguous` section must manipulate it's child directly
	// A separate (default) section just wraps the child
	return contiguous ? (0, _react.cloneElement)(children, _extends({
		aphroditeStyles: [_styles2.default.contiguous, _styles2.default['contiguous__' + position], active ? _styles2.default.active : null, grow ? _styles2.default.grow : null, aphroditeStyles]
	}, props)) : _react2.default.createElement(
		'div',
		_extends({ className: (0, _glamor.css)(!!grow && _styles2.default.grow, !!separate && _styles2.default.separate, aphroditeStyles) }, props),
		children
	);
};

InlineGroupSection.propTypes = {
	active: _react.PropTypes.bool, // buttons only
	children: _react.PropTypes.element.isRequired,
	contiguous: _react.PropTypes.bool,
	grow: _react.PropTypes.bool,
	position: _react.PropTypes.oneOf(['first', 'last', 'middle', 'only'])
};

module.exports = InlineGroupSection;

},{"./styles":375,"glamor":undefined,"react":undefined}],375:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	// pull active elements up
	active: {
		position: 'relative'
	},

	// stretch to fill available width
	grow: {
		flex: '1 1 0'
	},

	// separate applicable non-contiguous elements
	separate: {
		paddingLeft: '0.75em'
	},

	// Contiguous: manipulate children directly

	// pull focused contiguous elements up
	contiguous: {
		':focus': {
			position: 'relative',
			zIndex: 1
		}
	},

	// position
	contiguous__middle: {
		borderRadius: 0,
		marginLeft: _theme2.default.button.borderWidth * -1
	},
	contiguous__first: {
		borderBottomRightRadius: '0 !important',
		borderTopRightRadius: '0 !important'
	},
	contiguous__last: {
		borderBottomLeftRadius: '0 !important',
		borderTopLeftRadius: '0 !important',
		marginLeft: _theme2.default.button.borderWidth * -1
	}
}; // ==============================
// Inline Group: Section
// ==============================

// Takes only FormInput and Button as children, rendering them as a
// tidy inline array

},{"../../../theme":477}],376:[function(require,module,exports){
'use strict';

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// NOTE: only accepts InlineGroupSection as a single child

function InlineGroup(_ref) {
	var aphroditeStyles = _ref.aphroditeStyles,
	    block = _ref.block,
	    children = _ref.children,
	    className = _ref.className,
	    Component = _ref.component,
	    contiguous = _ref.contiguous,
	    props = _objectWithoutProperties(_ref, ['aphroditeStyles', 'block', 'children', 'className', 'component', 'contiguous']);

	// prepare group className
	props.className = (0, _glamor.css)(classes.group, !!block && classes.block, aphroditeStyles);
	if (className) {
		props.className += ' ' + className;
	}

	// convert children to an array and filter out falsey values
	var buttons = _react.Children.toArray(children).filter(function (i) {
		return i;
	});

	// normalize the count
	var count = buttons.length - 1;

	// clone children and apply classNames that aphrodite can target
	props.children = buttons.map(function (c, idx) {
		if (!c) return null;

		var isOnlyChild = !count;
		var isFirstChild = !isOnlyChild && idx === 0;
		var isLastChild = !isOnlyChild && idx === count;
		var isMiddleChild = !isOnlyChild && !isFirstChild && !isLastChild;

		var position = void 0;
		if (isOnlyChild) position = 'only';
		if (isFirstChild) position = 'first';
		if (isLastChild) position = 'last';
		if (isMiddleChild) position = 'middle';

		return (0, _react.cloneElement)(c, {
			contiguous: contiguous,
			position: position
		});
	});

	return _react2.default.createElement(Component, props);
};

InlineGroup.propTypes = {
	aphroditeStyles: _react.PropTypes.shape({
		_definition: _react.PropTypes.object,
		_name: _react.PropTypes.string
	}),
	block: _react.PropTypes.bool,
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
	contiguous: _react.PropTypes.bool
};
InlineGroup.defaultProps = {
	component: 'div'
};

var classes = {
	group: {
		display: 'inline-flex'
	},
	block: {
		display: 'flex'
	}
};

module.exports = InlineGroup;

},{"glamor":undefined,"react":undefined}],377:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function LabelledControl(_ref) {
	var className = _ref.className,
	    inline = _ref.inline,
	    label = _ref.label,
	    title = _ref.title,
	    props = _objectWithoutProperties(_ref, ['className', 'inline', 'label', 'title']);

	var labelClassName = (0, _glamor.css)(_styles2.default.wrapper, inline && _styles2.default.wrapper__inline, className);

	return _react2.default.createElement(
		'label',
		{ title: title, className: labelClassName },
		_react2.default.createElement('input', _extends({}, props, { className: (0, _glamor.css)(_styles2.default.control) })),
		_react2.default.createElement(
			'span',
			{ className: (0, _glamor.css)(_styles2.default.label) },
			label
		)
	);
};

LabelledControl.propTypes = {
	inline: _react.PropTypes.bool,
	title: _react.PropTypes.string,
	type: _react.PropTypes.oneOf(['checkbox', 'radio']).isRequired
};

module.exports = LabelledControl;

},{"./styles":378,"glamor":undefined,"react":undefined}],378:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	wrapper: {
		display: 'block',
		height: _theme2.default.input.height,
		lineHeight: _theme2.default.input.lineHeight
	},
	wrapper__inline: {
		display: 'inline'
	},

	// checkbox or radio
	control: {
		marginRight: '0.5em'
	}
}; // ==============================
// Alert
// ==============================

/* eslint quote-props: ["error", "as-needed"] */

},{"../../../theme":477}],379:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _Spinner = require('../Spinner');

var _Spinner2 = _interopRequireDefault(_Spinner);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function LoadingButton(_ref) {
	var children = _ref.children,
	    loading = _ref.loading,
	    props = _objectWithoutProperties(_ref, ['children', 'loading']);

	// determine the correct variant for the spinner,
	// fill is the default variant on Button
	var variant = props.variant || 'fill';

	// determine the correct color for the spinner,
	// cancel and delete alias to "danger"
	var color = void 0;
	if (props.color === 'cancel' || props.color === 'delete') color = 'danger';

	// merge all the variant/color together
	var formattedColor = variant === 'fill' && props.color !== 'default' ? 'inverted' : color;

	// render the spinner if required
	var spinner = loading && _react2.default.createElement(_Spinner2.default, {
		size: 'small',
		color: formattedColor
	});

	// slide the spinner in and out of view
	var spinnerStyles = {
		width: loading ? _theme2.default.spinner.size.small * 5 + _theme2.default.spacing.small : 0
	};

	// render all that shit
	return _react2.default.createElement(
		_Button2.default,
		props,
		_react2.default.createElement(
			'span',
			{ className: (0, _glamor.css)(classes.spinner), style: spinnerStyles },
			spinner
		),
		children
	);
};

LoadingButton.propTypes = {
	loading: _react.PropTypes.bool
};
LoadingButton.defaultProps = {
	loading: false
};

var classes = {
	spinner: {
		display: 'inline-block',
		overflow: 'hidden',
		textAlign: 'left',
		transition: 'width 200ms ease-out',
		verticalAlign: 'middle'
	}
};

module.exports = LoadingButton;

},{"../../../theme":477,"../Button":340,"../Spinner":396,"glamor":undefined,"react":undefined}],380:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ModalBody(_ref) {
	var className = _ref.className,
	    props = _objectWithoutProperties(_ref, ['className']);

	return _react2.default.createElement('div', _extends({
		className: (0, _glamor.css)(classes.body, className)
	}, props));
};

var classes = {
	body: {
		paddingBottom: _theme2.default.modal.padding.body.vertical,
		paddingLeft: _theme2.default.modal.padding.body.horizontal,
		paddingRight: _theme2.default.modal.padding.body.horizontal,
		paddingTop: _theme2.default.modal.padding.body.vertical
	}
};

module.exports = ModalBody;

},{"../../../theme":477,"glamor":undefined,"react":undefined}],381:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _ScrollLock = require('../ScrollLock');

var _ScrollLock2 = _interopRequireDefault(_ScrollLock);

var _Portal = require('../Portal');

var _Portal2 = _interopRequireDefault(_Portal);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var canUseDom = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var ModalDialog = function (_Component) {
	_inherits(ModalDialog, _Component);

	function ModalDialog() {
		_classCallCheck(this, ModalDialog);

		var _this = _possibleConstructorReturn(this, (ModalDialog.__proto__ || Object.getPrototypeOf(ModalDialog)).call(this));

		_this.handleBackdropClick = _this.handleBackdropClick.bind(_this);
		_this.handleKeyboardInput = _this.handleKeyboardInput.bind(_this);
		return _this;
	}

	_createClass(ModalDialog, [{
		key: 'getChildContext',
		value: function getChildContext() {
			return {
				onClose: this.props.onClose
			};
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			if (!canUseDom) return;

			// add event listeners
			if (nextProps.isOpen && nextProps.enableKeyboardInput) {
				window.addEventListener('keydown', this.handleKeyboardInput);
			}
			if (!nextProps.isOpen && nextProps.enableKeyboardInput) {
				window.removeEventListener('keydown', this.handleKeyboardInput);
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			if (this.props.enableKeyboardInput) {
				window.removeEventListener('keydown', this.handleKeyboardInput);
			}
		}

		// ==============================
		// Methods
		// ==============================

	}, {
		key: 'handleKeyboardInput',
		value: function handleKeyboardInput(event) {
			if (event.keyCode === 27) this.props.onClose();

			return false;
		}
	}, {
		key: 'handleBackdropClick',
		value: function handleBackdropClick(e) {
			if (e.target !== this.refs.container) return;

			this.props.onClose();
		}

		// ==============================
		// Renderers
		// ==============================

	}, {
		key: 'renderDialog',
		value: function renderDialog() {
			var _props = this.props,
			    backdropClosesModal = _props.backdropClosesModal,
			    children = _props.children,
			    isOpen = _props.isOpen,
			    width = _props.width;


			if (!isOpen) return _react2.default.createElement('span', { key: 'closed' });

			return _react2.default.createElement(
				'div',
				{
					className: (0, _glamor.css)(classes.container),
					key: 'open',
					ref: 'container',
					onClick: !!backdropClosesModal && this.handleBackdropClick,
					onTouchEnd: !!backdropClosesModal && this.handleBackdropClick
				},
				_react2.default.createElement(
					'div',
					{ className: (0, _glamor.css)(classes.dialog), style: { width: width }, 'data-screen-id': 'modal-dialog' },
					children
				),
				_react2.default.createElement(_ScrollLock2.default, null)
			);
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				_Portal2.default,
				null,
				this.renderDialog()
			);
		}
	}]);

	return ModalDialog;
}(_react.Component);

;

ModalDialog.propTypes = {
	backdropClosesModal: _react.PropTypes.bool,
	enableKeyboardInput: _react.PropTypes.bool,
	isOpen: _react.PropTypes.bool,
	onClose: _react.PropTypes.func.isRequired,
	width: _react.PropTypes.number
};
ModalDialog.defaultProps = {
	enableKeyboardInput: true,
	width: 768
};
ModalDialog.childContextTypes = {
	onClose: _react.PropTypes.func.isRequired
};

var classes = {
	container: {
		alignItems: 'center',
		backgroundColor: _theme2.default.modal.background,
		boxSizing: 'border-box',
		display: 'flex',
		height: '100%',
		justifyContent: 'center',
		left: 0,
		position: 'fixed',
		top: 0,
		width: '100%',
		zIndex: _theme2.default.modal.zIndex
	},
	dialog: {
		maxHeight: '90%',
		overflow: 'scroll',
		backgroundColor: 'white',
		borderRadius: _theme2.default.borderRadius.default,
		paddingBottom: _theme2.default.modal.padding.dialog.vertical,
		paddingLeft: _theme2.default.modal.padding.dialog.horizontal,
		paddingRight: _theme2.default.modal.padding.dialog.horizontal,
		paddingTop: '5px',
		position: 'relative'
	}
};

exports.default = ModalDialog;

},{"../../../theme":477,"../Portal":388,"../ScrollLock":391,"glamor":undefined,"react":undefined}],382:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ModalFooter(_ref) {
	var align = _ref.align,
	    className = _ref.className,
	    props = _objectWithoutProperties(_ref, ['align', 'className']);

	return _react2.default.createElement('div', _extends({}, props, { className: (0, _glamor.css)(classes.footer, classes['align__' + align], className) }));
};

ModalFooter.propTypes = {
	align: _react.PropTypes.oneOf(['center', 'left', 'right']),
	children: _react.PropTypes.node,
	onClose: _react.PropTypes.func,
	showCloseButton: _react.PropTypes.bool,
	text: _react.PropTypes.string
};
ModalFooter.defaultProps = {
	align: 'left'
};

var classes = {
	footer: {
		borderTop: '2px solid ' + _theme2.default.color.gray10,
		display: 'flex',
		paddingBottom: _theme2.default.modal.padding.footer.vertical,
		paddingLeft: _theme2.default.modal.padding.footer.horizontal,
		paddingRight: _theme2.default.modal.padding.footer.horizontal,
		paddingTop: _theme2.default.modal.padding.footer.vertical
	},

	// alignment
	align__left: {
		justifyContent: 'flex-start'
	},
	align__center: {
		justifyContent: 'center'
	},
	align__right: {
		justifyContent: 'flex-end'
	}
};

module.exports = ModalFooter;

},{"../../../theme":477,"glamor":undefined,"react":undefined}],383:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _GlyphButton = require('../GlyphButton');

var _GlyphButton2 = _interopRequireDefault(_GlyphButton);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ModalHeader(_ref, _ref2) {
	var onClose = _ref2.onClose;

	var children = _ref.children,
	    className = _ref.className,
	    showCloseButton = _ref.showCloseButton,
	    text = _ref.text,
	    props = _objectWithoutProperties(_ref, ['children', 'className', 'showCloseButton', 'text']);

	// Property Violation
	if (children && text) {
		console.error('Warning: ModalHeader cannot render `children` and `text`. You must provide one or the other.');
	}

	return _react2.default.createElement(
		'div',
		_extends({}, props, { className: (0, _glamor.css)(classes.header, className) }),
		_react2.default.createElement(
			'div',
			{ className: (0, _glamor.css)(classes.grow) },
			text ? _react2.default.createElement(
				'h4',
				{ className: (0, _glamor.css)(classes.text) },
				text
			) : children
		),
		!!onClose && showCloseButton && _react2.default.createElement(_GlyphButton2.default, {
			aphroditeStyles: classes.close,
			color: 'cancel',
			glyph: 'x',
			onClick: onClose,
			variant: 'link'
		})
	);
};

ModalHeader.propTypes = {
	children: _react.PropTypes.node,
	onClose: _react.PropTypes.func,
	showCloseButton: _react.PropTypes.bool,
	text: _react.PropTypes.string
};
ModalHeader.contextTypes = {
	onClose: _react.PropTypes.func.isRequired
};

var classes = {
	header: {
		alignItems: 'center',
		borderBottom: '2px solid ' + _theme2.default.color.gray10,
		display: 'flex',
		paddingBottom: _theme2.default.modal.padding.header.vertical,
		paddingLeft: _theme2.default.modal.padding.header.horizontal,
		paddingRight: _theme2.default.modal.padding.header.horizontal,
		paddingTop: _theme2.default.modal.padding.header.vertical
	},

	// fill space to push the close button right
	grow: {
		flexGrow: 1
	},

	// title text
	text: {
		color: 'inherit',
		fontSize: 18,
		fontWeight: 500,
		lineHeight: 1,
		margin: 0
	}
};

module.exports = ModalHeader;

},{"../../../theme":477,"../GlyphButton":364,"glamor":undefined,"react":undefined}],384:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Header = exports.Footer = exports.Dialog = exports.Body = undefined;

var _body = require('./body');

var _body2 = _interopRequireDefault(_body);

var _dialog = require('./dialog');

var _dialog2 = _interopRequireDefault(_dialog);

var _footer = require('./footer');

var _footer2 = _interopRequireDefault(_footer);

var _header = require('./header');

var _header2 = _interopRequireDefault(_header);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.Body = _body2.default;
exports.Dialog = _dialog2.default;
exports.Footer = _footer2.default;
exports.Header = _header2.default;

},{"./body":380,"./dialog":381,"./footer":382,"./header":383}],385:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _page = require('./page');

var _page2 = _interopRequireDefault(_page);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pagination = function (_Component) {
	_inherits(Pagination, _Component);

	function Pagination() {
		_classCallCheck(this, Pagination);

		return _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).apply(this, arguments));
	}

	_createClass(Pagination, [{
		key: 'renderCount',
		value: function renderCount() {
			var count = '';
			var _props = this.props,
			    currentPage = _props.currentPage,
			    pageSize = _props.pageSize,
			    plural = _props.plural,
			    singular = _props.singular,
			    total = _props.total;

			if (!total) {
				count = 'No ' + (plural || 'records');
			} else if (total > pageSize) {
				var start = pageSize * (currentPage - 1) + 1;
				var end = Math.min(start + pageSize - 1, total);
				count = 'Showing ' + start + ' to ' + end + ' of ' + total;
			} else {
				count = 'Showing ' + total;
				if (total > 1 && plural) {
					count += ' ' + plural;
				} else if (total === 1 && singular) {
					count += ' ' + singular;
				}
			}
			return _react2.default.createElement(
				'div',
				{ className: (0, _glamor.css)(classes.count), 'data-e2e-pagination-count': true },
				count
			);
		}
	}, {
		key: 'renderPages',
		value: function renderPages() {
			var _props2 = this.props,
			    currentPage = _props2.currentPage,
			    limit = _props2.limit,
			    onPageSelect = _props2.onPageSelect,
			    pageSize = _props2.pageSize,
			    total = _props2.total;


			if (total <= pageSize) return null;

			var pages = [];
			var totalPages = Math.ceil(total / pageSize);
			var minPage = 1;
			var maxPage = totalPages;

			if (limit && limit < totalPages) {
				var rightLimit = Math.floor(limit / 2);
				var leftLimit = rightLimit + limit % 2 - 1;
				minPage = currentPage - leftLimit;
				maxPage = currentPage + rightLimit;

				if (minPage < 1) {
					maxPage = limit;
					minPage = 1;
				}
				if (maxPage > totalPages) {
					minPage = totalPages - limit + 1;
					maxPage = totalPages;
				}
			}
			if (minPage > 1) {
				pages.push(_react2.default.createElement(
					_page2.default,
					{ key: 'page_start', onClick: function onClick() {
							return onPageSelect(1);
						} },
					'...'
				));
			}

			var _loop = function _loop(page) {
				var selected = page === currentPage;
				/* eslint-disable no-loop-func */
				pages.push(_react2.default.createElement(
					_page2.default,
					{ key: 'page_' + page, selected: selected, onClick: function onClick() {
							return onPageSelect(page);
						} },
					page
				));
				/* eslint-enable */
			};

			for (var page = minPage; page <= maxPage; page++) {
				_loop(page);
			}
			if (maxPage < totalPages) {
				pages.push(_react2.default.createElement(
					_page2.default,
					{ key: 'page_end', onClick: function onClick() {
							return onPageSelect(totalPages);
						} },
					'...'
				));
			}
			return _react2.default.createElement(
				'div',
				{ className: (0, _glamor.css)(classes.list) },
				pages
			);
		}
	}, {
		key: 'render',
		value: function render() {
			var className = (0, _glamor.css)(classes.container, this.props.className);
			return _react2.default.createElement(
				'div',
				{ className: className, style: this.props.style },
				this.renderCount(),
				this.renderPages()
			);
		}
	}]);

	return Pagination;
}(_react.Component);

;

var classes = {
	container: {
		display: 'block',
		lineHeight: _theme2.default.component.lineHeight,
		marginBottom: '2em'
	},
	count: {
		display: 'inline-block',
		marginRight: '1em',
		verticalAlign: 'middle'
	},
	list: {
		display: 'inline-block',
		verticalAlign: 'middle'
	}
};

Pagination.propTypes = {
	className: _react.PropTypes.string,
	currentPage: _react.PropTypes.number.isRequired,
	limit: _react.PropTypes.number,
	onPageSelect: _react.PropTypes.func,
	pageSize: _react.PropTypes.number.isRequired,
	plural: _react.PropTypes.string,
	singular: _react.PropTypes.string,
	style: _react.PropTypes.object,
	total: _react.PropTypes.number.isRequired
};

module.exports = Pagination;

},{"../../../theme":477,"./page":386,"glamor":undefined,"react":undefined}],386:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Page(_ref) {
	var disabled = _ref.disabled,
	    selected = _ref.selected,
	    props = _objectWithoutProperties(_ref, ['disabled', 'selected']);

	props.className = (0, _glamor.css)(classes.page, !!disabled && classes.disabled, !!selected && classes.selected);
	return _react2.default.createElement('button', props);
};

Page.propTypes = {
	disabled: _react.PropTypes.bool,
	onClick: _react.PropTypes.func.isRequired,
	selected: _react.PropTypes.bool
};

/* eslint quote-props: ["error", "as-needed"] */

var selectedStyle = {
	backgroundColor: _theme2.default.pagination.selected.background,
	borderColor: _theme2.default.pagination.selected.border,
	color: _theme2.default.pagination.selected.color,
	cursor: 'default',
	zIndex: 2
};
var pseudoStyle = {
	backgroundColor: _theme2.default.pagination.hover.background,
	borderColor: _theme2.default.pagination.hover.border,
	color: _theme2.default.pagination.hover.color,
	outline: 'none'
};

var classes = {
	page: {
		appearance: 'none',
		background: 'none',
		border: '1px solid transparent',
		borderRadius: _theme2.default.borderRadius.default,
		color: _theme2.default.pagination.color,
		cursor: 'pointer',
		display: 'inline-block',
		float: 'left', // Collapse white-space
		marginRight: '0.25em',
		padding: '0 .7em',
		position: 'relative',
		textDecoration: 'none',

		// handle hover and focus
		':hover': pseudoStyle,
		':focus': pseudoStyle
	},

	// selected page
	selected: _extends({}, selectedStyle, {

		':hover': selectedStyle,
		':focus': selectedStyle
	}),

	// disabled page

	disabled: {
		backgroundColor: _theme2.default.pagination.disabled.background,
		borderColor: _theme2.default.pagination.disabled.background,
		color: _theme2.default.pagination.disabled.color,
		cursor: 'default'
	}
};

exports.default = Page;

},{"../../../theme":477,"glamor":undefined,"react":undefined}],387:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Pass the Lightbox context through to the Portal's descendents
// StackOverflow discussion http://goo.gl/oclrJ9

var PassContext = function (_Component) {
	_inherits(PassContext, _Component);

	function PassContext() {
		_classCallCheck(this, PassContext);

		return _possibleConstructorReturn(this, (PassContext.__proto__ || Object.getPrototypeOf(PassContext)).apply(this, arguments));
	}

	_createClass(PassContext, [{
		key: 'getChildContext',
		value: function getChildContext() {
			return this.props.context;
		}
	}, {
		key: 'render',
		value: function render() {
			return _react.Children.only(this.props.children);
		}
	}]);

	return PassContext;
}(_react.Component);

;

PassContext.propTypes = {
	context: _react.PropTypes.object.isRequired
};
PassContext.childContextTypes = {
	onClose: _react.PropTypes.func
};

exports.default = PassContext;

},{"react":undefined}],388:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _reactDom = require('react-dom');

var _PassContext = require('../PassContext');

var _PassContext2 = _interopRequireDefault(_PassContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Portal = function (_Component) {
	_inherits(Portal, _Component);

	function Portal() {
		_classCallCheck(this, Portal);

		var _this = _possibleConstructorReturn(this, (Portal.__proto__ || Object.getPrototypeOf(Portal)).call(this));

		_this.portalElement = null;
		return _this;
	}

	_createClass(Portal, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var p = document.createElement('div');
			document.body.appendChild(p);
			this.portalElement = p;
			this.componentDidUpdate();
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			// Animate fade on mount/unmount
			var duration = 200;
			var styles = '\n\t\t\t\t.fade-enter { opacity: 0.01; }\n\t\t\t\t.fade-enter.fade-enter-active { opacity: 1; transition: opacity ' + duration + 'ms; }\n\t\t\t\t.fade-leave { opacity: 1; }\n\t\t\t\t.fade-leave.fade-leave-active { opacity: 0.01; transition: opacity ' + duration + 'ms; }\n\t\t';
			(0, _reactDom.render)(_react2.default.createElement(
				_PassContext2.default,
				{ context: this.context },
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'style',
						null,
						styles
					),
					_react2.default.createElement(_reactAddonsCssTransitionGroup2.default, _extends({
						component: 'div',
						transitionName: 'fade',
						transitionEnterTimeout: duration,
						transitionLeaveTimeout: duration
					}, this.props))
				)
			), this.portalElement);
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			document.body.removeChild(this.portalElement);
		}
	}, {
		key: 'render',
		value: function render() {
			return null;
		}
	}]);

	return Portal;
}(_react.Component);

exports.default = Portal;


Portal.contextTypes = {
	onClose: _react.PropTypes.func
};

},{"../PassContext":387,"react":undefined,"react-addons-css-transition-group":undefined,"react-dom":undefined}],389:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Using window.innerWidth and state instead of CSS media breakpoints
// because we want to render null rather than an empty span. Allowing for
// CSS pseudo classes like :only-child to behave as expected.

// Return true if window + document
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var ResponsiveText = function (_Component) {
	_inherits(ResponsiveText, _Component);

	function ResponsiveText() {
		_classCallCheck(this, ResponsiveText);

		var _this = _possibleConstructorReturn(this, (ResponsiveText.__proto__ || Object.getPrototypeOf(ResponsiveText)).call(this));

		_this.handleResize = _this.handleResize.bind(_this);
		_this.state = {
			windowWidth: canUseDOM ? window.innerWidth : 0
		};
		return _this;
	}

	_createClass(ResponsiveText, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (canUseDOM) {
				window.addEventListener('resize', this.handleResize);
				this.handleResize();
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			if (canUseDOM) {
				window.removeEventListener('resize', this.handleResize);
			}
		}
	}, {
		key: 'handleResize',
		value: function handleResize() {
			this.setState({
				windowWidth: canUseDOM ? window.innerWidth : 0
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    Component = _props.component,
			    hiddenLG = _props.hiddenLG,
			    hiddenMD = _props.hiddenMD,
			    hiddenSM = _props.hiddenSM,
			    hiddenXS = _props.hiddenXS,
			    visibleLG = _props.visibleLG,
			    visibleMD = _props.visibleMD,
			    visibleSM = _props.visibleSM,
			    visibleXS = _props.visibleXS,
			    props = _objectWithoutProperties(_props, ['component', 'hiddenLG', 'hiddenMD', 'hiddenSM', 'hiddenXS', 'visibleLG', 'visibleMD', 'visibleSM', 'visibleXS']);

			var windowWidth = this.state.windowWidth;


			var text = void 0;

			// set text value from breakpoint; attempt XS --> LG
			if (windowWidth < _theme2.default.breakpointNumeric.mobile) {
				text = visibleXS || hiddenSM || hiddenMD || hiddenLG;
			} else if (windowWidth < _theme2.default.breakpointNumeric.tabletPortrait) {
				text = hiddenXS || visibleSM || hiddenMD || hiddenLG;
			} else if (windowWidth < _theme2.default.breakpointNumeric.tabletLandscape) {
				text = hiddenXS || hiddenSM || visibleMD || hiddenLG;
			} else {
				text = hiddenXS || hiddenSM || hiddenMD || visibleLG;
			}

			return text ? _react2.default.createElement(
				Component,
				props,
				text
			) : null;
		}
	}]);

	return ResponsiveText;
}(_react.Component);

;

ResponsiveText.propTypes = {
	hiddenLG: _react.PropTypes.string,
	hiddenMD: _react.PropTypes.string,
	hiddenSM: _react.PropTypes.string,
	hiddenXS: _react.PropTypes.string,
	visibleLG: _react.PropTypes.string,
	visibleMD: _react.PropTypes.string,
	visibleSM: _react.PropTypes.string,
	visibleXS: _react.PropTypes.string
};
ResponsiveText.defaultProps = {
	component: 'span'
};

module.exports = ResponsiveText;

},{"../../../theme":477,"react":undefined}],390:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ScreenReaderOnly(_ref) {
	var className = _ref.className,
	    props = _objectWithoutProperties(_ref, ['className']);

	props.className = (0, _glamor.css)(classes.srOnly, className);

	return _react2.default.createElement('span', props);
};

var classes = {
	srOnly: {
		border: 0,
		clip: 'rect(0,0,0,0)',
		height: 1,
		margin: -1,
		overflow: 'hidden',
		padding: 0,
		position: 'absolute',
		width: 1
	}
};

module.exports = ScreenReaderOnly;

},{"glamor":undefined,"react":undefined}],391:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ScrollLock = function (_Component) {
	_inherits(ScrollLock, _Component);

	function ScrollLock() {
		_classCallCheck(this, ScrollLock);

		var _this = _possibleConstructorReturn(this, (ScrollLock.__proto__ || Object.getPrototypeOf(ScrollLock)).call(this));

		_this.lockCount = 0;
		return _this;
	}

	_createClass(ScrollLock, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			if (typeof window === 'undefined') return;

			this.lockCount++;
			if (this.lockCount > 1) return;

			//	FIXME iOS ignores overflow on body
			try {
				var scrollBarWidth = window.innerWidth - document.body.clientWidth;

				var target = document.body;

				target.style.paddingRight = scrollBarWidth + 'px';
				target.style.overflowY = 'hidden';
			} catch (err) {
				console.error('Failed to find body element. Err:', err);
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			if (typeof window === 'undefined' || this.lockCount === 0) return;

			this.lockCount--;
			if (this.lockCount > 0) return; // Still locked

			//	FIXME iOS ignores overflow on body
			try {
				var target = document.body;

				target.style.paddingRight = '';
				target.style.overflowY = '';
			} catch (err) {
				console.error('Failed to find body element. Err:', err);
			}
		}
	}, {
		key: 'render',
		value: function render() {
			return null;
		}
	}]);

	return ScrollLock;
}(_react.Component);

exports.default = ScrollLock;

},{"react":undefined}],392:[function(require,module,exports){
'use strict';

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	danger: _theme2.default.color.danger,
	default: _theme2.default.color.gray80,
	error: _theme2.default.color.danger,
	info: _theme2.default.color.info,
	primary: _theme2.default.color.primary,
	success: _theme2.default.color.success,
	warning: _theme2.default.color.warning
};

},{"../../../theme":477}],393:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function SegmentedControl(_ref) {
	var className = _ref.className,
	    color = _ref.color,
	    cropText = _ref.cropText,
	    equalWidthSegments = _ref.equalWidthSegments,
	    inline = _ref.inline,
	    onChange = _ref.onChange,
	    options = _ref.options,
	    value = _ref.value,
	    props = _objectWithoutProperties(_ref, ['className', 'color', 'cropText', 'equalWidthSegments', 'inline', 'onChange', 'options', 'value']);

	props.className = (0, _glamor.css)(_styles2.default.control, inline ? _styles2.default.control__inline : null, className);

	return _react2.default.createElement(
		'div',
		props,
		options.map(function (opt) {
			var buttonClassName = (0, _glamor.css)(_styles2.default.button, opt.disabled ? _styles2.default.button__disabled : null, opt.value === value ? _styles2.default['button__' + color] : null, cropText ? _styles2.default.button__cropText : null, equalWidthSegments ? _styles2.default.button__equalWidth : null);

			return _react2.default.createElement(
				'button',
				{
					className: buttonClassName,
					key: opt.value,
					onClick: !opt.disabled && function () {
						return onChange(opt.value);
					},
					type: 'button',
					title: cropText ? opt.label : null,
					tabIndex: opt.disabled ? '-1' : ''
				},
				opt.label
			);
		})
	);
};

var valuePropShape = [_react.PropTypes.bool, _react.PropTypes.number, _react.PropTypes.string];

SegmentedControl.propTypes = {
	color: _react.PropTypes.oneOf(Object.keys(_colors2.default)),
	cropText: _react.PropTypes.bool, // when `inline && equalWidthSegments` crops to the next largest option length
	equalWidthSegments: _react.PropTypes.bool, // only relevant when `inline === false`
	inline: _react.PropTypes.bool,
	onChange: _react.PropTypes.func.isRequired,
	options: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		disabled: _react.PropTypes.bool,
		label: _react.PropTypes.string,
		value: _react.PropTypes.oneOfType(valuePropShape)
	})).isRequired,
	value: _react.PropTypes.oneOfType(valuePropShape)
};
SegmentedControl.defaultProps = {
	color: 'default'
};

module.exports = SegmentedControl;

},{"./colors":392,"./styles":394,"glamor":undefined,"react":undefined}],394:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Segmented Control
// ==============================

/* eslint quote-props: ["error", "as-needed"] */

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Prepare variants
var colorVariants = {};
Object.keys(_colors2.default).forEach(function (color) {
	var pseudoStyles = {
		backgroundColor: _colors2.default[color],
		color: 'white'
	};
	colorVariants['button__' + color] = {
		backgroundColor: _colors2.default[color],
		color: 'white',

		':hover': pseudoStyles,
		':focus': pseudoStyles,
		':active': pseudoStyles
	};
});

module.exports = _extends({
	control: {
		borderWidth: 1,
		borderStyle: 'solid',
		borderColor: _theme2.default.input.border.color.default,
		borderRadius: '0.4em',
		display: 'flex',
		fontSize: _theme2.default.font.size.small,
		paddingLeft: 1,
		paddingRight: 1
	},
	control__inline: {
		display: 'inline-flex'
	},

	// buttons
	button: {
		background: 'none',
		border: 0,
		borderRadius: '0.25em',
		flexGrow: 1,
		margin: '2px 1px',
		padding: '0.3em 0.9em',
		outline: 0,

		':hover': { backgroundColor: 'rgba(0, 0, 0, 0.05)' },
		':focus': { backgroundColor: 'rgba(0, 0, 0, 0.05)' },
		':active': { backgroundColor: 'rgba(0, 0, 0, 0.1)' }
	},
	button__equalWidth: {
		flex: '1 1 0'
	},
	button__cropText: {
		overflow: 'hidden',
		textOverflow: 'ellipsis',
		whiteSpace: 'nowrap'
	},
	button__disabled: {
		opacity: 0.6,
		pointerEvents: 'none'
	}

}, colorVariants);

},{"../../../theme":477,"./colors":392}],395:[function(require,module,exports){
'use strict';

module.exports = ['danger', 'default', 'inverted', 'primary', 'success', 'warning'];

},{}],396:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _ScreenReaderOnly = require('../ScreenReaderOnly');

var _ScreenReaderOnly2 = _interopRequireDefault(_ScreenReaderOnly);

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _sizes = require('./sizes');

var _sizes2 = _interopRequireDefault(_sizes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Spinner(_ref) {
	var className = _ref.className,
	    size = _ref.size,
	    color = _ref.color,
	    props = _objectWithoutProperties(_ref, ['className', 'size', 'color']);

	props.className = (0, _glamor.css)(_styles2.default.base, _styles2.default[size], className);

	return _react2.default.createElement(
		'div',
		props,
		_react2.default.createElement('span', { className: '' + (0, _glamor.css)(_styles2.default.dot, _styles2.default['size__' + size], _styles2.default['color__' + color], _styles2.default.dot__first) }),
		_react2.default.createElement('span', { className: '' + (0, _glamor.css)(_styles2.default.dot, _styles2.default['size__' + size], _styles2.default['color__' + color], _styles2.default.dot__second) }),
		_react2.default.createElement('span', { className: '' + (0, _glamor.css)(_styles2.default.dot, _styles2.default['size__' + size], _styles2.default['color__' + color], _styles2.default.dot__third) }),
		_react2.default.createElement(
			_ScreenReaderOnly2.default,
			null,
			'Loading...'
		)
	);
};

Spinner.propTypes = {
	color: _react.PropTypes.oneOf(_colors2.default),
	size: _react.PropTypes.oneOf(_sizes2.default)
};
Spinner.defaultProps = {
	size: 'medium',
	color: 'default'
};

module.exports = Spinner;

},{"../ScreenReaderOnly":390,"./colors":395,"./sizes":397,"./styles":398,"glamor":undefined,"react":undefined}],397:[function(require,module,exports){
'use strict';

module.exports = ['small', 'medium', 'large'];

},{}],398:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // ==============================
// Spinner
// ==============================

var _glamor = require('glamor');

var _theme = require('../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _colors = require('./colors');

var _colors2 = _interopRequireDefault(_colors);

var _sizes = require('./sizes');

var _sizes2 = _interopRequireDefault(_sizes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Prepare variants
var colorVariants = {};
_colors2.default.forEach(function (color) {
	colorVariants['color__' + color] = {
		backgroundColor: _theme2.default.spinner.color[color]
	};
});

// Prepare sizes
var sizeVariants = {};
_sizes2.default.forEach(function (size) {
	sizeVariants['size__' + size] = {
		fontSize: _theme2.default.spinner.size[size]
	};
});

// Declare animation keyframes

var keyframes = _glamor.compose.keyframes('pulse', {
	'0%, 80%, 100%': { opacity: 0 },
	'40%': { opacity: 1 }
});

module.exports = _extends({
	base: {
		display: 'inline-block',
		lineHeight: 1,
		textAlign: 'center',
		verticalAlign: 'middle',
		width: '5em'
	},
	small: { fontSize: 4 },
	medium: { fontSize: 8 },
	large: { fontSize: 16 },

	// text
	text: {
		border: 0,
		clip: 'rect(0,0,0,0)',
		height: 1,
		margin: -1,
		overflow: 'hidden',
		padding: 0,
		position: 'absolute',
		width: 1
	},

	// dots
	dot: {
		animationName: keyframes,
		animationDuration: '1s',
		animationIterationCount: 'infinite',
		borderRadius: '1em',
		display: 'inline-block',
		height: '1em',
		verticalAlign: 'top',
		width: '1em'
	},
	dot__second: {
		animationDelay: '160ms',
		marginLeft: '1em'
	},
	dot__third: {
		animationDelay: '320ms',
		marginLeft: '1em'
	}

}, colorVariants, sizeVariants);

},{"../../../theme":477,"./colors":395,"./sizes":397,"glamor":undefined}],399:[function(require,module,exports){
'use strict';

module.exports = {
	Alert: require('./Alert'),
	BlankState: require('./BlankState'),
	Button: require('./Button'),
	Center: require('./Center'),
	Chip: require('./Chip'),
	Container: require('./Container'),
	DropdownButton: require('./DropdownButton'),
	Form: require('./Form'),
	FormField: require('./FormField'),
	FormInput: require('./FormInput'),
	FormLabel: require('./FormLabel'),
	FormNote: require('./FormNote'),
	FormSelect: require('./FormSelect'),
	Glyph: require('./Glyph'),
	GlyphButton: require('./GlyphButton'),
	GlyphField: require('./GlyphField'),
	Grid: require('./Grid'),
	InlineGroup: require('./InlineGroup'),
	InlineGroupSection: require('./InlineGroupSection'),
	LabelledControl: require('./LabelledControl'),
	LoadingButton: require('./LoadingButton'),
	Modal: require('./Modal'),
	Pagination: require('./Pagination'),
	ResponsiveText: require('./ResponsiveText'),
	ScreenReaderOnly: require('./ScreenReaderOnly'),
	SegmentedControl: require('./SegmentedControl'),
	Spinner: require('./Spinner')
};

},{"./Alert":337,"./BlankState":339,"./Button":340,"./Center":342,"./Chip":345,"./Container":347,"./DropdownButton":350,"./Form":362,"./FormField":351,"./FormInput":353,"./FormLabel":356,"./FormNote":358,"./FormSelect":360,"./Glyph":367,"./GlyphButton":364,"./GlyphField":365,"./Grid":373,"./InlineGroup":376,"./InlineGroupSection":374,"./LabelledControl":377,"./LoadingButton":379,"./Modal":384,"./Pagination":385,"./ResponsiveText":389,"./ScreenReaderOnly":390,"./SegmentedControl":393,"./Spinner":396}],400:[function(require,module,exports){
'use strict';

require('babel-polyfill');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactRouter = require('react-router');

var _reactRedux = require('react-redux');

var _reactRouterRedux = require('react-router-redux');

var _App = require('./App');

var _App2 = _interopRequireDefault(_App);

var _Home = require('./screens/Home');

var _Home2 = _interopRequireDefault(_Home);

var _Item = require('./screens/Item');

var _Item2 = _interopRequireDefault(_Item);

var _List = require('./screens/List');

var _List2 = _interopRequireDefault(_List);

var _store = require('./store');

var _store2 = _interopRequireDefault(_store);

var _lists = require('../utils/lists');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Sync the browser history to the Redux store
var history = (0, _reactRouterRedux.syncHistoryWithStore)(_reactRouter.browserHistory, _store2.default);

// Initialise Keystone.User list
/**
 * This is the main entry file, which we compile the main JS bundle from. It
 * only contains the client side routing setup.
 */

// Needed for ES6 generators (redux-saga) to work

Keystone.User = _lists.listsByKey[Keystone.userList];

_reactDom2.default.render(_react2.default.createElement(
	_reactRedux.Provider,
	{ store: _store2.default },
	_react2.default.createElement(
		_reactRouter.Router,
		{ history: history },
		_react2.default.createElement(
			_reactRouter.Route,
			{ path: Keystone.adminPath, component: _App2.default },
			_react2.default.createElement(_reactRouter.IndexRoute, { component: _Home2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: ':listId', component: _List2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: ':listId/:itemId', component: _Item2.default })
		)
	)
), document.getElementById('react-root'));

},{"../utils/lists":482,"./App":327,"./screens/Home":410,"./screens/Item":428,"./screens/List":455,"./store":475,"babel-polyfill":1,"react":undefined,"react-dom":undefined,"react-redux":undefined,"react-router":undefined,"react-router-redux":undefined}],401:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.filtersParser = filtersParser;
exports.filterParser = filterParser;
exports.createFilterObject = createFilterObject;

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _isObject = require('lodash/isObject');

var _isObject2 = _interopRequireDefault(_isObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns an array of expanded filter objects,
 * given (a string representation | an array of filters) and a currentList object.
 *
 * @param { String|Array } Either a string representation of an array of filter objects, or an array of filter objects.
 * @param { Object } the current instantiation of the List prototype used for the <List/> scene
 * @return { Array } of { Objects } as an expanded representation of the filters passed in.
 **/

function filtersParser(filters, currentList) {
	if (typeof filters === 'string') {
		try {
			filters = JSON.parse(filters);
		} catch (e) {
			console.warn('Invalid filters provided', filters);
			filters = void 0;
		}
	}

	if (!filters) return [];

	var assembledFilters = filters.map(function (filter) {
		var path = filter.path;
		var value = _extends({}, filter);
		delete value.path;
		return createFilterObject(path, value, currentList.fields);
	});

	filters = assembledFilters.filter(function (filter) {
		return filter;
	});
	return filters;
}

/**
 * Returns an array of expanded filter objects,
 * given (a string representation | an array of filters) and a currentList object.
 *
 * @param { Object } Filter object  containing the following key value pairs {path} and {value}.
 * @param { Array } of { Objects } an array of the currently active filters.
 * @param { Object } the current instantiation of the List prototype used for the <List/> scene
 * @return { Object } an expanded representation of the passed in filter { Object }.
 **/

function filterParser(_ref, activeFilters, currentList) {
	var path = _ref.path,
	    value = _ref.value;

	if (!activeFilters || !(0, _isArray2.default)(activeFilters)) {
		throw new Error('activeFilters must be an array');
	}
	if (!currentList) {
		throw new Error('No currentList selected');
	}

	if (!(0, _isObject2.default)(currentList) || (0, _isArray2.default)(currentList)) {
		throw new Error('currentList is expected to be an { Object }', currentList);
	}

	var filter = activeFilters.filter(function (i) {
		return i.field.path === path;
	})[0];
	if (filter) {
		filter.value = value;
	} else {
		filter = createFilterObject(path, value, currentList.fields);
		if (!filter) {
			return void 0;
		}
	}
	return filter;
}

/*
* This method is a util, but has such a specific use that it is being left within
* the file that uses it.
*/

/**
 * Returns a filter object
 * given a path, a value, and the fields within an instance of the List prototype.
 *
 * @param { String } filter path
 * @param { Object } of filter values.
 * @param { Object } of fields from the current instance of the List prototype.
 * @return { Object } a filter comprised of the:filters.js
 *	- corresponding field value within the current List,
 *	- and the passed in value { Object }.
 **/

function createFilterObject(path, value, currentListFields) {
	if (!currentListFields || !(0, _isPlainObject2.default)(currentListFields)) {
		console.warn('currentListFields must be a plain object', currentListFields);
		return;
	}

	var field = currentListFields[path];

	if (!field) {
		console.warn('Invalid Filter path specified:', path);
		return;
	}

	return {
		field: field,
		value: value
	};
}

},{"lodash/isArray":564,"lodash/isObject":570,"lodash/isPlainObject":572}],402:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.columnsParser = exports.sortParser = exports.filterParser = exports.filtersParser = exports.createFilterObject = undefined;

var _filters = require('./filters.js');

/**
 * Returns an array of expanded columns object, given a list of columns and currentList object.
 *
 * @param { String } columns, a string representation of a list of columns.
 * @param { Object } the current instantiation of the List prototype used for the <List/> scene
 * @return { Array } of { Objects } as an expanded representation of the column values passed in.
 */

function columnsParser(columns, currentList) {
	if (!currentList) {
		throw new Error('No currentList selected');
	}
	if (!columns || columns.length === 0) {
		return currentList.expandColumns(currentList.defaultColumns);
	}
	return currentList.expandColumns(columns);
};

/**
 * Returns an expanded sort object, given a sort path and currentList object.
 *
 * @param { String } path, a string representation of a list of columns.
 * @param { Object } the current instantiation of the List prototype used for the <List/> scene
 * @return { Object } an expanded representation of the sort path passed in.
 */

function sortParser(path, currentList) {
	if (!currentList) {
		throw new Error('No currentList selected');
	}
	if (!path) return currentList.expandSort(currentList.defaultSort);
	return currentList.expandSort(path);
}

exports.createFilterObject = _filters.createFilterObject;
exports.filtersParser = _filters.filtersParser;
exports.filterParser = _filters.filterParser;
exports.sortParser = sortParser;
exports.columnsParser = columnsParser;

},{"./filters.js":401}],403:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.setActiveColumnsSaga = setActiveColumnsSaga;
exports.setActiveSortSaga = setActiveSortSaga;
exports.setActiveFilterSaga = setActiveFilterSaga;

var _reduxSaga = require('redux-saga');

var _effects = require('redux-saga/effects');

var _constants = require('../screens/List/constants');

var actions = _interopRequireWildcard(_constants);

var _queryParamsSagas = require('./queryParamsSagas');

var _parsers = require('../parsers');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(debouncedSearch),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(setActiveColumnsSaga),
    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(setActiveSortSaga),
    _marked4 = /*#__PURE__*/regeneratorRuntime.mark(setActiveFilterSaga),
    _marked5 = /*#__PURE__*/regeneratorRuntime.mark(rootSaga);

/**
 * Debounce the search loading new items by 500ms
 */

function debouncedSearch() {
	var searchString;
	return regeneratorRuntime.wrap(function debouncedSearch$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					_context.next = 2;
					return (0, _effects.select)(function (state) {
						return state.active.search;
					});

				case 2:
					searchString = _context.sent;

					if (!searchString) {
						_context.next = 6;
						break;
					}

					_context.next = 6;
					return (0, _reduxSaga.delay)(500);

				case 6:
					_context.next = 8;
					return (0, _effects.call)(_queryParamsSagas.updateParams);

				case 8:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

function setActiveColumnsSaga() {
	var _ref, columns, _ref2, currentList, newColumns;

	return regeneratorRuntime.wrap(function setActiveColumnsSaga$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					if (!true) {
						_context2.next = 16;
						break;
					}

					_context2.next = 3;
					return (0, _effects.take)(actions.SELECT_ACTIVE_COLUMNS);

				case 3:
					_ref = _context2.sent;
					columns = _ref.columns;
					_context2.next = 7;
					return (0, _effects.select)(function (state) {
						return state.lists;
					});

				case 7:
					_ref2 = _context2.sent;
					currentList = _ref2.currentList;
					_context2.next = 11;
					return (0, _effects.call)(_parsers.columnsParser, columns, currentList);

				case 11:
					newColumns = _context2.sent;
					_context2.next = 14;
					return (0, _effects.put)({ type: actions.SET_ACTIVE_COLUMNS, columns: newColumns });

				case 14:
					_context2.next = 0;
					break;

				case 16:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}

function setActiveSortSaga() {
	var _ref3, path, _ref4, _currentList, sort;

	return regeneratorRuntime.wrap(function setActiveSortSaga$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					if (!true) {
						_context3.next = 16;
						break;
					}

					_context3.next = 3;
					return (0, _effects.take)(actions.SELECT_ACTIVE_SORT);

				case 3:
					_ref3 = _context3.sent;
					path = _ref3.path;
					_context3.next = 7;
					return (0, _effects.select)(function (state) {
						return state.lists;
					});

				case 7:
					_ref4 = _context3.sent;
					_currentList = _ref4.currentList;
					_context3.next = 11;
					return (0, _effects.call)(_parsers.sortParser, path, _currentList);

				case 11:
					sort = _context3.sent;
					_context3.next = 14;
					return (0, _effects.put)({ type: actions.SET_ACTIVE_SORT, sort: sort });

				case 14:
					_context3.next = 0;
					break;

				case 16:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked3, this);
}

function setActiveFilterSaga() {
	var _ref5, filter, _ref6, _currentList2, activeFilters, updatedFilter;

	return regeneratorRuntime.wrap(function setActiveFilterSaga$(_context4) {
		while (1) {
			switch (_context4.prev = _context4.next) {
				case 0:
					if (!true) {
						_context4.next = 19;
						break;
					}

					_context4.next = 3;
					return (0, _effects.take)(actions.SELECT_FILTER);

				case 3:
					_ref5 = _context4.sent;
					filter = _ref5.filter;
					_context4.next = 7;
					return (0, _effects.select)(function (state) {
						return state.lists;
					});

				case 7:
					_ref6 = _context4.sent;
					_currentList2 = _ref6.currentList;
					_context4.next = 11;
					return (0, _effects.select)(function (state) {
						return state.active.filters;
					});

				case 11:
					activeFilters = _context4.sent;
					_context4.next = 14;
					return (0, _effects.call)(_parsers.filterParser, filter, activeFilters, _currentList2);

				case 14:
					updatedFilter = _context4.sent;
					_context4.next = 17;
					return (0, _effects.put)({ type: actions.ADD_FILTER, filter: updatedFilter });

				case 17:
					_context4.next = 0;
					break;

				case 19:
				case 'end':
					return _context4.stop();
			}
		}
	}, _marked4, this);
}

function rootSaga() {
	return regeneratorRuntime.wrap(function rootSaga$(_context5) {
		while (1) {
			switch (_context5.prev = _context5.next) {
				case 0:
					_context5.next = 2;
					return (0, _effects.fork)(_reduxSaga.takeLatest, actions.SET_ACTIVE_SEARCH, debouncedSearch);

				case 2:
					_context5.next = 4;
					return (0, _effects.fork)(_reduxSaga.takeLatest, actions.SET_ACTIVE_LIST, _queryParamsSagas.evalQueryParams);

				case 4:
					_context5.next = 6;
					return (0, _effects.fork)(setActiveSortSaga);

				case 6:
					_context5.next = 8;
					return (0, _effects.fork)(setActiveColumnsSaga);

				case 8:
					_context5.next = 10;
					return (0, _effects.fork)(setActiveFilterSaga);

				case 10:
					_context5.next = 12;
					return (0, _effects.fork)(_reduxSaga.takeLatest, [actions.QUERY_HAS_CHANGED, actions.ADD_FILTER, actions.SET_ACTIVE_COLUMNS, actions.SET_ACTIVE_SORT, actions.SET_CURRENT_PAGE, actions.CLEAR_FILTER, actions.CLEAR_ALL_FILTERS], _queryParamsSagas.updateParams);

				case 12:
				case 'end':
					return _context5.stop();
			}
		}
	}, _marked5, this);
}

exports.default = rootSaga;

},{"../parsers":402,"../screens/List/constants":454,"./queryParamsSagas":404,"redux-saga":undefined,"redux-saga/effects":579}],404:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.urlUpdate = urlUpdate;
exports.updateParams = updateParams;
exports.evalQueryParams = evalQueryParams;
exports.parseQueryParams = parseQueryParams;

var _queryParams = require('../../utils/queryParams');

var _reactRouterRedux = require('react-router-redux');

var _effects = require('redux-saga/effects');

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _constants = require('../screens/List/constants');

var actions = _interopRequireWildcard(_constants);

var _actions = require('../screens/List/actions');

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _parsers = require('../parsers');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(urlUpdate),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(updateParams),
    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(evalQueryParams);

function urlUpdate(query, cache, pathname) {
	var blacklistedField, attenuatedQuery, attenuatedCache;
	return regeneratorRuntime.wrap(function urlUpdate$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					blacklistedField = 'search';
					attenuatedQuery = (0, _blacklist2.default)(query, blacklistedField);
					attenuatedCache = (0, _blacklist2.default)(cache, blacklistedField);

					if ((0, _isEqual2.default)(attenuatedQuery, attenuatedCache)) {
						_context.next = 8;
						break;
					}

					_context.next = 6;
					return (0, _effects.put)((0, _reactRouterRedux.push)({
						pathname: pathname,
						query: query
					}));

				case 6:
					_context.next = 10;
					break;

				case 8:
					_context.next = 10;
					return (0, _effects.put)((0, _reactRouterRedux.replace)({
						pathname: pathname,
						query: query
					}));

				case 10:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}
/**
 * Update the query params based on the current state
 */
function updateParams() {
	var activeState, currentList, location, _ref, index, sort, page, columns, search, filters, newParams;

	return regeneratorRuntime.wrap(function updateParams$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					_context2.next = 2;
					return (0, _effects.select)(function (state) {
						return state.active;
					});

				case 2:
					activeState = _context2.sent;
					_context2.next = 5;
					return (0, _effects.select)(function (state) {
						return state.lists.currentList;
					});

				case 5:
					currentList = _context2.sent;
					_context2.next = 8;
					return (0, _effects.select)(function (state) {
						return state.routing.locationBeforeTransitions;
					});

				case 8:
					location = _context2.sent;
					_context2.next = 11;
					return (0, _effects.select)(function (state) {
						return state.lists.page;
					});

				case 11:
					_ref = _context2.sent;
					index = _ref.index;


					// Get the data into the right format, set the defaults
					sort = (0, _queryParams.createSortQueryParams)(activeState.sort.rawInput, currentList.defaultSort);
					page = (0, _queryParams.createPageQueryParams)(index, 1);
					columns = (0, _queryParams.stringifyColumns)(activeState.columns, currentList.defaultColumnPaths);
					search = activeState.search;
					filters = (0, _queryParams.parametizeFilters)(activeState.filters);
					newParams = (0, _queryParams.updateQueryParams)({
						page: page,
						columns: columns,
						sort: sort,
						search: search,
						filters: filters
					}, location);

					// TODO: Starting or clearing a search pushes a new history state, but updating
					// the current search replaces it for nicer history navigation support

					_context2.next = 21;
					return (0, _effects.put)({ type: actions.REPLACE_CACHED_QUERY, cachedQuery: newParams });

				case 21:
					return _context2.delegateYield(urlUpdate(newParams, activeState.cachedQuery, location.pathname), 't0', 22);

				case 22:
					_context2.next = 24;
					return (0, _effects.put)((0, _actions.loadItems)());

				case 24:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}

function evalQueryParams() {
	var _ref2, pathname, query, _ref3, cachedQuery, _ref4, currentList, parsedQuery;

	return regeneratorRuntime.wrap(function evalQueryParams$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					_context3.next = 2;
					return (0, _effects.select)(function (state) {
						return state.routing.locationBeforeTransitions;
					});

				case 2:
					_ref2 = _context3.sent;
					pathname = _ref2.pathname;
					query = _ref2.query;
					_context3.next = 7;
					return (0, _effects.select)(function (state) {
						return state.active;
					});

				case 7:
					_ref3 = _context3.sent;
					cachedQuery = _ref3.cachedQuery;
					_context3.next = 11;
					return (0, _effects.select)(function (state) {
						return state.lists;
					});

				case 11:
					_ref4 = _context3.sent;
					currentList = _ref4.currentList;

					if (!(pathname !== Keystone.adminPath + '/' + currentList.id)) {
						_context3.next = 15;
						break;
					}

					return _context3.abrupt('return');

				case 15:
					if (!(0, _isEqual2.default)(query, cachedQuery)) {
						_context3.next = 22;
						break;
					}

					_context3.next = 18;
					return (0, _effects.put)({ type: actions.QUERY_HAS_NOT_CHANGED });

				case 18:
					_context3.next = 20;
					return (0, _effects.put)((0, _actions.loadItems)());

				case 20:
					_context3.next = 27;
					break;

				case 22:
					_context3.next = 24;
					return (0, _effects.call)(parseQueryParams, query, currentList);

				case 24:
					parsedQuery = _context3.sent;
					_context3.next = 27;
					return (0, _effects.put)({ type: actions.QUERY_HAS_CHANGED, parsedQuery: parsedQuery });

				case 27:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked3, this);
}

function parseQueryParams(query, currentList) {
	var columns = (0, _parsers.columnsParser)(query.columns, currentList);
	var sort = (0, _parsers.sortParser)(query.sort, currentList);
	var filters = (0, _parsers.filtersParser)(query.filters, currentList);
	var currentPage = query.page || 1;
	var search = query.search || '';

	return {
		columns: columns,
		sort: sort,
		filters: filters,
		currentPage: currentPage,
		search: search
	};
}

},{"../../utils/queryParams":483,"../parsers":402,"../screens/List/actions":432,"../screens/List/constants":454,"blacklist":undefined,"lodash/isEqual":567,"react-router-redux":undefined,"redux-saga/effects":579}],405:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.loadCounts = loadCounts;
exports.countsLoaded = countsLoaded;
exports.countsLoadingError = countsLoadingError;

var _xhr = require('xhr');

var _xhr2 = _interopRequireDefault(_xhr);

var _constants = require('./constants');

var _constants2 = require('../../../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Load the counts of all lists
 */
function loadCounts() {
	return function (dispatch) {
		dispatch({
			type: _constants.LOAD_COUNTS
		});
		(0, _xhr2.default)({
			url: Keystone.adminPath + '/api/counts'
		}, function (err, resp, body) {
			if (err) {
				dispatch(countsLoadingError(err));
				return;
			}
			try {
				body = JSON.parse(body);
				if (body.counts) {
					dispatch(countsLoaded(body.counts));
				}
			} catch (e) {
				console.log('Error parsing results json:', e, body);
				dispatch(countsLoadingError(e));
				return;
			}
		});
	};
}

/**
 * Dispatched when the counts were loaded
 *
 * @param  {Object} counts The counts object as returned by the API
 */
function countsLoaded(counts) {
	return {
		type: _constants.COUNTS_LOADING_SUCCESS,
		counts: counts
	};
}

/**
 * Dispatched when unsuccessfully trying to load the counts, will redispatch
 * loadCounts after NETWORK_ERROR_RETRY_DELAY until we get counts back
 *
 * @param  {object} error The error
 */
function countsLoadingError(error) {
	return function (dispatch, getState) {
		dispatch({
			type: _constants.COUNTS_LOADING_ERROR,
			error: error
		});
		setTimeout(function () {
			dispatch(loadCounts());
		}, _constants2.NETWORK_ERROR_RETRY_DELAY);
	};
}

},{"../../../constants":476,"./constants":409,"xhr":undefined}],406:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Displays information about a list and lets you create a new one.
 */
var ListTile = _react2.default.createClass({
	displayName: 'ListTile',

	propTypes: {
		count: _react2.default.PropTypes.string,
		hideCreateButton: _react2.default.PropTypes.bool,
		href: _react2.default.PropTypes.string,
		label: _react2.default.PropTypes.string,
		path: _react2.default.PropTypes.string,
		spinner: _react2.default.PropTypes.object
	},
	render: function render() {
		var opts = {
			'data-list-path': this.props.path
		};
		return _react2.default.createElement(
			'div',
			_extends({ className: 'dashboard-group__list' }, opts),
			_react2.default.createElement(
				'span',
				{ className: 'dashboard-group__list-inner' },
				_react2.default.createElement(
					_reactRouter.Link,
					{ to: this.props.href, className: 'dashboard-group__list-tile' },
					_react2.default.createElement(
						'div',
						{ className: 'dashboard-group__list-label' },
						this.props.label
					),
					_react2.default.createElement(
						'div',
						{ className: 'dashboard-group__list-count' },
						this.props.spinner || this.props.count
					)
				),
				!this.props.hideCreateButton && _react2.default.createElement(_reactRouter.Link, {
					to: this.props.href + '?create',
					className: 'dashboard-group__list-create octicon octicon-plus',
					title: 'Create',
					tabIndex: '-1'
				})
			)
		);
	}
});

module.exports = ListTile;

},{"react":undefined,"react-router":undefined}],407:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Lists = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _reactRedux = require('react-redux');

var _string = require('../../../../utils/string');

var _ListTile = require('./ListTile');

var _ListTile2 = _interopRequireDefault(_ListTile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Lists = exports.Lists = function (_React$Component) {
	_inherits(Lists, _React$Component);

	function Lists() {
		_classCallCheck(this, Lists);

		return _possibleConstructorReturn(this, (Lists.__proto__ || Object.getPrototypeOf(Lists)).apply(this, arguments));
	}

	_createClass(Lists, [{
		key: 'render',
		value: function render() {
			var _this2 = this;

			return _react2.default.createElement(
				'div',
				{ className: 'dashboard-group__lists' },
				_lodash2.default.map(this.props.lists, function (list, key) {
					// If an object is passed in the key is the index,
					// if an array is passed in the key is at list.key
					var listKey = list.key || key;
					var href = list.external ? list.path : Keystone.adminPath + '/' + list.path;
					var listData = _this2.props.listsData[list.path];
					var isNoCreate = listData ? listData.nocreate : false;
					return _react2.default.createElement(_ListTile2.default, {
						key: list.path,
						path: list.path,
						label: list.label,
						hideCreateButton: isNoCreate,
						href: href,
						count: (0, _string.plural)(_this2.props.counts[listKey], '* Item', '* Items'),
						spinner: _this2.props.spinner
					});
				})
			);
		}
	}]);

	return Lists;
}(_react2.default.Component);

Lists.propTypes = {
	counts: _react2.default.PropTypes.object.isRequired,
	lists: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.array, _react2.default.PropTypes.object]).isRequired,
	spinner: _react2.default.PropTypes.node
};

exports.default = (0, _reactRedux.connect)(function (state) {
	return {
		listsData: state.lists.data
	};
})(Lists);

},{"../../../../utils/string":484,"./ListTile":406,"lodash":undefined,"react":undefined,"react-redux":undefined}],408:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getRelatedIconClass = require('../utils/getRelatedIconClass');

var _getRelatedIconClass2 = _interopRequireDefault(_getRelatedIconClass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Section = function (_React$Component) {
	_inherits(Section, _React$Component);

	function Section() {
		_classCallCheck(this, Section);

		return _possibleConstructorReturn(this, (Section.__proto__ || Object.getPrototypeOf(Section)).apply(this, arguments));
	}

	_createClass(Section, [{
		key: 'render',
		value: function render() {
			var iconClass = this.props.icon || (0, _getRelatedIconClass2.default)(this.props.id);
			return _react2.default.createElement(
				'div',
				{ className: 'dashboard-group', 'data-section-label': this.props.label },
				_react2.default.createElement(
					'div',
					{ className: 'dashboard-group__heading' },
					_react2.default.createElement('span', { className: 'dashboard-group__heading-icon ' + iconClass }),
					this.props.label
				),
				this.props.children
			);
		}
	}]);

	return Section;
}(_react2.default.Component);

Section.propTypes = {
	children: _react2.default.PropTypes.element.isRequired,
	icon: _react2.default.PropTypes.string,
	id: _react2.default.PropTypes.string,
	label: _react2.default.PropTypes.string.isRequired
};

exports.default = Section;

},{"../utils/getRelatedIconClass":412,"react":undefined}],409:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var LOAD_COUNTS = exports.LOAD_COUNTS = 'app/Home/LOAD_COUNTS';
var COUNTS_LOADING_SUCCESS = exports.COUNTS_LOADING_SUCCESS = 'app/Home/COUNTS_LOADING_SUCCESS';
var COUNTS_LOADING_ERROR = exports.COUNTS_LOADING_ERROR = 'app/Home/COUNTS_LOADING_ERROR';

},{}],410:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.HomeView = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../elemental');

var _reactRedux = require('react-redux');

var _Lists = require('./components/Lists');

var _Lists2 = _interopRequireDefault(_Lists);

var _Section = require('./components/Section');

var _Section2 = _interopRequireDefault(_Section);

var _AlertMessages = require('../../shared/AlertMessages');

var _AlertMessages2 = _interopRequireDefault(_AlertMessages);

var _actions = require('./actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HomeView = _react2.default.createClass({
	displayName: 'HomeView',
	getInitialState: function getInitialState() {
		return {
			modalIsOpen: true
		};
	},

	// When everything is rendered, start loading the item counts of the lists
	// from the API
	componentDidMount: function componentDidMount() {
		this.props.dispatch((0, _actions.loadCounts)());
	},
	getSpinner: function getSpinner() {
		if (this.props.counts && Object.keys(this.props.counts).length === 0 && (this.props.error || this.props.loading)) {
			return _react2.default.createElement(_elemental.Spinner, null);
		}
		return null;
	},
	render: function render() {
		var _this = this;

		var spinner = this.getSpinner();
		return _react2.default.createElement(
			_elemental.Container,
			{ 'data-screen-id': 'home' },
			_react2.default.createElement(
				'div',
				{ className: 'dashboard-header' },
				_react2.default.createElement(
					'div',
					{ className: 'dashboard-heading' },
					Keystone.brand
				)
			),
			_react2.default.createElement(
				'div',
				{ className: 'dashboard-groups' },
				this.props.error && _react2.default.createElement(_AlertMessages2.default, {
					alerts: { error: { error: "There is a problem with the network, we're trying to reconnect..."
						} }
				}),
				Keystone.nav.flat ? _react2.default.createElement(_Lists2.default, {
					counts: this.props.counts,
					lists: Keystone.lists,
					spinner: spinner
				}) : _react2.default.createElement(
					'div',
					null,
					Keystone.nav.sections.map(function (navSection) {
						return _react2.default.createElement(
							_Section2.default,
							{ key: navSection.key, id: navSection.key, label: navSection.label },
							_react2.default.createElement(_Lists2.default, {
								counts: _this.props.counts,
								lists: navSection.lists,
								spinner: spinner
							})
						);
					}),
					Keystone.orphanedLists.length ? _react2.default.createElement(
						_Section2.default,
						{ label: 'Other', icon: 'octicon-database' },
						_react2.default.createElement(_Lists2.default, {
							counts: this.props.counts,
							lists: Keystone.orphanedLists,
							spinner: spinner
						})
					) : null
				)
			)
		);
	}
}); /**
     * The Home view is the view one sees at /keystone. It shows a list of all lists,
     * grouped by their section.
     */

exports.HomeView = HomeView;
exports.default = (0, _reactRedux.connect)(function (state) {
	return {
		counts: state.home.counts,
		loading: state.home.loading,
		error: state.home.error
	};
})(HomeView);

},{"../../elemental":399,"../../shared/AlertMessages":458,"./actions":405,"./components/Lists":407,"./components/Section":408,"react":undefined,"react-redux":undefined}],411:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialState = {
	counts: {},
	loading: false,
	error: null
};

function home() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	var action = arguments[1];

	switch (action.type) {
		case _constants.LOAD_COUNTS:
			return (0, _objectAssign2.default)({}, state, {
				loading: true
			});
		case _constants.COUNTS_LOADING_SUCCESS:
			return (0, _objectAssign2.default)({}, state, {
				loading: false,
				counts: action.counts,
				error: null
			});
		case _constants.COUNTS_LOADING_ERROR:
			return (0, _objectAssign2.default)({}, state, {
				loading: false,
				error: action.error
			});
		default:
			return state;
	}
}

exports.default = home;

},{"./constants":409,"object-assign":577}],412:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = getRelatedIconClass;
/**
 * Gets a related icon for a string, returned as a classname to be applied to a span. If no related
 * icon is found, returns a classname for a dot icon
 *
 * @param  [String] string
 * @return [String]        The classname of the icon
 */
function getRelatedIconClass(string) {
	var icons = [{ icon: 'book', sections: ['books', 'posts', 'blog', 'blog-posts', 'stories', 'news-stories', 'content'] }, { icon: 'briefcase', sections: ['businesses', 'companies', 'listings', 'organizations', 'partners'] }, { icon: 'calendar', sections: ['events', 'dates'] }, { icon: 'clock', sections: ['classes', 'hours', 'times'] }, { icon: 'file-media', sections: ['gallery', 'galleries', 'images', 'photos', 'pictures'] }, { icon: 'file-text', sections: ['attachments', 'docs', 'documents', 'files'] }, { icon: 'location', sections: ['locations', 'markers', 'places'] }, { icon: 'mail', sections: ['emails', 'enquiries'] }, { icon: 'megaphone', sections: ['broadcasts', 'jobs', 'talks'] }, { icon: 'organization', sections: ['contacts', 'customers', 'groups', 'members', 'people', 'speakers', 'teams', 'users'] }, { icon: 'package', sections: ['boxes', 'items', 'packages', 'parcels'] }, { icon: 'tag', sections: ['tags'] }];
	var classes = icons.filter(function (obj) {
		return obj.sections.indexOf(string) !== -1;
	}).map(function (obj) {
		return 'octicon octicon-' + obj.icon;
	});

	if (!classes.length) {
		classes.push('octicon octicon-primitive-dot');
	}

	return classes.join(' ');
}

},{}],413:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.selectItem = selectItem;
exports.loadItemData = loadItemData;
exports.loadRelationshipItemData = loadRelationshipItemData;
exports.dataLoaded = dataLoaded;
exports.relationshipDataLoaded = relationshipDataLoaded;
exports.dataLoadingError = dataLoadingError;
exports.deleteItem = deleteItem;
exports.reorderItems = reorderItems;
exports.moveItem = moveItem;
exports.resetItems = resetItems;

var _constants = require('./constants');

var _actions = require('../List/actions');

/**
 * Select an item
 *
 * @param  {String} itemId The item ID
 */
function selectItem(itemId) {
	return {
		type: _constants.SELECT_ITEM,
		id: itemId
	};
}

/**
 * Load the item data of the current item
 */
function loadItemData() {
	return function (dispatch, getState) {
		// Hold on to the id of the item we currently want to load.
		// Dispatch this reference to our redux store to hold on to as a 'loadingRef'.
		var currentItemID = getState().item.id;
		dispatch({
			type: _constants.LOAD_DATA
		});
		var state = getState();
		var list = state.lists.currentList;

		// const itemID = state.item.id;
		// Load a specific item with the utils/List.js helper
		list.loadItem(state.item.id, { drilldown: true }, function (err, itemData) {

			// Once this async request has fired this callback, check that
			// the item id referenced by thisLoadRef is the same id
			// referenced by loadingRef in the redux store.

			// If it is, then this is the latest request, and it is safe to resolve it normally.
			// If it is not the same id however,
			// this means that this request is NOT the latest fired request,
			// and so we'll bail out of it early.

			if (getState().item.id !== currentItemID) return;
			if (err || !itemData) {
				dispatch(dataLoadingError(err));
			} else {
				dispatch(dataLoaded(itemData));
			}
		});
	};
}

function loadRelationshipItemData(_ref) {
	var columns = _ref.columns,
	    refList = _ref.refList,
	    relationship = _ref.relationship,
	    relatedItemId = _ref.relatedItemId;

	return function (dispatch, getState) {
		refList.loadItems({
			columns: columns,
			filters: [{
				field: refList.fields[relationship.refPath],
				value: { value: relatedItemId }
			}]
		}, function (err, items) {
			// // TODO: indicate pagination & link to main list view
			// this.setState({ items });
			dispatch(relationshipDataLoaded(relationship.path, items));
		});
	};
}

/**
 * Called when data of the current item is loaded
 *
 * @param  {Object} data The item data
 */
function dataLoaded(data) {
	return {
		type: _constants.DATA_LOADING_SUCCESS,
		loadingRef: null,
		data: data
	};
}

function relationshipDataLoaded(path, data) {
	return {
		type: _constants.LOAD_RELATIONSHIP_DATA,
		relationshipPath: path,
		data: data
	};
};

/**
 * Called when there was an error during the loading of the current item data,
 * will retry loading the data ever NETWORK_ERROR_RETRY_DELAY milliseconds
 *
 * @param  {Object} error The error
 */
function dataLoadingError(err) {
	return {
		type: _constants.DATA_LOADING_ERROR,
		loadingRef: null,
		error: err
	};
}

/**
 * Deletes an item and optionally redirects to the current list URL
 *
 * @param  {String} id     The ID of the item we want to delete
 * @param  {Object} router A react-router router object. If this is passed, we
 *                         redirect to Keystone.adminPath/currentList.path!
 */
function deleteItem(id, router) {
	return function (dispatch, getState) {
		var state = getState();
		var list = state.lists.currentList;
		list.deleteItem(id, function (err) {
			// If a router is passed, redirect to the current list path,
			// otherwise stay where we are
			if (router) {
				var redirectUrl = Keystone.adminPath + '/' + list.path;
				if (state.lists.page.index && state.lists.page.index > 1) {
					redirectUrl = redirectUrl + '?page=' + state.lists.page.index;
				}
				router.push(redirectUrl);
			}
			// TODO Proper error handling
			if (err) {
				alert('Error deleting item, please try again!');
			} else {
				dispatch((0, _actions.loadItems)());
			}
		});
	};
}

function reorderItems(_ref2) {
	var columns = _ref2.columns,
	    refList = _ref2.refList,
	    relationship = _ref2.relationship,
	    relatedItemId = _ref2.relatedItemId,
	    item = _ref2.item,
	    prevSortOrder = _ref2.prevSortOrder,
	    newSortOrder = _ref2.newSortOrder;

	return function (dispatch, getState) {
		// Send the item, previous sortOrder and the new sortOrder
		// we should get the proper list and new page results in return
		refList.reorderItems(item, prevSortOrder, newSortOrder, {
			columns: columns,
			filters: [{
				field: refList.fields[relationship.refPath],
				value: { value: relatedItemId }
			}]
		}, function (err, items) {
			dispatch(relationshipDataLoaded(relationship.path, items));
			// If err, flash the row alert
			// if (err) {
			// 	dispatch(resetItems(item.id));
			// 	// return this.resetItems(this.findItemById[item.id]);
			// } else {
			// 	dispatch(itemsLoaded(items));
			// 	dispatch(setRowAlert({
			// 		success: item.id,
			// 		fail: false,
			// 	}));
			// }
		});
	};
}

function moveItem(_ref3) {
	var prevIndex = _ref3.prevIndex,
	    newIndex = _ref3.newIndex,
	    relationshipPath = _ref3.relationshipPath,
	    newSortOrder = _ref3.newSortOrder;

	return {
		type: _constants.DRAG_MOVE_ITEM,
		prevIndex: prevIndex,
		newIndex: newIndex,
		relationshipPath: relationshipPath,
		newSortOrder: newSortOrder
	};
}

function resetItems() {
	return {
		type: _constants.DRAG_RESET_ITEMS
	};
}

},{"../List/actions":432,"./constants":427}],414:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _vkey = require('vkey');

var _vkey2 = _interopRequireDefault(_vkey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AltText = function (_Component) {
	_inherits(AltText, _Component);

	function AltText() {
		_classCallCheck(this, AltText);

		var _this = _possibleConstructorReturn(this, (AltText.__proto__ || Object.getPrototypeOf(AltText)).call(this));

		_this.handleKeyDown = _this.handleKeyDown.bind(_this);
		_this.handleKeyUp = _this.handleKeyUp.bind(_this);

		_this.state = {
			modified: false
		};
		return _this;
	}

	_createClass(AltText, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			document.body.addEventListener('keydown', this.handleKeyDown, false);
			document.body.addEventListener('keyup', this.handleKeyUp, false);
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			document.body.removeEventListener('keydown', this.handleKeyDown);
			document.body.removeEventListener('keyup', this.handleKeyUp);
		}
	}, {
		key: 'handleKeyDown',
		value: function handleKeyDown(e) {
			if (_vkey2.default[e.keyCode] !== this.props.modifier) return;
			this.setState({
				modified: true
			});
		}
	}, {
		key: 'handleKeyUp',
		value: function handleKeyUp(e) {
			if (_vkey2.default[e.keyCode] !== this.props.modifier) return;
			this.setState({
				modified: false
			});
		}
	}, {
		key: 'render',
		value: function render() {
			// NOTE `modifier` is declared to remove it from `props`, though never used
			var _props = this.props,
			    Component = _props.component,
			    modified = _props.modified,
			    modifier = _props.modifier,
			    normal = _props.normal,
			    props = _objectWithoutProperties(_props, ['component', 'modified', 'modifier', 'normal']);

			props.children = this.state.modified ? modified : normal;

			return _react2.default.createElement(Component, props);
		}
	}]);

	return AltText;
}(_react.Component);

;

var SUPPORTED_KEYS = ['<alt>', '<control>', '<meta>', '<shift>'];

AltText.propTypes = {
	component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
	modified: _react.PropTypes.oneOfType([_react.PropTypes.element, _react.PropTypes.string]),
	modifier: _react.PropTypes.oneOf(SUPPORTED_KEYS),
	normal: _react.PropTypes.oneOfType([_react.PropTypes.element, _react.PropTypes.string])
};
AltText.defaultProps = {
	component: 'span',
	modifier: '<alt>'
};

module.exports = AltText;

},{"react":undefined,"vkey":undefined}],415:[function(require,module,exports){
'use strict';

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _DrilldownItem = require('./DrilldownItem');

var _DrilldownItem2 = _interopRequireDefault(_DrilldownItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Drilldown(_ref) {
	var className = _ref.className,
	    items = _ref.items,
	    props = _objectWithoutProperties(_ref, ['className', 'items']);

	props.className = (0, _glamor.css)(classes.drilldown, className);

	return _react2.default.createElement(
		'ul',
		props,
		items.map(function (item, idx) {
			return _react2.default.createElement(_DrilldownItem2.default, {
				href: item.href,
				key: idx,
				label: item.label,
				separate: idx < items.length - 1
			});
		})
	);
};

Drilldown.propTypes = {
	items: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		href: _react.PropTypes.string.isRequired,
		label: _react.PropTypes.string.isRequired,
		separate: _react.PropTypes.bool // FIXME verb; could be better
	})).isRequired
};

var classes = {
	drilldown: {
		display: 'inline-block',
		listStyle: 'none',
		margin: 0,
		padding: 0
	}
};

module.exports = Drilldown;

},{"./DrilldownItem":416,"glamor":undefined,"react":undefined}],416:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _elemental = require('../../../elemental');

var _theme = require('../../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function DrilldownItem(_ref) {
	var className = _ref.className,
	    href = _ref.href,
	    label = _ref.label,
	    separate = _ref.separate,
	    separator = _ref.separator,
	    style = _ref.style,
	    props = _objectWithoutProperties(_ref, ['className', 'href', 'label', 'separate', 'separator', 'style']);

	props.className = (0, _glamor.css)(classes.item, className);

	// remove horizontal padding
	var styles = _extends({
		paddingLeft: 0,
		paddingRight: 0
	}, style);

	return _react2.default.createElement(
		'li',
		props,
		_react2.default.createElement(
			_elemental.Button,
			{
				component: _reactRouter.Link,
				style: styles,
				to: href,
				variant: 'link'
			},
			label
		),
		separate && _react2.default.createElement(
			'span',
			{ className: (0, _glamor.css)(classes.separator) },
			separator
		)
	);
};

DrilldownItem.propTypes = {
	href: _react.PropTypes.string.isRequired,
	label: _react.PropTypes.string.isRequired,
	separate: _react.PropTypes.bool, // FIXME verb; could be better
	separator: _react.PropTypes.oneOfType([_react.PropTypes.element, _react.PropTypes.string])
};
DrilldownItem.defaultProps = {
	separator: _react2.default.createElement(_elemental.Glyph, { name: 'chevron-right' })
};

var classes = {
	item: {
		display: 'inline-block',
		margin: 0,
		padding: 0,
		verticalAlign: 'middle'
	},
	separator: {
		color: _theme2.default.color.gray40,
		marginLeft: '0.5em',
		marginRight: '0.5em'
	}
};

module.exports = DrilldownItem;

},{"../../../../theme":477,"../../../elemental":399,"glamor":undefined,"react":undefined,"react-router":undefined}],417:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _elemental = require('../../../elemental');

var _FieldTypes = require('FieldTypes');

var _color = require('../../../../utils/color');

var _theme = require('../../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _AlertMessages = require('../../../shared/AlertMessages');

var _AlertMessages2 = _interopRequireDefault(_AlertMessages);

var _ConfirmationDialog = require('./../../../shared/ConfirmationDialog');

var _ConfirmationDialog2 = _interopRequireDefault(_ConfirmationDialog);

var _FormHeading = require('./FormHeading');

var _FormHeading2 = _interopRequireDefault(_FormHeading);

var _AltText = require('./AltText');

var _AltText2 = _interopRequireDefault(_AltText);

var _FooterBar = require('./FooterBar');

var _FooterBar2 = _interopRequireDefault(_FooterBar);

var _InvalidFieldType = require('../../../shared/InvalidFieldType');

var _InvalidFieldType2 = _interopRequireDefault(_InvalidFieldType);

var _actions = require('../actions');

var _string = require('../../../../utils/string');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getNameFromData(data) {
	if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
		if (typeof data.first === 'string' && typeof data.last === 'string') {
			return data.first + ' ' + data.last;
		} else if (data.id) {
			return data.id;
		}
	}
	return data;
}

function smoothScrollTop() {
	if (document.body.scrollTop || document.documentElement.scrollTop) {
		window.scrollBy(0, -50);
		var timeOut = setTimeout(smoothScrollTop, 20);
	} else {
		clearTimeout(timeOut);
	}
}

function quickScrollTop() {
	if (document.body.scrollTop || document.documentElement.scrollTop) {
		window.scrollBy(0, -50);
		quickScrollTop();
	}
}

var EditForm = _react2.default.createClass({
	displayName: 'EditForm',
	propTypes: {
		data: _react2.default.PropTypes.object,
		list: _react2.default.PropTypes.object
	},
	getInitialState: function getInitialState() {
		return {
			values: (0, _objectAssign2.default)({}, this.props.data.fields),
			confirmationDialog: null,
			loading: false,
			lastValues: null, // used for resetting
			focusFirstField: !this.props.list.nameField && !this.props.list.nameFieldIsFormHeader
		};
	},
	componentDidMount: function componentDidMount() {
		this.__isMounted = true;
	},
	componentWillUnmount: function componentWillUnmount() {
		this.__isMounted = false;
	},
	getFieldProps: function getFieldProps(field) {
		var props = (0, _objectAssign2.default)({}, field);
		var alerts = this.state.alerts;
		// Display validation errors inline
		if (alerts && alerts.error && alerts.error.error === 'validation errors') {
			if (alerts.error.detail[field.path]) {
				// NOTE: This won't work yet, as ElementalUI doesn't allow
				// passed in isValid, only invalidates via internal state.
				// PR to fix that: https://github.com/elementalui/elemental/pull/149
				props.isValid = false;
			}
		}
		props.value = this.state.values[field.path];
		props.values = this.state.values;
		props.onChange = this.handleChange;
		props.mode = 'edit';
		return props;
	},
	handleChange: function handleChange(event) {
		var values = (0, _objectAssign2.default)({}, this.state.values);

		values[event.path] = event.value;
		this.setState({ values: values });
	},
	toggleDeleteDialog: function toggleDeleteDialog() {
		this.setState({
			deleteDialogIsOpen: !this.state.deleteDialogIsOpen
		});
	},
	toggleResetDialog: function toggleResetDialog() {
		this.setState({
			resetDialogIsOpen: !this.state.resetDialogIsOpen
		});
	},
	handleReset: function handleReset() {
		this.setState({
			values: (0, _objectAssign2.default)({}, this.state.lastValues || this.props.data.fields),
			resetDialogIsOpen: false
		});
	},
	handleDelete: function handleDelete() {
		var data = this.props.data;

		this.props.dispatch((0, _actions.deleteItem)(data.id, this.props.router));
	},
	handleKeyFocus: function handleKeyFocus() {
		var input = this.refs.keyOrIdInput;
		input.select();
	},
	removeConfirmationDialog: function removeConfirmationDialog() {
		this.setState({
			confirmationDialog: null
		});
	},
	updateItem: function updateItem() {
		var _this = this;

		var _props = this.props,
		    data = _props.data,
		    list = _props.list;

		var editForm = this.refs.editForm;
		var formData = new FormData(editForm);
		// Show loading indicator
		this.setState({
			loading: true
		});

		list.updateItem(data.id, formData, function (err, data) {

			//  smoothScrollTop();
			quickScrollTop();
			if (err) {
				_this.setState({
					alerts: {
						error: err
					},
					loading: false
				});
			} else {
				// Success, display success flash messages, replace values
				// TODO: Update key value
				_this.setState({
					alerts: {
						success: {
							success: 'Your changes have been saved successfully'
						}
					},
					lastValues: _this.state.values,
					values: data.fields,
					loading: false
				});
			}
		});
	},
	renderKeyOrId: function renderKeyOrId() {
		var className = 'EditForm__key-or-id';
		var list = this.props.list;

		if (list.nameField && list.autokey && this.props.data[list.autokey.path]) {
			return _react2.default.createElement(
				'div',
				{ className: className },
				_react2.default.createElement(_AltText2.default, {
					modified: 'ID:',
					normal: (0, _string.upcase)(list.autokey.path) + ': ',
					title: 'Press <alt> to reveal the ID',
					className: 'EditForm__key-or-id__label' }),
				_react2.default.createElement(_AltText2.default, {
					modified: _react2.default.createElement('input', { ref: 'keyOrIdInput', onFocus: this.handleKeyFocus, value: this.props.data.id, className: 'EditForm__key-or-id__input', readOnly: true }),
					normal: _react2.default.createElement('input', { ref: 'keyOrIdInput', onFocus: this.handleKeyFocus, value: this.props.data[list.autokey.path], className: 'EditForm__key-or-id__input', readOnly: true }),
					title: 'Press <alt> to reveal the ID',
					className: 'EditForm__key-or-id__field' })
			);
		} else if (list.autokey && this.props.data[list.autokey.path]) {
			return _react2.default.createElement(
				'div',
				{ className: className },
				_react2.default.createElement(
					'span',
					{ className: 'EditForm__key-or-id__label' },
					list.autokey.path,
					': '
				),
				_react2.default.createElement(
					'div',
					{ className: 'EditForm__key-or-id__field' },
					_react2.default.createElement('input', { ref: 'keyOrIdInput', onFocus: this.handleKeyFocus, value: this.props.data[list.autokey.path], className: 'EditForm__key-or-id__input', readOnly: true })
				)
			);
		} else if (list.nameField) {
			return _react2.default.createElement(
				'div',
				{ className: className },
				_react2.default.createElement(
					'span',
					{ className: 'EditForm__key-or-id__label' },
					'ID: '
				),
				_react2.default.createElement(
					'div',
					{ className: 'EditForm__key-or-id__field' },
					_react2.default.createElement('input', { ref: 'keyOrIdInput', onFocus: this.handleKeyFocus, value: this.props.data.id, className: 'EditForm__key-or-id__input', readOnly: true })
				)
			);
		}
	},
	renderNameField: function renderNameField() {
		var nameField = this.props.list.nameField;
		var nameFieldIsFormHeader = this.props.list.nameFieldIsFormHeader;
		var wrapNameField = function wrapNameField(field) {
			return _react2.default.createElement(
				'div',
				{ className: 'EditForm__name-field' },
				field
			);
		};
		if (nameFieldIsFormHeader) {
			var nameFieldProps = this.getFieldProps(nameField);
			nameFieldProps.label = null;
			nameFieldProps.size = 'full';
			nameFieldProps.autoFocus = true;
			nameFieldProps.inputProps = {
				className: 'item-name-field',
				placeholder: nameField.label,
				size: 'large'
			};
			return wrapNameField(_react2.default.createElement(_FieldTypes.Fields[nameField.type], nameFieldProps));
		} else {
			return wrapNameField(_react2.default.createElement(
				'h2',
				null,
				this.props.data.name.replace(/&quot;/g, '"') || '(no" name)'
			));
		}
	},
	renderFormElements: function renderFormElements() {
		var _this2 = this;

		var headings = 0;

		return this.props.list.uiElements.map(function (el, index) {
			// Don't render the name field if it is the header since it'll be rendered in BIG above
			// the list. (see renderNameField method, this is the reverse check of the one it does)
			if (_this2.props.list.nameField && el.field === _this2.props.list.nameField.path && _this2.props.list.nameFieldIsFormHeader) return;

			if (el.type === 'heading') {
				headings++;
				el.options.values = _this2.state.values;
				el.key = 'h-' + headings;
				return _react2.default.createElement(_FormHeading2.default, el);
			}

			if (el.type === 'field') {
				var field = _this2.props.list.fields[el.field];
				var props = _this2.getFieldProps(field);
				if (typeof _FieldTypes.Fields[field.type] !== 'function') {
					return _react2.default.createElement(_InvalidFieldType2.default, { type: field.type, path: field.path, key: field.path });
				}
				props.key = field.path;
				if (index === 0 && _this2.state.focusFirstField) {
					props.autoFocus = true;
				}
				return _react2.default.createElement(_FieldTypes.Fields[field.type], props);
			}
		}, this);
	},
	renderFooterBar: function renderFooterBar() {
		if (this.props.list.noedit && this.props.list.nodelete) {
			return null;
		}

		var loading = this.state.loading;

		var loadingButtonText = loading ? 'Saving' : 'Save';

		// Padding must be applied inline so the FooterBar can determine its
		// innerHeight at runtime. Aphrodite's styling comes later...

		return _react2.default.createElement(
			_FooterBar2.default,
			{ style: _extends({}, styles.footerbarInner, { 'background': '#e8e4e4' }) },
			_react2.default.createElement(
				'div',
				{ style: _extends({}, styles.footerbarInner) },
				!this.props.list.noedit && _react2.default.createElement(
					_elemental.LoadingButton,
					{
						color: 'primary',
						disabled: loading,
						loading: loading,
						onClick: this.updateItem,
						'data-button': 'update'
					},
					loadingButtonText
				),
				!this.props.list.noedit && _react2.default.createElement(
					_elemental.Button,
					{ disabled: loading, onClick: this.toggleResetDialog, variant: 'link', color: 'cancel', 'data-button': 'reset' },
					_react2.default.createElement(_elemental.ResponsiveText, {
						hiddenXS: 'reset changes',
						visibleXS: 'reset'
					})
				),
				!this.props.list.nodelete && _react2.default.createElement(
					_elemental.Button,
					{ disabled: loading, onClick: this.toggleDeleteDialog, variant: 'link', color: 'delete', style: styles.deleteButton, 'data-button': 'delete' },
					_react2.default.createElement(_elemental.ResponsiveText, {
						hiddenXS: 'delete ' + this.props.list.singular.toLowerCase(),
						visibleXS: 'delete'
					})
				)
			)
		);
	},
	renderTrackingMeta: function renderTrackingMeta() {
		// TODO: These fields are visible now, so we don't want this. We may revisit
		// it when we have more granular control over hiding fields in certain
		// contexts, so I'm leaving this code here as a reference for now - JW
		if (true) return null; // if (true) prevents unreachable code linter errpr

		if (!this.props.list.tracking) return null;

		var elements = [];
		var data = {};

		if (this.props.list.tracking.createdAt) {
			data.createdAt = this.props.data.fields[this.props.list.tracking.createdAt];
			if (data.createdAt) {
				elements.push(_react2.default.createElement(
					_elemental.FormField,
					{ key: 'createdAt', label: 'Created on' },
					_react2.default.createElement(
						_elemental.FormInput,
						{ noedit: true, title: (0, _moment2.default)(data.createdAt).format('DD/MM/YYYY h:mm:ssa') },
						(0, _moment2.default)(data.createdAt).format('Do MMM YYYY')
					)
				));
			}
		}

		if (this.props.list.tracking.createdBy) {
			data.createdBy = this.props.data.fields[this.props.list.tracking.createdBy];
			if (data.createdBy && data.createdBy.name) {
				var createdByName = getNameFromData(data.createdBy.name);
				if (createdByName) {
					elements.push(_react2.default.createElement(
						_elemental.FormField,
						{ key: 'createdBy', label: 'Created by' },
						_react2.default.createElement(
							_elemental.FormInput,
							{ noedit: true },
							data.createdBy.name.first,
							' ',
							data.createdBy.name.last
						)
					));
				}
			}
		}

		if (this.props.list.tracking.updatedAt) {
			data.updatedAt = this.props.data.fields[this.props.list.tracking.updatedAt];
			if (data.updatedAt && (!data.createdAt || data.createdAt !== data.updatedAt)) {
				elements.push(_react2.default.createElement(
					_elemental.FormField,
					{ key: 'updatedAt', label: 'Updated on' },
					_react2.default.createElement(
						_elemental.FormInput,
						{ noedit: true, title: (0, _moment2.default)(data.updatedAt).format('DD/MM/YYYY h:mm:ssa') },
						(0, _moment2.default)(data.updatedAt).format('Do MMM YYYY')
					)
				));
			}
		}

		if (this.props.list.tracking.updatedBy) {
			data.updatedBy = this.props.data.fields[this.props.list.tracking.updatedBy];
			if (data.updatedBy && data.updatedBy.name) {
				var updatedByName = getNameFromData(data.updatedBy.name);
				if (updatedByName) {
					elements.push(_react2.default.createElement(
						_elemental.FormField,
						{ key: 'updatedBy', label: 'Updated by' },
						_react2.default.createElement(
							_elemental.FormInput,
							{ noedit: true },
							data.updatedBy.name.first,
							' ',
							data.updatedBy.name.last
						)
					));
				}
			}
		}

		return Object.keys(elements).length ? _react2.default.createElement(
			'div',
			{ className: 'EditForm__meta' },
			_react2.default.createElement(
				'h3',
				{ className: 'form-heading' },
				'Meta'
			),
			elements
		) : null;
	},
	render: function render() {
		var list = this.props.list;

		var message = 'Are you sure you want to delete <strong>' + this.props.data.name + '?</strong>';

		if (list.deletePrompt) {
			message = list.deletePrompt;
		}
		return _react2.default.createElement(
			'form',
			{ ref: 'editForm', className: 'EditForm-container' },
			this.state.alerts ? _react2.default.createElement(_AlertMessages2.default, { alerts: this.state.alerts }) : null,
			_react2.default.createElement(
				_elemental.Grid.Row,
				null,
				_react2.default.createElement(
					_elemental.Grid.Col,
					{ large: 'three-quarters' },
					_react2.default.createElement(
						_elemental.Form,
						{ layout: 'horizontal', component: 'div' },
						this.renderNameField(),
						this.renderKeyOrId(),
						this.renderFormElements(),
						this.renderTrackingMeta()
					)
				),
				_react2.default.createElement(
					_elemental.Grid.Col,
					{ large: 'one-quarter' },
					_react2.default.createElement('span', null)
				)
			),
			this.renderFooterBar(),
			_react2.default.createElement(
				_ConfirmationDialog2.default,
				{
					confirmationLabel: 'Reset',
					isOpen: this.state.resetDialogIsOpen,
					onCancel: this.toggleResetDialog,
					onConfirmation: this.handleReset
				},
				_react2.default.createElement(
					'p',
					null,
					'Reset your changes to ',
					_react2.default.createElement(
						'strong',
						null,
						this.props.data.name
					),
					'?'
				)
			),
			_react2.default.createElement(
				_ConfirmationDialog2.default,
				{
					confirmationLabel: 'Delete',
					isOpen: this.state.deleteDialogIsOpen,
					onCancel: this.toggleDeleteDialog,
					onConfirmation: this.handleDelete
				},
				_react2.default.createElement('span', { dangerouslySetInnerHTML: { __html: message } }),
				_react2.default.createElement('br', null),
				_react2.default.createElement('br', null),
				'This cannot be undone.'
			)
		);
	}
});

var styles = {
	footerbar: {
		backgroundColor: (0, _color.fade)(_theme2.default.color.body, 93),
		boxShadow: '0 -2px 0 rgba(0, 0, 0, 0.1)',
		paddingBottom: 20,
		paddingTop: 20,
		zIndex: 99
	},
	footerbarInner: {
		height: _theme2.default.component.height // FIXME aphrodite bug
	},
	deleteButton: {
		float: 'right'
	}
};

module.exports = EditForm;

},{"../../../../theme":477,"../../../../utils/color":479,"../../../../utils/string":484,"../../../elemental":399,"../../../shared/AlertMessages":458,"../../../shared/InvalidFieldType":464,"../actions":413,"./../../../shared/ConfirmationDialog":459,"./AltText":414,"./FooterBar":420,"./FormHeading":421,"FieldTypes":undefined,"moment":undefined,"object-assign":577,"react":undefined}],418:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.EditFormHeader = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactRedux = require('react-redux');

var _Toolbar = require('./Toolbar');

var _Toolbar2 = _interopRequireDefault(_Toolbar);

var _ToolbarSection = require('./Toolbar/ToolbarSection');

var _ToolbarSection2 = _interopRequireDefault(_ToolbarSection);

var _EditFormHeaderSearch = require('./EditFormHeaderSearch');

var _EditFormHeaderSearch2 = _interopRequireDefault(_EditFormHeaderSearch);

var _reactRouter = require('react-router');

var _Drilldown = require('./Drilldown');

var _Drilldown2 = _interopRequireDefault(_Drilldown);

var _elemental = require('../../../elemental');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EditFormHeader = exports.EditFormHeader = _react2.default.createClass({
	displayName: 'EditFormHeader',
	propTypes: {
		data: _react2.default.PropTypes.object,
		list: _react2.default.PropTypes.object,
		toggleCreate: _react2.default.PropTypes.func
	},
	getInitialState: function getInitialState() {
		return {
			searchString: ''
		};
	},
	toggleCreate: function toggleCreate(visible) {
		this.props.toggleCreate(visible);
	},
	searchStringChanged: function searchStringChanged(event) {
		this.setState({
			searchString: event.target.value
		});
	},
	handleEscapeKey: function handleEscapeKey(event) {
		var escapeKeyCode = 27;

		if (event.which === escapeKeyCode) {
			(0, _reactDom.findDOMNode)(this.refs.searchField).blur();
		}
	},
	renderDrilldown: function renderDrilldown() {
		return _react2.default.createElement(
			_ToolbarSection2.default,
			{ left: true },
			this.renderDrilldownItems(),
			this.renderSearch()
		);
	},
	renderDrilldownItems: function renderDrilldownItems() {
		var _props = this.props,
		    data = _props.data,
		    list = _props.list;

		var items = data.drilldown ? data.drilldown.items : [];

		var backPath = Keystone.adminPath + '/' + list.path;
		var backStyles = { paddingLeft: 0, paddingRight: 0 };
		// Link to the list page the user came from
		if (this.props.listActivePage && this.props.listActivePage > 1) {
			backPath = backPath + '?page=' + this.props.listActivePage;
		}

		// return a single back button when no drilldown exists
		if (!items.length) {
			return _react2.default.createElement(
				_elemental.GlyphButton,
				{
					component: _reactRouter.Link,
					'data-e2e-editform-header-back': true,
					glyph: 'chevron-left',
					position: 'left',
					style: backStyles,
					to: backPath,
					variant: 'link'
				},
				list.plural
			);
		}

		// prepare the drilldown elements
		var drilldown = [];
		items.forEach(function (item, idx) {
			// FIXME @jedwatson
			// we used to support relationships of type MANY where items were
			// represented as siblings inside a single list item; this got a
			// bit messy...
			item.items.forEach(function (link) {
				drilldown.push({
					href: link.href,
					label: link.label,
					title: item.list.singular
				});
			});
		});

		// add the current list to the drilldown
		drilldown.push({
			href: backPath,
			label: list.plural
		});

		return _react2.default.createElement(_Drilldown2.default, { items: drilldown });
	},
	renderSearch: function renderSearch() {
		var list = this.props.list;
		return _react2.default.createElement(
			'form',
			{ action: Keystone.adminPath + '/' + list.path, className: 'EditForm__header__search' },
			_react2.default.createElement(_EditFormHeaderSearch2.default, {
				value: this.state.searchString,
				onChange: this.searchStringChanged,
				onKeyUp: this.handleEscapeKey
			})
		);
	},
	renderInfo: function renderInfo() {
		return _react2.default.createElement(
			_ToolbarSection2.default,
			{ right: true },
			this.renderCreateButton()
		);
	},
	renderCreateButton: function renderCreateButton() {
		var _this = this;

		var _props$list = this.props.list,
		    nocreate = _props$list.nocreate,
		    autocreate = _props$list.autocreate,
		    singular = _props$list.singular;


		if (nocreate) return null;

		var props = {};
		if (autocreate) {
			props.href = '?new' + Keystone.csrf.query;
		} else {
			props.onClick = function () {
				_this.toggleCreate(true);
			};
		}
		return _react2.default.createElement(
			_elemental.GlyphButton,
			_extends({ 'data-e2e-item-create-button': 'true', color: 'success', glyph: 'plus', position: 'left' }, props),
			_react2.default.createElement(_elemental.ResponsiveText, { hiddenXS: 'New ' + singular, visibleXS: 'Create' })
		);
	},
	render: function render() {
		return _react2.default.createElement(
			_Toolbar2.default,
			null,
			this.renderDrilldown(),
			this.renderInfo()
		);
	}
});

exports.default = (0, _reactRedux.connect)(function (state) {
	return {
		listActivePage: state.lists.page.index
	};
})(EditFormHeader);

},{"../../../elemental":399,"./Drilldown":415,"./EditFormHeaderSearch":419,"./Toolbar":426,"./Toolbar/ToolbarSection":425,"react":undefined,"react-dom":undefined,"react-redux":undefined,"react-router":undefined}],419:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _glamor = require('glamor');

var _elemental = require('../../../elemental');

var _theme = require('../../../../theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint quote-props: ["error", "as-needed"] */

var EditFormHeaderSearch = function (_Component) {
	_inherits(EditFormHeaderSearch, _Component);

	function EditFormHeaderSearch() {
		_classCallCheck(this, EditFormHeaderSearch);

		var _this = _possibleConstructorReturn(this, (EditFormHeaderSearch.__proto__ || Object.getPrototypeOf(EditFormHeaderSearch)).call(this));

		_this.focusField = _this.focusField.bind(_this);
		_this.state = { focused: false };
		return _this;
	}

	_createClass(EditFormHeaderSearch, [{
		key: 'focusField',
		value: function focusField() {
			var _this2 = this;

			this.setState({ focused: true }, function () {
				(0, _reactDom.findDOMNode)(_this2.refs.target).focus();
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this3 = this;

			var focused = this.state.focused;

			var _props = this.props,
			    onChange = _props.onChange,
			    onKeyUp = _props.onKeyUp,
			    value = _props.value,
			    props = _objectWithoutProperties(_props, ['onChange', 'onKeyUp', 'value']);

			return focused ? _react2.default.createElement(
				'div',
				{ className: (0, _glamor.css)(classes.wrapper) },
				_react2.default.createElement(_elemental.Glyph, {
					aphroditeStyles: classes.glyph,
					color: _theme2.default.color.gray40,
					name: 'search',
					'data-e2e-search-icon': true
				}),
				_react2.default.createElement(_elemental.FormInput, _extends({
					aphroditeStyles: classes.input,
					name: 'search',
					onBlur: function onBlur() {
						return _this3.setState({ focused: false });
					},
					onChange: onChange,
					onKeyUp: onKeyUp,
					placeholder: 'Search',
					ref: 'target',
					type: 'search',
					value: value
				}, props))
			) : _react2.default.createElement(
				_elemental.GlyphButton,
				{
					color: 'primary',
					glyph: 'search',
					glyphStyle: { marginRight: '0.4em' },
					onClick: this.focusField,
					onFocus: this.focusField,
					position: 'left',
					variant: 'link',
					style: { paddingLeft: '0.7em' },
					'data-e2e-search-icon': true
				},
				'Search'
			);
		}
	}]);

	return EditFormHeaderSearch;
}(_react.Component);

;

// For props "glyph", "glyphColor", and "glyphSize":
// prop type validation will occur within the Glyph component, no need to
// duplicate, just pass it through.
EditFormHeaderSearch.propTypes = {
	onChange: _react.PropTypes.func.isRequired,
	value: _react.PropTypes.string
};

var classes = {
	wrapper: {
		display: 'inline-block',
		position: 'relative',
		verticalAlign: 'middle'
	},

	// input
	input: {
		paddingLeft: '2.2em',
		// opacity: 0,
		transition: 'all 240ms',
		width: 100,

		':focus': {
			// opacity: 1,
			width: 240
		}
	},

	// glyph
	glyph: {
		alignItems: 'center',
		display: 'flex',
		height: '100%',
		justifyContent: 'center',
		position: 'absolute',
		width: '2.2em'
	}
};

module.exports = EditFormHeaderSearch;

// Search
// ------------------------------

// .EditForm__header__search {
// 	display: inline-block;
// 	margin-left: 1em;
// }
// .EditForm__header__search-field {
// 	margin-bottom: 0;
//
// 	.IconField__icon {
// 		color: @app-primary;
// 	}
// }
//
// // make the input appear as a button link until focused
// .EditForm__header__search-input {
// 	// override elemental's transition to catch the width or it looks weird
// 	.transition( all 0.15s ease-in-out );
// 	.placeholder(@link-color);
// 	background: transparent;
// 	border-color: transparent;
// 	box-shadow: none;
// 	display: inline-block;
//
// 	// set the width to only be as long as if it were a button initially
// 	// this is updated on focus to a more comfortable typing length
// 	width: 100px;
//
// 	// decorate the input as a link
// 	&:hover {
// 		.placeholder(@link-hover-color);
// 		border-color: transparent;
// 		cursor: pointer;
//
// 		// handle placeholder text
// 		&::-moz-placeholder { text-decoration: underline; }
// 		&:-ms-input-placeholder { text-decoration: underline; }
// 		&::-webkit-input-placeholder  { text-decoration: underline; }
//
// 		+ .IconField__icon {
// 			color: @link-hover-color;
// 		}
// 	}
//
// 	// return the input to it's natural appearance on focus
// 	&:focus {
// 		.placeholder(@input-placeholder-color);
// 		background: white;
// 		border-color: @input-border-color-focus;
// 		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 0 3px fade(@input-border-color-focus, 10%);
// 		cursor: auto;
// 		outline: 0;
// 		width: 240px;
//
// 		// handle placeholder text
// 		&::-moz-placeholder { text-decoration: none; }
// 		&:-ms-input-placeholder { text-decoration: none; }
// 		&::-webkit-input-placeholder  { text-decoration: none; }
//
// 		+ .IconField__icon {
// 			color: @input-placeholder-color;
// 		}
// 	}
// }
// // hide the search field on small devices
// @media (max-width: 480px) {
// 	.EditForm__header__search {
// 		display: none;
// 	}
// }

},{"../../../../theme":477,"../../../elemental":399,"glamor":undefined,"react":undefined,"react-dom":undefined}],420:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FooterBar = _react2.default.createClass({
	displayName: 'FooterBar',

	propTypes: {
		style: _react2.default.PropTypes.object
	},
	getDefaultProps: function getDefaultProps() {
		return {
			style: {}
		};
	},
	getInitialState: function getInitialState() {
		return {
			position: 'relative',
			width: 'auto',
			height: 'auto',
			top: 0
		};
	},
	componentDidMount: function componentDidMount() {
		// Bail in IE8 because React doesn't support the onScroll event in that browser
		// Conveniently (!) IE8 doesn't have window.getComputedStyle which we also use here
		if (!window.getComputedStyle) return;
		var footer = this.refs.footer;
		this.windowSize = this.getWindowSize();
		var footerStyle = window.getComputedStyle(footer);
		this.footerSize = {
			x: footer.offsetWidth,
			y: footer.offsetHeight + parseInt(footerStyle.marginTop || '0')
		};
		window.addEventListener('scroll', this.recalcPosition, false);
		window.addEventListener('resize', this.recalcPosition, false);
		this.recalcPosition();
	},
	componentWillUnmount: function componentWillUnmount() {
		window.removeEventListener('scroll', this.recalcPosition, false);
		window.removeEventListener('resize', this.recalcPosition, false);
	},
	getWindowSize: function getWindowSize() {
		return {
			x: window.innerWidth,
			y: window.innerHeight
		};
	},
	recalcPosition: function recalcPosition() {
		var wrapper = this.refs.wrapper;

		this.footerSize.x = wrapper.offsetWidth;

		var offsetTop = 0;
		var offsetEl = wrapper;

		while (offsetEl) {
			offsetTop += offsetEl.offsetTop;
			offsetEl = offsetEl.offsetParent;
		}

		var maxY = offsetTop + this.footerSize.y;
		var viewY = window.scrollY + window.innerHeight;

		var newSize = this.getWindowSize();
		var sizeChanged = newSize.x !== this.windowSize.x || newSize.y !== this.windowSize.y;
		this.windowSize = newSize;

		var newState = {
			width: this.footerSize.x,
			height: this.footerSize.y
		};

		if (viewY > maxY && (sizeChanged || this.mode !== 'inline')) {
			this.mode = 'inline';
			newState.top = 0;
			newState.position = 'absolute';
			this.setState(newState);
		} else if (viewY <= maxY && (sizeChanged || this.mode !== 'fixed')) {
			this.mode = 'fixed';
			newState.top = window.innerHeight - this.footerSize.y;
			newState.position = 'fixed';
			this.setState(newState);
		}
	},
	render: function render() {
		var wrapperStyle = {
			height: this.state.height,
			marginTop: 60,
			position: 'relative'
		};
		var footerProps = (0, _blacklist2.default)(this.props, 'children', 'style');
		var footerStyle = (0, _objectAssign2.default)({}, this.props.style, {
			position: this.state.position,
			top: this.state.top,
			width: this.state.width,
			height: this.state.height
		});
		return _react2.default.createElement(
			'div',
			{ ref: 'wrapper', style: wrapperStyle },
			_react2.default.createElement(
				'div',
				_extends({ ref: 'footer', style: footerStyle }, footerProps),
				this.props.children
			)
		);
	}
});

module.exports = FooterBar;

},{"blacklist":undefined,"object-assign":577,"react":undefined}],421:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _evalDependsOn = require('../../../../../../fields/utils/evalDependsOn');

var _evalDependsOn2 = _interopRequireDefault(_evalDependsOn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = _react2.default.createClass({
	displayName: 'FormHeading',
	propTypes: {
		options: _react2.default.PropTypes.object
	},
	render: function render() {
		if (!(0, _evalDependsOn2.default)(this.props.options.dependsOn, this.props.options.values)) {
			return null;
		}
		return _react2.default.createElement(
			'h3',
			{ className: 'form-heading' },
			this.props.content
		);
	}
});

},{"../../../../../../fields/utils/evalDependsOn":485,"react":undefined}],422:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _elemental = require('../../../../elemental');

var _RelatedItemsListDragDrop = require('./RelatedItemsListDragDrop');

var _RelatedItemsListDragDrop2 = _interopRequireDefault(_RelatedItemsListDragDrop);

var _RelatedItemsListRow = require('./RelatedItemsListRow');

var _RelatedItemsListRow2 = _interopRequireDefault(_RelatedItemsListRow);

var _actions = require('../../actions');

var _constants = require('../../../../../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RelatedItemsList = _react2.default.createClass({
	displayName: 'RelatedItemsList',

	propTypes: {
		dispatch: _react2.default.PropTypes.func.isRequired,
		dragNewSortOrder: _react2.default.PropTypes.number,
		items: _react2.default.PropTypes.array,
		list: _react2.default.PropTypes.object.isRequired,
		refList: _react2.default.PropTypes.object.isRequired,
		relatedItemId: _react2.default.PropTypes.string.isRequired,
		relationship: _react2.default.PropTypes.object.isRequired
	},
	getInitialState: function getInitialState() {
		return {
			columns: this.getColumns(),
			err: null,
			items: null
		};
	},
	componentDidMount: function componentDidMount() {
		this.__isMounted = true;
		this.loadItems();
	},
	componentWillUnmount: function componentWillUnmount() {
		this.__isMounted = false;
	},
	isSortable: function isSortable() {
		// Check if the related items should be sortable. The referenced list has to
		//   be sortable and it has to set the current list as it's sortContext.
		var _props = this.props,
		    refList = _props.refList,
		    list = _props.list,
		    relationship = _props.relationship;

		var sortContext = refList.sortContext;
		if (refList.sortable && sortContext) {
			var parts = sortContext.split(':');
			if (parts[0] === list.key && parts[1] === relationship.path) {
				return true;
			}
		}
		return false;
	},
	getColumns: function getColumns() {
		var _props2 = this.props,
		    relationship = _props2.relationship,
		    refList = _props2.refList;

		var columns = refList.expandColumns(refList.defaultColumns);
		return columns.filter(function (i) {
			return i.path !== relationship.refPath;
		});
	},
	loadItems: function loadItems() {
		var _props3 = this.props,
		    refList = _props3.refList,
		    relatedItemId = _props3.relatedItemId,
		    relationship = _props3.relationship;
		var columns = this.state.columns;
		// TODO: Move error to redux store

		if (!refList.fields[relationship.refPath]) {
			var err = _react2.default.createElement(
				_elemental.Alert,
				{ color: 'danger' },
				_react2.default.createElement(
					'strong',
					null,
					'Error:'
				),
				' Related List ',
				_react2.default.createElement(
					'strong',
					null,
					refList.label
				),
				' has no field ',
				_react2.default.createElement(
					'strong',
					null,
					relationship.refPath
				)
			);
			return this.setState({ err: err });
		}
		this.props.dispatch((0, _actions.loadRelationshipItemData)({ columns: columns, refList: refList, relatedItemId: relatedItemId, relationship: relationship }));
	},
	renderItems: function renderItems() {
		var _this = this;

		var tableBody = this.isSortable() ? _react2.default.createElement(_RelatedItemsListDragDrop2.default, _extends({
			columns: this.state.columns,
			items: this.props.items
		}, this.props)) : _react2.default.createElement(
			'tbody',
			null,
			this.props.items.results.map(function (item) {
				return _react2.default.createElement(_RelatedItemsListRow2.default, {
					key: item.id,
					columns: _this.state.columns,
					item: item,
					refList: _this.props.refList
				});
			})
		);
		return this.props.items.results.length ? _react2.default.createElement(
			'div',
			{ className: 'ItemList-wrapper' },
			_react2.default.createElement(
				'table',
				{ cellPadding: '0', cellSpacing: '0', className: 'Table ItemList' },
				this.renderTableCols(),
				this.renderTableHeaders(),
				tableBody
			)
		) : _react2.default.createElement(_elemental.BlankState, {
			heading: 'No related ' + this.props.refList.plural.toLowerCase() + '...',
			style: { marginBottom: '3em' }
		});
	},
	renderTableCols: function renderTableCols() {
		var cols = this.state.columns.map(function (col) {
			return _react2.default.createElement('col', { width: col.width, key: col.path });
		});
		return _react2.default.createElement(
			'colgroup',
			null,
			cols
		);
	},
	renderTableHeaders: function renderTableHeaders() {
		var cells = this.state.columns.map(function (col) {
			return _react2.default.createElement(
				'th',
				{ key: col.path },
				col.label
			);
		});

		// add sort col when available
		if (this.isSortable()) {
			cells.unshift(_react2.default.createElement('th', { width: _constants.TABLE_CONTROL_COLUMN_WIDTH, key: 'sortable' }));
		}

		return _react2.default.createElement(
			'thead',
			null,
			_react2.default.createElement(
				'tr',
				null,
				cells
			)
		);
	},
	render: function render() {
		if (this.state.err) {
			return _react2.default.createElement(
				'div',
				{ className: 'Relationship' },
				this.state.err
			);
		}

		var listHref = Keystone.adminPath + '/' + this.props.refList.path;
		var loadingElement = _react2.default.createElement(
			_elemental.Center,
			{ height: 100 },
			_react2.default.createElement(_elemental.Spinner, null)
		);

		return _react2.default.createElement(
			'div',
			{ className: 'Relationship' },
			_react2.default.createElement(
				'h3',
				{ className: 'Relationship__link' },
				_react2.default.createElement(
					_reactRouter.Link,
					{ to: listHref },
					this.props.refList.label
				)
			),
			this.props.items ? this.renderItems() : loadingElement
		);
	}
});

module.exports = RelatedItemsList;

},{"../../../../../constants":476,"../../../../elemental":399,"../../actions":413,"./RelatedItemsListDragDrop":423,"./RelatedItemsListRow":424,"react":undefined,"react-router":undefined}],423:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDnd = require('react-dnd');

var _reactDndHtml5Backend = require('react-dnd-html5-backend');

var _reactDndHtml5Backend2 = _interopRequireDefault(_reactDndHtml5Backend);

var _RelatedItemsListRow = require('./RelatedItemsListRow');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RelatedItemsListDragDrop = function (_Component) {
	_inherits(RelatedItemsListDragDrop, _Component);

	function RelatedItemsListDragDrop() {
		_classCallCheck(this, RelatedItemsListDragDrop);

		return _possibleConstructorReturn(this, (RelatedItemsListDragDrop.__proto__ || Object.getPrototypeOf(RelatedItemsListDragDrop)).apply(this, arguments));
	}

	_createClass(RelatedItemsListDragDrop, [{
		key: 'render',
		value: function render() {
			var _this2 = this;

			var items = this.props.items;

			return _react2.default.createElement(
				'tbody',
				null,
				items.results.map(function (item, i) {
					return _react2.default.createElement(_RelatedItemsListRow.Sortable, _extends({
						key: item.id,
						index: i,
						item: item
					}, _this2.props));
				})
			);
		}
	}]);

	return RelatedItemsListDragDrop;
}(_react.Component);

;
RelatedItemsListDragDrop.propTypes = {
	columns: _react.PropTypes.array.isRequired,
	dispatch: _react2.default.PropTypes.func.isRequired,
	dragNewSortOrder: _react2.default.PropTypes.number,
	items: _react.PropTypes.array.isRequired,
	list: _react.PropTypes.object.isRequired,
	refList: _react.PropTypes.object.isRequired,
	relatedItemId: _react.PropTypes.string.isRequired,
	relationship: _react.PropTypes.object.isRequired
};

module.exports = (0, _reactDnd.DragDropContext)(_reactDndHtml5Backend2.default)(RelatedItemsListDragDrop);

},{"./RelatedItemsListRow":424,"react":undefined,"react-dnd":undefined,"react-dnd-html5-backend":undefined}],424:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDnd = require('react-dnd');

var _FieldTypes = require('FieldTypes');

var _actions = require('../../actions');

var _ListControl = require('../../../List/components/ListControl');

var _ListControl2 = _interopRequireDefault(_ListControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RelatedItemsListRow = function (_Component) {
	_inherits(RelatedItemsListRow, _Component);

	function RelatedItemsListRow() {
		_classCallCheck(this, RelatedItemsListRow);

		return _possibleConstructorReturn(this, (RelatedItemsListRow.__proto__ || Object.getPrototypeOf(RelatedItemsListRow)).apply(this, arguments));
	}

	_createClass(RelatedItemsListRow, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    columns = _props.columns,
			    item = _props.item,
			    connectDragSource = _props.connectDragSource,
			    connectDropTarget = _props.connectDropTarget,
			    refList = _props.refList;

			var cells = columns.map(function (col, i) {
				var ColumnType = _FieldTypes.Columns[col.type] || _FieldTypes.Columns.__unrecognised__;
				var linkTo = !i ? Keystone.adminPath + '/' + refList.path + '/' + item.id : undefined;
				return _react2.default.createElement(ColumnType, { key: col.path, list: refList, col: col, data: item, linkTo: linkTo });
			});

			// add sortable icon when applicable
			if (connectDragSource) {
				cells.unshift(_react2.default.createElement(_ListControl2.default, { key: '_sort', type: 'sortable', dragSource: connectDragSource }));
			}

			var row = _react2.default.createElement(
				'tr',
				{ key: 'i' + item.id },
				cells
			);

			if (connectDropTarget) {
				return connectDropTarget(row);
			} else {
				return row;
			}
		}
	}]);

	return RelatedItemsListRow;
}(_react.Component);

RelatedItemsListRow.propTypes = {
	columns: _react.PropTypes.array.isRequired,
	dispatch: _react.PropTypes.func.isRequired,
	dragNewSortOrder: _react2.default.PropTypes.number,
	index: _react.PropTypes.number,
	item: _react.PropTypes.object.isRequired,
	refList: _react.PropTypes.object.isRequired,
	relatedItemId: _react.PropTypes.string.isRequired,
	relationship: _react.PropTypes.object.isRequired,
	// Injected by React DnD:
	isDragging: _react.PropTypes.bool, // eslint-disable-line react/sort-prop-types
	connectDragSource: _react.PropTypes.func, // eslint-disable-line react/sort-prop-types
	connectDropTarget: _react.PropTypes.func, // eslint-disable-line react/sort-prop-types
	connectDragPreview: _react.PropTypes.func // eslint-disable-line react/sort-prop-types
};

module.exports = exports = RelatedItemsListRow;

// Expose Sortable

/**
 * Implements drag source.
 */
var dragItem = {
	beginDrag: function beginDrag(props) {
		var send = _extends({}, props);
		// props.dispatch(setDragBase(props.item, props.index));
		return _extends({}, send);
	},
	endDrag: function endDrag(props, monitor, component) {
		// Dropped outside of the drop target, reset rows
		if (!monitor.didDrop()) {
			props.dispatch((0, _actions.resetItems)());
			return;
		}

		var draggedItem = props.item;
		var prevSortOrder = draggedItem.sortOrder;
		var newSortOrder = props.dragNewSortOrder;

		// Dropping on self
		if (prevSortOrder === newSortOrder) {
			props.dispatch((0, _actions.resetItems)());
			return;
		}

		// dropped on a target
		var columns = props.columns,
		    refList = props.refList,
		    relationship = props.relationship,
		    relatedItemId = props.relatedItemId,
		    item = props.item;

		props.dispatch((0, _actions.reorderItems)({ columns: columns, refList: refList, relationship: relationship, relatedItemId: relatedItemId, item: item, prevSortOrder: prevSortOrder, newSortOrder: newSortOrder }));
	}
};

/**
 * Implements drag target.
 */
var dropItem = {
	drop: function drop(props, monitor, component) {
		return _extends({}, props);
	},
	hover: function hover(props, monitor, component) {
		// reset row alerts
		// if (props.rowAlert.success || props.rowAlert.fail) {
		// props.dispatch(setRowAlert({
		// 	reset: true,
		// }));
		// }

		var dragged = monitor.getItem().index;
		var over = props.index;

		// self
		if (dragged === over) {
			return;
		}

		// Since the items are moved on hover, we need to store the new sort order from the dragged over item so we can use it to reorder when the item is dropped.
		props.dispatch((0, _actions.moveItem)({
			prevIndex: dragged,
			newIndex: over,
			relationshipPath: props.relationship.path,
			newSortOrder: props.item.sortOrder
		}));
		monitor.getItem().index = over;
	}
};

/**
 * Specifies the props to inject into your component.
 */
function dragProps(connect, monitor) {
	return {
		connectDragSource: connect.dragSource(),
		isDragging: monitor.isDragging(),
		connectDragPreview: connect.dragPreview()
	};
}

function dropProps(connect) {
	return {
		connectDropTarget: connect.dropTarget()
	};
};

// exports.Sortable = RelatedItemsListRow;
exports.Sortable = (0, _reactDnd.DragSource)('item', dragItem, dragProps)((0, _reactDnd.DropTarget)('item', dropItem, dropProps)(RelatedItemsListRow));

},{"../../../List/components/ListControl":445,"../../actions":413,"FieldTypes":undefined,"react":undefined,"react-dnd":undefined}],425:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ToolbarSection(_ref) {
	var className = _ref.className,
	    left = _ref.left,
	    right = _ref.right,
	    props = _objectWithoutProperties(_ref, ['className', 'left', 'right']);

	props.className = (0, _classnames2.default)('Toolbar__section', {
		'Toolbar__section--left': left,
		'Toolbar__section--right': right
	}, className);

	return _react2.default.createElement('div', props);
};

ToolbarSection.propTypes = {
	left: _react.PropTypes.bool,
	right: _react.PropTypes.bool
};

module.exports = ToolbarSection;

},{"classnames":undefined,"react":undefined}],426:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Toolbar = function Toolbar(props) {
	return _react2.default.createElement('div', _extends({}, props, { className: 'Toolbar' }));
};

Toolbar.displayName = 'Toolbar';
Toolbar.propTypes = {
	children: _react.PropTypes.node.isRequired
};

module.exports = Toolbar;

},{"react":undefined}],427:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var SELECT_ITEM = exports.SELECT_ITEM = 'app/Item/SELECT_ITEM';
var LOAD_DATA = exports.LOAD_DATA = 'app/Item/LOAD_DATA';
var DATA_LOADING_SUCCESS = exports.DATA_LOADING_SUCCESS = 'app/Item/DATA_LOADING_SUCCESS';
var DATA_LOADING_ERROR = exports.DATA_LOADING_ERROR = 'app/Item/DATA_LOADING_ERROR';
var DRAG_MOVE_ITEM = exports.DRAG_MOVE_ITEM = 'app/Item/DRAG_MOVE_ITEM';
var DRAG_RESET_ITEMS = exports.DRAG_RESET_ITEMS = 'app/Item/DRAG_RESET_ITEMS';
var LOAD_RELATIONSHIP_DATA = exports.LOAD_RELATIONSHIP_DATA = 'app/Item/LOAD_RELATIONSHIP_DATA';

},{}],428:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../elemental');

var _reactRedux = require('react-redux');

var _reactRouter = require('react-router');

var _lists = require('../../../utils/lists');

var _CreateForm = require('../../shared/CreateForm');

var _CreateForm2 = _interopRequireDefault(_CreateForm);

var _Alert = require('../../elemental/Alert');

var _Alert2 = _interopRequireDefault(_Alert);

var _EditForm = require('./components/EditForm');

var _EditForm2 = _interopRequireDefault(_EditForm);

var _EditFormHeader = require('./components/EditFormHeader');

var _EditFormHeader2 = _interopRequireDefault(_EditFormHeader);

var _RelatedItemsList = require('./components/RelatedItemsList/RelatedItemsList');

var _RelatedItemsList2 = _interopRequireDefault(_RelatedItemsList);

var _IframeContent = require('../../shared/IframeContent');

var _IframeContent2 = _interopRequireDefault(_IframeContent);

var _actions = require('./actions');

var _actions2 = require('../List/actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ItemView = _react2.default.createClass({
	displayName: 'ItemView',
	contextTypes: {
		router: _react2.default.PropTypes.object.isRequired
	},
	getInitialState: function getInitialState() {
		return {
			createIsOpen: false,
			showIframe: false
		};
	},
	componentDidMount: function componentDidMount() {
		// When we directly navigate to an item without coming from another client
		// side routed page before, we need to select the list before initializing the item
		// We also need to update when the list id has changed
		if (!this.props.currentList || this.props.currentList.id !== this.props.params.listId) {
			this.props.dispatch((0, _actions2.selectList)(this.props.params.listId));
		}
		this.initializeItem(this.props.params.itemId);
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		// We've opened a new item from the client side routing, so initialize
		// again with the new item id
		if (nextProps.params.itemId !== this.props.params.itemId) {
			this.props.dispatch((0, _actions2.selectList)(nextProps.params.listId));
			this.initializeItem(nextProps.params.itemId);
		}
	},

	// Initialize an item
	initializeItem: function initializeItem(itemId) {
		var listItem = this.props.lists.data[this.props.params.listId];
		if (listItem.link.edit) {
			var editLink = listItem.link.edit;
			editLink = editLink.replace(':id', itemId);
			var iframeURL = '' + Keystone.externalHost + editLink;
			this.setState({
				showIframe: true,
				iframeURL: iframeURL
			});
		}
		this.props.dispatch((0, _actions.selectItem)(itemId));
		this.props.dispatch((0, _actions.loadItemData)());
	},

	// Called when a new item is created
	onCreate: function onCreate(item) {
		// Hide the create form
		this.toggleCreateModal(false);
		// Redirect to newly created item path
		var list = this.props.currentList;
		this.context.router.push(Keystone.adminPath + '/' + list.path + '/' + item.id);
	},
	cancelIframe: function cancelIframe() {
		var list = this.props.currentList;
		this.context.router.push(Keystone.adminPath + '/' + list.path);
	},

	// Open and close the create new item modal
	toggleCreateModal: function toggleCreateModal(visible) {
		this.setState({
			createIsOpen: visible
		});
	},

	// Render this items relationships
	renderRelationships: function renderRelationships() {
		var _this = this;

		var relationships = this.props.currentList.relationships;

		var keys = Object.keys(relationships);
		if (!keys.length) return;
		return _react2.default.createElement(
			'div',
			{ className: 'Relationships' },
			_react2.default.createElement(
				_elemental.Container,
				null,
				_react2.default.createElement(
					'h2',
					null,
					'Relationships'
				),
				keys.map(function (key) {
					var relationship = relationships[key];
					var refList = _lists.listsByKey[relationship.ref];
					var _props = _this.props,
					    currentList = _props.currentList,
					    params = _props.params,
					    relationshipData = _props.relationshipData,
					    drag = _props.drag;

					return _react2.default.createElement(_RelatedItemsList2.default, {
						key: relationship.path,
						list: currentList,
						refList: refList,
						relatedItemId: params.itemId,
						relationship: relationship,
						items: relationshipData[relationship.path],
						dragNewSortOrder: drag.newSortOrder,
						dispatch: _this.props.dispatch
					});
				})
			)
		);
	},

	// Handle errors
	handleError: function handleError(error) {
		var detail = error.detail;
		if (detail) {
			// Item not found
			if (detail.name === 'CastError' && detail.path === '_id') {
				return _react2.default.createElement(
					_elemental.Container,
					null,
					_react2.default.createElement(
						_Alert2.default,
						{ color: 'danger', style: { marginTop: '2em' } },
						'No item matching id "',
						this.props.routeParams.itemId,
						'".\xA0',
						_react2.default.createElement(
							_reactRouter.Link,
							{ to: Keystone.adminPath + '/' + this.props.routeParams.listId },
							'Got back to ',
							this.props.routeParams.listId,
							'?'
						)
					)
				);
			}
		}
		if (error.message) {
			// Server down + possibly other errors
			if (error.message === 'Internal XMLHttpRequest Error') {
				return _react2.default.createElement(
					_elemental.Container,
					null,
					_react2.default.createElement(
						_Alert2.default,
						{ color: 'danger', style: { marginTop: '2em' } },
						'We encountered some network problems, please refresh.'
					)
				);
			}
		}
		return _react2.default.createElement(
			_elemental.Container,
			null,
			_react2.default.createElement(
				_Alert2.default,
				{ color: 'danger', style: { marginTop: '2em' } },
				'An unknown error has ocurred, please refresh.'
			)
		);
	},
	render: function render() {
		var _this2 = this;

		// If we don't have any data yet, show the loading indicator
		if (!this.props.ready) {
			return _react2.default.createElement(
				_elemental.Center,
				{ height: '50vh', 'data-screen-id': 'item' },
				_react2.default.createElement(_elemental.Spinner, null)
			);
		}

		var _state = this.state,
		    showIframe = _state.showIframe,
		    iframeURL = _state.iframeURL;

		// When we have the data, render the item view with it

		return _react2.default.createElement(
			'div',
			{ 'data-screen-id': 'item', className: 'flex-column' },
			this.props.error ? this.handleError(this.props.error) : _react2.default.createElement(
				'div',
				{ className: 'flex-column' },
				_react2.default.createElement(
					_elemental.Container,
					{ className: "flex-column" },
					_react2.default.createElement(_EditFormHeader2.default, {
						list: this.props.currentList,
						data: this.props.data,
						toggleCreate: this.toggleCreateModal
					}),
					_react2.default.createElement(_CreateForm2.default, {
						list: this.props.currentList,
						isOpen: this.state.createIsOpen,
						onCancel: function onCancel() {
							return _this2.toggleCreateModal(false);
						},
						onCreate: function onCreate(item) {
							return _this2.onCreate(item);
						}
					}),
					showIframe && iframeURL ? _react2.default.createElement(_IframeContent2.default, { src: iframeURL, show: true, onCancel: this.cancelIframe }) : _react2.default.createElement(_EditForm2.default, {
						list: this.props.currentList,
						data: this.props.data,
						dispatch: this.props.dispatch,
						router: this.context.router
					})
				),
				this.renderRelationships()
			)
		);
	}
});
// import FlashMessages from '../../shared/FlashMessages';

/**
 * Item View
 *
 * This is the item view, it is rendered when users visit a page of a specific
 * item. This mainly renders the form to edit the item content in.
 */

module.exports = (0, _reactRedux.connect)(function (state) {
	return {
		lists: state.lists,
		data: state.item.data,
		loading: state.item.loading,
		ready: state.item.ready,
		error: state.item.error,
		currentList: state.lists.currentList,
		relationshipData: state.item.relationshipData,
		drag: state.item.drag
	};
})(ItemView);

},{"../../../utils/lists":482,"../../elemental":399,"../../elemental/Alert":337,"../../shared/CreateForm":460,"../../shared/IframeContent":463,"../List/actions":432,"./actions":413,"./components/EditForm":417,"./components/EditFormHeader":418,"./components/RelatedItemsList/RelatedItemsList":422,"react":undefined,"react-redux":undefined,"react-router":undefined}],429:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Item reducer, handles the item data and loading
                                                                                                                                                                                                                                                                   */


var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = {
	data: null,
	id: null,
	loading: false,
	ready: false,
	error: null,
	relationshipData: {},
	drag: {
		clonedItems: false,
		newSortOrder: null,
		relationshipPath: false
	}
};

function item() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	var action = arguments[1];

	switch (action.type) {
		case _constants.SELECT_ITEM:
			return (0, _objectAssign2.default)({}, state, {
				ready: false,
				id: action.id,
				data: null
			});
		case _constants.LOAD_DATA:
			return (0, _objectAssign2.default)({}, state, {
				loading: true
			});
		case _constants.DATA_LOADING_SUCCESS:
			return (0, _objectAssign2.default)({}, state, {
				data: action.data,
				loading: false,
				ready: true,
				error: null
			});
		case _constants.DATA_LOADING_ERROR:
			return (0, _objectAssign2.default)({}, state, {
				data: null,
				loading: false,
				ready: true,
				error: action.error
			});
		case _constants.DRAG_MOVE_ITEM:
			var currentItems = state.relationshipData[action.relationshipPath].results;
			// Cache a copy of the current items to reset the items when dismissing a drag and drop if a cached copy doesn't already exist
			var clonedItems = state.drag.clonedItems || currentItems;
			var _item = currentItems[action.prevIndex];
			// Remove item at prevIndex from array and save that array in
			// itemsWithoutItem
			var itemsWithoutItem = currentItems.slice(0, action.prevIndex).concat(currentItems.slice(action.prevIndex + 1, currentItems.length));
			// Add item back in at new index
			itemsWithoutItem.splice(action.newIndex, 0, _item);
			var newRelationshipData = (0, _objectAssign2.default)({}, state.relationshipData[action.relationshipPath], {
				results: itemsWithoutItem
			});
			return (0, _objectAssign2.default)({}, state, {
				drag: {
					newSortOrder: action.newSortOrder,
					clonedItems: clonedItems,
					relationshipPath: action.relationshipPath
				},
				relationshipData: _extends({}, state.relationshipData, _defineProperty({}, action.relationshipPath, newRelationshipData))
			});
		case _constants.DRAG_RESET_ITEMS:
			var originalRelationshipData = (0, _objectAssign2.default)({}, state.relationshipData[state.drag.relationshipPath], {
				results: state.drag.clonedItems
			});
			return (0, _objectAssign2.default)({}, state, {
				drag: {
					newSortOrder: null,
					clonedItems: false,
					relationshipPath: false
				},
				relationshipData: _extends({}, state.relationshipData, _defineProperty({}, state.drag.relationshipPath, originalRelationshipData))
			});
		case _constants.LOAD_RELATIONSHIP_DATA:
			return (0, _objectAssign2.default)({}, state, {
				// Reset drag and drop when relationship data is loaded
				drag: {
					newSortOrder: null,
					clonedItems: false,
					relationshipPath: false
				},
				relationshipData: _extends({}, state.relationshipData, _defineProperty({}, action.relationshipPath, action.data))
			});
		default:
			return state;
	}
}

exports.default = item;

},{"./constants":427,"object-assign":577}],430:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.setActiveSearch = setActiveSearch;
exports.setActiveSort = setActiveSort;
exports.setActiveColumns = setActiveColumns;
exports.setActiveList = setActiveList;
exports.clearFilter = clearFilter;
exports.clearAllFilters = clearAllFilters;
exports.setFilter = setFilter;
exports.clearCachedQuery = clearCachedQuery;

var _constants = require('../constants');

/**
 * Active actions
 */

function setActiveSearch(searchString) {
	return {
		type: _constants.SET_ACTIVE_SEARCH,
		searchString: searchString
	};
}

function setActiveSort(path) {
	return {
		type: _constants.SELECT_ACTIVE_SORT,
		path: path
	};
}

function setActiveColumns(columns) {
	return {
		type: _constants.SELECT_ACTIVE_COLUMNS,
		columns: columns
	};
}

function setActiveList(list, id) {
	return {
		type: _constants.SET_ACTIVE_LIST,
		list: list,
		id: id
	};
}

/**
 * Filtering actions
 */

function clearFilter(path) {
	return {
		type: _constants.CLEAR_FILTER,
		path: path
	};
}

function clearAllFilters() {
	return {
		type: _constants.CLEAR_ALL_FILTERS
	};
}

function setFilter(path, value) {
	return {
		type: _constants.SELECT_FILTER,
		filter: { path: path, value: value }
	};
}

function clearCachedQuery() {
	return {
		type: _constants.CLEAR_CACHED_QUERY
	};
}

},{"../constants":454}],431:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.setDragBase = setDragBase;
exports.resetDragPage = resetDragPage;
exports.resetDragItems = resetDragItems;
exports.setDragItem = setDragItem;
exports.setDragIndex = setDragIndex;
exports.setRowAlert = setRowAlert;
exports.moveItem = moveItem;
exports.reorderItems = reorderItems;
exports.resetItems = resetItems;

var _constants = require('../constants');

var _actions = require('../actions');

function setDragBase(item, index) {
	return function (dispatch) {
		dispatch(resetDragPage());
		dispatch(resetDragItems());
		if (item) {
			dispatch(setDragItem(item));
			if (index) {
				dispatch(setDragIndex(index));
			}
		}
	};
};

function resetDragPage() {
	return {
		type: _constants.RESET_DRAG_PAGE
	};
}

function resetDragItems() {
	return {
		type: _constants.RESET_DRAG_ITEMS
	};
}

function setDragItem(item) {
	return {
		type: _constants.SET_DRAG_ITEM,
		item: item
	};
}

function setDragIndex(index) {
	return {
		type: _constants.SET_DRAG_INDEX,
		index: index
	};
}

function setRowAlert(data) {
	return {
		type: _constants.SET_ROW_ALERT,
		data: data
	};
}

function moveItem(prevIndex, newIndex, options) {
	return {
		type: _constants.DRAG_MOVE_ITEM,
		prevIndex: prevIndex,
		newIndex: newIndex,
		options: options
	};
}

function reorderItems(item, prevSortOrder, newSortOrder, goToPage) {
	// // reset drag
	// defaultDrag();
	return function (dispatch, getState) {
		if (goToPage) {
			// TODO FIGURE OUT IF THIS IS A RACE CONDITION
			dispatch((0, _actions.setCurrentPage)(goToPage));
		}
		var state = getState();
		var list = state.lists.currentList;

		// Send the item, previous sortOrder and the new sortOrder
		// we should get the proper list and new page results in return
		list.reorderItems(item, prevSortOrder, newSortOrder, {
			search: state.active.search,
			filters: state.active.filters,
			sort: state.active.sort,
			columns: state.active.columns,
			page: state.lists.page
		}, function (err, items) {
			// If err, flash the row alert
			if (err) {
				dispatch(resetItems(item.id));
				// return this.resetItems(this.findItemById[item.id]);
			} else {
				dispatch((0, _actions.itemsLoaded)(items));
				dispatch(setRowAlert({
					success: item.id,
					fail: false
				}));
			}
		});
	};
}

function resetItems(itemId) {
	return function (dispatch, getState) {
		var state = getState();
		var _state$lists = state.lists,
		    page = _state$lists.page,
		    drag = _state$lists.drag;


		if (page.index !== drag.page) {
			// We are not on the original page so we need to move back to it
			dispatch((0, _actions.setCurrentPage)(drag.page));
			dispatch((0, _actions.loadItems)({
				fail: true,
				id: itemId
			}));
			// reset drag
			// return defaultDrag();
		}

		// Reset the list if dragout or error
		dispatch(setRowAlert({
			success: false,
			fail: itemId
		}));
		// we use the cached clone since this is the same page
		// the clone contains the proper index numbers which get overwritten on drag
		// _items.results = drag.clonedItems;
		// defaultDrag();
		// this.notifyChange();
	};
}

},{"../actions":432,"../constants":454}],432:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.customActionDownload = exports.customAction = exports.downloadItems = exports.moveItem = exports.setRowAlert = exports.reorderItems = exports.resetItems = exports.setDragBase = exports.deleteItems = exports.itemLoadingError = exports.itemsLoaded = exports.loadItems = exports.clearCachedQuery = exports.setActiveSort = exports.setActiveColumns = exports.setActiveSearch = exports.setActiveFilters = exports.clearAllFilters = exports.clearFilter = exports.setFilter = undefined;
exports.selectList = selectList;
exports.loadInitialItems = loadInitialItems;
exports.setCurrentPage = setCurrentPage;

var _constants = require('../constants');

var _active = require('./active');

var _items = require('./items');

var _dragdrop = require('./dragdrop');

/**
 * Select a list, and set it as the active list. Called whenever the main
 * List component mounts or the list changes.
 *
 * @param  {String} id The list ID, passed via this.props.params.listId
 */
function selectList(id) {
	return function (dispatch, getState) {
		dispatch({
			type: _constants.SELECT_LIST,
			id: id
		});
		dispatch((0, _active.setActiveList)(getState().lists.data[id], id));
	};
}

function loadInitialItems() {
	return {
		type: _constants.INITIAL_LIST_LOAD
	};
}

/**
 * Set the current page
 *
 * @param {Number} index The page number we want to be on
 */
function setCurrentPage(index) {
	return {
		type: _constants.SET_CURRENT_PAGE,
		index: parseInt(index)
	};
}

// Export all actions from here again for easier usability, that they're split up
// should be an implementation detail of List

exports.setFilter = _active.setFilter;
exports.clearFilter = _active.clearFilter;
exports.clearAllFilters = _active.clearAllFilters;
exports.setActiveFilters = _active.setActiveFilters;
exports.setActiveSearch = _active.setActiveSearch;
exports.setActiveColumns = _active.setActiveColumns;
exports.setActiveSort = _active.setActiveSort;
exports.clearCachedQuery = _active.clearCachedQuery;
exports.loadItems = _items.loadItems;
exports.itemsLoaded = _items.itemsLoaded;
exports.itemLoadingError = _items.itemLoadingError;
exports.deleteItems = _items.deleteItems;
exports.setDragBase = _dragdrop.setDragBase;
exports.resetItems = _dragdrop.resetItems;
exports.reorderItems = _dragdrop.reorderItems;
exports.setRowAlert = _dragdrop.setRowAlert;
exports.moveItem = _dragdrop.moveItem;
exports.downloadItems = _items.downloadItems;
exports.customAction = _items.customAction;
exports.customActionDownload = _items.customActionDownload;

},{"../constants":454,"./active":430,"./dragdrop":431,"./items":433}],433:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.loadItems = loadItems;
exports.downloadItems = downloadItems;
exports.itemsLoaded = itemsLoaded;
exports.itemLoadingError = itemLoadingError;
exports.deleteItems = deleteItems;
exports.customAction = customAction;
exports.customActionDownload = customActionDownload;

var _constants = require('../constants');

var _constants2 = require('../../../../constants');

var xhr = require('xhr');
var assign = require('object-assign');
function loadItems() {
	var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	return function (dispatch, getState) {
		var currentLoadCounter = getState().lists.loadCounter + 1;

		dispatch({
			type: _constants.LOAD_ITEMS,
			loadCounter: currentLoadCounter
		});

		// Take a snapshot of the current redux state.
		var state = getState();
		// Hold a reference to the currentList in state.
		var currentList = state.lists.currentList;

		currentList.loadItems({
			search: state.active.search,
			filters: state.active.filters,
			sort: state.active.sort,
			columns: state.active.columns,
			page: state.lists.page
		}, function (err, items) {

			// Create a new state snapshot and compare the current active list id
			// to the id of the currentList referenced above.
			// If they are the same, then this is the latest fetch request, we may resolve this normally.
			// If these are not the same, then it means that this is not the latest fetch request.
			// BAIL OUT!

			if (getState().active.id !== currentList.id) return;
			if (getState().lists.loadCounter > currentLoadCounter) return;
			if (items) {

				// if (page.index !== drag.page && drag.item) {
				// 	// add the dragging item
				// 	if (page.index > drag.page) {
				// 		_items.results.unshift(drag.item);
				// 	} else {
				// 		_items.results.push(drag.item);
				// 	}
				// }
				// _itemsResultsClone = items.results.slice(0);
				//

				// TODO Reenable this
				// if (options.success && options.id) {
				// 	// flashes a success background on the row
				// 	_rowAlert.success = options.id;
				// }
				// if (options.fail && options.id) {
				// 	// flashes a failure background on the row
				// 	_rowAlert.fail = options.id;
				// }

				// Successfully resolve this request in redux and set the loadCounter back to zero.
				dispatch(itemsLoaded(items));
			} else {
				// Catch this error in redux and set the loadCounter back to zero.
				dispatch(itemLoadingError(err));
			}
		});
	};
}

function downloadItems(format, columns) {
	return function (dispatch, getState) {
		var state = getState();
		var active = state.active;
		var currentList = state.lists.currentList;
		var url = currentList.getDownloadURL({
			search: active.search,
			filters: active.filters,
			sort: active.sort,
			columns: columns ? currentList.expandColumns(columns) : active.columns,
			format: format
		});
		window.open(url);
	};
}

function itemsLoaded(items) {
	return {
		type: _constants.ITEMS_LOADED,
		items: items
	};
}

/**
 * Dispatched when unsuccessfully trying to load the items, will redispatch
 * loadItems after NETWORK_ERROR_RETRY_DELAY milliseconds until we get items back
 */

function itemLoadingError() {
	return function (dispatch) {
		dispatch({
			type: _constants.ITEM_LOADING_ERROR,
			err: 'Network request failed'
		});
		setTimeout(function () {
			dispatch(loadItems());
		}, _constants2.NETWORK_ERROR_RETRY_DELAY);
	};
}

function deleteItems(ids) {
	return function (dispatch, getState) {
		var list = getState().lists.currentList;
		list.deleteItems(ids, function (err, data) {
			// TODO ERROR HANDLING
			dispatch(loadItems());
		});
	};
}

function customAction(ids, action, customUpdateValue) {
	return function (dispatch, getState) {

		var formData = new FormData();
		formData.append('ids', ids);
		formData.append('customUpdateValue', customUpdateValue);

		xhr({
			url: '/app/' + action,
			responseType: 'json',
			method: 'PUT',
			headers: assign({}, Keystone.csrf.header),
			body: formData
		}, function (err, resp, data) {
			if (err) return callback(err);

			if (resp.statusCode === 200) {
				dispatch(loadItems());
			} else {
				callback(data);
			}
		});
	};
}

function customActionDownload(id, action) {
	return function (dispatch, getState) {
		var url = '/app/' + action + '?id=' + id;
		window.open(url);
	};
}

},{"../../../../constants":476,"../constants":454,"object-assign":577,"xhr":undefined}],434:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FieldTypes = require('FieldTypes');

var _elemental = require('../../../../elemental');

var _Popout = require('../../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _actions = require('../../actions');

var _getFilterLabel = require('./getFilterLabel');

var _getFilterLabel2 = _interopRequireDefault(_getFilterLabel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Filter = function (_Component) {
	_inherits(Filter, _Component);

	function Filter() {
		_classCallCheck(this, Filter);

		var _this = _possibleConstructorReturn(this, (Filter.__proto__ || Object.getPrototypeOf(Filter)).call(this));

		_this.open = _this.open.bind(_this);
		_this.close = _this.close.bind(_this);
		_this.updateValue = _this.updateValue.bind(_this);
		_this.updateFilter = _this.updateFilter.bind(_this);
		_this.removeFilter = _this.removeFilter.bind(_this);

		_this.state = {
			isOpen: false
		};
		return _this;
	}

	_createClass(Filter, [{
		key: 'open',
		value: function open() {
			this.setState({
				isOpen: true,
				filterValue: this.props.filter.value
			});
		}
	}, {
		key: 'close',
		value: function close() {
			this.setState({
				isOpen: false
			});
		}
	}, {
		key: 'updateValue',
		value: function updateValue(filterValue) {
			this.setState({
				filterValue: filterValue
			});
		}
	}, {
		key: 'updateFilter',
		value: function updateFilter(e) {
			var _props = this.props,
			    dispatch = _props.dispatch,
			    filter = _props.filter;

			dispatch((0, _actions.setFilter)(filter.field.path, this.state.filterValue));
			this.close();
			e.preventDefault();
		}
	}, {
		key: 'removeFilter',
		value: function removeFilter() {
			this.props.dispatch((0, _actions.clearFilter)(this.props.filter.field.path));
		}
	}, {
		key: 'render',
		value: function render() {
			var filter = this.props.filter;

			var filterId = 'activeFilter__' + filter.field.path;
			var FilterComponent = _FieldTypes.Filters[filter.field.type];

			return _react2.default.createElement(
				'span',
				null,
				_react2.default.createElement(_elemental.Chip, {
					label: (0, _getFilterLabel2.default)(filter.field, filter.value),
					onClick: this.open,
					onClear: this.removeFilter,
					color: 'primary',
					id: filterId
				}),
				_react2.default.createElement(
					_Popout2.default,
					{ isOpen: this.state.isOpen, onCancel: this.close, relativeToID: filterId },
					_react2.default.createElement(
						'form',
						{ onSubmit: this.updateFilter },
						_react2.default.createElement(_Popout2.default.Header, { title: 'Edit Filter' }),
						_react2.default.createElement(
							_Popout2.default.Body,
							null,
							_react2.default.createElement(FilterComponent, {
								field: filter.field,
								filter: this.state.filterValue,
								onChange: this.updateValue
							})
						),
						_react2.default.createElement(_Popout2.default.Footer, {
							ref: 'footer',
							primaryButtonIsSubmit: true,
							primaryButtonLabel: 'Apply',
							secondaryButtonAction: this.close,
							secondaryButtonLabel: 'Cancel' })
					)
				)
			);
		}
	}]);

	return Filter;
}(_react.Component);

;

Filter.propTypes = {
	dispatch: _react.PropTypes.func.isRequired,
	filter: _react.PropTypes.shape({
		field: _react.PropTypes.object.isRequired,
		value: _react.PropTypes.object.isRequired
	}).isRequired
};

module.exports = Filter;

},{"../../../../elemental":399,"../../../../shared/Popout":473,"../../actions":432,"./getFilterLabel":438,"FieldTypes":undefined,"react":undefined}],435:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../../../elemental');

var _Filter = require('./Filter');

var _Filter2 = _interopRequireDefault(_Filter);

var _actions = require('../../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListFilters = function ListFilters(_ref) {
	var dispatch = _ref.dispatch,
	    filters = _ref.filters;


	if (!filters.length) return _react2.default.createElement('div', null);

	var dispatchClearAllFilters = function dispatchClearAllFilters() {
		dispatch((0, _actions.clearAllFilters)());
	};

	// Generate the list of filter pills
	var currentFilters = filters.map(function (filter, i) {
		return _react2.default.createElement(_Filter2.default, {
			key: 'f' + i,
			filter: filter,
			dispatch: dispatch
		});
	});

	// When more than 1, append the clear button
	if (currentFilters.length > 1) {
		currentFilters.push(_react2.default.createElement(_elemental.Chip, {
			key: 'listFilters__clear',
			label: 'Clear All',
			onClick: dispatchClearAllFilters
		}));
	}

	var styles = {
		marginBottom: '1em',
		marginTop: '1em'
	};

	return _react2.default.createElement(
		'div',
		{ style: styles },
		currentFilters
	);
};

ListFilters.propTypes = {
	dispatch: _react.PropTypes.func.isRequired,
	filters: _react.PropTypes.array.isRequired
};

module.exports = ListFilters;

},{"../../../../elemental":399,"../../actions":432,"./Filter":434,"react":undefined}],436:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ListFiltersAddForm = require('./ListFiltersAddForm');

var _ListFiltersAddForm2 = _interopRequireDefault(_ListFiltersAddForm);

var _Popout = require('../../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _PopoutList = require('../../../../shared/Popout/PopoutList');

var _PopoutList2 = _interopRequireDefault(_PopoutList);

var _elemental = require('../../../../elemental');

var _ListHeaderButton = require('../ListHeaderButton');

var _ListHeaderButton2 = _interopRequireDefault(_ListHeaderButton);

var _actions = require('../../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListFiltersAdd = _react2.default.createClass({
	displayName: 'ListFiltersAdd',
	propTypes: {
		maxHeight: _react2.default.PropTypes.number
	},
	getDefaultProps: function getDefaultProps() {
		return {
			maxHeight: 360
		};
	},
	getInitialState: function getInitialState() {
		return {
			innerHeight: 0,
			isOpen: false,
			searchString: '',
			selectedField: false
		};
	},
	updateSearch: function updateSearch(e) {
		this.setState({ searchString: e.target.value });
	},
	openPopout: function openPopout() {
		this.setState({ isOpen: true }, this.focusSearch);
	},
	closePopout: function closePopout() {
		this.setState({
			innerHeight: 0,
			isOpen: false,
			searchString: '',
			selectedField: false
		});
	},
	setPopoutHeight: function setPopoutHeight(height) {
		this.setState({ innerHeight: Math.min(this.props.maxHeight, height) });
	},
	navigateBack: function navigateBack() {
		this.setState({
			selectedField: false,
			searchString: '',
			innerHeight: 0
		}, this.focusSearch);
	},
	focusSearch: function focusSearch() {
		(0, _reactDom.findDOMNode)(this.refs.search).focus();
	},
	selectField: function selectField(field) {
		this.setState({
			selectedField: field
		});
	},
	applyFilter: function applyFilter(value) {
		this.props.dispatch((0, _actions.setFilter)(this.state.selectedField.path, value));
		this.closePopout();
	},
	renderList: function renderList() {
		var _this = this;

		var activeFilterFields = this.props.activeFilters.map(function (obj) {
			return obj.field;
		});
		var activeFilterPaths = activeFilterFields.map(function (obj) {
			return obj.path;
		});
		var searchString = this.state.searchString;

		var filteredFilters = this.props.availableFilters;

		if (searchString) {
			filteredFilters = filteredFilters.filter(function (filter) {
				return filter.type !== 'heading';
			}).filter(function (filter) {
				return new RegExp(searchString).test(filter.field.label.toLowerCase());
			});
		}

		var popoutList = filteredFilters.map(function (el, i) {
			if (el.type === 'heading') {
				return _react2.default.createElement(
					_PopoutList2.default.Heading,
					{ key: 'heading_' + i },
					el.content
				);
			}

			var filterIsActive = activeFilterPaths.length && activeFilterPaths.indexOf(el.field.path) > -1;

			return _react2.default.createElement(_PopoutList2.default.Item, {
				key: 'item_' + el.field.path,
				icon: filterIsActive ? 'check' : 'chevron-right',
				iconHover: filterIsActive ? 'check' : 'chevron-right',
				isSelected: !!filterIsActive,
				label: el.field.label,
				onClick: function onClick() {
					_this.selectField(el.field);
				} });
		});

		var formFieldStyles = {
			borderBottom: '1px dashed rgba(0, 0, 0, 0.1)',
			marginBottom: '1em',
			paddingBottom: '1em'
		};

		return _react2.default.createElement(
			_Popout2.default.Pane,
			{ onLayout: this.setPopoutHeight, key: 'list' },
			_react2.default.createElement(
				_Popout2.default.Body,
				null,
				_react2.default.createElement(
					'div',
					{ style: formFieldStyles },
					_react2.default.createElement(_elemental.FormInput, {
						onChange: this.updateSearch,
						placeholder: 'Find a filter...',
						ref: 'search',
						value: this.state.searchString
					})
				),
				popoutList
			)
		);
	},
	renderForm: function renderForm() {
		return _react2.default.createElement(
			_Popout2.default.Pane,
			{ onLayout: this.setPopoutHeight, key: 'form' },
			_react2.default.createElement(_ListFiltersAddForm2.default, {
				activeFilters: this.props.activeFilters,
				field: this.state.selectedField,
				onApply: this.applyFilter,
				onCancel: this.closePopout,
				onBack: this.navigateBack,
				maxHeight: this.props.maxHeight,
				onHeightChange: this.setPopoutHeight,
				dispatch: this.props.dispatch
			})
		);
	},
	render: function render() {
		var _state = this.state,
		    isOpen = _state.isOpen,
		    selectedField = _state.selectedField;

		var popoutBodyStyle = this.state.innerHeight ? { height: this.state.innerHeight } : null;
		var popoutPanesClassname = (0, _classnames2.default)('Popout__panes', {
			'Popout__scrollable-area': !selectedField
		});

		return _react2.default.createElement(
			'div',
			null,
			_react2.default.createElement(_ListHeaderButton2.default, {
				active: isOpen,
				glyph: 'eye',
				id: 'listHeaderFilterButton',
				label: 'Filter',
				onClick: isOpen ? this.closePopout : this.openPopout
			}),
			_react2.default.createElement(
				_Popout2.default,
				{ isOpen: isOpen, onCancel: this.closePopout, relativeToID: 'listHeaderFilterButton' },
				_react2.default.createElement(_Popout2.default.Header, {
					leftAction: selectedField ? this.navigateBack : null,
					leftIcon: selectedField ? 'chevron-left' : null,
					title: selectedField ? selectedField.label : 'Filter',
					transitionDirection: selectedField ? 'next' : 'prev' }),
				_react2.default.createElement(
					_reactAddonsCssTransitionGroup2.default,
					{
						className: popoutPanesClassname,
						component: 'div',
						style: popoutBodyStyle,
						transitionName: selectedField ? 'Popout__pane-next' : 'Popout__pane-prev',
						transitionEnterTimeout: 360,
						transitionLeaveTimeout: 360
					},
					selectedField ? this.renderForm() : this.renderList()
				)
			)
		);
	}
});

module.exports = ListFiltersAdd;

},{"../../../../elemental":399,"../../../../shared/Popout":473,"../../../../shared/Popout/PopoutList":469,"../../actions":432,"../ListHeaderButton":447,"./ListFiltersAddForm":437,"classnames":undefined,"react":undefined,"react-addons-css-transition-group":undefined,"react-dom":undefined}],437:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _Popout = require('../../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _FieldTypes = require('FieldTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListFiltersAddForm = _react2.default.createClass({
	displayName: 'ListFiltersAddForm',

	propTypes: {
		field: _react2.default.PropTypes.object.isRequired,
		maxHeight: _react2.default.PropTypes.number,
		onApply: _react2.default.PropTypes.func,
		onCancel: _react2.default.PropTypes.func,
		onHeightChange: _react2.default.PropTypes.func
	},
	getInitialState: function getInitialState() {
		var _this = this;

		var filterComponent = _FieldTypes.Filters[this.props.field.type];
		var filterValue = this.props.activeFilters.filter(function (i) {
			return i.field.path === _this.props.field.path;
		})[0];
		if (filterValue) {
			filterValue = filterValue.value;
		} else {
			filterValue = filterComponent && filterComponent.getDefaultValue ? filterComponent.getDefaultValue() : {};
		}
		return {
			filterComponent: filterComponent,
			filterValue: filterValue
		};
	},
	updateHeight: function updateHeight(bodyHeight) {
		var _this2 = this;

		bodyHeight += 40; // TODO: remove magic number, currently accounts for padding
		var footerHeight = (0, _reactDom.findDOMNode)(this.refs.footer).offsetHeight;
		var maxBodyHeight = this.props.maxHeight - footerHeight;
		var newHeight = bodyHeight + footerHeight;
		// console.log(bodyHeight, maxBodyHeight, '|', newHeight, this.props.maxHeight);
		this.setState({
			bodyHeight: Math.min(bodyHeight, maxBodyHeight)
		}, function () {
			_this2.props.onHeightChange(Math.min(newHeight, _this2.props.maxHeight));
		});
	},
	updateValue: function updateValue(filterValue) {
		this.setState({
			filterValue: filterValue
		});
	},
	handleFormSubmit: function handleFormSubmit(e) {
		e.preventDefault();
		this.props.onApply(this.state.filterValue);
	},
	renderInvalidFilter: function renderInvalidFilter() {
		return _react2.default.createElement(
			'div',
			null,
			'Error: type ',
			this.props.field.type,
			' has no filter UI.'
		);
	},
	render: function render() {
		var FilterComponent = this.state.filterComponent;
		return _react2.default.createElement(
			'form',
			{ onSubmit: this.handleFormSubmit },
			_react2.default.createElement(
				_Popout2.default.Body,
				{ ref: 'body', scrollable: true, style: { height: this.state.bodyHeight } },
				FilterComponent ? _react2.default.createElement(FilterComponent, { field: this.props.field, filter: this.state.filterValue, onChange: this.updateValue, onHeightChange: this.updateHeight }) : this.renderInvalidFilter()
			),
			_react2.default.createElement(_Popout2.default.Footer, {
				ref: 'footer',
				primaryButtonIsSubmit: true,
				primaryButtonLabel: 'Apply',
				secondaryButtonAction: this.props.onCancel,
				secondaryButtonLabel: 'Cancel' })
		);
	}
});

module.exports = ListFiltersAddForm;

},{"../../../../shared/Popout":473,"FieldTypes":undefined,"react":undefined,"react-dom":undefined}],438:[function(require,module,exports){
'use strict';

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DATE_FORMAT = 'YYYY-MM-DD';
var DATETIME_FORMAT = 'YYYY-MM-DD h:mm:ss a';

function getFilterLabel(field, value) {
	var label = field.label;

	switch (field.type) {
		// BOOLEAN
		case 'boolean':
			{
				return value.value ? label : 'NOT ' + label;
			}

		// DATE
		case 'date':
			{
				return label + ' ' + resolveDateFormat(value, DATE_FORMAT);
			}

		// DATE ARRAY
		case 'datearray':
			{
				var presence = value.presence === 'some' ? 'Some' : 'No';

				return presence + ' ' + label + ' ' + resolveDateFormat(value, DATETIME_FORMAT, 'are');
			}

		// DATETIME
		case 'datetime':
			{
				return label + ' ' + resolveDateFormat(value, DATETIME_FORMAT);
			}

		// GEOPOINT
		// TODO distance needs a qualifier, currently defaults to "km"?
		case 'geopoint':
			{
				var mode = value.distance.mode === 'max' ? 'is within' : 'is at least';
				var distance = value.distance.value + 'km';
				var conjunction = value.distance.mode === 'max' ? 'of' : 'from';
				var latlong = value.lat + ', ' + value.lon;

				return label + ' ' + mode + ' ' + distance + ' ' + conjunction + ' ' + latlong;
			}

		// LOCATION
		case 'location':
			{
				var joiner = value.inverted ? 'does NOT match' : 'matches';

				// Remove undefined values before rendering the template literal
				var formattedValue = [value.street, value.city, value.state, value.code, value.country].join(' ').trim();

				return label + ' ' + joiner + ' "' + formattedValue + '"';
			}

		// NUMBER & MONEY
		case 'number':
		case 'money':
			{
				return label + ' ' + resolveNumberFormat(value);
			}

		// NUMBER ARRAY
		case 'numberarray':
			{
				var _presence = value.presence === 'some' ? 'Some' : 'No';

				return _presence + ' ' + label + ' ' + resolveNumberFormat(value, 'are');
			}

		// PASSWORD
		case 'password':
			{
				return value.exists ? label + ' is set' : label + ' is NOT set';
			}

		// RELATIONSHIP
		// TODO populate relationship, currently rendering an ID
		case 'relationship':
			{
				var _joiner = value.inverted ? 'is NOT' : 'is';
				var _formattedValue = value.value.length > 1 ? value.value.join(', or ') : value.value[0];

				return label + ' ' + _joiner + ' ' + _formattedValue;
			}

		// SELECT
		case 'select':
			{
				var _joiner2 = value.inverted ? 'is NOT' : 'is';
				var _formattedValue2 = value.value.length > 1 ? value.value.join(', or ') : value.value[0];

				return label + ' ' + _joiner2 + ' ' + _formattedValue2;
			}

		// TEXT-LIKE
		case 'code':
		case 'color':
		case 'email':
		case 'html':
		case 'key':
		case 'markdown':
		case 'name':
		case 'text':
		case 'textarea':
		case 'url':
			{
				var _mode = '';
				if (value.mode === 'beginsWith') {
					_mode = value.inverted ? 'does NOT begin with' : 'begins with';
				} else if (value.mode === 'endsWith') {
					_mode = value.inverted ? 'does NOT end with' : 'ends with';
				} else if (value.mode === 'exactly') {
					_mode = value.inverted ? 'is NOT exactly' : 'is exactly';
				} else if (value.mode === 'contains') {
					_mode = value.inverted ? 'does NOT contain' : 'contains';
				}

				return label + ' ' + _mode + ' "' + value.value + '"';
			}

		// TEXTARRAY
		case 'textarray':
			{
				var _presence2 = value.presence === 'some' ? 'Some' : 'No';
				var _mode2 = '';
				if (value.mode === 'beginsWith') {
					_mode2 = value.inverted ? 'do NOT begin with' : 'begin with';
				} else if (value.mode === 'endsWith') {
					_mode2 = value.inverted ? 'do NOT end with' : 'end with';
				} else if (value.mode === 'exactly') {
					_mode2 = value.inverted ? 'are NOT exactly' : 'are exactly';
				} else if (value.mode === 'contains') {
					_mode2 = value.inverted ? 'do NOT contain' : 'contain';
				}

				return _presence2 + ' ' + label + ' ' + _mode2 + ' "' + value.value + '"';
			}

		// CATCHALL
		default:
			{
				return label + ' "' + value.value + '"';
			}
	}
};

function resolveNumberFormat(value) {
	var conjunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'is';

	var mode = '';
	if (value.mode === 'equals') mode = conjunction;else if (value.mode === 'gt') mode = conjunction + ' greater than';else if (value.mode === 'lt') mode = conjunction + ' less than';

	var formattedValue = value.mode === 'between' ? 'is between ' + value.value.min + ' and ' + value.value.max : value.value;

	return mode + ' ' + formattedValue;
}

function resolveDateFormat(value, format) {
	var conjunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is';

	var joiner = value.inverted ? conjunction + ' NOT' : conjunction;
	var mode = value.mode === 'on' ? '' : value.mode;
	var formattedValue = value.mode === 'between' ? (0, _moment2.default)(value.after).format(format) + ' and ' + (0, _moment2.default)(value.before).format(format) : (0, _moment2.default)(value.value).format(format);

	return joiner + ' ' + mode + ' ' + formattedValue;
}

module.exports = getFilterLabel;

},{"moment":undefined}],439:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ItemsTableRow = require('./ItemsTableRow');

var _ItemsTableRow2 = _interopRequireDefault(_ItemsTableRow);

var _ItemsTableDragDrop = require('./ItemsTableDragDrop');

var _ItemsTableDragDrop2 = _interopRequireDefault(_ItemsTableDragDrop);

var _constants = require('../../../../../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ItemsTable = _react2.default.createClass({
	displayName: 'ItemsTable',

	propTypes: {
		checkedItems: _react.PropTypes.object.isRequired,
		columns: _react.PropTypes.array.isRequired,
		deleteTableItem: _react.PropTypes.func.isRequired,
		handleSortSelect: _react.PropTypes.func.isRequired,
		items: _react.PropTypes.object.isRequired,
		list: _react.PropTypes.object.isRequired,
		manageMode: _react.PropTypes.bool.isRequired,
		rowAlert: _react.PropTypes.object.isRequired
	},
	renderCols: function renderCols() {
		var cols = this.props.columns.map(function (col) {
			return _react2.default.createElement('col', { key: col.path, width: col.width });
		});

		// add delete col when available
		if (!this.props.list.nodelete) {
			cols.unshift(_react2.default.createElement('col', { width: _constants.TABLE_CONTROL_COLUMN_WIDTH, key: 'delete' }));
		}

		// add sort col when available
		if (this.props.list.sortable) {
			cols.unshift(_react2.default.createElement('col', { width: _constants.TABLE_CONTROL_COLUMN_WIDTH, key: 'sortable' }));
		}

		return _react2.default.createElement(
			'colgroup',
			null,
			cols
		);
	},
	renderHeaders: function renderHeaders() {
		var _this = this;

		var listControlCount = 0;

		if (this.props.list.sortable) listControlCount++;
		if (!this.props.list.nodelete) listControlCount++;

		// set active sort
		var activeSortPath = this.props.activeSort.paths[0];

		// pad first col when controls are available
		var cellPad = listControlCount ? _react2.default.createElement('th', { colSpan: listControlCount }) : null;

		// map each heading column
		var cellMap = this.props.columns.map(function (col) {
			var isSelected = activeSortPath && activeSortPath.path === col.path;
			var isInverted = isSelected && activeSortPath.invert;
			var buttonTitle = 'Sort by ' + col.label + (isSelected && !isInverted ? ' (desc)' : '');
			var colClassName = (0, _classnames2.default)('ItemList__sort-button th-sort', {
				'th-sort--asc': isSelected && !isInverted,
				'th-sort--desc': isInverted
			});

			return _react2.default.createElement(
				'th',
				{ key: col.path, colSpan: '1' },
				_react2.default.createElement(
					'button',
					{
						className: colClassName,
						onClick: function onClick() {
							_this.props.handleSortSelect(col.path, isSelected && !isInverted);
						},
						title: buttonTitle },
					col.label,
					_react2.default.createElement('span', { className: 'th-sort__icon' })
				)
			);
		});

		return _react2.default.createElement(
			'thead',
			null,
			_react2.default.createElement(
				'tr',
				null,
				cellPad,
				cellMap
			)
		);
	},
	render: function render() {
		var _this2 = this;

		var items = this.props.items;

		if (!items.results.length) return null;

		var tableBody = this.props.list.sortable ? _react2.default.createElement(_ItemsTableDragDrop2.default, this.props) : _react2.default.createElement(
			'tbody',
			null,
			items.results.map(function (item, i) {
				return _react2.default.createElement(_ItemsTableRow2.default, _extends({ key: item.id,
					deleteTableItem: _this2.props.deleteTableItem,
					index: i,
					sortOrder: item.sortOrder || 0,
					id: item.id,
					item: item
				}, _this2.props));
			})
		);
		/** TO ADD SCROLL ON DIRECTORIES PAGES */
		var directory_div_class = !this.props.list.scrollable ? 'ItemList-wrapper' : 'ItemList-wrapper-with-scroll';
		var table_class = !this.props.list.scrollable ? 'Table ItemList' : 'Table ItemList-with-scroll';
		return _react2.default.createElement(
			'div',
			{ className: directory_div_class },
			_react2.default.createElement(
				'table',
				{ cellPadding: '0', cellSpacing: '0', className: table_class },
				this.renderCols(),
				this.renderHeaders(),
				tableBody
			)
		);
	}
});

module.exports = exports = ItemsTable;

},{"../../../../../constants":476,"./ItemsTableDragDrop":440,"./ItemsTableRow":443,"classnames":undefined,"react":undefined}],440:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDnd = require('react-dnd');

var _reactDndHtml5Backend = require('react-dnd-html5-backend');

var _reactDndHtml5Backend2 = _interopRequireDefault(_reactDndHtml5Backend);

var _ItemsTableRow = require('./ItemsTableRow');

var _ItemsTableDragDropZone = require('./ItemsTableDragDropZone');

var _ItemsTableDragDropZone2 = _interopRequireDefault(_ItemsTableDragDropZone);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ItemsTableDragDrop = _react2.default.createClass({
	displayName: 'ItemsTableDragDrop',
	propTypes: {
		columns: _react2.default.PropTypes.array,
		id: _react2.default.PropTypes.any,
		index: _react2.default.PropTypes.number,
		items: _react2.default.PropTypes.object,
		list: _react2.default.PropTypes.object
	},
	render: function render() {
		var _this = this;

		return _react2.default.createElement(
			'tbody',
			null,
			this.props.items.results.map(function (item, i) {
				return _react2.default.createElement(_ItemsTableRow.Sortable, _extends({ key: item.id,
					index: i,
					sortOrder: item.sortOrder || 0,
					id: item.id,
					item: item
				}, _this.props));
			}),
			_react2.default.createElement(_ItemsTableDragDropZone2.default, this.props)
		);
	}
});

module.exports = (0, _reactDnd.DragDropContext)(_reactDndHtml5Backend2.default)(ItemsTableDragDrop);

},{"./ItemsTableDragDropZone":441,"./ItemsTableRow":443,"react":undefined,"react-dnd":undefined,"react-dnd-html5-backend":undefined}],441:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ItemsTableDragDropZoneTarget = require('./ItemsTableDragDropZoneTarget');

var _ItemsTableDragDropZoneTarget2 = _interopRequireDefault(_ItemsTableDragDropZoneTarget);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ItemsTableDragDropZone = _react2.default.createClass({
	displayName: 'ItemsTableDragDropZone',
	propTypes: {
		columns: _react2.default.PropTypes.array,
		connectDropTarget: _react2.default.PropTypes.func,
		items: _react2.default.PropTypes.object,
		list: _react2.default.PropTypes.object
	},
	renderPageDrops: function renderPageDrops() {
		var _props = this.props,
		    items = _props.items,
		    currentPage = _props.currentPage,
		    pageSize = _props.pageSize;


		var totalPages = Math.ceil(items.count / pageSize);
		var style = { display: totalPages > 1 ? null : 'none' };

		var pages = [];
		for (var i = 0; i < totalPages; i++) {
			var page = i + 1;
			var pageItems = '' + (page * pageSize - (pageSize - 1)) + ' - ' + page * pageSize;
			var current = page === currentPage;
			var className = (0, _classnames2.default)('ItemList__dropzone--page', {
				'is-active': current
			});
			pages.push(_react2.default.createElement(_ItemsTableDragDropZoneTarget2.default, {
				key: 'page_' + page,
				page: page,
				className: className,
				pageItems: pageItems,
				pageSize: pageSize,
				currentPage: currentPage,
				drag: this.props.drag,
				dispatch: this.props.dispatch
			}));
		}

		var cols = this.props.columns.length;
		if (this.props.list.sortable) cols++;
		if (!this.props.list.nodelete) cols++;
		return _react2.default.createElement(
			'tr',
			{ style: style },
			_react2.default.createElement(
				'td',
				{ colSpan: cols },
				_react2.default.createElement(
					'div',
					{ className: 'ItemList__dropzone' },
					pages,
					_react2.default.createElement('div', { className: 'clearfix' })
				)
			)
		);
	},
	render: function render() {
		return this.renderPageDrops();
	}
}); /**
     * THIS IS ORPHANED AND ISN'T RENDERED AT THE MOMENT
     * THIS WAS DONE TO FINISH THE REDUX INTEGRATION, WILL REWRITE SOON
     * - @mxstbr
     */

module.exports = ItemsTableDragDropZone;

},{"./ItemsTableDragDropZoneTarget":442,"classnames":undefined,"react":undefined}],442:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDnd = require('react-dnd');

var _actions = require('../../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var timeoutID = false;

// drop target
/**
 * THIS IS ORPHANED AND ISN'T RENDERED AT THE MOMENT
 * THIS WAS DONE TO FINISH THE REDUX INTEGRATION, WILL REWRITE SOON
 * - @mxstbr
 */

var ItemsTableDragDropZoneTarget = _react2.default.createClass({
	displayName: 'ItemsTableDragDropZoneTarget',
	propTypes: {
		className: _react2.default.PropTypes.string,
		connectDropTarget: _react2.default.PropTypes.func,
		isOver: _react2.default.PropTypes.bool,
		pageItems: _react2.default.PropTypes.string
	},
	componentDidUpdate: function componentDidUpdate() {
		if (timeoutID && !this.props.isOver) {
			clearTimeout(timeoutID);
			timeoutID = false;
		}
	},
	render: function render() {
		var _props = this.props,
		    pageItems = _props.pageItems,
		    page = _props.page,
		    isOver = _props.isOver,
		    dispatch = _props.dispatch;
		var className = this.props.className;

		if (isOver) {
			className += page === this.props.currentPage ? ' is-available ' : ' is-waiting ';
		}
		return this.props.connectDropTarget(_react2.default.createElement(
			'div',
			{
				className: className,
				onClick: function onClick(e) {
					dispatch((0, _actions.setCurrentPage)(page));
				}
			},
			pageItems
		));
	}
});

/**
 * Implements drag target.
 */
var dropTarget = {
	drop: function drop(props, monitor, component) {
		// we send manual data to endDrag to send this item to the correct page
		var page = props.drag.page;

		var targetPage = props.page;
		var pageSize = props.pageSize;

		var item = monitor.getItem();
		item.goToPage = props.page;
		item.prevSortOrder = item.sortOrder;
		// Work out the new sort order. If the new page is greater, we'll put it at the start of the page, and
		// if it's smaller we'll put it at the end of the page.
		item.newSortOrder = targetPage < page ? targetPage * pageSize : targetPage * pageSize - (pageSize - 1);
		return item;
	}
};
/**
 * Specifies the props to inject into your component.
 */
function dropProps(connect, monitor) {
	return {
		connectDropTarget: connect.dropTarget(),
		isOver: monitor.isOver()
	};
};

module.exports = (0, _reactDnd.DropTarget)('item', dropTarget, dropProps)(ItemsTableDragDropZoneTarget);

},{"../../actions":432,"react":undefined,"react-dnd":undefined}],443:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ListControl = require('../ListControl');

var _ListControl2 = _interopRequireDefault(_ListControl);

var _FieldTypes = require('FieldTypes');

var _reactDnd = require('react-dnd');

var _actions = require('../../actions');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ItemsRow = _react2.default.createClass({
	displayName: 'ItemsRow',

	propTypes: {
		columns: _react2.default.PropTypes.array,
		id: _react2.default.PropTypes.any,
		index: _react2.default.PropTypes.number,
		items: _react2.default.PropTypes.object,
		list: _react2.default.PropTypes.object,
		// Injected by React DnD:
		isDragging: _react2.default.PropTypes.bool, // eslint-disable-line react/sort-prop-types
		connectDragSource: _react2.default.PropTypes.func, // eslint-disable-line react/sort-prop-types
		connectDropTarget: _react2.default.PropTypes.func, // eslint-disable-line react/sort-prop-types
		connectDragPreview: _react2.default.PropTypes.func // eslint-disable-line react/sort-prop-types
	},
	renderRow: function renderRow(item) {
		var _this = this;

		var itemId = item.id;
		var rowClassname = (0, _classnames2.default)({
			'ItemList__row--dragging': this.props.isDragging,
			'ItemList__row--selected': this.props.checkedItems[itemId],
			'ItemList__row--manage': this.props.manageMode,
			'ItemList__row--success': this.props.rowAlert.success === itemId,
			'ItemList__row--failure': this.props.rowAlert.fail === itemId
		});
		// item fields
		var cells = this.props.columns.map(function (col, i) {
			var ColumnType = _FieldTypes.Columns[col.type] || _FieldTypes.Columns.__unrecognised__;
			var linkTo = !i ? Keystone.adminPath + '/' + _this.props.list.path + '/' + itemId : undefined;
			return _react2.default.createElement(ColumnType, { key: col.path, list: _this.props.list, col: col, data: item, linkTo: linkTo });
		});

		// add sortable icon when applicable
		if (this.props.list.sortable) {
			cells.unshift(_react2.default.createElement(_ListControl2.default, { key: '_sort', type: 'sortable', dragSource: this.props.connectDragSource }));
		}

		// add delete/check icon when applicable
		if (!this.props.list.nodelete) {
			cells.unshift(this.props.manageMode ? _react2.default.createElement(_ListControl2.default, { key: '_check', type: 'check', active: this.props.checkedItems[itemId] }) : _react2.default.createElement(_ListControl2.default, { key: '_delete', onClick: function onClick(e) {
					return _this.props.deleteTableItem(item, e);
				}, type: 'delete' }));
		}
		var _item$fields = item.fields;
		_item$fields = _item$fields === undefined ? {} : _item$fields;
		var upto = _item$fields.upto;

		var backgroundColor = 'none';
		if (upto) {
			if ((0, _moment2.default)().isSameOrAfter((0, _moment2.default)(upto).subtract('30', 'days'), 'day')) {
				backgroundColor = 'Red';
			} else if ((0, _moment2.default)().isSameOrAfter((0, _moment2.default)(upto).subtract('60', 'days'), 'day')) {
				backgroundColor = 'Yellow';
			}
		}
		var addRow = _react2.default.createElement(
			'tr',
			{ key: 'i' + item.id,
				title: upto ? 'Expire in ' + (0, _moment2.default)(upto).from((0, _moment2.default)()) : '',
				style: { backgroundColor: backgroundColor }, onClick: this.props.manageMode ? function (e) {
					return _this.props.checkTableItem(item, e);
				} : null, className: rowClassname },
			cells,
			_react2.default.createElement(
				'td',
				{ style: { color: '#80777a', fontWeight: 'bold', display: !upto ? 'none' : 'block' } },
				'Expire in ',
				(0, _moment2.default)(upto).from((0, _moment2.default)())
			)
		);

		if (this.props.list.sortable) {
			return (
				// we could add a preview container/image
				// this.props.connectDragPreview(this.props.connectDropTarget(addRow))
				this.props.connectDropTarget(addRow)
			);
		} else {
			return addRow;
		}
	},
	render: function render() {
		return this.renderRow(this.props.item);
	}
});

module.exports = exports = ItemsRow;

// Expose Sortable

/**
 * Implements drag source.
 */
var dragItem = {
	beginDrag: function beginDrag(props) {
		var send = _extends({}, props);
		props.dispatch((0, _actions.setDragBase)(props.item, props.index));
		return _extends({}, send);
	},
	endDrag: function endDrag(props, monitor, component) {
		if (!monitor.didDrop()) {
			props.dispatch((0, _actions.resetItems)(props.id));
			return;
		}
		var page = props.currentPage;
		var pageSize = props.pageSize;

		// If we were dropped onto a page change target, then droppedOn.prevSortOrder etc will be
		// set by that target, and we should use those values. If we were just dropped onto a new row
		// then we need to calculate these values ourselves.
		var droppedOn = monitor.getDropResult();

		var prevSortOrder = droppedOn.prevSortOrder || props.sortOrder;
		// To explain the following line, suppose we are on page 3 and there are 10 items per page.
		// Previous to this page, there are (3 - 1)*10 = 20 items before us. If we have index 6
		// on this page, then we're the 7th item to display (index starts from 0), and so we
		// want to update the display order to 20 + 7 = 27.
		var newSortOrder = droppedOn.newSortOrder || (page - 1) * pageSize + droppedOn.index + 1;

		// If we were dropped on a page change target, then droppedOn.gotToPage will be set, and we should
		// pass this to reorderItems, which will then change the page for the user.
		props.dispatch((0, _actions.reorderItems)(props.item, prevSortOrder, newSortOrder, Number(droppedOn.goToPage)));
	}
};
/**
 * Implements drag target.
 */
var dropItem = {
	drop: function drop(props, monitor, component) {
		return _extends({}, props);
	},
	hover: function hover(props, monitor, component) {
		// reset row alerts
		if (props.rowAlert.success || props.rowAlert.fail) {
			props.dispatch((0, _actions.setRowAlert)({
				reset: true
			}));
		}

		var dragged = monitor.getItem().index;
		var over = props.index;

		// self
		if (dragged === over) {
			return;
		}

		props.dispatch((0, _actions.moveItem)(dragged, over, props));
		monitor.getItem().index = over;
	}
};

/**
 * Specifies the props to inject into your component.
 */
function dragProps(connect, monitor) {
	return {
		connectDragSource: connect.dragSource(),
		isDragging: monitor.isDragging(),
		connectDragPreview: connect.dragPreview()
	};
}

function dropProps(connect) {
	return {
		connectDropTarget: connect.dropTarget()
	};
};

exports.Sortable = (0, _reactDnd.DragSource)('item', dragItem, dragProps)((0, _reactDnd.DropTarget)('item', dropItem, dropProps)(ItemsRow));

},{"../../actions":432,"../ListControl":445,"FieldTypes":undefined,"classnames":undefined,"moment":undefined,"react":undefined,"react-dnd":undefined}],444:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _Popout = require('../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _PopoutList = require('../../../shared/Popout/PopoutList');

var _PopoutList2 = _interopRequireDefault(_PopoutList);

var _elemental = require('../../../elemental');

var _ListHeaderButton = require('./ListHeaderButton');

var _ListHeaderButton2 = _interopRequireDefault(_ListHeaderButton);

var _actions = require('../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListColumnsForm = _react2.default.createClass({
	displayName: 'ListColumnsForm',
	getInitialState: function getInitialState() {
		return {
			selectedColumns: {},
			searchString: ''
		};
	},
	getSelectedColumnsFromStore: function getSelectedColumnsFromStore() {
		var selectedColumns = {};
		this.props.activeColumns.forEach(function (col) {
			selectedColumns[col.path] = true;
		});
		return selectedColumns;
	},
	togglePopout: function togglePopout(visible) {
		this.setState({
			selectedColumns: this.getSelectedColumnsFromStore(),
			isOpen: visible,
			searchString: ''
		});
	},
	toggleColumn: function toggleColumn(path, value) {
		var newColumns = (0, _objectAssign2.default)({}, this.state.selectedColumns);

		if (value) {
			newColumns[path] = value;
		} else {
			delete newColumns[path];
		}

		this.setState({
			selectedColumns: newColumns
		});
	},
	applyColumns: function applyColumns() {
		this.props.dispatch((0, _actions.setActiveColumns)(Object.keys(this.state.selectedColumns)));
		this.togglePopout(false);
	},
	updateSearch: function updateSearch(e) {
		this.setState({ searchString: e.target.value });
	},
	renderColumns: function renderColumns() {
		var _this = this;

		var availableColumns = this.props.availableColumns;
		var searchString = this.state.searchString;

		var filteredColumns = availableColumns;

		if (searchString) {
			filteredColumns = filteredColumns.filter(function (column) {
				return column.type !== 'heading';
			}).filter(function (column) {
				return new RegExp(searchString).test(column.field.label.toLowerCase());
			});
		}

		return filteredColumns.map(function (el, i) {
			if (el.type === 'heading') {
				return _react2.default.createElement(
					_PopoutList2.default.Heading,
					{ key: 'heading_' + i },
					el.content
				);
			}

			var path = el.field.path;
			var selected = _this.state.selectedColumns[path];

			return _react2.default.createElement(_PopoutList2.default.Item, {
				key: 'column_' + el.field.path,
				icon: selected ? 'check' : 'dash',
				iconHover: selected ? 'dash' : 'check',
				isSelected: !!selected,
				label: el.field.label,
				onClick: function onClick() {
					_this.toggleColumn(path, !selected);
				} });
		});
	},
	render: function render() {
		var _this2 = this;

		var formFieldStyles = {
			borderBottom: '1px dashed rgba(0,0,0,0.1)',
			marginBottom: '1em',
			paddingBottom: '1em'
		};
		return _react2.default.createElement(
			'div',
			null,
			_react2.default.createElement(_ListHeaderButton2.default, {
				active: this.state.isOpen,
				id: 'listHeaderColumnButton',
				glyph: 'list-unordered',
				label: 'Columns',
				onClick: function onClick() {
					return _this2.togglePopout(!_this2.state.isOpen);
				}
			}),
			_react2.default.createElement(
				_Popout2.default,
				{ isOpen: this.state.isOpen, onCancel: function onCancel() {
						return _this2.togglePopout(false);
					}, relativeToID: 'listHeaderColumnButton' },
				_react2.default.createElement(_Popout2.default.Header, { title: 'Columns' }),
				_react2.default.createElement(
					_Popout2.default.Body,
					{ scrollable: true },
					_react2.default.createElement(
						'div',
						{ style: formFieldStyles },
						_react2.default.createElement(_elemental.FormInput, {
							autoFocus: true,
							onChange: this.updateSearch,
							placeholder: 'Find a column...',
							value: this.state.searchString
						})
					),
					_react2.default.createElement(
						_PopoutList2.default,
						null,
						this.renderColumns()
					)
				),
				_react2.default.createElement(_Popout2.default.Footer, {
					primaryButtonAction: this.applyColumns,
					primaryButtonLabel: 'Apply',
					secondaryButtonAction: function secondaryButtonAction() {
						return _this2.togglePopout(false);
					},
					secondaryButtonLabel: 'Cancel' })
			)
		);
	}
});

module.exports = ListColumnsForm;

},{"../../../elemental":399,"../../../shared/Popout":473,"../../../shared/Popout/PopoutList":469,"../actions":432,"./ListHeaderButton":447,"object-assign":577,"react":undefined}],445:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListControl = _react2.default.createClass({
	displayName: 'ListControl',

	propTypes: {
		dragSource: _react2.default.PropTypes.func,
		onClick: _react2.default.PropTypes.func,
		type: _react2.default.PropTypes.oneOf(['check', 'delete', 'sortable']).isRequired
	},
	renderControl: function renderControl() {
		var icon = 'octicon octicon-';
		var className = (0, _classnames2.default)('ItemList__control ItemList__control--' + this.props.type, {
			'is-active': this.props.active
		});
		var tabindex = this.props.type === 'sortable' ? -1 : null;

		if (this.props.type === 'check') {
			icon += 'check';
		}
		if (this.props.type === 'delete') {
			icon += 'trashcan';
		}
		if (this.props.type === 'sortable') {
			icon += 'three-bars';
		}

		var renderButton = _react2.default.createElement(
			'button',
			{ type: 'button', onClick: this.props.onClick, className: className, tabIndex: tabindex },
			_react2.default.createElement('span', { className: icon })
		);
		if (this.props.dragSource) {
			return this.props.dragSource(renderButton);
		} else {
			return renderButton;
		}
	},
	render: function render() {
		var className = 'ItemList__col--control ItemList__col--' + this.props.type;

		return _react2.default.createElement(
			'td',
			{ className: className },
			this.renderControl()
		);
	}
});

module.exports = ListControl;

},{"classnames":undefined,"react":undefined}],446:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _Popout = require('../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _PopoutList = require('../../../shared/Popout/PopoutList');

var _PopoutList2 = _interopRequireDefault(_PopoutList);

var _ListHeaderButton = require('./ListHeaderButton');

var _ListHeaderButton2 = _interopRequireDefault(_ListHeaderButton);

var _elemental = require('../../../elemental');

var _actions = require('../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FORMAT_OPTIONS = [{ label: 'EXCEL', value: 'csv' }, { label: 'JSON', value: 'json' }];

var ListDownloadForm = _react2.default.createClass({
	displayName: 'ListDownloadForm',

	propTypes: {
		activeColumns: _react.PropTypes.array,
		dispatch: _react.PropTypes.func.isRequired,
		list: _react.PropTypes.object
	},
	getInitialState: function getInitialState() {
		return {
			format: FORMAT_OPTIONS[0].value,
			isOpen: false,
			useCurrentColumns: true,
			selectedColumns: this.getDefaultSelectedColumns()
		};
	},
	getDefaultSelectedColumns: function getDefaultSelectedColumns() {
		var selectedColumns = {};
		this.props.activeColumns.forEach(function (col) {
			selectedColumns[col.path] = true;
		});
		return selectedColumns;
	},
	getListUIElements: function getListUIElements() {
		var _this = this;

		return this.props.list.uiElements.map(function (el) {
			return el.type === 'field' ? {
				type: 'field',
				field: _this.props.list.fields[el.field]
			} : el;
		});
	},
	allColumnsSelected: function allColumnsSelected() {
		var selectedColumns = Object.keys(this.state.selectedColumns).length;
		var columnAmount = this.getListUIElements().filter(function (el) {
			return el.type !== 'heading';
		}).length;
		return selectedColumns === columnAmount;
	},
	togglePopout: function togglePopout(visible) {
		this.setState({
			isOpen: visible
		});
	},
	toggleColumn: function toggleColumn(column, value) {
		var newColumns = (0, _objectAssign2.default)({}, this.state.selectedColumns);
		if (value) {
			newColumns[column] = value;
		} else {
			delete newColumns[column];
		}
		this.setState({
			selectedColumns: newColumns
		});
	},
	changeFormat: function changeFormat(value) {
		this.setState({
			format: value
		});
	},
	toggleCurrentlySelectedColumns: function toggleCurrentlySelectedColumns(e) {
		var newState = {
			useCurrentColumns: e.target.checked,
			selectedColumns: this.getDefaultSelectedColumns()
		};
		this.setState(newState);
	},
	clickSelectAll: function clickSelectAll() {
		if (this.allColumnsSelected()) {
			this.selectNoColumns();
		} else {
			this.selectAllColumns();
		}
	},
	selectAllColumns: function selectAllColumns() {
		var newColumns = {};
		this.getListUIElements().map(function (el) {
			if (el.type !== 'heading') {
				newColumns[el.field.path] = true;
			}
		});
		this.setState({
			selectedColumns: newColumns
		});
	},
	selectNoColumns: function selectNoColumns() {
		this.setState({
			selectedColumns: {}
		});
	},
	handleDownloadRequest: function handleDownloadRequest() {
		this.props.dispatch((0, _actions.downloadItems)(this.state.format, Object.keys(this.state.selectedColumns)));
		this.togglePopout(false);
	},
	renderColumnSelect: function renderColumnSelect() {
		var _this2 = this;

		if (this.state.useCurrentColumns) return null;

		var possibleColumns = this.getListUIElements().map(function (el, i) {
			if (el.type === 'heading') {
				return _react2.default.createElement(
					_PopoutList2.default.Heading,
					{ key: 'heading_' + i },
					el.content
				);
			}

			var columnKey = el.field.path;
			var columnValue = _this2.state.selectedColumns[columnKey];

			return _react2.default.createElement(_PopoutList2.default.Item, {
				key: 'item_' + el.field.path,
				icon: columnValue ? 'check' : 'dash',
				iconHover: columnValue ? 'dash' : 'check',
				isSelected: columnValue,
				label: el.field.label,
				onClick: function onClick() {
					return _this2.toggleColumn(columnKey, !columnValue);
				} });
		});

		var allColumnsSelected = this.allColumnsSelected();
		var checkboxLabel = allColumnsSelected ? 'Select None' : 'Select All';

		return _react2.default.createElement(
			'div',
			null,
			_react2.default.createElement(
				_elemental.FormField,
				{ offsetAbsentLabel: true },
				_react2.default.createElement(_elemental.LabelledControl, {
					checked: allColumnsSelected,
					label: checkboxLabel,
					onChange: this.clickSelectAll,
					type: 'checkbox',
					value: true
				})
			),
			_react2.default.createElement(
				'div',
				{ style: { borderTop: '1px dashed rgba(0,0,0,0.1)', marginTop: '1em', paddingTop: '1em' } },
				possibleColumns
			)
		);
	},
	render: function render() {
		var _this3 = this;

		var useCurrentColumns = this.state.useCurrentColumns;


		return _react2.default.createElement(
			'div',
			null,
			_react2.default.createElement(_ListHeaderButton2.default, {
				active: this.state.isOpen,
				id: 'listHeaderDownloadButton',
				glyph: 'cloud-download',
				label: 'Download',
				onClick: function onClick() {
					return _this3.togglePopout(!_this3.state.isOpen);
				}
			}),
			_react2.default.createElement(
				_Popout2.default,
				{ isOpen: this.state.isOpen, onCancel: function onCancel() {
						return _this3.togglePopout(false);
					}, relativeToID: 'listHeaderDownloadButton' },
				_react2.default.createElement(_Popout2.default.Header, { title: 'Download' }),
				_react2.default.createElement(
					_Popout2.default.Body,
					{ scrollable: true },
					_react2.default.createElement(
						_elemental.Form,
						{ layout: 'horizontal', labelWidth: 100, component: 'div' },
						_react2.default.createElement(
							_elemental.FormField,
							{ label: 'File format:' },
							_react2.default.createElement(_elemental.SegmentedControl, {
								equalWidthSegments: true,
								onChange: this.changeFormat,
								options: FORMAT_OPTIONS,
								value: this.state.format
							})
						),
						_react2.default.createElement(
							_elemental.FormField,
							{ label: 'Columns:', style: { marginBottom: 0 } },
							_react2.default.createElement(_elemental.LabelledControl, {
								autoFocus: true,
								checked: useCurrentColumns,
								label: 'Use currently selected',
								onChange: this.toggleCurrentlySelectedColumns,
								type: 'checkbox',
								value: true
							})
						),
						this.renderColumnSelect()
					)
				),
				_react2.default.createElement(_Popout2.default.Footer, {
					primaryButtonAction: this.handleDownloadRequest,
					primaryButtonLabel: 'Download',
					secondaryButtonAction: function secondaryButtonAction() {
						return _this3.togglePopout(false);
					},
					secondaryButtonLabel: 'Cancel' })
			)
		);
	}
});

module.exports = ListDownloadForm;

},{"../../../elemental":399,"../../../shared/Popout":473,"../../../shared/Popout/PopoutList":469,"../actions":432,"./ListHeaderButton":447,"object-assign":577,"react":undefined}],447:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../../elemental');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ListHeaderButton(_ref) {
	var className = _ref.className,
	    label = _ref.label,
	    glyph = _ref.glyph,
	    props = _objectWithoutProperties(_ref, ['className', 'label', 'glyph']);

	return _react2.default.createElement(
		_elemental.DropdownButton,
		_extends({ block: true }, props),
		_react2.default.createElement(_elemental.Glyph, { name: glyph, aphroditeStyles: classes.glyph }),
		_react2.default.createElement(
			'span',
			{ className: (0, _glamor.css)(classes.label) },
			label
		)
	);
};

ListHeaderButton.propTypes = {
	glyph: _react.PropTypes.string.isRequired
};

// show an icon on small screens where real estate is precious
// otherwise render the label
var classes = {
	glyph: {
		'display': 'none',

		'@media (max-width: 500px)': {
			display: 'inline-block'
		}
	},
	label: {
		'display': 'inline-block',

		'@media (max-width: 500px)': {
			display: 'none'
		}
	}
};

module.exports = ListHeaderButton;

},{"../../../elemental":399,"glamor":undefined,"react":undefined}],448:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _theme = require('../../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _color = require('../../../../utils/color');

var _elemental = require('../../../elemental');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ListHeaderSearch(_ref) {
	var focusInput = _ref.focusInput,
	    handleChange = _ref.handleChange,
	    handleClear = _ref.handleClear,
	    handleKeyup = _ref.handleKeyup,
	    value = _ref.value,
	    props = _objectWithoutProperties(_ref, ['focusInput', 'handleChange', 'handleClear', 'handleKeyup', 'value']);

	return _react2.default.createElement(
		'div',
		_extends({}, props, { className: (0, _glamor.css)(classes.wrapper) }),
		_react2.default.createElement(_elemental.FormInput, {
			'data-search-input-field': true,
			onChange: handleChange,
			onKeyUp: handleKeyup,
			placeholder: 'Search',
			value: value
		}),
		_react2.default.createElement(
			'button',
			{
				className: (0, _glamor.css)(classes.icon, !!value.length && classes.iconWhenClear),
				'data-search-input-field-clear-icon': true,
				disabled: !value.length,
				onClick: value.length && handleClear,
				title: 'Clear search query',
				type: 'button'
			},
			_react2.default.createElement(_elemental.Glyph, { name: value.length ? 'x' : 'search' })
		)
	);
};

ListHeaderSearch.propTypes = {
	focusInput: _react.PropTypes.bool,
	handleChange: _react.PropTypes.func.isRequired,
	handleClear: _react.PropTypes.func.isRequired,
	handleKeyup: _react.PropTypes.func.isRequired,
	value: _react.PropTypes.string
};

var clearHoverAndFocusStyles = {
	color: _theme2.default.color.danger,
	outline: 0,
	textDecoration: 'none'
};

var classes = {
	wrapper: {
		position: 'relative'
	},
	icon: {
		background: 'none',
		border: 'none',
		color: _theme2.default.color.gray40,
		height: '100%',
		position: 'absolute',
		right: 0,
		textAlign: 'center',
		top: 0,
		width: '2.2em',
		zIndex: 2 // above the form field on focus
	},
	iconWhenClear: {
		':hover': clearHoverAndFocusStyles,
		':focus': clearHoverAndFocusStyles,
		':active': {
			color: (0, _color.darken)(_theme2.default.color.danger, 10)
		}
	}
};

module.exports = ListHeaderSearch;

},{"../../../../theme":477,"../../../../utils/color":479,"../../../elemental":399,"glamor":undefined,"react":undefined}],449:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _glamor = require('glamor');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _theme = require('../../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _ListSort = require('./ListSort');

var _ListSort2 = _interopRequireDefault(_ListSort);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ListHeaderTitle(_ref) {
	var activeSort = _ref.activeSort,
	    availableColumns = _ref.availableColumns,
	    handleSortSelect = _ref.handleSortSelect,
	    title = _ref.title,
	    props = _objectWithoutProperties(_ref, ['activeSort', 'availableColumns', 'handleSortSelect', 'title']);

	return _react2.default.createElement(
		'h2',
		_extends({ className: (0, _glamor.css)(classes.heading) }, props),
		title,
		_react2.default.createElement(_ListSort2.default, {
			activeSort: activeSort,
			availableColumns: availableColumns,
			handleSortSelect: handleSortSelect
		})
	);
};

ListHeaderTitle.propTypes = {
	activeSort: _react.PropTypes.object,
	availableColumns: _react.PropTypes.arrayOf(_react.PropTypes.object),
	handleSortSelect: _react.PropTypes.func.isRequired,
	title: _react.PropTypes.string
};

var classes = {
	heading: _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.mobileMax + ')', {
		fontSize: '1.25em',
		fontWeight: 500
	})
};

module.exports = ListHeaderTitle;

},{"../../../../theme":477,"./ListSort":452,"glamor":undefined,"react":undefined}],450:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../../elemental');

var _theme = require('../../../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _Popout = require('../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _PopoutList = require('../../../shared/Popout/PopoutList');

var _PopoutList2 = _interopRequireDefault(_PopoutList);

var _ListColumnsForm = require('./ListColumnsForm');

var _ListColumnsForm2 = _interopRequireDefault(_ListColumnsForm);

var _ListDownloadForm = require('./ListDownloadForm');

var _ListDownloadForm2 = _interopRequireDefault(_ListDownloadForm);

var _ListHeaderSearch = require('./ListHeaderSearch');

var _ListHeaderSearch2 = _interopRequireDefault(_ListHeaderSearch);

var _ListFiltersAdd = require('./Filtering/ListFiltersAdd');

var _ListFiltersAdd2 = _interopRequireDefault(_ListFiltersAdd);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ButtonDivider(_ref) {
	var style = _ref.style,
	    props = _objectWithoutProperties(_ref, ['style']);

	props.style = _extends({
		borderLeft: '1px solid rgba(0, 0, 0, 0.1)',
		paddingLeft: '0.75em'
	}, style);

	return _react2.default.createElement('div', props);
};

function CreateButton(_ref2) {
	var listName = _ref2.listName,
	    onClick = _ref2.onClick,
	    props = _objectWithoutProperties(_ref2, ['listName', 'onClick']);

	return _react2.default.createElement(
		_elemental.GlyphButton,
		_extends({
			block: true,
			color: 'success',
			'data-e2e-list-create-button': 'header',
			glyph: 'plus',
			onClick: onClick,
			position: 'left',
			title: 'Create ' + listName
		}, props),
		_react2.default.createElement(_elemental.ResponsiveText, {
			visibleSM: 'Create',
			visibleMD: 'Create',
			visibleLG: 'Create ' + listName
		})
	);
};

var ListHeaderToolbar = _react2.default.createClass({
	displayName: 'ListHeaderToolbar',
	propTypes: {
		columnsActive: _react.PropTypes.array,
		columnsAvailable: _react.PropTypes.array,
		createIsAvailable: _react.PropTypes.bool,
		createListName: _react.PropTypes.string,
		createOnClick: _react.PropTypes.func.isRequired,
		dispatch: _react.PropTypes.func.isRequired,
		expandIsActive: _react.PropTypes.bool,
		expandOnClick: _react.PropTypes.func.isRequired,
		filtersActive: _react.PropTypes.array,
		filtersAvailable: _react.PropTypes.array,
		list: _react.PropTypes.object,
		searchHandleChange: _react.PropTypes.func.isRequired,
		searchHandleClear: _react.PropTypes.func.isRequired,
		searchHandleKeyup: _react.PropTypes.func.isRequired,
		customCreateButton: _react.PropTypes.func.isRequired,
		searchValue: _react.PropTypes.string
	},
	getInitialState: function getInitialState() {
		return {
			popoutIsOpen: false
		};
	},
	closePopout: function closePopout() {
		this.setState({
			popoutIsOpen: false
		});
	},
	handleCreateButtonOptions: function handleCreateButtonOptions(action_type) {
		this.props.customCreateButton(action_type);
		this.setState({
			popoutIsOpen: false
		});
	},
	render: function render() {
		var _this = this;

		return _react2.default.createElement(
			'span',
			null,
			_react2.default.createElement(
				_elemental.InlineGroup,
				{ block: true, aphroditeStyles: classes.wrapper },
				_react2.default.createElement(
					_elemental.InlineGroupSection,
					{ grow: true, aphroditeStyles: classes.search },
					_react2.default.createElement(_ListHeaderSearch2.default, {
						handleChange: this.props.searchHandleChange,
						handleClear: this.props.searchHandleClear,
						handleKeyup: this.props.searchHandleKeyup,
						value: this.props.searchValue
					})
				),
				_react2.default.createElement(
					_elemental.InlineGroupSection,
					{ grow: true, aphroditeStyles: classes.buttons },
					_react2.default.createElement(
						_elemental.InlineGroup,
						{ block: true },
						_react2.default.createElement(
							_elemental.InlineGroupSection,
							{ aphroditeStyles: classes.filter },
							_react2.default.createElement(_ListFiltersAdd2.default, {
								dispatch: this.props.dispatch,
								activeFilters: this.props.filtersActive,
								availableFilters: this.props.filtersAvailable
							})
						),
						_react2.default.createElement(
							_elemental.InlineGroupSection,
							{ aphroditeStyles: classes.columns },
							_react2.default.createElement(_ListColumnsForm2.default, {
								availableColumns: this.props.columnsAvailable,
								activeColumns: this.props.columnsActive,
								dispatch: this.props.dispatch
							})
						),
						_react2.default.createElement(
							_elemental.InlineGroupSection,
							{ aphroditeStyles: classes.download },
							_react2.default.createElement(_ListDownloadForm2.default, {
								activeColumns: this.props.columnsActive,
								dispatch: this.props.dispatch,
								list: this.props.list
							})
						),
						_react2.default.createElement(
							_elemental.InlineGroupSection,
							{ aphroditeStyles: classes.expand },
							_react2.default.createElement(
								ButtonDivider,
								null,
								_react2.default.createElement(_elemental.GlyphButton, {
									active: this.props.expandIsActive,
									glyph: 'mirror',
									onClick: this.props.expandOnClick,
									title: 'Expand table width'
								})
							)
						),
						this.props.createIsAvailable && _react2.default.createElement(
							'span',
							{ id: 'listCreateHeaderButton' },
							_react2.default.createElement(
								_elemental.InlineGroupSection,
								{ aphroditeStyles: classes.create },
								_react2.default.createElement(
									ButtonDivider,
									null,
									_react2.default.createElement(CreateButton, {
										listName: this.props.createListName,
										onClick: this.props.list.customCreateButton ? function () {
											return _this.setState({
												popoutIsOpen: true
											});
										} : this.props.createOnClick
									})
								)
							)
						)
					)
				)
			),
			_react2.default.createElement(
				_Popout2.default,
				{ isOpen: this.state.popoutIsOpen, onCancel: this.closePopout, relativeToID: 'listCreateHeaderButton' },
				_react2.default.createElement(_Popout2.default.Header, {
					title: 'Select ' + this.props.createListName + ' Type'
				}),
				_react2.default.createElement(
					_Popout2.default.Body,
					null,
					this.props.list.customButtonOptions && this.props.list.customButtonOptions.map(function (item) {
						return _react2.default.createElement(
							'button',
							{
								type: 'button',
								title: item.label,
								className: 'PopoutList__item',
								key: item.key,
								onClick: function onClick() {
									return _this.handleCreateButtonOptions(item.key);
								}
							},
							_react2.default.createElement('span', { className: 'PopoutList__item__icon octicon octicon-chevron-right' }),
							_react2.default.createElement(
								'span',
								{ className: 'PopoutList__item__label' },
								item.label
							)
						);
					})
				)
			)
		);
	}
});

var tabletGrowStyles = _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.tabletPortraitMax + ')', {
	flexGrow: 1
});

var classes = {
	// main wrapper
	wrapper: _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.tabletPortraitMax + ')', {
		flexWrap: 'wrap'
	}),

	// button wrapper
	buttons: _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.tabletPortraitMax + ')', {
		paddingLeft: 0
	}),

	// cols
	expand: _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.desktopMax + ')', {
		display: 'none'
	}),
	filter: _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.tabletPortraitMax + ')', {
		paddingLeft: 0,
		flexGrow: 1
	}),
	columns: tabletGrowStyles,
	create: tabletGrowStyles,
	download: tabletGrowStyles,
	search: _defineProperty({}, '@media (max-width: ' + _theme2.default.breakpoint.tabletPortraitMax + ')', {
		marginBottom: '0.75em',
		minWidth: '100%'
	})
};

module.exports = ListHeaderToolbar;

},{"../../../../theme":477,"../../../elemental":399,"../../../shared/Popout":473,"../../../shared/Popout/PopoutList":469,"./Filtering/ListFiltersAdd":436,"./ListColumnsForm":444,"./ListDownloadForm":446,"./ListHeaderSearch":448,"react":undefined}],451:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../../../elemental');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function ListManagement(_ref) {
	var checkedItemCount = _ref.checkedItemCount,
	    handleDelete = _ref.handleDelete,
	    handleSelect = _ref.handleSelect,
	    handleToggle = _ref.handleToggle,
	    isOpen = _ref.isOpen,
	    itemCount = _ref.itemCount,
	    itemsPerPage = _ref.itemsPerPage,
	    nodelete = _ref.nodelete,
	    noedit = _ref.noedit,
	    selectAllItemsLoading = _ref.selectAllItemsLoading,
	    currentList = _ref.currentList,
	    handleCustomAction = _ref.handleCustomAction,
	    props = _objectWithoutProperties(_ref, ['checkedItemCount', 'handleDelete', 'handleSelect', 'handleToggle', 'isOpen', 'itemCount', 'itemsPerPage', 'nodelete', 'noedit', 'selectAllItemsLoading', 'currentList', 'handleCustomAction']);

	// do not render if there's no results
	// or if edit/delete unavailable on the list
	if (!itemCount || nodelete && noedit) return null;

	var buttonNoteStyles = { color: '#999', fontWeight: 'normal' };
	var customActionButtons = [];
	if (isOpen && currentList && currentList.customAction) {
		// SHOW DROPDOWN OPTION FOR CUSTOM ACTIONS IF  customActionType === 'dropdown'
		if (currentList.customActionType === 'dropdown') {
			var options = [];

			options.push(_react2.default.createElement(
				'option',
				null,
				'Select Action'
			));
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = currentList.customAction[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var customAction = _step.value;

					options.push(_react2.default.createElement(
						'option',
						{ value: customAction.key },
						customAction.label,
						' '
					));
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			customActionButtons.push(_react2.default.createElement(
				_elemental.InlineGroupSection,
				null,
				_react2.default.createElement(
					'select',
					{
						style: { width: 200, height: 33, borderWidth: 1, borderRadius: '0.3rem' }
						// disabled={!checkedItemCount}
						, onChange: function onChange(event) {
							var selectedAction = _lodash2.default.find(currentList.customAction, { key: event.target.value });
							if (selectedAction) {
								handleCustomAction(selectedAction);
							}
						}
					},
					options
				)
			));
		} else {
			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				var _loop = function _loop() {
					var customAction = _step2.value;

					customActionButtons.push(_react2.default.createElement(
						_elemental.InlineGroupSection,
						null,
						_react2.default.createElement(
							_elemental.GlyphButton,
							{
								color: 'info',
								disabled: !checkedItemCount,
								glyph: 'download',
								onClick: function onClick() {
									return handleCustomAction(customAction);
								},
								position: 'left',
								variant: 'link' },
							customAction.label
						)
					));
				};

				for (var _iterator2 = currentList.customAction[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					_loop();
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}
		}
	}

	// delete button
	var actionButtons = isOpen && _react2.default.createElement(
		_elemental.InlineGroupSection,
		null,
		_react2.default.createElement(
			_elemental.GlyphButton,
			{
				color: 'cancel',
				disabled: !checkedItemCount,
				glyph: 'trashcan',
				onClick: handleDelete,
				position: 'left',
				variant: 'link' },
			'Delete'
		)
	);

	// select buttons
	var allVisibleButtonIsActive = checkedItemCount === itemCount;
	var pageVisibleButtonIsActive = checkedItemCount === itemsPerPage;
	var noneButtonIsActive = !checkedItemCount;
	var selectAllButton = itemCount > itemsPerPage && _react2.default.createElement(
		_elemental.InlineGroupSection,
		null,
		_react2.default.createElement(
			_elemental.Button,
			{
				active: allVisibleButtonIsActive,
				onClick: function onClick() {
					return handleSelect('all');
				},
				title: 'Select all rows (including those not visible)' },
			selectAllItemsLoading ? _react2.default.createElement(_elemental.Spinner, null) : 'All',
			' ',
			_react2.default.createElement(
				'small',
				{ style: buttonNoteStyles },
				'(',
				itemCount,
				')'
			)
		)
	);

	var selectButtons = isOpen ? _react2.default.createElement(
		_elemental.InlineGroupSection,
		null,
		_react2.default.createElement(
			_elemental.InlineGroup,
			{ contiguous: true },
			selectAllButton,
			_react2.default.createElement(
				_elemental.InlineGroupSection,
				null,
				_react2.default.createElement(
					_elemental.Button,
					{ active: pageVisibleButtonIsActive, onClick: function onClick() {
							return handleSelect('visible');
						}, title: 'Select all rows' },
					itemCount > itemsPerPage ? 'Page ' : 'All ',
					_react2.default.createElement(
						'small',
						{ style: buttonNoteStyles },
						'(',
						itemCount > itemsPerPage ? itemsPerPage : itemCount,
						')'
					)
				)
			),
			_react2.default.createElement(
				_elemental.InlineGroupSection,
				null,
				_react2.default.createElement(
					_elemental.Button,
					{ active: noneButtonIsActive, onClick: function onClick() {
							return handleSelect('none');
						}, title: 'Deselect all rows' },
					'None'
				)
			)
		)
	) : null;

	// selected count text
	var selectedCountText = isOpen ? _react2.default.createElement(
		_elemental.InlineGroupSection,
		null,
		_react2.default.createElement(
			'span',
			{ style: { color: '#666', display: 'inline-block', lineHeight: '2.4em', margin: 1 } },
			checkedItemCount,
			' selected'
		)
	) : null;

	// put it all together
	return _react2.default.createElement(
		'div',
		null,
		_react2.default.createElement(
			_elemental.InlineGroup,
			{ style: { float: 'left', marginRight: '.75em', marginBottom: 0 } },
			_react2.default.createElement(
				_elemental.InlineGroupSection,
				null,
				_react2.default.createElement(
					_elemental.Button,
					{ active: isOpen, onClick: function onClick() {
							return handleToggle(!isOpen);
						} },
					'Manage'
				)
			),
			selectButtons,
			actionButtons,
			customActionButtons,
			selectedCountText
		)
	);
};

ListManagement.propTypes = {
	checkedItems: _react.PropTypes.number,
	handleCustomAction: _react.PropTypes.func.isRequired,
	handleDelete: _react.PropTypes.func.isRequired,
	handleSelect: _react.PropTypes.func.isRequired,
	handleToggle: _react.PropTypes.func.isRequired,
	isOpen: _react.PropTypes.bool,
	itemCount: _react.PropTypes.number,
	itemsPerPage: _react.PropTypes.number,
	nodelete: _react.PropTypes.bool,
	noedit: _react.PropTypes.bool,
	selectAllItemsLoading: _react.PropTypes.bool
};

module.exports = ListManagement;

},{"../../../elemental":399,"lodash":undefined,"react":undefined}],452:[function(require,module,exports){
'use strict';

var _elemental = require('../../../elemental');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _vkey = require('vkey');

var _vkey2 = _interopRequireDefault(_vkey);

var _Kbd = require('../../../shared/Kbd');

var _Kbd2 = _interopRequireDefault(_Kbd);

var _Popout = require('../../../shared/Popout');

var _Popout2 = _interopRequireDefault(_Popout);

var _PopoutList = require('../../../shared/Popout/PopoutList');

var _PopoutList2 = _interopRequireDefault(_PopoutList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListSort = _react2.default.createClass({
	displayName: 'ListSort',
	propTypes: {
		handleSortSelect: _react.PropTypes.func.isRequired
	},
	getInitialState: function getInitialState() {
		return {
			altDown: false,
			popoutIsOpen: false,
			searchString: ''
		};
	},
	componentDidMount: function componentDidMount() {
		document.body.addEventListener('keydown', this.handleKeyDown, false);
		document.body.addEventListener('keyup', this.handleKeyUp, false);
	},
	componentWillUnmount: function componentWillUnmount() {
		document.body.removeEventListener('keydown', this.handleKeyDown);
		document.body.removeEventListener('keyup', this.handleKeyUp);
	},
	handleKeyDown: function handleKeyDown(e) {
		if (_vkey2.default[e.keyCode] !== '<alt>') return;
		this.setState({
			altDown: true
		});
	},
	handleKeyUp: function handleKeyUp(e) {
		if (_vkey2.default[e.keyCode] !== '<alt>') return;
		this.setState({
			altDown: false
		});
	},
	handleSortSelect: function handleSortSelect(path, inverted) {
		if (this.state.altDown) inverted = true;
		this.props.handleSortSelect(path, inverted);
		this.closePopout();
	},
	openPopout: function openPopout() {
		this.setState({
			popoutIsOpen: true
		});
	},
	closePopout: function closePopout() {
		this.setState({
			popoutIsOpen: false,
			searchString: ''
		});
	},
	updateSearch: function updateSearch(e) {
		this.setState({ searchString: e.target.value });
	},
	renderSortOptions: function renderSortOptions() {
		var _this = this;

		// TODO: Handle multiple sort paths
		var activeSortPath = this.props.activeSort.paths[0];
		var availibleColumns = this.props.availableColumns;
		var searchString = this.state.searchString;

		var filteredColumns = availibleColumns;

		if (searchString) {
			filteredColumns = filteredColumns.filter(function (column) {
				return column.type !== 'heading';
			}).filter(function (column) {
				return new RegExp(searchString).test(column.field.label.toLowerCase());
			});
		}

		return filteredColumns.map(function (el, i) {
			if (el.type === 'heading') {
				return _react2.default.createElement(
					_PopoutList2.default.Heading,
					{ key: 'heading_' + i },
					el.content
				);
			}

			var path = el.field.path;
			var isSelected = activeSortPath && activeSortPath.path === path;
			var isInverted = isSelected && activeSortPath.invert;
			var icon = _this.state.altDown || isSelected && !isInverted ? 'chevron-up' : 'chevron-down';

			return _react2.default.createElement(_PopoutList2.default.Item, {
				key: 'column_' + el.field.path,
				icon: icon,
				isSelected: isSelected,
				label: el.field.label,
				onClick: function onClick() {
					_this.handleSortSelect(path, isSelected && !isInverted);
				} });
		});
	},
	render: function render() {
		// TODO: Handle multiple sort paths
		var activeSortPath = this.props.activeSort.paths[0];
		var formFieldStyles = { borderBottom: '1px dashed rgba(0,0,0,0.1)', paddingBottom: '1em' };

		return _react2.default.createElement(
			'span',
			null,
			activeSortPath && _react2.default.createElement(
				'span',
				null,
				_react2.default.createElement(
					'span',
					{ style: { color: '#999' } },
					' sorted by '
				),
				_react2.default.createElement(
					'a',
					{ id: 'listHeaderSortButton', href: 'javascript:;', onClick: this.openPopout },
					activeSortPath.label.toLowerCase(),
					activeSortPath.invert ? ' (descending)' : '',
					_react2.default.createElement('span', { className: 'disclosure-arrow' })
				)
			),
			_react2.default.createElement(
				_Popout2.default,
				{ isOpen: this.state.popoutIsOpen, onCancel: this.closePopout, relativeToID: 'listHeaderSortButton' },
				_react2.default.createElement(_Popout2.default.Header, { title: 'Sort' }),
				_react2.default.createElement(
					_Popout2.default.Body,
					{ scrollable: true },
					_react2.default.createElement(
						_elemental.FormField,
						{ style: formFieldStyles },
						_react2.default.createElement(_elemental.FormInput, {
							autoFocus: true,
							value: this.state.searchString,
							onChange: this.updateSearch,
							placeholder: 'Find a field...'
						})
					),
					_react2.default.createElement(
						_PopoutList2.default,
						null,
						this.renderSortOptions()
					)
				),
				_react2.default.createElement(
					_Popout2.default.Footer,
					null,
					_react2.default.createElement(
						_elemental.FormNote,
						null,
						'Hold ',
						_react2.default.createElement(
							_Kbd2.default,
							null,
							'alt'
						),
						' to toggle ascending/descending'
					)
				)
			)
		);
	}
});

module.exports = ListSort;

},{"../../../elemental":399,"../../../shared/Kbd":465,"../../../shared/Popout":473,"../../../shared/Popout/PopoutList":469,"react":undefined,"vkey":undefined}],453:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactSelect = require('react-select');

var _reactSelect2 = _interopRequireDefault(_reactSelect);

var _reactDom = require('react-dom');

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _FieldTypes = require('FieldTypes');

var _InvalidFieldType = require('../../../shared/InvalidFieldType');

var _InvalidFieldType2 = _interopRequireDefault(_InvalidFieldType);

var _string = require('../../../../utils/string');

var _elemental = require('../../../elemental');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UpdateForm = _react2.default.createClass({
	displayName: 'UpdateForm',
	propTypes: {
		isOpen: _react2.default.PropTypes.bool,
		itemIds: _react2.default.PropTypes.array,
		list: _react2.default.PropTypes.object,
		onCancel: _react2.default.PropTypes.func
	},
	getDefaultProps: function getDefaultProps() {
		return {
			isOpen: false
		};
	},
	getInitialState: function getInitialState() {
		return {
			fields: []
		};
	},
	componentDidMount: function componentDidMount() {
		this.doFocus();
	},
	componentDidUpdate: function componentDidUpdate() {
		this.doFocus();
	},
	doFocus: function doFocus() {
		if (this.refs.focusTarget) {
			(0, _reactDom.findDOMNode)(this.refs.focusTarget).focus();
		}
	},
	getOptions: function getOptions() {
		var fields = this.props.list.fields;

		return Object.keys(fields).map(function (key) {
			return { value: fields[key].path, label: fields[key].label };
		});
	},
	getFieldProps: function getFieldProps(field) {
		var props = (0, _objectAssign2.default)({}, field);
		props.value = this.state.fields[field.path];
		props.values = this.state.fields;
		props.onChange = this.handleChange;
		props.mode = 'create';
		props.key = field.path;
		return props;
	},
	updateOptions: function updateOptions(fields) {
		this.setState({
			fields: fields
		}, this.doFocus);
	},
	handleChange: function handleChange(value) {
		console.log('handleChange:', value);
	},
	handleClose: function handleClose() {
		this.setState({
			fields: []
		});
		this.props.onCancel();
	},
	renderFields: function renderFields() {
		var _this = this;

		var list = this.props.list;
		var fields = this.state.fields;

		var formFields = [];
		var focusRef = void 0;

		fields.forEach(function (fieldOption) {
			var field = list.fields[fieldOption.value];

			if (typeof _FieldTypes.Fields[field.type] !== 'function') {
				formFields.push(_react2.default.createElement(_InvalidFieldType2.default, { type: field.type, path: field.path, key: field.path }));
				return;
			}
			var fieldProps = _this.getFieldProps(field);
			if (!focusRef) {
				fieldProps.ref = focusRef = 'focusTarget';
			}
			formFields.push(_react2.default.createElement(_FieldTypes.Fields[field.type], fieldProps));
		});

		var fieldsUI = formFields.length ? formFields : _react2.default.createElement(_elemental.BlankState, {
			heading: 'Choose a field above to begin',
			style: { padding: '3em 2em' }
		});

		return _react2.default.createElement(
			'div',
			{ style: { borderTop: '1px dashed rgba(0,0,0,0.1)', marginTop: 20, paddingTop: 20 } },
			fieldsUI
		);
	},
	renderForm: function renderForm() {
		var _props = this.props,
		    itemIds = _props.itemIds,
		    list = _props.list;

		var itemCount = (0, _string.plural)(itemIds, '* ' + list.singular, '* ' + list.plural);
		var formAction = Keystone.adminPath + '/' + list.path;

		return _react2.default.createElement(
			_elemental.Form,
			{ layout: 'horizontal', action: formAction, noValidate: 'true' },
			_react2.default.createElement(_elemental.Modal.Header, {
				onClose: this.handleClose,
				showCloseButton: true,
				text: 'Update ' + itemCount
			}),
			_react2.default.createElement(
				_elemental.Modal.Body,
				null,
				_react2.default.createElement(_reactSelect2.default, {
					key: 'field-select',
					multi: true,
					onChange: this.updateOptions,
					options: this.getOptions(),
					ref: 'initialFocusTarget',
					value: this.state.fields
				}),
				this.renderFields()
			),
			_react2.default.createElement(
				_elemental.Modal.Footer,
				null,
				_react2.default.createElement(
					_elemental.Button,
					{ color: 'primary', submit: true },
					'Update'
				),
				_react2.default.createElement(
					_elemental.Button,
					{ color: 'cancel', variant: 'link', onClick: this.handleClose },
					'Cancel'
				)
			)
		);
	},
	render: function render() {
		return _react2.default.createElement(
			_elemental.Modal.Dialog,
			{ isOpen: this.props.isOpen, onClose: this.handleClose, backdropClosesModal: true },
			this.renderForm()
		);
	}
});

module.exports = UpdateForm;

},{"../../../../utils/string":484,"../../../elemental":399,"../../../shared/InvalidFieldType":464,"FieldTypes":undefined,"object-assign":577,"react":undefined,"react-dom":undefined,"react-select":undefined}],454:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
// General
var SELECT_LIST = exports.SELECT_LIST = 'app/List/SELECT_LIST';
var SET_CURRENT_PAGE = exports.SET_CURRENT_PAGE = 'app/List/SET_CURRENT_PAGE';
var INITIAL_LIST_LOAD = exports.INITIAL_LIST_LOAD = 'app/List/INITIAL_LIST_LOAD';
// Items
var LOAD_ITEMS = exports.LOAD_ITEMS = 'app/List/LOAD_ITEMS';
var LOADING_ITEMS = exports.LOADING_ITEMS = 'app/List/LOADING_ITEMS';
var ITEMS_LOADED = exports.ITEMS_LOADED = 'app/List/ITEMS_LOADED';
var ITEM_LOADING_ERROR = exports.ITEM_LOADING_ERROR = 'app/List/ITEM_LOADING_ERROR';
// Active
var SELECT_ACTIVE_SORT = exports.SELECT_ACTIVE_SORT = 'app/List/SELECT_ACTIVE_SORT';
var SELECT_ACTIVE_COLUMNS = exports.SELECT_ACTIVE_COLUMNS = 'app/List/SELECT_ACTIVE_COLUMNS';
var SELECT_FILTER = exports.SELECT_FILTER = 'app/List/SELECT_FILTER';

var SET_ACTIVE_SEARCH = exports.SET_ACTIVE_SEARCH = 'app/List/SET_ACTIVE_SEARCH';
var SET_ACTIVE_SORT = exports.SET_ACTIVE_SORT = 'app/List/SET_ACTIVE_SORT';
var SET_ACTIVE_COLUMNS = exports.SET_ACTIVE_COLUMNS = 'app/List/SET_ACTIVE_COLUMNS';
var SET_ACTIVE_LIST = exports.SET_ACTIVE_LIST = 'app/List/SET_ACTIVE_LIST';

// Query Params
var QUERY_HAS_CHANGED = exports.QUERY_HAS_CHANGED = 'app/List/QUERY_HAS_CHANGED';
var QUERY_HAS_NOT_CHANGED = exports.QUERY_HAS_NOT_CHANGED = 'app/List/QUERY_HAS_NOT_CHANGED';
var REPLACE_CACHED_QUERY = exports.REPLACE_CACHED_QUERY = 'app/List/REPLACE_CACHED_QUERY';
var CLEAR_CACHED_QUERY = exports.CLEAR_CACHED_QUERY = 'app/List/CLEAR_CACHED_QUERY';

// Filtering
var ADD_FILTER = exports.ADD_FILTER = 'app/List/ADD_FILTER';
var CLEAR_FILTER = exports.CLEAR_FILTER = 'app/List/CLEAR_FILTER';
var CLEAR_ALL_FILTERS = exports.CLEAR_ALL_FILTERS = 'app/List/CLEAR_ALL_FILTERS';
var SET_FILTERS = exports.SET_FILTERS = 'app/List/SET_FILTERS';
// Drag
var SET_ROW_ALERT = exports.SET_ROW_ALERT = 'app/List/SET_ROW_ALERT';
var RESET_DRAG_PAGE = exports.RESET_DRAG_PAGE = 'app/List/RESET_DRAG_PAGE';
var RESET_DRAG_ITEMS = exports.RESET_DRAG_ITEMS = 'app/List/RESET_DRAG_ITEMS';
var SET_DRAG_ITEM = exports.SET_DRAG_ITEM = 'app/List/SET_DRAG_ITEM';
var SET_DRAG_INDEX = exports.SET_DRAG_INDEX = 'app/List/SET_DRAG_INDEX';
var DRAG_MOVE_ITEM = exports.DRAG_MOVE_ITEM = 'app/List/DRAG_MOVE_ITEM';

},{}],455:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * The list view is a paginated table of all items in the list. It can show a
                                                                                                                                                                                                                                                                   * variety of information about the individual items in columns.
                                                                                                                                                                                                                                                                   */

// import { findDOMNode } from 'react-dom'; // TODO re-implement focus when ready


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _numeral = require('numeral');

var _numeral2 = _interopRequireDefault(_numeral);

var _reactRedux = require('react-redux');

var _elemental = require('../../elemental');

var _ListFilters = require('./components/Filtering/ListFilters');

var _ListFilters2 = _interopRequireDefault(_ListFilters);

var _ListHeaderTitle = require('./components/ListHeaderTitle');

var _ListHeaderTitle2 = _interopRequireDefault(_ListHeaderTitle);

var _ListHeaderToolbar = require('./components/ListHeaderToolbar');

var _ListHeaderToolbar2 = _interopRequireDefault(_ListHeaderToolbar);

var _ListManagement = require('./components/ListManagement');

var _ListManagement2 = _interopRequireDefault(_ListManagement);

var _ConfirmationDialog = require('../../shared/ConfirmationDialog');

var _ConfirmationDialog2 = _interopRequireDefault(_ConfirmationDialog);

var _AlertMessages = require('../../shared/AlertMessages');

var _AlertMessages2 = _interopRequireDefault(_AlertMessages);

var _CreateForm = require('../../shared/CreateForm');

var _CreateForm2 = _interopRequireDefault(_CreateForm);

var _FlashMessages = require('../../shared/FlashMessages');

var _FlashMessages2 = _interopRequireDefault(_FlashMessages);

var _ItemsTable = require('./components/ItemsTable/ItemsTable');

var _ItemsTable2 = _interopRequireDefault(_ItemsTable);

var _UpdateForm = require('./components/UpdateForm');

var _UpdateForm2 = _interopRequireDefault(_UpdateForm);

var _string = require('../../../utils/string');

var _lists = require('../../../utils/lists');

var _queryParams = require('../../../utils/queryParams');

var _IframeContent = require('../../../App/shared/IframeContent');

var _IframeContent2 = _interopRequireDefault(_IframeContent);

var _actions = require('./actions');

var _actions2 = require('../Item/actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ESC_KEY_CODE = 27;

var ListView = _react2.default.createClass({
	displayName: 'ListView',

	contextTypes: {
		router: _react2.default.PropTypes.object.isRequired
	},
	getInitialState: function getInitialState() {
		return {
			confirmationDialog: {
				isOpen: false
			},
			checkedItems: {},
			constrainTableWidth: true,
			manageMode: false,
			showCreateForm: false,
			showUpdateForm: false,
			alerts: {},
			// Custom Action View
			showIframe: false,
			action_url: null,
			id: null,
			customUpdateValue: null
		};
	},
	componentWillMount: function componentWillMount() {
		// When we directly navigate to a list without coming from another client
		// side routed page before, we need to initialize the list and parse
		// possibly specified query parameters

		this.props.dispatch((0, _actions.selectList)(this.props.params.listId));

		var isNoCreate = this.props.lists.data[this.props.params.listId].nocreate;
		var shouldOpenCreate = this.props.location.search === '?create';

		this.setState({
			showCreateForm: shouldOpenCreate && !isNoCreate || Keystone.createFormErrors
		});
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		// Review and make it more generic to clear custom action view on link change
		if (this.props && this.props.lists.currentList && this.props.lists.currentList.id !== 'list_items') {
			this.setState({ showIframe: false, action_url: null, id: null, showCreateForm: false });
		}

		// We've opened a new list from the client side routing, so initialize
		// again with the new list id
		this.setState({
			alerts: {}
		});
		var isReady = this.props.lists.ready && nextProps.lists.ready;
		if (isReady && (0, _queryParams.checkForQueryChange)(nextProps, this.props)) {
			this.props.dispatch((0, _actions.selectList)(nextProps.params.listId));
		}
	},
	componentWillUnmount: function componentWillUnmount() {
		this.setState({ showIframe: false, action_url: null, id: null }); // Custom Action View
		this.props.dispatch((0, _actions.clearCachedQuery)());
	},


	// ==============================
	// HEADER
	// ==============================
	// Called when a new item is created
	onCreate: function onCreate(item) {
		// Hide the create form
		this.toggleCreateModal(false);
		// Redirect to newly created item path
		var list = this.props.currentList;
		this.context.router.push(Keystone.adminPath + '/' + list.path + '/' + item.id);
	},
	createAutocreate: function createAutocreate() {
		var _this = this;

		var list = this.props.currentList;
		list.createItem(null, function (err, data) {
			if (err) {
				// TODO Proper error handling
				alert('Something went wrong, please try again!');
				console.log(err);
			} else {
				_this.context.router.push(Keystone.adminPath + '/' + list.path + '/' + data.id);
			}
		});
	},
	updateSearch: function updateSearch(e) {
		this.props.dispatch((0, _actions.setActiveSearch)(e.target.value));
	},
	handleSearchClear: function handleSearchClear() {
		this.props.dispatch((0, _actions.setActiveSearch)(''));

		// TODO re-implement focus when ready
		// findDOMNode(this.refs.listSearchInput).focus();
	},
	handleSearchKey: function handleSearchKey(e) {
		// clear on esc
		if (e.which === ESC_KEY_CODE) {
			this.handleSearchClear();
		}
	},
	handlePageSelect: function handlePageSelect(i) {
		// If the current page index is the same as the index we are intending to pass to redux, bail out.
		if (i === this.props.lists.page.index) return;
		return this.props.dispatch((0, _actions.setCurrentPage)(i));
	},
	toggleManageMode: function toggleManageMode() {
		var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.state.manageMode;

		this.setState({
			manageMode: filter,
			checkedItems: {}
		});
	},
	toggleUpdateModal: function toggleUpdateModal() {
		var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.state.showUpdateForm;

		this.setState({
			showUpdateForm: filter
		});
	},
	handlePromptInputChange: function handlePromptInputChange(event) {
		this.setState({
			customUpdateValue: event.target.value
		});
	},
	massUpdate: function massUpdate() {
		// TODO: Implement update multi-item
		console.log('Update ALL the things!');
	},
	massDelete: function massDelete() {
		var _this2 = this;

		var checkedItems = this.state.checkedItems;

		var list = this.props.currentList;
		var itemCount = (0, _string.plural)(checkedItems, '* ' + list.singular.toLowerCase(), '* ' + list.plural.toLowerCase());
		var itemIds = Object.keys(checkedItems);

		var message = 'Are you sure you want to delete ' + itemCount + '?';

		if (list.deletePrompt) {
			message = list.deletePrompt;
		}

		this.setState({
			confirmationDialog: {
				isOpen: true,
				label: 'Delete',
				body: _react2.default.createElement(
					'div',
					null,
					message,
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'This cannot be undone.'
				),
				onConfirmation: function onConfirmation() {
					_this2.props.dispatch((0, _actions.deleteItems)(itemIds));
					_this2.toggleManageMode();
					_this2.removeConfirmationDialog();
				}
			}
		});
	},
	isMultipleAllowed: function isMultipleAllowed(itemIds, multiple) {
		if (!multiple && itemIds.length > 1) {
			this.setState({
				alerts: {
					error: {
						error: 'Please select only one Record to complete this task.'
					}
				}
			});
			return false;
		}
		return true;
	},
	customAction: function customAction(customActionData) {
		var _this3 = this;

		var action = customActionData.action,
		    type = customActionData.type,
		    multiple = customActionData.multiple,
		    data = customActionData.data,
		    status = customActionData.status;
		var checkedItems = this.state.checkedItems;

		var itemIds = Object.keys(checkedItems);
		if (type === 'download') {
			if (this.isMultipleAllowed(itemIds, multiple)) {
				this.props.dispatch((0, _actions.customActionDownload)(itemIds, action));
				this.toggleManageMode();
				this.setState({
					alerts: {}
				});
			}
		} else if (type === 'view') {
			// Custom Action View

			if (this.isMultipleAllowed(itemIds, multiple)) {
				var iframeURL = Keystone.externalHost + '/' + action + '/' + itemIds;
				this.setState({
					showIframe: true,
					action_url: action,
					id: itemIds
				});
				this.toggleManageMode();
				this.setState({
					alerts: {}
				});
			}
		} else if (type === 'prompt') {
			if (this.isMultipleAllowed(itemIds, multiple)) {
				this.setState({
					confirmationDialog: {
						isOpen: true,
						label: 'Save',
						body: _react2.default.createElement(
							'div',
							null,
							_react2.default.createElement(
								'lable',
								{ style: { color: '#7F7F7F' } },
								'Enter a Value: '
							),
							_react2.default.createElement('input', { style: { padding: '0.75em', height: '2.0em', borderColor: '#ccc', borderWidth: 1, borderRadius: '0.3rem', borderStyle: 'solid' }, type: 'text', onChange: this.handlePromptInputChange })
						),
						onConfirmation: function onConfirmation() {
							_this3.props.dispatch((0, _actions.customAction)(itemIds, action, _this3.state.customUpdateValue));
							_this3.toggleManageMode();
							_this3.removeConfirmationDialog();
						}
					}
				});
			}
		} else {
			// simple event trigger
			if (this.isMultipleAllowed(itemIds, multiple)) {
				this.props.dispatch((0, _actions.customAction)(itemIds, action, status));
				this.toggleManageMode();
			}
		}
	},
	handleManagementSelect: function handleManagementSelect(selection) {
		if (selection === 'all') this.checkAllItems();
		if (selection === 'none') this.uncheckAllTableItems();
		if (selection === 'visible') this.checkAllTableItems();
		return false;
	},
	renderConfirmationDialog: function renderConfirmationDialog() {
		var props = this.state.confirmationDialog;
		return _react2.default.createElement(
			_ConfirmationDialog2.default,
			{
				confirmationLabel: props.label,
				isOpen: props.isOpen,
				onCancel: this.removeConfirmationDialog,
				onConfirmation: props.onConfirmation
			},
			props.body
		);
	},
	renderManagement: function renderManagement() {
		var _this4 = this;

		var _state = this.state,
		    checkedItems = _state.checkedItems,
		    manageMode = _state.manageMode,
		    selectAllItemsLoading = _state.selectAllItemsLoading;
		var currentList = this.props.currentList;


		return _react2.default.createElement(_ListManagement2.default, {
			checkedItemCount: Object.keys(checkedItems).length,
			handleDelete: this.massDelete,
			handleSelect: this.handleManagementSelect,
			handleToggle: function handleToggle() {
				return _this4.toggleManageMode(!manageMode);
			},
			isOpen: manageMode,
			itemCount: this.props.items.count,
			itemsPerPage: this.props.lists.page.size,
			nodelete: currentList.nodelete,
			noedit: currentList.noedit,
			selectAllItemsLoading: selectAllItemsLoading,
			currentList: currentList,
			handleCustomAction: this.customAction,
			handleCustomActionDownload: this.customActionDownload
		});
	},
	renderPagination: function renderPagination() {
		var items = this.props.items;
		if (this.state.manageMode || !items.count) return;

		var list = this.props.currentList;
		var currentPage = this.props.lists.page.index;
		var pageSize = this.props.lists.page.size;

		return _react2.default.createElement(_elemental.Pagination, {
			currentPage: currentPage,
			onPageSelect: this.handlePageSelect,
			pageSize: pageSize,
			plural: list.plural,
			singular: list.singular,
			style: { marginBottom: 0 },
			total: items.count,
			limit: 10
		});
	},
	renderHeader: function renderHeader() {
		var items = this.props.items;
		var _props$currentList = this.props.currentList,
		    autocreate = _props$currentList.autocreate,
		    nocreate = _props$currentList.nocreate,
		    plural = _props$currentList.plural,
		    singular = _props$currentList.singular;


		return _react2.default.createElement(
			_elemental.Container,
			{ style: { paddingTop: '2em' } },
			_react2.default.createElement(_ListHeaderTitle2.default, {
				activeSort: this.props.active.sort,
				availableColumns: this.props.currentList.columns,
				handleSortSelect: this.handleSortSelect,
				title: '\n\t\t\t\t\t\t' + (0, _numeral2.default)(items.count).format() + '\n\t\t\t\t\t\t' + (0, _string.plural)(items.count, ' ' + singular, ' ' + plural) + '\n\t\t\t\t\t'
			}),
			_react2.default.createElement(_ListHeaderToolbar2.default
			// common
			, { dispatch: this.props.dispatch,
				list: _lists.listsByPath[this.props.params.listId]

				// expand
				, expandIsActive: !this.state.constrainTableWidth,
				expandOnClick: this.toggleTableWidth

				// create
				, createIsAvailable: !nocreate,
				createListName: singular,
				createOnClick: autocreate ? this.createAutocreate : this.openCreateModal

				// search
				, searchHandleChange: this.updateSearch,
				searchHandleClear: this.handleSearchClear,
				searchHandleKeyup: this.handleSearchKey,
				searchValue: this.props.active.search

				// filters
				, filtersActive: this.props.active.filters,
				filtersAvailable: this.props.currentList.columns.filter(function (col) {
					return col.field && col.field.hasFilterMethod || col.type === 'heading';
				})

				// columns
				, columnsActive: this.props.active.columns,
				columnsAvailable: this.props.currentList.columns

				// Custom Create Button
				, customCreateButton: this.customCreateButton
			}),
			_react2.default.createElement(_ListFilters2.default, {
				dispatch: this.props.dispatch,
				filters: this.props.active.filters
			})
		);
	},


	// ==============================
	// TABLE
	// ==============================

	checkTableItem: function checkTableItem(item, e) {
		e.preventDefault();
		var newCheckedItems = _extends({}, this.state.checkedItems);
		var itemId = item.id;
		if (this.state.checkedItems[itemId]) {
			delete newCheckedItems[itemId];
		} else {
			newCheckedItems[itemId] = true;
		}
		this.setState({
			checkedItems: newCheckedItems
		});
	},
	checkAllTableItems: function checkAllTableItems() {
		var checkedItems = {};
		this.props.items.results.forEach(function (item) {
			checkedItems[item.id] = true;
		});
		this.setState({
			checkedItems: checkedItems
		});
	},
	checkAllItems: function checkAllItems() {
		var checkedItems = _extends({}, this.state.checkedItems);
		// Just in case this API call takes a long time, we'll update the select all button with
		// a spinner.
		this.setState({ selectAllItemsLoading: true });
		var self = this;
		this.props.currentList.loadItems({
			expandRelationshipFilters: false,
			filters: {
				fetch_all_data: true,
				item_count: this.props.currentList && this.props.currentList.items && this.props.currentList.items.count
			}
		}, function (err, data) {
			data.results.forEach(function (item) {
				checkedItems[item.id] = true;
			});
			self.setState({
				checkedItems: checkedItems,
				selectAllItemsLoading: false
			});
		});
	},
	uncheckAllTableItems: function uncheckAllTableItems() {
		this.setState({
			checkedItems: {}
		});
	},
	deleteTableItem: function deleteTableItem(item, e) {
		var _this5 = this;

		if (e.altKey) {
			this.props.dispatch((0, _actions2.deleteItem)(item.id));
			return;
		}

		e.preventDefault();

		var list = this.props.currentList;

		var message = 'Are you sure you want to delete <strong>' + item.name + '</strong>?';

		if (list.deletePrompt) {
			message = list.deletePrompt;
		}

		this.setState({
			confirmationDialog: {
				isOpen: true,
				label: 'Delete',
				body: _react2.default.createElement(
					'div',
					null,
					_react2.default.createElement('span', { dangerouslySetInnerHTML: { __html: message } }),
					_react2.default.createElement('br', null),
					_react2.default.createElement('br', null),
					'This cannot be undone.'
				),
				onConfirmation: function onConfirmation() {
					_this5.props.dispatch((0, _actions2.deleteItem)(item.id));
					_this5.removeConfirmationDialog();
				}
			}
		});
	},
	removeConfirmationDialog: function removeConfirmationDialog() {
		this.setState({
			confirmationDialog: {
				isOpen: false
			}
		});
	},
	toggleTableWidth: function toggleTableWidth() {
		this.setState({
			constrainTableWidth: !this.state.constrainTableWidth
		});
	},


	// ==============================
	// COMMON
	// ==============================

	handleSortSelect: function handleSortSelect(path, inverted) {
		if (inverted) path = '-' + path;
		this.props.dispatch((0, _actions.setActiveSort)(path));
	},
	toggleCreateModal: function toggleCreateModal(visible) {
		this.setState({
			showCreateForm: visible,
			showIframe: visible // Custom Action View
		});
	},
	openCreateModal: function openCreateModal() {
		this.toggleCreateModal(true);
	},
	closeCreateModal: function closeCreateModal() {
		this.toggleCreateModal(false);
	},
	showBlankState: function showBlankState() {
		return !this.props.loading && !this.props.items.results.length && !this.props.active.search && !this.props.active.filters.length;
	},
	renderBlankState: function renderBlankState() {
		var currentList = this.props.currentList;


		if (!this.showBlankState()) return null;

		// create and nav directly to the item view, or open the create modal
		var onClick = currentList.autocreate ? this.createAutocreate : this.openCreateModal;

		// display the button if create allowed
		var button = !currentList.nocreate ? _react2.default.createElement(
			_elemental.GlyphButton,
			{ color: 'success', glyph: 'plus', position: 'left', onClick: onClick, 'data-e2e-list-create-button': 'no-results' },
			'Create ',
			currentList.singular
		) : null;

		return _react2.default.createElement(
			_elemental.Container,
			null,
			this.props.error ? _react2.default.createElement(_FlashMessages2.default, {
				messages: {
					error: [{
						title: "There is a problem with the network, we're trying to reconnect..."
					}]
				}
			}) : null,
			_react2.default.createElement(
				_elemental.BlankState,
				{ heading: 'No ' + this.props.currentList.plural.toLowerCase() + ' found...', style: { marginTop: 40 } },
				button
			)
		);
	},
	renderActiveState: function renderActiveState() {
		if (this.showBlankState()) return null;

		var containerStyle = {
			transition: 'max-width 160ms ease-out',
			msTransition: 'max-width 160ms ease-out',
			MozTransition: 'max-width 160ms ease-out',
			WebkitTransition: 'max-width 160ms ease-out'
		};
		if (!this.state.constrainTableWidth) {
			containerStyle.maxWidth = '100%';
		}
		return _react2.default.createElement(
			'div',
			null,
			this.renderHeader(),
			_react2.default.createElement(
				_elemental.Container,
				null,
				_react2.default.createElement(
					'div',
					{ style: { height: 35, marginBottom: '1em', marginTop: '1em' } },
					this.renderManagement(),
					this.renderPagination(),
					_react2.default.createElement('span', { style: { clear: 'both', display: 'table' } })
				)
			),
			_react2.default.createElement(
				_elemental.Container,
				{ style: containerStyle },
				this.props.error ? _react2.default.createElement(_FlashMessages2.default, {
					messages: {
						error: [{
							title: "There is a problem with the network, we're trying to reconnect.."
						}]
					}
				}) : null,
				this.props.loading ? _react2.default.createElement(
					_elemental.Center,
					{ height: '50vh' },
					_react2.default.createElement(_elemental.Spinner, null)
				) : _react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(_ItemsTable2.default, {
						activeSort: this.props.active.sort,
						checkedItems: this.state.checkedItems,
						checkTableItem: this.checkTableItem,
						columns: this.props.active.columns,
						deleteTableItem: this.deleteTableItem,
						handleSortSelect: this.handleSortSelect,
						items: this.props.items,
						list: this.props.currentList,
						manageMode: this.state.manageMode,
						rowAlert: this.props.rowAlert,
						currentPage: this.props.lists.page.index,
						pageSize: this.props.lists.page.size,
						drag: this.props.lists.drag,
						dispatch: this.props.dispatch
					}),
					this.renderNoSearchResults()
				)
			)
		);
	},
	renderNoSearchResults: function renderNoSearchResults() {
		if (this.props.items.results.length) return null;
		var matching = this.props.active.search;
		if (this.props.active.filters.length) {
			matching += (matching ? ' and ' : '') + (0, _string.plural)(this.props.active.filters.length, '* filter', '* filters');
		}
		matching = matching ? ' found matching ' + matching : '.';
		return _react2.default.createElement(
			_elemental.BlankState,
			{ style: { marginTop: 20, marginBottom: 20 } },
			_react2.default.createElement(_elemental.Glyph, {
				name: 'search',
				size: 'medium',
				style: { marginBottom: 20 }
			}),
			_react2.default.createElement(
				'h2',
				{ style: { color: 'inherit' } },
				'No ',
				this.props.currentList.plural.toLowerCase(),
				matching
			)
		);
	},
	customCreateButton: function customCreateButton(action_type) {
		var action = this.props.lists.currentList && this.props.lists.currentList.link && this.props.lists.currentList.link.create;
		action = action.length && action[0] === '/' ? action.slice(1) : action;
		this.setState({
			showIframe: true,
			action_url: action,
			id: action_type
		});
	},
	renderIframeView: function renderIframeView() {
		// Custom Action View
		var _state2 = this.state,
		    action_url = _state2.action_url,
		    id = _state2.id;

		var iframeURL = Keystone.externalHost + '/' + action_url + '/' + id;
		return _react2.default.createElement(_IframeContent2.default, { src: iframeURL, show: this.state.showIframe, onCancel: this.closeCreateModal, onSave: this.onCreate, className: "full-screen" });
	},
	render: function render() {
		var _this6 = this;

		if (!this.props.ready) {
			return _react2.default.createElement(
				_elemental.Center,
				{ height: '50vh', 'data-screen-id': 'list' },
				_react2.default.createElement(_elemental.Spinner, null)
			);
		}
		return _react2.default.createElement(
			'div',
			{ 'data-screen-id': 'list' },
			this.renderIframeView(),
			this.state.alerts ? _react2.default.createElement(_AlertMessages2.default, { alerts: this.state.alerts }) : null,
			this.renderBlankState(),
			this.renderActiveState(),
			_react2.default.createElement(_CreateForm2.default, {
				err: Keystone.createFormErrors,
				isOpen: this.state.showCreateForm,
				list: this.props.currentList,
				onCancel: this.closeCreateModal,
				onCreate: this.onCreate
			}),
			_react2.default.createElement(_UpdateForm2.default, {
				isOpen: this.state.showUpdateForm,
				itemIds: Object.keys(this.state.checkedItems),
				list: this.props.currentList,
				onCancel: function onCancel() {
					return _this6.toggleUpdateModal(false);
				}
			}),
			this.renderConfirmationDialog()
		);
	}
});

module.exports = (0, _reactRedux.connect)(function (state) {
	return {
		lists: state.lists,
		loading: state.lists.loading,
		error: state.lists.error,
		currentList: state.lists.currentList,
		items: state.lists.items,
		page: state.lists.page,
		ready: state.lists.ready,
		rowAlert: state.lists.rowAlert,
		active: state.active
	};
})(ListView);

},{"../../../App/shared/IframeContent":463,"../../../utils/lists":482,"../../../utils/queryParams":483,"../../../utils/string":484,"../../elemental":399,"../../shared/AlertMessages":458,"../../shared/ConfirmationDialog":459,"../../shared/CreateForm":460,"../../shared/FlashMessages":462,"../Item/actions":413,"./actions":432,"./components/Filtering/ListFilters":435,"./components/ItemsTable/ItemsTable":439,"./components/ListHeaderTitle":449,"./components/ListHeaderToolbar":450,"./components/ListManagement":451,"./components/UpdateForm":453,"numeral":undefined,"react":undefined,"react-redux":undefined}],456:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialState = {
	columns: [],
	filters: [],
	search: '',
	sort: {
		input: '',
		isDefaultSort: false,
		paths: [],
		rawInput: ''
	},
	cachedQuery: {}
};

/**
 * Manage the active state
 */
function active() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	var action = arguments[1];

	switch (action.type) {
		case _constants.SET_ACTIVE_LIST:
			return (0, _objectAssign2.default)({}, state, {
				id: action.id,
				columns: action.list.expandColumns(action.list.defaultColumns),
				filters: [],
				search: '',
				sort: action.list.expandSort(action.list.defaultSort)
			});
		case _constants.SET_ACTIVE_SEARCH:
			return (0, _objectAssign2.default)({}, state, {
				search: action.searchString
			});
		case _constants.SET_ACTIVE_SORT:
			return (0, _objectAssign2.default)({}, state, {
				sort: action.sort
			});
		case _constants.SET_ACTIVE_COLUMNS:
			return (0, _objectAssign2.default)({}, state, {
				columns: action.columns
			});
		case _constants.ADD_FILTER:
			return (0, _objectAssign2.default)({}, state, {
				// Override existing filter with field path,
				// otherwise add to filters array
				filters: _lodash2.default.unionWith([action.filter], state.filters, function (stateFilter, actionFilter) {
					return stateFilter.field.path === actionFilter.field.path;
				})
			});
		case _constants.SET_FILTERS:
			return (0, _objectAssign2.default)({}, state, {
				filters: action.filters
			});
		case _constants.CLEAR_FILTER:
			var newFilters = _lodash2.default.filter(state.filters, function (filter) {
				return filter.field.path !== action.path;
			});
			return (0, _objectAssign2.default)({}, state, {
				filters: newFilters
			});
		case _constants.CLEAR_ALL_FILTERS:
			return (0, _objectAssign2.default)({}, state, {
				filters: []
			});
		case _constants.QUERY_HAS_CHANGED:
			var _action$parsedQuery = action.parsedQuery,
			    search = _action$parsedQuery.search,
			    sort = _action$parsedQuery.sort,
			    filters = _action$parsedQuery.filters,
			    columns = _action$parsedQuery.columns;


			return (0, _objectAssign2.default)({}, state, {
				search: search,
				sort: sort || initialState.sort,
				filters: filters || initialState.filters,
				columns: columns || initialState.columns
			});
		case _constants.REPLACE_CACHED_QUERY:
			return (0, _objectAssign2.default)({}, state, {
				cachedQuery: action.cachedQuery
			});
		case _constants.CLEAR_CACHED_QUERY:
			return (0, _objectAssign2.default)({}, state, {
				cachedQuery: {}
			});
		default:
			return state;
	}
}

exports.default = active;

},{"../constants":454,"lodash":undefined,"object-assign":577}],457:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _List = require('../../../../utils/List');

var _List2 = _interopRequireDefault(_List);

var _constants = require('../constants');

var _constants2 = require('../../Item/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = {
	loadingRef: null,
	loadCounter: 0,
	currentList: null,
	loading: false,
	ready: false,
	error: null,
	data: {},
	items: {
		results: [],
		count: null
	},
	page: {
		size: null,
		index: undefined
	},
	rowAlert: {
		success: false,
		fail: false
	},
	drag: {
		page: 1,
		item: false,
		clonedItems: false,
		index: false
	}
};

// Rekey the lists in the state with their paths for easier matching with the
// URL parameters
var initialLists = Keystone.lists;
for (var name in initialLists) {
	if ({}.hasOwnProperty.call(initialLists, name)) {
		var currentList = initialLists[name];
		initialState.data[currentList.path] = new _List2.default(currentList);
		initialState.data[currentList.path].items = {
			results: [],
			count: null
		};
	}
}

/**
 * Manage all lists
 */
function lists() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	var action = arguments[1];

	switch (action.type) {
		case _constants.SELECT_LIST:
			var list = state.data[action.id];
			list.id = action.id;
			var items = {
				results: [],
				count: null
			};
			// If we have cached items, instead of resetting state.items put the
			// cached items in the state
			if (list.items.count !== null) {
				items = list.items;
			}
			return (0, _objectAssign2.default)({}, state, {
				currentList: list,
				ready: false,
				items: items,
				page: _extends({}, state.page, {
					index: 1,
					size: list.perPage
				})
			});
		case _constants.LOAD_ITEMS:
			var loading = true;
			var ready = state.ready;
			// If we have cached items ready, don't show a loading indicator
			// while we fetch the new items in the background
			if (state.items.count !== null && loading === false) {
				loading = false;
				ready = true;
			}
			return (0, _objectAssign2.default)({}, state, {
				loading: loading,
				ready: ready,
				loadCounter: action.loadCounter
			});
		case _constants.ITEMS_LOADED:
			// Cache the items in state.data so we can show the already existing
			// items on the next round trip while fetching the new items in the
			// background
			var cachedList = state.data[state.currentList.id];
			cachedList.items = action.items;
			return (0, _objectAssign2.default)({}, state, {
				loading: false,
				ready: true,
				error: null,
				items: action.items,
				data: _extends({}, state.data, _defineProperty({}, state.currentList.id, cachedList)),
				loadCounter: 0
			});
		case _constants.ITEM_LOADING_ERROR:
			return (0, _objectAssign2.default)({}, state, {
				loading: true,
				ready: true,
				error: action.err,
				loadCounter: 0
			});
		case _constants2.DELETE_ITEM:
			var newItems = {
				results: state.items.results.filter(function (el) {
					return el.id !== action.id;
				}),
				count: state.items.count - 1
			};
			var newCachedList = state.data[state.currentList.id];
			newCachedList.items = newItems;
			return (0, _objectAssign2.default)({}, state, {
				items: newItems,
				data: _extends({}, state.data, _defineProperty({}, state.currentList.id, newCachedList))
			});
		case _constants.SET_CURRENT_PAGE:
			console.log(action.index);
			return (0, _objectAssign2.default)({}, state, {
				loading: true,
				page: _extends({}, state.page, {
					index: action.index
				})
			});
		case _constants.SET_ROW_ALERT:
			if (action.data.reset === true) {
				return (0, _objectAssign2.default)({}, state, {
					rowAlert: {
						success: false,
						fail: false
					}
				});
			}
			return (0, _objectAssign2.default)({}, state, {
				rowAlert: _extends({}, state.rowAlert, action.data)
			});
		case _constants.RESET_DRAG_PAGE:
			return (0, _objectAssign2.default)({}, state, {
				drag: _extends({}, state.drag, {
					page: state.page.index
				})
			});
		case _constants.RESET_DRAG_ITEMS:
			return (0, _objectAssign2.default)({}, state, {
				drag: _extends({}, state.drag, {
					clonedItems: state.items
				})
			});
		case _constants.SET_DRAG_ITEM:
			return (0, _objectAssign2.default)({}, state, {
				drag: _extends({}, state.drag, {
					item: action.item
				})
			});
		case _constants.SET_DRAG_INDEX:
			return (0, _objectAssign2.default)({}, state, {
				drag: _extends({}, state.drag, {
					index: action.index
				})
			});
		case _constants.QUERY_HAS_CHANGED:
			var index = parseInt(action.parsedQuery.currentPage) || 1;
			return (0, _objectAssign2.default)({}, state, {
				loading: true,
				page: _extends({}, state.page, {
					index: index
				})
			});
		case _constants.DRAG_MOVE_ITEM:
			// TODO: option to use manageMode for sortOrder
			var currentItems = state.items.results;
			var item = currentItems[action.prevIndex];
			// Remove item at prevIndex from array and save that array in
			// itemsWithoutItem
			var itemsWithoutItem = currentItems.slice(0, action.prevIndex).concat(currentItems.slice(action.prevIndex + 1, currentItems.length));
			// Add item back in at new index
			itemsWithoutItem.splice(action.newIndex, 0, item);
			return (0, _objectAssign2.default)({}, state, {
				items: _extends({}, state.items, {
					results: itemsWithoutItem
				})
			});
		default:
			return state;
	}
}

exports.default = lists;

},{"../../../../utils/List":478,"../../Item/constants":427,"../constants":454,"object-assign":577}],458:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../elemental');

var _string = require('../../utils/string');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This renders alerts for API success and error responses.
 *   Error format: {
 *     error: 'validation errors' // The unique error type identifier
 *     detail: { ... } // Optional details specific to that error type
 *   }
 *   Success format: {
 *     success: 'item updated', // The unique success type identifier
 *     details: { ... } // Optional details specific to that success type
 *   }
 *   Eventually success and error responses should be handled individually
 *   based on their type. For example: validation errors should be displayed next
 *   to each invalid field and signin errors should promt the user to sign in.
 */
var AlertMessages = _react2.default.createClass({
	displayName: 'AlertMessages',
	propTypes: {
		alerts: _react2.default.PropTypes.shape({
			error: _react2.default.PropTypes.Object,
			success: _react2.default.PropTypes.Object
		})
	},
	getDefaultProps: function getDefaultProps() {
		return {
			alerts: {}
		};
	},
	renderValidationErrors: function renderValidationErrors() {
		var errors = this.props.alerts.error.detail;
		if (errors.name === 'ValidationError') {
			errors = errors.errors;
		}
		var errorCount = Object.keys(errors).length;
		var alertContent = void 0;
		var messages = Object.keys(errors).map(function (path) {
			if (errorCount > 1) {
				return _react2.default.createElement(
					'li',
					{ key: path },
					(0, _string.upcase)(errors[path].error || errors[path].message)
				);
			} else {
				return _react2.default.createElement(
					'div',
					{ key: path },
					(0, _string.upcase)(errors[path].error || errors[path].message)
				);
			}
		});

		if (errorCount > 1) {
			alertContent = _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(
					'h4',
					null,
					'There were ',
					errorCount,
					' errors creating the new item:'
				),
				_react2.default.createElement(
					'ul',
					null,
					messages
				)
			);
		} else {
			alertContent = messages;
		}

		return _react2.default.createElement(
			_elemental.Alert,
			{ color: 'danger' },
			alertContent
		);
	},
	render: function render() {
		var _props$alerts = this.props.alerts,
		    error = _props$alerts.error,
		    success = _props$alerts.success;

		if (error) {
			// Render error alerts
			switch (error.error) {
				case 'validation errors':
					return this.renderValidationErrors();
				case 'error':
					if (error.detail.name === 'ValidationError') {
						return this.renderValidationErrors();
					} else {
						return _react2.default.createElement(
							_elemental.Alert,
							{ color: 'danger' },
							(0, _string.upcase)(error.error)
						);
					}
				default:
					return _react2.default.createElement(
						_elemental.Alert,
						{ color: 'danger' },
						(0, _string.upcase)(error.error)
					);
			}
		}

		if (success) {
			// Render success alerts
			return _react2.default.createElement(
				_elemental.Alert,
				{ color: 'success' },
				(0, _string.upcase)(success.success)
			);
		}

		return null; // No alerts, render nothing
	}
});

module.exports = AlertMessages;

},{"../../utils/string":484,"../elemental":399,"react":undefined}],459:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../elemental');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /**
                                                                                                                                                                                                                              * Renders a confirmation dialog modal
                                                                                                                                                                                                                              */

function ConfirmationDialog(_ref) {
	var cancelLabel = _ref.cancelLabel,
	    children = _ref.children,
	    confirmationLabel = _ref.confirmationLabel,
	    confirmationType = _ref.confirmationType,
	    html = _ref.html,
	    isOpen = _ref.isOpen,
	    onCancel = _ref.onCancel,
	    onConfirmation = _ref.onConfirmation,
	    props = _objectWithoutProperties(_ref, ['cancelLabel', 'children', 'confirmationLabel', 'confirmationType', 'html', 'isOpen', 'onCancel', 'onConfirmation']);

	// Property Violation
	if (children && html) {
		console.error('Warning: FormNote cannot render `children` and `html`. You must provide one or the other.');
	}

	return _react2.default.createElement(
		_elemental.Modal.Dialog,
		{
			backdropClosesModal: true,
			isOpen: isOpen,
			onClose: onCancel,
			width: 400
		},
		html ? _react2.default.createElement(_elemental.Modal.Body, _extends({}, props, { dangerouslySetInnerHTML: { __html: html } })) : _react2.default.createElement(
			_elemental.Modal.Body,
			props,
			children
		),
		_react2.default.createElement(
			_elemental.Modal.Footer,
			null,
			_react2.default.createElement(
				_elemental.Button,
				{ autoFocus: true, size: 'small', 'data-button-type': 'confirm', color: confirmationType, onClick: onConfirmation },
				confirmationLabel
			),
			_react2.default.createElement(
				_elemental.Button,
				{ size: 'small', 'data-button-type': 'cancel', variant: 'link', color: 'cancel', onClick: onCancel },
				cancelLabel
			)
		)
	);
};
ConfirmationDialog.propTypes = {
	body: _react.PropTypes.string,
	cancelLabel: _react.PropTypes.string,
	confirmationLabel: _react.PropTypes.string,
	confirmationType: _react.PropTypes.oneOf(['danger', 'primary', 'success', 'warning']),
	onCancel: _react.PropTypes.func,
	onConfirmation: _react.PropTypes.func
};
ConfirmationDialog.defaultProps = {
	cancelLabel: 'Cancel',
	confirmationLabel: 'Okay',
	confirmationType: 'danger',
	isOpen: false
};

exports.default = ConfirmationDialog;

},{"../elemental":399,"react":undefined}],460:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _vkey = require('vkey');

var _vkey2 = _interopRequireDefault(_vkey);

var _AlertMessages = require('./AlertMessages');

var _AlertMessages2 = _interopRequireDefault(_AlertMessages);

var _FieldTypes = require('FieldTypes');

var _InvalidFieldType = require('./InvalidFieldType');

var _InvalidFieldType2 = _interopRequireDefault(_InvalidFieldType);

var _elemental = require('../elemental');

var _IframeContent = require('./IframeContent');

var _IframeContent2 = _interopRequireDefault(_IframeContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The form that's visible when "Create <ItemName>" is clicked on either the
 * List screen or the Item screen
 */

var CreateForm = _react2.default.createClass({
	displayName: 'CreateForm',
	propTypes: {
		err: _react2.default.PropTypes.object,
		isOpen: _react2.default.PropTypes.bool,
		list: _react2.default.PropTypes.object,
		onCancel: _react2.default.PropTypes.func,
		onCreate: _react2.default.PropTypes.func
	},
	getDefaultProps: function getDefaultProps() {
		return {
			err: null,
			isOpen: false
		};
	},
	getInitialState: function getInitialState() {
		var _this = this;

		// Set the field values to their default values when first rendering the
		// form. (If they have a default value, that is)
		var values = {};
		Object.keys(this.props.list.fields).forEach(function (key) {
			var field = _this.props.list.fields[key];
			var FieldComponent = _FieldTypes.Fields[field.type];
			values[field.path] = FieldComponent.getDefaultValue(field);
		});
		return {
			values: values,
			alerts: {},
			showIframe: false
		};
	},
	componentDidMount: function componentDidMount() {
		if (this.props.list.link.create) {
			this.setState({
				showIframe: true
			});
		} else {
			document.body.addEventListener('keyup', this.handleKeyPress, false);
		}
	},
	componentWillUnmount: function componentWillUnmount() {
		if (!this.state.showIframe) {
			document.body.removeEventListener('keyup', this.handleKeyPress, false);
		}
	},
	handleKeyPress: function handleKeyPress(evt) {
		if (_vkey2.default[evt.keyCode] === '<escape>') {
			this.props.onCancel();
		}
	},

	// Handle input change events
	handleChange: function handleChange(event) {
		var values = (0, _objectAssign2.default)({}, this.state.values);
		values[event.path] = event.value;
		this.setState({
			values: values
		});
	},

	// Set the props of a field
	getFieldProps: function getFieldProps(field) {
		var props = (0, _objectAssign2.default)({}, field);
		props.value = this.state.values[field.path];
		props.values = this.state.values;
		props.onChange = this.handleChange;
		props.mode = 'create';
		props.key = field.path;
		return props;
	},

	// Create a new item when the form is submitted
	submitForm: function submitForm(event) {
		var _this2 = this;

		event.preventDefault();
		var createForm = event.target;
		var formData = new FormData(createForm);
		this.props.list.createItem(formData, function (err, data) {
			if (data) {
				if (_this2.props.onCreate) {
					_this2.props.onCreate(data);
				} else {
					// Clear form
					_this2.setState({
						values: {},
						alerts: {
							success: {
								success: 'Item created'
							}
						}
					});
				}
			} else {
				if (!err) {
					err = {
						error: 'connection error'
					};
				}
				// If we get a database error, show the database error message
				// instead of only saying "Database error"
				if (err.error === 'database error') {
					err.error = err.detail.errmsg;
				}
				_this2.setState({
					alerts: {
						error: err
					}
				});
			}
		});
	},

	// Render the form itself
	renderForm: function renderForm() {
		var _this3 = this;

		if (!this.props.isOpen) return;

		var form = [];
		var list = this.props.list;
		var nameField = this.props.list.nameField;
		var focusWasSet;

		// If the name field is an initial one, we need to render a proper
		// input for it
		if (list.nameIsInitial) {
			var nameFieldProps = this.getFieldProps(nameField);
			nameFieldProps.autoFocus = focusWasSet = true;
			if (nameField.type === 'text') {
				nameFieldProps.className = 'item-name-field';
				nameFieldProps.placeholder = nameField.label;
				nameFieldProps.label = '';
			}
			form.push(_react2.default.createElement(_FieldTypes.Fields[nameField.type], nameFieldProps));
		}

		// Render inputs for all initial fields
		Object.keys(list.initialFields).forEach(function (key) {
			var field = list.fields[list.initialFields[key]];
			// If there's something weird passed in as field type, render the
			// invalid field type component
			if (typeof _FieldTypes.Fields[field.type] !== 'function') {
				form.push(_react2.default.createElement(_InvalidFieldType2.default, { type: field.type, path: field.path, key: field.path }));
				return;
			}
			// Get the props for the input field
			var fieldProps = _this3.getFieldProps(field);
			// If there was no focusRef set previously, set the current field to
			// be the one to be focussed. Generally the first input field, if
			// there's an initial name field that takes precedence.
			if (!focusWasSet) {
				fieldProps.autoFocus = focusWasSet = true;
			}
			form.push(_react2.default.createElement(_FieldTypes.Fields[field.type], fieldProps));
		});

		return _react2.default.createElement(
			_elemental.Form,
			{ layout: 'horizontal', onSubmit: this.submitForm },
			_react2.default.createElement(_elemental.Modal.Header, {
				text: 'Create a new ' + list.singular,
				showCloseButton: true
			}),
			_react2.default.createElement(
				_elemental.Modal.Body,
				null,
				_react2.default.createElement(_AlertMessages2.default, { alerts: this.state.alerts }),
				form
			),
			_react2.default.createElement(
				_elemental.Modal.Footer,
				null,
				_react2.default.createElement(
					_elemental.Button,
					{ color: 'success', type: 'submit', 'data-button-type': 'submit' },
					'Create'
				),
				_react2.default.createElement(
					_elemental.Button,
					{
						variant: 'link',
						color: 'cancel',
						'data-button-type': 'cancel',
						onClick: this.props.onCancel
					},
					'Cancel'
				)
			)
		);
	},
	renderContent: function renderContent() {
		var showIframe = this.state.showIframe;

		var iframeURL = '' + Keystone.externalHost + this.props.list.link.create;

		return showIframe && this.props.isOpen ? _react2.default.createElement(_IframeContent2.default, { src: iframeURL, show: this.props.isOpen, onCancel: this.props.onCancel, onSave: this.props.onCreate, className: "full-screen" }) : _react2.default.createElement(
			_elemental.Modal.Dialog,
			{ isOpen: this.props.isOpen, onClose: this.props.onCancel, backdropClosesModal: true },
			this.renderForm()
		);
	},
	render: function render() {
		return this.renderContent();
	}
});

module.exports = CreateForm;

},{"../elemental":399,"./AlertMessages":458,"./IframeContent":463,"./InvalidFieldType":464,"FieldTypes":undefined,"object-assign":577,"react":undefined,"vkey":undefined}],461:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elemental = require('../elemental');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A single flash message component. Used by FlashMessages.js
 */

var FlashMessage = _react2.default.createClass({
	displayName: 'FlashMessage',

	propTypes: {
		message: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.string]).isRequired,
		type: _react.PropTypes.string
	},
	// Render the message
	renderMessage: function renderMessage(message) {
		// If the message is only a string, render the string
		if (typeof message === 'string') {
			return _react2.default.createElement(
				'span',
				null,
				message
			);
		}

		// Get the title and the detail of the message
		var title = message.title ? _react2.default.createElement(
			'h4',
			null,
			message.title
		) : null;
		var detail = message.detail ? _react2.default.createElement(
			'p',
			null,
			message.detail
		) : null;
		// If the message has a list attached, render a <ul>
		var list = message.list ? _react2.default.createElement(
			'ul',
			{ style: { marginBottom: 0 } },
			message.list.map(function (item, i) {
				return _react2.default.createElement(
					'li',
					{ key: 'i' + i },
					item
				);
			})
		) : null;

		return _react2.default.createElement(
			'span',
			null,
			title,
			detail,
			list
		);
	},
	render: function render() {
		var _props = this.props,
		    message = _props.message,
		    type = _props.type;


		return _react2.default.createElement(
			_elemental.Alert,
			{ color: type },
			this.renderMessage(message)
		);
	}
});

module.exports = FlashMessage;

},{"../elemental":399,"react":undefined}],462:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _FlashMessage = require('./FlashMessage');

var _FlashMessage2 = _interopRequireDefault(_FlashMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FlashMessages = _react2.default.createClass({
	displayName: 'FlashMessages',
	propTypes: {
		messages: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.bool, _react2.default.PropTypes.shape({
			error: _react2.default.PropTypes.array,
			hilight: _react2.default.PropTypes.array,
			info: _react2.default.PropTypes.array,
			success: _react2.default.PropTypes.array,
			warning: _react2.default.PropTypes.array
		})])
	},
	// Render messages by their type
	renderMessages: function renderMessages(messages, type) {
		if (!messages || !messages.length) return null;

		return messages.map(function (message, i) {
			return _react2.default.createElement(_FlashMessage2.default, { message: message, type: type, key: 'i' + i });
		});
	},

	// Render the individual messages based on their type
	renderTypes: function renderTypes(types) {
		var _this = this;

		return Object.keys(types).map(function (type) {
			return _this.renderMessages(types[type], type);
		});
	},
	render: function render() {
		if (!this.props.messages) return null;

		return _react2.default.createElement(
			'div',
			{ className: 'flash-messages' },
			_lodash2.default.isPlainObject(this.props.messages) && this.renderTypes(this.props.messages)
		);
	}
}); /**
     * Render a few flash messages, e.g. errors, success messages, warnings,...
     *
     * Use like this:
     * <FlashMessages
     *   messages={{
     *	   error: [{
     *	     title: 'There is a network problem',
     *	     detail: 'Please try again later...',
     *	   }],
     *   }}
     * />
     *
     * Instead of error, it can also be hilight, info, success or warning
     */

module.exports = FlashMessages;

},{"./FlashMessage":461,"lodash":undefined,"react":undefined}],463:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IframeContent = _react2.default.createClass({
	displayName: 'IframeContent',
	propTypes: {
		show: _react2.default.PropTypes.bool,
		src: _react2.default.PropTypes.string,
		className: _react2.default.PropTypes.string,
		onCancel: _react2.default.PropTypes.func,
		onSave: _react2.default.PropTypes.func
	},
	getDefaultProps: function getDefaultProps() {
		return {
			show: false
		};
	},
	getInitialState: function getInitialState() {
		return {};
	},
	componentDidMount: function componentDidMount() {
		window.addEventListener("message", this.handleFrameTasks, this);
	},
	componentWillUnmount: function componentWillUnmount() {
		window.removeEventListener("message", this.handleFrameTasks, this);
	},
	handleFrameTasks: function handleFrameTasks(e) {
		try {
			var message = JSON.parse(e.data);
			switch (message.type) {
				case 'contentUpdate':
					this.setState({
						contentHeight: message.data
					});
					break;
				case 'onSave':
					if (this.props.onSave) {
						this.props.onSave(message.data);
					}
					break;
				case 'onCancel':
					if (this.props.onCancel) {
						this.props.onCancel();
					}
					break;
			}
		} catch (err) {
			console.error(err);
		}
	},
	renderContent: function renderContent() {
		var _this = this;

		var _props = this.props,
		    src = _props.src,
		    show = _props.show,
		    _props$className = _props.className,
		    className = _props$className === undefined ? '' : _props$className;

		var iframeURL = src + '?token=' + Keystone.user.token;
		return show ? _react2.default.createElement('iframe', { className: 'content-frame ' + className, style: { height: this.state.contentHeight }, ref: function ref(f) {
				return _this.ifr = f;
			}, src: iframeURL }) : _react2.default.createElement('div', null);
	},
	render: function render() {
		return this.renderContent();
	}
}); /**
     * The form that's visible when "Create <ItemName>" is clicked on either the
     * List screen or the Item screen
     */

module.exports = IframeContent;

},{"react":undefined}],464:[function(require,module,exports){
"use strict";

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InvalidFieldType = function InvalidFieldType(props) {
	return _react2.default.createElement(
		"div",
		{ className: "alert alert-danger" },
		"Invalid field type ",
		_react2.default.createElement(
			"strong",
			null,
			props.type
		),
		" at path ",
		_react2.default.createElement(
			"strong",
			null,
			props.path
		)
	);
}; /**
    * Renders an "Invalid Field Type" error
    */

InvalidFieldType.propTypes = {
	path: _react2.default.PropTypes.string,
	type: _react2.default.PropTypes.string
};

module.exports = InvalidFieldType;

},{"react":undefined}],465:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _glamor = require('glamor');

var _theme = require('../../theme');

var _theme2 = _interopRequireDefault(_theme);

var _color = require('../../utils/color');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Kbd(_ref) {
	var className = _ref.className,
	    props = _objectWithoutProperties(_ref, ['className']);

	props.className = (0, _glamor.css)(classes.kbd);

	return _react2.default.createElement('kbd', props);
};

var classes = {
	kbd: {
		backgroundColor: _theme2.default.color.body,
		borderRadius: 3,
		border: '1px solid #ccc',
		borderBottomColor: (0, _color.darken)('#ccc', 4),
		borderTopColor: (0, _color.lighten)('#ccc', 4),
		boxShadow: '0 1px 1px rgba(0, 0, 0, 0.12), 0 2px 0 0 rgba(255, 255, 255, 0.7) inset',
		display: 'inline-block',
		fontFamily: 'Consolas, "Liberation Mono", Courier, monospace',
		fontSize: '0.85em',
		fontWeight: 700,
		lineHeight: 'inherit',
		padding: '1px 4px',
		whiteSpace: 'nowrap',

		// little hack to tweak "visual-middle" alignment
		position: 'relative',
		top: -1
	}
};

module.exports = Kbd;

},{"../../theme":477,"../../utils/color":479,"glamor":undefined,"react":undefined}],466:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Render the body of a popout
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PopoutBody = _react2.default.createClass({
	displayName: 'PopoutBody',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string,
		scrollable: _react2.default.PropTypes.bool
	},
	render: function render() {
		var className = (0, _classnames2.default)('Popout__body', {
			'Popout__scrollable-area': this.props.scrollable
		}, this.props.className);
		var props = (0, _blacklist2.default)(this.props, 'className', 'scrollable');

		return _react2.default.createElement('div', _extends({ className: className }, props));
	}
});

module.exports = PopoutBody;

},{"blacklist":undefined,"classnames":undefined,"react":undefined}],467:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BUTTON_BASE_CLASSNAME = 'Popout__footer__button Popout__footer__button--'; /**
                                                                                * Render a footer for a popout
                                                                                */

var PopoutFooter = _react2.default.createClass({
	displayName: 'PopoutFooter',
	propTypes: {
		children: _react2.default.PropTypes.node,
		primaryButtonAction: _react2.default.PropTypes.func,
		primaryButtonIsSubmit: _react2.default.PropTypes.bool,
		primaryButtonLabel: _react2.default.PropTypes.string,
		secondaryButtonAction: _react2.default.PropTypes.func,
		secondaryButtonLabel: _react2.default.PropTypes.string
	},
	// Render a primary button
	renderPrimaryButton: function renderPrimaryButton() {
		if (!this.props.primaryButtonLabel) return null;

		return _react2.default.createElement(
			'button',
			{
				type: this.props.primaryButtonIsSubmit ? 'submit' : 'button',
				className: BUTTON_BASE_CLASSNAME + 'primary',
				onClick: this.props.primaryButtonAction
			},
			this.props.primaryButtonLabel
		);
	},

	// Render a secondary button
	renderSecondaryButton: function renderSecondaryButton() {
		if (!this.props.secondaryButtonAction || !this.props.secondaryButtonLabel) return null;

		return _react2.default.createElement(
			'button',
			{
				type: 'button',
				className: BUTTON_BASE_CLASSNAME + 'secondary',
				onClick: this.props.secondaryButtonAction
			},
			this.props.secondaryButtonLabel
		);
	},
	render: function render() {
		return _react2.default.createElement(
			'div',
			{ className: 'Popout__footer' },
			this.renderPrimaryButton(),
			this.renderSecondaryButton(),
			this.props.children
		);
	}
});

module.exports = PopoutFooter;

},{"react":undefined}],468:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Render a header for a popout
 */

var PopoutHeader = _react2.default.createClass({
	displayName: 'PopoutHeader',
	propTypes: {
		leftAction: _react2.default.PropTypes.func,
		leftIcon: _react2.default.PropTypes.string,
		title: _react2.default.PropTypes.string.isRequired,
		transitionDirection: _react2.default.PropTypes.oneOf(['next', 'prev'])
	},
	render: function render() {
		// If we have a left action and a left icon, render a header button
		var headerButton = this.props.leftAction && this.props.leftIcon ? _react2.default.createElement('button', {
			key: 'button_' + this.props.transitionDirection,
			type: 'button',
			className: 'Popout__header__button octicon octicon-' + this.props.leftIcon,
			onClick: this.props.leftAction
		}) : null;
		// If we have a title, render it
		var headerTitle = this.props.title ? _react2.default.createElement(
			'span',
			{
				key: 'title_' + this.props.transitionDirection,
				className: 'Popout__header__label'
			},
			this.props.title
		) : null;

		return _react2.default.createElement(
			'div',
			{ className: 'Popout__header' },
			_react2.default.createElement(
				_reactAddonsCssTransitionGroup2.default,
				{
					transitionName: 'Popout__header__button',
					transitionEnterTimeout: 200,
					transitionLeaveTimeout: 200
				},
				headerButton
			),
			_react2.default.createElement(
				_reactAddonsCssTransitionGroup2.default,
				{
					transitionName: 'Popout__pane-' + this.props.transitionDirection,
					transitionEnterTimeout: 360,
					transitionLeaveTimeout: 360
				},
				headerTitle
			)
		);
	}
});

module.exports = PopoutHeader;

},{"react":undefined,"react-addons-css-transition-group":undefined}],469:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Render a popout list. Can also use PopoutListItem and PopoutListHeading
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PopoutList = _react2.default.createClass({
	displayName: 'PopoutList',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string
	},
	render: function render() {
		var className = (0, _classnames2.default)('PopoutList', this.props.className);
		var props = (0, _blacklist2.default)(this.props, 'className');

		return _react2.default.createElement('div', _extends({ className: className }, props));
	}
});

module.exports = PopoutList;

// expose the child to the top level export
module.exports.Item = require('./PopoutListItem');
module.exports.Heading = require('./PopoutListHeading');

},{"./PopoutListHeading":470,"./PopoutListItem":471,"blacklist":undefined,"classnames":undefined,"react":undefined}],470:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Render a popout list heading
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PopoutListHeading = _react2.default.createClass({
	displayName: 'PopoutListHeading',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string
	},
	render: function render() {
		var className = (0, _classnames2.default)('PopoutList__heading', this.props.className);
		var props = (0, _blacklist2.default)(this.props, 'className');

		return _react2.default.createElement('div', _extends({ className: className }, props));
	}
});

module.exports = PopoutListHeading;

},{"blacklist":undefined,"classnames":undefined,"react":undefined}],471:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Render a popout list item
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PopoutListItem = _react2.default.createClass({
	displayName: 'PopoutListItem',
	propTypes: {
		icon: _react2.default.PropTypes.string,
		iconHover: _react2.default.PropTypes.string,
		isSelected: _react2.default.PropTypes.bool,
		label: _react2.default.PropTypes.string.isRequired,
		onClick: _react2.default.PropTypes.func
	},
	getInitialState: function getInitialState() {
		return {
			hover: false
		};
	},
	hover: function hover() {
		this.setState({ hover: true });
	},
	unhover: function unhover() {
		this.setState({ hover: false });
	},

	// Render an icon
	renderIcon: function renderIcon() {
		if (!this.props.icon) return null;
		var icon = this.state.hover && this.props.iconHover ? this.props.iconHover : this.props.icon;
		var iconClassname = (0, _classnames2.default)('PopoutList__item__icon octicon', 'octicon-' + icon);

		return _react2.default.createElement('span', { className: iconClassname });
	},
	render: function render() {
		var itemClassname = (0, _classnames2.default)('PopoutList__item', {
			'is-selected': this.props.isSelected
		});
		var props = (0, _blacklist2.default)(this.props, 'className', 'icon', 'iconHover', 'isSelected', 'label');
		return _react2.default.createElement(
			'button',
			_extends({
				type: 'button',
				title: this.props.label,
				className: itemClassname,
				onFocus: this.hover,
				onBlur: this.unhover,
				onMouseOver: this.hover,
				onMouseOut: this.unhover
			}, props),
			this.renderIcon(),
			_react2.default.createElement(
				'span',
				{ className: 'PopoutList__item__label' },
				this.props.label
			)
		);
	}
});

module.exports = PopoutListItem;

},{"blacklist":undefined,"classnames":undefined,"react":undefined}],472:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Render a popout pane, calls props.onLayout when the component mounts
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PopoutPane = _react2.default.createClass({
	displayName: 'PopoutPane',
	propTypes: {
		children: _react2.default.PropTypes.node.isRequired,
		className: _react2.default.PropTypes.string,
		onLayout: _react2.default.PropTypes.func
	},
	getDefaultProps: function getDefaultProps() {
		return {
			onLayout: function onLayout() {}
		};
	},
	componentDidMount: function componentDidMount() {
		this.props.onLayout(this.refs.el.offsetHeight);
	},
	render: function render() {
		var className = (0, _classnames2.default)('Popout__pane', this.props.className);
		var props = (0, _blacklist2.default)(this.props, 'className', 'onLayout');

		return _react2.default.createElement('div', _extends({ ref: 'el', className: className }, props));
	}
});

module.exports = PopoutPane;

},{"blacklist":undefined,"classnames":undefined,"react":undefined}],473:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Portal = require('../Portal');

var _Portal2 = _interopRequireDefault(_Portal);

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SIZES = {
	arrowHeight: 12,
	arrowWidth: 16,
	horizontalMargin: 20
}; /**
    * A Popout component.
    * One can also add a Header (Popout/Header), a Footer
    * (Popout/Footer), a Body (Popout/Body) and a Pan (Popout/Pane).
    */

var Popout = _react2.default.createClass({
	displayName: 'Popout',
	propTypes: {
		isOpen: _react2.default.PropTypes.bool,
		onCancel: _react2.default.PropTypes.func,
		onSubmit: _react2.default.PropTypes.func,
		relativeToID: _react2.default.PropTypes.string.isRequired,
		width: _react2.default.PropTypes.number
	},
	getDefaultProps: function getDefaultProps() {
		return {
			width: 320
		};
	},
	getInitialState: function getInitialState() {
		return {};
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		if (!this.props.isOpen && nextProps.isOpen) {
			window.addEventListener('resize', this.calculatePosition);
			this.calculatePosition(nextProps.isOpen);
		} else if (this.props.isOpen && !nextProps.isOpen) {
			window.removeEventListener('resize', this.calculatePosition);
		}
	},
	getPortalDOMNode: function getPortalDOMNode() {
		return this.refs.portal.getPortalDOMNode();
	},
	calculatePosition: function calculatePosition(isOpen) {
		if (!isOpen) return;
		var posNode = document.getElementById(this.props.relativeToID);

		var pos = {
			top: 0,
			left: 0,
			width: posNode.offsetWidth,
			height: posNode.offsetHeight
		};
		while (posNode.offsetParent) {
			pos.top += posNode.offsetTop;
			pos.left += posNode.offsetLeft;
			posNode = posNode.offsetParent;
		}

		var leftOffset = Math.max(pos.left + pos.width / 2 - this.props.width / 2, SIZES.horizontalMargin);
		var topOffset = pos.top + pos.height + SIZES.arrowHeight;

		var spaceOnRight = window.innerWidth - (leftOffset + this.props.width + SIZES.horizontalMargin);
		if (spaceOnRight < 0) {
			leftOffset = leftOffset + spaceOnRight;
		}

		var arrowLeftOffset = leftOffset === SIZES.horizontalMargin ? pos.left + pos.width / 2 - SIZES.arrowWidth / 2 - SIZES.horizontalMargin : null;

		var newStateAvaliable = this.state.leftOffset !== leftOffset || this.state.topOffset !== topOffset || this.state.arrowLeftOffset !== arrowLeftOffset;

		if (newStateAvaliable) {
			this.setState({
				leftOffset: leftOffset,
				topOffset: topOffset,
				arrowLeftOffset: arrowLeftOffset
			});
		}
	},
	renderPopout: function renderPopout() {
		if (!this.props.isOpen) return null;

		var width = this.props.width;
		var _state = this.state,
		    arrowLeftOffset = _state.arrowLeftOffset,
		    left = _state.leftOffset,
		    top = _state.topOffset;


		var arrowStyles = arrowLeftOffset ? { left: 0, marginLeft: arrowLeftOffset } : null;

		return _react2.default.createElement(
			'div',
			{ className: 'Popout', style: { left: left, top: top, width: width } },
			_react2.default.createElement('span', { className: 'Popout__arrow', style: arrowStyles }),
			_react2.default.createElement(
				'div',
				{ className: 'Popout__inner' },
				this.props.children
			)
		);
	},
	renderBlockout: function renderBlockout() {
		if (!this.props.isOpen) return;
		return _react2.default.createElement('div', { className: 'blockout', onClick: this.props.onCancel });
	},
	render: function render() {
		return _react2.default.createElement(
			_Portal2.default,
			{ className: 'Popout-wrapper', ref: 'portal' },
			_react2.default.createElement(
				_reactAddonsCssTransitionGroup2.default,
				{
					transitionEnterTimeout: 200,
					transitionLeaveTimeout: 200,
					transitionName: 'Popout'
				},
				this.renderPopout()
			),
			this.renderBlockout()
		);
	}
});

module.exports = Popout;

// expose the child to the top level export
module.exports.Header = require('./PopoutHeader');
module.exports.Body = require('./PopoutBody');
module.exports.Footer = require('./PopoutFooter');
module.exports.Pane = require('./PopoutPane');

},{"../Portal":474,"./PopoutBody":466,"./PopoutFooter":467,"./PopoutHeader":468,"./PopoutPane":472,"react":undefined,"react-addons-css-transition-group":undefined}],474:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Used by the Popout component and the Lightbox component of the fields for
 * popouts. Renders a non-react DOM node.
 */

module.exports = _react2.default.createClass({
	displayName: 'Portal',
	portalElement: null, // eslint-disable-line react/sort-comp
	componentDidMount: function componentDidMount() {
		var el = document.createElement('div');
		document.body.appendChild(el);
		this.portalElement = el;
		this.componentDidUpdate();
	},
	componentWillUnmount: function componentWillUnmount() {
		document.body.removeChild(this.portalElement);
	},
	componentDidUpdate: function componentDidUpdate() {
		_reactDom2.default.render(_react2.default.createElement('div', this.props), this.portalElement);
	},
	getPortalDOMNode: function getPortalDOMNode() {
		return this.portalElement;
	},
	render: function render() {
		return null;
	}
});

},{"react":undefined,"react-dom":undefined}],475:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRouterRedux = require('react-router-redux');

var _redux = require('redux');

var _reactRouter = require('react-router');

var _reduxThunk = require('redux-thunk');

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

var _reduxSaga = require('redux-saga');

var _reduxSaga2 = _interopRequireDefault(_reduxSaga);

var _main = require('./screens/List/reducers/main');

var _main2 = _interopRequireDefault(_main);

var _active = require('./screens/List/reducers/active');

var _active2 = _interopRequireDefault(_active);

var _reducer = require('./screens/Item/reducer');

var _reducer2 = _interopRequireDefault(_reducer);

var _reducer3 = require('./screens/Home/reducer');

var _reducer4 = _interopRequireDefault(_reducer3);

var _sagas = require('./sagas');

var _sagas2 = _interopRequireDefault(_sagas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Combine the reducers to one state
var reducers = (0, _redux.combineReducers)({
	lists: _main2.default,
	active: _active2.default,
	item: _reducer2.default,
	home: _reducer4.default,
	routing: _reactRouterRedux.routerReducer
});

var sagaMiddleware = (0, _reduxSaga2.default)();

// Create the store
var store = (0, _redux.createStore)(reducers, (0, _redux.compose)((0, _redux.applyMiddleware)(
// Support thunked actions and react-router-redux
_reduxThunk2.default, (0, _reactRouterRedux.routerMiddleware)(_reactRouter.browserHistory), sagaMiddleware),
// Support the Chrome DevTools extension
window.devToolsExtension ? window.devToolsExtension() : function (f) {
	return f;
}));

sagaMiddleware.run(_sagas2.default);

exports.default = store;

},{"./sagas":403,"./screens/Home/reducer":411,"./screens/Item/reducer":429,"./screens/List/reducers/active":456,"./screens/List/reducers/main":457,"react-router":undefined,"react-router-redux":undefined,"redux":undefined,"redux-saga":undefined,"redux-thunk":undefined}],476:[function(require,module,exports){
'use strict';

/**
 * Constants
 */

// breakpoints
exports.breakpoint = {
	xs: 480,
	sm: 768,
	md: 992,
	lg: 1200
};

// border radii
exports.borderRadius = {
	xs: 2,
	sm: 4,
	md: 8,
	lg: 16,
	xl: 32
};

// color
exports.color = {
	appDanger: '#d64242',
	appInfo: '#56cdfc',
	appPrimary: '#1385e5',
	appSuccess: '#34c240',
	appWarning: '#fa9f47'
};

// spacing
exports.spacing = {
	xs: 5,
	sm: 10,
	md: 20,
	lg: 40,
	xl: 80
};

// table constants

exports.TABLE_CONTROL_COLUMN_WIDTH = 26; // icon + padding
exports.NETWORK_ERROR_RETRY_DELAY = 500; // in ms

},{}],477:[function(require,module,exports){
'use strict';

/* eslint-disable key-spacing */
var theme = {};

var _require = require('./utils/color'),
    blend = _require.blend,
    darken = _require.darken,
    fade = _require.fade,
    lighten = _require.lighten;

// ==============================
// COMMON
// ==============================

// breakpoint

theme.breakpointNumeric = {
	mobile: 480,
	tabletPortrait: 768,
	tabletLandscape: 992,
	desktop: 1200
};
theme.breakpoint = {
	tabletPortraitMin: theme.breakpointNumeric.mobile + 1 + 'px',
	tabletLandscapeMin: theme.breakpointNumeric.tabletPortrait + 1 + 'px',
	desktopMin: theme.breakpointNumeric.tabletLandscape + 1 + 'px',
	desktopLargeMin: theme.breakpointNumeric.desktop + 1 + 'px',

	mobileMax: theme.breakpointNumeric.mobile + 'px',
	tabletPortraitMax: theme.breakpointNumeric.tabletPortrait + 'px',
	tabletLandscapeMax: theme.breakpointNumeric.tabletLandscape + 'px',
	desktopMax: theme.breakpointNumeric.desktop + 'px'
};

// container

theme.container = {
	gutter: 20,
	size: {
		small: 750,
		medium: 970,
		large: 1170
	}
};

// color

theme.color = {
	body: '#fafafa',
	link: '#1385e5',
	linkHover: lighten('#1385e5', 10),
	text: '#1A1A1A',

	// contextual
	success: '#34c240',
	create: '#34c240', // alias for success
	primary: '#1385e5',
	info: '#1385e5', // alias for primary
	warning: '#FA3',
	danger: '#d64242',
	error: '#d64242', // alias for danger

	// neutrals
	gray90: '#1A1A1A',
	gray80: '#333',
	gray70: '#4D4D4D',
	gray60: '#666',
	gray50: '#7F7F7F',
	gray40: '#999',
	gray30: '#B3B3B3',
	gray20: '#CCC',
	gray15: '#D9D9D9',
	gray10: '#E5E5E5',
	gray05: '#F2F2F2',

	// social
	facebook: '#3B5998',
	google: '#DC4E41',
	instagram: '#3f729b',
	pinterest: '#bd081c',
	tumblr: '#35465c',
	twitter: '#55ACEE',
	youtube: '#cd201f',
	vimeo: '#1ab7ea'
};

// border radii

theme.borderRadius = {
	small: '0.125rem',
	default: '0.3rem',
	large: '0.5rem'
};

// spacing

theme.spacing = {
	xsmall: 5,
	small: 10,
	default: 20,
	large: 30,
	xlarge: 40,
	xxlarge: 60
};

// ==============================
// ELEMENTAL SPECIFIC
// ==============================

// button

theme.button = {
	borderRadius: theme.borderRadius.default,
	borderWidth: 1,
	font: {
		weight: 500
	},
	paddingHorizontal: '1em',
	default: {
		bgColor: theme.color.primary,
		borderColor: blend(theme.color.primary, theme.color.body, 60),
		textColor: theme.color.primary
	},
	primary: {
		bgColor: theme.color.primary,
		borderColor: blend(theme.color.primary, theme.color.body, 60),
		textColor: theme.color.primary
	},
	success: {
		bgColor: theme.color.success,
		borderColor: blend(theme.color.success, theme.color.body, 60),
		textColor: theme.color.success
	},
	warning: {
		bgColor: theme.color.warning,
		borderColor: blend(theme.color.warning, theme.color.body, 60),
		textColor: theme.color.warning
	},
	danger: {
		bgColor: theme.color.danger,
		borderColor: blend(theme.color.danger, theme.color.body, 60),
		textColor: theme.color.danger
	}
};

// blank state

theme.blankstate = {
	background: darken(theme.color.body, 4),
	borderRadius: theme.borderRadius.default,
	color: theme.color.gray40,
	paddingHorizontal: '2em',
	paddingVertical: '4em'
};

// font

theme.font = {
	family: {
		mono: 'Menlo, Monaco, Consolas, "Courier New", monospace',
		sansSerif: '"Helvetica Neue", Helvetica, Arial, sans-serif',
		serif: 'Georgia, Times New Roman, Times, serif'
	},
	size: {
		xxsmall: '0.65rem',
		xsmall: '0.75rem',
		small: '0.85rem',
		default: '1rem',
		medium: '1.2rem',
		large: '1.6rem',
		xlarge: '2.4rem',
		xxlarge: '3.2rem'
	}
};

// form

theme.form = {
	label: {
		color: theme.color.gray50,
		fontSize: '1rem',
		fontWeight: 'normal',
		width: 180
	},
	note: {
		color: theme.color.gray40,
		fontSize: '0.9em'
	}
};

// component

theme.component = {
	lineHeight: '2.3em',
	height: '2.4em',
	padding: '1em'
};

// input

theme.input = {
	background: {
		default: 'white',
		disabled: '#fafafa',
		noedit: darken(theme.color.body, 2)
	},
	placeholderColor: '#aaa',
	lineHeight: theme.component.lineHeight,
	height: theme.component.height,
	border: {
		color: {
			default: '#ccc',
			focus: theme.color.info,
			hover: '#bbb',
			noedit: darken(theme.color.body, 8)
		},
		radius: theme.borderRadius.default,
		width: 1
	},
	boxShadow: 'inset 0 1px 1px rgba(0, 0, 0, 0.075)',
	boxShadowFocus: 'inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 0 3px ' + fade(theme.color.info, 10),
	paddingHorizontal: '.75em'
};

// select

theme.select = {
	boxShadow: '0 1px 1px rgba(0, 0, 0, 0.075)'
};

// alert

theme.alert = {
	padding: '0.75em  1em',
	margin: '0 0 1em',
	borderWidth: 1,
	borderRadius: theme.borderRadius.default,

	color: {
		danger: {
			background: fade(theme.color.danger, 10),
			border: fade(theme.color.danger, 10),
			text: theme.color.danger
		},
		info: {
			background: fade(theme.color.primary, 10),
			border: fade(theme.color.primary, 10),
			text: theme.color.primary
		},
		success: {
			background: fade(theme.color.success, 10),
			border: fade(theme.color.success, 10),
			text: theme.color.success
		},
		warning: {
			background: fade(theme.color.warning, 10),
			border: fade(theme.color.warning, 10),
			text: theme.color.warning
		}
	}
};

// glyph

theme.glyph = {
	color: {
		danger: theme.color.danger,
		inherit: 'inherit',
		inverted: 'white',
		primary: theme.color.primary,
		success: theme.color.success,
		warning: theme.color.warning
	},
	size: {
		small: 16,
		medium: 32,
		large: 64
	}
};

// modal

theme.modal = {
	background: 'rgba(0, 0, 0, 0.8)',
	zIndex: 100,
	padding: {
		dialog: {
			horizontal: '1em',
			vertical: 0
		},
		body: {
			horizontal: 0,
			vertical: '1em'
		},
		footer: {
			horizontal: 0,
			vertical: '1em'
		},
		header: {
			horizontal: 0,
			vertical: '0.6em'
		}
	}
};

// pagination

theme.pagination = {
	color: theme.color.gray60,

	hover: {
		background: 'white',
		border: 'rgba(0, 0, 0, 0.1)',
		color: theme.color.gray60
	},
	selected: {
		background: 'rgba(0, 0, 0, 0.05)',
		border: 'transparent',
		color: theme.color.gray60
	},
	disabled: {
		background: 'transparent',
		color: theme.color.gray40
	}
};

// spinner

theme.spinner = {
	color: {
		danger: theme.color.danger,
		default: theme.color.gray40,
		inverted: 'white',
		primary: theme.color.primary,
		success: theme.color.success,
		warning: theme.color.warning
	},
	size: {
		small: 4,
		medium: 8,
		large: 16
	}
};

module.exports = theme;

},{"./utils/color":479}],478:[function(require,module,exports){
'use strict';

/**
 * Helper method to handle List operations, e.g. creating items, deleting items,
 * getting information about those lists, etc.
 */

var listToArray = require('list-to-array');
var qs = require('qs');
var xhr = require('xhr');
var assign = require('object-assign');
// Filters for truthy elements in an array
var truthy = function truthy(i) {
	return i;
};

/**
 * Get the columns of a list, structured by fields and headings
 *
 * @param  {Object} list The list we want the columns of
 *
 * @return {Array}       The columns
 */
function getColumns(list) {
	return list.uiElements.map(function (col) {
		if (col.type === 'heading') {
			return { type: 'heading', content: col.content };
		} else {
			var field = list.fields[col.field];
			return field ? { type: 'field', field: field, title: field.label, path: field.path } : null;
		}
	}).filter(truthy);
}

/**
 * Make an array of filters an object keyed by the filtering path
 *
 * @param  {Array} filterArray The array of filters
 *
 * @return {Object}            The corrected filters, keyed by path
 */
function getFilters(filterArray) {
	var filters = {};
	filterArray.forEach(function (filter) {
		filters[filter.field.path] = filter.value;
	});
	return filters;
};

/**
 * Get the sorting string for the URI
 *
 * @param  {Array} sort.paths The paths we want to sort
 *
 * @return {String}           All the sorting queries we want as a string
 */
function getSortString(sort) {
	return sort.paths.map(function (i) {
		// If we want to sort inverted, we prefix a "-" before the sort path
		return i.invert ? '-' + i.path : i.path;
	}).filter(truthy).join(',');
};

/**
 * Build a query string from a bunch of options
 */
function buildQueryString(options) {
	var query = {};
	if (options.search) query.search = options.search;
	if (options.filters.length) query.filters = JSON.stringify(getFilters(options.filters));
	if (options.columns) query.fields = options.columns.map(function (i) {
		return i.path;
	}).join(',');
	if (options.page && options.page.size) query.limit = options.page.size;
	if (options.page && options.page.index > 1) query.skip = (options.page.index - 1) * options.page.size;
	if (options.sort) query.sort = getSortString(options.sort);
	query.expandRelationshipFields = true;

	// Custom Filter to Fetch all Records While Selecting Manage All

	if (options.filters.fetch_all_data) {
		query.limit = options.filters.item_count;
	}

	return '?' + qs.stringify(query);
};

/**
 * The main list helper class
 *
 * @param {Object} options
 */
var List = function List(options) {
	// TODO these options are possibly unused
	assign(this, options);
	this.columns = getColumns(this);
	this.expandedDefaultColumns = this.expandColumns(this.defaultColumns);
	this.defaultColumnPaths = this.expandedDefaultColumns.map(function (i) {
		return i.path;
	}).join(',');
};

/**
 * Create an item via the API
 *
 * @param  {FormData} formData The submitted form data
 * @param  {Function} callback Called after the API call
 */
List.prototype.createItem = function (formData, callback) {
	xhr({
		url: Keystone.adminPath + '/api/' + this.path + '/create',
		responseType: 'json',
		method: 'POST',
		headers: assign({}, Keystone.csrf.header),
		body: formData
	}, function (err, resp, data) {
		if (err) callback(err);
		if (resp.statusCode === 200) {
			callback(null, data);
		} else {
			// NOTE: xhr callback will be called with an Error if
			//  there is an error in the browser that prevents
			//  sending the request. A HTTP 500 response is not
			//  going to cause an error to be returned.
			callback(data, null);
		}
	});
};

/**
 * Update a specific item
 *
 * @param  {String}   id       The id of the item we want to update
 * @param  {FormData} formData The submitted form data
 * @param  {Function} callback Called after the API call
 */
List.prototype.updateItem = function (id, formData, callback) {
	xhr({
		url: Keystone.adminPath + '/api/' + this.path + '/' + id,
		responseType: 'json',
		method: 'POST',
		headers: assign({}, Keystone.csrf.header),
		body: formData
	}, function (err, resp, data) {
		if (err) return callback(err);
		if (resp.statusCode === 200) {
			callback(null, data);
		} else {
			callback(data);
		}
	});
};

List.prototype.expandColumns = function (input) {
	var _this = this;

	var nameIncluded = false;
	var cols = listToArray(input).map(function (i) {
		var split = i.split('|');
		var path = split[0];
		var width = split[1];
		if (path === '__name__') {
			path = _this.namePath;
		}
		var field = _this.fields[path];
		if (!field) {
			// TODO: Support arbitary document paths
			if (!_this.hidden) {
				if (path === _this.namePath) {
					console.warn('List ' + _this.key + ' did not specify any default columns or a name field');
				} else {
					console.warn('List ' + _this.key + ' specified an invalid default column: ' + path);
				}
			}
			return;
		}
		if (path === _this.namePath) {
			nameIncluded = true;
		}
		return {
			field: field,
			label: field.label,
			path: field.path,
			type: field.type,
			width: width
		};
	}).filter(truthy);
	if (!nameIncluded) {
		cols.unshift({
			type: 'id',
			label: 'ID',
			path: 'id'
		});
	}
	return cols;
};

List.prototype.expandSort = function (input) {
	var _this2 = this;

	var sort = {
		rawInput: input || this.defaultSort,
		isDefaultSort: false
	};
	sort.input = sort.rawInput;
	if (sort.input === '__default__') {
		sort.isDefaultSort = true;
		sort.input = this.sortable ? 'sortOrder' : this.namePath;
	}
	sort.paths = listToArray(sort.input).map(function (path) {
		var invert = false;
		if (path.charAt(0) === '-') {
			invert = true;
			path = path.substr(1);
		} else if (path.charAt(0) === '+') {
			path = path.substr(1);
		}
		var field = _this2.fields[path];
		if (!field) {
			// TODO: Support arbitary document paths
			console.warn('Invalid Sort specified:', path);
			return;
		}
		return {
			field: field,
			type: field.type,
			label: field.label,
			path: field.path,
			invert: invert
		};
	}).filter(truthy);
	return sort;
};

/**
 * Load a specific item via the API
 *
 * @param  {String}   itemId   The id of the item we want to load
 * @param  {Object}   options
 * @param  {Function} callback
 */
List.prototype.loadItem = function (itemId, options, callback) {
	if (arguments.length === 2 && typeof options === 'function') {
		callback = options;
		options = null;
	}
	var url = Keystone.adminPath + '/api/' + this.path + '/' + itemId;
	var query = qs.stringify(options);
	if (query.length) url += '?' + query;
	xhr({
		url: url,
		responseType: 'json'
	}, function (err, resp, data) {
		if (err) return callback(err);
		// Pass the data as result or error, depending on the statusCode
		if (resp.statusCode === 200) {
			callback(null, data);
		} else {
			callback(data);
		}
	});
};

/**
 * Load all items of a list, optionally passing objects to build a query string
 * for sorting or searching
 *
 * @param  {Object}   options
 * @param  {Function} callback
 */
List.prototype.loadItems = function (options, callback) {
	var url = Keystone.adminPath + '/api/' + this.path + buildQueryString(options);
	xhr({
		url: url,
		responseType: 'json'
	}, function (err, resp, data) {
		if (err) callback(err);
		// Pass the data as result or error, depending on the statusCode
		if (resp.statusCode === 200) {
			callback(null, data);
		} else {
			callback(data);
		}
	});
};

/**
 * Constructs a download URL to download a list with the current sorting, filtering,
 * selection and searching options
 *
 * @param  {Object} options
 *
 * @return {String}         The download URL
 */
List.prototype.getDownloadURL = function (options) {
	var url = Keystone.adminPath + '/api/' + this.path;
	var parts = [];
	if (options.format !== 'json') {
		options.format = 'csv';
	}
	parts.push(options.search ? 'search=' + options.search : '');
	parts.push(options.filters.length ? 'filters=' + JSON.stringify(getFilters(options.filters)) : '');
	parts.push(options.columns ? 'select=' + options.columns.map(function (i) {
		return i.path;
	}).join(',') : '');
	parts.push(options.sort ? 'sort=' + getSortString(options.sort) : '');
	parts.push('expandRelationshipFields=true');
	return url + '/export.' + options.format + '?' + parts.filter(truthy).join('&');
};

/**
 * Delete a specific item via the API
 *
 * @param  {String}   itemId   The id of the item we want to delete
 * @param  {Function} callback
 */
List.prototype.deleteItem = function (itemId, callback) {
	this.deleteItems([itemId], callback);
};

/**
 * Delete multiple items at once via the API
 *
 * @param  {Array}   itemIds  An array of ids of items we want to delete
 * @param  {Function} callback
 */
List.prototype.deleteItems = function (itemIds, callback) {
	var url = Keystone.adminPath + '/api/' + this.path + '/delete';
	xhr({
		url: url,
		method: 'POST',
		headers: assign({}, Keystone.csrf.header),
		json: {
			ids: itemIds
		}
	}, function (err, resp, body) {
		if (err) return callback(err);
		// Pass the body as result or error, depending on the statusCode
		if (resp.statusCode === 200) {
			callback(null, body);
		} else {
			callback(body);
		}
	});
};

List.prototype.reorderItems = function (item, oldSortOrder, newSortOrder, pageOptions, callback) {
	var url = Keystone.adminPath + '/api/' + this.path + '/' + item.id + '/sortOrder/' + oldSortOrder + '/' + newSortOrder + '/' + buildQueryString(pageOptions);
	xhr({
		url: url,
		method: 'POST',
		headers: assign({}, Keystone.csrf.header)
	}, function (err, resp, body) {
		if (err) return callback(err);
		try {
			body = JSON.parse(body);
		} catch (e) {
			console.log('Error parsing results json:', e, body);
			return callback(e);
		}
		// Pass the body as result or error, depending on the statusCode
		if (resp.statusCode === 200) {
			callback(null, body);
		} else {
			callback(body);
		}
	});
};

module.exports = List;

},{"list-to-array":undefined,"object-assign":577,"qs":undefined,"xhr":undefined}],479:[function(require,module,exports){
'use strict';

/**
	Validate Hex
	==============================

	@param {String} hex

	1. remove hash if present
	2. convert from 3 to 6 digit color code & ensure valid hex
*/

function validateHex(color) {
	var hex = color.replace('#', '');

	if (hex.length === 3) {
		return hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
	}
	if (hex.length !== 6) {
		throw new Error('Invalid color value provided: "' + color + '"');
	}

	return hex;
};

/**
	Fade Color
	==============================

	Takes a hexidecimal color, converts it to RGB and applies an alpha value.

	@param {String} color
	@param {Number} opacity (0-100)

	1. convert hex to RGB
	2. combine and add alpha channel
*/

function fade(color) {
	var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;

	var decimalFraction = opacity / 100;
	var hex = validateHex(color);

	// 1.
	var r = parseInt(hex.substring(0, 2), 16);
	var g = parseInt(hex.substring(2, 4), 16);
	var b = parseInt(hex.substring(4, 6), 16);

	// 2.
	var result = 'rgba(' + r + ',' + g + ',' + b + ',' + decimalFraction + ')';

	return result;
};

/**
	Shade Color
	==============================

	Takes a hexidecimal color, converts it to RGB and lightens or darkens

	@param {String} color
	@param {Number} opacity (0-100)

	1. do fancy RGB bitwise operations
	2. combine back into a hex value
*/

function shade(color, percent) {
	var decimalFraction = percent / 100;
	var hex = validateHex(color);

	// 1.
	var f = parseInt(hex, 16);
	var t = decimalFraction < 0 ? 0 : 255;
	var p = decimalFraction < 0 ? decimalFraction * -1 : decimalFraction;

	var R = f >> 16;
	var G = f >> 8 & 0x00FF;
	var B = f & 0x0000FF;

	// 2.
	return '#' + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);
};

// shade helpers
var lighten = shade;
function darken(color, percent) {
	return shade(color, percent * -1);
};

/**
	Blend Color
	==============================

	Takes two hexidecimal colors and blend them together

	@param {String} color1
	@param {String} color2
	@param {Number} percent (0-100)

	1. do fancy RGB bitwise operations
	2. combine back into a hex value
*/

function blend(color1, color2, percent) {
	var decimalFraction = percent / 100;
	var hex1 = validateHex(color1);
	var hex2 = validateHex(color2);

	// 1.
	var f = parseInt(hex1, 16);
	var t = parseInt(hex2, 16);

	var R1 = f >> 16;
	var G1 = f >> 8 & 0x00FF;
	var B1 = f & 0x0000FF;

	var R2 = t >> 16;
	var G2 = t >> 8 & 0x00FF;
	var B2 = t & 0x0000FF;

	// 2.
	return '#' + (0x1000000 + (Math.round((R2 - R1) * decimalFraction) + R1) * 0x10000 + (Math.round((G2 - G1) * decimalFraction) + G1) * 0x100 + (Math.round((B2 - B1) * decimalFraction) + B1)).toString(16).slice(1);
}

module.exports = {
	blend: blend,
	darken: darken,
	fade: fade,
	lighten: lighten
};

},{}],480:[function(require,module,exports){
"use strict";

// ======================
// Concatenate Classnames
// ======================
//
// Support className as an array:
// force classname prop into an array (possibly of arrays) then flatten

/*
	// To use spread the new array into aphrodite's `css` function

	function Component ({ className, ...props }) {
		props.className = css(
			classes.component,
			...concatClassnames(className)
		);

		return <Component {...props} />;
	};
*/

module.exports = function concatClassnames(className) {
	return [className].reduce(function (a, b) {
		return a.concat(b);
	}, []);
};

},{}],481:[function(require,module,exports){
'use strict';

/**
	Linear Gradient
	==============================

	Short-hand helper for adding a linear gradient to your component.

	- @param {String} sideOrCorner
	- @param {String} top
	- @param {String} bottom
	- @param {String} base (optional)
	- @returns {Object} css linear gradient declaration

	Spread the declaration into your component class:
	------------------------------

	myComponentClass: {
		...linearGradient(red, blue),
	}
*/

function linearGradient(direction, top, bottom) {
	var base = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

	return {
		background: 'linear-gradient(' + direction + ', ' + top + ' 0%, ' + bottom + ' 100%) ' + base
	};
}

// Vertical Gradient
function gradientVertical(top, bottom, base) {
	return linearGradient('to bottom', top, bottom, base);
}

// Horizontal Gradient
function gradientHorizontal(top, bottom, base) {
	return linearGradient('to right', top, bottom, base);
}

/**
	Border Radius
	==============================

	Short-hand helper for border radii
*/

// top
function borderTopRadius(radius) {
	return {
		borderTopLeftRadius: radius,
		borderTopRightRadius: radius
	};
}

// right
function borderRightRadius(radius) {
	return {
		borderBottomRightRadius: radius,
		borderTopRightRadius: radius
	};
}

// bottom
function borderBottomRadius(radius) {
	return {
		borderBottomLeftRadius: radius,
		borderBottomRightRadius: radius
	};
}

// left
function borderLeftRadius(radius) {
	return {
		borderBottomLeftRadius: radius,
		borderTopLeftRadius: radius
	};
}

// Return

module.exports = {
	borderTopRadius: borderTopRadius,
	borderRightRadius: borderRightRadius,
	borderBottomRadius: borderBottomRadius,
	borderLeftRadius: borderLeftRadius,

	gradientHorizontal: gradientHorizontal,
	gradientVertical: gradientVertical
};

},{}],482:[function(require,module,exports){
'use strict';

var _List = require('./List');

var _List2 = _interopRequireDefault(_List);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.listsByKey = {}; /**
                          * Exports an object of lists, keyed with their key instead of their name and
                          * wrapped with the List helper (./List.js)
                          */

exports.listsByPath = {};

for (var key in Keystone.lists) {
	// Guard for-ins
	if ({}.hasOwnProperty.call(Keystone.lists, key)) {
		var list = new _List2.default(Keystone.lists[key]);
		exports.listsByKey[key] = list;
		exports.listsByPath[list.path] = list;
	}
}

},{"./List":478}],483:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.checkForQueryChange = checkForQueryChange;
exports.normaliseValue = normaliseValue;
exports.createSortQueryParams = createSortQueryParams;
exports.createPageQueryParams = createPageQueryParams;
exports.updateQueryParams = updateQueryParams;
exports.stringifyColumns = stringifyColumns;
exports.parametizeFilters = parametizeFilters;

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _blacklist = require('blacklist');

var _blacklist2 = _interopRequireDefault(_blacklist);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function checkForQueryChange(nextProps, thisProps) {
	var query = nextProps.location.query;
	var cachedQuery = nextProps.active.cachedQuery;


	var parsedQuery = _extends({}, query, { page: parseInt(query.page) });

	if (!parsedQuery.page) delete parsedQuery.page;

	var attenuatedQuery = (0, _blacklist2.default)(parsedQuery, 'search');
	var attenuatedCache = (0, _blacklist2.default)(cachedQuery, 'search');

	if (nextProps.location.pathname !== thisProps.location.pathname) return true;

	if (!(0, _isEqual2.default)(attenuatedQuery, attenuatedCache)) return true;

	return false;
}

function normaliseValue(value, benchmark) {
	if (value === benchmark) return void 0;
	return value;
}

function createSortQueryParams(rawInput, defaultSort) {
	return normaliseValue(rawInput, defaultSort);
}

function createPageQueryParams(page, defaultValue) {
	return normaliseValue(page, defaultValue);
}

/**
 * Updates the query parameters with the ones passed as the first argument
 *
 * @param  {Object} params         The new parameters to be added
 * @param  {Object} location       The current location object
 */
function updateQueryParams(params, location) {
	if (!location) return;
	var newParams = (0, _objectAssign2.default)({}, location.query);
	// Stringify nested objects inside the parameters
	Object.keys(params).forEach(function (i) {
		if (params[i]) {
			newParams[i] = params[i];
			if (_typeof(newParams[i]) === 'object') {
				newParams[i] = JSON.stringify(newParams[i]);
			}
		} else {
			delete newParams[i];
		}
	});

	return newParams;
}

/**
 * Stringify the columns array from the state
 *
 * @param  {Array}  columns            The columns from the active state
 * @param  {String} defaultColumnPaths The default column paths of the current list
 *
 * @return {String}                    The column array, stringified
 */
function stringifyColumns(columns, defaultColumnPaths) {
	if (!columns) {
		return;
	}
	// Turns [{ path: 'someColumn' }, { path: 'someOtherColumn' }]
	// into ['someColumn', 'someOtherColumn']
	var columnString = columns.map(function (column) {
		return column.path;
	});
	// Turns that array into 'someColumn,someOtherColumn'
	if (Array.isArray(columnString)) columnString = columnString.join(',');
	// If that is the same as the default columns, don't set the query param
	if (columnString === defaultColumnPaths) columnString = undefined;
	return columnString;
}

/**
 * Flattens filters from state into the minimum needed object to be used as a url
 * param
 *
 * @param  {Object} filterArray         The array of filters from state
 */
function parametizeFilters(filterArray) {
	if (!filterArray || filterArray.length === 0) {
		return;
	}
	return filterArray.map(function (filter) {
		return _extends({
			path: filter.field.path
		}, filter.value);
	});
}

},{"blacklist":undefined,"lodash/isEqual":567,"object-assign":577}],484:[function(require,module,exports){
'use strict';

var _i = require('i');

var _i2 = _interopRequireDefault(_i);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Displays the singular or plural of a string based on a number
 * or number of items in an array.
 *
 * If arity is 1, returns the plural form of the word.
 *
 * @param {String} count
 * @param {String} singular string
 * @param {String} plural string
 * @return {String} singular or plural, * is replaced with count
 * @api public
 */

/**
 * A few helper methods for strings
 */

exports.plural = function (count, sn, pl) {
  if (arguments.length === 1) {
    return _i2.default.pluralize(count);
  }
  if (typeof sn !== 'string') sn = '';
  if (!pl) {
    pl = _i2.default.pluralize(sn);
  }
  if (typeof count === 'string') {
    count = Number(count);
  } else if (typeof count !== 'number') {
    count = (0, _lodash.size)(count);
  }
  return (count === 1 ? sn : pl).replace('*', count);
};

/**
 * Converts the first letter in a string to uppercase
 *
 * @param {String} str
 * @return {String} Str
 * @api public
 */

exports.upcase = function (str) {
  if (str && str.toString) str = str.toString();
  if (typeof str !== 'string' || !str.length) return '';
  return str.substr(0, 1).toUpperCase() + str.substr(1);
};

/**
 * Converts the first letter in a string to lowercase
 *
 * @param {String} Str
 * @return {String} str
 * @api public
 */

exports.downcase = function (str) {
  if (str && str.toString) str = str.toString();
  if (typeof str !== 'string' || !str.length) return '';
  return str.substr(0, 1).toLowerCase() + str.substr(1);
};

/**
 * Converts a string to title case
 *
 * @param {String} str
 * @return {String} Title Case form of str
 * @api public
 */

exports.titlecase = function (str) {
  if (str && str.toString) str = str.toString();
  if (typeof str !== 'string' || !str.length) return '';
  str = str.replace(/([a-z])([A-Z])/g, '$1 $2');
  var parts = str.split(/\s|_|\-/);
  for (var i = 0; i < parts.length; i++) {
    if (parts[i] && !/^[A-Z0-9]+$/.test(parts[i])) {
      parts[i] = exports.upcase(parts[i]);
    }
  }
  return (0, _lodash.compact)(parts).join(' ');
};

/**
 * Converts a string to camel case
 *
 * @param {String} str
 * @param {Boolean} lowercaseFirstWord
 * @return {String} camel-case form of str
 * @api public
 */

exports.camelcase = function (str, lc) {
  return _i2.default.camelize(str, !lc);
};

},{"i":undefined,"lodash":undefined}],485:[function(require,module,exports){
'use strict';

var ExMatch = require('expression-match'); // Matches objects with expressions

/**
 * Checks if something is an object
 *
 * @param  {Any} arg   The something we want to check the type of
 * @return {Boolean} If arg is an object or not
 */
function isObject(arg) {
  return Object.prototype.toString.call(arg) === '[object Object]';
};

/**
 * Evaluates the visibility of a field based on its dependencies and their values
 *
 * @param  {Object|Any} dependsOn The dependsOn variable we get from the field
 * @param  {Object}		values    The values currently in the fields
 * @return {Boolean}			  If the current field should be displayed based
 *                          	  on it's dependencies and their values
 */
module.exports = function evalDependsOn(dependsOn, values) {
  if (!isObject(dependsOn) || !Object.keys(dependsOn).length) {
    return true;
  }

  // Checks if the current field should be displayed, based on the values of
  // other fields and the dependsOn configuration of this field
  var Match = new ExMatch(dependsOn, values, false);
  return Match.match();
};

},{"expression-match":undefined}],486:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

},{"./_getNative":521,"./_root":552}],487:[function(require,module,exports){
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

},{"./_hashClear":527,"./_hashDelete":528,"./_hashGet":529,"./_hashHas":530,"./_hashSet":531}],488:[function(require,module,exports){
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

},{"./_listCacheClear":536,"./_listCacheDelete":537,"./_listCacheGet":538,"./_listCacheHas":539,"./_listCacheSet":540}],489:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":521,"./_root":552}],490:[function(require,module,exports){
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

},{"./_mapCacheClear":541,"./_mapCacheDelete":542,"./_mapCacheGet":543,"./_mapCacheHas":544,"./_mapCacheSet":545}],491:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

},{"./_getNative":521,"./_root":552}],492:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

},{"./_getNative":521,"./_root":552}],493:[function(require,module,exports){
var MapCache = require('./_MapCache'),
    setCacheAdd = require('./_setCacheAdd'),
    setCacheHas = require('./_setCacheHas');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache();
    while (++index < length) {
        this.add(values[index]);
    }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

},{"./_MapCache":490,"./_setCacheAdd":553,"./_setCacheHas":554}],494:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_ListCache":488,"./_stackClear":556,"./_stackDelete":557,"./_stackGet":558,"./_stackHas":559,"./_stackSet":560}],495:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":552}],496:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":552}],497:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

},{"./_getNative":521,"./_root":552}],498:[function(require,module,exports){
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

},{}],499:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
    // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' ||
    // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') ||
    // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
    // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":511,"./_isIndex":532,"./isArguments":563,"./isArray":564,"./isBuffer":566,"./isTypedArray":573}],500:[function(require,module,exports){
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

},{}],501:[function(require,module,exports){
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],502:[function(require,module,exports){
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":562}],503:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isArray = require('./isArray');

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

},{"./_arrayPush":500,"./isArray":564}],504:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":495,"./_getRawTag":523,"./_objectToString":550}],505:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":504,"./isObjectLike":571}],506:[function(require,module,exports){
var baseIsEqualDeep = require('./_baseIsEqualDeep'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":507,"./isObjectLike":571}],507:[function(require,module,exports){
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

},{"./_Stack":494,"./_equalArrays":515,"./_equalByTag":516,"./_equalObjects":517,"./_getTag":525,"./isArray":564,"./isBuffer":566,"./isTypedArray":573}],508:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

},{"./_isMasked":534,"./_toSource":561,"./isFunction":568,"./isObject":570}],509:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":504,"./isLength":569,"./isObjectLike":571}],510:[function(require,module,exports){
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

},{"./_isPrototype":535,"./_nativeKeys":548}],511:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],512:[function(require,module,exports){
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],513:[function(require,module,exports){
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

},{}],514:[function(require,module,exports){
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

},{"./_root":552}],515:[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arraySome = require('./_arraySome'),
    cacheHas = require('./_cacheHas');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

},{"./_SetCache":493,"./_arraySome":501,"./_cacheHas":513}],516:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    eq = require('./eq'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == other + '';

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

},{"./_Symbol":495,"./_Uint8Array":496,"./_equalArrays":515,"./_mapToArray":546,"./_setToArray":555,"./eq":562}],517:[function(require,module,exports){
var getAllKeys = require('./_getAllKeys');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

},{"./_getAllKeys":519}],518:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],519:[function(require,module,exports){
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbols = require('./_getSymbols'),
    keys = require('./keys');

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

},{"./_baseGetAllKeys":503,"./_getSymbols":524,"./keys":574}],520:[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

module.exports = getMapData;

},{"./_isKeyable":533}],521:[function(require,module,exports){
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./_baseIsNative":508,"./_getValue":526}],522:[function(require,module,exports){
var overArg = require('./_overArg');

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;

},{"./_overArg":551}],523:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":495}],524:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    stubArray = require('./stubArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function (symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;

},{"./_arrayFilter":498,"./stubArray":575}],525:[function(require,module,exports){
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function (value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
            switch (ctorString) {
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
        }
        return result;
    };
}

module.exports = getTag;

},{"./_DataView":486,"./_Map":489,"./_Promise":491,"./_Set":492,"./_WeakMap":497,"./_baseGetTag":504,"./_toSource":561}],526:[function(require,module,exports){
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

},{}],527:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

},{"./_nativeCreate":547}],528:[function(require,module,exports){
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

},{}],529:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":547}],530:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

},{"./_nativeCreate":547}],531:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

},{"./_nativeCreate":547}],532:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;

},{}],533:[function(require,module,exports){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

module.exports = isKeyable;

},{}],534:[function(require,module,exports){
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

module.exports = isMasked;

},{"./_coreJsData":514}],535:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],536:[function(require,module,exports){
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

},{}],537:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

},{"./_assocIndexOf":502}],538:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

},{"./_assocIndexOf":502}],539:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

},{"./_assocIndexOf":502}],540:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

},{"./_assocIndexOf":502}],541:[function(require,module,exports){
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}

module.exports = mapCacheClear;

},{"./_Hash":487,"./_ListCache":488,"./_Map":489}],542:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

},{"./_getMapData":520}],543:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

},{"./_getMapData":520}],544:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

},{"./_getMapData":520}],545:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

},{"./_getMapData":520}],546:[function(require,module,exports){
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function (value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

},{}],547:[function(require,module,exports){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":521}],548:[function(require,module,exports){
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

},{"./_overArg":551}],549:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = function () {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();

module.exports = nodeUtil;

},{"./_freeGlobal":518}],550:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],551:[function(require,module,exports){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],552:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":518}],553:[function(require,module,exports){
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

},{}],554:[function(require,module,exports){
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

},{}],555:[function(require,module,exports){
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

},{}],556:[function(require,module,exports){
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}

module.exports = stackClear;

},{"./_ListCache":488}],557:[function(require,module,exports){
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

},{}],558:[function(require,module,exports){
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

},{}],559:[function(require,module,exports){
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

},{}],560:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

},{"./_ListCache":488,"./_Map":489,"./_MapCache":490}],561:[function(require,module,exports){
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return func + '';
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],562:[function(require,module,exports){
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

module.exports = eq;

},{}],563:[function(require,module,exports){
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function () {
    return arguments;
}()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":505,"./isObjectLike":571}],564:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],565:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":568,"./isLength":569}],566:[function(require,module,exports){
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":552,"./stubFalse":576}],567:[function(require,module,exports){
var baseIsEqual = require('./_baseIsEqual');

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;

},{"./_baseIsEqual":506}],568:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
    if (!isObject(value)) {
        return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":504,"./isObject":570}],569:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],570:[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],571:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],572:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    getPrototype = require('./_getPrototype'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

},{"./_baseGetTag":504,"./_getPrototype":522,"./isObjectLike":571}],573:[function(require,module,exports){
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":509,"./_baseUnary":512,"./_nodeUtil":549}],574:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{"./_arrayLikeKeys":499,"./_baseKeys":510,"./isArrayLike":565}],575:[function(require,module,exports){
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

},{}],576:[function(require,module,exports){
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}],577:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],578:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],579:[function(require,module,exports){
module.exports = require('./lib/effects');

},{"./lib/effects":580}],580:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _io = require('./internal/io');

Object.defineProperty(exports, 'take', {
  enumerable: true,
  get: function get() {
    return _io.take;
  }
});
Object.defineProperty(exports, 'takem', {
  enumerable: true,
  get: function get() {
    return _io.takem;
  }
});
Object.defineProperty(exports, 'put', {
  enumerable: true,
  get: function get() {
    return _io.put;
  }
});
Object.defineProperty(exports, 'race', {
  enumerable: true,
  get: function get() {
    return _io.race;
  }
});
Object.defineProperty(exports, 'call', {
  enumerable: true,
  get: function get() {
    return _io.call;
  }
});
Object.defineProperty(exports, 'apply', {
  enumerable: true,
  get: function get() {
    return _io.apply;
  }
});
Object.defineProperty(exports, 'cps', {
  enumerable: true,
  get: function get() {
    return _io.cps;
  }
});
Object.defineProperty(exports, 'fork', {
  enumerable: true,
  get: function get() {
    return _io.fork;
  }
});
Object.defineProperty(exports, 'spawn', {
  enumerable: true,
  get: function get() {
    return _io.spawn;
  }
});
Object.defineProperty(exports, 'join', {
  enumerable: true,
  get: function get() {
    return _io.join;
  }
});
Object.defineProperty(exports, 'cancel', {
  enumerable: true,
  get: function get() {
    return _io.cancel;
  }
});
Object.defineProperty(exports, 'select', {
  enumerable: true,
  get: function get() {
    return _io.select;
  }
});
Object.defineProperty(exports, 'actionChannel', {
  enumerable: true,
  get: function get() {
    return _io.actionChannel;
  }
});
Object.defineProperty(exports, 'cancelled', {
  enumerable: true,
  get: function get() {
    return _io.cancelled;
  }
});
Object.defineProperty(exports, 'flush', {
  enumerable: true,
  get: function get() {
    return _io.flush;
  }
});
Object.defineProperty(exports, 'takeEvery', {
  enumerable: true,
  get: function get() {
    return _io.takeEvery;
  }
});
Object.defineProperty(exports, 'takeLatest', {
  enumerable: true,
  get: function get() {
    return _io.takeLatest;
  }
});
Object.defineProperty(exports, 'throttle', {
  enumerable: true,
  get: function get() {
    return _io.throttle;
  }
});

},{"./internal/io":583}],581:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buffers = exports.BUFFER_OVERFLOW = undefined;

var _utils = require('./utils');

var BUFFER_OVERFLOW = exports.BUFFER_OVERFLOW = 'Channel\'s Buffer overflow!';

var ON_OVERFLOW_THROW = 1;
var ON_OVERFLOW_DROP = 2;
var ON_OVERFLOW_SLIDE = 3;
var ON_OVERFLOW_EXPAND = 4;

var zeroBuffer = { isEmpty: _utils.kTrue, put: _utils.noop, take: _utils.noop };

function ringBuffer() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
  var overflowAction = arguments[1];

  var arr = new Array(limit);
  var length = 0;
  var pushIndex = 0;
  var popIndex = 0;

  var push = function push(it) {
    arr[pushIndex] = it;
    pushIndex = (pushIndex + 1) % limit;
    length++;
  };

  var take = function take() {
    if (length != 0) {
      var it = arr[popIndex];
      arr[popIndex] = null;
      length--;
      popIndex = (popIndex + 1) % limit;
      return it;
    }
  };

  var flush = function flush() {
    var items = [];
    while (length) {
      items.push(take());
    }
    return items;
  };

  return {
    isEmpty: function isEmpty() {
      return length == 0;
    },
    put: function put(it) {
      if (length < limit) {
        push(it);
      } else {
        var doubledLimit = void 0;
        switch (overflowAction) {
          case ON_OVERFLOW_THROW:
            throw new Error(BUFFER_OVERFLOW);
          case ON_OVERFLOW_SLIDE:
            arr[pushIndex] = it;
            pushIndex = (pushIndex + 1) % limit;
            popIndex = pushIndex;
            break;
          case ON_OVERFLOW_EXPAND:
            doubledLimit = 2 * limit;

            arr = flush();

            length = arr.length;
            pushIndex = arr.length;
            popIndex = 0;

            arr.length = doubledLimit;
            limit = doubledLimit;

            push(it);
            break;
          default:
          // DROP
        }
      }
    },
    take: take, flush: flush
  };
}

var buffers = exports.buffers = {
  none: function none() {
    return zeroBuffer;
  },
  fixed: function fixed(limit) {
    return ringBuffer(limit, ON_OVERFLOW_THROW);
  },
  dropping: function dropping(limit) {
    return ringBuffer(limit, ON_OVERFLOW_DROP);
  },
  sliding: function sliding(limit) {
    return ringBuffer(limit, ON_OVERFLOW_SLIDE);
  },
  expanding: function expanding(initialSize) {
    return ringBuffer(initialSize, ON_OVERFLOW_EXPAND);
  }
};

},{"./utils":586}],582:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UNDEFINED_INPUT_ERROR = exports.INVALID_BUFFER = exports.isEnd = exports.END = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.emitter = emitter;
exports.channel = channel;
exports.eventChannel = eventChannel;
exports.stdChannel = stdChannel;

var _utils = require('./utils');

var _buffers = require('./buffers');

var _scheduler = require('./scheduler');

var CHANNEL_END_TYPE = '@@redux-saga/CHANNEL_END';
var END = exports.END = { type: CHANNEL_END_TYPE };
var isEnd = exports.isEnd = function isEnd(a) {
  return a && a.type === CHANNEL_END_TYPE;
};

function emitter() {
  var subscribers = [];

  function subscribe(sub) {
    subscribers.push(sub);
    return function () {
      return (0, _utils.remove)(subscribers, sub);
    };
  }

  function emit(item) {
    var arr = subscribers.slice();
    for (var i = 0, len = arr.length; i < len; i++) {
      arr[i](item);
    }
  }

  return {
    subscribe: subscribe,
    emit: emit
  };
}

var INVALID_BUFFER = exports.INVALID_BUFFER = 'invalid buffer passed to channel factory function';
var UNDEFINED_INPUT_ERROR = exports.UNDEFINED_INPUT_ERROR = 'Saga was provided with an undefined action';

if (process.env.NODE_ENV !== 'production') {
  exports.UNDEFINED_INPUT_ERROR = UNDEFINED_INPUT_ERROR += '\nHints:\n    - check that your Action Creator returns a non-undefined value\n    - if the Saga was started using runSaga, check that your subscribe source provides the action to its listeners\n  ';
}

function channel() {
  var buffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _buffers.buffers.fixed();

  var closed = false;
  var takers = [];

  (0, _utils.check)(buffer, _utils.is.buffer, INVALID_BUFFER);

  function checkForbiddenStates() {
    if (closed && takers.length) {
      throw (0, _utils.internalErr)('Cannot have a closed channel with pending takers');
    }
    if (takers.length && !buffer.isEmpty()) {
      throw (0, _utils.internalErr)('Cannot have pending takers with non empty buffer');
    }
  }

  function put(input) {
    checkForbiddenStates();
    (0, _utils.check)(input, _utils.is.notUndef, UNDEFINED_INPUT_ERROR);
    if (closed) {
      return;
    }
    if (!takers.length) {
      return buffer.put(input);
    }
    for (var i = 0; i < takers.length; i++) {
      var cb = takers[i];
      if (!cb[_utils.MATCH] || cb[_utils.MATCH](input)) {
        takers.splice(i, 1);
        return cb(input);
      }
    }
  }

  function take(cb) {
    checkForbiddenStates();
    (0, _utils.check)(cb, _utils.is.func, 'channel.take\'s callback must be a function');

    if (closed && buffer.isEmpty()) {
      cb(END);
    } else if (!buffer.isEmpty()) {
      cb(buffer.take());
    } else {
      takers.push(cb);
      cb.cancel = function () {
        return (0, _utils.remove)(takers, cb);
      };
    }
  }

  function flush(cb) {
    checkForbiddenStates(); // TODO: check if some new state should be forbidden now
    (0, _utils.check)(cb, _utils.is.func, 'channel.flush\' callback must be a function');
    if (closed && buffer.isEmpty()) {
      cb(END);
      return;
    }
    cb(buffer.flush());
  }

  function close() {
    checkForbiddenStates();
    if (!closed) {
      closed = true;
      if (takers.length) {
        var arr = takers;
        takers = [];
        for (var i = 0, len = arr.length; i < len; i++) {
          arr[i](END);
        }
      }
    }
  }

  return { take: take, put: put, flush: flush, close: close,
    get __takers__() {
      return takers;
    },
    get __closed__() {
      return closed;
    }
  };
}

function eventChannel(subscribe) {
  var buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _buffers.buffers.none();
  var matcher = arguments[2];

  /**
    should be if(typeof matcher !== undefined) instead?
    see PR #273 for a background discussion
  **/
  if (arguments.length > 2) {
    (0, _utils.check)(matcher, _utils.is.func, 'Invalid match function passed to eventChannel');
  }

  var chan = channel(buffer);
  var unsubscribe = subscribe(function (input) {
    if (isEnd(input)) {
      chan.close();
      return;
    }
    if (matcher && !matcher(input)) {
      return;
    }
    chan.put(input);
  });

  if (!_utils.is.func(unsubscribe)) {
    throw new Error('in eventChannel: subscribe should return a function to unsubscribe');
  }

  return {
    take: chan.take,
    flush: chan.flush,
    close: function close() {
      if (!chan.__closed__) {
        chan.close();
        unsubscribe();
      }
    }
  };
}

function stdChannel(subscribe) {
  var chan = eventChannel(function (cb) {
    return subscribe(function (input) {
      if (input[_utils.SAGA_ACTION]) {
        cb(input);
        return;
      }
      (0, _scheduler.asap)(function () {
        return cb(input);
      });
    });
  });

  return _extends({}, chan, {
    take: function take(cb, matcher) {
      if (arguments.length > 1) {
        (0, _utils.check)(matcher, _utils.is.func, 'channel.take\'s matcher argument must be a function');
        cb[_utils.MATCH] = matcher;
      }
      chan.take(cb);
    }
  });
}

}).call(this,require('_process'))

},{"./buffers":581,"./scheduler":585,"./utils":586,"_process":578}],583:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asEffect = exports.takem = undefined;

var _slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;_e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }return _arr;
  }return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

exports.take = take;
exports.put = put;
exports.race = race;
exports.call = call;
exports.apply = apply;
exports.cps = cps;
exports.fork = fork;
exports.spawn = spawn;
exports.join = join;
exports.cancel = cancel;
exports.select = select;
exports.actionChannel = actionChannel;
exports.cancelled = cancelled;
exports.flush = flush;
exports.takeEvery = takeEvery;
exports.takeLatest = takeLatest;
exports.throttle = throttle;

var _utils = require('./utils');

var _sagaHelpers = require('./sagaHelpers');

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var IO = (0, _utils.sym)('IO');
var TAKE = 'TAKE';
var PUT = 'PUT';
var RACE = 'RACE';
var CALL = 'CALL';
var CPS = 'CPS';
var FORK = 'FORK';
var JOIN = 'JOIN';
var CANCEL = 'CANCEL';
var SELECT = 'SELECT';
var ACTION_CHANNEL = 'ACTION_CHANNEL';
var CANCELLED = 'CANCELLED';
var FLUSH = 'FLUSH';

var deprecationWarning = function deprecationWarning(deprecated, preferred) {
  return deprecated + ' has been deprecated in favor of ' + preferred + ', please update your code';
};

var effect = function effect(type, payload) {
  var _ref;

  return _ref = {}, _defineProperty(_ref, IO, true), _defineProperty(_ref, type, payload), _ref;
};

function take() {
  var patternOrChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';

  if (arguments.length) {
    (0, _utils.check)(arguments[0], _utils.is.notUndef, 'take(patternOrChannel): patternOrChannel is undefined');
  }
  if (_utils.is.pattern(patternOrChannel)) {
    return effect(TAKE, { pattern: patternOrChannel });
  }
  if (_utils.is.channel(patternOrChannel)) {
    return effect(TAKE, { channel: patternOrChannel });
  }
  throw new Error('take(patternOrChannel): argument ' + String(patternOrChannel) + ' is not valid channel or a valid pattern');
}

take.maybe = function () {
  var eff = take.apply(undefined, arguments);
  eff[TAKE].maybe = true;
  return eff;
};

var takem = exports.takem = (0, _utils.deprecate)(take.maybe, deprecationWarning('takem', 'take.maybe'));

function put(channel, action) {
  if (arguments.length > 1) {
    (0, _utils.check)(channel, _utils.is.notUndef, 'put(channel, action): argument channel is undefined');
    (0, _utils.check)(channel, _utils.is.channel, 'put(channel, action): argument ' + channel + ' is not a valid channel');
    (0, _utils.check)(action, _utils.is.notUndef, 'put(channel, action): argument action is undefined');
  } else {
    (0, _utils.check)(channel, _utils.is.notUndef, 'put(action): argument action is undefined');
    action = channel;
    channel = null;
  }
  return effect(PUT, { channel: channel, action: action });
}

put.resolve = function () {
  var eff = put.apply(undefined, arguments);
  eff[PUT].resolve = true;
  return eff;
};

put.sync = (0, _utils.deprecate)(put.resolve, deprecationWarning('put.sync', 'put.resolve'));

function race(effects) {
  return effect(RACE, effects);
}

function getFnCallDesc(meth, fn, args) {
  (0, _utils.check)(fn, _utils.is.notUndef, meth + ': argument fn is undefined');

  var context = null;
  if (_utils.is.array(fn)) {
    var _fn = fn;

    var _fn2 = _slicedToArray(_fn, 2);

    context = _fn2[0];
    fn = _fn2[1];
  } else if (fn.fn) {
    var _fn3 = fn;
    context = _fn3.context;
    fn = _fn3.fn;
  }
  (0, _utils.check)(fn, _utils.is.func, meth + ': argument ' + fn + ' is not a function');

  return { context: context, fn: fn, args: args };
}

function call(fn) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return effect(CALL, getFnCallDesc('call', fn, args));
}

function apply(context, fn) {
  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  return effect(CALL, getFnCallDesc('apply', { context: context, fn: fn }, args));
}

function cps(fn) {
  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  return effect(CPS, getFnCallDesc('cps', fn, args));
}

function fork(fn) {
  for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return effect(FORK, getFnCallDesc('fork', fn, args));
}

function spawn(fn) {
  for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  var eff = fork.apply(undefined, [fn].concat(args));
  eff[FORK].detached = true;
  return eff;
}

var isForkedTask = function isForkedTask(task) {
  return task[_utils.TASK];
};

function join(task) {
  if (_utils.is.array(task)) {
    return task.map(join);
  }
  (0, _utils.check)(task, _utils.is.notUndef, 'join(task): argument task is undefined');
  if (!isForkedTask(task)) {
    throw new Error('join(task): argument ' + task + ' is not a valid Task object \n(HINT: if you are getting this errors in tests, consider using createMockTask from redux-saga/utils)');
  }

  return effect(JOIN, task);
}

function cancel(task) {
  (0, _utils.check)(task, _utils.is.notUndef, 'cancel(task): argument task is undefined');
  if (!isForkedTask(task)) {
    throw new Error('cancel(task): argument ' + task + ' is not a valid Task object \n(HINT: if you are getting this errors in tests, consider using createMockTask from redux-saga/utils)');
  }

  return effect(CANCEL, task);
}

function select(selector) {
  for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }

  if (arguments.length === 0) {
    selector = _utils.ident;
  } else {
    (0, _utils.check)(selector, _utils.is.notUndef, 'select(selector,[...]): argument selector is undefined');
    (0, _utils.check)(selector, _utils.is.func, 'select(selector,[...]): argument ' + selector + ' is not a function');
  }
  return effect(SELECT, { selector: selector, args: args });
}

/**
  channel(pattern, [buffer])    => creates an event channel for store actions
**/
function actionChannel(pattern, buffer) {
  (0, _utils.check)(pattern, _utils.is.notUndef, 'actionChannel(pattern,...): argument pattern is undefined');
  if (arguments.length > 1) {
    (0, _utils.check)(buffer, _utils.is.notUndef, 'actionChannel(pattern, buffer): argument buffer is undefined');
    (0, _utils.check)(buffer, _utils.is.buffer, 'actionChannel(pattern, buffer): argument ' + buffer + ' is not a valid buffer');
  }
  return effect(ACTION_CHANNEL, { pattern: pattern, buffer: buffer });
}

function cancelled() {
  return effect(CANCELLED, {});
}

function flush(channel) {
  (0, _utils.check)(channel, _utils.is.channel, 'flush(channel): argument ' + channel + ' is not valid channel');
  return effect(FLUSH, channel);
}

function takeEvery(patternOrChannel, worker) {
  for (var _len6 = arguments.length, args = Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
    args[_key6 - 2] = arguments[_key6];
  }

  return fork.apply(undefined, [_sagaHelpers.takeEveryHelper, patternOrChannel, worker].concat(args));
}

function takeLatest(patternOrChannel, worker) {
  for (var _len7 = arguments.length, args = Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {
    args[_key7 - 2] = arguments[_key7];
  }

  return fork.apply(undefined, [_sagaHelpers.takeLatestHelper, patternOrChannel, worker].concat(args));
}

function throttle(ms, pattern, worker) {
  for (var _len8 = arguments.length, args = Array(_len8 > 3 ? _len8 - 3 : 0), _key8 = 3; _key8 < _len8; _key8++) {
    args[_key8 - 3] = arguments[_key8];
  }

  return fork.apply(undefined, [_sagaHelpers.throttleHelper, ms, pattern, worker].concat(args));
}

var createAsEffectType = function createAsEffectType(type) {
  return function (effect) {
    return effect && effect[IO] && effect[type];
  };
};

var asEffect = exports.asEffect = {
  take: createAsEffectType(TAKE),
  put: createAsEffectType(PUT),
  race: createAsEffectType(RACE),
  call: createAsEffectType(CALL),
  cps: createAsEffectType(CPS),
  fork: createAsEffectType(FORK),
  join: createAsEffectType(JOIN),
  cancel: createAsEffectType(CANCEL),
  select: createAsEffectType(SELECT),
  actionChannel: createAsEffectType(ACTION_CHANNEL),
  cancelled: createAsEffectType(CANCELLED),
  flush: createAsEffectType(FLUSH)
};

},{"./sagaHelpers":584,"./utils":586}],584:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throttle = exports.takeLatest = exports.takeEvery = undefined;

var _slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;_e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }return _arr;
  }return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

exports.takeEveryHelper = takeEveryHelper;
exports.takeLatestHelper = takeLatestHelper;
exports.throttleHelper = throttleHelper;

var _channel = require('./channel');

var _utils = require('./utils');

var _io = require('./io');

var _buffers = require('./buffers');

var done = { done: true, value: undefined };
var qEnd = {};

function fsmIterator(fsm, q0) {
  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'iterator';

  var updateState = void 0,
      qNext = q0;

  function next(arg, error) {
    if (qNext === qEnd) {
      return done;
    }

    if (error) {
      qNext = qEnd;
      throw error;
    } else {
      updateState && updateState(arg);

      var _fsm$qNext = fsm[qNext](),
          _fsm$qNext2 = _slicedToArray(_fsm$qNext, 3),
          q = _fsm$qNext2[0],
          output = _fsm$qNext2[1],
          _updateState = _fsm$qNext2[2];

      qNext = q;
      updateState = _updateState;
      return qNext === qEnd ? done : output;
    }
  }

  return (0, _utils.makeIterator)(next, function (error) {
    return next(null, error);
  }, name, true);
}

function safeName(patternOrChannel) {
  if (_utils.is.channel(patternOrChannel)) {
    return 'channel';
  } else if (Array.isArray(patternOrChannel)) {
    return String(patternOrChannel.map(function (entry) {
      return String(entry);
    }));
  } else {
    return String(patternOrChannel);
  }
}

function takeEveryHelper(patternOrChannel, worker) {
  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var yTake = { done: false, value: (0, _io.take)(patternOrChannel) };
  var yFork = function yFork(ac) {
    return { done: false, value: _io.fork.apply(undefined, [worker].concat(args, [ac])) };
  };

  var action = void 0,
      setAction = function setAction(ac) {
    return action = ac;
  };

  return fsmIterator({
    q1: function q1() {
      return ['q2', yTake, setAction];
    },
    q2: function q2() {
      return action === _channel.END ? [qEnd] : ['q1', yFork(action)];
    }
  }, 'q1', 'takeEvery(' + safeName(patternOrChannel) + ', ' + worker.name + ')');
}

function takeLatestHelper(patternOrChannel, worker) {
  for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    args[_key2 - 2] = arguments[_key2];
  }

  var yTake = { done: false, value: (0, _io.take)(patternOrChannel) };
  var yFork = function yFork(ac) {
    return { done: false, value: _io.fork.apply(undefined, [worker].concat(args, [ac])) };
  };
  var yCancel = function yCancel(task) {
    return { done: false, value: (0, _io.cancel)(task) };
  };

  var task = void 0,
      action = void 0;
  var setTask = function setTask(t) {
    return task = t;
  };
  var setAction = function setAction(ac) {
    return action = ac;
  };

  return fsmIterator({
    q1: function q1() {
      return ['q2', yTake, setAction];
    },
    q2: function q2() {
      return action === _channel.END ? [qEnd] : task ? ['q3', yCancel(task)] : ['q1', yFork(action), setTask];
    },
    q3: function q3() {
      return ['q1', yFork(action), setTask];
    }
  }, 'q1', 'takeLatest(' + safeName(patternOrChannel) + ', ' + worker.name + ')');
}

function throttleHelper(delayLength, pattern, worker) {
  for (var _len3 = arguments.length, args = Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
    args[_key3 - 3] = arguments[_key3];
  }

  var action = void 0,
      channel = void 0;

  var yActionChannel = { done: false, value: (0, _io.actionChannel)(pattern, _buffers.buffers.sliding(1)) };
  var yTake = function yTake() {
    return { done: false, value: (0, _io.take)(channel, pattern) };
  };
  var yFork = function yFork(ac) {
    return { done: false, value: _io.fork.apply(undefined, [worker].concat(args, [ac])) };
  };
  var yDelay = { done: false, value: (0, _io.call)(_utils.delay, delayLength) };

  var setAction = function setAction(ac) {
    return action = ac;
  };
  var setChannel = function setChannel(ch) {
    return channel = ch;
  };

  return fsmIterator({
    q1: function q1() {
      return ['q2', yActionChannel, setChannel];
    },
    q2: function q2() {
      return ['q3', yTake(), setAction];
    },
    q3: function q3() {
      return action === _channel.END ? [qEnd] : ['q4', yFork(action)];
    },
    q4: function q4() {
      return ['q2', yDelay];
    }
  }, 'q1', 'throttle(' + safeName(pattern) + ', ' + worker.name + ')');
}

var deprecationWarning = function deprecationWarning(helperName) {
  return 'import ' + helperName + ' from \'redux-saga\' has been deprecated in favor of import ' + helperName + ' from \'redux-saga/effects\'.\nThe latter will not work with yield*, as helper effects are wrapped automatically for you in fork effect.\nTherefore yield ' + helperName + ' will return task descriptor to your saga and execute next lines of code.';
};
var takeEvery = exports.takeEvery = (0, _utils.deprecate)(takeEveryHelper, deprecationWarning('takeEvery'));
var takeLatest = exports.takeLatest = (0, _utils.deprecate)(takeLatestHelper, deprecationWarning('takeLatest'));
var throttle = exports.throttle = (0, _utils.deprecate)(throttleHelper, deprecationWarning('throttle'));

},{"./buffers":581,"./channel":582,"./io":583,"./utils":586}],585:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asap = asap;
exports.suspend = suspend;
exports.flush = flush;

var queue = [];
/**
  Variable to hold a counting semaphore
  - Incrementing adds a lock and puts the scheduler in a `suspended` state (if it's not
    already suspended)
  - Decrementing releases a lock. Zero locks puts the scheduler in a `released` state. This
    triggers flushing the queued tasks.
**/
var semaphore = 0;

/**
  Executes a task 'atomically'. Tasks scheduled during this execution will be queued
  and flushed after this task has finished (assuming the scheduler endup in a released
  state).
**/
function exec(task) {
  try {
    suspend();
    task();
  } finally {
    flush();
  }
}

/**
  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)
**/
function asap(task) {
  if (!semaphore) {
    exec(task);
  } else {
    queue.push(task);
  }
}

/**
  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the
  scheduler is released.
**/
function suspend() {
  semaphore++;
}

/**
  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.
**/
function flush() {
  semaphore--;
  if (!semaphore && queue.length) {
    exec(queue.shift());
  }
}

},{}],586:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

exports.check = check;
exports.hasOwn = hasOwn;
exports.remove = remove;
exports.deferred = deferred;
exports.arrayOfDeffered = arrayOfDeffered;
exports.delay = delay;
exports.createMockTask = createMockTask;
exports.autoInc = autoInc;
exports.makeIterator = makeIterator;
exports.log = log;
exports.deprecate = deprecate;
exports.wrapSagaDispatch = wrapSagaDispatch;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var sym = exports.sym = function sym(id) {
  return '@@redux-saga/' + id;
};
var TASK = exports.TASK = sym('TASK');
var HELPER = exports.HELPER = sym('HELPER');
var MATCH = exports.MATCH = sym('MATCH');
var CANCEL = exports.CANCEL = sym('cancelPromise');
var SAGA_ACTION = exports.SAGA_ACTION = sym('SAGA_ACTION');
var konst = exports.konst = function konst(v) {
  return function () {
    return v;
  };
};
var kTrue = exports.kTrue = konst(true);
var kFalse = exports.kFalse = konst(false);
var noop = exports.noop = function noop() {};
var ident = exports.ident = function ident(v) {
  return v;
};

var isDev = exports.isDev = process.env.NODE_ENV === 'development';

function check(value, predicate, error) {
  if (!predicate(value)) {
    log('error', 'uncaught at check', error);
    throw new Error(error);
  }
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn(object, property) {
  return is.notUndef(object) && hasOwnProperty.call(object, property);
}

var is = exports.is = {
  undef: function undef(v) {
    return v === null || v === undefined;
  },
  notUndef: function notUndef(v) {
    return v !== null && v !== undefined;
  },
  func: function func(f) {
    return typeof f === 'function';
  },
  number: function number(n) {
    return typeof n === 'number';
  },
  array: Array.isArray,
  promise: function promise(p) {
    return p && is.func(p.then);
  },
  iterator: function iterator(it) {
    return it && is.func(it.next) && is.func(it.throw);
  },
  task: function task(t) {
    return t && t[TASK];
  },
  observable: function observable(ob) {
    return ob && is.func(ob.subscribe);
  },
  buffer: function buffer(buf) {
    return buf && is.func(buf.isEmpty) && is.func(buf.take) && is.func(buf.put);
  },
  pattern: function pattern(pat) {
    return pat && (typeof pat === 'string' || (typeof pat === 'undefined' ? 'undefined' : _typeof(pat)) === 'symbol' || is.func(pat) || is.array(pat));
  },
  channel: function channel(ch) {
    return ch && is.func(ch.take) && is.func(ch.close);
  },
  helper: function helper(it) {
    return it && it[HELPER];
  },
  stringableFunc: function stringableFunc(f) {
    return is.func(f) && hasOwn(f, 'toString');
  }
};

function remove(array, item) {
  var index = array.indexOf(item);
  if (index >= 0) {
    array.splice(index, 1);
  }
}

function deferred() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var def = _extends({}, props);
  var promise = new Promise(function (resolve, reject) {
    def.resolve = resolve;
    def.reject = reject;
  });
  def.promise = promise;
  return def;
}

function arrayOfDeffered(length) {
  var arr = [];
  for (var i = 0; i < length; i++) {
    arr.push(deferred());
  }
  return arr;
}

function delay(ms) {
  var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  var timeoutId = void 0;
  var promise = new Promise(function (resolve) {
    timeoutId = setTimeout(function () {
      return resolve(val);
    }, ms);
  });

  promise[CANCEL] = function () {
    return clearTimeout(timeoutId);
  };

  return promise;
}

function createMockTask() {
  var _ref;

  var running = true;
  var _result = void 0,
      _error = void 0;

  return _ref = {}, _defineProperty(_ref, TASK, true), _defineProperty(_ref, 'isRunning', function isRunning() {
    return running;
  }), _defineProperty(_ref, 'result', function result() {
    return _result;
  }), _defineProperty(_ref, 'error', function error() {
    return _error;
  }), _defineProperty(_ref, 'setRunning', function setRunning(b) {
    return running = b;
  }), _defineProperty(_ref, 'setResult', function setResult(r) {
    return _result = r;
  }), _defineProperty(_ref, 'setError', function setError(e) {
    return _error = e;
  }), _ref;
}

function autoInc() {
  var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  return function () {
    return ++seed;
  };
}

var uid = exports.uid = autoInc();

var kThrow = function kThrow(err) {
  throw err;
};
var kReturn = function kReturn(value) {
  return { value: value, done: true };
};
function makeIterator(next) {
  var thro = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : kThrow;
  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var isHelper = arguments[3];

  var iterator = { name: name, next: next, throw: thro, return: kReturn };

  if (isHelper) {
    iterator[HELPER] = true;
  }
  if (typeof Symbol !== 'undefined') {
    iterator[Symbol.iterator] = function () {
      return iterator;
    };
  }
  return iterator;
}

/**
  Print error in a useful way whether in a browser environment
  (with expandable error stack traces), or in a node.js environment
  (text-only log output)
 **/
function log(level, message) {
  var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  /*eslint-disable no-console*/
  if (typeof window === 'undefined') {
    console.log('redux-saga ' + level + ': ' + message + '\n' + (error && error.stack || error));
  } else {
    console[level](message, error);
  }
}

function deprecate(fn, deprecationWarning) {
  return function () {
    if (isDev) log('warn', deprecationWarning);
    return fn.apply(undefined, arguments);
  };
}

var internalErr = exports.internalErr = function internalErr(err) {
  return new Error('\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project\'s github repo.\n  Error: ' + err + '\n');
};

function wrapSagaDispatch(dispatch) {
  return function sagaDispatch(action) {
    var wrappedAction = Object.defineProperty(action, SAGA_ACTION, { value: true });
    return dispatch(wrappedAction);
  };
}

}).call(this,require('_process'))

},{"_process":578}]},{},[400])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi4uLy4uLy4uL2JhYmVsLXBvbHlmaWxsL2xpYi9pbmRleC5qcyIsIi4uLy4uLy4uL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWNvcHktd2l0aGluLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fYmluZC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLWlzby1zdHJpbmcuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2NhbGUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fbWV0YWRhdGEuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZm9yY2VkLXBhbS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fcmVwbGFjZXIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLWZyb20uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5tYXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zZXQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ibGluay5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5mcm9tLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmltdWxoLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5vZi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5hdC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZi5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQub2YuanMiLCIuLi8uLi8uLi9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIi4uLy4uLy4uL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwiLi4vLi4vLi4vY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCIuLi8uLi8uLi9jb3JlLWpzL3NoaW0uanMiLCJBcHAvQXBwLmpzIiwiQXBwL2NvbXBvbmVudHMvRm9vdGVyL2luZGV4LmpzIiwiQXBwL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9Nb2JpbGUvTGlzdEl0ZW0uanMiLCJBcHAvY29tcG9uZW50cy9OYXZpZ2F0aW9uL01vYmlsZS9TZWN0aW9uSXRlbS5qcyIsIkFwcC9jb21wb25lbnRzL05hdmlnYXRpb24vTW9iaWxlL2luZGV4LmpzIiwiQXBwL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9QcmltYXJ5L05hdkl0ZW0uanMiLCJBcHAvY29tcG9uZW50cy9OYXZpZ2F0aW9uL1ByaW1hcnkvaW5kZXguanMiLCJBcHAvY29tcG9uZW50cy9OYXZpZ2F0aW9uL1NlY29uZGFyeS9OYXZJdGVtLmpzIiwiQXBwL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9TZWNvbmRhcnkvaW5kZXguanMiLCJBcHAvZWxlbWVudGFsL0FsZXJ0L2NvbG9ycy5qcyIsIkFwcC9lbGVtZW50YWwvQWxlcnQvaW5kZXguanMiLCJBcHAvZWxlbWVudGFsL0FsZXJ0L3N0eWxlcy5qcyIsIkFwcC9lbGVtZW50YWwvQmxhbmtTdGF0ZS9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvQnV0dG9uL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9CdXR0b24vc3R5bGVzLmpzIiwiQXBwL2VsZW1lbnRhbC9DZW50ZXIvaW5kZXguanMiLCJBcHAvZWxlbWVudGFsL0NlbnRlci9zdHlsZXMuanMiLCJBcHAvZWxlbWVudGFsL0NoaXAvY29sb3JzLmpzIiwiQXBwL2VsZW1lbnRhbC9DaGlwL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9DaGlwL3N0eWxlcy5qcyIsIkFwcC9lbGVtZW50YWwvQ29udGFpbmVyL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9Db250YWluZXIvc2l6ZXMuanMiLCJBcHAvZWxlbWVudGFsL0NvbnRhaW5lci9zdHlsZXMuanMiLCJBcHAvZWxlbWVudGFsL0Ryb3Bkb3duQnV0dG9uL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9Gb3JtRmllbGQvaW5kZXguanMiLCJBcHAvZWxlbWVudGFsL0Zvcm1GaWVsZC9zdHlsZXMuanMiLCJBcHAvZWxlbWVudGFsL0Zvcm1JbnB1dC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvRm9ybUlucHV0L25vZWRpdC5qcyIsIkFwcC9lbGVtZW50YWwvRm9ybUlucHV0L3N0eWxlcy5qcyIsIkFwcC9lbGVtZW50YWwvRm9ybUxhYmVsL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9Gb3JtTGFiZWwvc3R5bGVzLmpzIiwiQXBwL2VsZW1lbnRhbC9Gb3JtTm90ZS9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvRm9ybU5vdGUvc3R5bGVzLmpzIiwiQXBwL2VsZW1lbnRhbC9Gb3JtU2VsZWN0L2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9Gb3JtU2VsZWN0L3N0eWxlcy5qcyIsIkFwcC9lbGVtZW50YWwvRm9ybS9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvRm9ybS9zdHlsZXMuanMiLCJBcHAvZWxlbWVudGFsL0dseXBoQnV0dG9uL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9HbHlwaEZpZWxkL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9HbHlwaC9jb2xvcnMuanMiLCJBcHAvZWxlbWVudGFsL0dseXBoL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9HbHlwaC9vY3RpY29ucy5qcyIsIkFwcC9lbGVtZW50YWwvR2x5cGgvc2l6ZXMuanMiLCJBcHAvZWxlbWVudGFsL0dseXBoL3N0eWxlcy5qcyIsIkFwcC9lbGVtZW50YWwvR3JpZENvbC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvR3JpZFJvdy9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvR3JpZC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvSW5saW5lR3JvdXBTZWN0aW9uL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9JbmxpbmVHcm91cFNlY3Rpb24vc3R5bGVzLmpzIiwiQXBwL2VsZW1lbnRhbC9JbmxpbmVHcm91cC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvTGFiZWxsZWRDb250cm9sL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9MYWJlbGxlZENvbnRyb2wvc3R5bGVzLmpzIiwiQXBwL2VsZW1lbnRhbC9Mb2FkaW5nQnV0dG9uL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9Nb2RhbC9ib2R5LmpzIiwiQXBwL2VsZW1lbnRhbC9Nb2RhbC9kaWFsb2cuanMiLCJBcHAvZWxlbWVudGFsL01vZGFsL2Zvb3Rlci5qcyIsIkFwcC9lbGVtZW50YWwvTW9kYWwvaGVhZGVyLmpzIiwiQXBwL2VsZW1lbnRhbC9Nb2RhbC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvUGFnaW5hdGlvbi9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvUGFnaW5hdGlvbi9wYWdlLmpzIiwiQXBwL2VsZW1lbnRhbC9QYXNzQ29udGV4dC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvUG9ydGFsL2luZGV4LmpzIiwiQXBwL2VsZW1lbnRhbC9SZXNwb25zaXZlVGV4dC9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvU2NyZWVuUmVhZGVyT25seS9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvU2Nyb2xsTG9jay9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvU2VnbWVudGVkQ29udHJvbC9jb2xvcnMuanMiLCJBcHAvZWxlbWVudGFsL1NlZ21lbnRlZENvbnRyb2wvaW5kZXguanMiLCJBcHAvZWxlbWVudGFsL1NlZ21lbnRlZENvbnRyb2wvc3R5bGVzLmpzIiwiQXBwL2VsZW1lbnRhbC9TcGlubmVyL2NvbG9ycy5qcyIsIkFwcC9lbGVtZW50YWwvU3Bpbm5lci9pbmRleC5qcyIsIkFwcC9lbGVtZW50YWwvU3Bpbm5lci9zaXplcy5qcyIsIkFwcC9lbGVtZW50YWwvU3Bpbm5lci9zdHlsZXMuanMiLCJBcHAvZWxlbWVudGFsL2luZGV4LmpzIiwiQXBwL2luZGV4LmpzIiwiQXBwL3BhcnNlcnMvZmlsdGVycy5qcyIsIkFwcC9wYXJzZXJzL2luZGV4LmpzIiwiQXBwL3NhZ2FzL2luZGV4LmpzIiwiQXBwL3NhZ2FzL3F1ZXJ5UGFyYW1zU2FnYXMuanMiLCJBcHAvc2NyZWVucy9Ib21lL2FjdGlvbnMuanMiLCJBcHAvc2NyZWVucy9Ib21lL2NvbXBvbmVudHMvTGlzdFRpbGUuanMiLCJBcHAvc2NyZWVucy9Ib21lL2NvbXBvbmVudHMvTGlzdHMuanMiLCJBcHAvc2NyZWVucy9Ib21lL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIkFwcC9zY3JlZW5zL0hvbWUvY29uc3RhbnRzLmpzIiwiQXBwL3NjcmVlbnMvSG9tZS9pbmRleC5qcyIsIkFwcC9zY3JlZW5zL0hvbWUvcmVkdWNlci5qcyIsIkFwcC9zY3JlZW5zL0hvbWUvdXRpbHMvZ2V0UmVsYXRlZEljb25DbGFzcy5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vYWN0aW9ucy5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vY29tcG9uZW50cy9BbHRUZXh0LmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0RyaWxsZG93bi5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vY29tcG9uZW50cy9EcmlsbGRvd25JdGVtLmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0VkaXRGb3JtLmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0VkaXRGb3JtSGVhZGVyLmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0VkaXRGb3JtSGVhZGVyU2VhcmNoLmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0Zvb3RlckJhci5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vY29tcG9uZW50cy9Gb3JtSGVhZGluZy5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vY29tcG9uZW50cy9SZWxhdGVkSXRlbXNMaXN0L1JlbGF0ZWRJdGVtc0xpc3QuanMiLCJBcHAvc2NyZWVucy9JdGVtL2NvbXBvbmVudHMvUmVsYXRlZEl0ZW1zTGlzdC9SZWxhdGVkSXRlbXNMaXN0RHJhZ0Ryb3AuanMiLCJBcHAvc2NyZWVucy9JdGVtL2NvbXBvbmVudHMvUmVsYXRlZEl0ZW1zTGlzdC9SZWxhdGVkSXRlbXNMaXN0Um93LmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL1Rvb2xiYXIvVG9vbGJhclNlY3Rpb24uanMiLCJBcHAvc2NyZWVucy9JdGVtL2NvbXBvbmVudHMvVG9vbGJhci9pbmRleC5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vY29uc3RhbnRzLmpzIiwiQXBwL3NjcmVlbnMvSXRlbS9pbmRleC5qcyIsIkFwcC9zY3JlZW5zL0l0ZW0vcmVkdWNlci5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvYWN0aW9ucy9hY3RpdmUuanMiLCJBcHAvc2NyZWVucy9MaXN0L2FjdGlvbnMvZHJhZ2Ryb3AuanMiLCJBcHAvc2NyZWVucy9MaXN0L2FjdGlvbnMvaW5kZXguanMiLCJBcHAvc2NyZWVucy9MaXN0L2FjdGlvbnMvaXRlbXMuanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvRmlsdGVyaW5nL0ZpbHRlci5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9GaWx0ZXJpbmcvTGlzdEZpbHRlcnMuanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvRmlsdGVyaW5nL0xpc3RGaWx0ZXJzQWRkLmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0ZpbHRlcmluZy9MaXN0RmlsdGVyc0FkZEZvcm0uanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvRmlsdGVyaW5nL2dldEZpbHRlckxhYmVsLmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0l0ZW1zVGFibGUvSXRlbXNUYWJsZS5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9JdGVtc1RhYmxlL0l0ZW1zVGFibGVEcmFnRHJvcC5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9JdGVtc1RhYmxlL0l0ZW1zVGFibGVEcmFnRHJvcFpvbmUuanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvSXRlbXNUYWJsZS9JdGVtc1RhYmxlRHJhZ0Ryb3Bab25lVGFyZ2V0LmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0l0ZW1zVGFibGUvSXRlbXNUYWJsZVJvdy5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9MaXN0Q29sdW1uc0Zvcm0uanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvTGlzdENvbnRyb2wuanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvTGlzdERvd25sb2FkRm9ybS5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9MaXN0SGVhZGVyQnV0dG9uLmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0xpc3RIZWFkZXJTZWFyY2guanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvTGlzdEhlYWRlclRpdGxlLmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0xpc3RIZWFkZXJUb29sYmFyLmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0xpc3RNYW5hZ2VtZW50LmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0xpc3RTb3J0LmpzIiwiQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL1VwZGF0ZUZvcm0uanMiLCJBcHAvc2NyZWVucy9MaXN0L2NvbnN0YW50cy5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvaW5kZXguanMiLCJBcHAvc2NyZWVucy9MaXN0L3JlZHVjZXJzL2FjdGl2ZS5qcyIsIkFwcC9zY3JlZW5zL0xpc3QvcmVkdWNlcnMvbWFpbi5qcyIsIkFwcC9zaGFyZWQvQWxlcnRNZXNzYWdlcy5qcyIsIkFwcC9zaGFyZWQvQ29uZmlybWF0aW9uRGlhbG9nLmpzIiwiQXBwL3NoYXJlZC9DcmVhdGVGb3JtLmpzIiwiQXBwL3NoYXJlZC9GbGFzaE1lc3NhZ2UuanMiLCJBcHAvc2hhcmVkL0ZsYXNoTWVzc2FnZXMuanMiLCJBcHAvc2hhcmVkL0lmcmFtZUNvbnRlbnQuanMiLCJBcHAvc2hhcmVkL0ludmFsaWRGaWVsZFR5cGUuanMiLCJBcHAvc2hhcmVkL0tiZC5qcyIsIkFwcC9zaGFyZWQvUG9wb3V0L1BvcG91dEJvZHkuanMiLCJBcHAvc2hhcmVkL1BvcG91dC9Qb3BvdXRGb290ZXIuanMiLCJBcHAvc2hhcmVkL1BvcG91dC9Qb3BvdXRIZWFkZXIuanMiLCJBcHAvc2hhcmVkL1BvcG91dC9Qb3BvdXRMaXN0LmpzIiwiQXBwL3NoYXJlZC9Qb3BvdXQvUG9wb3V0TGlzdEhlYWRpbmcuanMiLCJBcHAvc2hhcmVkL1BvcG91dC9Qb3BvdXRMaXN0SXRlbS5qcyIsIkFwcC9zaGFyZWQvUG9wb3V0L1BvcG91dFBhbmUuanMiLCJBcHAvc2hhcmVkL1BvcG91dC9pbmRleC5qcyIsIkFwcC9zaGFyZWQvUG9ydGFsLmpzIiwiQXBwL3N0b3JlLmpzIiwiY29uc3RhbnRzLmpzIiwidGhlbWUuanMiLCJ1dGlscy9MaXN0LmpzIiwidXRpbHMvY29sb3IuanMiLCJ1dGlscy9jb25jYXRDbGFzc25hbWVzLmpzIiwidXRpbHMvY3NzLmpzIiwidXRpbHMvbGlzdHMuanMiLCJ1dGlscy9xdWVyeVBhcmFtcy5qcyIsInV0aWxzL3N0cmluZy5qcyIsIi4uLy4uL2ZpZWxkcy91dGlscy9ldmFsRGVwZW5kc09uLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19EYXRhVmlldy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fSGFzaC5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fTGlzdENhY2hlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19NYXAuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX01hcENhY2hlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19Qcm9taXNlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19TZXQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX1NldENhY2hlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19TdGFjay5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fU3ltYm9sLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19VaW50OEFycmF5LmpzIiwiLi4vLi4vLi4vbG9kYXNoL19XZWFrTWFwLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19hcnJheUZpbHRlci5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fYXJyYXlQdXNoLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19hcnJheVNvbWUuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2Jhc2VJc0VxdWFsRGVlcC5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19iYXNlSXNUeXBlZEFycmF5LmpzIiwiLi4vLi4vLi4vbG9kYXNoL19iYXNlS2V5cy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fYmFzZVRpbWVzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19iYXNlVW5hcnkuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2NhY2hlSGFzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fZXF1YWxCeVRhZy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fZXF1YWxPYmplY3RzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19nZXRBbGxLZXlzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19nZXROYXRpdmUuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2dldFByb3RvdHlwZS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19nZXRTeW1ib2xzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19nZXRUYWcuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2dldFZhbHVlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19oYXNoQ2xlYXIuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2hhc2hEZWxldGUuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2hhc2hHZXQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2hhc2hIYXMuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2hhc2hTZXQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2lzSW5kZXguanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9faXNNYXNrZWQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19saXN0Q2FjaGVHZXQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwiLi4vLi4vLi4vbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fbWFwVG9BcnJheS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19ub2RlVXRpbC5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX292ZXJBcmcuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX3Jvb3QuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX3NldENhY2hlQWRkLmpzIiwiLi4vLi4vLi4vbG9kYXNoL19zZXRDYWNoZUhhcy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fc2V0VG9BcnJheS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fc3RhY2tEZWxldGUuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX3N0YWNrR2V0LmpzIiwiLi4vLi4vLi4vbG9kYXNoL19zdGFja0hhcy5qcyIsIi4uLy4uLy4uL2xvZGFzaC9fc3RhY2tTZXQuanMiLCIuLi8uLi8uLi9sb2Rhc2gvX3RvU291cmNlLmpzIiwiLi4vLi4vLi4vbG9kYXNoL2VxLmpzIiwiLi4vLi4vLi4vbG9kYXNoL2lzQXJndW1lbnRzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL2lzQXJyYXkuanMiLCIuLi8uLi8uLi9sb2Rhc2gvaXNBcnJheUxpa2UuanMiLCIuLi8uLi8uLi9sb2Rhc2gvaXNCdWZmZXIuanMiLCIuLi8uLi8uLi9sb2Rhc2gvaXNFcXVhbC5qcyIsIi4uLy4uLy4uL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwiLi4vLi4vLi4vbG9kYXNoL2lzTGVuZ3RoLmpzIiwiLi4vLi4vLi4vbG9kYXNoL2lzT2JqZWN0LmpzIiwiLi4vLi4vLi4vbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9pc1BsYWluT2JqZWN0LmpzIiwiLi4vLi4vLi4vbG9kYXNoL2lzVHlwZWRBcnJheS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9rZXlzLmpzIiwiLi4vLi4vLi4vbG9kYXNoL3N0dWJBcnJheS5qcyIsIi4uLy4uLy4uL2xvZGFzaC9zdHViRmFsc2UuanMiLCIuLi8uLi8uLi9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwiLi4vLi4vLi4vcHJvY2Vzcy9icm93c2VyLmpzIiwiLi4vLi4vLi4vcmVkdXgtc2FnYS9lZmZlY3RzLmpzIiwiLi4vLi4vLi4vcmVkdXgtc2FnYS9saWIvZWZmZWN0cy5qcyIsIi4uLy4uLy4uL3JlZHV4LXNhZ2EvbGliL2ludGVybmFsL2J1ZmZlcnMuanMiLCIuLi8uLi8uLi9yZWR1eC1zYWdhL2xpYi9pbnRlcm5hbC9jaGFubmVsLmpzIiwiLi4vLi4vLi4vcmVkdXgtc2FnYS9saWIvaW50ZXJuYWwvaW8uanMiLCIuLi8uLi8uLi9yZWR1eC1zYWdhL2xpYi9pbnRlcm5hbC9zYWdhSGVscGVycy5qcyIsIi4uLy4uLy4uL3JlZHV4LXNhZ2EvbGliL2ludGVybmFsL3NjaGVkdWxlci5qcyIsIi4uLy4uLy4uL3JlZHV4LXNhZ2EvbGliL2ludGVybmFsL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBOztBQUVBLFFBQVEsY0FBUjs7QUFFQSxRQUFRLDZCQUFSOztBQUVBLFFBQVEsMEJBQVI7O0FBRUEsSUFBSSxPQUFPLGNBQVgsRUFBMkI7QUFDekIsUUFBTSxJQUFJLEtBQUosQ0FBVSxnREFBVixDQUFOO0FBQ0Q7QUFDRCxPQUFPLGNBQVAsR0FBd0IsSUFBeEI7O0FBRUEsSUFBSSxrQkFBa0IsZ0JBQXRCO0FBQ0EsU0FBUyxNQUFULENBQWdCLENBQWhCLEVBQW1CLEdBQW5CLEVBQXdCLEtBQXhCLEVBQStCO0FBQzdCLElBQUUsR0FBRixLQUFVLE9BQU8sZUFBUCxFQUF3QixDQUF4QixFQUEyQixHQUEzQixFQUFnQztBQUN4QyxjQUFVLElBRDhCO0FBRXhDLGtCQUFjLElBRjBCO0FBR3hDLFdBQU87QUFIaUMsR0FBaEMsQ0FBVjtBQUtEOztBQUVELE9BQU8sT0FBTyxTQUFkLEVBQXlCLFNBQXpCLEVBQW9DLEdBQUcsUUFBdkM7QUFDQSxPQUFPLE9BQU8sU0FBZCxFQUF5QixVQUF6QixFQUFxQyxHQUFHLE1BQXhDOztBQUVBLGdNQUFnTSxLQUFoTSxDQUFzTSxHQUF0TSxFQUEyTSxPQUEzTSxDQUFtTixVQUFVLEdBQVYsRUFBZTtBQUNoTyxLQUFHLEdBQUgsS0FBVyxPQUFPLEtBQVAsRUFBYyxHQUFkLEVBQW1CLFNBQVMsSUFBVCxDQUFjLElBQWQsQ0FBbUIsR0FBRyxHQUFILENBQW5CLENBQW5CLENBQVg7QUFDRCxDQUZEOzs7Ozs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hMQSxPQUFPLE9BQVAsR0FBaUIsUUFBUSxlQUFSLENBQWpCOzs7QUNBQTs7QUFFQSxPQUFPLGNBQVAsQ0FBc0IsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0MsU0FBTztBQURvQyxDQUE3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QXZOLENBQVA7QUFDRCxDQUZEOztBQUlBLFNBQVMsZ0JBQVQsQ0FBMEIsUUFBMUIsRUFBb0M7QUFDbEMsU0FBTyxTQUFTLFlBQVQsQ0FBc0IsTUFBdEIsRUFBOEI7QUFDbkMsUUFBSSxnQkFBZ0IsT0FBTyxjQUFQLENBQXNCLE1BQXRCLEVBQThCLFdBQTlCLEVBQTJDLEVBQUUsT0FBTyxJQUFULEVBQTNDLENBQXBCO0FBQ0EsV0FBTyxTQUFTLGFBQVQsQ0FBUDtBQUNELEdBSEQ7QUFJRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBblxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwucHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBnbG9iYWwucHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IGdsb2JhbC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlciwgSVRFUkFUT1IpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICBpZiAoY2xhc3NvZih0aGlzKSAhPSBOQU1FKSB0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWsgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhaztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbnZhciAkaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG52YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAodGhhdCkge1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjcnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcbiAgdmFyIGZucyA9IGV4ZWMoZGVmaW5lZCwgU1lNQk9MLCAnJ1tLRVldKTtcbiAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICB2YXIgcnhmbiA9IGZuc1sxXTtcbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSkpIHtcbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IHggIT0geFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dExvdyAhPSBvdXRMb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxuICApIHJldHVybiBOYU47XG4gIGlmICh4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkpIHJldHVybiB4O1xuICByZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93O1xufTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9lczYubWFwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpO1xudmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEZvcmNlZCByZXBsYWNlbWVudCBwcm90b3R5cGUgYWNjZXNzb3JzIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fbGlicmFyeScpIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEsgPSBNYXRoLnJhbmRvbSgpO1xuICAvLyBJbiBGRiB0aHJvd3Mgb25seSBkZWZpbmUgbWV0aG9kc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYsIG5vLXVzZWxlc3MtY2FsbFxuICBfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCwgSywgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgZGVsZXRlIHJlcXVpcmUoJy4vX2dsb2JhbCcpW0tdO1xufSk7XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCJ2YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKSB7XG4gICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRnVuY3Rpb25bVE9fU1RSSU5HXTtcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07XG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IGZyb206IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwRm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwRm4gPSBhcmd1bWVudHNbMV07XG4gICAgdmFyIG1hcHBpbmcsIEEsIG4sIGNiO1xuICAgIGFGdW5jdGlvbih0aGlzKTtcbiAgICBtYXBwaW5nID0gbWFwRm4gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFwcGluZykgYUZ1bmN0aW9uKG1hcEZuKTtcbiAgICBpZiAoc291cmNlID09IHVuZGVmaW5lZCkgcmV0dXJuIG5ldyB0aGlzKCk7XG4gICAgQSA9IFtdO1xuICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICBuID0gMDtcbiAgICAgIGNiID0gY3R4KG1hcEZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XG4gICAgICAgIEEucHVzaChjYihuZXh0SXRlbSwgbisrKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgQS5wdXNoLCBBKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpIHtcbiAgdmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG4gIHZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbiAgdmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbiAgdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiAgdmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG4gIHZhciAkYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG4gIHZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbiAgdmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xuICB2YXIgcHJvcGVydHlEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuICB2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiAgdmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG4gIHZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG4gIHZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuICB2YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG4gIHZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xuICB2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbiAgdmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xuICB2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbiAgdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4gIHZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xuICB2YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG4gIHZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG4gIHZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbiAgdmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG4gIHZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuICB2YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG4gIHZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbiAgdmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xuICB2YXIgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJyk7XG4gIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG4gIHZhciBBcnJheUl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG4gIHZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbiAgdmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbiAgdmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xuICB2YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKTtcbiAgdmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuICB2YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xuICB2YXIgZFAgPSAkRFAuZjtcbiAgdmFyIGdPUEQgPSAkR09QRC5mO1xuICB2YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuICB2YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbiAgdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbiAgdmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG4gIHZhciBTSEFSRURfQlVGRkVSID0gJ1NoYXJlZCcgKyBBUlJBWV9CVUZGRVI7XG4gIHZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG4gIHZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheVtQUk9UT1RZUEVdO1xuICB2YXIgJEFycmF5QnVmZmVyID0gJGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbiAgdmFyICREYXRhVmlldyA9ICRidWZmZXIuRGF0YVZpZXc7XG4gIHZhciBhcnJheUZvckVhY2ggPSBjcmVhdGVBcnJheU1ldGhvZCgwKTtcbiAgdmFyIGFycmF5RmlsdGVyID0gY3JlYXRlQXJyYXlNZXRob2QoMik7XG4gIHZhciBhcnJheVNvbWUgPSBjcmVhdGVBcnJheU1ldGhvZCgzKTtcbiAgdmFyIGFycmF5RXZlcnkgPSBjcmVhdGVBcnJheU1ldGhvZCg0KTtcbiAgdmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xuICB2YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbiAgdmFyIGFycmF5SW5jbHVkZXMgPSBjcmVhdGVBcnJheUluY2x1ZGVzKHRydWUpO1xuICB2YXIgYXJyYXlJbmRleE9mID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSk7XG4gIHZhciBhcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcztcbiAgdmFyIGFycmF5S2V5cyA9IEFycmF5SXRlcmF0b3JzLmtleXM7XG4gIHZhciBhcnJheUVudHJpZXMgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzO1xuICB2YXIgYXJyYXlMYXN0SW5kZXhPZiA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2Y7XG4gIHZhciBhcnJheVJlZHVjZSA9IEFycmF5UHJvdG8ucmVkdWNlO1xuICB2YXIgYXJyYXlSZWR1Y2VSaWdodCA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQ7XG4gIHZhciBhcnJheUpvaW4gPSBBcnJheVByb3RvLmpvaW47XG4gIHZhciBhcnJheVNvcnQgPSBBcnJheVByb3RvLnNvcnQ7XG4gIHZhciBhcnJheVNsaWNlID0gQXJyYXlQcm90by5zbGljZTtcbiAgdmFyIGFycmF5VG9TdHJpbmcgPSBBcnJheVByb3RvLnRvU3RyaW5nO1xuICB2YXIgYXJyYXlUb0xvY2FsZVN0cmluZyA9IEFycmF5UHJvdG8udG9Mb2NhbGVTdHJpbmc7XG4gIHZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbiAgdmFyIFRBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbiAgdmFyIFRZUEVEX0NPTlNUUlVDVE9SID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpO1xuICB2YXIgREVGX0NPTlNUUlVDVE9SID0gdWlkKCdkZWZfY29uc3RydWN0b3InKTtcbiAgdmFyIEFMTF9DT05TVFJVQ1RPUlMgPSAkdHlwZWQuQ09OU1RSO1xuICB2YXIgVFlQRURfQVJSQVkgPSAkdHlwZWQuVFlQRUQ7XG4gIHZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG4gIHZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG5cbiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xuICB9KTtcblxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA9PT0gMTtcbiAgfSk7XG5cbiAgdmFyIEZPUkNFRF9TRVQgPSAhIVVpbnQ4QXJyYXkgJiYgISFVaW50OEFycmF5W1BST1RPVFlQRV0uc2V0ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xuICB9KTtcblxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIGlmIChpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpIHJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uIChDLCBsZW5ndGgpIHtcbiAgICBpZiAoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcbiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbiAoTywgbGlzdCkge1xuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XG4gIH07XG5cbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24gKEMsIGxpc3QpIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChpdCwga2V5LCBpbnRlcm5hbCkge1xuICAgIGRQKGl0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfSB9KTtcbiAgfTtcblxuICB2YXIgJGZyb20gPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChzb3VyY2UpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKykge1xuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcbiAgICAgIH0gTyA9IHZhbHVlcztcbiAgICB9XG4gICAgaWYgKG1hcHBpbmcgJiYgYUxlbiA+IDIpIG1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxuICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xuXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpIHtcbiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHZhciBwcm90byA9IHtcbiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5RmlsbC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoO1xuICAgICAgdmFyIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMik7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XG4gICAgICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH0sXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcbiAgICB9LFxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgTyA9IHZhbGlkYXRlKHRoaXMpO1xuICAgICAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoO1xuICAgICAgdmFyICRiZWdpbiA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcbiAgICAgICAgTy5idWZmZXIsXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyICRzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xuICB9O1xuXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICAgIHZhbGlkYXRlKHRoaXMpO1xuICAgIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHNbMV0sIDEpO1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICB2YXIgc3JjID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoc3JjLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBpZiAobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuKSB0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KVxuICAgICAgJiYgdGFyZ2V0W1RZUEVEX0FSUkFZXVxuICAgICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJ1xuICAgICAgJiYga2V5IGluIHRhcmdldFxuICAgICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xuICB9O1xuICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcbiAgfTtcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICBpZiAoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgICYmIGlzT2JqZWN0KGRlc2MpXG4gICAgICAmJiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpXG4gICAgICAmJiAhaGFzKGRlc2MsICdzZXQnKVxuICAgICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ3dyaXRhYmxlJykgfHwgZGVzYy53cml0YWJsZSlcbiAgICAgICYmICghaGFzKGRlc2MsICdlbnVtZXJhYmxlJykgfHwgZGVzYy5lbnVtZXJhYmxlKVxuICAgICkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9IHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYgKCFBTExfQ09OU1RSVUNUT1JTKSB7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHtcbiAgICBzbGljZTogJHNsaWNlLFxuICAgIHNldDogJHNldCxcbiAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gKCkgeyAvKiBub29wICovIH0sXG4gICAgdG9TdHJpbmc6IGFycmF5VG9TdHJpbmcsXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xuICB9KTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldOyB9XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50c1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKSB7XG4gICAgQ0xBTVBFRCA9ICEhQ0xBTVBFRDtcbiAgICB2YXIgTkFNRSA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBLRVk7XG4gICAgdmFyIFNFVFRFUiA9ICdzZXQnICsgS0VZO1xuICAgIHZhciBUeXBlZEFycmF5ID0gZ2xvYmFsW05BTUVdO1xuICAgIHZhciBCYXNlID0gVHlwZWRBcnJheSB8fCB7fTtcbiAgICB2YXIgVEFDID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KTtcbiAgICB2YXIgRk9SQ0VEID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlY7XG4gICAgdmFyIE8gPSB7fTtcbiAgICB2YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdO1xuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhmZiA/IDB4ZmYgOiB2YWx1ZSAmIDB4ZmY7XG4gICAgICBkYXRhLnZbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCB2YWx1ZSwgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICB2YXIgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5KDEpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSkgfHwgISRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheSgxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgcmV0dXJuIG5ldyBCYXNlKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5KSkgaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XG4gICAgICBpZiAoIUxJQlJBUlkpIFR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xuICAgIH1cbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl07XG4gICAgdmFyIENPUlJFQ1RfSVRFUl9OQU1FID0gISEkbmF0aXZlSXRlcmF0b3JcbiAgICAgICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpO1xuICAgIHZhciAkaXRlcmF0b3IgPSAkaXRlcmF0b3JzLnZhbHVlcztcbiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTtcblxuICAgIGlmIChDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIHtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5BTUU7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xuICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTXG4gICAgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgQmFzZS5vZi5jYWxsKFR5cGVkQXJyYXksIDEpOyB9KSwgTkFNRSwge1xuICAgICAgZnJvbTogJGZyb20sXG4gICAgICBvZjogJG9mXG4gICAgfSk7XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTtcblxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRF9TRVQsIE5BTUUsIHsgc2V0OiAkc2V0IH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xuXG4gICAgaWYgKCFMSUJSQVJZICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZykgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyA9IGFycmF5VG9TdHJpbmc7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7XG4gICAgfSksIE5BTUUsIHsgc2xpY2U6ICRzbGljZSB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xuICAgIH0pKSwgTkFNRSwgeyB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nIH0pO1xuXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7XG4gICAgaWYgKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4ISc7XG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xudmFyICRPRkZTRVQgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUgKGkgPCBsKSB7XG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmUgPSByZXF1aXJlKCcuL19yZXBsYWNlcicpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZ0V4cCcsIHsgZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpIHsgcmV0dXJuICRyZShpdCk7IH0gfSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsIi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywgeyBub3c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9IH0pO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIEhBU19JTlNUQU5DRSA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSkgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59IH0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xuIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xuIiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIEJhc2UgPSAkTnVtYmVyO1xudmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbnZhciBCUk9LRU5fQ09GID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSkge1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufVxuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbiAoJGlzRXh0ZW5zaWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxuICAgICAgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAgIC8vIHdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9fYmluZCcpO1xudmFyIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW107ICAgICAgLy8ga2V5c1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBpdGVyYXRlZCkga2V5cy5wdXNoKGtleSk7XG59O1xucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGtleXMgPSB0aGF0Ll9rO1xuICB2YXIga2V5O1xuICBkbyB7XG4gICAgaWYgKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfSB3aGlsZSAoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XG4gIHJldHVybiB7IHZhbHVlOiBrZXksIGRvbmU6IGZhbHNlIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuIiwiLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoJHByZXZlbnRFeHRlbnNpb25zKSAkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCkge1xuICAvLyAyMS4xLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5tYXRjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJG1hdGNoXTtcbn0pO1xuIiwiLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UpIHtcbiAgLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKVxuICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pO1xuIiwiLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCkge1xuICAvLyAyMS4xLjMuMTUgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRzZWFyY2hdO1xufSk7XG4iLCIvLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbiAgdmFyIF9zcGxpdCA9ICRzcGxpdDtcbiAgdmFyICRwdXNoID0gW10ucHVzaDtcbiAgdmFyICRTUExJVCA9ICdzcGxpdCc7XG4gIHZhciBMRU5HVEggPSAnbGVuZ3RoJztcbiAgdmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgICRzcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyA0Mjk0OTY3Mjk1IDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoLCBpO1xuICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICBpZiAoIU5QQ0cpIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvckNvcHkuc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgICB3aGlsZSAobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSkge1xuICAgICAgICAvLyBgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXhgIGlzIG5vdCByZWxpYWJsZSBjcm9zcy1icm93c2VyXG4gICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDR1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgICAgICBpZiAoIU5QQ0cgJiYgbWF0Y2hbTEVOR1RIXSA+IDEpIG1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50c1tMRU5HVEhdIC0gMjsgaSsrKSBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgICRzcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IF9zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH1cbiAgLy8gMjEuMS4zLjE3IFN0cmluZy5wcm90b3R5cGUuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KSA6ICRzcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gIH0sICRzcGxpdF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcbnZhciAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgdG1wID0ge307XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3OyB9KSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBXRUFLX1NFVCA9ICdXZWFrU2V0JztcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX1NFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19TRVQpLCB2YWx1ZSwgdHJ1ZSk7XG4gIH1cbn0sIHdlYWssIGZhbHNlLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4sIEE7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXRNYXAnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0dGVuJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgcHJvY2VzcyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnByb2Nlc3M7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge1xuICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKSB7XG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpIHtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnTWFwJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJykgfSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsYW1wOiBmdW5jdGlvbiBjbGFtcCh4LCBsb3dlciwgdXBwZXIpIHtcbiAgICByZXR1cm4gTWF0aC5taW4odXBwZXIsIE1hdGgubWF4KGxvd2VyLCB4KSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBERUdfUEVSX1JBRDogTWF0aC5QSSAvIDE4MCB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogUkFEX1BFUl9ERUc7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzY2FsZSA9IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKTtcbnZhciBmcm91bmQgPSByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZzY2FsZTogZnVuY3Rpb24gZnNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaWFkZGg6IGZ1bmN0aW9uIGlhZGRoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSArICh5MSA+Pj4gMCkgKyAoKCR4MCAmICR5MCB8ICgkeDAgfCAkeTApICYgfigkeDAgKyAkeTAgPj4+IDApKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaXN1Ymg6IGZ1bmN0aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSAtICh5MSA+Pj4gMCkgLSAoKH4keDAgJiAkeTAgfCB+KCR4MCBeICR5MCkgJiAkeDAgLSAkeTAgPj4+IDApID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgUkFEX1BFUl9ERUc6IDE4MCAvIE1hdGguUEkgfSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIERFR19QRVJfUkFEID0gTWF0aC5QSSAvIDE4MDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICByYWRpYW5zOiBmdW5jdGlvbiByYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIERFR19QRVJfUkFEO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2NhbGU6IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKSB9KTtcbiIsIi8vIGh0dHA6Ly9qZmJhc3RpZW4uZ2l0aHViLmlvL3BhcGVycy9NYXRoLnNpZ25iaXQuaHRtbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduYml0OiBmdW5jdGlvbiBzaWduYml0KHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgIT0geCA/IHggOiB4ID09IDAgPyAxIC8geCA9PSBJbmZpbml0eSA6IHggPiAwO1xufSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+Pj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjMgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5zZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIE9CU0VSVkFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIFJFVFVSTiA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSkgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKSByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gbmV3IEFycmF5KGwpOyBpIDwgbDspIGl0ZW1zW2ldID0gYXJndW1lbnRzW2krK107XG4gICAgcmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbal0pO1xuICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IE9ic2VydmFibGU6ICRPYnNlcnZhYmxlIH0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdPYnNlcnZhYmxlJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1Byb21pc2UnLCB7ICd0cnknOiBmdW5jdGlvbiAoY2FsbGJhY2tmbikge1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gcGVyZm9ybShjYWxsYmFja2ZuKTtcbiAgKHJlc3VsdC5lID8gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0IDogcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkocmVzdWx0LnYpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcDtcbnZhciBzdG9yZSA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoeyBkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICB2YXIgdGFyZ2V0S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgaWYgKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKG1ldGFkYXRhTWFwLnNpemUpIHJldHVybiB0cnVlO1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG59IH0pO1xuIiwidmFyIFNldCA9IHJlcXVpcmUoJy4vZXM2LnNldCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG52YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGhhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgJG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b01ldGFLZXkgPSAkbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSAkbWV0YWRhdGEuc2V0O1xuXG4kbWV0YWRhdGEuZXhwKHsgbWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn0gfSk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnU2V0Jyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1NldCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAocmVnZXhwLCBzdHJpbmcpIHtcbiAgdGhpcy5fciA9IHJlZ2V4cDtcbiAgdGhpcy5fcyA9IHN0cmluZztcbn07XG5cbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbCB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZiAoIWlzUmVnRXhwKHJlZ2V4cCkpIHRocm93IFR5cGVFcnJvcihyZWdleHAgKyAnIGlzIG5vdCBhIHJlZ2V4cCEnKTtcbiAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICB2YXIgZmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cFByb3RvID8gU3RyaW5nKHJlZ2V4cC5mbGFncykgOiBnZXRGbGFncy5jYWxsKHJlZ2V4cCk7XG4gICAgdmFyIHJ4ID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KSwgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N5c3RlbScsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0LmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnV2Vha1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha1NldCcpO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuIiwicmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaWFkZGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pc3ViaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmltdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UudHJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFzYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTtcbiIsIi8qKlxyXG4gKiBUaGUgQXBwIGNvbXBvbmVudCBpcyB0aGUgY29tcG9uZW50IHRoYXQgaXMgcmVuZGVyZWQgYXJvdW5kIGFsbCB2aWV3cywgYW5kXHJcbiAqIGNvbnRhaW5zIGNvbW1vbiB0aGluZ3MgbGlrZSBuYXZpZ2F0aW9uLCBmb290ZXIsIGV0Yy5cclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuL2VsZW1lbnRhbCc7XHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xyXG5cclxuaW1wb3J0IE1vYmlsZU5hdmlnYXRpb24gZnJvbSAnLi9jb21wb25lbnRzL05hdmlnYXRpb24vTW9iaWxlJztcclxuaW1wb3J0IFByaW1hcnlOYXZpZ2F0aW9uIGZyb20gJy4vY29tcG9uZW50cy9OYXZpZ2F0aW9uL1ByaW1hcnknO1xyXG5pbXBvcnQgU2Vjb25kYXJ5TmF2aWdhdGlvbiBmcm9tICcuL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9TZWNvbmRhcnknO1xyXG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vY29tcG9uZW50cy9Gb290ZXInO1xyXG5cclxuaW1wb3J0IElmcmFtZUNvbnRlbnQgZnJvbSAnLi9zaGFyZWQvSWZyYW1lQ29udGVudCc7XHJcblxyXG5jb25zdCBjbGFzc2VzID0ge1xyXG5cdHdyYXBwZXI6IHtcclxuXHRcdGRpc3BsYXk6ICdmbGV4JyxcclxuXHRcdGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxyXG5cdFx0bWluSGVpZ2h0OiAnMTAwdmgnLFxyXG5cdH0sXHJcblx0Ym9keToge1xyXG5cdFx0ZmxleEdyb3c6IDEsXHJcblx0fSxcclxufTtcclxuXHJcbmNvbnN0IEFwcCA9IChwcm9wcykgPT4ge1xyXG5cdGNvbnN0IGxpc3RzQnlQYXRoID0gcmVxdWlyZSgnLi4vdXRpbHMvbGlzdHMnKS5saXN0c0J5UGF0aDtcclxuXHRsZXQgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcclxuXHQvLyBJZiB3ZSdyZSBvbiBlaXRoZXIgYSBsaXN0IG9yIGFuIGl0ZW0gdmlld1xyXG5cdGxldCBjdXJyZW50TGlzdCwgY3VycmVudFNlY3Rpb247XHJcblx0aWYgKHByb3BzLnBhcmFtcy5saXN0SWQpIHtcclxuXHRcdGN1cnJlbnRMaXN0ID0gbGlzdHNCeVBhdGhbcHJvcHMucGFyYW1zLmxpc3RJZF07XHJcblx0XHQvLyBJZiB3ZSdyZSBvbiBhIGxpc3QgcGF0aCB0aGF0IGRvZXNuJ3QgZXhpc3QgKGUuZy4gL2tleXN0b25lL2dpYmJlcmlzaGFzZnczNGFmc2QpIHRoaXMgd2lsbFxyXG5cdFx0Ly8gYmUgdW5kZWZpbmVkXHJcblx0XHRpZiAoIWN1cnJlbnRMaXN0KSB7XHJcblx0XHRcdGNvbnN0IHNlY3Rpb24gPSBfLmZpbmQoS2V5c3RvbmUubmF2LnNlY3Rpb25zLCB7bGlzdHM6IFt7cGF0aDogcHJvcHMubG9jYXRpb24ucGF0aG5hbWUsIGV4dGVybmFsOiB0cnVlfV0gfSlcclxuXHRcdFx0aWYgKHNlY3Rpb24pIHtcclxuXHRcdFx0XHRjb25zdCBwYXRoID0gXy5maW5kKHNlY3Rpb24ubGlzdHMsIHtwYXRoOiBwcm9wcy5sb2NhdGlvbi5wYXRobmFtZSwgZXh0ZXJuYWw6IHRydWV9KTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhwYXRoKTtcclxuXHRcdFx0XHRjaGlsZHJlbiA9ICg8SWZyYW1lQ29udGVudCBzcmM9e3BhdGguaHJlZn0gc2hvdz17dHJ1ZX0gb25DYW5jZWw9eygpID0+IHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdmcmFtZSBjYW5jZWwnKTtcclxuXHRcdFx0XHR9fSBvblNhdmU9eygpID0+IHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdmcmFtZSBzYXZlJyk7XHJcblx0XHRcdFx0fX0gLz4pXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2hpbGRyZW4gPSAoXHJcblx0XHRcdFx0XHQ8Q29udGFpbmVyPlxyXG5cdFx0XHRcdFx0XHQ8cD5MaXN0IG5vdCBmb3VuZCE8L3A+XHJcblx0XHRcdFx0XHRcdDxMaW5rIHRvPXtgJHtLZXlzdG9uZS5hZG1pblBhdGh9YH0+XHJcblx0XHRcdFx0XHRcdFx0R28gYmFjayBob21lXHJcblx0XHRcdFx0XHRcdDwvTGluaz5cclxuXHRcdFx0XHRcdDwvQ29udGFpbmVyPlxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIEdldCB0aGUgY3VycmVudCBzZWN0aW9uIHdlJ3JlIGluIGZvciB0aGUgbmF2aWdhdGlvblxyXG5cdFx0XHRjdXJyZW50U2VjdGlvbiA9IEtleXN0b25lLm5hdi5ieS5saXN0W2N1cnJlbnRMaXN0LmtleV07XHJcblx0XHR9XHJcblx0fVxyXG5cdC8vIERlZmF1bHQgY3VycmVudCBzZWN0aW9uIGtleSB0byBkYXNoYm9hcmRcclxuXHRjb25zdCBjdXJyZW50U2VjdGlvbktleSA9IChjdXJyZW50U2VjdGlvbiAmJiBjdXJyZW50U2VjdGlvbi5rZXkpIHx8ICdkYXNoYm9hcmQnO1xyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2IGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMud3JhcHBlcil9PlxyXG5cdFx0XHQ8aGVhZGVyPlxyXG5cdFx0XHRcdDxNb2JpbGVOYXZpZ2F0aW9uXHJcblx0XHRcdFx0XHRicmFuZD17S2V5c3RvbmUuYnJhbmR9XHJcblx0XHRcdFx0XHRjdXJyZW50TGlzdEtleT17cHJvcHMucGFyYW1zLmxpc3RJZH1cclxuXHRcdFx0XHRcdGN1cnJlbnRTZWN0aW9uS2V5PXtjdXJyZW50U2VjdGlvbktleX1cclxuXHRcdFx0XHRcdHNlY3Rpb25zPXtLZXlzdG9uZS5uYXYuc2VjdGlvbnN9XHJcblx0XHRcdFx0XHRzaWdub3V0VXJsPXtLZXlzdG9uZS5zaWdub3V0VXJsfVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdFx0PFByaW1hcnlOYXZpZ2F0aW9uXHJcblx0XHRcdFx0XHRjdXJyZW50U2VjdGlvbktleT17Y3VycmVudFNlY3Rpb25LZXl9XHJcblx0XHRcdFx0XHRicmFuZD17S2V5c3RvbmUuYnJhbmR9XHJcblx0XHRcdFx0XHRzZWN0aW9ucz17S2V5c3RvbmUubmF2LnNlY3Rpb25zfVxyXG5cdFx0XHRcdFx0c2lnbm91dFVybD17S2V5c3RvbmUuc2lnbm91dFVybH1cclxuXHRcdFx0XHQvPlxyXG5cdFx0XHRcdHsvKiBJZiBhIHNlY3Rpb24gaXMgb3BlbiBjdXJyZW50bHksIHNob3cgdGhlIHNlY29uZGFyeSBuYXYgKi99XHJcblx0XHRcdFx0eyhjdXJyZW50U2VjdGlvbikgPyAoXHJcblx0XHRcdFx0XHQ8U2Vjb25kYXJ5TmF2aWdhdGlvblxyXG5cdFx0XHRcdFx0XHRjdXJyZW50TGlzdEtleT17cHJvcHMucGFyYW1zLmxpc3RJZH1cclxuXHRcdFx0XHRcdFx0bGlzdHM9e2N1cnJlbnRTZWN0aW9uLmxpc3RzfVxyXG5cdFx0XHRcdFx0XHRpdGVtSWQ9e3Byb3BzLnBhcmFtcy5pdGVtSWR9XHJcblx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdCkgOiBudWxsfVxyXG5cdFx0XHQ8L2hlYWRlcj5cclxuXHRcdFx0PG1haW4gY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5ib2R5KX0+XHJcblx0XHRcdFx0e2NoaWxkcmVufVxyXG5cdFx0XHQ8L21haW4+XHJcblx0XHRcdDxGb290ZXJcclxuXHRcdFx0XHRhcHB2ZXJzaW9uPXtLZXlzdG9uZS5hcHB2ZXJzaW9ufVxyXG5cdFx0XHRcdGJhY2tVcmw9e0tleXN0b25lLmJhY2tVcmx9XHJcblx0XHRcdFx0YnJhbmQ9e0tleXN0b25lLmJyYW5kfVxyXG5cdFx0XHRcdFVzZXI9e0tleXN0b25lLlVzZXJ9XHJcblx0XHRcdFx0dXNlcj17S2V5c3RvbmUudXNlcn1cclxuXHRcdFx0XHR2ZXJzaW9uPXtLZXlzdG9uZS52ZXJzaW9ufVxyXG5cdFx0XHQvPlxyXG5cdFx0PC9kaXY+XHJcblx0KTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQXBwO1xyXG4iLCIvKipcclxuICogVGhlIGdsb2JhbCBGb290ZXIsIGRpc3BsYXlzIGEgbGluayB0byB0aGUgd2Vic2l0ZSBhbmQgdGhlIGN1cnJlbnQgS2V5c3RvbmVcclxuICogdmVyc2lvbiBpbiB1c2VcclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuLi8uLi9lbGVtZW50YWwnO1xyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxudmFyIEZvb3RlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ0Zvb3RlcicsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRhcHB2ZXJzaW9uOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0YmFja1VybDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdGJyYW5kOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0dXNlcjogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcclxuXHRcdFVzZXI6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvc29ydC1wcm9wLXR5cGVzXHJcblx0XHR2ZXJzaW9uOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdH0sXHJcblx0Ly8gUmVuZGVyIHRoZSB1c2VyXHJcblx0cmVuZGVyVXNlciAoKSB7XHJcblx0XHRjb25zdCB7IFVzZXIsIHVzZXIgfSA9IHRoaXMucHJvcHM7XHJcblx0XHRpZiAoIXVzZXIpIHJldHVybiBudWxsO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxzcGFuPlxyXG5cdFx0XHRcdDxzcGFuPiBTaWduZWQgaW4gYXMgPC9zcGFuPlxyXG5cdFx0XHRcdDxhIGhyZWY9e2Ake0tleXN0b25lLmFkbWluUGF0aH0vJHtVc2VyLnBhdGh9LyR7dXNlci5pZH1gfSB0YWJJbmRleD1cIi0xXCIgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5saW5rKX0+XHJcblx0XHRcdFx0XHR7dXNlci5uYW1lfVxyXG5cdFx0XHRcdDwvYT5cclxuXHRcdFx0XHQ8c3Bhbj4uPC9zcGFuPlxyXG5cdFx0XHQ8L3NwYW4+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IHsgYmFja1VybCwgYnJhbmQsIGFwcHZlcnNpb24sIHZlcnNpb24gfSA9IHRoaXMucHJvcHM7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGZvb3RlciBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmZvb3Rlcil9IGRhdGEta2V5c3RvbmUtZm9vdGVyPlxyXG5cdFx0XHRcdDxDb250YWluZXI+XHJcblx0XHRcdFx0XHQ8YVxyXG5cdFx0XHRcdFx0XHRocmVmPXtiYWNrVXJsfVxyXG5cdFx0XHRcdFx0XHR0YWJJbmRleD1cIi0xXCJcclxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5saW5rKX1cclxuXHRcdFx0XHRcdD5cclxuXHRcdFx0XHRcdFx0e2JyYW5kICsgKGFwcHZlcnNpb24gPyAoJyAnICsgYXBwdmVyc2lvbikgOiAnJyl9XHJcblx0XHRcdFx0XHQ8L2E+XHJcblx0XHRcdFx0XHQ8c3Bhbj4gcG93ZXJlZCBieSA8L3NwYW4+XHJcblx0XHRcdFx0XHQ8YVxyXG5cdFx0XHRcdFx0XHRocmVmPVwiaHR0cDovL2tleXN0b25lanMuY29tXCJcclxuXHRcdFx0XHRcdFx0dGFyZ2V0PVwiX2JsYW5rXCJcclxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5saW5rKX1cclxuXHRcdFx0XHRcdFx0dGFiSW5kZXg9XCItMVwiXHJcblx0XHRcdFx0XHQ+XHJcblx0XHRcdFx0XHRcdEtleXN0b25lSlNcclxuXHRcdFx0XHRcdDwvYT5cclxuXHRcdFx0XHRcdDxzcGFuPiB2ZXJzaW9uIHt2ZXJzaW9ufS48L3NwYW4+XHJcblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJVc2VyKCl9XHJcblx0XHRcdFx0PC9Db250YWluZXI+XHJcblx0XHRcdDwvZm9vdGVyPlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cclxuY29uc3QgbGlua0hvdmVyQW5kRm9jdXMgPSB7XHJcblx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk2MCxcclxuXHRvdXRsaW5lOiAnbm9uZScsXHJcbn07XHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0Zm9vdGVyOiB7XHJcblx0XHRib3hTaGFkb3c6ICcwIC0xcHggMCByZ2JhKDAsIDAsIDAsIDAuMSknLFxyXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk0MCxcclxuXHRcdGZvbnRTaXplOiB0aGVtZS5mb250LnNpemUuc21hbGwsXHJcblx0XHRwYWRkaW5nQm90dG9tOiAzMCxcclxuXHRcdHBhZGRpbmdUb3A6IDQwLFxyXG5cdFx0dGV4dEFsaWduOiAnY2VudGVyJyxcclxuXHRcdGRpc3BsYXk6ICdub25lJ1xyXG5cdH0sXHJcblx0bGluazoge1xyXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk2MCxcclxuXHJcblx0XHQnOmhvdmVyJzogbGlua0hvdmVyQW5kRm9jdXMsXHJcblx0XHQnOmZvY3VzJzogbGlua0hvdmVyQW5kRm9jdXMsXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRm9vdGVyO1xyXG4iLCIvKipcclxuICogQSBsaXN0IGl0ZW0gb2YgdGhlIG1vYmlsZSBuYXZpZ2F0aW9uXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcblxyXG5jb25zdCBNb2JpbGVMaXN0SXRlbSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ01vYmlsZUxpc3RJdGVtJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxyXG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0aHJlZjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG5cdFx0b25DbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PExpbmtcclxuXHRcdFx0XHRjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfVxyXG5cdFx0XHRcdHRvPXt0aGlzLnByb3BzLmhyZWZ9XHJcblx0XHRcdFx0b25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfVxyXG5cdFx0XHRcdHRhYkluZGV4PVwiLTFcIlxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0e3RoaXMucHJvcHMuY2hpbGRyZW59XHJcblx0XHRcdDwvTGluaz5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1vYmlsZUxpc3RJdGVtO1xyXG4iLCIvKipcclxuICogQSBtb2JpbGUgc2VjdGlvblxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBNb2JpbGVMaXN0SXRlbSBmcm9tICcuL0xpc3RJdGVtJztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcblxyXG5jb25zdCBNb2JpbGVTZWN0aW9uSXRlbSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ01vYmlsZVNlY3Rpb25JdGVtJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxyXG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0Y3VycmVudExpc3RLZXk6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRocmVmOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcblx0XHRsaXN0czogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxyXG5cdH0sXHJcblx0Ly8gUmVuZGVyIHRoZSBsaXN0c1xyXG5cdHJlbmRlckxpc3RzICgpIHtcclxuXHRcdGlmICghdGhpcy5wcm9wcy5saXN0cyB8fCB0aGlzLnByb3BzLmxpc3RzLmxlbmd0aCA8PSAxKSByZXR1cm4gbnVsbDtcclxuXHJcblx0XHRjb25zdCBuYXZMaXN0cyA9IHRoaXMucHJvcHMubGlzdHMubWFwKChpdGVtKSA9PiB7XHJcblx0XHRcdC8vIEdldCB0aGUgbGluayBhbmQgdGhlIGNsYXNzbmFtZVxyXG5cdFx0XHRjb25zdCBocmVmID0gaXRlbS5leHRlcm5hbCA/IGl0ZW0ucGF0aCA6IGAke0tleXN0b25lLmFkbWluUGF0aH0vJHtpdGVtLnBhdGh9YDtcclxuXHRcdFx0Y29uc3QgY2xhc3NOYW1lID0gKHRoaXMucHJvcHMuY3VycmVudExpc3RLZXkgJiYgdGhpcy5wcm9wcy5jdXJyZW50TGlzdEtleSA9PT0gaXRlbS5wYXRoKSA/ICdNb2JpbGVOYXZpZ2F0aW9uX19saXN0LWl0ZW0gaXMtYWN0aXZlJyA6ICdNb2JpbGVOYXZpZ2F0aW9uX19saXN0LWl0ZW0nO1xyXG5cclxuXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHQ8TW9iaWxlTGlzdEl0ZW0ga2V5PXtpdGVtLnBhdGh9IGhyZWY9e2hyZWZ9IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xpY2t9PlxyXG5cdFx0XHRcdFx0e2l0ZW0ubGFiZWx9XHJcblx0XHRcdFx0PC9Nb2JpbGVMaXN0SXRlbT5cclxuXHRcdFx0KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiTW9iaWxlTmF2aWdhdGlvbl9fbGlzdHNcIj5cclxuXHRcdFx0XHR7bmF2TGlzdHN9XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9PlxyXG5cdFx0XHRcdDxMaW5rXHJcblx0XHRcdFx0XHRjbGFzc05hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uX19zZWN0aW9uLWl0ZW1cIlxyXG5cdFx0XHRcdFx0dG89e3RoaXMucHJvcHMuaHJlZn1cclxuXHRcdFx0XHRcdHRhYkluZGV4PVwiLTFcIlxyXG5cdFx0XHRcdFx0b25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfVxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdHt0aGlzLnByb3BzLmNoaWxkcmVufVxyXG5cdFx0XHRcdDwvTGluaz5cclxuXHRcdFx0XHR7dGhpcy5yZW5kZXJMaXN0cygpfVxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1vYmlsZVNlY3Rpb25JdGVtO1xyXG4iLCIvKipcclxuICogVGhlIG1vYmlsZSBuYXZpZ2F0aW9uLCBkaXNwbGF5ZWQgb24gc2NyZWVucyA8IDc2OHB4XHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFRyYW5zaXRpb24gZnJvbSAncmVhY3QtYWRkb25zLWNzcy10cmFuc2l0aW9uLWdyb3VwJztcclxuXHJcbmltcG9ydCBNb2JpbGVTZWN0aW9uSXRlbSBmcm9tICcuL1NlY3Rpb25JdGVtJztcclxuXHJcbmNvbnN0IEVTQ0FQRV9LRVlfQ09ERSA9IDI3O1xyXG5cclxuY29uc3QgTW9iaWxlTmF2aWdhdGlvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ01vYmlsZU5hdmlnYXRpb24nLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0YnJhbmQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRjdXJyZW50TGlzdEtleTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdGN1cnJlbnRTZWN0aW9uS2V5OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0c2VjdGlvbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxyXG5cdFx0c2lnbm91dFVybDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHR9LFxyXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRiYXJJc1Zpc2libGU6IGZhbHNlLFxyXG5cdFx0fTtcclxuXHR9LFxyXG5cdC8vIEhhbmRsZSBzaG93aW5nIGFuZCBoaWRpbmcgdGhlIG1lbnUgYmFzZWQgb24gdGhlIHdpbmRvdyBzaXplIHdoZW5cclxuXHQvLyByZXNpemluZ1xyXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuXHRcdHRoaXMuaGFuZGxlUmVzaXplKCk7XHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xyXG5cdH0sXHJcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xyXG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcclxuXHR9LFxyXG5cdGhhbmRsZVJlc2l6ZSAoKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0YmFySXNWaXNpYmxlOiB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2OCxcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0Ly8gVG9nZ2xlIHRoZSBtZW51XHJcblx0dG9nZ2xlTWVudSAoKSB7XHJcblx0XHR0aGlzW3RoaXMuc3RhdGUubWVudUlzVmlzaWJsZSA/ICdoaWRlTWVudScgOiAnc2hvd01lbnUnXSgpO1xyXG5cdH0sXHJcblx0Ly8gU2hvdyB0aGUgbWVudVxyXG5cdHNob3dNZW51ICgpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRtZW51SXNWaXNpYmxlOiB0cnVlLFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gTWFrZSB0aGUgYm9keSB1bnNjcm9sbGFibGUsIHNvIHlvdSBjYW4gb25seSBzY3JvbGwgaW4gdGhlIG1lbnVcclxuXHRcdGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcclxuXHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmhhbmRsZUVzY2FwZUtleSwgZmFsc2UpO1xyXG5cdH0sXHJcblx0Ly8gSGlkZSB0aGUgbWVudVxyXG5cdGhpZGVNZW51ICgpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRtZW51SXNWaXNpYmxlOiBmYWxzZSxcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIE1ha2UgdGhlIGJvZHkgc2Nyb2xsYWJsZSBhZ2FpblxyXG5cdFx0ZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IG51bGw7XHJcblx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVFc2NhcGVLZXksIGZhbHNlKTtcclxuXHR9LFxyXG5cdC8vIElmIHRoZSBlc2NhcGUga2V5IHdhcyBwcmVzc2VkLCBoaWRlIHRoZSBtZW51XHJcblx0aGFuZGxlRXNjYXBlS2V5IChldmVudCkge1xyXG5cdFx0aWYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZX0NPREUpIHtcclxuXHRcdFx0dGhpcy5oaWRlTWVudSgpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0cmVuZGVyTmF2aWdhdGlvbiAoKSB7XHJcblx0XHRpZiAoIXRoaXMucHJvcHMuc2VjdGlvbnMgfHwgIXRoaXMucHJvcHMuc2VjdGlvbnMubGVuZ3RoKSByZXR1cm4gbnVsbDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wcm9wcy5zZWN0aW9ucy5tYXAoKHNlY3Rpb24pID0+IHtcclxuXHRcdFx0Ly8gR2V0IHRoZSBsaW5rIGFuZCB0aGUgY2xhc3NuYW1lXHJcblx0XHRcdGNvbnN0IGhyZWYgPSBzZWN0aW9uLmxpc3RzWzBdLmV4dGVybmFsID8gc2VjdGlvbi5saXN0c1swXS5wYXRoIDogYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke3NlY3Rpb24ubGlzdHNbMF0ucGF0aH1gO1xyXG5cdFx0XHRjb25zdCBjbGFzc05hbWUgPSAodGhpcy5wcm9wcy5jdXJyZW50U2VjdGlvbktleSAmJiB0aGlzLnByb3BzLmN1cnJlbnRTZWN0aW9uS2V5ID09PSBzZWN0aW9uLmtleSkgPyAnTW9iaWxlTmF2aWdhdGlvbl9fc2VjdGlvbiBpcy1hY3RpdmUnIDogJ01vYmlsZU5hdmlnYXRpb25fX3NlY3Rpb24nO1xyXG5cclxuXHRcdFx0Ly8gUmVuZGVyIGEgU2VjdGlvbkl0ZW1cclxuXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHQ8TW9iaWxlU2VjdGlvbkl0ZW1cclxuXHRcdFx0XHRcdGtleT17c2VjdGlvbi5rZXl9XHJcblx0XHRcdFx0XHRjbGFzc05hbWU9e2NsYXNzTmFtZX1cclxuXHRcdFx0XHRcdGhyZWY9e2hyZWZ9XHJcblx0XHRcdFx0XHRsaXN0cz17c2VjdGlvbi5saXN0c31cclxuXHRcdFx0XHRcdGN1cnJlbnRMaXN0S2V5PXt0aGlzLnByb3BzLmN1cnJlbnRMaXN0S2V5fVxyXG5cdFx0XHRcdFx0b25DbGljaz17dGhpcy50b2dnbGVNZW51fVxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdHtzZWN0aW9uLmxhYmVsfVxyXG5cdFx0XHRcdDwvTW9iaWxlU2VjdGlvbkl0ZW0+XHJcblx0XHRcdCk7XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdC8vIFJlbmRlciBhIGJsb2Nrb3V0XHJcblx0cmVuZGVyQmxvY2tvdXQgKCkge1xyXG5cdFx0aWYgKCF0aGlzLnN0YXRlLm1lbnVJc1Zpc2libGUpIHJldHVybiBudWxsO1xyXG5cclxuXHRcdHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25fX2Jsb2Nrb3V0XCIgb25DbGljaz17dGhpcy50b2dnbGVNZW51fSAvPjtcclxuXHR9LFxyXG5cdC8vIFJlbmRlciB0aGUgc2lkZWJhciBtZW51XHJcblx0cmVuZGVyTWVudSAoKSB7XHJcblx0XHRpZiAoIXRoaXMuc3RhdGUubWVudUlzVmlzaWJsZSkgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PG5hdiBjbGFzc05hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uX19tZW51XCI+XHJcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uX19zZWN0aW9uc1wiPlxyXG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyTmF2aWdhdGlvbigpfVxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L25hdj5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0aWYgKCF0aGlzLnN0YXRlLmJhcklzVmlzaWJsZSkgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uXCI+XHJcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uX19iYXJcIj5cclxuXHRcdFx0XHRcdDxidXR0b25cclxuXHRcdFx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXHJcblx0XHRcdFx0XHRcdG9uQ2xpY2s9e3RoaXMudG9nZ2xlTWVudX1cclxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPVwiTW9iaWxlTmF2aWdhdGlvbl9fYmFyX19idXR0b24gTW9iaWxlTmF2aWdhdGlvbl9fYmFyX19idXR0b24tLW1lbnVcIlxyXG5cdFx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9eydNb2JpbGVOYXZpZ2F0aW9uX19iYXJfX2ljb24gb2N0aWNvbiBvY3RpY29uLScgKyAodGhpcy5zdGF0ZS5tZW51SXNWaXNpYmxlID8gJ3gnIDogJ3RocmVlLWJhcnMnKX0gLz5cclxuXHRcdFx0XHRcdDwvYnV0dG9uPlxyXG5cdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwiTW9iaWxlTmF2aWdhdGlvbl9fYmFyX19sYWJlbFwiPlxyXG5cdFx0XHRcdFx0XHR7dGhpcy5wcm9wcy5icmFuZH1cclxuXHRcdFx0XHRcdDwvc3Bhbj5cclxuXHRcdFx0XHRcdDxhXHJcblx0XHRcdFx0XHRcdGhyZWY9e3RoaXMucHJvcHMuc2lnbm91dFVybH1cclxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPVwiTW9iaWxlTmF2aWdhdGlvbl9fYmFyX19idXR0b24gTW9iaWxlTmF2aWdhdGlvbl9fYmFyX19idXR0b24tLXNpZ25vdXRcIlxyXG5cdFx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uX19iYXJfX2ljb24gb2N0aWNvbiBvY3RpY29uLXNpZ24tb3V0XCIgLz5cclxuXHRcdFx0XHRcdDwvYT5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25fX2Jhci0tcGxhY2Vob2xkZXJcIiAvPlxyXG5cdFx0XHRcdDxUcmFuc2l0aW9uXHJcblx0XHRcdFx0XHR0cmFuc2l0aW9uTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25fX21lbnVcIlxyXG5cdFx0XHRcdFx0dHJhbnNpdGlvbkVudGVyVGltZW91dD17MjYwfVxyXG5cdFx0XHRcdFx0dHJhbnNpdGlvbkxlYXZlVGltZW91dD17MjAwfVxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdHt0aGlzLnJlbmRlck1lbnUoKX1cclxuXHRcdFx0XHQ8L1RyYW5zaXRpb24+XHJcblx0XHRcdFx0PFRyYW5zaXRpb25cclxuXHRcdFx0XHRcdHRyYW5zaXRpb25OYW1lPVwicmVhY3QtdHJhbnNpdGlvbmdyb3VwLWZhZGVcIlxyXG5cdFx0XHRcdFx0dHJhbnNpdGlvbkVudGVyVGltZW91dD17MH1cclxuXHRcdFx0XHRcdHRyYW5zaXRpb25MZWF2ZVRpbWVvdXQ9ezB9XHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyQmxvY2tvdXQoKX1cclxuXHRcdFx0XHQ8L1RyYW5zaXRpb24+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTW9iaWxlTmF2aWdhdGlvbjtcclxuIiwiLyoqXHJcbiAqIEEgaXRlbSBpbiB0aGUgcHJpbWFyeSBuYXZpZ2F0aW9uLiBJZiBpdCBoYXMgYSBcInRvXCIgcHJvcCBpdCdsbCByZW5kZXIgYVxyXG4gKiByZWFjdC1yb3V0ZXIgXCJMaW5rXCIsIGlmIGl0IGhhcyBhIFwiaHJlZlwiIHByb3AgaXQnbGwgcmVuZGVyIGEgc2ltcGxlIFwiYVwiIHRhZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuXHJcbmNvbnN0IFByaW1hcnlOYXZJdGVtID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgaHJlZiwgbGFiZWwsIHRpdGxlLCB0bywgYWN0aXZlIH0pID0+IHtcclxuXHRjb25zdCBpdGVtQ2xhc3NOYW1lID0gY2xhc3NuYW1lcygncHJpbWFyeS1uYXZiYXJfX2l0ZW0nLCBjbGFzc05hbWUpO1xyXG5cclxuXHRjb25zdCBCdXR0b24gPSB0byA/IChcclxuXHRcdDxMaW5rXHJcblx0XHRcdGNsYXNzTmFtZT1cInByaW1hcnktbmF2YmFyX19saW5rXCJcclxuXHRcdFx0a2V5PXt0aXRsZX1cclxuXHRcdFx0dGFiSW5kZXg9XCItMVwiXHJcblx0XHRcdHRpdGxlPXt0aXRsZX1cclxuXHRcdFx0dG89e3RvfVxyXG5cdFx0XHQvLyBCbG9jayBjbGlja3Mgb24gYWN0aXZlIGxpbmtcclxuXHRcdFx0b25DbGljaz17KGV2dCkgPT4geyBpZiAoYWN0aXZlKSBldnQucHJldmVudERlZmF1bHQoKTsgfX1cclxuXHRcdD5cclxuXHRcdFx0e2NoaWxkcmVufVxyXG5cdFx0PC9MaW5rPlxyXG5cdCkgOiAoXHJcblx0XHQ8YVxyXG5cdFx0XHRjbGFzc05hbWU9XCJwcmltYXJ5LW5hdmJhcl9fbGlua1wiXHJcblx0XHRcdGhyZWY9e2hyZWZ9XHJcblx0XHRcdGtleT17dGl0bGV9XHJcblx0XHRcdHRhYkluZGV4PVwiLTFcIlxyXG5cdFx0XHR0aXRsZT17dGl0bGV9XHJcblx0XHQ+XHJcblx0XHRcdHtjaGlsZHJlbn1cclxuXHRcdDwvYT5cclxuXHQpO1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PGxpXHJcblx0XHRcdGNsYXNzTmFtZT17aXRlbUNsYXNzTmFtZX1cclxuXHRcdFx0ZGF0YS1zZWN0aW9uLWxhYmVsPXtsYWJlbH1cclxuXHRcdD5cclxuXHRcdFx0e0J1dHRvbn1cclxuXHRcdDwvbGk+XHJcblx0KTtcclxufTtcclxuXHJcblByaW1hcnlOYXZJdGVtLmRpc3BsYXlOYW1lID0gJ1ByaW1hcnlOYXZJdGVtJztcclxuUHJpbWFyeU5hdkl0ZW0ucHJvcFR5cGVzID0ge1xyXG5cdGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxyXG5cdGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHRvOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQcmltYXJ5TmF2SXRlbTtcclxuIiwiLyoqXG4gKiBUaGUgcHJpbWFyeSAoaS5lLiB1cHBlcm1vc3QpIG5hdmlnYXRpb24gb24gZGVza3RvcC4gUmVuZGVycyBhbGwgc2VjdGlvbnMgYW5kXG4gKiB0aGUgaG9tZS0sIHdlYnNpdGUtIGFuZCBzaWdub3V0IGJ1dHRvbnMuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XG5pbXBvcnQgUHJpbWFyeU5hdkl0ZW0gZnJvbSAnLi9OYXZJdGVtJztcblxudmFyIFByaW1hcnlOYXZpZ2F0aW9uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRkaXNwbGF5TmFtZTogJ1ByaW1hcnlOYXZpZ2F0aW9uJyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0YnJhbmQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0Y3VycmVudFNlY3Rpb25LZXk6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0c2VjdGlvbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuXHRcdHNpZ25vdXRVcmw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdH0sXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XG5cdFx0cmV0dXJuIHt9O1xuXHR9LFxuXHQvLyBIYW5kbGUgcmVzaXppbmcsIGhpZGUgdGhpcyBuYXZpZ2F0aW9uIG9uIG1vYmlsZSAoaS5lLiA8IDc2OHB4KSBzY3JlZW5zXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcblx0XHR0aGlzLmhhbmRsZVJlc2l6ZSgpO1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG5cdH0sXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuXHR9LFxuXHRoYW5kbGVSZXNpemUgKCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0bmF2SXNWaXNpYmxlOiB3aW5kb3cuaW5uZXJXaWR0aCA+PSA3NjgsXG5cdFx0fSk7XG5cdH0sXG5cdC8vIFJlbmRlciB0aGUgc2lnbiBvdXQgYnV0dG9uXG5cdHJlbmRlclNpZ25vdXQgKCkge1xuXHRcdGlmICghdGhpcy5wcm9wcy5zaWdub3V0VXJsKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8UHJpbWFyeU5hdkl0ZW1cblx0XHRcdFx0bGFiZWw9XCJnbHlwaGljb24gZ2x5cGhpY29uLWxvZ1wiXG5cdFx0XHRcdGhyZWY9e3RoaXMucHJvcHMuc2lnbm91dFVybH1cblx0XHRcdFx0dGl0bGU9XCJTaWduIE91dFwiXG5cdFx0XHQ+XG5cdFx0XHRcdCBTaWduIE91dFxuXHRcdFx0PC9QcmltYXJ5TmF2SXRlbT5cblx0XHQpO1xuXHR9LFxuXHQvLyBSZW5kZXIgdGhlIGJhY2sgYnV0dG9uXG5cdHJlbmRlckJhY2tCdXR0b24gKCkge1xuXHRcdGlmICghS2V5c3RvbmUuYmFja1VybCkgcmV0dXJuIG51bGw7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PFByaW1hcnlOYXZJdGVtXG5cdFx0XHRcdGxhYmVsPVwib2N0aWNvbi1nbG9iZVwiXG5cdFx0XHRcdGhyZWY9e0tleXN0b25lLmJhY2tVcmx9XG5cdFx0XHRcdHRpdGxlPXsnRnJvbnQgcGFnZSAtICcgKyB0aGlzLnByb3BzLmJyYW5kfVxuXHRcdFx0PlxuXHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJvY3RpY29uIG9jdGljb24tZ2xvYmVcIiAvPlxuXHRcdFx0PC9QcmltYXJ5TmF2SXRlbT5cblx0XHQpO1xuXHR9LFxuXHQvLyBSZW5kZXIgdGhlIGxpbmsgdG8gdGhlIHdlYnBhZ2Vcblx0cmVuZGVyRnJvbnRMaW5rICgpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PHVsIGNsYXNzTmFtZT1cImFwcC1uYXYgYXBwLW5hdi0tcHJpbWFyeSBhcHAtbmF2LS1yaWdodFwiPlxuXHRcdFx0XHR7Lyp0aGlzLnJlbmRlckJhY2tCdXR0b24oKSovfVxuXHRcdFx0XHR7dGhpcy5yZW5kZXJTaWdub3V0KCl9XG5cdFx0XHQ8L3VsPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlckJyYW5kICgpIHtcblx0XHQvLyBUT0RPOiBzdXBwb3J0IG5hdmJhckxvZ28gZnJvbSBrZXlzdG9uZSBjb25maWdcblx0XHRpZiAoIUtleXN0b25lLmJhY2tVcmwpIHJldHVybiBudWxsO1xuXG5cdFx0Y29uc3QgeyBicmFuZCwgY3VycmVudFNlY3Rpb25LZXkgfSA9IHRoaXMucHJvcHM7XG5cdFx0Y29uc3QgY2xhc3NOYW1lID0gY3VycmVudFNlY3Rpb25LZXkgPT09ICdkYXNoYm9hcmQnID8gJ3ByaW1hcnktbmF2YmFyX19icmFuZCBwcmltYXJ5LW5hdmJhcl9faXRlbS0tYWN0aXZlJyA6ICdwcmltYXJ5LW5hdmJhcl9fYnJhbmQnO1xuXHRcdHJldHVybiAoXG5cdFx0IFx0PFByaW1hcnlOYXZJdGVtXG5cdFx0XHRcdGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuXHRcdFx0XHRocmVmPXtLZXlzdG9uZS5iYWNrVXJsfVxuXHRcdFx0XHRsYWJlbD1cIm9jdGljb24taG9tZVwiXG5cdFx0XHRcdHRpdGxlPXsnRnJvbnQgcGFnZSAtICcgKyB0aGlzLnByb3BzLmJyYW5kfVxuXHRcdCBcdD5cblx0XHQgXHRcdEhvbWVcblx0XHQgXHQ8L1ByaW1hcnlOYXZJdGVtPlxuXHQgXHQpO1xuXHR9LFxuXHQvLyBSZW5kZXIgdGhlIG5hdmlnYXRpb25cblx0cmVuZGVyTmF2aWdhdGlvbiAoKSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLnNlY3Rpb25zIHx8ICF0aGlzLnByb3BzLnNlY3Rpb25zLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cblx0XHRyZXR1cm4gdGhpcy5wcm9wcy5zZWN0aW9ucy5tYXAoKHNlY3Rpb24pID0+IHtcblx0XHRcdC8vIEdldCB0aGUgbGluayBhbmQgdGhlIGNsYXNzIG5hbWVcblx0XHRcdGNvbnN0IGhyZWYgPSBzZWN0aW9uLmxpc3RzWzBdLmV4dGVybmFsID8gc2VjdGlvbi5saXN0c1swXS5wYXRoIDogYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke3NlY3Rpb24ubGlzdHNbMF0ucGF0aH1gO1xuXHRcdFx0Y29uc3QgaXNBY3RpdmUgPSB0aGlzLnByb3BzLmN1cnJlbnRTZWN0aW9uS2V5ICYmIHRoaXMucHJvcHMuY3VycmVudFNlY3Rpb25LZXkgPT09IHNlY3Rpb24ua2V5O1xuXHRcdFx0Y29uc3QgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyAncHJpbWFyeS1uYXZiYXJfX2l0ZW0tLWFjdGl2ZScgOiBudWxsO1xuXG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8UHJpbWFyeU5hdkl0ZW1cblx0XHRcdFx0XHRhY3RpdmU9e2lzQWN0aXZlfVxuXHRcdFx0XHRcdGtleT17c2VjdGlvbi5rZXl9XG5cdFx0XHRcdFx0bGFiZWw9e3NlY3Rpb24ubGFiZWx9XG5cdFx0XHRcdFx0Y2xhc3NOYW1lPXtjbGFzc05hbWV9XG5cdFx0XHRcdFx0dG89e2hyZWZ9XG5cdFx0XHRcdD5cblx0XHRcdFx0XHR7c2VjdGlvbi5sYWJlbH1cblx0XHRcdFx0PC9QcmltYXJ5TmF2SXRlbT5cblx0XHRcdCk7XG5cdFx0fSk7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0aWYgKCF0aGlzLnN0YXRlLm5hdklzVmlzaWJsZSkgcmV0dXJuIG51bGw7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PG5hdiBjbGFzc05hbWU9XCJwcmltYXJ5LW5hdmJhclwiPlxuXHRcdFx0XHQ8dWwgY2xhc3NOYW1lPVwiYXBwLW5hdiBhcHAtbmF2LS1wcmltYXJ5IGFwcC1uYXYtLWxlZnRcIj5cblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJCcmFuZCgpfVxuXHRcdFx0XHRcdHt0aGlzLnJlbmRlck5hdmlnYXRpb24oKX1cblx0XHRcdFx0PC91bD5cblx0XHRcdFx0e3RoaXMucmVuZGVyRnJvbnRMaW5rKCl9XG5cdFx0XHQ8L25hdj5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJpbWFyeU5hdmlnYXRpb247XG4iLCIvKipcclxuICogQSBuYXZpZ2F0aW9uIGl0ZW0gb2YgdGhlIHNlY29uZGFyeSBuYXZpZ2F0aW9uXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcblxyXG5jb25zdCBTZWNvbmRhcnlOYXZJdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnU2Vjb25kYXJ5TmF2SXRlbScsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRjaGlsZHJlbjogUmVhY3QuUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcclxuXHRcdGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdGhyZWY6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuXHRcdG9uQ2xpY2s6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdFx0cGF0aDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdHRpdGxlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxsaSBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfSBkYXRhLWxpc3QtcGF0aD17dGhpcy5wcm9wcy5wYXRofT5cclxuXHRcdFx0XHQ8TGlua1xyXG5cdFx0XHRcdFx0dG89e3RoaXMucHJvcHMuaHJlZn1cclxuXHRcdFx0XHRcdG9uQ2xpY2s9e3RoaXMucHJvcHMub25DbGlja31cclxuXHRcdFx0XHRcdHRpdGxlPXt0aGlzLnByb3BzLnRpdGxlfVxyXG5cdFx0XHRcdFx0dGFiSW5kZXg9XCItMVwiXHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0e3RoaXMucHJvcHMuY2hpbGRyZW59XHJcblx0XHRcdFx0PC9MaW5rPlxyXG5cdFx0XHQ8L2xpPlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU2Vjb25kYXJ5TmF2SXRlbTtcclxuIiwiLyoqXHJcbiAqIFRoZSBzZWNvbmRhcnkgbmF2aWdhdGlvbiBsaW5rcyB0byBpbmlkdmlkdWFsIGxpc3RzIG9mIGEgc2VjdGlvblxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XHJcblxyXG5pbXBvcnQge1xyXG5cdHNldEFjdGl2ZUxpc3QsXHJcbn0gZnJvbSAnLi4vLi4vLi4vc2NyZWVucy9MaXN0L2FjdGlvbnMvYWN0aXZlJztcclxuaW1wb3J0IFNlY29uZGFyeU5hdkl0ZW0gZnJvbSAnLi9OYXZJdGVtJztcclxuXHJcbnZhciBTZWNvbmRhcnlOYXZpZ2F0aW9uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnU2Vjb25kYXJ5TmF2aWdhdGlvbicsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRjdXJyZW50TGlzdEtleTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdGxpc3RzOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcclxuXHR9LFxyXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XHJcblx0XHRyZXR1cm4ge307XHJcblx0fSxcclxuXHQvLyBIYW5kbGUgcmVzaXppbmcgYW5kIGhpZGUgdGhpcyBuYXYgb24gbW9iaWxlIChpLmUuIDwgNzY4cHgpIHNjcmVlbnNcclxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XHJcblx0XHR0aGlzLmhhbmRsZVJlc2l6ZSgpO1xyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcclxuXHR9LFxyXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcclxuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XHJcblx0fSxcclxuXHRoYW5kbGVSZXNpemUgKCkge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdG5hdklzVmlzaWJsZTogdGhpcy5wcm9wcy5saXN0cyAmJiBPYmplY3Qua2V5cyh0aGlzLnByb3BzLmxpc3RzKS5sZW5ndGggPiAwICYmIHdpbmRvdy5pbm5lcldpZHRoID49IDc2OCxcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0Ly8gUmVuZGVyIHRoZSBuYXZpZ2F0aW9uXHJcblx0cmVuZGVyTmF2aWdhdGlvbiAobGlzdHMpIHtcclxuXHRcdGNvbnN0IG5hdmlnYXRpb24gPSBPYmplY3Qua2V5cyhsaXN0cykubWFwKChrZXkpID0+IHtcclxuXHRcdFx0Y29uc3QgbGlzdCA9IGxpc3RzW2tleV07XHJcblx0XHRcdC8vIEdldCB0aGUgbGluayBhbmQgdGhlIGNsYXNzbmFtZVxyXG5cdFx0XHRjb25zdCBocmVmID0gbGlzdC5leHRlcm5hbCA/IGxpc3QucGF0aCA6IGAke0tleXN0b25lLmFkbWluUGF0aH0vJHtsaXN0LnBhdGh9YDtcclxuXHRcdFx0Y29uc3QgaXNBY3RpdmUgPSB0aGlzLnByb3BzLmN1cnJlbnRMaXN0S2V5ICYmIHRoaXMucHJvcHMuY3VycmVudExpc3RLZXkgPT09IGxpc3QucGF0aDtcclxuXHRcdFx0Y29uc3QgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyAnYWN0aXZlJyA6IG51bGw7XHJcblx0XHRcdGNvbnN0IG9uQ2xpY2sgPSAoZXZ0KSA9PiB7XHJcblx0XHRcdFx0Ly8gSWYgaXQncyB0aGUgY3VycmVudGx5IGFjdGl2ZSBuYXZpZ2F0aW9uIGl0ZW0gYW5kIHdlJ3JlIG5vdCBvbiB0aGUgaXRlbSB2aWV3LFxyXG5cdFx0XHRcdC8vIGNsZWFyIHRoZSBxdWVyeSBwYXJhbXMgb24gY2xpY2tcclxuXHRcdFx0XHRpZiAoaXNBY3RpdmUgJiYgIXRoaXMucHJvcHMuaXRlbUlkKSB7XHJcblx0XHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goXHJcblx0XHRcdFx0XHRcdHNldEFjdGl2ZUxpc3QodGhpcy5wcm9wcy5jdXJyZW50TGlzdCwgdGhpcy5wcm9wcy5jdXJyZW50TGlzdEtleSlcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHQ8U2Vjb25kYXJ5TmF2SXRlbVxyXG5cdFx0XHRcdFx0a2V5PXtsaXN0LnBhdGh9XHJcblx0XHRcdFx0XHRwYXRoPXtsaXN0LnBhdGh9XHJcblx0XHRcdFx0XHRjbGFzc05hbWU9e2NsYXNzTmFtZX1cclxuXHRcdFx0XHRcdGhyZWY9e2hyZWZ9XHJcblx0XHRcdFx0XHRvbkNsaWNrPXtvbkNsaWNrfVxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdHtsaXN0LmxhYmVsfVxyXG5cdFx0XHRcdDwvU2Vjb25kYXJ5TmF2SXRlbT5cclxuXHRcdFx0KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDx1bCBjbGFzc05hbWU9XCJhcHAtbmF2IGFwcC1uYXYtLXNlY29uZGFyeSBhcHAtbmF2LS1sZWZ0XCI+XHJcblx0XHRcdFx0e25hdmlnYXRpb259XHJcblx0XHRcdDwvdWw+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGlmICghdGhpcy5zdGF0ZS5uYXZJc1Zpc2libGUpIHJldHVybiBudWxsO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxuYXYgY2xhc3NOYW1lPVwic2Vjb25kYXJ5LW5hdmJhclwiPlxyXG5cdFx0XHRcdDxDb250YWluZXIgY2xlYXJGbG9hdGluZ0NoaWxkcmVuPlxyXG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyTmF2aWdhdGlvbih0aGlzLnByb3BzLmxpc3RzKX1cclxuXHRcdFx0XHQ8L0NvbnRhaW5lcj5cclxuXHRcdFx0PC9uYXY+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjb25uZWN0KChzdGF0ZSkgPT4ge1xyXG5cdHJldHVybiB7XHJcblx0XHRjdXJyZW50TGlzdDogc3RhdGUubGlzdHMuY3VycmVudExpc3QsXHJcblx0fTtcclxufSkoU2Vjb25kYXJ5TmF2aWdhdGlvbik7XHJcbiIsImltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRkYW5nZXI6IHRoZW1lLmFsZXJ0LmNvbG9yLmRhbmdlcixcclxuXHRlcnJvcjogdGhlbWUuYWxlcnQuY29sb3IuZGFuZ2VyLFxyXG5cdGluZm86IHRoZW1lLmFsZXJ0LmNvbG9yLmluZm8sXHJcblx0c3VjY2VzczogdGhlbWUuYWxlcnQuY29sb3Iuc3VjY2VzcyxcclxuXHR3YXJuaW5nOiB0aGVtZS5hbGVydC5jb2xvci53YXJuaW5nLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCBDaGlsZHJlbiwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XHJcbmltcG9ydCBjb2xvcnMgZnJvbSAnLi9jb2xvcnMnO1xyXG5cclxuLy8gY2xvbmUgY2hpbGRyZW4gaWYgYSBjbGFzcyBleGlzdHMgZm9yIHRoZSB0YWduYW1lXHJcbmNvbnN0IGNsb25lV2l0aENsYXNzbmFtZXMgPSAoYykgPT4ge1xyXG5cdGNvbnN0IHR5cGUgPSBjLnR5cGUgJiYgYy50eXBlLmRpc3BsYXlOYW1lXHJcblx0XHQ/IGMudHlwZS5kaXNwbGF5TmFtZVxyXG5cdFx0OiBjLnR5cGUgfHwgbnVsbDtcclxuXHJcblx0aWYgKCF0eXBlIHx8ICFjbGFzc2VzW3R5cGVdKSByZXR1cm4gYztcclxuXHJcblx0cmV0dXJuIGNsb25lRWxlbWVudChjLCB7XHJcblx0XHRjbGFzc05hbWU6IGNzcyhjbGFzc2VzW3R5cGVdKSxcclxuXHR9KTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIEFsZXJ0ICh7XHJcblx0Y2hpbGRyZW4sXHJcblx0Y2xhc3NOYW1lLFxyXG5cdGNvbG9yLFxyXG5cdGNvbXBvbmVudDogQ29tcG9uZW50LFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXHJcblx0XHRjbGFzc2VzLmFsZXJ0LFxyXG5cdFx0Y2xhc3Nlc1tjb2xvcl0sXHJcblx0XHRjbGFzc05hbWVcclxuXHQpO1xyXG5cdHByb3BzLmNoaWxkcmVuID0gQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBjbG9uZVdpdGhDbGFzc25hbWVzKTtcclxuXHJcblx0cmV0dXJuIDxDb21wb25lbnQgey4uLnByb3BzfSBkYXRhLWFsZXJ0LXR5cGU9e2NvbG9yfSAvPjtcclxufTtcclxuXHJcbkFsZXJ0LnByb3BUeXBlcyA9IHtcclxuXHRjb2xvcjogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKGNvbG9ycykpLmlzUmVxdWlyZWQsXHJcblx0Y29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5mdW5jLFxyXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcclxuXHRdKSxcclxufTtcclxuQWxlcnQuZGVmYXVsdFByb3BzID0ge1xyXG5cdGNvbXBvbmVudDogJ2RpdicsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEFsZXJ0O1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gQWxlcnRcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXHJcblxyXG5pbXBvcnQgY29sb3JzIGZyb20gJy4vY29sb3JzJztcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbi8vIFByZXBhcmUgdmFyaWFudHNcclxuY29uc3QgY29sb3JWYXJpYW50cyA9IHt9O1xyXG5PYmplY3Qua2V5cyhjb2xvcnMpLmZvckVhY2goY29sb3IgPT4ge1xyXG5cdGNvbG9yVmFyaWFudHNbY29sb3JdID0ge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBjb2xvcnNbY29sb3JdLmJhY2tncm91bmQsXHJcblx0XHRib3JkZXJDb2xvcjogY29sb3JzW2NvbG9yXS5ib3JkZXIsXHJcblx0XHRjb2xvcjogY29sb3JzW2NvbG9yXS50ZXh0LFxyXG5cdH07XHJcbn0pO1xyXG5cclxuLy8gUHJlcGFyZSBoZWFkaW5nc1xyXG5jb25zdCBoZWFkaW5nVGFnbmFtZXMgPSB7fTtcclxuWydoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNiddLmZvckVhY2godGFnID0+IHtcclxuXHRoZWFkaW5nVGFnbmFtZXNbdGFnXSA9IHsgY29sb3I6ICdpbmhlcml0JyB9O1xyXG59KTtcclxuXHJcbmNvbnN0IGxpbmtTdHlsZXMgPSB7XHJcblx0Y29sb3I6ICdpbmhlcml0JyxcclxuXHR0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZScsXHJcblxyXG5cdCc6aG92ZXInOiB7IGNvbG9yOiAnaW5oZXJpdCcgfSxcclxuXHQnOmZvY3VzJzogeyBjb2xvcjogJ2luaGVyaXQnIH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRhbGVydDoge1xyXG5cdFx0Ym9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCcsXHJcblx0XHRib3JkZXJSYWRpdXM6IHRoZW1lLmFsZXJ0LmJvcmRlclJhZGl1cyxcclxuXHRcdGJvcmRlclN0eWxlOiAnc29saWQnLFxyXG5cdFx0Ym9yZGVyV2lkdGg6IHRoZW1lLmFsZXJ0LmJvcmRlcldpZHRoLFxyXG5cdFx0bWFyZ2luOiB0aGVtZS5hbGVydC5tYXJnaW4sXHJcblx0XHRwYWRkaW5nOiB0aGVtZS5hbGVydC5wYWRkaW5nLFxyXG5cdH0sXHJcblxyXG5cdC8vIHRhZ25hbWVzXHJcblx0YTogbGlua1N0eWxlcyxcclxuXHRMaW5rOiBsaW5rU3R5bGVzLFxyXG5cdHN0cm9uZzoge1xyXG5cdFx0Zm9udFdlaWdodDogNTAwLFxyXG5cdH0sXHJcblxyXG5cdC8vIGhlYWRpbmdzXHJcblx0Li4uaGVhZGluZ1RhZ25hbWVzLFxyXG5cclxuXHQvLyBjb2xvcnNcclxuXHQuLi5jb2xvclZhcmlhbnRzLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxuZnVuY3Rpb24gQmxhbmtTdGF0ZSAoe1xyXG5cdGNsYXNzTmFtZSxcclxuXHRjaGlsZHJlbixcclxuXHRoZWFkaW5nLFxyXG5cdGNvbXBvbmVudDogQ29tcG9uZW50LFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXHJcblx0XHRjbGFzc2VzLmNvbnRhaW5lcixcclxuXHRcdGNsYXNzTmFtZVxyXG5cdCk7XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8Q29tcG9uZW50IHsuLi5wcm9wc30+XHJcblx0XHRcdHshIWhlYWRpbmcgJiYgPGgyIGRhdGEtZTJlLWJsYW5rLXN0YXRlLWhlYWRpbmcgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5oZWFkaW5nKX0+e2hlYWRpbmd9PC9oMj59XHJcblx0XHRcdHtjaGlsZHJlbn1cclxuXHRcdDwvQ29tcG9uZW50PlxyXG5cdCk7XHJcbn07XHJcblxyXG5CbGFua1N0YXRlLnByb3BUeXBlcyA9IHtcclxuXHRjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLmZ1bmMsXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdF0pLmlzUmVxdWlyZWQsXHJcblx0aGVhZGluZzogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuQmxhbmtTdGF0ZS5kZWZhdWx0UHJvcHMgPSB7XHJcblx0Y29tcG9uZW50OiAnZGl2JyxcclxufTtcclxuXHJcbi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0Y29udGFpbmVyOiB7XHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmJsYW5rc3RhdGUuYmFja2dyb3VuZCxcclxuXHRcdGJvcmRlclJhZGl1czogdGhlbWUuYmxhbmtzdGF0ZS5ib3JkZXJSYWRpdXMsXHJcblx0XHRjb2xvcjogdGhlbWUuYmxhbmtzdGF0ZS5jb2xvcixcclxuXHRcdHBhZGRpbmdCb3R0b206IHRoZW1lLmJsYW5rc3RhdGUucGFkZGluZ1ZlcnRpY2FsLFxyXG5cdFx0cGFkZGluZ0xlZnQ6IHRoZW1lLmJsYW5rc3RhdGUucGFkZGluZ0hvcml6b250YWwsXHJcblx0XHRwYWRkaW5nUmlnaHQ6IHRoZW1lLmJsYW5rc3RhdGUucGFkZGluZ0hvcml6b250YWwsXHJcblx0XHRwYWRkaW5nVG9wOiB0aGVtZS5ibGFua3N0YXRlLnBhZGRpbmdWZXJ0aWNhbCxcclxuXHRcdHRleHRBbGlnbjogJ2NlbnRlcicsXHJcblx0fSxcclxuXHJcblx0aGVhZGluZzoge1xyXG5cdFx0Y29sb3I6ICdpbmhlcml0JyxcclxuXHJcblx0XHQnOmxhc3QtY2hpbGQnOiB7XHJcblx0XHRcdG1hcmdpbkJvdHRvbTogMCxcclxuXHRcdH0sXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQmxhbmtTdGF0ZTtcclxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzJztcclxuXHJcbmNvbnN0IGNvbW1vbkNsYXNzZXMgPSBzdHlsZXMuY29tbW9uO1xyXG5jb25zdCBzdHlsZXNoZWV0Q2FjaGUgPSB7fTtcclxuZnVuY3Rpb24gZ2V0U3R5bGVTaGVldCAodmFyaWFudCwgY29sb3IpIHtcclxuXHRjb25zdCBjYWNoZUtleSA9IGAke3ZhcmlhbnR9LSR7Y29sb3J9YDtcclxuXHRpZiAoIXN0eWxlc2hlZXRDYWNoZVtjYWNoZUtleV0pIHtcclxuXHRcdGNvbnN0IHZhcmlhbnRTdHlsZXMgPSBzdHlsZXNbdmFyaWFudF0oY29sb3IpO1xyXG5cdFx0c3R5bGVzaGVldENhY2hlW2NhY2hlS2V5XSA9IHZhcmlhbnRTdHlsZXM7XHJcblx0fVxyXG5cdHJldHVybiBzdHlsZXNoZWV0Q2FjaGVbY2FjaGVLZXldO1xyXG59XHJcblxyXG5jb25zdCBCVVRUT05fU0laRVMgPSBbJ2xhcmdlJywgJ21lZGl1bScsICdzbWFsbCcsICd4c21hbGwnXTtcclxuY29uc3QgQlVUVE9OX1ZBUklBTlRTID0gWydmaWxsJywgJ2hvbGxvdycsICdsaW5rJ107XHJcbmNvbnN0IEJVVFRPTl9DT0xPUlMgPSBbJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnLCAnZGFuZ2VyJywgJ2NhbmNlbCcsICdkZWxldGUnXTtcclxuXHJcbi8vIE5PVEUgbXVzdCBOT1QgYmUgZnVuY3Rpb25hbCBjb21wb25lbnQgdG8gYWxsb3cgYHJlZnNgXHJcblxyXG5jbGFzcyBCdXR0b24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cdHJlbmRlciAoKSB7XHJcblx0XHR2YXIge1xyXG5cdFx0XHRhY3RpdmUsXHJcblx0XHRcdGFwaHJvZGl0ZVN0eWxlcyxcclxuXHRcdFx0YmxvY2ssXHJcblx0XHRcdGNsYXNzTmFtZSxcclxuXHRcdFx0Y29sb3IsXHJcblx0XHRcdGNvbXBvbmVudDogVGFnLFxyXG5cdFx0XHRkaXNhYmxlZCxcclxuXHRcdFx0c2l6ZSxcclxuXHRcdFx0dmFyaWFudCxcclxuXHRcdFx0Li4ucHJvcHNcclxuXHRcdH0gPSB0aGlzLnByb3BzO1xyXG5cclxuXHRcdC8vIGdldCB0aGUgc3R5bGVzXHJcblx0XHRjb25zdCB2YXJpYW50Q2xhc3NlcyA9IGdldFN0eWxlU2hlZXQodmFyaWFudCwgY29sb3IpO1xyXG5cdFx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0XHRjb21tb25DbGFzc2VzLmJhc2UsXHJcblx0XHRcdGNvbW1vbkNsYXNzZXNbc2l6ZV0sXHJcblx0XHRcdHZhcmlhbnRDbGFzc2VzLmJhc2UsXHJcblx0XHRcdGJsb2NrID8gY29tbW9uQ2xhc3Nlcy5ibG9jayA6IG51bGwsXHJcblx0XHRcdGRpc2FibGVkID8gY29tbW9uQ2xhc3Nlcy5kaXNhYmxlZCA6IG51bGwsXHJcblx0XHRcdGFjdGl2ZSA/IHZhcmlhbnRDbGFzc2VzLmFjdGl2ZSA6IG51bGwsXHJcblx0XHRcdC4uLmFwaHJvZGl0ZVN0eWxlc1xyXG5cdFx0KTtcclxuXHRcdGlmIChjbGFzc05hbWUpIHtcclxuXHRcdFx0cHJvcHMuY2xhc3NOYW1lICs9ICgnICcgKyBjbGFzc05hbWUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHJldHVybiBhbiBhbmNob3Igb3IgYnV0dG9uXHJcblx0XHRpZiAoIVRhZykge1xyXG5cdFx0XHRUYWcgPSBwcm9wcy5ocmVmID8gJ2EnIDogJ2J1dHRvbic7XHJcblx0XHR9XHJcblx0XHQvLyBFbnN1cmUgYnV0dG9ucyBkb24ndCBzdWJtaXQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKFRhZyA9PT0gJ2J1dHRvbicgJiYgIXByb3BzLnR5cGUpIHtcclxuXHRcdFx0cHJvcHMudHlwZSA9ICdidXR0b24nO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiA8VGFnIHsuLi5wcm9wc30gLz47XHJcblx0fVxyXG59O1xyXG5cclxuQnV0dG9uLnByb3BUeXBlcyA9IHtcclxuXHRhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxyXG5cdGFwaHJvZGl0ZVN0eWxlczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcclxuXHRcdF9kZWZpbml0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxyXG5cdFx0X25hbWU6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0fSkpLFxyXG5cdGJsb2NrOiBQcm9wVHlwZXMuYm9vbCxcclxuXHRjb2xvcjogUHJvcFR5cGVzLm9uZU9mKEJVVFRPTl9DT0xPUlMpLFxyXG5cdGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMuZnVuYyxcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XSksXHJcblx0ZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxyXG5cdGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0c2l6ZTogUHJvcFR5cGVzLm9uZU9mKEJVVFRPTl9TSVpFUyksXHJcblx0dmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKEJVVFRPTl9WQVJJQU5UUyksXHJcbn07XHJcbkJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XHJcblx0YXBocm9kaXRlU3R5bGVzOiBbXSxcclxuXHRjb2xvcjogJ2RlZmF1bHQnLFxyXG5cdHZhcmlhbnQ6ICdmaWxsJyxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQnV0dG9uO1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gQnV0dG9uXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuaW1wb3J0IHsgZ3JhZGllbnRWZXJ0aWNhbCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2Nzcyc7XHJcbmltcG9ydCB7IGRhcmtlbiwgZmFkZSwgbGlnaHRlbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NvbG9yJztcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcblxyXG4vLyBDb21tb24gU3R5bGVzXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydHMuY29tbW9uID0ge1xyXG5cdC8vIEJhc2UgQnV0dG9uXHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLVxyXG5cdGJhc2U6IHtcclxuXHRcdCdhcHBlYXJhbmNlJzogJ25vbmUnLFxyXG5cdFx0J2JhY2tncm91bmQnOiAnbm9uZScsXHJcblx0XHQnYm9yZGVyV2lkdGgnOiB0aGVtZS5idXR0b24uYm9yZGVyV2lkdGgsXHJcblx0XHQnYm9yZGVyU3R5bGUnOiAnc29saWQnLFxyXG5cdFx0J2JvcmRlckNvbG9yJzogJ3RyYW5zcGFyZW50JyxcclxuXHRcdCdib3JkZXJSYWRpdXMnOiB0aGVtZS5idXR0b24uYm9yZGVyUmFkaXVzLFxyXG5cdFx0J2N1cnNvcic6ICdwb2ludGVyJyxcclxuXHRcdCdkaXNwbGF5JzogJ2lubGluZS1ibG9jaycsXHJcblx0XHQnZm9udFdlaWdodCc6IHRoZW1lLmJ1dHRvbi5mb250LndlaWdodCxcclxuXHRcdCdoZWlnaHQnOiB0aGVtZS5jb21wb25lbnQuaGVpZ2h0LFxyXG5cdFx0J2xpbmVIZWlnaHQnOiB0aGVtZS5jb21wb25lbnQubGluZUhlaWdodCxcclxuXHRcdCdtYXJnaW5Cb3R0b20nOiAwLFxyXG5cdFx0J3BhZGRpbmcnOiBgMCAke3RoZW1lLmJ1dHRvbi5wYWRkaW5nSG9yaXpvbnRhbH1gLFxyXG5cdFx0J291dGxpbmUnOiAwLFxyXG5cdFx0J3RleHRBbGlnbic6ICdjZW50ZXInLFxyXG5cdFx0J3RvdWNoQWN0aW9uJzogJ21hbmlwdWxhdGlvbicsXHJcblx0XHQndXNlclNlbGVjdCc6ICdub25lJyxcclxuXHRcdCd2ZXJ0aWNhbEFsaWduJzogJ21pZGRsZScsXHJcblx0XHQnd2hpdGVTcGFjZSc6ICdub3dyYXAnLFxyXG5cclxuXHRcdCc6aG92ZXInOiB7XHJcblx0XHRcdGNvbG9yOiB0aGVtZS5idXR0b24uZGVmYXVsdC50ZXh0Q29sb3IsXHJcblx0XHRcdHRleHREZWNvcmF0aW9uOiAnbm9uZScsXHJcblx0XHR9LFxyXG5cdFx0Jzpmb2N1cyc6IHtcclxuXHRcdFx0Y29sb3I6IHRoZW1lLmJ1dHRvbi5kZWZhdWx0LnRleHRDb2xvcixcclxuXHRcdFx0dGV4dERlY29yYXRpb246ICdub25lJyxcclxuXHRcdH0sXHJcblx0fSxcclxuXHQvLyBCbG9jayBEaXNwbGF5XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLVxyXG5cdGJsb2NrOiB7XHJcblx0XHRkaXNwbGF5OiAnYmxvY2snLFxyXG5cdFx0d2lkdGg6ICcxMDAlJyxcclxuXHR9LFxyXG5cdC8vIERpc2FibGVkXHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLVxyXG5cdGRpc2FibGVkOiB7XHJcblx0XHRvcGFjaXR5OiAwLjQsXHJcblx0XHRwb2ludGVyRXZlbnRzOiAnbm9uZScsXHJcblx0fSxcclxuXHQvLyBTaXplc1xyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS1cclxuXHRsYXJnZToge1xyXG5cdFx0Zm9udFNpemU6IHRoZW1lLmZvbnQuc2l6ZS5sYXJnZSxcclxuXHR9LFxyXG5cdGRlZmF1bHQ6IHtcclxuXHRcdGZvbnRTaXplOiB0aGVtZS5mb250LnNpemUuZGVmYXVsdCxcclxuXHR9LFxyXG5cdHNtYWxsOiB7XHJcblx0XHRmb250U2l6ZTogdGhlbWUuZm9udC5zaXplLnNtYWxsLFxyXG5cdH0sXHJcblx0eHNtYWxsOiB7XHJcblx0XHRmb250U2l6ZTogdGhlbWUuZm9udC5zaXplLnhzbWFsbCxcclxuXHRcdGxpbmVIZWlnaHQ6ICcxLjknLFxyXG5cdFx0cGFkZGluZ0xlZnQ6ICcuNjZlbScsXHJcblx0XHRwYWRkaW5nUmlnaHQ6ICcuNjZlbScsXHJcblx0fSxcclxufTtcclxuXHJcblxyXG4vLyBGaWxsIFZhcmlhbnRcclxuLy8gLS0tLS0tLS0tLS0tLS0tLVxyXG5mdW5jdGlvbiBidXR0b25GaWxsVmFyaWFudCAodGV4dENvbG9yLCBiZ0NvbG9yKSB7XHJcblx0Y29uc3QgaG92ZXJTdHlsZXMgPSB7XHJcblx0XHQuLi5ncmFkaWVudFZlcnRpY2FsKGxpZ2h0ZW4oYmdDb2xvciwgMTApLCBkYXJrZW4oYmdDb2xvciwgNSkpLFxyXG5cdFx0Ym9yZGVyQ29sb3I6IGAke2RhcmtlbihiZ0NvbG9yLCA1KX0gJHtkYXJrZW4oYmdDb2xvciwgMTApfSAke2RhcmtlbihiZ0NvbG9yLCAxNSl9YCxcclxuXHRcdGJveFNoYWRvdzogJzAgMXB4IDAgcmdiYSgwLDAsMCwwLjEpJyxcclxuXHRcdGNvbG9yOiB0ZXh0Q29sb3IsXHJcblx0XHRvdXRsaW5lOiAnbm9uZScsXHJcblx0fTtcclxuXHRjb25zdCBmb2N1c1N0eWxlcyA9IHtcclxuXHRcdC4uLmdyYWRpZW50VmVydGljYWwobGlnaHRlbihiZ0NvbG9yLCAxMCksIGRhcmtlbihiZ0NvbG9yLCA1KSksXHJcblx0XHRib3JkZXJDb2xvcjogYCR7ZGFya2VuKGJnQ29sb3IsIDUpfSAke2RhcmtlbihiZ0NvbG9yLCAxMCl9ICR7ZGFya2VuKGJnQ29sb3IsIDE1KX1gLFxyXG5cdFx0Ym94U2hhZG93OiBgMCAwIDAgM3B4ICR7ZmFkZShiZ0NvbG9yLCAyNSl9YCxcclxuXHRcdGNvbG9yOiB0ZXh0Q29sb3IsXHJcblx0XHRvdXRsaW5lOiAnbm9uZScsXHJcblx0fTtcclxuXHRjb25zdCBhY3RpdmVTdHlsZXMgPSB7XHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IGRhcmtlbihiZ0NvbG9yLCAxMCksXHJcblx0XHRiYWNrZ3JvdW5kSW1hZ2U6ICdub25lJyxcclxuXHRcdGJvcmRlckNvbG9yOiBgJHtkYXJrZW4oYmdDb2xvciwgMjUpfSAke2RhcmtlbihiZ0NvbG9yLCAxNSl9ICR7ZGFya2VuKGJnQ29sb3IsIDEwKX1gLFxyXG5cdFx0Ym94U2hhZG93OiAnaW5zZXQgMCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4xKScsXHJcblx0fTtcclxuXHRyZXR1cm4ge1xyXG5cdFx0YmFzZToge1xyXG5cdFx0XHQuLi5ncmFkaWVudFZlcnRpY2FsKGxpZ2h0ZW4oYmdDb2xvciwgNSksIGRhcmtlbihiZ0NvbG9yLCAxMCksIGJnQ29sb3IpLFxyXG5cdFx0XHQnYm9yZGVyQ29sb3InOiBgJHtkYXJrZW4oYmdDb2xvciwgMTApfSAke2RhcmtlbihiZ0NvbG9yLCAyMCl9ICR7ZGFya2VuKGJnQ29sb3IsIDI1KX1gLFxyXG5cdFx0XHQnYm94U2hhZG93JzogJ2luc2V0IDAgMXB4IDAgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpJyxcclxuXHRcdFx0J2NvbG9yJzogdGV4dENvbG9yLFxyXG5cdFx0XHQnZm9udFdlaWdodCc6IDQwMCxcclxuXHRcdFx0J3RleHRTaGFkb3cnOiAnMCAtMXB4IDAgcmdiYSgwLCAwLCAwLCAwLjI1KScsXHJcblxyXG5cdFx0XHQnOmhvdmVyJzogaG92ZXJTdHlsZXMsXHJcblx0XHRcdCc6Zm9jdXMnOiBmb2N1c1N0eWxlcyxcclxuXHRcdFx0JzphY3RpdmUnOiBhY3RpdmVTdHlsZXMsXHJcblx0XHR9LFxyXG5cdFx0YWN0aXZlOiBhY3RpdmVTdHlsZXMsXHJcblx0fTtcclxufVxyXG4vLyBUT0RPOiBUaGlzIGlzIHByZXR0eSBoYWNreSwgbmVlZHMgdG8gYmUgY29uc29saWRhdGVkIHdpdGggdGhlIFZhcmlhbnQoKSBtZXRob2RcclxuLy8gYWJvdmUgKG5lZWRzIG1vcmUgdGhlbWUgdmFyaWFibGVzIHRvIGJlIGltcGxlbWVudGVkIHRob3VnaClcclxuZnVuY3Rpb24gYnV0dG9uRmlsbERlZmF1bHQgKCkge1xyXG5cdGNvbnN0IGJvcmRlckNvbG9yID0gdGhlbWUuaW5wdXQuYm9yZGVyLmNvbG9yLmRlZmF1bHQ7XHJcblx0Y29uc3QgaG92ZXJTdHlsZXMgPSB7XHJcblx0XHQuLi5ncmFkaWVudFZlcnRpY2FsKCcjZmZmJywgJyNlZWUnKSxcclxuXHRcdGJvcmRlckNvbG9yOiBgJHtkYXJrZW4oYm9yZGVyQ29sb3IsIDUpfSAke2Rhcmtlbihib3JkZXJDb2xvciwgNSl9ICR7ZGFya2VuKGJvcmRlckNvbG9yLCAxMCl9YCxcclxuXHRcdGJveFNoYWRvdzogJzAgMXB4IDAgcmdiYSgwLDAsMCwwLjEpJyxcclxuXHRcdGNvbG9yOiB0aGVtZS5jb2xvci50ZXh0LFxyXG5cdH07XHJcblx0Y29uc3QgZm9jdXNTdHlsZXMgPSB7XHJcblx0XHRib3JkZXJDb2xvcjogdGhlbWUuY29sb3IucHJpbWFyeSxcclxuXHRcdGJveFNoYWRvdzogYDAgMCAwIDNweCAke2ZhZGUodGhlbWUuY29sb3IucHJpbWFyeSwgMTApfWAsXHJcblx0XHRjb2xvcjogdGhlbWUuY29sb3IudGV4dCxcclxuXHRcdG91dGxpbmU6ICdub25lJyxcclxuXHR9O1xyXG5cdGNvbnN0IGFjdGl2ZVN0eWxlcyA9IHtcclxuXHRcdGJhY2tncm91bmQ6ICcjZTZlNmU2JyxcclxuXHRcdGJvcmRlckNvbG9yOiBkYXJrZW4oYm9yZGVyQ29sb3IsIDEwKSxcclxuXHRcdGJveFNoYWRvdzogJ2luc2V0IDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMSknLFxyXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLnRleHQsXHJcblx0fTtcclxuXHRyZXR1cm4ge1xyXG5cdFx0YmFzZToge1xyXG5cdFx0XHQuLi5ncmFkaWVudFZlcnRpY2FsKCcjZmFmYWZhJywgJyNlYWVhZWEnKSxcclxuXHRcdFx0J2JvcmRlckNvbG9yJzogYCR7Ym9yZGVyQ29sb3J9ICR7ZGFya2VuKGJvcmRlckNvbG9yLCA2KX0gJHtkYXJrZW4oYm9yZGVyQ29sb3IsIDEyKX1gLFxyXG5cdFx0XHQnY29sb3InOiB0aGVtZS5jb2xvci50ZXh0LFxyXG5cdFx0XHQndGV4dFNoYWRvdyc6ICcwIDFweCAwIHdoaXRlJyxcclxuXHJcblx0XHRcdCc6aG92ZXInOiBob3ZlclN0eWxlcyxcclxuXHRcdFx0Jzpmb2N1cyc6IGZvY3VzU3R5bGVzLFxyXG5cdFx0XHQnOmFjdGl2ZSc6IGFjdGl2ZVN0eWxlcyxcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gZ3Jvc3MgaGFja1xyXG5cdFx0YWN0aXZlOiB7XHJcblx0XHRcdC4uLmFjdGl2ZVN0eWxlcyxcclxuXHJcblx0XHRcdCc6aG92ZXInOiBhY3RpdmVTdHlsZXMsXHJcblx0XHRcdCc6Zm9jdXMnOiB7XHJcblx0XHRcdFx0Li4uYWN0aXZlU3R5bGVzLFxyXG5cdFx0XHRcdC4uLmZvY3VzU3R5bGVzLFxyXG5cdFx0XHRcdGJveFNoYWRvdzogYDAgMCAwIDNweCAke2ZhZGUodGhlbWUuY29sb3IucHJpbWFyeSwgMTApfSwgaW5zZXQgMCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4xKWAsXHJcblx0XHRcdH0sXHJcblx0XHRcdCc6YWN0aXZlJzogYWN0aXZlU3R5bGVzLFxyXG5cdFx0fSxcclxuXHR9O1xyXG59XHJcbmV4cG9ydHMuZmlsbCA9IChjb2xvcikgPT4ge1xyXG5cdHN3aXRjaCAoY29sb3IpIHtcclxuXHRcdGNhc2UgJ2RlZmF1bHQnOlxyXG5cdFx0XHRyZXR1cm4gYnV0dG9uRmlsbERlZmF1bHQoKTtcclxuXHRcdGNhc2UgJ2NhbmNlbCc6XHJcblx0XHRjYXNlICdkZWxldGUnOlxyXG5cdFx0XHRyZXR1cm4gYnV0dG9uRmlsbFZhcmlhbnQoJ3doaXRlJywgdGhlbWUuYnV0dG9uLmRhbmdlci5iZ0NvbG9yKTtcclxuXHRcdGRlZmF1bHQ6XHJcblx0XHRcdHJldHVybiBidXR0b25GaWxsVmFyaWFudCgnd2hpdGUnLCB0aGVtZS5idXR0b25bY29sb3JdLmJnQ29sb3IpO1xyXG5cdH1cclxufTtcclxuXHJcblxyXG4vLyBIb2xsb3cgVmFyaWFudFxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tXHJcbmZ1bmN0aW9uIGJ1dHRvbkhvbGxvd1ZhcmlhbnQgKHRleHRDb2xvciwgYm9yZGVyQ29sb3IpIHtcclxuXHRjb25zdCBmb2N1c0FuZEhvdmVyU3R5bGVzID0ge1xyXG5cdFx0YmFja2dyb3VuZEltYWdlOiAnbm9uZScsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IGZhZGUoYm9yZGVyQ29sb3IsIDE1KSxcclxuXHRcdGJvcmRlckNvbG9yOiBkYXJrZW4oYm9yZGVyQ29sb3IsIDE1KSxcclxuXHRcdGJveFNoYWRvdzogJ25vbmUnLFxyXG5cdFx0Y29sb3I6IHRleHRDb2xvcixcclxuXHRcdG91dGxpbmU6ICdub25lJyxcclxuXHR9O1xyXG5cdGNvbnN0IGZvY3VzT25seVN0eWxlcyA9IHtcclxuXHRcdGJveFNoYWRvdzogYDAgMCAwIDNweCAke2ZhZGUoYm9yZGVyQ29sb3IsIDEwKX1gLFxyXG5cdH07XHJcblx0Y29uc3QgYWN0aXZlU3R5bGVzID0ge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBmYWRlKGJvcmRlckNvbG9yLCAzNSksXHJcblx0XHRib3JkZXJDb2xvcjogZGFya2VuKGJvcmRlckNvbG9yLCAyNSksXHJcblx0XHRib3hTaGFkb3c6ICdub25lJyxcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0YmFzZToge1xyXG5cdFx0XHQnYmFja2dyb3VuZCc6ICdub25lJyxcclxuXHRcdFx0J2JvcmRlckNvbG9yJzogYm9yZGVyQ29sb3IsXHJcblx0XHRcdCdjb2xvcic6IHRleHRDb2xvcixcclxuXHJcblx0XHRcdCc6aG92ZXInOiBmb2N1c0FuZEhvdmVyU3R5bGVzLFxyXG5cdFx0XHQnOmZvY3VzICc6IE9iamVjdC5hc3NpZ24oe30sIGZvY3VzQW5kSG92ZXJTdHlsZXMsIGZvY3VzT25seVN0eWxlcyksXHJcblx0XHRcdCc6YWN0aXZlJzogYWN0aXZlU3R5bGVzLFxyXG5cdFx0fSxcclxuXHRcdGFjdGl2ZTogYWN0aXZlU3R5bGVzLFxyXG5cdH07XHJcbn07XHJcbmV4cG9ydHMuaG9sbG93ID0gKGNvbG9yKSA9PiB7XHJcblx0Ly8gVE9ETzogYmV0dGVyIGhhbmRsaW5nIG9mIGNhbmNlbCBhbmQgZGVsZXRlIGNvbG9yc1xyXG5cdGlmIChjb2xvciA9PT0gJ2NhbmNlbCcgfHwgY29sb3IgPT09ICdkZWxldGUnKSBjb2xvciA9ICdkYW5nZXInO1xyXG5cclxuXHRyZXR1cm4gYnV0dG9uSG9sbG93VmFyaWFudCh0aGVtZS5idXR0b25bY29sb3JdLmJnQ29sb3IsIHRoZW1lLmJ1dHRvbltjb2xvcl0uYm9yZGVyQ29sb3IpO1xyXG59O1xyXG5cclxuXHJcbi8vIExpbmsgVmFyaWFudFxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tXHJcbmZ1bmN0aW9uIGJ1dHRvbkxpbmtWYXJpYW50ICh0ZXh0Q29sb3IsIGhvdmVyQ29sb3IpIHtcclxuXHRjb25zdCBob3ZlclN0eWxlcyA9IHtcclxuXHRcdGNvbG9yOiBob3ZlckNvbG9yLFxyXG5cdFx0dGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnLFxyXG5cdH07XHJcblx0cmV0dXJuIHtcclxuXHRcdGJhc2U6IHtcclxuXHRcdFx0J2JhY2tncm91bmQnOiAnbm9uZScsXHJcblx0XHRcdCdib3JkZXInOiAwLFxyXG5cdFx0XHQnYm94U2hhZG93JzogJ25vbmUnLFxyXG5cdFx0XHQnY29sb3InOiB0ZXh0Q29sb3IsXHJcblx0XHRcdCdmb250V2VpZ2h0JzogJ25vcm1hbCcsXHJcblx0XHRcdCdvdXRsaW5lJzogJ25vbmUnLFxyXG5cclxuXHRcdFx0Jzpob3Zlcic6IGhvdmVyU3R5bGVzLFxyXG5cdFx0XHQnOmZvY3VzJzogaG92ZXJTdHlsZXMsXHJcblx0XHRcdCc6YWN0aXZlJzogaG92ZXJTdHlsZXMsXHJcblx0XHR9LFxyXG5cdFx0YWN0aXZlOiBob3ZlclN0eWxlcyxcclxuXHR9O1xyXG59O1xyXG5mdW5jdGlvbiBidXR0b25MaW5rRGVsZXRlICgpIHtcclxuXHRjb25zdCBzdHlsZXMgPSBidXR0b25MaW5rVmFyaWFudCh0aGVtZS5jb2xvci5ncmF5NDAsIHRoZW1lLmNvbG9yLmRhbmdlcik7XHJcblx0Y29uc3QgaG92ZXJTdHlsZXMgPSB7XHJcblx0XHQuLi5ncmFkaWVudFZlcnRpY2FsKGxpZ2h0ZW4odGhlbWUuY29sb3IuZGFuZ2VyLCAxMCksIGRhcmtlbih0aGVtZS5jb2xvci5kYW5nZXIsIDEwKSksXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9yLmRhbmdlcixcclxuXHRcdGJvcmRlckNvbG9yOiBgJHtkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCA0KX0gJHtkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCA4KX0gJHtkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCAxMil9YCxcclxuXHRcdGJveFNoYWRvdzogJzAgMXB4IDAgcmdiYSgwLDAsMCwwLjEpJyxcclxuXHRcdGNvbG9yOiAnd2hpdGUnLFxyXG5cdFx0dGV4dERlY29yYXRpb246ICdub25lJyxcclxuXHR9O1xyXG5cdGNvbnN0IGFjdGl2ZVN0eWxlcyA9IHtcclxuXHRcdGJhY2tncm91bmRDb2xvcjogZGFya2VuKHRoZW1lLmNvbG9yLmRhbmdlciwgNCksXHJcblx0XHRiYWNrZ3JvdW5kSW1hZ2U6ICdub25lJyxcclxuXHRcdGJvcmRlckNvbG9yOiBgJHtkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCAxMil9ICR7ZGFya2VuKHRoZW1lLmNvbG9yLmRhbmdlciwgOCl9ICR7ZGFya2VuKHRoZW1lLmNvbG9yLmRhbmdlciwgOCl9YCxcclxuXHRcdGJveFNoYWRvdzogJ2luc2V0IDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMSknLFxyXG5cdFx0Y29sb3I6ICd3aGl0ZScsXHJcblx0fTtcclxuXHRyZXR1cm4ge1xyXG5cdFx0YmFzZToge1xyXG5cdFx0XHQuLi5zdHlsZXMuYmFzZSxcclxuXHRcdFx0Jzpob3Zlcic6IGhvdmVyU3R5bGVzLFxyXG5cdFx0XHQnOmZvY3VzJzogaG92ZXJTdHlsZXMsXHJcblx0XHRcdCc6YWN0aXZlJzogYWN0aXZlU3R5bGVzLFxyXG5cdFx0fSxcclxuXHRcdGFjdGl2ZTogYWN0aXZlU3R5bGVzLFxyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydHMubGluayA9IChjb2xvcikgPT4ge1xyXG5cdHN3aXRjaCAoY29sb3IpIHtcclxuXHRcdGNhc2UgJ2RlZmF1bHQnOlxyXG5cdFx0XHRyZXR1cm4gYnV0dG9uTGlua1ZhcmlhbnQodGhlbWUuY29sb3IubGluaywgdGhlbWUuY29sb3IubGlua0hvdmVyKTtcclxuXHRcdGNhc2UgJ2NhbmNlbCc6XHJcblx0XHRcdHJldHVybiBidXR0b25MaW5rVmFyaWFudCh0aGVtZS5jb2xvci5ncmF5NDAsIHRoZW1lLmNvbG9yLmRhbmdlcik7XHJcblx0XHRjYXNlICdkZWxldGUnOlxyXG5cdFx0XHRyZXR1cm4gYnV0dG9uTGlua0RlbGV0ZSgpO1xyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0cmV0dXJuIGJ1dHRvbkxpbmtWYXJpYW50KHRoZW1lLmNvbG9yW2NvbG9yXSwgdGhlbWUuY29sb3JbY29sb3JdKTtcclxuXHR9XHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcclxuXHJcbmZ1bmN0aW9uIENlbnRlciAoe1xyXG5cdGNsYXNzTmFtZSxcclxuXHRjb21wb25lbnQ6IENvbXBvbmVudCxcclxuXHRoZWlnaHQsXHJcblx0c3R5bGUsXHJcblx0Li4ucHJvcHNcclxufSkge1xyXG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhjbGFzc2VzLmNlbnRlciwgY2xhc3NOYW1lKTtcclxuXHRwcm9wcy5zdHlsZSA9IHsgaGVpZ2h0LCAuLi5zdHlsZSB9O1xyXG5cclxuXHRyZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xyXG59O1xyXG5DZW50ZXIucHJvcFR5cGVzID0ge1xyXG5cdGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMuZnVuYyxcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XSksXHJcblx0aGVpZ2h0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5udW1iZXIsXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdF0pLFxyXG59O1xyXG5DZW50ZXIuZGVmYXVsdFByb3BzID0ge1xyXG5cdGNvbXBvbmVudDogJ2RpdicsXHJcblx0aGVpZ2h0OiAnYXV0bycsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IENlbnRlcjtcclxuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIENlbnRlclxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdGNlbnRlcjoge1xyXG5cdFx0ZGlzcGxheTogJ2ZsZXgnLFxyXG5cdFx0YWxpZ25JdGVtczogJ2NlbnRlcicsXHJcblx0XHRqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXHJcblx0fSxcclxufTtcclxuIiwiaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuaW1wb3J0IHsgZmFkZSwgbGlnaHRlbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NvbG9yJztcclxuXHJcbmNvbnN0IGJhc2VDb2xvcnMgPSB7fTtcclxuWydkYW5nZXInLCAnaW5mbycsICdwcmltYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddLmZvckVhY2goY29sb3IgPT4ge1xyXG5cdGJhc2VDb2xvcnNbY29sb3JdID0ge1xyXG5cdFx0YmFja2dyb3VuZDogZmFkZSh0aGVtZS5jb2xvcltjb2xvcl0sIDEwKSxcclxuXHRcdGJhY2tncm91bmRBY3RpdmU6IGZhZGUodGhlbWUuY29sb3JbY29sb3JdLCAyMCksXHJcblx0XHRiYWNrZ3JvdW5kSG92ZXI6IGZhZGUodGhlbWUuY29sb3JbY29sb3JdLCAxNSksXHJcblx0XHR0ZXh0OiB0aGVtZS5jb2xvcltjb2xvcl0sXHJcblx0fTtcclxufSk7XHJcbmNvbnN0IGludmVydGVkQ29sb3JzID0ge307XHJcblsnZGFuZ2VyJywgJ2luZm8nLCAncHJpbWFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnXS5mb3JFYWNoKGNvbG9yID0+IHtcclxuXHRpbnZlcnRlZENvbG9yc1tjb2xvciArICdfX2ludmVydGVkJ10gPSB7XHJcblx0XHRiYWNrZ3JvdW5kOiB0aGVtZS5jb2xvcltjb2xvcl0sXHJcblx0XHRiYWNrZ3JvdW5kQWN0aXZlOiBsaWdodGVuKHRoZW1lLmNvbG9yW2NvbG9yXSwgNSksXHJcblx0XHRiYWNrZ3JvdW5kSG92ZXI6IGxpZ2h0ZW4odGhlbWUuY29sb3JbY29sb3JdLCAxNSksXHJcblx0XHR0ZXh0OiAnd2hpdGUnLFxyXG5cdH07XHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0ZGVmYXVsdDoge1xyXG5cdFx0YmFja2dyb3VuZDogdGhlbWUuY29sb3IuZ3JheTEwLFxyXG5cdFx0YmFja2dyb3VuZEFjdGl2ZTogdGhlbWUuY29sb3IuZ3JheTIwLFxyXG5cdFx0YmFja2dyb3VuZEhvdmVyOiB0aGVtZS5jb2xvci5ncmF5MTUsXHJcblx0XHR0ZXh0OiB0aGVtZS5jb2xvci5ncmF5NjAsXHJcblx0fSxcclxuXHQuLi5iYXNlQ29sb3JzLFxyXG5cclxuXHQvLyBpbnZlcnRlZFxyXG5cdGRlZmF1bHRfX2ludmVydGVkOiB7XHJcblx0XHRiYWNrZ3JvdW5kOiB0aGVtZS5jb2xvci5ncmF5NjAsXHJcblx0XHRiYWNrZ3JvdW5kQWN0aXZlOiBsaWdodGVuKHRoZW1lLmNvbG9yLmdyYXk2MCwgNSksXHJcblx0XHRiYWNrZ3JvdW5kSG92ZXI6IGxpZ2h0ZW4odGhlbWUuY29sb3IuZ3JheTYwLCAxNSksXHJcblx0XHR0ZXh0OiAnd2hpdGUnLFxyXG5cdH0sXHJcblx0Li4uaW52ZXJ0ZWRDb2xvcnMsXHJcbn07XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcclxuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XHJcblxyXG5mdW5jdGlvbiBDaGlwICh7XHJcblx0Y2xhc3NOYW1lLFxyXG5cdGNoaWxkcmVuLFxyXG5cdGNvbG9yLFxyXG5cdGludmVydGVkLFxyXG5cdGxhYmVsLFxyXG5cdG9uQ2xlYXIsXHJcblx0b25DbGljayxcclxuXHQuLi5wcm9wc1xyXG59KSB7XHJcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0Y2xhc3Nlcy5jaGlwLFxyXG5cdFx0Y2xhc3NOYW1lXHJcblx0KTtcclxuXHRjb25zdCBsYWJlbENsYXNzTmFtZSA9IGNzcyhcclxuXHRcdGNsYXNzZXMuYnV0dG9uLFxyXG5cdFx0Y2xhc3Nlcy5sYWJlbCxcclxuXHRcdGNsYXNzZXNbJ2J1dHRvbl9fJyArIGNvbG9yICsgKGludmVydGVkID8gJ19faW52ZXJ0ZWQnIDogJycpXVxyXG5cdCk7XHJcblx0Y29uc3QgY2xlYXJDbGFzc05hbWUgPSBjc3MoXHJcblx0XHRjbGFzc2VzLmJ1dHRvbixcclxuXHRcdGNsYXNzZXMuY2xlYXIsXHJcblx0XHRjbGFzc2VzWydidXR0b25fXycgKyBjb2xvciArIChpbnZlcnRlZCA/ICdfX2ludmVydGVkJyA6ICcnKV1cclxuXHQpO1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdiB7Li4ucHJvcHN9PlxyXG5cdFx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXtvbkNsaWNrfSBjbGFzc05hbWU9e2xhYmVsQ2xhc3NOYW1lfT5cclxuXHRcdFx0XHR7bGFiZWx9XHJcblx0XHRcdFx0e2NoaWxkcmVufVxyXG5cdFx0XHQ8L2J1dHRvbj5cclxuXHRcdFx0eyEhb25DbGVhciAmJiAoXHJcblx0XHRcdFx0PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17b25DbGVhcn0gY2xhc3NOYW1lPXtjbGVhckNsYXNzTmFtZX0+XHJcblx0XHRcdFx0XHQmdGltZXM7XHJcblx0XHRcdFx0PC9idXR0b24+XHJcblx0XHRcdCl9XHJcblx0XHQ8L2Rpdj5cclxuXHQpO1xyXG59O1xyXG5cclxuQ2hpcC5wcm9wVHlwZXMgPSB7XHJcblx0Y29sb3I6IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhjb2xvcnMpKS5pc1JlcXVpcmVkLFxyXG5cdGludmVydGVkOiBQcm9wVHlwZXMuYm9vbCxcclxuXHRsYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG5cdG9uQ2xlYXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdG9uQ2xpY2s6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG59O1xyXG5DaGlwLmRlZmF1bHRQcm9wcyA9IHtcclxuXHRjb2xvcjogJ2RlZmF1bHQnLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDaGlwO1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gQWxlcnRcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXHJcblxyXG5pbXBvcnQgY29sb3JzIGZyb20gJy4vY29sb3JzJztcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuaW1wb3J0IHsgYm9yZGVyTGVmdFJhZGl1cywgYm9yZGVyUmlnaHRSYWRpdXMgfSBmcm9tICcuLi8uLi8uLi91dGlscy9jc3MnO1xyXG5cclxuLy8gUHJlcGFyZSB2YXJpYW50c1xyXG5jb25zdCBjb2xvclZhcmlhbnRzID0ge307XHJcbk9iamVjdC5rZXlzKGNvbG9ycykuZm9yRWFjaChjb2xvciA9PiB7XHJcblx0Y29uc3QgaG92ZXJTdHlsZXMgPSB7XHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yc1tjb2xvcl0uYmFja2dyb3VuZEhvdmVyLFxyXG5cdH07XHJcblxyXG5cdGNvbG9yVmFyaWFudHNbJ2J1dHRvbl9fJyArIGNvbG9yXSA9IHtcclxuXHRcdGJhY2tncm91bmRDb2xvcjogY29sb3JzW2NvbG9yXS5iYWNrZ3JvdW5kLFxyXG5cdFx0Y29sb3I6IGNvbG9yc1tjb2xvcl0udGV4dCxcclxuXHJcblx0XHQnOmhvdmVyJzogaG92ZXJTdHlsZXMsXHJcblx0XHQnOmZvY3VzJzogaG92ZXJTdHlsZXMsXHJcblx0XHQnOmFjdGl2ZSc6IHtcclxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBjb2xvcnNbY29sb3JdLmJhY2tncm91bmRBY3RpdmUsXHJcblx0XHR9LFxyXG5cdH07XHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0Y2hpcDoge1xyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHRmb250U2l6ZTogdGhlbWUuZm9udC5zaXplLnNtYWxsLFxyXG5cdFx0Zm9udFdlaWdodDogNTAwLFxyXG5cdFx0bWFyZ2luUmlnaHQ6ICcwLjVlbScsXHJcblx0XHRvdmVyZmxvdzogJ2hpZGRlbicsXHJcblx0XHRsaW5lSGVpZ2h0OiAnMi4yZW0nLFxyXG5cdH0sXHJcblxyXG5cdC8vIHRhZ25hbWVzXHJcblx0YnV0dG9uOiB7XHJcblx0XHRhcHBlYXJhbmNlOiAnbm9uZScsXHJcblx0XHRiYWNrZ3JvdW5kOiAnbm9uZScsXHJcblx0XHRib3JkZXI6ICdub25lJyxcclxuXHRcdGN1cnNvcjogJ3BvaW50ZXInLFxyXG5cdFx0ZGlzcGxheTogJ2Jsb2NrJyxcclxuXHRcdGZsb2F0OiAnbGVmdCcsXHJcblx0XHRwYWRkaW5nOiAnMCAuOWVtJyxcclxuXHRcdG91dGxpbmU6ICdub25lJyxcclxuXHJcblx0XHQvLyBtYWtlIHBpbGxzIC0gZXhhZ2dlcmF0ZSB0aGUgcGFkZGluZyB0b3dhcmQgdGhlIHJhZGlpIHNvIGl0IGxvb2tzIGV2ZW5cclxuXHRcdCc6Zmlyc3QtY2hpbGQnOiB7XHJcblx0XHRcdC4uLmJvcmRlckxlZnRSYWRpdXMoJzNlbScpLFxyXG5cdFx0XHRwYWRkaW5nTGVmdDogJzEuMWVtJyxcclxuXHRcdH0sXHJcblx0XHQnOmxhc3QtY2hpbGQnOiB7XHJcblx0XHRcdC4uLmJvcmRlclJpZ2h0UmFkaXVzKCczZW0nKSxcclxuXHRcdFx0cGFkZGluZ1JpZ2h0OiAnMS4xZW0nLFxyXG5cdFx0fSxcclxuXHR9LFxyXG5cclxuXHJcblx0Ly8gcHJvdmlkZSBzZXBhcmF0aW9uIGJldHdlZW4gdGhlIGxhYmVsIGFuZCBjbGVhciBidXR0b25zXHJcblx0Ly8gZmxvYXRpbmcgc3RvcHMgdGhlIG1hcmdpbnMgZnJvbSBjb2xsYXBzaW5nIGludG8gZWFjaGluZ1xyXG5cclxuXHRsYWJlbDogeyBtYXJnaW5SaWdodDogMSB9LFxyXG5cdGNsZWFyOiB7IG1hcmdpbkxlZnQ6IDEgfSxcclxuXHJcblx0Ly8gY29sb3JzXHJcblx0Li4uY29sb3JWYXJpYW50cyxcclxufTtcclxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9zdHlsZXMnO1xyXG5pbXBvcnQgc2l6ZXMgZnJvbSAnLi9zaXplcyc7XHJcblxyXG5mdW5jdGlvbiBDb250YWluZXIgKHtcclxuXHRjbGFzc05hbWUsXHJcblx0Y2xlYXJGbG9hdGluZ0NoaWxkcmVuLFxyXG5cdGNvbXBvbmVudDogQ29tcG9uZW50LFxyXG5cdHdpZHRoLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXHJcblx0XHRjbGFzc2VzLmNvbnRhaW5lcixcclxuXHRcdGNsYXNzZXNbd2lkdGhdLFxyXG5cdFx0Y2xlYXJGbG9hdGluZ0NoaWxkcmVuID8gY2xhc3Nlcy5jbGVhcmZpeCA6IG51bGxcclxuXHQpO1xyXG5cdHByb3BzLmNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArICcgJyArIGNsYXNzTmFtZTtcclxuXHRyZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xyXG59O1xyXG5cclxuQ29udGFpbmVyLnByb3BUeXBlcyA9IHtcclxuXHRjbGVhckZsb2F0aW5nQ2hpbGRyZW46IFByb3BUeXBlcy5ib29sLFxyXG5cdGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMuZnVuYyxcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XSkuaXNSZXF1aXJlZCxcclxuXHR3aWR0aDogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKHNpemVzKSkuaXNSZXF1aXJlZCxcclxufTtcclxuQ29udGFpbmVyLmRlZmF1bHRQcm9wcyA9IHtcclxuXHRjb21wb25lbnQ6ICdkaXYnLFxyXG5cdHdpZHRoOiAnbGFyZ2UnLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDb250YWluZXI7XHJcbiIsImltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRzbWFsbDogdGhlbWUuY29udGFpbmVyLnNpemUuc21hbGwsXHJcblx0bWVkaXVtOiB0aGVtZS5jb250YWluZXIuc2l6ZS5tZWRpdW0sXHJcblx0bGFyZ2U6IHRoZW1lLmNvbnRhaW5lci5zaXplLmxhcmdlLFxyXG59O1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gQ29udGFpbmVyXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuLyogZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSAqL1xyXG5cclxuaW1wb3J0IHNpemVzIGZyb20gJy4vc2l6ZXMnO1xyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxuLy8gUHJlcGFyZSBzaXplc1xyXG5jb25zdCBzaXplVmFyaWFudHMgPSB7fTtcclxuT2JqZWN0LmtleXMoc2l6ZXMpLmZvckVhY2goc2l6ZSA9PiB7XHJcblx0c2l6ZVZhcmlhbnRzW3NpemVdID0ge1xyXG5cdFx0bWF4V2lkdGg6IHNpemVzW3NpemVdLFxyXG5cdH07XHJcbn0pO1xyXG5cclxuLypcclxuXHRNaWNybyBjbGVhcmZpeCBoYWNrXHJcblx0MS5cdFRoZSBzcGFjZSBjb250ZW50IGlzIG9uZSB3YXkgdG8gYXZvaWQgYW4gT3BlcmEgYnVnIHdoZW4gdGhlXHJcblx0XHRcdGNvbnRlbnRlZGl0YWJsZSBhdHRyaWJ1dGUgaXMgaW5jbHVkZWQgYW55d2hlcmUgZWxzZSBpbiB0aGUgZG9jdW1lbnQuXHJcblx0XHRcdE90aGVyd2lzZSBpdCBjYXVzZXMgc3BhY2UgdG8gYXBwZWFyIGF0IHRoZSB0b3AgYW5kIGJvdHRvbSBvZiBlbGVtZW50c1xyXG5cdFx0XHR0aGF0IGFyZSBjbGVhcmZpeGVkLlxyXG5cdDIuXHRUaGUgdXNlIG9mIGB0YWJsZWAgcmF0aGVyIHRoYW4gYGJsb2NrYCBpcyBvbmx5IG5lY2Vzc2FyeSBpZiB1c2luZ1xyXG5cdFx0XHRgOmJlZm9yZWAgdG8gY29udGFpbiB0aGUgdG9wLW1hcmdpbnMgb2YgY2hpbGQgZWxlbWVudHMuXHJcbiovXHJcbmNvbnN0IGNsZWFyZml4U3R5bGVzID0ge1xyXG5cdGNsZWFyOiAnYm90aCcsXHJcblx0Y29udGVudDogJ1wiIFwiJywgLy8gMVxyXG5cdGRpc3BsYXk6ICd0YWJsZScsIC8vIDJcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdGNvbnRhaW5lcjoge1xyXG5cdFx0bWFyZ2luTGVmdDogJ2F1dG8nLFxyXG5cdFx0bWFyZ2luUmlnaHQ6ICdhdXRvJyxcclxuXHRcdHBhZGRpbmdMZWZ0OiB0aGVtZS5jb250YWluZXIuZ3V0dGVyLFxyXG5cdFx0cGFkZGluZ1JpZ2h0OiB0aGVtZS5jb250YWluZXIuZ3V0dGVyLFxyXG5cdH0sXHJcblxyXG5cdC8vIGNsZWFyIGZsb2F0aW5nIGNoaWxkcmVuXHJcblx0Y2xlYXJmaXg6IHtcclxuXHRcdCc6YmVmb3JlJzogY2xlYXJmaXhTdHlsZXMsXHJcblx0XHQnOmFmdGVyJzogY2xlYXJmaXhTdHlsZXMsXHJcblx0fSxcclxuXHJcblx0Ly8gc2l6ZXNcclxuXHQuLi5zaXplVmFyaWFudHMsXHJcbn07XHJcbiIsIi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vQnV0dG9uJztcclxuXHJcbmZ1bmN0aW9uIERyb3Bkb3duQnV0dG9uICh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9KSB7XHJcblx0cmV0dXJuIChcclxuXHRcdDxCdXR0b24gey4uLnByb3BzfT5cclxuXHRcdFx0e2NoaWxkcmVufVxyXG5cdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmFycm93KX0gLz5cclxuXHRcdDwvQnV0dG9uPlxyXG5cdCk7XHJcbn07XHJcblxyXG4vLyBOT1RFXHJcbi8vIDE6IHRha2UgYWR2YW50YWdlIG9mIGBjdXJyZW50Q29sb3JgIGJ5IGxlYXZpbmcgYm9yZGVyIHRvcCBjb2xvciB1bmRlZmluZWRcclxuLy8gMjogZXZlbiB0aG91Z2ggdGhlIGFycm93IGlzIHZlcnRpY2FsbHkgY2VudGVyZWQsIHZpc3VhbGx5IGl0IGFwcGVhcnMgdG9vIGxvd1xyXG4vLyAgICBiZWNhdXNlIG9mIGxvd2VyY2FzZSBjaGFyYWN0ZXJzIGJlc2lkZSBpdFxyXG5jb25zdCBjbGFzc2VzID0ge1xyXG5cdGFycm93OiB7XHJcblx0XHRib3JkZXJMZWZ0OiAnMC4zZW0gc29saWQgdHJhbnNwYXJlbnQnLFxyXG5cdFx0Ym9yZGVyUmlnaHQ6ICcwLjNlbSBzb2xpZCB0cmFuc3BhcmVudCcsXHJcblx0XHRib3JkZXJUb3A6ICcwLjNlbSBzb2xpZCcsIC8vIDFcclxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxyXG5cdFx0aGVpZ2h0OiAwLFxyXG5cdFx0bWFyZ2luVG9wOiAnLTAuMTI1ZW0nLCAvLyAyXHJcblx0XHR2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcclxuXHRcdHdpZHRoOiAwLFxyXG5cclxuXHRcdC8vIGFkZCBzcGFjaW5nXHJcblx0XHQnOmZpcnN0LWNoaWxkJzoge1xyXG5cdFx0XHRtYXJnaW5SaWdodDogJzAuNWVtJyxcclxuXHRcdH0sXHJcblx0XHQnOmxhc3QtY2hpbGQnOiB7XHJcblx0XHRcdG1hcmdpbkxlZnQ6ICcwLjVlbScsXHJcblx0XHR9LFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IERyb3Bkb3duQnV0dG9uO1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XHJcbmltcG9ydCBGb3JtTGFiZWwgZnJvbSAnLi4vRm9ybUxhYmVsJztcclxuXHJcbmNsYXNzIEZvcm1GaWVsZCBleHRlbmRzIENvbXBvbmVudCB7XHJcblx0Y29uc3RydWN0b3IgKCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuZm9ybUZpZWxkSWQgPSBnZW5lcmF0ZUlkKCk7XHJcblx0fVxyXG5cdGdldENoaWxkQ29udGV4dCAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRmb3JtRmllbGRJZDogdGhpcy5mb3JtRmllbGRJZCxcclxuXHRcdH07XHJcblx0fVxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRjb25zdCB7IGZvcm1MYXlvdXQgPSAnYmFzaWMnLCBsYWJlbFdpZHRoIH0gPSB0aGlzLmNvbnRleHQ7XHJcblx0XHRjb25zdCB7XHJcblx0XHRcdGFwaHJvZGl0ZVN0eWxlcyxcclxuXHRcdFx0Y2hpbGRyZW4sXHJcblx0XHRcdGNsYXNzTmFtZSxcclxuXHRcdFx0Y3JvcExhYmVsLFxyXG5cdFx0XHRodG1sRm9yLFxyXG5cdFx0XHRsYWJlbCxcclxuXHRcdFx0b2Zmc2V0QWJzZW50TGFiZWwsXHJcblx0XHRcdC4uLnByb3BzXHJcblx0XHR9ID0gdGhpcy5wcm9wcztcclxuXHJcblx0XHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXHJcblx0XHRcdGNsYXNzZXMuRm9ybUZpZWxkLFxyXG5cdFx0XHRjbGFzc2VzWydGb3JtRmllbGQtLWZvcm0tbGF5b3V0LScgKyBmb3JtTGF5b3V0XSxcclxuXHRcdFx0b2Zmc2V0QWJzZW50TGFiZWwgPyBjbGFzc2VzWydGb3JtRmllbGQtLW9mZnNldC1hYnNlbnQtbGFiZWwnXSA6IG51bGwsXHJcblx0XHRcdGFwaHJvZGl0ZVN0eWxlc1xyXG5cdFx0KTtcclxuXHRcdGlmIChjbGFzc05hbWUpIHtcclxuXHRcdFx0cHJvcHMuY2xhc3NOYW1lICs9ICgnICcgKyBjbGFzc05hbWUpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKG9mZnNldEFic2VudExhYmVsICYmIGxhYmVsV2lkdGgpIHtcclxuXHRcdFx0cHJvcHMuc3R5bGUgPSB7XHJcblx0XHRcdFx0cGFkZGluZ0xlZnQ6IGxhYmVsV2lkdGgsXHJcblx0XHRcdFx0Li4ucHJvcHMuc3R5bGUsXHJcblx0XHRcdH07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZWxlbWVudHNcclxuXHRcdGNvbnN0IGNvbXBvbmVudExhYmVsID0gbGFiZWwgPyAoXHJcblx0XHRcdDxGb3JtTGFiZWwgaHRtbEZvcj17aHRtbEZvcn0gY3JvcFRleHQ9e2Nyb3BMYWJlbH0+XHJcblx0XHRcdFx0e2xhYmVsfVxyXG5cdFx0XHQ8L0Zvcm1MYWJlbD5cclxuXHRcdCkgOiBudWxsO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgey4uLnByb3BzfSBodG1sRm9yPXtodG1sRm9yfT5cclxuXHRcdFx0XHR7Y29tcG9uZW50TGFiZWx9XHJcblx0XHRcdFx0e2NoaWxkcmVufVxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fVxyXG59O1xyXG5cclxuY29uc3Qgc3R5bGVzU2hhcGUgPSB7XHJcblx0X2RlZmluaXRpb246IFByb3BUeXBlcy5vYmplY3QsXHJcblx0X25hbWU6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcblxyXG5Gb3JtRmllbGQuY29udGV4dFR5cGVzID0ge1xyXG5cdGZvcm1MYXlvdXQ6IFByb3BUeXBlcy5vbmVPZihbJ2Jhc2ljJywgJ2hvcml6b250YWwnLCAnaW5saW5lJ10pLFxyXG5cdGxhYmVsV2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLm51bWJlcixcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XSksXHJcbn07XHJcbkZvcm1GaWVsZC5jaGlsZENvbnRleHRUeXBlcyA9IHtcclxuXHRmb3JtRmllbGRJZDogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuRm9ybUZpZWxkLnByb3BUeXBlcyA9IHtcclxuXHRhcGhyb2RpdGVTdHlsZXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHN0eWxlc1NoYXBlKSksXHJcblx0XHRQcm9wVHlwZXMuc2hhcGUoc3R5bGVzU2hhcGUpLFxyXG5cdF0pLFxyXG5cdGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcclxuXHRjcm9wTGFiZWw6IFByb3BUeXBlcy5ib29sLFxyXG5cdGh0bWxGb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0bGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0b2Zmc2V0QWJzZW50TGFiZWw6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVJZCAoKSB7XHJcblx0cmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRm9ybUZpZWxkO1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gRm9ybSBGaWVsZFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHQnRm9ybUZpZWxkJzoge1xyXG5cdFx0bWFyZ2luQm90dG9tOiAnMWVtJyxcclxuXHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxyXG5cdH0sXHJcblxyXG5cdC8vIHdoZW4gaW5zaWRlIGEgaG9yaXpvbnRhbCBmb3JtXHJcblxyXG5cdCdGb3JtRmllbGQtLWZvcm0tbGF5b3V0LWhvcml6b250YWwnOiB7XHJcblx0XHRbYEBtZWRpYSAobWluLXdpZHRoOiAke3RoZW1lLmJyZWFrcG9pbnQudGFibGV0TGFuZHNjYXBlTWlufSlgXToge1xyXG5cdFx0XHRkaXNwbGF5OiAndGFibGUnLFxyXG5cdFx0XHR0YWJsZUxheW91dDogJ2ZpeGVkJyxcclxuXHRcdFx0d2lkdGg6ICcxMDAlJyxcclxuXHRcdH0sXHJcblx0fSxcclxuXHJcblx0Ly8gaW5zaWRlIGhvcml6b250YWwgZm9ybVxyXG5cdC8vIHR5cGljYWxseSBmb3IgdXNlIHdpdGggc3VibWl0IGJ1dHRvbiBpbnNpZGVcclxuXHQnRm9ybUZpZWxkLS1vZmZzZXQtYWJzZW50LWxhYmVsJzoge1xyXG5cdFx0cGFkZGluZ0xlZnQ6IHRoZW1lLmZvcm0ubGFiZWwud2lkdGgsXHJcblx0fSxcclxuXHJcblx0Ly8gd2hlbiBpbnNpZGUgYW4gaW5saW5lIGZvcm1cclxuXHJcblx0J0Zvcm1GaWVsZC0tZm9ybS1sYXlvdXQtaW5saW5lJzoge1xyXG5cdFx0J2Rpc3BsYXknOiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdCdwYWRkaW5nTGVmdCc6ICcwLjI1ZW0nLFxyXG5cdFx0J3BhZGRpbmdSaWdodCc6ICcwLjI1ZW0nLFxyXG5cdFx0J3ZlcnRpY2FsQWxpZ24nOiAndG9wJyxcclxuXHJcblx0XHQnOmZpcnN0LWNoaWxkJzogeyBwYWRkaW5nTGVmdDogMCB9LFxyXG5cdFx0JzpsYXN0LWNoaWxkJzogeyBwYWRkaW5nUmlnaHQ6IDAgfSxcclxuXHR9LFxyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcclxuaW1wb3J0IGNvbmNhdENsYXNzbmFtZXMgZnJvbSAnLi4vLi4vLi4vdXRpbHMvY29uY2F0Q2xhc3NuYW1lcyc7XHJcbmltcG9ydCBJbnB1dE5vZWRpdCBmcm9tICcuL25vZWRpdCc7XHJcblxyXG4vLyBOT1RFIG11c3QgTk9UIGJlIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRvIGFsbG93IGByZWZzYFxyXG5cclxuY2xhc3MgRm9ybUlucHV0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHRibHVyICgpIHtcclxuXHRcdHRoaXMudGFyZ2V0LmJsdXIoKTtcclxuXHR9XHJcblx0Zm9jdXMgKCkge1xyXG5cdFx0dGhpcy50YXJnZXQuZm9jdXMoKTtcclxuXHR9XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IHtcclxuXHRcdFx0YXBocm9kaXRlU3R5bGVzLFxyXG5cdFx0XHRjbGFzc05hbWUsXHJcblx0XHRcdGRpc2FibGVkLFxyXG5cdFx0XHRpZCxcclxuXHRcdFx0bXVsdGlsaW5lLFxyXG5cdFx0XHRub2VkaXQsXHJcblx0XHRcdHNpemUsXHJcblx0XHRcdC4uLnByb3BzXHJcblx0XHR9ID0gdGhpcy5wcm9wcztcclxuXHJcblx0XHQvLyBOT1RFIHJldHVybiBhIGRpZmZlcmVudCBjb21wb25lbnQgZm9yIGBub2VkaXRgXHJcblx0XHRpZiAobm9lZGl0KSByZXR1cm4gPElucHV0Tm9lZGl0IHsuLi50aGlzLnByb3BzfSAvPjtcclxuXHJcblx0XHRjb25zdCB7IGZvcm1GaWVsZElkLCBmb3JtTGF5b3V0IH0gPSB0aGlzLmNvbnRleHQ7XHJcblxyXG5cdFx0cHJvcHMuaWQgPSBpZCB8fCBmb3JtRmllbGRJZDtcclxuXHRcdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdFx0Y2xhc3Nlcy5Gb3JtSW5wdXQsXHJcblx0XHRcdGNsYXNzZXNbJ0Zvcm1JbnB1dF9fc2l6ZS0tJyArIHNpemVdLFxyXG5cdFx0XHRkaXNhYmxlZCA/IGNsYXNzZXNbJ0Zvcm1JbnB1dC0tZGlzYWJsZWQnXSA6IG51bGwsXHJcblx0XHRcdGZvcm1MYXlvdXQgPyBjbGFzc2VzWydGb3JtSW5wdXQtLWZvcm0tbGF5b3V0LScgKyBmb3JtTGF5b3V0XSA6IG51bGwsXHJcblx0XHRcdC4uLmNvbmNhdENsYXNzbmFtZXMoYXBocm9kaXRlU3R5bGVzKVxyXG5cdFx0KTtcclxuXHRcdGlmIChjbGFzc05hbWUpIHtcclxuXHRcdFx0cHJvcHMuY2xhc3NOYW1lICs9ICgnICcgKyBjbGFzc05hbWUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHNldFJlZiA9IChuKSA9PiAodGhpcy50YXJnZXQgPSBuKTtcclxuXHRcdGNvbnN0IFRhZyA9IG11bHRpbGluZSA/ICd0ZXh0YXJlYScgOiAnaW5wdXQnO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxUYWdcclxuXHRcdFx0XHRyZWY9e3NldFJlZn1cclxuXHRcdFx0XHRkaXNhYmxlZD17cHJvcHMuZGlzYWJsZWR9XHJcblx0XHRcdFx0ey4uLnByb3BzfVxyXG5cdFx0XHQvPlxyXG5cdFx0KTtcclxuXHR9XHJcbn07XHJcblxyXG5jb25zdCBzdHlsZXNTaGFwZSA9IHtcclxuXHRfZGVmaW5pdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcclxuXHRfbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbkZvcm1JbnB1dC5wcm9wVHlwZXMgPSB7XHJcblx0YXBocm9kaXRlU3R5bGVzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZShzdHlsZXNTaGFwZSkpLFxyXG5cdFx0UHJvcFR5cGVzLnNoYXBlKHN0eWxlc1NoYXBlKSxcclxuXHRdKSxcclxuXHRtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxyXG5cdHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnc21hbGwnLCAnbGFyZ2UnXSksXHJcblx0dHlwZTogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuRm9ybUlucHV0LmRlZmF1bHRQcm9wcyA9IHtcclxuXHRzaXplOiAnZGVmYXVsdCcsXHJcblx0dHlwZTogJ3RleHQnLFxyXG59O1xyXG5Gb3JtSW5wdXQuY29udGV4dFR5cGVzID0ge1xyXG5cdGZvcm1MYXlvdXQ6IFByb3BUeXBlcy5vbmVPZihbJ2Jhc2ljJywgJ2hvcml6b250YWwnLCAnaW5saW5lJ10pLFxyXG5cdGZvcm1GaWVsZElkOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGb3JtSW5wdXQ7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcblxyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY29sb3InO1xyXG5cclxuLyogZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSAqL1xyXG5cclxuZnVuY3Rpb24gRm9ybUlucHV0Tm9lZGl0ICh7XHJcblx0Y2xhc3NOYW1lLFxyXG5cdGNvbXBvbmVudDogQ29tcG9uZW50LFxyXG5cdGNyb3BUZXh0LFxyXG5cdG11bHRpbGluZSxcclxuXHRub2VkaXQsIC8vIE5PVEUgbm90IHVzZWQsIGp1c3QgcmVtb3ZlZCBmcm9tIHByb3BzXHJcblx0dHlwZSxcclxuXHQuLi5wcm9wc1xyXG59KSB7XHJcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0Y2xhc3Nlcy5ub2VkaXQsXHJcblx0XHRjcm9wVGV4dCA/IGNsYXNzZXMuY3JvcFRleHQgOiBudWxsLFxyXG5cdFx0bXVsdGlsaW5lID8gY2xhc3Nlcy5tdWx0aWxpbmUgOiBudWxsLFxyXG5cdFx0KHByb3BzLmhyZWYgfHwgcHJvcHMub25DbGljaykgPyBjbGFzc2VzLmFuY2hvciA6IG51bGwsXHJcblx0XHRjbGFzc05hbWVcclxuXHQpO1xyXG5cclxuXHRyZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xyXG59O1xyXG5cclxuRm9ybUlucHV0Tm9lZGl0LnByb3BUeXBlcyA9IHtcclxuXHRjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdFByb3BUeXBlcy5mdW5jLFxyXG5cdF0pLFxyXG5cdGNyb3BUZXh0OiBQcm9wVHlwZXMuYm9vbCxcclxufTtcclxuRm9ybUlucHV0Tm9lZGl0LmRlZmF1bHRQcm9wcyA9IHtcclxuXHRjb21wb25lbnQ6ICdzcGFuJyxcclxufTtcclxuXHJcbmNvbnN0IGFuY2hvckhvdmVyQW5kRm9jdXNTdHlsZXMgPSB7XHJcblx0YmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLmNvbG9yLmxpbmssIDEwKSxcclxuXHRib3JkZXJDb2xvcjogZmFkZSh0aGVtZS5jb2xvci5saW5rLCAxMCksXHJcblx0Y29sb3I6IHRoZW1lLmNvbG9yLmxpbmssXHJcblx0b3V0bGluZTogJ25vbmUnLFxyXG5cdHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJyxcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0bm9lZGl0OiB7XHJcblx0XHRhcHBlYXJhbmNlOiAnbm9uZScsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmlucHV0LmJhY2tncm91bmQubm9lZGl0LFxyXG5cdFx0YmFja2dyb3VuZEltYWdlOiAnbm9uZScsXHJcblx0XHRib3JkZXJDb2xvcjogdGhlbWUuaW5wdXQuYm9yZGVyLmNvbG9yLm5vZWRpdCxcclxuXHRcdGJvcmRlclJhZGl1czogdGhlbWUuaW5wdXQuYm9yZGVyLnJhZGl1cyxcclxuXHRcdGJvcmRlclN0eWxlOiAnc29saWQnLFxyXG5cdFx0Ym9yZGVyV2lkdGg6IHRoZW1lLmlucHV0LmJvcmRlci53aWR0aCxcclxuXHRcdGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5ODAsXHJcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdGhlaWdodDogdGhlbWUuaW5wdXQuaGVpZ2h0LFxyXG5cdFx0bGluZUhlaWdodDogdGhlbWUuaW5wdXQubGluZUhlaWdodCxcclxuXHRcdHBhZGRpbmc6IGAwICR7dGhlbWUuaW5wdXQucGFkZGluZ0hvcml6b250YWx9YCxcclxuXHRcdHRyYW5zaXRpb246ICdib3JkZXItY29sb3IgZWFzZS1pbi1vdXQgMC4xNXMsIGJveC1zaGFkb3cgZWFzZS1pbi1vdXQgMC4xNXMnLFxyXG5cdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZScsXHJcblxyXG5cdFx0Ly8gcHJldmVudCBlbXB0eSBpbnB1dHMgZnJvbSBjb2xsYXBzaW5nIGJ5IGFkZGluZyBjb250ZW50XHJcblx0XHQnOmVtcHR5OmJlZm9yZSc6IHtcclxuXHRcdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk0MCxcclxuXHRcdFx0Y29udGVudDogJ1wiKG5vIHZhbHVlKVwiJyxcclxuXHRcdH0sXHJcblx0fSxcclxuXHJcblx0bXVsdGlsaW5lOiB7XHJcblx0XHRkaXNwbGF5OiAnYmxvY2snLFxyXG5cdFx0aGVpZ2h0OiAnYXV0bycsXHJcblx0XHRsaW5lSGVpZ2h0OiAnMS40JyxcclxuXHRcdHBhZGRpbmdCb3R0b206ICcwLjZlbScsXHJcblx0XHRwYWRkaW5nVG9wOiAnMC42ZW0nLFxyXG5cdH0sXHJcblxyXG5cdC8vIGluZGljYXRlIGNsaWNrYWJpbGl0eSB3aGVuIHVzaW5nIGFuIGFuY2hvclxyXG5cdGFuY2hvcjoge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLmNvbG9yLmxpbmssIDUpLFxyXG5cdFx0Ym9yZGVyQ29sb3I6IGZhZGUodGhlbWUuY29sb3IubGluaywgMTApLFxyXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmxpbmssXHJcblx0XHRtYXJnaW5SaWdodDogNSxcclxuXHRcdG1pbldpZHRoOiAwLFxyXG5cdFx0dGV4dERlY29yYXRpb246ICdub25lJyxcclxuXHJcblx0XHQnOmhvdmVyJzogYW5jaG9ySG92ZXJBbmRGb2N1c1N0eWxlcyxcclxuXHRcdCc6Zm9jdXMnOiBhbmNob3JIb3ZlckFuZEZvY3VzU3R5bGVzLFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1JbnB1dE5vZWRpdDtcclxuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEZvcm0gSW5wdXRcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0J0Zvcm1JbnB1dCc6IHtcclxuXHRcdCdhcHBlYXJhbmNlJzogJ25vbmUnLFxyXG5cdFx0J2JhY2tncm91bmRDb2xvcic6IHRoZW1lLmlucHV0LmJhY2tncm91bmQuZGVmYXVsdCxcclxuXHRcdCdiYWNrZ3JvdW5kSW1hZ2UnOiAnbm9uZScsXHJcblx0XHQnYm9yZGVyQ29sb3InOiB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuZGVmYXVsdCxcclxuXHRcdCdib3JkZXJSYWRpdXMnOiB0aGVtZS5pbnB1dC5ib3JkZXIucmFkaXVzLFxyXG5cdFx0J2JvcmRlclN0eWxlJzogJ3NvbGlkJyxcclxuXHRcdCdib3JkZXJXaWR0aCc6IHRoZW1lLmlucHV0LmJvcmRlci53aWR0aCxcclxuXHRcdCdib3hTaGFkb3cnOiB0aGVtZS5pbnB1dC5ib3hTaGFkb3csXHJcblx0XHQnY29sb3InOiAnaW5oZXJpdCcsIC8vIEZJWE1FXHJcblx0XHQnZGlzcGxheSc6ICdibG9jaycsXHJcblx0XHQnaGVpZ2h0JzogdGhlbWUuaW5wdXQuaGVpZ2h0LFxyXG5cdFx0J2xpbmVIZWlnaHQnOiB0aGVtZS5pbnB1dC5saW5lSGVpZ2h0LFxyXG5cdFx0J3BhZGRpbmcnOiBgMCAke3RoZW1lLmlucHV0LnBhZGRpbmdIb3Jpem9udGFsfWAsXHJcblx0XHQndHJhbnNpdGlvbic6ICdib3JkZXItY29sb3IgZWFzZS1pbi1vdXQgMC4xNXMsIGJveC1zaGFkb3cgZWFzZS1pbi1vdXQgMC4xNXMnLFxyXG5cdFx0J3dpZHRoJzogJzEwMCUnLFxyXG5cclxuXHRcdCc6aG92ZXInOiB7XHJcblx0XHRcdGJvcmRlckNvbG9yOiB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuaG92ZXIsXHJcblx0XHRcdG91dGxpbmU6IDAsXHJcblx0XHR9LFxyXG5cdFx0Jzpmb2N1cyc6IHtcclxuXHRcdFx0Ym9yZGVyQ29sb3I6IHRoZW1lLmlucHV0LmJvcmRlci5jb2xvci5mb2N1cyxcclxuXHRcdFx0Ym94U2hhZG93OiB0aGVtZS5pbnB1dC5ib3hTaGFkb3dGb2N1cyxcclxuXHRcdFx0b3V0bGluZTogMCxcclxuXHRcdH0sXHJcblx0fSxcclxuXHQnRm9ybUlucHV0LS1kaXNhYmxlZCc6IHtcclxuXHRcdGJhY2tncm91bmRDb2xvcjogdGhlbWUuaW5wdXQuYmFja2dyb3VuZC5kaXNhYmxlZCxcclxuXHRcdHBvaW50ZXJFdmVudHM6ICdub25lJyxcclxuXHR9LFxyXG5cclxuXHQvLyBzaXplc1xyXG5cdCdGb3JtSW5wdXRfX3NpemUtLXNtYWxsJzoge1xyXG5cdFx0Zm9udFNpemU6IHRoZW1lLmZvbnQuc2l6ZS5zbWFsbCxcclxuXHR9LFxyXG5cdCdGb3JtSW5wdXRfX3NpemUtLWxhcmdlJzoge1xyXG5cdFx0Zm9udFNpemU6IHRoZW1lLmZvbnQuc2l6ZS5sYXJnZSxcclxuXHR9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XHJcblxyXG5mdW5jdGlvbiBGb3JtTGFiZWwgKHtcclxuXHRhcGhyb2RpdGVTdHlsZXMsXHJcblx0Y2xhc3NOYW1lLFxyXG5cdGNvbXBvbmVudDogQ29tcG9uZW50LFxyXG5cdGNyb3BUZXh0LFxyXG5cdGh0bWxGb3IsXHJcblx0Li4ucHJvcHNcclxufSxcclxue1xyXG5cdGZvcm1GaWVsZElkLFxyXG5cdGZvcm1MYXlvdXQsXHJcblx0bGFiZWxXaWR0aCxcclxufSkge1xyXG5cdHByb3BzLmh0bWxGb3IgPSBodG1sRm9yIHx8IGZvcm1GaWVsZElkO1xyXG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdGNsYXNzZXMuRm9ybUxhYmVsLFxyXG5cdFx0Zm9ybUxheW91dCA/IGNsYXNzZXNbJ0Zvcm1MYWJlbC0tZm9ybS1sYXlvdXQtJyArIGZvcm1MYXlvdXRdIDogbnVsbCxcclxuXHRcdGNyb3BUZXh0ID8gY2xhc3Nlc1snRm9ybUxhYmVsLS1jcm9wLXRleHQnXSA6IG51bGwsXHJcblx0XHRhcGhyb2RpdGVTdHlsZXNcclxuXHQpO1xyXG5cdGlmIChjbGFzc05hbWUpIHtcclxuXHRcdHByb3BzLmNsYXNzTmFtZSArPSAoJyAnICsgY2xhc3NOYW1lKTtcclxuXHR9XHJcblx0aWYgKGxhYmVsV2lkdGgpIHtcclxuXHRcdHByb3BzLnN0eWxlID0ge1xyXG5cdFx0XHR3aWR0aDogbGFiZWxXaWR0aCxcclxuXHRcdFx0Li4ucHJvcHMuc3R5bGUsXHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIDxDb21wb25lbnQgey4uLnByb3BzfSAvPjtcclxufTtcclxuXHJcbmNvbnN0IHN0eWxlc1NoYXBlID0ge1xyXG5cdF9kZWZpbml0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxyXG5cdF9uYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxuRm9ybUxhYmVsLnByb3BUeXBlcyA9IHtcclxuXHRhcGhyb2RpdGVTdHlsZXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHN0eWxlc1NoYXBlKSksXHJcblx0XHRQcm9wVHlwZXMuc2hhcGUoc3R5bGVzU2hhcGUpLFxyXG5cdF0pLFxyXG5cdGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0UHJvcFR5cGVzLmZ1bmMsXHJcblx0XSksXHJcblx0Y3JvcFRleHQ6IFByb3BUeXBlcy5ib29sLFxyXG59O1xyXG5Gb3JtTGFiZWwuZGVmYXVsdFByb3BzID0ge1xyXG5cdGNvbXBvbmVudDogJ2xhYmVsJyxcclxufTtcclxuRm9ybUxhYmVsLmNvbnRleHRUeXBlcyA9IHtcclxuXHRmb3JtTGF5b3V0OiBQcm9wVHlwZXMub25lT2YoWydiYXNpYycsICdob3Jpem9udGFsJywgJ2lubGluZSddKSxcclxuXHRmb3JtRmllbGRJZDogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRsYWJlbFdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5udW1iZXIsXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdF0pLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGb3JtTGFiZWw7XHJcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBGb3JtIExhYmVsXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdCdGb3JtTGFiZWwnOiB7XHJcblx0XHRjb2xvcjogdGhlbWUuZm9ybS5sYWJlbC5jb2xvcixcclxuXHRcdGZvbnRTaXplOiB0aGVtZS5mb3JtLmxhYmVsLmZvbnRTaXplLFxyXG5cdFx0Zm9udFdlaWdodDogdGhlbWUuZm9ybS5sYWJlbC5mb250V2VpZ2h0LFxyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHRtYXJnaW5Cb3R0b206ICcwLjVlbScsXHJcblx0fSxcclxuXHJcblx0Ly8gd2hlbiBpbnNpZGUgYSBob3Jpem9udGFsIGZvcm1cclxuXHJcblx0J0Zvcm1MYWJlbC0tZm9ybS1sYXlvdXQtaG9yaXpvbnRhbCc6IHtcclxuXHRcdFtgQG1lZGlhIChtaW4td2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC50YWJsZXRMYW5kc2NhcGVNaW59KWBdOiB7XHJcblx0XHRcdGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcclxuXHRcdFx0bGluZUhlaWdodDogdGhlbWUuY29tcG9uZW50LmxpbmVIZWlnaHQsIC8vIGZpeFxyXG5cdFx0XHRtYXJnaW5Cb3R0b206IDAsXHJcblx0XHRcdHBhZGRpbmdSaWdodDogNSxcclxuXHRcdFx0dmVydGljYWxBbGlnbjogJ3RvcCcsXHJcblx0XHRcdHdpZHRoOiB0aGVtZS5mb3JtLmxhYmVsLndpZHRoLFxyXG5cdFx0fSxcclxuXHR9LFxyXG5cclxuXHQvLyBjcm9wIGxvbmcgdGV4dFxyXG5cclxuXHQnRm9ybUxhYmVsLS1jcm9wLXRleHQnOiB7XHJcblx0XHRvdmVyZmxvdzogJ2hpZGRlbicsXHJcblx0XHR0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXHJcblx0XHR3aGl0ZVNwYWNlOiAnbm93cmFwJyxcclxuXHR9LFxyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XHJcblxyXG5mdW5jdGlvbiBGb3JtTm90ZSAoe1xyXG5cdGNsYXNzTmFtZSxcclxuXHRjaGlsZHJlbixcclxuXHRjb21wb25lbnQ6IENvbXBvbmVudCxcclxuXHRodG1sLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoY2xhc3Nlcy5ub3RlLCBjbGFzc05hbWUpO1xyXG5cclxuXHQvLyBQcm9wZXJ0eSBWaW9sYXRpb25cclxuXHRpZiAoY2hpbGRyZW4gJiYgaHRtbCkge1xyXG5cdFx0Y29uc29sZS5lcnJvcignV2FybmluZzogRm9ybU5vdGUgY2Fubm90IHJlbmRlciBgY2hpbGRyZW5gIGFuZCBgaHRtbGAuIFlvdSBtdXN0IHByb3ZpZGUgb25lIG9yIHRoZSBvdGhlci4nKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBodG1sID8gKFxyXG5cdFx0PENvbXBvbmVudCB7Li4ucHJvcHN9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogaHRtbCB9fSAvPlxyXG5cdCkgOiAoXHJcblx0XHQ8Q29tcG9uZW50IHsuLi5wcm9wc30+e2NoaWxkcmVufTwvQ29tcG9uZW50PlxyXG5cdCk7XHJcbn07XHJcbkZvcm1Ob3RlLnByb3BUeXBlcyA9IHtcclxuXHRjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLmZ1bmMsXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdF0pLFxyXG5cdGh0bWw6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcbkZvcm1Ob3RlLmRlZmF1bHRQcm9wcyA9IHtcclxuXHRjb21wb25lbnQ6ICdkaXYnLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGb3JtTm90ZTtcclxuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEZvcm0gTm90ZVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRub3RlOiB7XHJcblx0XHRjb2xvcjogdGhlbWUuZm9ybS5ub3RlLmNvbG9yLFxyXG5cdFx0Zm9udFNpemU6IHRoZW1lLmZvcm0ubm90ZS5mb250U2l6ZSxcclxuXHRcdG1hcmdpblRvcDogdGhlbWUuc3BhY2luZy5zbWFsbCxcclxuXHR9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XHJcblxyXG5jbGFzcyBGb3JtU2VsZWN0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgeyBjaGlsZHJlbiwgaWQsIG9wdGlvbnMsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0Y29uc3QgeyBmb3JtRmllbGRJZCB9ID0gdGhpcy5jb250ZXh0O1xyXG5cclxuXHRcdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdFx0Y2xhc3Nlcy5zZWxlY3QsXHJcblx0XHRcdHByb3BzLmRpc2FibGVkID8gY2xhc3Nlc1snc2VsZWN0LS1kaXNhYmxlZCddIDogbnVsbFxyXG5cdFx0KTtcclxuXHRcdHByb3BzLmlkID0gaWQgfHwgZm9ybUZpZWxkSWQ7XHJcblxyXG5cdFx0Ly8gUHJvcGVydHkgVmlvbGF0aW9uXHJcblx0XHRpZiAob3B0aW9ucyAmJiBjaGlsZHJlbikge1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdXYXJuaW5nOiBGb3JtU2VsZWN0IGNhbm5vdCByZW5kZXIgYGNoaWxkcmVuYCBhbmQgYG9wdGlvbnNgLiBZb3UgbXVzdCBwcm92aWRlIG9uZSBvciB0aGUgb3RoZXIuJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmNvbnRhaW5lcil9PlxyXG5cdFx0XHRcdHtvcHRpb25zID8gKFxyXG5cdFx0XHRcdFx0PHNlbGVjdCB7Li4ucHJvcHN9PntvcHRpb25zLm1hcChvcHQgPT4gKFxyXG5cdFx0XHRcdFx0XHQ8b3B0aW9uIGtleT17b3B0LnZhbHVlfSB2YWx1ZT17b3B0LnZhbHVlfT5cclxuXHRcdFx0XHRcdFx0XHR7b3B0LmxhYmVsfVxyXG5cdFx0XHRcdFx0XHQ8L29wdGlvbj5cclxuXHRcdFx0XHRcdCkpfVxyXG5cdFx0XHRcdFx0PC9zZWxlY3Q+XHJcblx0XHRcdFx0KSA6IDxzZWxlY3Qgey4uLnByb3BzfT57Y2hpbGRyZW59PC9zZWxlY3Q+fVxyXG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuYXJyb3dzLCBwcm9wcy5kaXNhYmxlZCA/IGNsYXNzZXNbJ2Fycm93cy0tZGlzYWJsZWQnXSA6IG51bGwpfT5cclxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuYXJyb3csIGNsYXNzZXMuYXJyb3dUb3ApfSAvPlxyXG5cdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5hcnJvdywgY2xhc3Nlcy5hcnJvd0JvdHRvbSl9IC8+XHJcblx0XHRcdFx0PC9zcGFuPlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fVxyXG59O1xyXG5cclxuRm9ybVNlbGVjdC5jb250ZXh0VHlwZXMgPSB7XHJcblx0Zm9ybUZpZWxkSWQ6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcbkZvcm1TZWxlY3QucHJvcFR5cGVzID0ge1xyXG5cdG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdG9wdGlvbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheU9mKFxyXG5cdFx0UmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcclxuXHRcdFx0bGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRcdHZhbHVlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0fSlcclxuXHQpLFxyXG5cdHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5udW1iZXIsXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdF0pLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGb3JtU2VsZWN0O1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gRm9ybSBTZWxlY3RcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXHJcblxyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5pbXBvcnQgeyBkYXJrZW4sIGxpZ2h0ZW4gfSBmcm9tICcuLi8uLi8uLi91dGlscy9jb2xvcic7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRjb250YWluZXI6IHtcclxuXHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxyXG5cdH0sXHJcblxyXG5cdC8vIHNlbGVjdCBub2RlXHJcblx0c2VsZWN0OiB7XHJcblx0XHRhcHBlYXJhbmNlOiAnbm9uZScsXHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmlucHV0LmJhY2tncm91bmQuZGVmYXVsdCxcclxuXHRcdGJhY2tncm91bmRJbWFnZTogJ25vbmUnLFxyXG5cdFx0Ym9yZGVyQ29sb3I6IHRoZW1lLmlucHV0LmJvcmRlci5jb2xvci5kZWZhdWx0LFxyXG5cdFx0Ym9yZGVyQm90dG9tQ29sb3I6IGRhcmtlbih0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuZGVmYXVsdCwgNCksXHJcblx0XHRib3JkZXJUb3BDb2xvcjogbGlnaHRlbih0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuZGVmYXVsdCwgNCksXHJcblx0XHRib3JkZXJSYWRpdXM6IHRoZW1lLmlucHV0LmJvcmRlci5yYWRpdXMsXHJcblx0XHRib3JkZXJTdHlsZTogJ3NvbGlkJyxcclxuXHRcdGJvcmRlcldpZHRoOiB0aGVtZS5pbnB1dC5ib3JkZXIud2lkdGgsXHJcblx0XHRib3hTaGFkb3c6IHRoZW1lLnNlbGVjdC5ib3hTaGFkb3csXHJcblx0XHRjb2xvcjogJ2luaGVyaXQnLCAvLyBGSVhNRVxyXG5cdFx0ZGlzcGxheTogJ2Jsb2NrJyxcclxuXHRcdGhlaWdodDogdGhlbWUuaW5wdXQuaGVpZ2h0LFxyXG5cdFx0bGluZUhlaWdodDogdGhlbWUuaW5wdXQubGluZUhlaWdodCxcclxuXHRcdHBhZGRpbmc6IGAwICR7dGhlbWUuaW5wdXQucGFkZGluZ0hvcml6b250YWx9YCxcclxuXHRcdHRyYW5zaXRpb246ICdib3JkZXItY29sb3IgZWFzZS1pbi1vdXQgMC4xNXMsIGJveC1zaGFkb3cgZWFzZS1pbi1vdXQgMC4xNXMnLFxyXG5cdFx0d2lkdGg6ICcxMDAlJyxcclxuXHJcblx0XHQnOmhvdmVyJzoge1xyXG5cdFx0XHRib3JkZXJDb2xvcjogdGhlbWUuaW5wdXQuYm9yZGVyLmNvbG9yLmhvdmVyLFxyXG5cdFx0XHRvdXRsaW5lOiAwLFxyXG5cdFx0fSxcclxuXHRcdCc6Zm9jdXMnOiB7XHJcblx0XHRcdGJvcmRlckNvbG9yOiB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuZm9jdXMsXHJcblx0XHRcdGJveFNoYWRvdzogdGhlbWUuaW5wdXQuYm94U2hhZG93Rm9jdXMsXHJcblx0XHRcdG91dGxpbmU6IDAsXHJcblx0XHR9LFxyXG5cdH0sXHJcblx0J3NlbGVjdC0tZGlzYWJsZWQnOiB7XHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmlucHV0LmJhY2tncm91bmQuZGlzYWJsZWQsXHJcblx0XHRwb2ludGVyRXZlbnRzOiAnbm9uZScsXHJcblx0fSxcclxuXHJcblx0Ly8gYXJyb3dzXHJcblx0YXJyb3dzOiB7XHJcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuXHRcdGRpc3BsYXk6ICdmbGV4JyxcclxuXHRcdGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxyXG5cdFx0aGVpZ2h0OiB0aGVtZS5pbnB1dC5oZWlnaHQsXHJcblx0XHRqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXHJcblx0XHRwb2ludGVyRXZlbnRzOiAnbm9uZScsXHJcblx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuXHRcdHJpZ2h0OiAwLFxyXG5cdFx0dG9wOiAwLFxyXG5cdFx0d2lkdGg6IHRoZW1lLmlucHV0LmhlaWdodCxcclxuXHR9LFxyXG5cdGFycm93OiB7XHJcblx0XHRib3JkZXJMZWZ0OiAnMC4zZW0gc29saWQgdHJhbnNwYXJlbnQnLFxyXG5cdFx0Ym9yZGVyUmlnaHQ6ICcwLjNlbSBzb2xpZCB0cmFuc3BhcmVudCcsXHJcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdGhlaWdodDogMCxcclxuXHRcdHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxyXG5cdFx0d2lkdGg6IDAsXHJcblx0XHR6SW5kZXg6IDEsXHJcblx0fSxcclxuXHRhcnJvd1RvcDoge1xyXG5cdFx0Ym9yZGVyQm90dG9tOiAnMC4zZW0gc29saWQnLFxyXG5cdFx0bWFyZ2luQm90dG9tOiAnMC4xZW0nLFxyXG5cdH0sXHJcblx0YXJyb3dCb3R0b206IHtcclxuXHRcdGJvcmRlclRvcDogJzAuM2VtIHNvbGlkJyxcclxuXHRcdG1hcmdpblRvcDogJzAuMWVtJyxcclxuXHR9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcclxuXHJcbmNsYXNzIEZvcm0gZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cdGdldENoaWxkQ29udGV4dCAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRmb3JtTGF5b3V0OiB0aGlzLnByb3BzLmxheW91dCxcclxuXHRcdFx0bGFiZWxXaWR0aDogdGhpcy5wcm9wcy5sYWJlbFdpZHRoLFxyXG5cdFx0fTtcclxuXHR9XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdC8vIE5PVEUgYGxhYmVsV2lkdGhgIGlzIGRlY2xhcmVkIHRvIHJlbW92ZSBpdCBmcm9tIGBwcm9wc2AsIHRob3VnaCBuZXZlciB1c2VkXHJcblx0XHRjb25zdCB7XHJcblx0XHRcdGNsYXNzTmFtZSxcclxuXHRcdFx0Y29tcG9uZW50OiBDb21wb25lbnQsXHJcblx0XHRcdGxhYmVsV2lkdGgsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuXHRcdFx0bGF5b3V0LFxyXG5cdFx0XHQuLi5wcm9wc1xyXG5cdFx0fSA9IHRoaXMucHJvcHM7XHJcblxyXG5cdFx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0XHRjbGFzc2VzLkZvcm0sXHJcblx0XHRcdGNsYXNzZXNbJ0Zvcm1fXycgKyBsYXlvdXRdLFxyXG5cdFx0XHRjbGFzc05hbWVcclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIDxDb21wb25lbnQgey4uLnByb3BzfSAvPjtcclxuXHR9XHJcbn07XHJcblxyXG5Gb3JtLmNoaWxkQ29udGV4dFR5cGVzID0ge1xyXG5cdGZvcm1MYXlvdXQ6IFByb3BUeXBlcy5vbmVPZihbJ2Jhc2ljJywgJ2hvcml6b250YWwnLCAnaW5saW5lJ10pLFxyXG5cdGxhYmVsV2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0UHJvcFR5cGVzLm51bWJlcixcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XSksXHJcbn07XHJcbkZvcm0ucHJvcFR5cGVzID0ge1xyXG5cdGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxyXG5cdGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0UHJvcFR5cGVzLmZ1bmMsXHJcblx0XSksXHJcblx0bGF5b3V0OiBQcm9wVHlwZXMub25lT2YoWydiYXNpYycsICdob3Jpem9udGFsJywgJ2lubGluZSddKSxcclxufTtcclxuRm9ybS5kZWZhdWx0UHJvcHMgPSB7XHJcblx0Y29tcG9uZW50OiAnZm9ybScsXHJcblx0bGF5b3V0OiAnYmFzaWMnLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGb3JtO1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gRm9ybVxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdEZvcm06IHt9LFxyXG59O1xyXG4iLCIvKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXHJcblxyXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL0J1dHRvbic7XHJcbmltcG9ydCBHbHlwaCBmcm9tICcuLi9HbHlwaCc7XHJcblxyXG5mdW5jdGlvbiBHbHlwaEJ1dHRvbiAoe1xyXG5cdGNoaWxkcmVuLFxyXG5cdGdseXBoLFxyXG5cdGdseXBoQ29sb3IsXHJcblx0Z2x5cGhTaXplLFxyXG5cdGdseXBoU3R5bGUsXHJcblx0cG9zaXRpb24sXHJcblx0Li4ucHJvcHNcclxufSkge1xyXG5cdGNvbnN0IGlzRGVmYXVsdCA9IHBvc2l0aW9uID09PSAnZGVmYXVsdCc7XHJcblx0Y29uc3QgaXNMZWZ0ID0gcG9zaXRpb24gPT09ICdsZWZ0JztcclxuXHRjb25zdCBpc1JpZ2h0ID0gcG9zaXRpb24gPT09ICdyaWdodCc7XHJcblxyXG5cdGNvbnN0IG9mZnNldCA9IHt9O1xyXG5cdGlmIChpc0xlZnQpIG9mZnNldC5tYXJnaW5SaWdodCA9ICcwLjVlbSc7XHJcblx0aWYgKGlzUmlnaHQpIG9mZnNldC5tYXJnaW5MZWZ0ID0gJzAuNWVtJztcclxuXHJcblx0Y29uc3QgZ2x5cGhTdHlsZXMgPSB7XHJcblx0XHQuLi5vZmZzZXQsXHJcblx0XHQuLi5nbHlwaFN0eWxlLFxyXG5cdH07XHJcblxyXG5cdGNvbnN0IGljb24gPSAoXHJcblx0XHQ8R2x5cGhcclxuXHRcdFx0YXBocm9kaXRlU3R5bGVzPXtjbGFzc2VzLmdseXBofVxyXG5cdFx0XHRjb2xvcj17Z2x5cGhDb2xvcn1cclxuXHRcdFx0bmFtZT17Z2x5cGh9XHJcblx0XHRcdHNpemU9e2dseXBoU2l6ZX1cclxuXHRcdFx0c3R5bGU9e2dseXBoU3R5bGVzfVxyXG5cdFx0Lz5cclxuXHQpO1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PEJ1dHRvbiB7Li4ucHJvcHN9PlxyXG5cdFx0XHR7KGlzRGVmYXVsdCB8fCBpc0xlZnQpICYmIGljb259XHJcblx0XHRcdHtjaGlsZHJlbn1cclxuXHRcdFx0e2lzUmlnaHQgJiYgaWNvbn1cclxuXHRcdDwvQnV0dG9uPlxyXG5cdCk7XHJcbn07XHJcblxyXG4vLyBGb3IgcHJvcHMgXCJnbHlwaFwiLCBcImdseXBoQ29sb3JcIiwgYW5kIFwiZ2x5cGhTaXplXCI6XHJcbi8vIHByb3AgdHlwZSB2YWxpZGF0aW9uIHdpbGwgb2NjdXIgd2l0aGluIHRoZSBHbHlwaCBjb21wb25lbnQsIG5vIG5lZWQgdG9cclxuLy8gZHVwbGljYXRlLCBqdXN0IHBhc3MgaXQgdGhyb3VnaC5cclxuR2x5cGhCdXR0b24ucHJvcFR5cGVzID0ge1xyXG5cdGdseXBoOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdGdseXBoQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0Z2x5cGhTaXplOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdGdseXBoU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXHJcblx0cG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnbGVmdCcsICdyaWdodCddKSxcclxufTtcclxuR2x5cGhCdXR0b24uZGVmYXVsdFByb3BzID0ge1xyXG5cdGdseXBoU3R5bGU6IHt9LFxyXG5cdHBvc2l0aW9uOiAnZGVmYXVsdCcsIC8vIG5vIG1hcmdpbiwgYXNzdW1lcyBubyBjaGlsZHJlblxyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRnbHlwaDoge1xyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHRtYXJnaW5Ub3A6ICctMC4xMjVlbScsIC8vIGZpeCBpY29uIGFsaWdubWVudFxyXG5cdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZScsXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gR2x5cGhCdXR0b247XHJcbiIsIi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cclxuXHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBGaWVsZCBmcm9tICcuLi9Gb3JtRmllbGQnO1xyXG5pbXBvcnQgR2x5cGggZnJvbSAnLi4vR2x5cGgnO1xyXG5cclxuZnVuY3Rpb24gR2x5cGhGaWVsZCAoe1xyXG5cdGNoaWxkcmVuLFxyXG5cdGdseXBoLFxyXG5cdGdseXBoQ29sb3IsXHJcblx0Z2x5cGhTaXplLFxyXG5cdHBvc2l0aW9uLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHRjb25zdCBpc0xlZnQgPSBwb3NpdGlvbiA9PT0gJ2xlZnQnO1xyXG5cdGNvbnN0IGlzUmlnaHQgPSBwb3NpdGlvbiA9PT0gJ3JpZ2h0JztcclxuXHJcblx0Y29uc3QgZ2x5cGhTdHlsZXMgPSB7fTtcclxuXHRpZiAoaXNMZWZ0KSBnbHlwaFN0eWxlcy5tYXJnaW5SaWdodCA9ICcwLjVlbSc7XHJcblx0aWYgKGlzUmlnaHQpIGdseXBoU3R5bGVzLm1hcmdpbkxlZnQgPSAnMC41ZW0nO1xyXG5cclxuXHRjb25zdCBpY29uID0gKFxyXG5cdFx0PEdseXBoXHJcblx0XHRcdGFwaHJvZGl0ZVN0eWxlcz17Y2xhc3Nlcy5nbHlwaH1cclxuXHRcdFx0Y29sb3I9e2dseXBoQ29sb3J9XHJcblx0XHRcdG5hbWU9e2dseXBofVxyXG5cdFx0XHRzaXplPXtnbHlwaFNpemV9XHJcblx0XHRcdHN0eWxlPXtnbHlwaFN0eWxlc31cclxuXHRcdC8+XHJcblx0KTtcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxGaWVsZCBhcGhyb2RpdGVTdHlsZXM9e2NsYXNzZXMud3JhcHBlcn0gey4uLnByb3BzfT5cclxuXHRcdFx0e2lzTGVmdCAmJiBpY29ufVxyXG5cdFx0XHR7Y2hpbGRyZW59XHJcblx0XHRcdHtpc1JpZ2h0ICYmIGljb259XHJcblx0XHQ8L0ZpZWxkPlxyXG5cdCk7XHJcbn07XHJcblxyXG4vLyBGb3IgcHJvcHMgXCJnbHlwaFwiLCBcImdseXBoQ29sb3JcIiwgYW5kIFwiZ2x5cGhTaXplXCI6XHJcbi8vIHByb3AgdHlwZSB2YWxpZGF0aW9uIHdpbGwgb2NjdXIgd2l0aGluIHRoZSBHbHlwaCBjb21wb25lbnQsIG5vIG5lZWQgdG9cclxuLy8gZHVwbGljYXRlLCBqdXN0IHBhc3MgaXQgdGhyb3VnaC5cclxuR2x5cGhGaWVsZC5wcm9wVHlwZXMgPSB7XHJcblx0Z2x5cGg6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0Z2x5cGhDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRnbHlwaFNpemU6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0cG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnXSksXHJcbn07XHJcbkdseXBoRmllbGQuZGVmYXVsdFByb3BzID0ge1xyXG5cdHBvc2l0aW9uOiAnbGVmdCcsXHJcbn07XHJcblxyXG5jb25zdCBjbGFzc2VzID0ge1xyXG5cdHdyYXBwZXI6IHtcclxuXHRcdGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG5cdFx0ZGlzcGxheTogJ2ZsZXgnLFxyXG5cdH0sXHJcblx0Z2x5cGg6IHtcclxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxyXG5cdFx0bWFyZ2luVG9wOiAnLTAuMTI1ZW0nLCAvLyBmaXggaWNvbiBhbGlnbm1lbnRcclxuXHRcdHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEdseXBoRmllbGQ7XHJcbiIsImltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRkYW5nZXI6IHRoZW1lLmdseXBoLmNvbG9yLmRhbmdlcixcclxuXHRpbmhlcml0OiB0aGVtZS5nbHlwaC5jb2xvci5pbmhlcml0LFxyXG5cdGludmVydGVkOiB0aGVtZS5nbHlwaC5jb2xvci5pbnZlcnRlZCxcclxuXHRwcmltYXJ5OiB0aGVtZS5nbHlwaC5jb2xvci5wcmltYXJ5LFxyXG5cdHN1Y2Nlc3M6IHRoZW1lLmdseXBoLmNvbG9yLnN1Y2Nlc3MsXHJcblx0d2FybmluZzogdGhlbWUuZ2x5cGguY29sb3Iud2FybmluZyxcclxufTtcclxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCBvY3RpY29ucyBmcm9tICcuL29jdGljb25zJztcclxuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XHJcbmltcG9ydCBzaXplcyBmcm9tICcuL3NpemVzJztcclxuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9zdHlsZXMnO1xyXG5cclxuLy8gRklYTUUgc3RhdGljIG9jdGljb24gY2xhc3NlcyBsZWFuaW5nIG9uIEVsZW1lbnRhbCB0byBhdm9pZCBkdXBsaWNhdGVcclxuLy8gZm9udCBhbmQgQ1NTOyBpbmZsYXRpbmcgdGhlIHByb2plY3Qgc2l6ZVxyXG5cclxuZnVuY3Rpb24gR2x5cGggKHtcclxuXHRhcGhyb2RpdGVTdHlsZXMsXHJcblx0Y2xhc3NOYW1lLFxyXG5cdGNvbG9yLFxyXG5cdGNvbXBvbmVudDogQ29tcG9uZW50LFxyXG5cdG5hbWUsXHJcblx0c2l6ZSxcclxuXHRzdHlsZSxcclxuXHQuLi5wcm9wc1xyXG59KSB7XHJcblx0Y29uc3QgY29sb3JJc1ZhbGlkVHlwZSA9IE9iamVjdC5rZXlzKGNvbG9ycykuaW5jbHVkZXMoY29sb3IpO1xyXG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdGNsYXNzZXMuZ2x5cGgsXHJcblx0XHRjb2xvcklzVmFsaWRUeXBlICYmIGNsYXNzZXNbJ2NvbG9yX18nICsgY29sb3JdLFxyXG5cdFx0Y2xhc3Nlc1snc2l6ZV9fJyArIHNpemVdLFxyXG5cdFx0YXBocm9kaXRlU3R5bGVzXHJcblx0KSArIGAgJHtvY3RpY29uc1tuYW1lXX1gO1xyXG5cdGlmIChjbGFzc05hbWUpIHtcclxuXHRcdHByb3BzLmNsYXNzTmFtZSArPSAoJyAnICsgY2xhc3NOYW1lKTtcclxuXHR9XHJcblxyXG5cdC8vIHN1cHBvcnQgcmFuZG9tIGNvbG9yIHN0cmluZ3NcclxuXHRwcm9wcy5zdHlsZSA9IHtcclxuXHRcdGNvbG9yOiAhY29sb3JJc1ZhbGlkVHlwZSA/IGNvbG9yIDogbnVsbCxcclxuXHRcdC4uLnN0eWxlLFxyXG5cdH07XHJcblxyXG5cdHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz47XHJcbn07XHJcblxyXG5HbHlwaC5wcm9wVHlwZXMgPSB7XHJcblx0YXBocm9kaXRlU3R5bGVzOiBQcm9wVHlwZXMuc2hhcGUoe1xyXG5cdFx0X2RlZmluaXRpb246IFByb3BUeXBlcy5vYmplY3QsXHJcblx0XHRfbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcclxuXHR9KSxcclxuXHRjb2xvcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoY29sb3JzKSksXHJcblx0XHRQcm9wVHlwZXMuc3RyaW5nLCAvLyBzdXBwb3J0IHJhbmRvbSBjb2xvciBzdHJpbmdzXHJcblx0XSksXHJcblx0bmFtZTogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKG9jdGljb25zKSkuaXNSZXF1aXJlZCxcclxuXHRzaXplOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoc2l6ZXMpKSxcclxufTtcclxuR2x5cGguZGVmYXVsdFByb3BzID0ge1xyXG5cdGNvbXBvbmVudDogJ2knLFxyXG5cdGNvbG9yOiAnaW5oZXJpdCcsXHJcblx0c2l6ZTogJ3NtYWxsJyxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gR2x5cGg7XHJcbiIsIi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdGFsZXJ0OiAnb2N0aWNvbiBvY3RpY29uLWFsZXJ0JyxcclxuXHQnYXJyb3ctZG93bic6ICdvY3RpY29uIG9jdGljb24tYXJyb3ctZG93bicsXHJcblx0J2Fycm93LWxlZnQnOiAnb2N0aWNvbiBvY3RpY29uLWFycm93LWxlZnQnLFxyXG5cdCdhcnJvdy1yaWdodCc6ICdvY3RpY29uIG9jdGljb24tYXJyb3ctcmlnaHQnLFxyXG5cdCdhcnJvdy1zbWFsbC1kb3duJzogJ29jdGljb24gb2N0aWNvbi1hcnJvdy1zbWFsbC1kb3duJyxcclxuXHQnYXJyb3ctc21hbGwtbGVmdCc6ICdvY3RpY29uIG9jdGljb24tYXJyb3ctc21hbGwtbGVmdCcsXHJcblx0J2Fycm93LXNtYWxsLXJpZ2h0JzogJ29jdGljb24gb2N0aWNvbi1hcnJvdy1zbWFsbC1yaWdodCcsXHJcblx0J2Fycm93LXNtYWxsLXVwJzogJ29jdGljb24gb2N0aWNvbi1hcnJvdy1zbWFsbC11cCcsXHJcblx0J2Fycm93LXVwJzogJ29jdGljb24gb2N0aWNvbi1hcnJvdy11cCcsXHJcblx0bWljcm9zY29wZTogJ29jdGljb24gb2N0aWNvbi1taWNyb3Njb3BlJyxcclxuXHRiZWFrZXI6ICdvY3RpY29uIG9jdGljb24tYmVha2VyJyxcclxuXHRiZWxsOiAnb2N0aWNvbiBvY3RpY29uLWJlbGwnLFxyXG5cdGJvb2s6ICdvY3RpY29uIG9jdGljb24tYm9vaycsXHJcblx0Ym9va21hcms6ICdvY3RpY29uIG9jdGljb24tYm9va21hcmsnLFxyXG5cdGJyaWVmY2FzZTogJ29jdGljb24gb2N0aWNvbi1icmllZmNhc2UnLFxyXG5cdGJyb2FkY2FzdDogJ29jdGljb24gb2N0aWNvbi1icm9hZGNhc3QnLFxyXG5cdGJyb3dzZXI6ICdvY3RpY29uIG9jdGljb24tYnJvd3NlcicsXHJcblx0YnVnOiAnb2N0aWNvbiBvY3RpY29uLWJ1ZycsXHJcblx0Y2FsZW5kYXI6ICdvY3RpY29uIG9jdGljb24tY2FsZW5kYXInLFxyXG5cdGNoZWNrOiAnb2N0aWNvbiBvY3RpY29uLWNoZWNrJyxcclxuXHRjaGVja2xpc3Q6ICdvY3RpY29uIG9jdGljb24tY2hlY2tsaXN0JyxcclxuXHQnY2hldnJvbi1kb3duJzogJ29jdGljb24gb2N0aWNvbi1jaGV2cm9uLWRvd24nLFxyXG5cdCdjaGV2cm9uLWxlZnQnOiAnb2N0aWNvbiBvY3RpY29uLWNoZXZyb24tbGVmdCcsXHJcblx0J2NoZXZyb24tcmlnaHQnOiAnb2N0aWNvbiBvY3RpY29uLWNoZXZyb24tcmlnaHQnLFxyXG5cdCdjaGV2cm9uLXVwJzogJ29jdGljb24gb2N0aWNvbi1jaGV2cm9uLXVwJyxcclxuXHQnY2lyY2xlLXNsYXNoJzogJ29jdGljb24gb2N0aWNvbi1jaXJjbGUtc2xhc2gnLFxyXG5cdCdjaXJjdWl0LWJvYXJkJzogJ29jdGljb24gb2N0aWNvbi1jaXJjdWl0LWJvYXJkJyxcclxuXHRjbGlwcHk6ICdvY3RpY29uIG9jdGljb24tY2xpcHB5JyxcclxuXHRjbG9jazogJ29jdGljb24gb2N0aWNvbi1jbG9jaycsXHJcblx0J2Nsb3VkLWRvd25sb2FkJzogJ29jdGljb24gb2N0aWNvbi1jbG91ZC1kb3dubG9hZCcsXHJcblx0J2Nsb3VkLXVwbG9hZCc6ICdvY3RpY29uIG9jdGljb24tY2xvdWQtdXBsb2FkJyxcclxuXHRjb2RlOiAnb2N0aWNvbiBvY3RpY29uLWNvZGUnLFxyXG5cdCdjb2xvci1tb2RlJzogJ29jdGljb24gb2N0aWNvbi1jb2xvci1tb2RlJyxcclxuXHQnY29tbWVudC1hZGQnOiAnb2N0aWNvbiBvY3RpY29uLWNvbW1lbnQtYWRkJyxcclxuXHRjb21tZW50OiAnb2N0aWNvbiBvY3RpY29uLWNvbW1lbnQnLFxyXG5cdCdjb21tZW50LWRpc2N1c3Npb24nOiAnb2N0aWNvbiBvY3RpY29uLWNvbW1lbnQtZGlzY3Vzc2lvbicsXHJcblx0J2NyZWRpdC1jYXJkJzogJ29jdGljb24gb2N0aWNvbi1jcmVkaXQtY2FyZCcsXHJcblx0ZGFzaDogJ29jdGljb24gb2N0aWNvbi1kYXNoJyxcclxuXHRkYXNoYm9hcmQ6ICdvY3RpY29uIG9jdGljb24tZGFzaGJvYXJkJyxcclxuXHRkYXRhYmFzZTogJ29jdGljb24gb2N0aWNvbi1kYXRhYmFzZScsXHJcblx0Y2xvbmU6ICdvY3RpY29uIG9jdGljb24tY2xvbmUnLFxyXG5cdCdkZXNrdG9wLWRvd25sb2FkJzogJ29jdGljb24gb2N0aWNvbi1kZXNrdG9wLWRvd25sb2FkJyxcclxuXHQnZGV2aWNlLWNhbWVyYSc6ICdvY3RpY29uIG9jdGljb24tZGV2aWNlLWNhbWVyYScsXHJcblx0J2RldmljZS1jYW1lcmEtdmlkZW8nOiAnb2N0aWNvbiBvY3RpY29uLWRldmljZS1jYW1lcmEtdmlkZW8nLFxyXG5cdCdkZXZpY2UtZGVza3RvcCc6ICdvY3RpY29uIG9jdGljb24tZGV2aWNlLWRlc2t0b3AnLFxyXG5cdCdkZXZpY2UtbW9iaWxlJzogJ29jdGljb24gb2N0aWNvbi1kZXZpY2UtbW9iaWxlJyxcclxuXHRkaWZmOiAnb2N0aWNvbiBvY3RpY29uLWRpZmYnLFxyXG5cdCdkaWZmLWFkZGVkJzogJ29jdGljb24gb2N0aWNvbi1kaWZmLWFkZGVkJyxcclxuXHQnZGlmZi1pZ25vcmVkJzogJ29jdGljb24gb2N0aWNvbi1kaWZmLWlnbm9yZWQnLFxyXG5cdCdkaWZmLW1vZGlmaWVkJzogJ29jdGljb24gb2N0aWNvbi1kaWZmLW1vZGlmaWVkJyxcclxuXHQnZGlmZi1yZW1vdmVkJzogJ29jdGljb24gb2N0aWNvbi1kaWZmLXJlbW92ZWQnLFxyXG5cdCdkaWZmLXJlbmFtZWQnOiAnb2N0aWNvbiBvY3RpY29uLWRpZmYtcmVuYW1lZCcsXHJcblx0ZWxsaXBzaXM6ICdvY3RpY29uIG9jdGljb24tZWxsaXBzaXMnLFxyXG5cdCdleWUtdW53YXRjaCc6ICdvY3RpY29uIG9jdGljb24tZXllLXVud2F0Y2gnLFxyXG5cdCdleWUtd2F0Y2gnOiAnb2N0aWNvbiBvY3RpY29uLWV5ZS13YXRjaCcsXHJcblx0ZXllOiAnb2N0aWNvbiBvY3RpY29uLWV5ZScsXHJcblx0J2ZpbGUtYmluYXJ5JzogJ29jdGljb24gb2N0aWNvbi1maWxlLWJpbmFyeScsXHJcblx0J2ZpbGUtY29kZSc6ICdvY3RpY29uIG9jdGljb24tZmlsZS1jb2RlJyxcclxuXHQnZmlsZS1kaXJlY3RvcnknOiAnb2N0aWNvbiBvY3RpY29uLWZpbGUtZGlyZWN0b3J5JyxcclxuXHQnZmlsZS1tZWRpYSc6ICdvY3RpY29uIG9jdGljb24tZmlsZS1tZWRpYScsXHJcblx0J2ZpbGUtcGRmJzogJ29jdGljb24gb2N0aWNvbi1maWxlLXBkZicsXHJcblx0J2ZpbGUtc3VibW9kdWxlJzogJ29jdGljb24gb2N0aWNvbi1maWxlLXN1Ym1vZHVsZScsXHJcblx0J2ZpbGUtc3ltbGluay1kaXJlY3RvcnknOiAnb2N0aWNvbiBvY3RpY29uLWZpbGUtc3ltbGluay1kaXJlY3RvcnknLFxyXG5cdCdmaWxlLXN5bWxpbmstZmlsZSc6ICdvY3RpY29uIG9jdGljb24tZmlsZS1zeW1saW5rLWZpbGUnLFxyXG5cdCdmaWxlLXRleHQnOiAnb2N0aWNvbiBvY3RpY29uLWZpbGUtdGV4dCcsXHJcblx0J2ZpbGUtemlwJzogJ29jdGljb24gb2N0aWNvbi1maWxlLXppcCcsXHJcblx0ZmxhbWU6ICdvY3RpY29uIG9jdGljb24tZmxhbWUnLFxyXG5cdGZvbGQ6ICdvY3RpY29uIG9jdGljb24tZm9sZCcsXHJcblx0Z2VhcjogJ29jdGljb24gb2N0aWNvbi1nZWFyJyxcclxuXHRnaWZ0OiAnb2N0aWNvbiBvY3RpY29uLWdpZnQnLFxyXG5cdGdpc3Q6ICdvY3RpY29uIG9jdGljb24tZ2lzdCcsXHJcblx0J2dpc3Qtc2VjcmV0JzogJ29jdGljb24gb2N0aWNvbi1naXN0LXNlY3JldCcsXHJcblx0J2dpdC1icmFuY2gtY3JlYXRlJzogJ29jdGljb24gb2N0aWNvbi1naXQtYnJhbmNoLWNyZWF0ZScsXHJcblx0J2dpdC1icmFuY2gtZGVsZXRlJzogJ29jdGljb24gb2N0aWNvbi1naXQtYnJhbmNoLWRlbGV0ZScsXHJcblx0J2dpdC1icmFuY2gnOiAnb2N0aWNvbiBvY3RpY29uLWdpdC1icmFuY2gnLFxyXG5cdCdnaXQtY29tbWl0JzogJ29jdGljb24gb2N0aWNvbi1naXQtY29tbWl0JyxcclxuXHQnZ2l0LWNvbXBhcmUnOiAnb2N0aWNvbiBvY3RpY29uLWdpdC1jb21wYXJlJyxcclxuXHQnZ2l0LW1lcmdlJzogJ29jdGljb24gb2N0aWNvbi1naXQtbWVyZ2UnLFxyXG5cdCdnaXQtcHVsbC1yZXF1ZXN0LWFiYW5kb25lZCc6ICdvY3RpY29uIG9jdGljb24tZ2l0LXB1bGwtcmVxdWVzdC1hYmFuZG9uZWQnLFxyXG5cdCdnaXQtcHVsbC1yZXF1ZXN0JzogJ29jdGljb24gb2N0aWNvbi1naXQtcHVsbC1yZXF1ZXN0JyxcclxuXHRnbG9iZTogJ29jdGljb24gb2N0aWNvbi1nbG9iZScsXHJcblx0Z3JhcGg6ICdvY3RpY29uIG9jdGljb24tZ3JhcGgnLFxyXG5cdGhlYXJ0OiAnb2N0aWNvbiBvY3RpY29uLWhlYXJ0JyxcclxuXHRoaXN0b3J5OiAnb2N0aWNvbiBvY3RpY29uLWhpc3RvcnknLFxyXG5cdGhvbWU6ICdvY3RpY29uIG9jdGljb24taG9tZScsXHJcblx0J2hvcml6b250YWwtcnVsZSc6ICdvY3RpY29uIG9jdGljb24taG9yaXpvbnRhbC1ydWxlJyxcclxuXHRodWJvdDogJ29jdGljb24gb2N0aWNvbi1odWJvdCcsXHJcblx0aW5ib3g6ICdvY3RpY29uIG9jdGljb24taW5ib3gnLFxyXG5cdGluZm86ICdvY3RpY29uIG9jdGljb24taW5mbycsXHJcblx0J2lzc3VlLWNsb3NlZCc6ICdvY3RpY29uIG9jdGljb24taXNzdWUtY2xvc2VkJyxcclxuXHQnaXNzdWUtb3BlbmVkJzogJ29jdGljb24gb2N0aWNvbi1pc3N1ZS1vcGVuZWQnLFxyXG5cdCdpc3N1ZS1yZW9wZW5lZCc6ICdvY3RpY29uIG9jdGljb24taXNzdWUtcmVvcGVuZWQnLFxyXG5cdGplcnNleTogJ29jdGljb24gb2N0aWNvbi1qZXJzZXknLFxyXG5cdGtleTogJ29jdGljb24gb2N0aWNvbi1rZXknLFxyXG5cdGtleWJvYXJkOiAnb2N0aWNvbiBvY3RpY29uLWtleWJvYXJkJyxcclxuXHRsYXc6ICdvY3RpY29uIG9jdGljb24tbGF3JyxcclxuXHQnbGlnaHQtYnVsYic6ICdvY3RpY29uIG9jdGljb24tbGlnaHQtYnVsYicsXHJcblx0bGluazogJ29jdGljb24gb2N0aWNvbi1saW5rJyxcclxuXHQnbGluay1leHRlcm5hbCc6ICdvY3RpY29uIG9jdGljb24tbGluay1leHRlcm5hbCcsXHJcblx0J2xpc3Qtb3JkZXJlZCc6ICdvY3RpY29uIG9jdGljb24tbGlzdC1vcmRlcmVkJyxcclxuXHQnbGlzdC11bm9yZGVyZWQnOiAnb2N0aWNvbiBvY3RpY29uLWxpc3QtdW5vcmRlcmVkJyxcclxuXHRsb2NhdGlvbjogJ29jdGljb24gb2N0aWNvbi1sb2NhdGlvbicsXHJcblx0J2dpc3QtcHJpdmF0ZSc6ICdvY3RpY29uIG9jdGljb24tZ2lzdC1wcml2YXRlJyxcclxuXHQnbWlycm9yLXByaXZhdGUnOiAnb2N0aWNvbiBvY3RpY29uLW1pcnJvci1wcml2YXRlJyxcclxuXHQnZ2l0LWZvcmstcHJpdmF0ZSc6ICdvY3RpY29uIG9jdGljb24tZ2l0LWZvcmstcHJpdmF0ZScsXHJcblx0bG9jazogJ29jdGljb24gb2N0aWNvbi1sb2NrJyxcclxuXHQnbG9nby1naXRodWInOiAnb2N0aWNvbiBvY3RpY29uLWxvZ28tZ2l0aHViJyxcclxuXHRtYWlsOiAnb2N0aWNvbiBvY3RpY29uLW1haWwnLFxyXG5cdCdtYWlsLXJlYWQnOiAnb2N0aWNvbiBvY3RpY29uLW1haWwtcmVhZCcsXHJcblx0J21haWwtcmVwbHknOiAnb2N0aWNvbiBvY3RpY29uLW1haWwtcmVwbHknLFxyXG5cdCdtYXJrLWdpdGh1Yic6ICdvY3RpY29uIG9jdGljb24tbWFyay1naXRodWInLFxyXG5cdG1hcmtkb3duOiAnb2N0aWNvbiBvY3RpY29uLW1hcmtkb3duJyxcclxuXHRtZWdhcGhvbmU6ICdvY3RpY29uIG9jdGljb24tbWVnYXBob25lJyxcclxuXHRtZW50aW9uOiAnb2N0aWNvbiBvY3RpY29uLW1lbnRpb24nLFxyXG5cdG1pbGVzdG9uZTogJ29jdGljb24gb2N0aWNvbi1taWxlc3RvbmUnLFxyXG5cdCdtaXJyb3ItcHVibGljJzogJ29jdGljb24gb2N0aWNvbi1taXJyb3ItcHVibGljJyxcclxuXHRtaXJyb3I6ICdvY3RpY29uIG9jdGljb24tbWlycm9yJyxcclxuXHQnbW9ydGFyLWJvYXJkJzogJ29jdGljb24gb2N0aWNvbi1tb3J0YXItYm9hcmQnLFxyXG5cdG11dGU6ICdvY3RpY29uIG9jdGljb24tbXV0ZScsXHJcblx0J25vLW5ld2xpbmUnOiAnb2N0aWNvbiBvY3RpY29uLW5vLW5ld2xpbmUnLFxyXG5cdG9jdG9mYWNlOiAnb2N0aWNvbiBvY3RpY29uLW9jdG9mYWNlJyxcclxuXHRvcmdhbml6YXRpb246ICdvY3RpY29uIG9jdGljb24tb3JnYW5pemF0aW9uJyxcclxuXHRwYWNrYWdlOiAnb2N0aWNvbiBvY3RpY29uLXBhY2thZ2UnLFxyXG5cdHBhaW50Y2FuOiAnb2N0aWNvbiBvY3RpY29uLXBhaW50Y2FuJyxcclxuXHRwZW5jaWw6ICdvY3RpY29uIG9jdGljb24tcGVuY2lsJyxcclxuXHQncGVyc29uLWFkZCc6ICdvY3RpY29uIG9jdGljb24tcGVyc29uLWFkZCcsXHJcblx0J3BlcnNvbi1mb2xsb3cnOiAnb2N0aWNvbiBvY3RpY29uLXBlcnNvbi1mb2xsb3cnLFxyXG5cdHBlcnNvbjogJ29jdGljb24gb2N0aWNvbi1wZXJzb24nLFxyXG5cdHBpbjogJ29jdGljb24gb2N0aWNvbi1waW4nLFxyXG5cdHBsdWc6ICdvY3RpY29uIG9jdGljb24tcGx1ZycsXHJcblx0J3JlcG8tY3JlYXRlJzogJ29jdGljb24gb2N0aWNvbi1yZXBvLWNyZWF0ZScsXHJcblx0J2dpc3QtbmV3JzogJ29jdGljb24gb2N0aWNvbi1naXN0LW5ldycsXHJcblx0J2ZpbGUtZGlyZWN0b3J5LWNyZWF0ZSc6ICdvY3RpY29uIG9jdGljb24tZmlsZS1kaXJlY3RvcnktY3JlYXRlJyxcclxuXHQnZmlsZS1hZGQnOiAnb2N0aWNvbiBvY3RpY29uLWZpbGUtYWRkJyxcclxuXHRwbHVzOiAnb2N0aWNvbiBvY3RpY29uLXBsdXMnLFxyXG5cdCdwcmltaXRpdmUtZG90JzogJ29jdGljb24gb2N0aWNvbi1wcmltaXRpdmUtZG90JyxcclxuXHQncHJpbWl0aXZlLXNxdWFyZSc6ICdvY3RpY29uIG9jdGljb24tcHJpbWl0aXZlLXNxdWFyZScsXHJcblx0cHVsc2U6ICdvY3RpY29uIG9jdGljb24tcHVsc2UnLFxyXG5cdHF1ZXN0aW9uOiAnb2N0aWNvbiBvY3RpY29uLXF1ZXN0aW9uJyxcclxuXHRxdW90ZTogJ29jdGljb24gb2N0aWNvbi1xdW90ZScsXHJcblx0J3JhZGlvLXRvd2VyJzogJ29jdGljb24gb2N0aWNvbi1yYWRpby10b3dlcicsXHJcblx0J3JlcG8tZGVsZXRlJzogJ29jdGljb24gb2N0aWNvbi1yZXBvLWRlbGV0ZScsXHJcblx0cmVwbzogJ29jdGljb24gb2N0aWNvbi1yZXBvJyxcclxuXHQncmVwby1jbG9uZSc6ICdvY3RpY29uIG9jdGljb24tcmVwby1jbG9uZScsXHJcblx0J3JlcG8tZm9yY2UtcHVzaCc6ICdvY3RpY29uIG9jdGljb24tcmVwby1mb3JjZS1wdXNoJyxcclxuXHQnZ2lzdC1mb3JrJzogJ29jdGljb24gb2N0aWNvbi1naXN0LWZvcmsnLFxyXG5cdCdyZXBvLWZvcmtlZCc6ICdvY3RpY29uIG9jdGljb24tcmVwby1mb3JrZWQnLFxyXG5cdCdyZXBvLXB1bGwnOiAnb2N0aWNvbiBvY3RpY29uLXJlcG8tcHVsbCcsXHJcblx0J3JlcG8tcHVzaCc6ICdvY3RpY29uIG9jdGljb24tcmVwby1wdXNoJyxcclxuXHRyb2NrZXQ6ICdvY3RpY29uIG9jdGljb24tcm9ja2V0JyxcclxuXHRyc3M6ICdvY3RpY29uIG9jdGljb24tcnNzJyxcclxuXHRydWJ5OiAnb2N0aWNvbiBvY3RpY29uLXJ1YnknLFxyXG5cdCdzY3JlZW4tZnVsbCc6ICdvY3RpY29uIG9jdGljb24tc2NyZWVuLWZ1bGwnLFxyXG5cdCdzY3JlZW4tbm9ybWFsJzogJ29jdGljb24gb2N0aWNvbi1zY3JlZW4tbm9ybWFsJyxcclxuXHQnc2VhcmNoLXNhdmUnOiAnb2N0aWNvbiBvY3RpY29uLXNlYXJjaC1zYXZlJyxcclxuXHRzZWFyY2g6ICdvY3RpY29uIG9jdGljb24tc2VhcmNoJyxcclxuXHRzZXJ2ZXI6ICdvY3RpY29uIG9jdGljb24tc2VydmVyJyxcclxuXHRzZXR0aW5nczogJ29jdGljb24gb2N0aWNvbi1zZXR0aW5ncycsXHJcblx0c2hpZWxkOiAnb2N0aWNvbiBvY3RpY29uLXNoaWVsZCcsXHJcblx0J2xvZy1pbic6ICdvY3RpY29uIG9jdGljb24tbG9nLWluJyxcclxuXHQnc2lnbi1pbic6ICdvY3RpY29uIG9jdGljb24tc2lnbi1pbicsXHJcblx0J2xvZy1vdXQnOiAnb2N0aWNvbiBvY3RpY29uLWxvZy1vdXQnLFxyXG5cdCdzaWduLW91dCc6ICdvY3RpY29uIG9jdGljb24tc2lnbi1vdXQnLFxyXG5cdHNxdWlycmVsOiAnb2N0aWNvbiBvY3RpY29uLXNxdWlycmVsJyxcclxuXHQnc3Rhci1hZGQnOiAnb2N0aWNvbiBvY3RpY29uLXN0YXItYWRkJyxcclxuXHQnc3Rhci1kZWxldGUnOiAnb2N0aWNvbiBvY3RpY29uLXN0YXItZGVsZXRlJyxcclxuXHRzdGFyOiAnb2N0aWNvbiBvY3RpY29uLXN0YXInLFxyXG5cdHN0b3A6ICdvY3RpY29uIG9jdGljb24tc3RvcCcsXHJcblx0J3JlcG8tc3luYyc6ICdvY3RpY29uIG9jdGljb24tcmVwby1zeW5jJyxcclxuXHRzeW5jOiAnb2N0aWNvbiBvY3RpY29uLXN5bmMnLFxyXG5cdCd0YWctcmVtb3ZlJzogJ29jdGljb24gb2N0aWNvbi10YWctcmVtb3ZlJyxcclxuXHQndGFnLWFkZCc6ICdvY3RpY29uIG9jdGljb24tdGFnLWFkZCcsXHJcblx0dGFnOiAnb2N0aWNvbiBvY3RpY29uLXRhZycsXHJcblx0dGVsZXNjb3BlOiAnb2N0aWNvbiBvY3RpY29uLXRlbGVzY29wZScsXHJcblx0dGVybWluYWw6ICdvY3RpY29uIG9jdGljb24tdGVybWluYWwnLFxyXG5cdCd0aHJlZS1iYXJzJzogJ29jdGljb24gb2N0aWNvbi10aHJlZS1iYXJzJyxcclxuXHR0aHVtYnNkb3duOiAnb2N0aWNvbiBvY3RpY29uLXRodW1ic2Rvd24nLFxyXG5cdHRodW1ic3VwOiAnb2N0aWNvbiBvY3RpY29uLXRodW1ic3VwJyxcclxuXHR0b29sczogJ29jdGljb24gb2N0aWNvbi10b29scycsXHJcblx0dHJhc2hjYW46ICdvY3RpY29uIG9jdGljb24tdHJhc2hjYW4nLFxyXG5cdCd0cmlhbmdsZS1kb3duJzogJ29jdGljb24gb2N0aWNvbi10cmlhbmdsZS1kb3duJyxcclxuXHQndHJpYW5nbGUtbGVmdCc6ICdvY3RpY29uIG9jdGljb24tdHJpYW5nbGUtbGVmdCcsXHJcblx0J3RyaWFuZ2xlLXJpZ2h0JzogJ29jdGljb24gb2N0aWNvbi10cmlhbmdsZS1yaWdodCcsXHJcblx0J3RyaWFuZ2xlLXVwJzogJ29jdGljb24gb2N0aWNvbi10cmlhbmdsZS11cCcsXHJcblx0dW5mb2xkOiAnb2N0aWNvbiBvY3RpY29uLXVuZm9sZCcsXHJcblx0dW5tdXRlOiAnb2N0aWNvbiBvY3RpY29uLXVubXV0ZScsXHJcblx0dmVyc2lvbnM6ICdvY3RpY29uIG9jdGljb24tdmVyc2lvbnMnLFxyXG5cdHdhdGNoOiAnb2N0aWNvbiBvY3RpY29uLXdhdGNoJyxcclxuXHQncmVtb3ZlLWNsb3NlJzogJ29jdGljb24gb2N0aWNvbi1yZW1vdmUtY2xvc2UnLFxyXG5cdHg6ICdvY3RpY29uIG9jdGljb24teCcsXHJcblx0emFwOiAnb2N0aWNvbiBvY3RpY29uLXphcCcsXHJcbn07XHJcbiIsImltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRzbWFsbDogdGhlbWUuZ2x5cGguc2l6ZS5zbWFsbCxcclxuXHRtZWRpdW06IHRoZW1lLmdseXBoLnNpemUubWVkaXVtLFxyXG5cdGxhcmdlOiB0aGVtZS5nbHlwaC5zaXplLmxhcmdlLFxyXG59O1xyXG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gR2x5cGhcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5pbXBvcnQgY29sb3JzIGZyb20gJy4vY29sb3JzJztcclxuaW1wb3J0IHNpemVzIGZyb20gJy4vc2l6ZXMnO1xyXG5cclxuLy8gUHJlcGFyZSB2YXJpYW50c1xyXG5jb25zdCBjb2xvclZhcmlhbnRzID0ge307XHJcbk9iamVjdC5rZXlzKGNvbG9ycykuZm9yRWFjaChjb2xvciA9PiB7XHJcblx0Y29sb3JWYXJpYW50c1tgY29sb3JfXyR7Y29sb3J9YF0gPSB7XHJcblx0XHRjb2xvcjogY29sb3JzW2NvbG9yXSxcclxuXHR9O1xyXG59KTtcclxuXHJcbi8vIFByZXBhcmUgc2l6ZXNcclxuY29uc3Qgc2l6ZVZhcmlhbnRzID0ge307XHJcbk9iamVjdC5rZXlzKHNpemVzKS5mb3JFYWNoKHNpemUgPT4ge1xyXG5cdHNpemVWYXJpYW50c1tgc2l6ZV9fJHtzaXplfWBdID0ge1xyXG5cdFx0Zm9udFNpemU6IHNpemVzW3NpemVdLFxyXG5cdH07XHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0Z2x5cGg6IHt9LFxyXG5cclxuXHQvLyBDb2xvcnNcclxuXHQuLi5jb2xvclZhcmlhbnRzLFxyXG5cclxuXHQvLyBTaXplc1xyXG5cdC4uLnNpemVWYXJpYW50cyxcclxufTtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcblxyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxuY29uc3QgV0lEVEhTID0ge1xyXG5cdCdvbmUtd2hvbGUnOiAnMTAwJScsXHJcblx0J29uZS1oYWxmJzogJzUwJScsXHJcblx0J29uZS10aGlyZCc6ICczMy4zMyUnLFxyXG5cdCd0d28tdGhpcmRzJzogJzY2LjY2JScsXHJcblx0J29uZS1xdWFydGVyJzogJzI1JScsXHJcblx0J3RocmVlLXF1YXJ0ZXJzJzogJzc1JScsXHJcblxyXG5cdCdvbmUtZmlmdGgnOiAnMjAlJyxcclxuXHQndHdvLWZpZnRocyc6ICc0MCUnLFxyXG5cdCd0aHJlZS1maWZ0aHMnOiAnNjAlJyxcclxuXHQnZm91ci1maWZ0aHMnOiAnODAlJyxcclxuXHJcblx0J29uZS1zaXh0aCc6ICcxNi42NiUnLFxyXG5cdCdmaXZlLXNpeHRocyc6ICc4My4zMyUnLFxyXG59O1xyXG5cclxuY29uc3QgR3JpZENvbCA9IChwcm9wcywgY29udGV4dCkgPT4ge1xyXG5cdGNvbnN0IGd1dHRlciA9IHByb3BzLmd1dHRlciB8fCBjb250ZXh0Lmd1dHRlcjtcclxuXHRjb25zdCB4c21hbGwgPSBwcm9wcy54c21hbGwgfHwgY29udGV4dC54c21hbGw7XHJcblx0Y29uc3Qgc21hbGwgPSBwcm9wcy5zbWFsbCB8fCBjb250ZXh0LnNtYWxsO1xyXG5cdGNvbnN0IG1lZGl1bSA9IHByb3BzLm1lZGl1bSB8fCBjb250ZXh0Lm1lZGl1bTtcclxuXHRjb25zdCBsYXJnZSA9IHByb3BzLmxhcmdlIHx8IGNvbnRleHQubGFyZ2U7XHJcblxyXG5cdGNvbnN0IGNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdGNsYXNzZXNbJ3hzbWFsbC0nICsgeHNtYWxsXSxcclxuXHRcdGNsYXNzZXNbJ3NtYWxsLScgKyBzbWFsbF0sXHJcblx0XHRjbGFzc2VzWydtZWRpdW0tJyArIG1lZGl1bV0sXHJcblx0XHRjbGFzc2VzWydsYXJnZS0nICsgbGFyZ2VdXHJcblx0KTtcclxuXHJcblx0Y29uc3QgY29tcG9uZW50Q2xhc3NOYW1lID0gYCR7Y2xhc3NOYW1lfSR7cHJvcHMuY2xhc3NOYW1lID8gKCcgJyArIHByb3BzLmNsYXNzTmFtZSkgOiAnJ31gO1xyXG5cdGNvbnN0IGNvbXBvbmVudFN0eWxlcyA9IGd1dHRlciA/IHtcclxuXHRcdHBhZGRpbmdMZWZ0OiBndXR0ZXIgLyAyLFxyXG5cdFx0cGFkZGluZ1JpZ2h0OiBndXR0ZXIgLyAyLFxyXG5cdH0gOiB7fTtcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXYgY2xhc3NOYW1lPXtjb21wb25lbnRDbGFzc05hbWV9IHN0eWxlPXtjb21wb25lbnRTdHlsZXN9PlxyXG5cdFx0XHR7cHJvcHMuY2hpbGRyZW59XHJcblx0XHQ8L2Rpdj5cclxuXHQpO1xyXG59O1xyXG5cclxuR3JpZENvbC5jb250ZXh0VHlwZXMgPSB7XHJcblx0Z3V0dGVyOiBQcm9wVHlwZXMubnVtYmVyLFxyXG5cdGxhcmdlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdG1lZGl1bTogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRzbWFsbDogUHJvcFR5cGVzLnN0cmluZyxcclxuXHR4c21hbGw6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcblxyXG5HcmlkQ29sLnByb3BUeXBlcyA9IHtcclxuXHRndXR0ZXI6IFByb3BUeXBlcy5udW1iZXIsXHJcblx0bGFyZ2U6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0bWVkaXVtOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHNtYWxsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHhzbWFsbDogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0Li4ucHJlcGFyZVdpZHRocygneHNtYWxsJywgV0lEVEhTKSxcclxuXHQuLi5wcmVwYXJlV2lkdGhzKCdzbWFsbCcsIFdJRFRIUyksXHJcblx0Li4ucHJlcGFyZVdpZHRocygnbWVkaXVtJywgV0lEVEhTKSxcclxuXHQuLi5wcmVwYXJlV2lkdGhzKCdsYXJnZScsIFdJRFRIUyksXHJcbn07XHJcblxyXG4vKiBlc2xpbnQtZGlzYWJsZSBndWFyZC1mb3ItaW4gKi9cclxuZnVuY3Rpb24gcHJlcGFyZVdpZHRocyAocHJlZml4LCBvYmopIHtcclxuXHRsZXQgY2xhc3NlcyA9IHt9O1xyXG5cdHN3aXRjaCAocHJlZml4KSB7XHJcblx0XHRjYXNlICdzbWFsbCc6XHJcblx0XHRcdGZvciAobGV0IHByb3AgaW4gb2JqKSB7XHJcblx0XHRcdFx0Y2xhc3Nlc1twcmVmaXggKyAnLScgKyBwcm9wXSA9IHtcclxuXHRcdFx0XHRcdFtgQG1lZGlhIChtaW4td2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC50YWJsZXRQb3J0cmFpdE1pbn0pYF06IHtcclxuXHRcdFx0XHRcdFx0d2lkdGg6IG9ialtwcm9wXSxcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cdFx0XHRicmVhaztcclxuXHRcdGNhc2UgJ21lZGl1bSc6XHJcblx0XHRcdGZvciAobGV0IHByb3AgaW4gb2JqKSB7XHJcblx0XHRcdFx0Y2xhc3Nlc1twcmVmaXggKyAnLScgKyBwcm9wXSA9IHtcclxuXHRcdFx0XHRcdFtgQG1lZGlhIChtaW4td2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC50YWJsZXRMYW5kc2NhcGVNaW59KWBdOiB7XHJcblx0XHRcdFx0XHRcdHdpZHRoOiBvYmpbcHJvcF0sXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICdsYXJnZSc6XHJcblx0XHRcdGZvciAobGV0IHByb3AgaW4gb2JqKSB7XHJcblx0XHRcdFx0Y2xhc3Nlc1twcmVmaXggKyAnLScgKyBwcm9wXSA9IHtcclxuXHRcdFx0XHRcdFtgQG1lZGlhIChtaW4td2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC5kZXNrdG9wTWlufSlgXToge1xyXG5cdFx0XHRcdFx0XHR3aWR0aDogb2JqW3Byb3BdLFxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0Zm9yIChsZXQgcHJvcCBpbiBvYmopIHtcclxuXHRcdFx0XHRjbGFzc2VzW3ByZWZpeCArICctJyArIHByb3BdID0ge1xyXG5cdFx0XHRcdFx0d2lkdGg6IG9ialtwcm9wXSxcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNsYXNzZXM7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEdyaWRDb2w7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuXHJcbmNsYXNzIEdyaWRSb3cgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cdGdldENoaWxkQ29udGV4dCAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRndXR0ZXI6IHRoaXMucHJvcHMuZ3V0dGVyLFxyXG5cdFx0XHR4c21hbGw6IHRoaXMucHJvcHMueHNtYWxsLFxyXG5cdFx0XHRzbWFsbDogdGhpcy5wcm9wcy5zbWFsbCxcclxuXHRcdFx0bWVkaXVtOiB0aGlzLnByb3BzLm1lZGl1bSxcclxuXHRcdFx0bGFyZ2U6IHRoaXMucHJvcHMubGFyZ2UsXHJcblx0XHR9O1xyXG5cdH1cclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBndXR0ZXIsIHN0eWxlcyA9IHt9IH0gPSB0aGlzLnByb3BzO1xyXG5cclxuXHRcdGNvbnN0IGNvbXBvbmVudENsYXNzTmFtZSA9IGAke2NzcyhjbGFzc2VzLmdyaWQpfSR7Y2xhc3NOYW1lID8gKCcgJyArIGNsYXNzTmFtZSkgOiAnJ31gO1xyXG5cdFx0Y29uc3QgY29tcG9uZW50U3R5bGVzID0gT2JqZWN0LmFzc2lnbihzdHlsZXMsIHtcclxuXHRcdFx0bWFyZ2luTGVmdDogZ3V0dGVyIC8gLTIsXHJcblx0XHRcdG1hcmdpblJpZ2h0OiBndXR0ZXIgLyAtMixcclxuXHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjb21wb25lbnRDbGFzc05hbWV9IHN0eWxlPXtjb21wb25lbnRTdHlsZXN9PlxyXG5cdFx0XHRcdHtjaGlsZHJlbn1cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH1cclxufTtcclxuXHJcbkdyaWRSb3cuY2hpbGRDb250ZXh0VHlwZXMgPSB7XHJcblx0Z3V0dGVyOiBQcm9wVHlwZXMubnVtYmVyLFxyXG5cdHhzbWFsbDogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRzbWFsbDogUHJvcFR5cGVzLnN0cmluZyxcclxuXHRtZWRpdW06IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0bGFyZ2U6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcblxyXG5HcmlkUm93LnByb3BUeXBlcyA9IHtcclxuXHRndXR0ZXI6IFByb3BUeXBlcy5udW1iZXIsXHJcblx0bGFyZ2U6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0bWVkaXVtOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHNtYWxsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHhzbWFsbDogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbkdyaWRSb3cuZGVmYXVsdFByb3BzID0ge1xyXG5cdGd1dHRlcjogMCxcclxuXHR4c21hbGw6ICdvbmUtd2hvbGUnLFxyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRncmlkOiB7XHJcblx0XHRkaXNwbGF5OiAnZmxleCcsXHJcblx0XHRmbGV4V3JhcDogJ3dyYXAnLFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEdyaWRSb3c7XHJcbiIsImltcG9ydCBDb2wgZnJvbSAnLi4vR3JpZENvbCc7XHJcbmltcG9ydCBSb3cgZnJvbSAnLi4vR3JpZFJvdyc7XHJcblxyXG5leHBvcnQgeyBDb2wsIFJvdyB9O1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcclxuXHJcbi8vIE5PVEU6IElubGluZSBHcm91cCBTZWN0aW9uIGFjY2VwdHMgYSBzaW5nbGUgY2hpbGRcclxuXHJcbmZ1bmN0aW9uIElubGluZUdyb3VwU2VjdGlvbiAoe1xyXG5cdGFjdGl2ZSxcclxuXHRhcGhyb2RpdGVTdHlsZXMsXHJcblx0Y2hpbGRyZW4sXHJcblx0Y2xhc3NOYW1lLFxyXG5cdGNvbnRpZ3VvdXMsXHJcblx0Z3JvdyxcclxuXHRwb3NpdGlvbixcclxuXHQuLi5wcm9wc1xyXG59KSB7XHJcblx0Ly8gZXZhbHVhdGUgcG9zaXRpb25cclxuXHRjb25zdCBzZXBhcmF0ZSA9IHBvc2l0aW9uID09PSAnbGFzdCcgfHwgcG9zaXRpb24gPT09ICdtaWRkbGUnO1xyXG5cclxuXHQvLyBBIGBjb250aWd1b3VzYCBzZWN0aW9uIG11c3QgbWFuaXB1bGF0ZSBpdCdzIGNoaWxkIGRpcmVjdGx5XHJcblx0Ly8gQSBzZXBhcmF0ZSAoZGVmYXVsdCkgc2VjdGlvbiBqdXN0IHdyYXBzIHRoZSBjaGlsZFxyXG5cdHJldHVybiBjb250aWd1b3VzID8gY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XHJcblx0XHRhcGhyb2RpdGVTdHlsZXM6IFtcclxuXHRcdFx0Y2xhc3Nlcy5jb250aWd1b3VzLFxyXG5cdFx0XHRjbGFzc2VzWydjb250aWd1b3VzX18nICsgcG9zaXRpb25dLFxyXG5cdFx0XHRhY3RpdmUgPyBjbGFzc2VzLmFjdGl2ZSA6IG51bGwsXHJcblx0XHRcdGdyb3cgPyBjbGFzc2VzLmdyb3cgOiBudWxsLFxyXG5cdFx0XHRhcGhyb2RpdGVTdHlsZXMsXHJcblx0XHRdLFxyXG5cdFx0Li4ucHJvcHMsXHJcblx0fSkgOiAoXHJcblx0XHQ8ZGl2IGNsYXNzTmFtZT17Y3NzKFxyXG5cdFx0XHQhIWdyb3cgJiYgY2xhc3Nlcy5ncm93LFxyXG5cdFx0XHQhIXNlcGFyYXRlICYmIGNsYXNzZXMuc2VwYXJhdGUsXHJcblx0XHRcdGFwaHJvZGl0ZVN0eWxlc1xyXG5cdFx0KX0gey4uLnByb3BzfT5cclxuXHRcdFx0e2NoaWxkcmVufVxyXG5cdFx0PC9kaXY+XHJcblx0KTtcclxufTtcclxuXHJcbklubGluZUdyb3VwU2VjdGlvbi5wcm9wVHlwZXMgPSB7XHJcblx0YWN0aXZlOiBQcm9wVHlwZXMuYm9vbCwgLy8gYnV0dG9ucyBvbmx5XHJcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsXHJcblx0Y29udGlndW91czogUHJvcFR5cGVzLmJvb2wsXHJcblx0Z3JvdzogUHJvcFR5cGVzLmJvb2wsXHJcblx0cG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2ZpcnN0JywgJ2xhc3QnLCAnbWlkZGxlJywgJ29ubHknXSksXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IElubGluZUdyb3VwU2VjdGlvbjtcclxuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIElubGluZSBHcm91cDogU2VjdGlvblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbi8vIFRha2VzIG9ubHkgRm9ybUlucHV0IGFuZCBCdXR0b24gYXMgY2hpbGRyZW4sIHJlbmRlcmluZyB0aGVtIGFzIGFcclxuLy8gdGlkeSBpbmxpbmUgYXJyYXlcclxuXHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHQvLyBwdWxsIGFjdGl2ZSBlbGVtZW50cyB1cFxyXG5cdGFjdGl2ZToge1xyXG5cdFx0cG9zaXRpb246ICdyZWxhdGl2ZScsXHJcblx0fSxcclxuXHJcblx0Ly8gc3RyZXRjaCB0byBmaWxsIGF2YWlsYWJsZSB3aWR0aFxyXG5cdGdyb3c6IHtcclxuXHRcdGZsZXg6ICcxIDEgMCcsXHJcblx0fSxcclxuXHJcblx0Ly8gc2VwYXJhdGUgYXBwbGljYWJsZSBub24tY29udGlndW91cyBlbGVtZW50c1xyXG5cdHNlcGFyYXRlOiB7XHJcblx0XHRwYWRkaW5nTGVmdDogJzAuNzVlbScsXHJcblx0fSxcclxuXHJcblx0Ly8gQ29udGlndW91czogbWFuaXB1bGF0ZSBjaGlsZHJlbiBkaXJlY3RseVxyXG5cclxuXHQvLyBwdWxsIGZvY3VzZWQgY29udGlndW91cyBlbGVtZW50cyB1cFxyXG5cdGNvbnRpZ3VvdXM6IHtcclxuXHRcdCc6Zm9jdXMnOiB7XHJcblx0XHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxyXG5cdFx0XHR6SW5kZXg6IDEsXHJcblx0XHR9LFxyXG5cdH0sXHJcblxyXG5cdC8vIHBvc2l0aW9uXHJcblx0Y29udGlndW91c19fbWlkZGxlOiB7XHJcblx0XHRib3JkZXJSYWRpdXM6IDAsXHJcblx0XHRtYXJnaW5MZWZ0OiB0aGVtZS5idXR0b24uYm9yZGVyV2lkdGggKiAtMSxcclxuXHR9LFxyXG5cdGNvbnRpZ3VvdXNfX2ZpcnN0OiB7XHJcblx0XHRib3JkZXJCb3R0b21SaWdodFJhZGl1czogJzAgIWltcG9ydGFudCcsXHJcblx0XHRib3JkZXJUb3BSaWdodFJhZGl1czogJzAgIWltcG9ydGFudCcsXHJcblx0fSxcclxuXHRjb250aWd1b3VzX19sYXN0OiB7XHJcblx0XHRib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAnMCAhaW1wb3J0YW50JyxcclxuXHRcdGJvcmRlclRvcExlZnRSYWRpdXM6ICcwICFpbXBvcnRhbnQnLFxyXG5cdFx0bWFyZ2luTGVmdDogdGhlbWUuYnV0dG9uLmJvcmRlcldpZHRoICogLTEsXHJcblx0fSxcclxufTtcclxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCwgQ2hpbGRyZW4sIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuXHJcbi8vIE5PVEU6IG9ubHkgYWNjZXB0cyBJbmxpbmVHcm91cFNlY3Rpb24gYXMgYSBzaW5nbGUgY2hpbGRcclxuXHJcbmZ1bmN0aW9uIElubGluZUdyb3VwICh7XHJcblx0YXBocm9kaXRlU3R5bGVzLFxyXG5cdGJsb2NrLFxyXG5cdGNoaWxkcmVuLFxyXG5cdGNsYXNzTmFtZSxcclxuXHRjb21wb25lbnQ6IENvbXBvbmVudCxcclxuXHRjb250aWd1b3VzLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHQvLyBwcmVwYXJlIGdyb3VwIGNsYXNzTmFtZVxyXG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdGNsYXNzZXMuZ3JvdXAsXHJcblx0XHQhIWJsb2NrICYmIGNsYXNzZXMuYmxvY2ssXHJcblx0XHRhcGhyb2RpdGVTdHlsZXNcclxuXHQpO1xyXG5cdGlmIChjbGFzc05hbWUpIHtcclxuXHRcdHByb3BzLmNsYXNzTmFtZSArPSAoJyAnICsgY2xhc3NOYW1lKTtcclxuXHR9XHJcblxyXG5cdC8vIGNvbnZlcnQgY2hpbGRyZW4gdG8gYW4gYXJyYXkgYW5kIGZpbHRlciBvdXQgZmFsc2V5IHZhbHVlc1xyXG5cdGNvbnN0IGJ1dHRvbnMgPSBDaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5maWx0ZXIoaSA9PiBpKTtcclxuXHJcblx0Ly8gbm9ybWFsaXplIHRoZSBjb3VudFxyXG5cdGNvbnN0IGNvdW50ID0gYnV0dG9ucy5sZW5ndGggLSAxO1xyXG5cclxuXHQvLyBjbG9uZSBjaGlsZHJlbiBhbmQgYXBwbHkgY2xhc3NOYW1lcyB0aGF0IGFwaHJvZGl0ZSBjYW4gdGFyZ2V0XHJcblx0cHJvcHMuY2hpbGRyZW4gPSBidXR0b25zLm1hcCgoYywgaWR4KSA9PiB7XHJcblx0XHRpZiAoIWMpIHJldHVybiBudWxsO1xyXG5cclxuXHRcdGNvbnN0IGlzT25seUNoaWxkID0gIWNvdW50O1xyXG5cdFx0Y29uc3QgaXNGaXJzdENoaWxkID0gIWlzT25seUNoaWxkICYmIGlkeCA9PT0gMDtcclxuXHRcdGNvbnN0IGlzTGFzdENoaWxkID0gIWlzT25seUNoaWxkICYmIGlkeCA9PT0gY291bnQ7XHJcblx0XHRjb25zdCBpc01pZGRsZUNoaWxkID0gIWlzT25seUNoaWxkICYmICFpc0ZpcnN0Q2hpbGQgJiYgIWlzTGFzdENoaWxkO1xyXG5cclxuXHRcdGxldCBwb3NpdGlvbjtcclxuXHRcdGlmIChpc09ubHlDaGlsZCkgcG9zaXRpb24gPSAnb25seSc7XHJcblx0XHRpZiAoaXNGaXJzdENoaWxkKSBwb3NpdGlvbiA9ICdmaXJzdCc7XHJcblx0XHRpZiAoaXNMYXN0Q2hpbGQpIHBvc2l0aW9uID0gJ2xhc3QnO1xyXG5cdFx0aWYgKGlzTWlkZGxlQ2hpbGQpIHBvc2l0aW9uID0gJ21pZGRsZSc7XHJcblxyXG5cdFx0cmV0dXJuIGNsb25lRWxlbWVudChjLCB7XHJcblx0XHRcdGNvbnRpZ3VvdXM6IGNvbnRpZ3VvdXMsXHJcblx0XHRcdHBvc2l0aW9uLFxyXG5cdFx0fSk7XHJcblx0fSk7XHJcblxyXG5cdHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz47XHJcbn07XHJcblxyXG5JbmxpbmVHcm91cC5wcm9wVHlwZXMgPSB7XHJcblx0YXBocm9kaXRlU3R5bGVzOiBQcm9wVHlwZXMuc2hhcGUoe1xyXG5cdFx0X2RlZmluaXRpb246IFByb3BUeXBlcy5vYmplY3QsXHJcblx0XHRfbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcclxuXHR9KSxcclxuXHRibG9jazogUHJvcFR5cGVzLmJvb2wsXHJcblx0Y29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5mdW5jLFxyXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcclxuXHRdKSxcclxuXHRjb250aWd1b3VzOiBQcm9wVHlwZXMuYm9vbCxcclxufTtcclxuSW5saW5lR3JvdXAuZGVmYXVsdFByb3BzID0ge1xyXG5cdGNvbXBvbmVudDogJ2RpdicsXHJcbn07XHJcblxyXG5jb25zdCBjbGFzc2VzID0ge1xyXG5cdGdyb3VwOiB7XHJcblx0XHRkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxyXG5cdH0sXHJcblx0YmxvY2s6IHtcclxuXHRcdGRpc3BsYXk6ICdmbGV4JyxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBJbmxpbmVHcm91cDtcclxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9zdHlsZXMnO1xyXG5cclxuZnVuY3Rpb24gTGFiZWxsZWRDb250cm9sICh7XHJcblx0Y2xhc3NOYW1lLFxyXG5cdGlubGluZSxcclxuXHRsYWJlbCxcclxuXHR0aXRsZSxcclxuXHQuLi5wcm9wc1xyXG59KSB7XHJcblx0Y29uc3QgbGFiZWxDbGFzc05hbWUgPSBjc3MoXHJcblx0XHRjbGFzc2VzLndyYXBwZXIsXHJcblx0XHRpbmxpbmUgJiYgY2xhc3Nlcy53cmFwcGVyX19pbmxpbmUsXHJcblx0XHRjbGFzc05hbWVcclxuXHQpO1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PGxhYmVsIHRpdGxlPXt0aXRsZX0gY2xhc3NOYW1lPXtsYWJlbENsYXNzTmFtZX0+XHJcblx0XHRcdDxpbnB1dCB7Li4ucHJvcHN9IGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuY29udHJvbCl9IC8+XHJcblx0XHRcdDxzcGFuIGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMubGFiZWwpfT57bGFiZWx9PC9zcGFuPlxyXG5cdFx0PC9sYWJlbD5cclxuXHQpO1xyXG59O1xyXG5cclxuTGFiZWxsZWRDb250cm9sLnByb3BUeXBlcyA9IHtcclxuXHRpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxyXG5cdHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ2NoZWNrYm94JywgJ3JhZGlvJ10pLmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExhYmVsbGVkQ29udHJvbDtcclxuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEFsZXJ0XHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuLyogZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSAqL1xyXG5cclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdHdyYXBwZXI6IHtcclxuXHRcdGRpc3BsYXk6ICdibG9jaycsXHJcblx0XHRoZWlnaHQ6IHRoZW1lLmlucHV0LmhlaWdodCxcclxuXHRcdGxpbmVIZWlnaHQ6IHRoZW1lLmlucHV0LmxpbmVIZWlnaHQsXHJcblx0fSxcclxuXHR3cmFwcGVyX19pbmxpbmU6IHtcclxuXHRcdGRpc3BsYXk6ICdpbmxpbmUnLFxyXG5cdH0sXHJcblxyXG5cdC8vIGNoZWNrYm94IG9yIHJhZGlvXHJcblx0Y29udHJvbDoge1xyXG5cdFx0bWFyZ2luUmlnaHQ6ICcwLjVlbScsXHJcblx0fSxcclxufTtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9CdXR0b24nO1xyXG5pbXBvcnQgU3Bpbm5lciBmcm9tICcuLi9TcGlubmVyJztcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbmZ1bmN0aW9uIExvYWRpbmdCdXR0b24gKHsgY2hpbGRyZW4sIGxvYWRpbmcsIC4uLnByb3BzIH0pIHtcclxuXHQvLyBkZXRlcm1pbmUgdGhlIGNvcnJlY3QgdmFyaWFudCBmb3IgdGhlIHNwaW5uZXIsXHJcblx0Ly8gZmlsbCBpcyB0aGUgZGVmYXVsdCB2YXJpYW50IG9uIEJ1dHRvblxyXG5cdGNvbnN0IHZhcmlhbnQgPSBwcm9wcy52YXJpYW50IHx8ICdmaWxsJztcclxuXHJcblx0Ly8gZGV0ZXJtaW5lIHRoZSBjb3JyZWN0IGNvbG9yIGZvciB0aGUgc3Bpbm5lcixcclxuXHQvLyBjYW5jZWwgYW5kIGRlbGV0ZSBhbGlhcyB0byBcImRhbmdlclwiXHJcblx0bGV0IGNvbG9yO1xyXG5cdGlmIChwcm9wcy5jb2xvciA9PT0gJ2NhbmNlbCcgfHwgcHJvcHMuY29sb3IgPT09ICdkZWxldGUnKSBjb2xvciA9ICdkYW5nZXInO1xyXG5cclxuXHQvLyBtZXJnZSBhbGwgdGhlIHZhcmlhbnQvY29sb3IgdG9nZXRoZXJcclxuXHRjb25zdCBmb3JtYXR0ZWRDb2xvciA9IHZhcmlhbnQgPT09ICdmaWxsJyAmJiBwcm9wcy5jb2xvciAhPT0gJ2RlZmF1bHQnXHJcblx0XHQ/ICdpbnZlcnRlZCdcclxuXHRcdDogY29sb3I7XHJcblxyXG5cdC8vIHJlbmRlciB0aGUgc3Bpbm5lciBpZiByZXF1aXJlZFxyXG5cdGNvbnN0IHNwaW5uZXIgPSBsb2FkaW5nICYmIChcclxuXHRcdDxTcGlubmVyXHJcblx0XHRcdHNpemU9XCJzbWFsbFwiXHJcblx0XHRcdGNvbG9yPXtmb3JtYXR0ZWRDb2xvcn1cclxuXHRcdC8+XHJcblx0KTtcclxuXHJcblx0Ly8gc2xpZGUgdGhlIHNwaW5uZXIgaW4gYW5kIG91dCBvZiB2aWV3XHJcblx0Y29uc3Qgc3Bpbm5lclN0eWxlcyA9IHtcclxuXHRcdHdpZHRoOiBsb2FkaW5nXHJcblx0XHRcdD8gKHRoZW1lLnNwaW5uZXIuc2l6ZS5zbWFsbCAqIDUgKyB0aGVtZS5zcGFjaW5nLnNtYWxsKVxyXG5cdFx0XHQ6IDAsXHJcblx0fTtcclxuXHJcblx0Ly8gcmVuZGVyIGFsbCB0aGF0IHNoaXRcclxuXHRyZXR1cm4gKFxyXG5cdFx0PEJ1dHRvbiB7Li4ucHJvcHN9PlxyXG5cdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLnNwaW5uZXIpfSBzdHlsZT17c3Bpbm5lclN0eWxlc30+XHJcblx0XHRcdFx0e3NwaW5uZXJ9XHJcblx0XHRcdDwvc3Bhbj5cclxuXHRcdFx0e2NoaWxkcmVufVxyXG5cdFx0PC9CdXR0b24+XHJcblx0KTtcclxufTtcclxuXHJcbkxvYWRpbmdCdXR0b24ucHJvcFR5cGVzID0ge1xyXG5cdGxvYWRpbmc6IFByb3BUeXBlcy5ib29sLFxyXG59O1xyXG5Mb2FkaW5nQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcclxuXHRsb2FkaW5nOiBmYWxzZSxcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0c3Bpbm5lcjoge1xyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHRvdmVyZmxvdzogJ2hpZGRlbicsXHJcblx0XHR0ZXh0QWxpZ246ICdsZWZ0JyxcclxuXHRcdHRyYW5zaXRpb246ICd3aWR0aCAyMDBtcyBlYXNlLW91dCcsXHJcblx0XHR2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBMb2FkaW5nQnV0dG9uO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxuZnVuY3Rpb24gTW9kYWxCb2R5ICh7XHJcblx0Y2xhc3NOYW1lLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdlxyXG5cdFx0XHRjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmJvZHksIGNsYXNzTmFtZSl9XHJcblx0XHRcdHsuLi5wcm9wc31cclxuXHRcdC8+XHJcblx0KTtcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0Ym9keToge1xyXG5cdFx0cGFkZGluZ0JvdHRvbTogdGhlbWUubW9kYWwucGFkZGluZy5ib2R5LnZlcnRpY2FsLFxyXG5cdFx0cGFkZGluZ0xlZnQ6IHRoZW1lLm1vZGFsLnBhZGRpbmcuYm9keS5ob3Jpem9udGFsLFxyXG5cdFx0cGFkZGluZ1JpZ2h0OiB0aGVtZS5tb2RhbC5wYWRkaW5nLmJvZHkuaG9yaXpvbnRhbCxcclxuXHRcdHBhZGRpbmdUb3A6IHRoZW1lLm1vZGFsLnBhZGRpbmcuYm9keS52ZXJ0aWNhbCxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNb2RhbEJvZHk7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgU2Nyb2xsTG9jayBmcm9tICcuLi9TY3JvbGxMb2NrJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vUG9ydGFsJztcblxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcblxuY29uc3QgY2FuVXNlRG9tID0gISEoXG5cdHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG5cdCYmIHdpbmRvdy5kb2N1bWVudFxuXHQmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudFxuKTtcblxuY2xhc3MgTW9kYWxEaWFsb2cgZXh0ZW5kcyBDb21wb25lbnQge1xuXHRjb25zdHJ1Y3RvciAoKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaGFuZGxlQmFja2Ryb3BDbGljayA9IHRoaXMuaGFuZGxlQmFja2Ryb3BDbGljay5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuaGFuZGxlS2V5Ym9hcmRJbnB1dCA9IHRoaXMuaGFuZGxlS2V5Ym9hcmRJbnB1dC5iaW5kKHRoaXMpO1xuXHR9XG5cdGdldENoaWxkQ29udGV4dCAoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG9uQ2xvc2U6IHRoaXMucHJvcHMub25DbG9zZSxcblx0XHR9O1xuXHR9XG5cdGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKG5leHRQcm9wcykge1xuXHRcdGlmICghY2FuVXNlRG9tKSByZXR1cm47XG5cblx0XHQvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG5cdFx0aWYgKG5leHRQcm9wcy5pc09wZW4gJiYgbmV4dFByb3BzLmVuYWJsZUtleWJvYXJkSW5wdXQpIHtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlib2FyZElucHV0KTtcblx0XHR9XG5cdFx0aWYgKCFuZXh0UHJvcHMuaXNPcGVuICYmIG5leHRQcm9wcy5lbmFibGVLZXlib2FyZElucHV0KSB7XG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5Ym9hcmRJbnB1dCk7XG5cdFx0fVxuXHR9XG5cdGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcblx0XHRpZiAodGhpcy5wcm9wcy5lbmFibGVLZXlib2FyZElucHV0KSB7XG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5Ym9hcmRJbnB1dCk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdC8vIE1ldGhvZHNcblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblx0aGFuZGxlS2V5Ym9hcmRJbnB1dCAoZXZlbnQpIHtcblx0XHRpZiAoZXZlbnQua2V5Q29kZSA9PT0gMjcpIHRoaXMucHJvcHMub25DbG9zZSgpO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGhhbmRsZUJhY2tkcm9wQ2xpY2sgKGUpIHtcblx0XHRpZiAoZS50YXJnZXQgIT09IHRoaXMucmVmcy5jb250YWluZXIpIHJldHVybjtcblxuXHRcdHRoaXMucHJvcHMub25DbG9zZSgpO1xuXHR9XG5cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdC8vIFJlbmRlcmVyc1xuXHQvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXHRyZW5kZXJEaWFsb2cgKCkge1xuXHRcdGNvbnN0IHtcblx0XHRcdGJhY2tkcm9wQ2xvc2VzTW9kYWwsXG5cdFx0XHRjaGlsZHJlbixcblx0XHRcdGlzT3Blbixcblx0XHRcdHdpZHRoLFxuXHRcdH0gPSB0aGlzLnByb3BzO1xuXG5cdFx0aWYgKCFpc09wZW4pIHJldHVybiA8c3BhbiBrZXk9XCJjbG9zZWRcIiAvPjtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2XG5cdFx0XHRcdGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuY29udGFpbmVyKX1cblx0XHRcdFx0a2V5PVwib3BlblwiXG5cdFx0XHRcdHJlZj1cImNvbnRhaW5lclwiXG5cdFx0XHRcdG9uQ2xpY2s9eyEhYmFja2Ryb3BDbG9zZXNNb2RhbCAmJiB0aGlzLmhhbmRsZUJhY2tkcm9wQ2xpY2t9XG5cdFx0XHRcdG9uVG91Y2hFbmQ9eyEhYmFja2Ryb3BDbG9zZXNNb2RhbCAmJiB0aGlzLmhhbmRsZUJhY2tkcm9wQ2xpY2t9XG5cdFx0XHQ+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5kaWFsb2cpfSBzdHlsZT17eyB3aWR0aCB9fSBkYXRhLXNjcmVlbi1pZD1cIm1vZGFsLWRpYWxvZ1wiPlxuXHRcdFx0XHRcdHtjaGlsZHJlbn1cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDxTY3JvbGxMb2NrIC8+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9XG5cdHJlbmRlciAoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxQb3J0YWw+XG5cdFx0XHRcdHt0aGlzLnJlbmRlckRpYWxvZygpfVxuXHRcdFx0PC9Qb3J0YWw+XG5cdFx0KTtcblx0fVxufTtcblxuTW9kYWxEaWFsb2cucHJvcFR5cGVzID0ge1xuXHRiYWNrZHJvcENsb3Nlc01vZGFsOiBQcm9wVHlwZXMuYm9vbCxcblx0ZW5hYmxlS2V5Ym9hcmRJbnB1dDogUHJvcFR5cGVzLmJvb2wsXG5cdGlzT3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cdG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxufTtcbk1vZGFsRGlhbG9nLmRlZmF1bHRQcm9wcyA9IHtcblx0ZW5hYmxlS2V5Ym9hcmRJbnB1dDogdHJ1ZSxcblx0d2lkdGg6IDc2OCxcbn07XG5Nb2RhbERpYWxvZy5jaGlsZENvbnRleHRUeXBlcyA9IHtcblx0b25DbG9zZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG5cdGNvbnRhaW5lcjoge1xuXHRcdGFsaWduSXRlbXM6ICdjZW50ZXInLFxuXHRcdGJhY2tncm91bmRDb2xvcjogdGhlbWUubW9kYWwuYmFja2dyb3VuZCxcblx0XHRib3hTaXppbmc6ICdib3JkZXItYm94Jyxcblx0XHRkaXNwbGF5OiAnZmxleCcsXG5cdFx0aGVpZ2h0OiAnMTAwJScsXG5cdFx0anVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuXHRcdGxlZnQ6IDAsXG5cdFx0cG9zaXRpb246ICdmaXhlZCcsXG5cdFx0dG9wOiAwLFxuXHRcdHdpZHRoOiAnMTAwJScsXG5cdFx0ekluZGV4OiB0aGVtZS5tb2RhbC56SW5kZXgsXG5cdH0sXG5cdGRpYWxvZzoge1xuXHRcdG1heEhlaWdodDogJzkwJScsXG5cdFx0b3ZlcmZsb3c6ICdzY3JvbGwnLFxuXHRcdGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcblx0XHRib3JkZXJSYWRpdXM6IHRoZW1lLmJvcmRlclJhZGl1cy5kZWZhdWx0LFxuXHRcdHBhZGRpbmdCb3R0b206IHRoZW1lLm1vZGFsLnBhZGRpbmcuZGlhbG9nLnZlcnRpY2FsLFxuXHRcdHBhZGRpbmdMZWZ0OiB0aGVtZS5tb2RhbC5wYWRkaW5nLmRpYWxvZy5ob3Jpem9udGFsLFxuXHRcdHBhZGRpbmdSaWdodDogdGhlbWUubW9kYWwucGFkZGluZy5kaWFsb2cuaG9yaXpvbnRhbCxcblx0XHRwYWRkaW5nVG9wOiAnNXB4Jyxcblx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJyxcblx0fSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGFsRGlhbG9nO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbmZ1bmN0aW9uIE1vZGFsRm9vdGVyICh7XHJcblx0YWxpZ24sXHJcblx0Y2xhc3NOYW1lLFxyXG5cdC4uLnByb3BzXHJcbn0pIHtcclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdiB7Li4ucHJvcHN9IGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuZm9vdGVyLCBjbGFzc2VzWydhbGlnbl9fJyArIGFsaWduXSwgY2xhc3NOYW1lKX0gLz5cclxuXHQpO1xyXG59O1xyXG5cclxuTW9kYWxGb290ZXIucHJvcFR5cGVzID0ge1xyXG5cdGFsaWduOiBQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnbGVmdCcsICdyaWdodCddKSxcclxuXHRjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXHJcblx0b25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXHJcblx0c2hvd0Nsb3NlQnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcclxuXHR0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5Nb2RhbEZvb3Rlci5kZWZhdWx0UHJvcHMgPSB7XHJcblx0YWxpZ246ICdsZWZ0JyxcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0Zm9vdGVyOiB7XHJcblx0XHRib3JkZXJUb3A6IGAycHggc29saWQgJHt0aGVtZS5jb2xvci5ncmF5MTB9YCxcclxuXHRcdGRpc3BsYXk6ICdmbGV4JyxcclxuXHRcdHBhZGRpbmdCb3R0b206IHRoZW1lLm1vZGFsLnBhZGRpbmcuZm9vdGVyLnZlcnRpY2FsLFxyXG5cdFx0cGFkZGluZ0xlZnQ6IHRoZW1lLm1vZGFsLnBhZGRpbmcuZm9vdGVyLmhvcml6b250YWwsXHJcblx0XHRwYWRkaW5nUmlnaHQ6IHRoZW1lLm1vZGFsLnBhZGRpbmcuZm9vdGVyLmhvcml6b250YWwsXHJcblx0XHRwYWRkaW5nVG9wOiB0aGVtZS5tb2RhbC5wYWRkaW5nLmZvb3Rlci52ZXJ0aWNhbCxcclxuXHR9LFxyXG5cclxuXHQvLyBhbGlnbm1lbnRcclxuXHRhbGlnbl9fbGVmdDoge1xyXG5cdFx0anVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcclxuXHR9LFxyXG5cdGFsaWduX19jZW50ZXI6IHtcclxuXHRcdGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcclxuXHR9LFxyXG5cdGFsaWduX19yaWdodDoge1xyXG5cdFx0anVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCcsXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTW9kYWxGb290ZXI7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBHbHlwaEJ1dHRvbiBmcm9tICcuLi9HbHlwaEJ1dHRvbic7XHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5mdW5jdGlvbiBNb2RhbEhlYWRlciAoe1xyXG5cdGNoaWxkcmVuLFxyXG5cdGNsYXNzTmFtZSxcclxuXHRzaG93Q2xvc2VCdXR0b24sXHJcblx0dGV4dCxcclxuXHQuLi5wcm9wc1xyXG59LCB7XHJcblx0b25DbG9zZSxcclxufSkge1xyXG5cdC8vIFByb3BlcnR5IFZpb2xhdGlvblxyXG5cdGlmIChjaGlsZHJlbiAmJiB0ZXh0KSB7XHJcblx0XHRjb25zb2xlLmVycm9yKCdXYXJuaW5nOiBNb2RhbEhlYWRlciBjYW5ub3QgcmVuZGVyIGBjaGlsZHJlbmAgYW5kIGB0ZXh0YC4gWW91IG11c3QgcHJvdmlkZSBvbmUgb3IgdGhlIG90aGVyLicpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXYgey4uLnByb3BzfSBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmhlYWRlciwgY2xhc3NOYW1lKX0+XHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5ncm93KX0+XHJcblx0XHRcdFx0e3RleHQgPyAoXHJcblx0XHRcdFx0XHQ8aDQgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy50ZXh0KX0+XHJcblx0XHRcdFx0XHRcdHt0ZXh0fVxyXG5cdFx0XHRcdFx0PC9oND5cclxuXHRcdFx0XHQpIDogY2hpbGRyZW59XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0XHR7ISFvbkNsb3NlICYmIHNob3dDbG9zZUJ1dHRvbiAmJiAoXHJcblx0XHRcdFx0PEdseXBoQnV0dG9uXHJcblx0XHRcdFx0XHRhcGhyb2RpdGVTdHlsZXM9e2NsYXNzZXMuY2xvc2V9XHJcblx0XHRcdFx0XHRjb2xvcj1cImNhbmNlbFwiXHJcblx0XHRcdFx0XHRnbHlwaD1cInhcIlxyXG5cdFx0XHRcdFx0b25DbGljaz17b25DbG9zZX1cclxuXHRcdFx0XHRcdHZhcmlhbnQ9XCJsaW5rXCJcclxuXHRcdFx0XHQvPlxyXG5cdFx0XHQpfVxyXG5cdFx0PC9kaXY+XHJcblx0KTtcclxufTtcclxuXHJcbk1vZGFsSGVhZGVyLnByb3BUeXBlcyA9IHtcclxuXHRjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXHJcblx0b25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXHJcblx0c2hvd0Nsb3NlQnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcclxuXHR0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5Nb2RhbEhlYWRlci5jb250ZXh0VHlwZXMgPSB7XHJcblx0b25DbG9zZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0aGVhZGVyOiB7XHJcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuXHRcdGJvcmRlckJvdHRvbTogYDJweCBzb2xpZCAke3RoZW1lLmNvbG9yLmdyYXkxMH1gLFxyXG5cdFx0ZGlzcGxheTogJ2ZsZXgnLFxyXG5cdFx0cGFkZGluZ0JvdHRvbTogdGhlbWUubW9kYWwucGFkZGluZy5oZWFkZXIudmVydGljYWwsXHJcblx0XHRwYWRkaW5nTGVmdDogdGhlbWUubW9kYWwucGFkZGluZy5oZWFkZXIuaG9yaXpvbnRhbCxcclxuXHRcdHBhZGRpbmdSaWdodDogdGhlbWUubW9kYWwucGFkZGluZy5oZWFkZXIuaG9yaXpvbnRhbCxcclxuXHRcdHBhZGRpbmdUb3A6IHRoZW1lLm1vZGFsLnBhZGRpbmcuaGVhZGVyLnZlcnRpY2FsLFxyXG5cdH0sXHJcblxyXG5cdC8vIGZpbGwgc3BhY2UgdG8gcHVzaCB0aGUgY2xvc2UgYnV0dG9uIHJpZ2h0XHJcblx0Z3Jvdzoge1xyXG5cdFx0ZmxleEdyb3c6IDEsXHJcblx0fSxcclxuXHJcblx0Ly8gdGl0bGUgdGV4dFxyXG5cdHRleHQ6IHtcclxuXHRcdGNvbG9yOiAnaW5oZXJpdCcsXHJcblx0XHRmb250U2l6ZTogMTgsXHJcblx0XHRmb250V2VpZ2h0OiA1MDAsXHJcblx0XHRsaW5lSGVpZ2h0OiAxLFxyXG5cdFx0bWFyZ2luOiAwLFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1vZGFsSGVhZGVyO1xyXG4iLCJpbXBvcnQgQm9keSBmcm9tICcuL2JvZHknO1xyXG5pbXBvcnQgRGlhbG9nIGZyb20gJy4vZGlhbG9nJztcclxuaW1wb3J0IEZvb3RlciBmcm9tICcuL2Zvb3Rlcic7XHJcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9oZWFkZXInO1xyXG5cclxuZXhwb3J0IHtcclxuXHRCb2R5LFxyXG5cdERpYWxvZyxcclxuXHRGb290ZXIsXHJcblx0SGVhZGVyLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQYWdlIGZyb20gJy4vcGFnZSc7XHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5jbGFzcyBQYWdpbmF0aW9uIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHRyZW5kZXJDb3VudCAoKSB7XHJcblx0XHRsZXQgY291bnQgPSAnJztcclxuXHRcdGNvbnN0IHsgY3VycmVudFBhZ2UsIHBhZ2VTaXplLCBwbHVyYWwsIHNpbmd1bGFyLCB0b3RhbCB9ID0gdGhpcy5wcm9wcztcclxuXHRcdGlmICghdG90YWwpIHtcclxuXHRcdFx0Y291bnQgPSAnTm8gJyArIChwbHVyYWwgfHwgJ3JlY29yZHMnKTtcclxuXHRcdH0gZWxzZSBpZiAodG90YWwgPiBwYWdlU2l6ZSkge1xyXG5cdFx0XHRsZXQgc3RhcnQgPSAocGFnZVNpemUgKiAoY3VycmVudFBhZ2UgLSAxKSkgKyAxO1xyXG5cdFx0XHRsZXQgZW5kID0gTWF0aC5taW4oc3RhcnQgKyBwYWdlU2l6ZSAtIDEsIHRvdGFsKTtcclxuXHRcdFx0Y291bnQgPSBgU2hvd2luZyAke3N0YXJ0fSB0byAke2VuZH0gb2YgJHt0b3RhbH1gO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y291bnQgPSAnU2hvd2luZyAnICsgdG90YWw7XHJcblx0XHRcdGlmICh0b3RhbCA+IDEgJiYgcGx1cmFsKSB7XHJcblx0XHRcdFx0Y291bnQgKz0gJyAnICsgcGx1cmFsO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHRvdGFsID09PSAxICYmIHNpbmd1bGFyKSB7XHJcblx0XHRcdFx0Y291bnQgKz0gJyAnICsgc2luZ3VsYXI7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5jb3VudCl9IGRhdGEtZTJlLXBhZ2luYXRpb24tY291bnQ+e2NvdW50fTwvZGl2PlxyXG5cdFx0KTtcclxuXHR9XHJcblx0cmVuZGVyUGFnZXMgKCkge1xyXG5cdFx0Y29uc3QgeyBjdXJyZW50UGFnZSwgbGltaXQsIG9uUGFnZVNlbGVjdCwgcGFnZVNpemUsIHRvdGFsIH0gPSB0aGlzLnByb3BzO1xyXG5cclxuXHRcdGlmICh0b3RhbCA8PSBwYWdlU2l6ZSkgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0bGV0IHBhZ2VzID0gW107XHJcblx0XHRsZXQgdG90YWxQYWdlcyA9IE1hdGguY2VpbCh0b3RhbCAvIHBhZ2VTaXplKTtcclxuXHRcdGxldCBtaW5QYWdlID0gMTtcclxuXHRcdGxldCBtYXhQYWdlID0gdG90YWxQYWdlcztcclxuXHJcblx0XHRpZiAobGltaXQgJiYgKGxpbWl0IDwgdG90YWxQYWdlcykpIHtcclxuXHRcdFx0bGV0IHJpZ2h0TGltaXQgPSBNYXRoLmZsb29yKGxpbWl0IC8gMik7XHJcblx0XHRcdGxldCBsZWZ0TGltaXQgPSByaWdodExpbWl0ICsgKGxpbWl0ICUgMikgLSAxO1xyXG5cdFx0XHRtaW5QYWdlID0gY3VycmVudFBhZ2UgLSBsZWZ0TGltaXQ7XHJcblx0XHRcdG1heFBhZ2UgPSBjdXJyZW50UGFnZSArIHJpZ2h0TGltaXQ7XHJcblxyXG5cdFx0XHRpZiAobWluUGFnZSA8IDEpIHtcclxuXHRcdFx0XHRtYXhQYWdlID0gbGltaXQ7XHJcblx0XHRcdFx0bWluUGFnZSA9IDE7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKG1heFBhZ2UgPiB0b3RhbFBhZ2VzKSB7XHJcblx0XHRcdFx0bWluUGFnZSA9IHRvdGFsUGFnZXMgLSBsaW1pdCArIDE7XHJcblx0XHRcdFx0bWF4UGFnZSA9IHRvdGFsUGFnZXM7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmIChtaW5QYWdlID4gMSkge1xyXG5cdFx0XHRwYWdlcy5wdXNoKDxQYWdlIGtleT1cInBhZ2Vfc3RhcnRcIiBvbkNsaWNrPXsoKSA9PiBvblBhZ2VTZWxlY3QoMSl9Pi4uLjwvUGFnZT4pO1xyXG5cdFx0fVxyXG5cdFx0Zm9yIChsZXQgcGFnZSA9IG1pblBhZ2U7IHBhZ2UgPD0gbWF4UGFnZTsgcGFnZSsrKSB7XHJcblx0XHRcdGxldCBzZWxlY3RlZCA9IChwYWdlID09PSBjdXJyZW50UGFnZSk7XHJcblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xyXG5cdFx0XHRwYWdlcy5wdXNoKDxQYWdlIGtleT17J3BhZ2VfJyArIHBhZ2V9IHNlbGVjdGVkPXtzZWxlY3RlZH0gb25DbGljaz17KCkgPT4gb25QYWdlU2VsZWN0KHBhZ2UpfT57cGFnZX08L1BhZ2U+KTtcclxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSAqL1xyXG5cdFx0fVxyXG5cdFx0aWYgKG1heFBhZ2UgPCB0b3RhbFBhZ2VzKSB7XHJcblx0XHRcdHBhZ2VzLnB1c2goPFBhZ2Uga2V5PVwicGFnZV9lbmRcIiBvbkNsaWNrPXsoKSA9PiBvblBhZ2VTZWxlY3QodG90YWxQYWdlcyl9Pi4uLjwvUGFnZT4pO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmxpc3QpfT5cclxuXHRcdFx0XHR7cGFnZXN9XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IGNsYXNzTmFtZSA9IGNzcyhjbGFzc2VzLmNvbnRhaW5lciwgdGhpcy5wcm9wcy5jbGFzc05hbWUpO1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gc3R5bGU9e3RoaXMucHJvcHMuc3R5bGV9PlxyXG5cdFx0XHRcdHt0aGlzLnJlbmRlckNvdW50KCl9XHJcblx0XHRcdFx0e3RoaXMucmVuZGVyUGFnZXMoKX1cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH1cclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0Y29udGFpbmVyOiB7XHJcblx0XHRkaXNwbGF5OiAnYmxvY2snLFxyXG5cdFx0bGluZUhlaWdodDogdGhlbWUuY29tcG9uZW50LmxpbmVIZWlnaHQsXHJcblx0XHRtYXJnaW5Cb3R0b206ICcyZW0nLFxyXG5cdH0sXHJcblx0Y291bnQ6IHtcclxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxyXG5cdFx0bWFyZ2luUmlnaHQ6ICcxZW0nLFxyXG5cdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZScsXHJcblx0fSxcclxuXHRsaXN0OiB7XHJcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxyXG5cdH0sXHJcbn07XHJcblxyXG5QYWdpbmF0aW9uLnByb3BUeXBlcyA9IHtcclxuXHRjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0Y3VycmVudFBhZ2U6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcclxuXHRsaW1pdDogUHJvcFR5cGVzLm51bWJlcixcclxuXHRvblBhZ2VTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxyXG5cdHBhZ2VTaXplOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXHJcblx0cGx1cmFsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHNpbmd1bGFyOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxyXG5cdHRvdGFsOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFBhZ2luYXRpb247XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcblxyXG5mdW5jdGlvbiBQYWdlICh7XHJcblx0ZGlzYWJsZWQsXHJcblx0c2VsZWN0ZWQsXHJcblx0Li4ucHJvcHNcclxufSkge1xyXG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdGNsYXNzZXMucGFnZSxcclxuXHRcdCEhZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCxcclxuXHRcdCEhc2VsZWN0ZWQgJiYgY2xhc3Nlcy5zZWxlY3RlZFxyXG5cdCk7XHJcblx0cmV0dXJuIChcclxuXHRcdDxidXR0b24gey4uLnByb3BzfSAvPlxyXG5cdCk7XHJcbn07XHJcblxyXG5QYWdlLnByb3BUeXBlcyA9IHtcclxuXHRkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXHJcblx0b25DbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHRzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXHJcbn07XHJcblxyXG4vKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXHJcblxyXG5jb25zdCBzZWxlY3RlZFN0eWxlID0ge1xyXG5cdGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFnaW5hdGlvbi5zZWxlY3RlZC5iYWNrZ3JvdW5kLFxyXG5cdGJvcmRlckNvbG9yOiB0aGVtZS5wYWdpbmF0aW9uLnNlbGVjdGVkLmJvcmRlcixcclxuXHRjb2xvcjogdGhlbWUucGFnaW5hdGlvbi5zZWxlY3RlZC5jb2xvcixcclxuXHRjdXJzb3I6ICdkZWZhdWx0JyxcclxuXHR6SW5kZXg6IDIsXHJcbn07XHJcbmNvbnN0IHBzZXVkb1N0eWxlID0ge1xyXG5cdGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFnaW5hdGlvbi5ob3Zlci5iYWNrZ3JvdW5kLFxyXG5cdGJvcmRlckNvbG9yOiB0aGVtZS5wYWdpbmF0aW9uLmhvdmVyLmJvcmRlcixcclxuXHRjb2xvcjogdGhlbWUucGFnaW5hdGlvbi5ob3Zlci5jb2xvcixcclxuXHRvdXRsaW5lOiAnbm9uZScsXHJcbn07XHJcblxyXG5jb25zdCBjbGFzc2VzID0ge1xyXG5cdHBhZ2U6IHtcclxuXHRcdGFwcGVhcmFuY2U6ICdub25lJyxcclxuXHRcdGJhY2tncm91bmQ6ICdub25lJyxcclxuXHRcdGJvcmRlcjogJzFweCBzb2xpZCB0cmFuc3BhcmVudCcsXHJcblx0XHRib3JkZXJSYWRpdXM6IHRoZW1lLmJvcmRlclJhZGl1cy5kZWZhdWx0LFxyXG5cdFx0Y29sb3I6IHRoZW1lLnBhZ2luYXRpb24uY29sb3IsXHJcblx0XHRjdXJzb3I6ICdwb2ludGVyJyxcclxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxyXG5cdFx0ZmxvYXQ6ICdsZWZ0JywgLy8gQ29sbGFwc2Ugd2hpdGUtc3BhY2VcclxuXHRcdG1hcmdpblJpZ2h0OiAnMC4yNWVtJyxcclxuXHRcdHBhZGRpbmc6ICcwIC43ZW0nLFxyXG5cdFx0cG9zaXRpb246ICdyZWxhdGl2ZScsXHJcblx0XHR0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxyXG5cclxuXHRcdC8vIGhhbmRsZSBob3ZlciBhbmQgZm9jdXNcclxuXHRcdCc6aG92ZXInOiBwc2V1ZG9TdHlsZSxcclxuXHRcdCc6Zm9jdXMnOiBwc2V1ZG9TdHlsZSxcclxuXHR9LFxyXG5cclxuXHQvLyBzZWxlY3RlZCBwYWdlXHJcblx0c2VsZWN0ZWQ6IHtcclxuXHRcdC4uLnNlbGVjdGVkU3R5bGUsXHJcblxyXG5cdFx0Jzpob3Zlcic6IHNlbGVjdGVkU3R5bGUsXHJcblx0XHQnOmZvY3VzJzogc2VsZWN0ZWRTdHlsZSxcclxuXHR9LFxyXG5cclxuXHQvLyBkaXNhYmxlZCBwYWdlXHJcblxyXG5cdGRpc2FibGVkOiB7XHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhZ2luYXRpb24uZGlzYWJsZWQuYmFja2dyb3VuZCxcclxuXHRcdGJvcmRlckNvbG9yOiB0aGVtZS5wYWdpbmF0aW9uLmRpc2FibGVkLmJhY2tncm91bmQsXHJcblx0XHRjb2xvcjogdGhlbWUucGFnaW5hdGlvbi5kaXNhYmxlZC5jb2xvcixcclxuXHRcdGN1cnNvcjogJ2RlZmF1bHQnLFxyXG5cdH0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQYWdlO1xyXG4iLCJpbXBvcnQgeyBDaGlsZHJlbiwgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcblxyXG4vLyBQYXNzIHRoZSBMaWdodGJveCBjb250ZXh0IHRocm91Z2ggdG8gdGhlIFBvcnRhbCdzIGRlc2NlbmRlbnRzXHJcbi8vIFN0YWNrT3ZlcmZsb3cgZGlzY3Vzc2lvbiBodHRwOi8vZ29vLmdsL29jbHJKOVxyXG5cclxuY2xhc3MgUGFzc0NvbnRleHQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cdGdldENoaWxkQ29udGV4dCAoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wcm9wcy5jb250ZXh0O1xyXG5cdH1cclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0cmV0dXJuIENoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XHJcblx0fVxyXG59O1xyXG5cclxuUGFzc0NvbnRleHQucHJvcFR5cGVzID0ge1xyXG5cdGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxufTtcclxuUGFzc0NvbnRleHQuY2hpbGRDb250ZXh0VHlwZXMgPSB7XHJcblx0b25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQYXNzQ29udGV4dDtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgVHJhbnNpdGlvbiBmcm9tICdyZWFjdC1hZGRvbnMtY3NzLXRyYW5zaXRpb24tZ3JvdXAnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgUGFzc0NvbnRleHQgZnJvbSAnLi4vUGFzc0NvbnRleHQnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcnRhbCBleHRlbmRzIENvbXBvbmVudCB7XHJcblx0Y29uc3RydWN0b3IgKCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMucG9ydGFsRWxlbWVudCA9IG51bGw7XHJcblx0fVxyXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuXHRcdGNvbnN0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocCk7XHJcblx0XHR0aGlzLnBvcnRhbEVsZW1lbnQgPSBwO1xyXG5cdFx0dGhpcy5jb21wb25lbnREaWRVcGRhdGUoKTtcclxuXHR9XHJcblx0Y29tcG9uZW50RGlkVXBkYXRlICgpIHtcclxuXHRcdC8vIEFuaW1hdGUgZmFkZSBvbiBtb3VudC91bm1vdW50XHJcblx0XHRjb25zdCBkdXJhdGlvbiA9IDIwMDtcclxuXHRcdGNvbnN0IHN0eWxlcyA9IGBcclxuXHRcdFx0XHQuZmFkZS1lbnRlciB7IG9wYWNpdHk6IDAuMDE7IH1cclxuXHRcdFx0XHQuZmFkZS1lbnRlci5mYWRlLWVudGVyLWFjdGl2ZSB7IG9wYWNpdHk6IDE7IHRyYW5zaXRpb246IG9wYWNpdHkgJHtkdXJhdGlvbn1tczsgfVxyXG5cdFx0XHRcdC5mYWRlLWxlYXZlIHsgb3BhY2l0eTogMTsgfVxyXG5cdFx0XHRcdC5mYWRlLWxlYXZlLmZhZGUtbGVhdmUtYWN0aXZlIHsgb3BhY2l0eTogMC4wMTsgdHJhbnNpdGlvbjogb3BhY2l0eSAke2R1cmF0aW9ufW1zOyB9XHJcblx0XHRgO1xyXG5cdFx0cmVuZGVyKFxyXG5cdFx0XHQ8UGFzc0NvbnRleHQgY29udGV4dD17dGhpcy5jb250ZXh0fT5cclxuXHRcdFx0XHQ8ZGl2PlxyXG5cdFx0XHRcdFx0PHN0eWxlPntzdHlsZXN9PC9zdHlsZT5cclxuXHRcdFx0XHRcdDxUcmFuc2l0aW9uXHJcblx0XHRcdFx0XHRcdGNvbXBvbmVudD1cImRpdlwiXHJcblx0XHRcdFx0XHRcdHRyYW5zaXRpb25OYW1lPVwiZmFkZVwiXHJcblx0XHRcdFx0XHRcdHRyYW5zaXRpb25FbnRlclRpbWVvdXQ9e2R1cmF0aW9ufVxyXG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uTGVhdmVUaW1lb3V0PXtkdXJhdGlvbn1cclxuXHRcdFx0XHRcdFx0ey4uLnRoaXMucHJvcHN9XHJcblx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L1Bhc3NDb250ZXh0PixcclxuXHRcdFx0dGhpcy5wb3J0YWxFbGVtZW50XHJcblx0XHQpO1xyXG5cdH1cclxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XHJcblx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMucG9ydGFsRWxlbWVudCk7XHJcblx0fVxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcbn1cclxuXHJcblBvcnRhbC5jb250ZXh0VHlwZXMgPSB7XHJcblx0b25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbi8vIFVzaW5nIHdpbmRvdy5pbm5lcldpZHRoIGFuZCBzdGF0ZSBpbnN0ZWFkIG9mIENTUyBtZWRpYSBicmVha3BvaW50c1xyXG4vLyBiZWNhdXNlIHdlIHdhbnQgdG8gcmVuZGVyIG51bGwgcmF0aGVyIHRoYW4gYW4gZW1wdHkgc3Bhbi4gQWxsb3dpbmcgZm9yXHJcbi8vIENTUyBwc2V1ZG8gY2xhc3NlcyBsaWtlIDpvbmx5LWNoaWxkIHRvIGJlaGF2ZSBhcyBleHBlY3RlZC5cclxuXHJcbi8vIFJldHVybiB0cnVlIGlmIHdpbmRvdyArIGRvY3VtZW50XHJcbmNvbnN0IGNhblVzZURPTSA9ICEhKFxyXG5cdHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXHJcblx0JiYgd2luZG93LmRvY3VtZW50XHJcblx0JiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcclxuKTtcclxuXHJcbmNsYXNzIFJlc3BvbnNpdmVUZXh0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHRjb25zdHJ1Y3RvciAoKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5oYW5kbGVSZXNpemUgPSB0aGlzLmhhbmRsZVJlc2l6ZS5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5zdGF0ZSA9IHtcclxuXHRcdFx0d2luZG93V2lkdGg6IGNhblVzZURPTSA/IHdpbmRvdy5pbm5lcldpZHRoIDogMCxcclxuXHRcdH07XHJcblx0fVxyXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuXHRcdGlmIChjYW5Vc2VET00pIHtcclxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcclxuXHRcdFx0dGhpcy5oYW5kbGVSZXNpemUoKTtcclxuXHRcdH1cclxuXHR9XHJcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xyXG5cdFx0aWYgKGNhblVzZURPTSkge1xyXG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRoYW5kbGVSZXNpemUgKCkge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdHdpbmRvd1dpZHRoOiBjYW5Vc2VET00gPyB3aW5kb3cuaW5uZXJXaWR0aCA6IDAsXHJcblx0XHR9KTtcclxuXHR9XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IHtcclxuXHRcdFx0Y29tcG9uZW50OiBDb21wb25lbnQsXHJcblx0XHRcdGhpZGRlbkxHLFxyXG5cdFx0XHRoaWRkZW5NRCxcclxuXHRcdFx0aGlkZGVuU00sXHJcblx0XHRcdGhpZGRlblhTLFxyXG5cdFx0XHR2aXNpYmxlTEcsXHJcblx0XHRcdHZpc2libGVNRCxcclxuXHRcdFx0dmlzaWJsZVNNLFxyXG5cdFx0XHR2aXNpYmxlWFMsXHJcblx0XHRcdC4uLnByb3BzXHJcblx0XHR9ID0gdGhpcy5wcm9wcztcclxuXHRcdGNvbnN0IHsgd2luZG93V2lkdGggfSA9IHRoaXMuc3RhdGU7XHJcblxyXG5cdFx0bGV0IHRleHQ7XHJcblxyXG5cdFx0Ly8gc2V0IHRleHQgdmFsdWUgZnJvbSBicmVha3BvaW50OyBhdHRlbXB0IFhTIC0tPiBMR1xyXG5cdFx0aWYgKHdpbmRvd1dpZHRoIDwgdGhlbWUuYnJlYWtwb2ludE51bWVyaWMubW9iaWxlKSB7XHJcblx0XHRcdHRleHQgPSB2aXNpYmxlWFMgfHwgaGlkZGVuU00gfHwgaGlkZGVuTUQgfHwgaGlkZGVuTEc7XHJcblx0XHR9IGVsc2UgaWYgKHdpbmRvd1dpZHRoIDwgdGhlbWUuYnJlYWtwb2ludE51bWVyaWMudGFibGV0UG9ydHJhaXQpIHtcclxuXHRcdFx0dGV4dCA9IGhpZGRlblhTIHx8IHZpc2libGVTTSB8fCBoaWRkZW5NRCB8fCBoaWRkZW5MRztcclxuXHRcdH0gZWxzZSBpZiAod2luZG93V2lkdGggPCB0aGVtZS5icmVha3BvaW50TnVtZXJpYy50YWJsZXRMYW5kc2NhcGUpIHtcclxuXHRcdFx0dGV4dCA9IGhpZGRlblhTIHx8IGhpZGRlblNNIHx8IHZpc2libGVNRCB8fCBoaWRkZW5MRztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRleHQgPSBoaWRkZW5YUyB8fCBoaWRkZW5TTSB8fCBoaWRkZW5NRCB8fCB2aXNpYmxlTEc7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRleHQgPyA8Q29tcG9uZW50IHsuLi5wcm9wc30+e3RleHR9PC9Db21wb25lbnQ+IDogbnVsbDtcclxuXHR9XHJcbn07XHJcblxyXG5SZXNwb25zaXZlVGV4dC5wcm9wVHlwZXMgPSB7XHJcblx0aGlkZGVuTEc6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0aGlkZGVuTUQ6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0aGlkZGVuU006IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0aGlkZGVuWFM6IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0dmlzaWJsZUxHOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdHZpc2libGVNRDogUHJvcFR5cGVzLnN0cmluZyxcclxuXHR2aXNpYmxlU006IFByb3BUeXBlcy5zdHJpbmcsXHJcblx0dmlzaWJsZVhTOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5SZXNwb25zaXZlVGV4dC5kZWZhdWx0UHJvcHMgPSB7XHJcblx0Y29tcG9uZW50OiAnc3BhbicsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFJlc3BvbnNpdmVUZXh0O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5cclxuZnVuY3Rpb24gU2NyZWVuUmVhZGVyT25seSAoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0pIHtcclxuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoY2xhc3Nlcy5zck9ubHksIGNsYXNzTmFtZSk7XHJcblxyXG5cdHJldHVybiA8c3BhbiB7Li4ucHJvcHN9IC8+O1xyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHRzck9ubHk6IHtcclxuXHRcdGJvcmRlcjogMCxcclxuXHRcdGNsaXA6ICdyZWN0KDAsMCwwLDApJyxcclxuXHRcdGhlaWdodDogMSxcclxuXHRcdG1hcmdpbjogLTEsXHJcblx0XHRvdmVyZmxvdzogJ2hpZGRlbicsXHJcblx0XHRwYWRkaW5nOiAwLFxyXG5cdFx0cG9zaXRpb246ICdhYnNvbHV0ZScsXHJcblx0XHR3aWR0aDogMSxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTY3JlZW5SZWFkZXJPbmx5O1xyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JvbGxMb2NrIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHRjb25zdHJ1Y3RvciAoKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5sb2NrQ291bnQgPSAwO1xyXG5cdH1cclxuXHRjb21wb25lbnRXaWxsTW91bnQgKCkge1xyXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XHJcblxyXG5cdFx0dGhpcy5sb2NrQ291bnQrKztcclxuXHRcdGlmICh0aGlzLmxvY2tDb3VudCA+IDEpIHJldHVybjtcclxuXHJcblx0XHQvL1x0RklYTUUgaU9TIGlnbm9yZXMgb3ZlcmZsb3cgb24gYm9keVxyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Y29uc3Qgc2Nyb2xsQmFyV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCAtIGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XHJcblxyXG5cdFx0XHRjb25zdCB0YXJnZXQgPSBkb2N1bWVudC5ib2R5O1xyXG5cclxuXHRcdFx0dGFyZ2V0LnN0eWxlLnBhZGRpbmdSaWdodCA9IHNjcm9sbEJhcldpZHRoICsgJ3B4JztcclxuXHRcdFx0dGFyZ2V0LnN0eWxlLm92ZXJmbG93WSA9ICdoaWRkZW4nO1xyXG5cdFx0fSBjYXRjaCAoZXJyKSB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmaW5kIGJvZHkgZWxlbWVudC4gRXJyOicsIGVycik7XHJcblx0XHR9XHJcblx0fVxyXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcclxuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLmxvY2tDb3VudCA9PT0gMCkgcmV0dXJuO1xyXG5cclxuXHRcdHRoaXMubG9ja0NvdW50LS07XHJcblx0XHRpZiAodGhpcy5sb2NrQ291bnQgPiAwKSByZXR1cm47IC8vIFN0aWxsIGxvY2tlZFxyXG5cclxuXHRcdC8vXHRGSVhNRSBpT1MgaWdub3JlcyBvdmVyZmxvdyBvbiBib2R5XHJcblx0XHR0cnkge1xyXG5cdFx0XHRjb25zdCB0YXJnZXQgPSBkb2N1bWVudC5ib2R5O1xyXG5cclxuXHRcdFx0dGFyZ2V0LnN0eWxlLnBhZGRpbmdSaWdodCA9ICcnO1xyXG5cdFx0XHR0YXJnZXQuc3R5bGUub3ZlcmZsb3dZID0gJyc7XHJcblxyXG5cdFx0fSBjYXRjaCAoZXJyKSB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmaW5kIGJvZHkgZWxlbWVudC4gRXJyOicsIGVycik7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcbn1cclxuIiwiaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdGRhbmdlcjogdGhlbWUuY29sb3IuZGFuZ2VyLFxyXG5cdGRlZmF1bHQ6IHRoZW1lLmNvbG9yLmdyYXk4MCxcclxuXHRlcnJvcjogdGhlbWUuY29sb3IuZGFuZ2VyLFxyXG5cdGluZm86IHRoZW1lLmNvbG9yLmluZm8sXHJcblx0cHJpbWFyeTogdGhlbWUuY29sb3IucHJpbWFyeSxcclxuXHRzdWNjZXNzOiB0aGVtZS5jb2xvci5zdWNjZXNzLFxyXG5cdHdhcm5pbmc6IHRoZW1lLmNvbG9yLndhcm5pbmcsXHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcclxuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XHJcblxyXG5mdW5jdGlvbiBTZWdtZW50ZWRDb250cm9sICh7XHJcblx0Y2xhc3NOYW1lLFxyXG5cdGNvbG9yLFxyXG5cdGNyb3BUZXh0LFxyXG5cdGVxdWFsV2lkdGhTZWdtZW50cyxcclxuXHRpbmxpbmUsXHJcblx0b25DaGFuZ2UsXHJcblx0b3B0aW9ucyxcclxuXHR2YWx1ZSxcclxuXHQuLi5wcm9wc1xyXG59KSB7XHJcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0Y2xhc3Nlcy5jb250cm9sLFxyXG5cdFx0aW5saW5lID8gY2xhc3Nlcy5jb250cm9sX19pbmxpbmUgOiBudWxsLFxyXG5cdFx0Y2xhc3NOYW1lXHJcblx0KTtcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXYgey4uLnByb3BzfT5cclxuXHRcdFx0e29wdGlvbnMubWFwKChvcHQpID0+IHtcclxuXHRcdFx0XHRjb25zdCBidXR0b25DbGFzc05hbWUgPSBjc3MoXHJcblx0XHRcdFx0XHRjbGFzc2VzLmJ1dHRvbixcclxuXHRcdFx0XHRcdG9wdC5kaXNhYmxlZCA/IGNsYXNzZXMuYnV0dG9uX19kaXNhYmxlZCA6IG51bGwsXHJcblx0XHRcdFx0XHRvcHQudmFsdWUgPT09IHZhbHVlID8gY2xhc3Nlc1snYnV0dG9uX18nICsgY29sb3JdIDogbnVsbCxcclxuXHRcdFx0XHRcdGNyb3BUZXh0ID8gY2xhc3Nlcy5idXR0b25fX2Nyb3BUZXh0IDogbnVsbCxcclxuXHRcdFx0XHRcdGVxdWFsV2lkdGhTZWdtZW50cyA/IGNsYXNzZXMuYnV0dG9uX19lcXVhbFdpZHRoIDogbnVsbFxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0XHQ8YnV0dG9uXHJcblx0XHRcdFx0XHRcdGNsYXNzTmFtZT17YnV0dG9uQ2xhc3NOYW1lfVxyXG5cdFx0XHRcdFx0XHRrZXk9e29wdC52YWx1ZX1cclxuXHRcdFx0XHRcdFx0b25DbGljaz17IW9wdC5kaXNhYmxlZCAmJiAoKCkgPT4gb25DaGFuZ2Uob3B0LnZhbHVlKSl9XHJcblx0XHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxyXG5cdFx0XHRcdFx0XHR0aXRsZT17Y3JvcFRleHQgPyBvcHQubGFiZWwgOiBudWxsfVxyXG5cdFx0XHRcdFx0XHR0YWJJbmRleD17b3B0LmRpc2FibGVkID8gJy0xJyA6ICcnfVxyXG5cdFx0XHRcdFx0XHQ+XHJcblx0XHRcdFx0XHRcdHtvcHQubGFiZWx9XHJcblx0XHRcdFx0XHQ8L2J1dHRvbj5cclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9KX1cclxuXHRcdDwvZGl2Pik7XHJcbn07XHJcblxyXG5jb25zdCB2YWx1ZVByb3BTaGFwZSA9IFtcclxuXHRQcm9wVHlwZXMuYm9vbCxcclxuXHRQcm9wVHlwZXMubnVtYmVyLFxyXG5cdFByb3BUeXBlcy5zdHJpbmcsXHJcbl07XHJcblxyXG5TZWdtZW50ZWRDb250cm9sLnByb3BUeXBlcyA9IHtcclxuXHRjb2xvcjogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKGNvbG9ycykpLFxyXG5cdGNyb3BUZXh0OiBQcm9wVHlwZXMuYm9vbCwgLy8gd2hlbiBgaW5saW5lICYmIGVxdWFsV2lkdGhTZWdtZW50c2AgY3JvcHMgdG8gdGhlIG5leHQgbGFyZ2VzdCBvcHRpb24gbGVuZ3RoXHJcblx0ZXF1YWxXaWR0aFNlZ21lbnRzOiBQcm9wVHlwZXMuYm9vbCwgLy8gb25seSByZWxldmFudCB3aGVuIGBpbmxpbmUgPT09IGZhbHNlYFxyXG5cdGlubGluZTogUHJvcFR5cGVzLmJvb2wsXHJcblx0b25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcblx0b3B0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoXHJcblx0XHRQcm9wVHlwZXMuc2hhcGUoe1xyXG5cdFx0XHRkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXHJcblx0XHRcdGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0XHR2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZSh2YWx1ZVByb3BTaGFwZSksXHJcblx0XHR9KVxyXG5cdCkuaXNSZXF1aXJlZCxcclxuXHR2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZSh2YWx1ZVByb3BTaGFwZSksXHJcbn07XHJcblNlZ21lbnRlZENvbnRyb2wuZGVmYXVsdFByb3BzID0ge1xyXG5cdGNvbG9yOiAnZGVmYXVsdCcsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNlZ21lbnRlZENvbnRyb2w7XHJcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBTZWdtZW50ZWQgQ29udHJvbFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cclxuXHJcbmltcG9ydCBjb2xvcnMgZnJvbSAnLi9jb2xvcnMnO1xyXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xyXG5cclxuLy8gUHJlcGFyZSB2YXJpYW50c1xyXG5jb25zdCBjb2xvclZhcmlhbnRzID0ge307XHJcbk9iamVjdC5rZXlzKGNvbG9ycykuZm9yRWFjaChjb2xvciA9PiB7XHJcblx0Y29uc3QgcHNldWRvU3R5bGVzID0ge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBjb2xvcnNbY29sb3JdLFxyXG5cdFx0Y29sb3I6ICd3aGl0ZScsXHJcblx0fTtcclxuXHRjb2xvclZhcmlhbnRzWydidXR0b25fXycgKyBjb2xvcl0gPSB7XHJcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yc1tjb2xvcl0sXHJcblx0XHRjb2xvcjogJ3doaXRlJyxcclxuXHJcblx0XHQnOmhvdmVyJzogcHNldWRvU3R5bGVzLFxyXG5cdFx0Jzpmb2N1cyc6IHBzZXVkb1N0eWxlcyxcclxuXHRcdCc6YWN0aXZlJzogcHNldWRvU3R5bGVzLFxyXG5cdH07XHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0Y29udHJvbDoge1xyXG5cdFx0Ym9yZGVyV2lkdGg6IDEsXHJcblx0XHRib3JkZXJTdHlsZTogJ3NvbGlkJyxcclxuXHRcdGJvcmRlckNvbG9yOiB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuZGVmYXVsdCxcclxuXHRcdGJvcmRlclJhZGl1czogJzAuNGVtJyxcclxuXHRcdGRpc3BsYXk6ICdmbGV4JyxcclxuXHRcdGZvbnRTaXplOiB0aGVtZS5mb250LnNpemUuc21hbGwsXHJcblx0XHRwYWRkaW5nTGVmdDogMSxcclxuXHRcdHBhZGRpbmdSaWdodDogMSxcclxuXHR9LFxyXG5cdGNvbnRyb2xfX2lubGluZToge1xyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1mbGV4JyxcclxuXHR9LFxyXG5cclxuXHQvLyBidXR0b25zXHJcblx0YnV0dG9uOiB7XHJcblx0XHRiYWNrZ3JvdW5kOiAnbm9uZScsXHJcblx0XHRib3JkZXI6IDAsXHJcblx0XHRib3JkZXJSYWRpdXM6ICcwLjI1ZW0nLFxyXG5cdFx0ZmxleEdyb3c6IDEsXHJcblx0XHRtYXJnaW46ICcycHggMXB4JyxcclxuXHRcdHBhZGRpbmc6ICcwLjNlbSAwLjllbScsXHJcblx0XHRvdXRsaW5lOiAwLFxyXG5cclxuXHRcdCc6aG92ZXInOiB7IGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4wNSknIH0sXHJcblx0XHQnOmZvY3VzJzogeyBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuMDUpJyB9LFxyXG5cdFx0JzphY3RpdmUnOiB7IGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4xKScgfSxcclxuXHR9LFxyXG5cdGJ1dHRvbl9fZXF1YWxXaWR0aDoge1xyXG5cdFx0ZmxleDogJzEgMSAwJyxcclxuXHR9LFxyXG5cdGJ1dHRvbl9fY3JvcFRleHQ6IHtcclxuXHRcdG92ZXJmbG93OiAnaGlkZGVuJyxcclxuXHRcdHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcclxuXHRcdHdoaXRlU3BhY2U6ICdub3dyYXAnLFxyXG5cdH0sXHJcblx0YnV0dG9uX19kaXNhYmxlZDoge1xyXG5cdFx0b3BhY2l0eTogMC42LFxyXG5cdFx0cG9pbnRlckV2ZW50czogJ25vbmUnLFxyXG5cdH0sXHJcblxyXG5cdC8vIGNvbG9yc1xyXG5cdC4uLmNvbG9yVmFyaWFudHMsXHJcbn07XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gWydkYW5nZXInLCAnZGVmYXVsdCcsICdpbnZlcnRlZCcsICdwcmltYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XHJcbmltcG9ydCBTY3JlZW5SZWFkZXJPbmx5IGZyb20gJy4uL1NjcmVlblJlYWRlck9ubHknO1xyXG5pbXBvcnQgY29sb3JzIGZyb20gJy4vY29sb3JzJztcclxuaW1wb3J0IHNpemVzIGZyb20gJy4vc2l6ZXMnO1xyXG5cclxuZnVuY3Rpb24gU3Bpbm5lciAoeyBjbGFzc05hbWUsIHNpemUsIGNvbG9yLCAuLi5wcm9wcyB9KSB7XHJcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxyXG5cdFx0Y2xhc3Nlcy5iYXNlLFxyXG5cdFx0Y2xhc3Nlc1tzaXplXSxcclxuXHRcdGNsYXNzTmFtZVxyXG5cdCk7XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2IHsuLi5wcm9wc30+XHJcblx0XHRcdDxzcGFuIGNsYXNzTmFtZT17YCR7Y3NzKGNsYXNzZXMuZG90LCBjbGFzc2VzWydzaXplX18nICsgc2l6ZV0sIGNsYXNzZXNbJ2NvbG9yX18nICsgY29sb3JdLCBjbGFzc2VzLmRvdF9fZmlyc3QpfWB9IC8+XHJcblx0XHRcdDxzcGFuIGNsYXNzTmFtZT17YCR7Y3NzKGNsYXNzZXMuZG90LCBjbGFzc2VzWydzaXplX18nICsgc2l6ZV0sIGNsYXNzZXNbJ2NvbG9yX18nICsgY29sb3JdLCBjbGFzc2VzLmRvdF9fc2Vjb25kKX1gfSAvPlxyXG5cdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2Ake2NzcyhjbGFzc2VzLmRvdCwgY2xhc3Nlc1snc2l6ZV9fJyArIHNpemVdLCBjbGFzc2VzWydjb2xvcl9fJyArIGNvbG9yXSwgY2xhc3Nlcy5kb3RfX3RoaXJkKX1gfSAvPlxyXG5cdFx0XHQ8U2NyZWVuUmVhZGVyT25seT5Mb2FkaW5nLi4uPC9TY3JlZW5SZWFkZXJPbmx5PlxyXG5cdFx0PC9kaXY+XHJcblx0KTtcclxufTtcclxuXHJcblNwaW5uZXIucHJvcFR5cGVzID0ge1xyXG5cdGNvbG9yOiBQcm9wVHlwZXMub25lT2YoY29sb3JzKSxcclxuXHRzaXplOiBQcm9wVHlwZXMub25lT2Yoc2l6ZXMpLFxyXG59O1xyXG5TcGlubmVyLmRlZmF1bHRQcm9wcyA9IHtcclxuXHRzaXplOiAnbWVkaXVtJyxcclxuXHRjb2xvcjogJ2RlZmF1bHQnLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTcGlubmVyO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ107XHJcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBTcGlubmVyXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XHJcbmltcG9ydCBjb2xvcnMgZnJvbSAnLi9jb2xvcnMnO1xyXG5pbXBvcnQgc2l6ZXMgZnJvbSAnLi9zaXplcyc7XHJcblxyXG4vLyBQcmVwYXJlIHZhcmlhbnRzXHJcbmNvbnN0IGNvbG9yVmFyaWFudHMgPSB7fTtcclxuY29sb3JzLmZvckVhY2goY29sb3IgPT4ge1xyXG5cdGNvbG9yVmFyaWFudHNbYGNvbG9yX18ke2NvbG9yfWBdID0ge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiB0aGVtZS5zcGlubmVyLmNvbG9yW2NvbG9yXSxcclxuXHR9O1xyXG59KTtcclxuXHJcbi8vIFByZXBhcmUgc2l6ZXNcclxuY29uc3Qgc2l6ZVZhcmlhbnRzID0ge307XHJcbnNpemVzLmZvckVhY2goc2l6ZSA9PiB7XHJcblx0c2l6ZVZhcmlhbnRzW2BzaXplX18ke3NpemV9YF0gPSB7XHJcblx0XHRmb250U2l6ZTogdGhlbWUuc3Bpbm5lci5zaXplW3NpemVdLFxyXG5cdH07XHJcbn0pO1xyXG5cclxuLy8gRGVjbGFyZSBhbmltYXRpb24ga2V5ZnJhbWVzXHJcblxyXG5jb25zdCBrZXlmcmFtZXMgPSBjb21wb3NlLmtleWZyYW1lcygncHVsc2UnLCB7XHJcblx0JzAlLCA4MCUsIDEwMCUnOiB7IG9wYWNpdHk6IDAgfSxcclxuXHQnNDAlJzogeyBvcGFjaXR5OiAxIH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0YmFzZToge1xyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHRsaW5lSGVpZ2h0OiAxLFxyXG5cdFx0dGV4dEFsaWduOiAnY2VudGVyJyxcclxuXHRcdHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxyXG5cdFx0d2lkdGg6ICc1ZW0nLFxyXG5cdH0sXHJcblx0c21hbGw6XHR7IGZvbnRTaXplOiA0IH0sXHJcblx0bWVkaXVtOlx0eyBmb250U2l6ZTogOCB9LFxyXG5cdGxhcmdlOlx0eyBmb250U2l6ZTogMTYgfSxcclxuXHJcblx0Ly8gdGV4dFxyXG5cdHRleHQ6IHtcclxuXHRcdGJvcmRlcjogMCxcclxuXHRcdGNsaXA6ICdyZWN0KDAsMCwwLDApJyxcclxuXHRcdGhlaWdodDogMSxcclxuXHRcdG1hcmdpbjogLTEsXHJcblx0XHRvdmVyZmxvdzogJ2hpZGRlbicsXHJcblx0XHRwYWRkaW5nOiAwLFxyXG5cdFx0cG9zaXRpb246ICdhYnNvbHV0ZScsXHJcblx0XHR3aWR0aDogMSxcclxuXHR9LFxyXG5cclxuXHQvLyBkb3RzXHJcblx0ZG90OiB7XHJcblx0XHRhbmltYXRpb25OYW1lOiBrZXlmcmFtZXMsXHJcblx0XHRhbmltYXRpb25EdXJhdGlvbjogJzFzJyxcclxuXHRcdGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAnaW5maW5pdGUnLFxyXG5cdFx0Ym9yZGVyUmFkaXVzOiAnMWVtJyxcclxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxyXG5cdFx0aGVpZ2h0OiAnMWVtJyxcclxuXHRcdHZlcnRpY2FsQWxpZ246ICd0b3AnLFxyXG5cdFx0d2lkdGg6ICcxZW0nLFxyXG5cdH0sXHJcblx0ZG90X19zZWNvbmQ6IHtcclxuXHRcdGFuaW1hdGlvbkRlbGF5OiAnMTYwbXMnLFxyXG5cdFx0bWFyZ2luTGVmdDogJzFlbScsXHJcblx0fSxcclxuXHRkb3RfX3RoaXJkOiB7XHJcblx0XHRhbmltYXRpb25EZWxheTogJzMyMG1zJyxcclxuXHRcdG1hcmdpbkxlZnQ6ICcxZW0nLFxyXG5cdH0sXHJcblxyXG5cdC8vIENvbG9yc1xyXG5cdC4uLmNvbG9yVmFyaWFudHMsXHJcblxyXG5cdC8vIFNpemVzXHJcblx0Li4uc2l6ZVZhcmlhbnRzLFxyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRBbGVydDogcmVxdWlyZSgnLi9BbGVydCcpLFxyXG5cdEJsYW5rU3RhdGU6IHJlcXVpcmUoJy4vQmxhbmtTdGF0ZScpLFxyXG5cdEJ1dHRvbjogcmVxdWlyZSgnLi9CdXR0b24nKSxcclxuXHRDZW50ZXI6IHJlcXVpcmUoJy4vQ2VudGVyJyksXHJcblx0Q2hpcDogcmVxdWlyZSgnLi9DaGlwJyksXHJcblx0Q29udGFpbmVyOiByZXF1aXJlKCcuL0NvbnRhaW5lcicpLFxyXG5cdERyb3Bkb3duQnV0dG9uOiByZXF1aXJlKCcuL0Ryb3Bkb3duQnV0dG9uJyksXHJcblx0Rm9ybTogcmVxdWlyZSgnLi9Gb3JtJyksXHJcblx0Rm9ybUZpZWxkOiByZXF1aXJlKCcuL0Zvcm1GaWVsZCcpLFxyXG5cdEZvcm1JbnB1dDogcmVxdWlyZSgnLi9Gb3JtSW5wdXQnKSxcclxuXHRGb3JtTGFiZWw6IHJlcXVpcmUoJy4vRm9ybUxhYmVsJyksXHJcblx0Rm9ybU5vdGU6IHJlcXVpcmUoJy4vRm9ybU5vdGUnKSxcclxuXHRGb3JtU2VsZWN0OiByZXF1aXJlKCcuL0Zvcm1TZWxlY3QnKSxcclxuXHRHbHlwaDogcmVxdWlyZSgnLi9HbHlwaCcpLFxyXG5cdEdseXBoQnV0dG9uOiByZXF1aXJlKCcuL0dseXBoQnV0dG9uJyksXHJcblx0R2x5cGhGaWVsZDogcmVxdWlyZSgnLi9HbHlwaEZpZWxkJyksXHJcblx0R3JpZDogcmVxdWlyZSgnLi9HcmlkJyksXHJcblx0SW5saW5lR3JvdXA6IHJlcXVpcmUoJy4vSW5saW5lR3JvdXAnKSxcclxuXHRJbmxpbmVHcm91cFNlY3Rpb246IHJlcXVpcmUoJy4vSW5saW5lR3JvdXBTZWN0aW9uJyksXHJcblx0TGFiZWxsZWRDb250cm9sOiByZXF1aXJlKCcuL0xhYmVsbGVkQ29udHJvbCcpLFxyXG5cdExvYWRpbmdCdXR0b246IHJlcXVpcmUoJy4vTG9hZGluZ0J1dHRvbicpLFxyXG5cdE1vZGFsOiByZXF1aXJlKCcuL01vZGFsJyksXHJcblx0UGFnaW5hdGlvbjogcmVxdWlyZSgnLi9QYWdpbmF0aW9uJyksXHJcblx0UmVzcG9uc2l2ZVRleHQ6IHJlcXVpcmUoJy4vUmVzcG9uc2l2ZVRleHQnKSxcclxuXHRTY3JlZW5SZWFkZXJPbmx5OiByZXF1aXJlKCcuL1NjcmVlblJlYWRlck9ubHknKSxcclxuXHRTZWdtZW50ZWRDb250cm9sOiByZXF1aXJlKCcuL1NlZ21lbnRlZENvbnRyb2wnKSxcclxuXHRTcGlubmVyOiByZXF1aXJlKCcuL1NwaW5uZXInKSxcclxufTtcclxuIiwiLyoqXHJcbiAqIFRoaXMgaXMgdGhlIG1haW4gZW50cnkgZmlsZSwgd2hpY2ggd2UgY29tcGlsZSB0aGUgbWFpbiBKUyBidW5kbGUgZnJvbS4gSXRcclxuICogb25seSBjb250YWlucyB0aGUgY2xpZW50IHNpZGUgcm91dGluZyBzZXR1cC5cclxuICovXHJcblxyXG4vLyBOZWVkZWQgZm9yIEVTNiBnZW5lcmF0b3JzIChyZWR1eC1zYWdhKSB0byB3b3JrXHJcbmltcG9ydCAnYmFiZWwtcG9seWZpbGwnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgUm91dGVyLCBSb3V0ZSwgYnJvd3Nlckhpc3RvcnksIEluZGV4Um91dGUgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHsgc3luY0hpc3RvcnlXaXRoU3RvcmUgfSBmcm9tICdyZWFjdC1yb3V0ZXItcmVkdXgnO1xyXG5cclxuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XHJcbmltcG9ydCBIb21lIGZyb20gJy4vc2NyZWVucy9Ib21lJztcclxuaW1wb3J0IEl0ZW0gZnJvbSAnLi9zY3JlZW5zL0l0ZW0nO1xyXG5pbXBvcnQgTGlzdCBmcm9tICcuL3NjcmVlbnMvTGlzdCc7XHJcblxyXG5pbXBvcnQgc3RvcmUgZnJvbSAnLi9zdG9yZSc7XHJcblxyXG4vLyBTeW5jIHRoZSBicm93c2VyIGhpc3RvcnkgdG8gdGhlIFJlZHV4IHN0b3JlXHJcbmNvbnN0IGhpc3RvcnkgPSBzeW5jSGlzdG9yeVdpdGhTdG9yZShicm93c2VySGlzdG9yeSwgc3RvcmUpO1xyXG5cclxuLy8gSW5pdGlhbGlzZSBLZXlzdG9uZS5Vc2VyIGxpc3RcclxuaW1wb3J0IHsgbGlzdHNCeUtleSB9IGZyb20gJy4uL3V0aWxzL2xpc3RzJztcclxuS2V5c3RvbmUuVXNlciA9IGxpc3RzQnlLZXlbS2V5c3RvbmUudXNlckxpc3RdO1xyXG5cclxuUmVhY3RET00ucmVuZGVyKFxyXG5cdDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG5cdFx0PFJvdXRlciBoaXN0b3J5PXtoaXN0b3J5fT5cclxuXHRcdFx0PFJvdXRlIHBhdGg9e0tleXN0b25lLmFkbWluUGF0aH0gY29tcG9uZW50PXtBcHB9PlxyXG5cdFx0XHRcdDxJbmRleFJvdXRlIGNvbXBvbmVudD17SG9tZX0gLz5cclxuXHRcdFx0XHQ8Um91dGUgcGF0aD1cIjpsaXN0SWRcIiBjb21wb25lbnQ9e0xpc3R9IC8+XHJcblx0XHRcdFx0PFJvdXRlIHBhdGg9XCI6bGlzdElkLzppdGVtSWRcIiBjb21wb25lbnQ9e0l0ZW19IC8+XHJcblx0XHRcdDwvUm91dGU+XHJcblx0XHQ8L1JvdXRlcj5cclxuXHQ8L1Byb3ZpZGVyPixcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3Qtcm9vdCcpXHJcbik7XHJcbiIsImltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJ2xvZGFzaC9pc1BsYWluT2JqZWN0JztcclxuaW1wb3J0IGlzQXJyYXkgZnJvbSAnbG9kYXNoL2lzQXJyYXknO1xyXG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnbG9kYXNoL2lzT2JqZWN0JztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIGV4cGFuZGVkIGZpbHRlciBvYmplY3RzLFxyXG4gKiBnaXZlbiAoYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gfCBhbiBhcnJheSBvZiBmaWx0ZXJzKSBhbmQgYSBjdXJyZW50TGlzdCBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7IFN0cmluZ3xBcnJheSB9IEVpdGhlciBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhbiBhcnJheSBvZiBmaWx0ZXIgb2JqZWN0cywgb3IgYW4gYXJyYXkgb2YgZmlsdGVyIG9iamVjdHMuXHJcbiAqIEBwYXJhbSB7IE9iamVjdCB9IHRoZSBjdXJyZW50IGluc3RhbnRpYXRpb24gb2YgdGhlIExpc3QgcHJvdG90eXBlIHVzZWQgZm9yIHRoZSA8TGlzdC8+IHNjZW5lXHJcbiAqIEByZXR1cm4geyBBcnJheSB9IG9mIHsgT2JqZWN0cyB9IGFzIGFuIGV4cGFuZGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBmaWx0ZXJzIHBhc3NlZCBpbi5cclxuICoqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcnNQYXJzZXIgKGZpbHRlcnMsIGN1cnJlbnRMaXN0KSB7XHJcblx0aWYgKHR5cGVvZiBmaWx0ZXJzID09PSAnc3RyaW5nJykge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0ZmlsdGVycyA9IEpTT04ucGFyc2UoZmlsdGVycyk7XHJcblx0XHR9IGNhdGNoIChlKSB7XHJcblx0XHRcdGNvbnNvbGUud2FybignSW52YWxpZCBmaWx0ZXJzIHByb3ZpZGVkJywgZmlsdGVycyk7XHJcblx0XHRcdGZpbHRlcnMgPSB2b2lkIDA7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoIWZpbHRlcnMpIHJldHVybiBbXTtcclxuXHJcblx0Y29uc3QgYXNzZW1ibGVkRmlsdGVycyA9IGZpbHRlcnMubWFwKGZpbHRlciA9PiB7XHJcblx0XHRjb25zdCBwYXRoID0gZmlsdGVyLnBhdGg7XHJcblx0XHRjb25zdCB2YWx1ZSA9IE9iamVjdC5hc3NpZ24oe30sIGZpbHRlcik7XHJcblx0XHRkZWxldGUgdmFsdWUucGF0aDtcclxuXHRcdHJldHVybiBjcmVhdGVGaWx0ZXJPYmplY3QocGF0aCwgdmFsdWUsIGN1cnJlbnRMaXN0LmZpZWxkcyk7XHJcblx0fSk7XHJcblxyXG5cdGZpbHRlcnMgPSBhc3NlbWJsZWRGaWx0ZXJzLmZpbHRlcihmaWx0ZXIgPT4gZmlsdGVyKTtcclxuXHRyZXR1cm4gZmlsdGVycztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgZXhwYW5kZWQgZmlsdGVyIG9iamVjdHMsXHJcbiAqIGdpdmVuIChhIHN0cmluZyByZXByZXNlbnRhdGlvbiB8IGFuIGFycmF5IG9mIGZpbHRlcnMpIGFuZCBhIGN1cnJlbnRMaXN0IG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIHsgT2JqZWN0IH0gRmlsdGVyIG9iamVjdCAgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGtleSB2YWx1ZSBwYWlycyB7cGF0aH0gYW5kIHt2YWx1ZX0uXHJcbiAqIEBwYXJhbSB7IEFycmF5IH0gb2YgeyBPYmplY3RzIH0gYW4gYXJyYXkgb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgZmlsdGVycy5cclxuICogQHBhcmFtIHsgT2JqZWN0IH0gdGhlIGN1cnJlbnQgaW5zdGFudGlhdGlvbiBvZiB0aGUgTGlzdCBwcm90b3R5cGUgdXNlZCBmb3IgdGhlIDxMaXN0Lz4gc2NlbmVcclxuICogQHJldHVybiB7IE9iamVjdCB9IGFuIGV4cGFuZGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwYXNzZWQgaW4gZmlsdGVyIHsgT2JqZWN0IH0uXHJcbiAqKi9cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyUGFyc2VyICh7IHBhdGgsIHZhbHVlIH0sIGFjdGl2ZUZpbHRlcnMsIGN1cnJlbnRMaXN0KSB7XHJcblx0aWYgKCFhY3RpdmVGaWx0ZXJzIHx8ICFpc0FycmF5KGFjdGl2ZUZpbHRlcnMpKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2FjdGl2ZUZpbHRlcnMgbXVzdCBiZSBhbiBhcnJheScpO1xyXG5cdH1cclxuXHRpZiAoIWN1cnJlbnRMaXN0KSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ05vIGN1cnJlbnRMaXN0IHNlbGVjdGVkJyk7XHJcblx0fVxyXG5cclxuXHRpZiAoIWlzT2JqZWN0KGN1cnJlbnRMaXN0KSB8fCBpc0FycmF5KGN1cnJlbnRMaXN0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdjdXJyZW50TGlzdCBpcyBleHBlY3RlZCB0byBiZSBhbiB7IE9iamVjdCB9JywgY3VycmVudExpc3QpO1xyXG5cdH1cclxuXHJcblx0bGV0IGZpbHRlciA9IGFjdGl2ZUZpbHRlcnMuZmlsdGVyKGkgPT4gaS5maWVsZC5wYXRoID09PSBwYXRoKVswXTtcclxuXHRpZiAoZmlsdGVyKSB7XHJcblx0XHRmaWx0ZXIudmFsdWUgPSB2YWx1ZTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0ZmlsdGVyID0gY3JlYXRlRmlsdGVyT2JqZWN0KHBhdGgsIHZhbHVlLCBjdXJyZW50TGlzdC5maWVsZHMpO1xyXG5cdFx0aWYgKCFmaWx0ZXIpIHtcclxuXHRcdFx0cmV0dXJuIHZvaWQgMDtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGZpbHRlcjtcclxufVxyXG5cclxuLypcclxuKiBUaGlzIG1ldGhvZCBpcyBhIHV0aWwsIGJ1dCBoYXMgc3VjaCBhIHNwZWNpZmljIHVzZSB0aGF0IGl0IGlzIGJlaW5nIGxlZnQgd2l0aGluXHJcbiogdGhlIGZpbGUgdGhhdCB1c2VzIGl0LlxyXG4qL1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmaWx0ZXIgb2JqZWN0XHJcbiAqIGdpdmVuIGEgcGF0aCwgYSB2YWx1ZSwgYW5kIHRoZSBmaWVsZHMgd2l0aGluIGFuIGluc3RhbmNlIG9mIHRoZSBMaXN0IHByb3RvdHlwZS5cclxuICpcclxuICogQHBhcmFtIHsgU3RyaW5nIH0gZmlsdGVyIHBhdGhcclxuICogQHBhcmFtIHsgT2JqZWN0IH0gb2YgZmlsdGVyIHZhbHVlcy5cclxuICogQHBhcmFtIHsgT2JqZWN0IH0gb2YgZmllbGRzIGZyb20gdGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgdGhlIExpc3QgcHJvdG90eXBlLlxyXG4gKiBAcmV0dXJuIHsgT2JqZWN0IH0gYSBmaWx0ZXIgY29tcHJpc2VkIG9mIHRoZTpmaWx0ZXJzLmpzXHJcbiAqXHQtIGNvcnJlc3BvbmRpbmcgZmllbGQgdmFsdWUgd2l0aGluIHRoZSBjdXJyZW50IExpc3QsXHJcbiAqXHQtIGFuZCB0aGUgcGFzc2VkIGluIHZhbHVlIHsgT2JqZWN0IH0uXHJcbiAqKi9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaWx0ZXJPYmplY3QgKHBhdGgsIHZhbHVlLCBjdXJyZW50TGlzdEZpZWxkcykge1xyXG5cdGlmICghY3VycmVudExpc3RGaWVsZHMgfHwgIWlzUGxhaW5PYmplY3QoY3VycmVudExpc3RGaWVsZHMpKSB7XHJcblx0XHRjb25zb2xlLndhcm4oJ2N1cnJlbnRMaXN0RmllbGRzIG11c3QgYmUgYSBwbGFpbiBvYmplY3QnLCBjdXJyZW50TGlzdEZpZWxkcyk7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHRjb25zdCBmaWVsZCA9IGN1cnJlbnRMaXN0RmllbGRzW3BhdGhdO1xyXG5cclxuXHRpZiAoIWZpZWxkKSB7XHJcblx0XHRjb25zb2xlLndhcm4oJ0ludmFsaWQgRmlsdGVyIHBhdGggc3BlY2lmaWVkOicsIHBhdGgpO1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdGZpZWxkLFxyXG5cdFx0dmFsdWUsXHJcblx0fTtcclxufVxyXG4iLCJpbXBvcnQgeyBmaWx0ZXJzUGFyc2VyLCBmaWx0ZXJQYXJzZXIsIGNyZWF0ZUZpbHRlck9iamVjdCB9IGZyb20gJy4vZmlsdGVycy5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBhcnJheSBvZiBleHBhbmRlZCBjb2x1bW5zIG9iamVjdCwgZ2l2ZW4gYSBsaXN0IG9mIGNvbHVtbnMgYW5kIGN1cnJlbnRMaXN0IG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIHsgU3RyaW5nIH0gY29sdW1ucywgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBsaXN0IG9mIGNvbHVtbnMuXHJcbiAqIEBwYXJhbSB7IE9iamVjdCB9IHRoZSBjdXJyZW50IGluc3RhbnRpYXRpb24gb2YgdGhlIExpc3QgcHJvdG90eXBlIHVzZWQgZm9yIHRoZSA8TGlzdC8+IHNjZW5lXHJcbiAqIEByZXR1cm4geyBBcnJheSB9IG9mIHsgT2JqZWN0cyB9IGFzIGFuIGV4cGFuZGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb2x1bW4gdmFsdWVzIHBhc3NlZCBpbi5cclxuICovXHJcblxyXG5mdW5jdGlvbiBjb2x1bW5zUGFyc2VyIChjb2x1bW5zLCBjdXJyZW50TGlzdCkge1xyXG5cdGlmICghY3VycmVudExpc3QpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignTm8gY3VycmVudExpc3Qgc2VsZWN0ZWQnKTtcclxuXHR9XHJcblx0aWYgKCFjb2x1bW5zIHx8IGNvbHVtbnMubGVuZ3RoID09PSAwKSB7XHJcblx0XHRyZXR1cm4gY3VycmVudExpc3QuZXhwYW5kQ29sdW1ucyhjdXJyZW50TGlzdC5kZWZhdWx0Q29sdW1ucyk7XHJcblx0fVxyXG5cdHJldHVybiBjdXJyZW50TGlzdC5leHBhbmRDb2x1bW5zKGNvbHVtbnMpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gZXhwYW5kZWQgc29ydCBvYmplY3QsIGdpdmVuIGEgc29ydCBwYXRoIGFuZCBjdXJyZW50TGlzdCBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7IFN0cmluZyB9IHBhdGgsIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgbGlzdCBvZiBjb2x1bW5zLlxyXG4gKiBAcGFyYW0geyBPYmplY3QgfSB0aGUgY3VycmVudCBpbnN0YW50aWF0aW9uIG9mIHRoZSBMaXN0IHByb3RvdHlwZSB1c2VkIGZvciB0aGUgPExpc3QvPiBzY2VuZVxyXG4gKiBAcmV0dXJuIHsgT2JqZWN0IH0gYW4gZXhwYW5kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHNvcnQgcGF0aCBwYXNzZWQgaW4uXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gc29ydFBhcnNlciAocGF0aCwgY3VycmVudExpc3QpIHtcclxuXHRpZiAoIWN1cnJlbnRMaXN0KSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ05vIGN1cnJlbnRMaXN0IHNlbGVjdGVkJyk7XHJcblx0fVxyXG5cdGlmICghcGF0aCkgcmV0dXJuIGN1cnJlbnRMaXN0LmV4cGFuZFNvcnQoY3VycmVudExpc3QuZGVmYXVsdFNvcnQpO1xyXG5cdHJldHVybiBjdXJyZW50TGlzdC5leHBhbmRTb3J0KHBhdGgpO1xyXG59XHJcblxyXG5leHBvcnQge1xyXG5cdGNyZWF0ZUZpbHRlck9iamVjdCxcclxuXHRmaWx0ZXJzUGFyc2VyLFxyXG5cdGZpbHRlclBhcnNlcixcclxuXHRzb3J0UGFyc2VyLFxyXG5cdGNvbHVtbnNQYXJzZXIsXHJcbn07XHJcbiIsImltcG9ydCB7IHRha2VMYXRlc3QsIGRlbGF5IH0gZnJvbSAncmVkdXgtc2FnYSc7XHJcbmltcG9ydCB7IGZvcmssIHNlbGVjdCwgcHV0LCB0YWtlLCBjYWxsIH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcclxuXHJcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vc2NyZWVucy9MaXN0L2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IHVwZGF0ZVBhcmFtcywgZXZhbFF1ZXJ5UGFyYW1zIH0gZnJvbSAnLi9xdWVyeVBhcmFtc1NhZ2FzJztcclxuaW1wb3J0IHsgY29sdW1uc1BhcnNlciwgc29ydFBhcnNlciwgZmlsdGVyUGFyc2VyIH0gZnJvbSAnLi4vcGFyc2Vycyc7XHJcblxyXG4vKipcclxuICogRGVib3VuY2UgdGhlIHNlYXJjaCBsb2FkaW5nIG5ldyBpdGVtcyBieSA1MDBtc1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uICogZGVib3VuY2VkU2VhcmNoICgpIHtcclxuXHRjb25zdCBzZWFyY2hTdHJpbmcgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5hY3RpdmUuc2VhcmNoKTtcclxuXHRpZiAoc2VhcmNoU3RyaW5nKSB7XHJcblx0XHR5aWVsZCBkZWxheSg1MDApO1xyXG5cdH1cclxuXHR5aWVsZCBjYWxsKHVwZGF0ZVBhcmFtcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiAqIHNldEFjdGl2ZUNvbHVtbnNTYWdhICgpIHtcclxuXHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0Y29uc3QgeyBjb2x1bW5zIH0gPSB5aWVsZCB0YWtlKGFjdGlvbnMuU0VMRUNUX0FDVElWRV9DT0xVTU5TKTtcclxuXHRcdGNvbnN0IHsgY3VycmVudExpc3QgfSA9IHlpZWxkIHNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5saXN0cyk7XHJcblx0XHRjb25zdCBuZXdDb2x1bW5zID0geWllbGQgY2FsbChjb2x1bW5zUGFyc2VyLCBjb2x1bW5zLCBjdXJyZW50TGlzdCk7XHJcblx0XHR5aWVsZCBwdXQoeyB0eXBlOiBhY3Rpb25zLlNFVF9BQ1RJVkVfQ09MVU1OUywgY29sdW1uczogbmV3Q29sdW1ucyB9KTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiAqIHNldEFjdGl2ZVNvcnRTYWdhICgpIHtcclxuXHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0Y29uc3QgeyBwYXRoIH0gPSB5aWVsZCB0YWtlKGFjdGlvbnMuU0VMRUNUX0FDVElWRV9TT1JUKTtcclxuXHRcdGNvbnN0IHsgY3VycmVudExpc3QgfSA9IHlpZWxkIHNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5saXN0cyk7XHJcblx0XHRjb25zdCBzb3J0ID0geWllbGQgY2FsbChzb3J0UGFyc2VyLCBwYXRoLCBjdXJyZW50TGlzdCk7XHJcblxyXG5cdFx0eWllbGQgcHV0KHsgdHlwZTogYWN0aW9ucy5TRVRfQUNUSVZFX1NPUlQsIHNvcnQgfSk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gKiBzZXRBY3RpdmVGaWx0ZXJTYWdhICgpIHtcclxuXHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0Y29uc3QgeyBmaWx0ZXIgfSA9IHlpZWxkIHRha2UoYWN0aW9ucy5TRUxFQ1RfRklMVEVSKTtcclxuXHRcdGNvbnN0IHsgY3VycmVudExpc3QgfSA9IHlpZWxkIHNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5saXN0cyk7XHJcblx0XHRjb25zdCBhY3RpdmVGaWx0ZXJzID0geWllbGQgc2VsZWN0KHN0YXRlID0+IHN0YXRlLmFjdGl2ZS5maWx0ZXJzKTtcclxuXHRcdGNvbnN0IHVwZGF0ZWRGaWx0ZXIgPSB5aWVsZCBjYWxsKGZpbHRlclBhcnNlciwgZmlsdGVyLCBhY3RpdmVGaWx0ZXJzLCBjdXJyZW50TGlzdCk7XHJcblxyXG5cdFx0eWllbGQgcHV0KHsgdHlwZTogYWN0aW9ucy5BRERfRklMVEVSLCBmaWx0ZXI6IHVwZGF0ZWRGaWx0ZXIgfSk7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiAqIHJvb3RTYWdhICgpIHtcclxuXHR5aWVsZCBmb3JrKHRha2VMYXRlc3QsIGFjdGlvbnMuU0VUX0FDVElWRV9TRUFSQ0gsIGRlYm91bmNlZFNlYXJjaCk7XHJcblx0eWllbGQgZm9yayh0YWtlTGF0ZXN0LCBhY3Rpb25zLlNFVF9BQ1RJVkVfTElTVCwgZXZhbFF1ZXJ5UGFyYW1zKTtcclxuXHQvLyBJZiBvbmUgb2YgdGhlIG90aGVyIGFjdGl2ZSBwcm9wZXJ0aWVzIGNoYW5nZXMsIHVwZGF0ZSB0aGUgcXVlcnkgcGFyYW1zIGFuZCBsb2FkIHRoZSBuZXcgaXRlbXNcclxuXHR5aWVsZCBmb3JrKHNldEFjdGl2ZVNvcnRTYWdhKTtcclxuXHR5aWVsZCBmb3JrKHNldEFjdGl2ZUNvbHVtbnNTYWdhKTtcclxuXHR5aWVsZCBmb3JrKHNldEFjdGl2ZUZpbHRlclNhZ2EpO1xyXG5cclxuXHR5aWVsZCBmb3JrKHRha2VMYXRlc3QsIFtcclxuXHRcdGFjdGlvbnMuUVVFUllfSEFTX0NIQU5HRUQsXHJcblx0XHRhY3Rpb25zLkFERF9GSUxURVIsXHJcblx0XHRhY3Rpb25zLlNFVF9BQ1RJVkVfQ09MVU1OUyxcclxuXHRcdGFjdGlvbnMuU0VUX0FDVElWRV9TT1JULFxyXG5cdFx0YWN0aW9ucy5TRVRfQ1VSUkVOVF9QQUdFLFxyXG5cdFx0YWN0aW9ucy5DTEVBUl9GSUxURVIsXHJcblx0XHRhY3Rpb25zLkNMRUFSX0FMTF9GSUxURVJTLFxyXG5cdF0sIHVwZGF0ZVBhcmFtcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvb3RTYWdhO1xyXG4iLCJpbXBvcnQgeyB1cGRhdGVRdWVyeVBhcmFtcywgc3RyaW5naWZ5Q29sdW1ucywgcGFyYW1ldGl6ZUZpbHRlcnMsIGNyZWF0ZVNvcnRRdWVyeVBhcmFtcywgY3JlYXRlUGFnZVF1ZXJ5UGFyYW1zIH0gZnJvbSAnLi4vLi4vdXRpbHMvcXVlcnlQYXJhbXMnO1xyXG5pbXBvcnQgeyByZXBsYWNlLCBwdXNoIH0gZnJvbSAncmVhY3Qtcm91dGVyLXJlZHV4JztcclxuaW1wb3J0IHsgc2VsZWN0LCBwdXQsIGNhbGwgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xyXG5pbXBvcnQgYmxhY2tsaXN0IGZyb20gJ2JsYWNrbGlzdCc7XHJcblxyXG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4uL3NjcmVlbnMvTGlzdC9jb25zdGFudHMnO1xyXG5cclxuaW1wb3J0IHsgbG9hZEl0ZW1zIH0gZnJvbSAnLi4vc2NyZWVucy9MaXN0L2FjdGlvbnMnO1xyXG5cclxuaW1wb3J0IGlzRXF1YWwgZnJvbSAnbG9kYXNoL2lzRXF1YWwnO1xyXG5pbXBvcnQgeyBjb2x1bW5zUGFyc2VyLCBzb3J0UGFyc2VyLCBmaWx0ZXJzUGFyc2VyIH0gZnJvbSAnLi4vcGFyc2Vycyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gKiB1cmxVcGRhdGUgKHF1ZXJ5LCBjYWNoZSwgcGF0aG5hbWUpIHtcclxuXHRjb25zdCBibGFja2xpc3RlZEZpZWxkID0gJ3NlYXJjaCc7XHJcblx0Y29uc3QgYXR0ZW51YXRlZFF1ZXJ5ID0gYmxhY2tsaXN0KHF1ZXJ5LCBibGFja2xpc3RlZEZpZWxkKTtcclxuXHRjb25zdCBhdHRlbnVhdGVkQ2FjaGUgPSBibGFja2xpc3QoY2FjaGUsIGJsYWNrbGlzdGVkRmllbGQpO1xyXG5cdGlmICghaXNFcXVhbChhdHRlbnVhdGVkUXVlcnksIGF0dGVudWF0ZWRDYWNoZSkpIHtcclxuXHRcdHlpZWxkIHB1dChwdXNoKHtcclxuXHRcdFx0cGF0aG5hbWUsXHJcblx0XHRcdHF1ZXJ5LFxyXG5cdFx0fSkpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR5aWVsZCBwdXQocmVwbGFjZSh7XHJcblx0XHRcdHBhdGhuYW1lLFxyXG5cdFx0XHRxdWVyeSxcclxuXHRcdH0pKTtcclxuXHR9XHJcbn1cclxuLyoqXHJcbiAqIFVwZGF0ZSB0aGUgcXVlcnkgcGFyYW1zIGJhc2VkIG9uIHRoZSBjdXJyZW50IHN0YXRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gKiB1cGRhdGVQYXJhbXMgKCkge1xyXG5cdC8vIFNlbGVjdCBhbGwgdGhlIHRoaW5nc1xyXG5cdGNvbnN0IGFjdGl2ZVN0YXRlID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUuYWN0aXZlKTtcclxuXHRjb25zdCBjdXJyZW50TGlzdCA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLmxpc3RzLmN1cnJlbnRMaXN0KTtcclxuXHRjb25zdCBsb2NhdGlvbiA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLnJvdXRpbmcubG9jYXRpb25CZWZvcmVUcmFuc2l0aW9ucyk7XHJcblx0Y29uc3QgeyBpbmRleCB9ID0geWllbGQgc2VsZWN0KChzdGF0ZSkgPT4gc3RhdGUubGlzdHMucGFnZSk7XHJcblxyXG5cdC8vIEdldCB0aGUgZGF0YSBpbnRvIHRoZSByaWdodCBmb3JtYXQsIHNldCB0aGUgZGVmYXVsdHNcclxuXHRsZXQgc29ydCA9IGNyZWF0ZVNvcnRRdWVyeVBhcmFtcyhhY3RpdmVTdGF0ZS5zb3J0LnJhd0lucHV0LCBjdXJyZW50TGlzdC5kZWZhdWx0U29ydCk7XHJcblx0bGV0IHBhZ2UgPSBjcmVhdGVQYWdlUXVlcnlQYXJhbXMoaW5kZXgsIDEpO1xyXG5cclxuXHRsZXQgY29sdW1ucyA9IHN0cmluZ2lmeUNvbHVtbnMoYWN0aXZlU3RhdGUuY29sdW1ucywgY3VycmVudExpc3QuZGVmYXVsdENvbHVtblBhdGhzKTtcclxuXHRsZXQgc2VhcmNoID0gYWN0aXZlU3RhdGUuc2VhcmNoO1xyXG5cclxuXHRsZXQgZmlsdGVycyA9IHBhcmFtZXRpemVGaWx0ZXJzKGFjdGl2ZVN0YXRlLmZpbHRlcnMpO1xyXG5cclxuXHRjb25zdCBuZXdQYXJhbXMgPSB1cGRhdGVRdWVyeVBhcmFtcyh7XHJcblx0XHRwYWdlLFxyXG5cdFx0Y29sdW1ucyxcclxuXHRcdHNvcnQsXHJcblx0XHRzZWFyY2gsXHJcblx0XHRmaWx0ZXJzLFxyXG5cdH0sIGxvY2F0aW9uKTtcclxuXHJcblx0Ly8gVE9ETzogU3RhcnRpbmcgb3IgY2xlYXJpbmcgYSBzZWFyY2ggcHVzaGVzIGEgbmV3IGhpc3Rvcnkgc3RhdGUsIGJ1dCB1cGRhdGluZ1xyXG5cdC8vIHRoZSBjdXJyZW50IHNlYXJjaCByZXBsYWNlcyBpdCBmb3IgbmljZXIgaGlzdG9yeSBuYXZpZ2F0aW9uIHN1cHBvcnRcclxuXHJcblx0eWllbGQgcHV0KHsgdHlwZTogYWN0aW9ucy5SRVBMQUNFX0NBQ0hFRF9RVUVSWSwgY2FjaGVkUXVlcnk6IG5ld1BhcmFtcyB9KTtcclxuXHR5aWVsZCAqIHVybFVwZGF0ZShuZXdQYXJhbXMsIGFjdGl2ZVN0YXRlLmNhY2hlZFF1ZXJ5LCBsb2NhdGlvbi5wYXRobmFtZSk7XHJcblx0eWllbGQgcHV0KGxvYWRJdGVtcygpKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiAqIGV2YWxRdWVyeVBhcmFtcyAoKSB7XHJcblx0Y29uc3QgeyBwYXRobmFtZSwgcXVlcnkgfSA9IHlpZWxkIHNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5yb3V0aW5nLmxvY2F0aW9uQmVmb3JlVHJhbnNpdGlvbnMpO1xyXG5cclxuXHRjb25zdCB7IGNhY2hlZFF1ZXJ5IH0gPSB5aWVsZCBzZWxlY3Qoc3RhdGUgPT4gc3RhdGUuYWN0aXZlKTtcclxuXHRjb25zdCB7IGN1cnJlbnRMaXN0IH0gPSB5aWVsZCBzZWxlY3Qoc3RhdGUgPT4gc3RhdGUubGlzdHMpO1xyXG5cclxuXHRpZiAocGF0aG5hbWUgIT09IGAke0tleXN0b25lLmFkbWluUGF0aH0vJHtjdXJyZW50TGlzdC5pZH1gKSByZXR1cm47XHJcblxyXG5cdGlmIChpc0VxdWFsKHF1ZXJ5LCBjYWNoZWRRdWVyeSkpIHtcclxuXHRcdHlpZWxkIHB1dCh7IHR5cGU6IGFjdGlvbnMuUVVFUllfSEFTX05PVF9DSEFOR0VEIH0pO1xyXG5cdFx0eWllbGQgcHV0KGxvYWRJdGVtcygpKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0Y29uc3QgcGFyc2VkUXVlcnkgPSB5aWVsZCBjYWxsKHBhcnNlUXVlcnlQYXJhbXMsIHF1ZXJ5LCBjdXJyZW50TGlzdCk7XHJcblx0XHR5aWVsZCBwdXQoeyB0eXBlOiBhY3Rpb25zLlFVRVJZX0hBU19DSEFOR0VELCBwYXJzZWRRdWVyeSB9KTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVF1ZXJ5UGFyYW1zIChxdWVyeSwgY3VycmVudExpc3QpIHtcclxuXHRjb25zdCBjb2x1bW5zID0gY29sdW1uc1BhcnNlcihxdWVyeS5jb2x1bW5zLCBjdXJyZW50TGlzdCk7XHJcblx0Y29uc3Qgc29ydCA9IHNvcnRQYXJzZXIocXVlcnkuc29ydCwgY3VycmVudExpc3QpO1xyXG5cdGNvbnN0IGZpbHRlcnMgPSBmaWx0ZXJzUGFyc2VyKHF1ZXJ5LmZpbHRlcnMsIGN1cnJlbnRMaXN0KTtcclxuXHRjb25zdCBjdXJyZW50UGFnZSA9IHF1ZXJ5LnBhZ2UgfHwgMTtcclxuXHRjb25zdCBzZWFyY2ggPSBxdWVyeS5zZWFyY2ggfHwgJyc7XHJcblxyXG5cdHJldHVybiB7XHJcblx0XHRjb2x1bW5zLFxyXG5cdFx0c29ydCxcclxuXHRcdGZpbHRlcnMsXHJcblx0XHRjdXJyZW50UGFnZSxcclxuXHRcdHNlYXJjaCxcclxuXHR9O1xyXG59XHJcbiIsImltcG9ydCB4aHIgZnJvbSAneGhyJztcclxuaW1wb3J0IHtcclxuXHRMT0FEX0NPVU5UUyxcclxuXHRDT1VOVFNfTE9BRElOR19TVUNDRVNTLFxyXG5cdENPVU5UU19MT0FESU5HX0VSUk9SLFxyXG59IGZyb20gJy4vY29uc3RhbnRzJztcclxuaW1wb3J0IHsgTkVUV09SS19FUlJPUl9SRVRSWV9ERUxBWSB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cyc7XHJcblxyXG4vKipcclxuICogTG9hZCB0aGUgY291bnRzIG9mIGFsbCBsaXN0c1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRDb3VudHMgKCkge1xyXG5cdHJldHVybiAoZGlzcGF0Y2gpID0+IHtcclxuXHRcdGRpc3BhdGNoKHtcclxuXHRcdFx0dHlwZTogTE9BRF9DT1VOVFMsXHJcblx0XHR9KTtcclxuXHRcdHhocih7XHJcblx0XHRcdHVybDogYCR7S2V5c3RvbmUuYWRtaW5QYXRofS9hcGkvY291bnRzYCxcclxuXHRcdH0sIChlcnIsIHJlc3AsIGJvZHkpID0+IHtcclxuXHRcdFx0aWYgKGVycikge1xyXG5cdFx0XHRcdGRpc3BhdGNoKGNvdW50c0xvYWRpbmdFcnJvcihlcnIpKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRib2R5ID0gSlNPTi5wYXJzZShib2R5KTtcclxuXHRcdFx0XHRpZiAoYm9keS5jb3VudHMpIHtcclxuXHRcdFx0XHRcdGRpc3BhdGNoKGNvdW50c0xvYWRlZChib2R5LmNvdW50cykpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdFcnJvciBwYXJzaW5nIHJlc3VsdHMganNvbjonLCBlLCBib2R5KTtcclxuXHRcdFx0XHRkaXNwYXRjaChjb3VudHNMb2FkaW5nRXJyb3IoZSkpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIERpc3BhdGNoZWQgd2hlbiB0aGUgY291bnRzIHdlcmUgbG9hZGVkXHJcbiAqXHJcbiAqIEBwYXJhbSAge09iamVjdH0gY291bnRzIFRoZSBjb3VudHMgb2JqZWN0IGFzIHJldHVybmVkIGJ5IHRoZSBBUElcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3VudHNMb2FkZWQgKGNvdW50cykge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBDT1VOVFNfTE9BRElOR19TVUNDRVNTLFxyXG5cdFx0Y291bnRzLFxyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEaXNwYXRjaGVkIHdoZW4gdW5zdWNjZXNzZnVsbHkgdHJ5aW5nIHRvIGxvYWQgdGhlIGNvdW50cywgd2lsbCByZWRpc3BhdGNoXHJcbiAqIGxvYWRDb3VudHMgYWZ0ZXIgTkVUV09SS19FUlJPUl9SRVRSWV9ERUxBWSB1bnRpbCB3ZSBnZXQgY291bnRzIGJhY2tcclxuICpcclxuICogQHBhcmFtICB7b2JqZWN0fSBlcnJvciBUaGUgZXJyb3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3VudHNMb2FkaW5nRXJyb3IgKGVycm9yKSB7XHJcblx0cmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuXHRcdGRpc3BhdGNoKHtcclxuXHRcdFx0dHlwZTogQ09VTlRTX0xPQURJTkdfRVJST1IsXHJcblx0XHRcdGVycm9yLFxyXG5cdFx0fSk7XHJcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0ZGlzcGF0Y2gobG9hZENvdW50cygpKTtcclxuXHRcdH0sIE5FVFdPUktfRVJST1JfUkVUUllfREVMQVkpO1xyXG5cdH07XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcblxyXG4vKipcclxuICogRGlzcGxheXMgaW5mb3JtYXRpb24gYWJvdXQgYSBsaXN0IGFuZCBsZXRzIHlvdSBjcmVhdGUgYSBuZXcgb25lLlxyXG4gKi9cclxudmFyIExpc3RUaWxlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0Y291bnQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRoaWRlQ3JlYXRlQnV0dG9uOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuXHRcdGhyZWY6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRsYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdHBhdGg6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRzcGlubmVyOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHZhciBvcHRzID0ge1xyXG5cdFx0XHQnZGF0YS1saXN0LXBhdGgnOiB0aGlzLnByb3BzLnBhdGgsXHJcblx0XHR9O1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJkYXNoYm9hcmQtZ3JvdXBfX2xpc3RcIiB7Li4ub3B0c30+XHJcblx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwiZGFzaGJvYXJkLWdyb3VwX19saXN0LWlubmVyXCI+XHJcblx0XHRcdFx0XHQ8TGluayB0bz17dGhpcy5wcm9wcy5ocmVmfSBjbGFzc05hbWU9XCJkYXNoYm9hcmQtZ3JvdXBfX2xpc3QtdGlsZVwiPlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImRhc2hib2FyZC1ncm91cF9fbGlzdC1sYWJlbFwiPnt0aGlzLnByb3BzLmxhYmVsfTwvZGl2PlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImRhc2hib2FyZC1ncm91cF9fbGlzdC1jb3VudFwiPnt0aGlzLnByb3BzLnNwaW5uZXIgfHwgdGhpcy5wcm9wcy5jb3VudH08L2Rpdj5cclxuXHRcdFx0XHRcdDwvTGluaz5cclxuXHRcdFx0XHRcdHsvKiBJZiB3ZSB3YW50IHRvIGNyZWF0ZSBhIG5ldyBsaXN0LCB3ZSBhcHBlbmQgP2NyZWF0ZSwgd2hpY2ggb3BlbnMgdGhlXHJcblx0XHRcdFx0XHRcdGNyZWF0ZSBmb3JtIG9uIHRoZSBuZXcgcGFnZSEgKi99XHJcblx0XHRcdFx0XHR7KCF0aGlzLnByb3BzLmhpZGVDcmVhdGVCdXR0b24pICYmIChcclxuXHRcdFx0XHRcdFx0PExpbmtcclxuXHRcdFx0XHRcdFx0XHR0bz17dGhpcy5wcm9wcy5ocmVmICsgJz9jcmVhdGUnfVxyXG5cdFx0XHRcdFx0XHRcdGNsYXNzTmFtZT1cImRhc2hib2FyZC1ncm91cF9fbGlzdC1jcmVhdGUgb2N0aWNvbiBvY3RpY29uLXBsdXNcIlxyXG5cdFx0XHRcdFx0XHRcdHRpdGxlPVwiQ3JlYXRlXCJcclxuXHRcdFx0XHRcdFx0XHR0YWJJbmRleD1cIi0xXCJcclxuXHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdCl9XHJcblx0XHRcdFx0PC9zcGFuPlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RUaWxlO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5cclxuaW1wb3J0IHsgcGx1cmFsIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvc3RyaW5nJztcclxuaW1wb3J0IExpc3RUaWxlIGZyb20gJy4vTGlzdFRpbGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIExpc3RzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJkYXNoYm9hcmQtZ3JvdXBfX2xpc3RzXCI+XHJcblx0XHRcdFx0e18ubWFwKHRoaXMucHJvcHMubGlzdHMsIChsaXN0LCBrZXkpID0+IHtcclxuXHRcdFx0XHRcdC8vIElmIGFuIG9iamVjdCBpcyBwYXNzZWQgaW4gdGhlIGtleSBpcyB0aGUgaW5kZXgsXHJcblx0XHRcdFx0XHQvLyBpZiBhbiBhcnJheSBpcyBwYXNzZWQgaW4gdGhlIGtleSBpcyBhdCBsaXN0LmtleVxyXG5cdFx0XHRcdFx0Y29uc3QgbGlzdEtleSA9IGxpc3Qua2V5IHx8IGtleTtcclxuXHRcdFx0XHRcdGNvbnN0IGhyZWYgPSBsaXN0LmV4dGVybmFsID8gbGlzdC5wYXRoIDogYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2xpc3QucGF0aH1gO1xyXG5cdFx0XHRcdFx0Y29uc3QgbGlzdERhdGEgPSB0aGlzLnByb3BzLmxpc3RzRGF0YVtsaXN0LnBhdGhdO1xyXG5cdFx0XHRcdFx0Y29uc3QgaXNOb0NyZWF0ZSA9IGxpc3REYXRhID8gbGlzdERhdGEubm9jcmVhdGUgOiBmYWxzZTtcclxuXHRcdFx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0XHRcdDxMaXN0VGlsZVxyXG5cdFx0XHRcdFx0XHRcdGtleT17bGlzdC5wYXRofVxyXG5cdFx0XHRcdFx0XHRcdHBhdGg9e2xpc3QucGF0aH1cclxuXHRcdFx0XHRcdFx0XHRsYWJlbD17bGlzdC5sYWJlbH1cclxuXHRcdFx0XHRcdFx0XHRoaWRlQ3JlYXRlQnV0dG9uPXtpc05vQ3JlYXRlfVxyXG5cdFx0XHRcdFx0XHRcdGhyZWY9e2hyZWZ9XHJcblx0XHRcdFx0XHRcdFx0Y291bnQ9e3BsdXJhbCh0aGlzLnByb3BzLmNvdW50c1tsaXN0S2V5XSwgJyogSXRlbScsICcqIEl0ZW1zJyl9XHJcblx0XHRcdFx0XHRcdFx0c3Bpbm5lcj17dGhpcy5wcm9wcy5zcGlubmVyfVxyXG5cdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9KX1cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH1cclxufVxyXG5cclxuTGlzdHMucHJvcFR5cGVzID0ge1xyXG5cdGNvdW50czogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG5cdGxpc3RzOiBSZWFjdC5Qcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFJlYWN0LlByb3BUeXBlcy5hcnJheSxcclxuXHRcdFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXHJcblx0XSkuaXNSZXF1aXJlZCxcclxuXHRzcGlubmVyOiBSZWFjdC5Qcm9wVHlwZXMubm9kZSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoKHN0YXRlKSA9PiB7XHJcblx0cmV0dXJuIHtcclxuXHRcdGxpc3RzRGF0YTogc3RhdGUubGlzdHMuZGF0YSxcclxuXHR9O1xyXG59KShMaXN0cyk7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBnZXRSZWxhdGVkSWNvbkNsYXNzIGZyb20gJy4uL3V0aWxzL2dldFJlbGF0ZWRJY29uQ2xhc3MnO1xyXG5cclxuY2xhc3MgU2VjdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IGljb25DbGFzcyA9IHRoaXMucHJvcHMuaWNvbiB8fCBnZXRSZWxhdGVkSWNvbkNsYXNzKHRoaXMucHJvcHMuaWQpO1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJkYXNoYm9hcmQtZ3JvdXBcIiBkYXRhLXNlY3Rpb24tbGFiZWw9e3RoaXMucHJvcHMubGFiZWx9PlxyXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZGFzaGJvYXJkLWdyb3VwX19oZWFkaW5nXCI+XHJcblx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2BkYXNoYm9hcmQtZ3JvdXBfX2hlYWRpbmctaWNvbiAke2ljb25DbGFzc31gfSAvPlxyXG5cdFx0XHRcdFx0e3RoaXMucHJvcHMubGFiZWx9XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0e3RoaXMucHJvcHMuY2hpbGRyZW59XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9XHJcbn1cclxuXHJcblNlY3Rpb24ucHJvcFR5cGVzID0ge1xyXG5cdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkLFxyXG5cdGljb246IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0aWQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0bGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlY3Rpb247XHJcbiIsImV4cG9ydCBjb25zdCBMT0FEX0NPVU5UUyA9ICdhcHAvSG9tZS9MT0FEX0NPVU5UUyc7XHJcbmV4cG9ydCBjb25zdCBDT1VOVFNfTE9BRElOR19TVUNDRVNTID0gJ2FwcC9Ib21lL0NPVU5UU19MT0FESU5HX1NVQ0NFU1MnO1xyXG5leHBvcnQgY29uc3QgQ09VTlRTX0xPQURJTkdfRVJST1IgPSAnYXBwL0hvbWUvQ09VTlRTX0xPQURJTkdfRVJST1InO1xyXG4iLCIvKipcclxuICogVGhlIEhvbWUgdmlldyBpcyB0aGUgdmlldyBvbmUgc2VlcyBhdCAva2V5c3RvbmUuIEl0IHNob3dzIGEgbGlzdCBvZiBhbGwgbGlzdHMsXHJcbiAqIGdyb3VwZWQgYnkgdGhlaXIgc2VjdGlvbi5cclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBDb250YWluZXIsIFNwaW5uZXIgfSBmcm9tICcuLi8uLi9lbGVtZW50YWwnO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5cclxuaW1wb3J0IExpc3RzIGZyb20gJy4vY29tcG9uZW50cy9MaXN0cyc7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gJy4vY29tcG9uZW50cy9TZWN0aW9uJztcclxuaW1wb3J0IEFsZXJ0TWVzc2FnZXMgZnJvbSAnLi4vLi4vc2hhcmVkL0FsZXJ0TWVzc2FnZXMnO1xyXG5pbXBvcnQge1xyXG5cdGxvYWRDb3VudHMsXHJcbn0gZnJvbSAnLi9hY3Rpb25zJztcclxuXHJcbnZhciBIb21lVmlldyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ0hvbWVWaWV3JyxcclxuXHRnZXRJbml0aWFsU3RhdGUgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0bW9kYWxJc09wZW46IHRydWUsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Ly8gV2hlbiBldmVyeXRoaW5nIGlzIHJlbmRlcmVkLCBzdGFydCBsb2FkaW5nIHRoZSBpdGVtIGNvdW50cyBvZiB0aGUgbGlzdHNcclxuXHQvLyBmcm9tIHRoZSBBUElcclxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XHJcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGxvYWRDb3VudHMoKSk7XHJcblx0fSxcclxuXHRnZXRTcGlubmVyICgpIHtcclxuXHRcdGlmICh0aGlzLnByb3BzLmNvdW50cyAmJiBPYmplY3Qua2V5cyh0aGlzLnByb3BzLmNvdW50cykubGVuZ3RoID09PSAwXHJcblx0XHRcdCYmICh0aGlzLnByb3BzLmVycm9yIHx8IHRoaXMucHJvcHMubG9hZGluZykpIHtcclxuXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHQ8U3Bpbm5lciAvPlxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3Qgc3Bpbm5lciA9IHRoaXMuZ2V0U3Bpbm5lcigpO1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PENvbnRhaW5lciBkYXRhLXNjcmVlbi1pZD1cImhvbWVcIj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImRhc2hib2FyZC1oZWFkZXJcIj5cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZGFzaGJvYXJkLWhlYWRpbmdcIj57S2V5c3RvbmUuYnJhbmR9PC9kaXY+XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJkYXNoYm9hcmQtZ3JvdXBzXCI+XHJcblx0XHRcdFx0XHR7KHRoaXMucHJvcHMuZXJyb3IpICYmIChcclxuXHRcdFx0XHRcdFx0PEFsZXJ0TWVzc2FnZXNcclxuXHRcdFx0XHRcdFx0XHRhbGVydHM9e3sgZXJyb3I6IHsgZXJyb3I6XHJcblx0XHRcdFx0XHRcdFx0XHRcIlRoZXJlIGlzIGEgcHJvYmxlbSB3aXRoIHRoZSBuZXR3b3JrLCB3ZSdyZSB0cnlpbmcgdG8gcmVjb25uZWN0Li4uXCIsXHJcblx0XHRcdFx0XHRcdFx0fSB9fVxyXG5cdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0KX1cclxuXHRcdFx0XHRcdHsvKiBSZW5kZXIgZmxhdCBuYXYgKi99XHJcblx0XHRcdFx0XHR7S2V5c3RvbmUubmF2LmZsYXQgPyAoXHJcblx0XHRcdFx0XHRcdDxMaXN0c1xyXG5cdFx0XHRcdFx0XHRcdGNvdW50cz17dGhpcy5wcm9wcy5jb3VudHN9XHJcblx0XHRcdFx0XHRcdFx0bGlzdHM9e0tleXN0b25lLmxpc3RzfVxyXG5cdFx0XHRcdFx0XHRcdHNwaW5uZXI9e3NwaW5uZXJ9XHJcblx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHQpIDogKFxyXG5cdFx0XHRcdFx0XHQ8ZGl2PlxyXG5cdFx0XHRcdFx0XHRcdHsvKiBSZW5kZXIgbmF2IHdpdGggc2VjdGlvbnMgKi99XHJcblx0XHRcdFx0XHRcdFx0e0tleXN0b25lLm5hdi5zZWN0aW9ucy5tYXAoKG5hdlNlY3Rpb24pID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0XHRcdFx0XHRcdDxTZWN0aW9uIGtleT17bmF2U2VjdGlvbi5rZXl9IGlkPXtuYXZTZWN0aW9uLmtleX0gbGFiZWw9e25hdlNlY3Rpb24ubGFiZWx9PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxMaXN0c1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y291bnRzPXt0aGlzLnByb3BzLmNvdW50c31cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGxpc3RzPXtuYXZTZWN0aW9uLmxpc3RzfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0c3Bpbm5lcj17c3Bpbm5lcn1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L1NlY3Rpb24+XHJcblx0XHRcdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRcdH0pfVxyXG5cdFx0XHRcdFx0XHRcdHsvKiBSZW5kZXIgb3JwaGFuZWQgbGlzdHMgKi99XHJcblx0XHRcdFx0XHRcdFx0e0tleXN0b25lLm9ycGhhbmVkTGlzdHMubGVuZ3RoID8gKFxyXG5cdFx0XHRcdFx0XHRcdFx0PFNlY3Rpb24gbGFiZWw9XCJPdGhlclwiIGljb249XCJvY3RpY29uLWRhdGFiYXNlXCI+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDxMaXN0c1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvdW50cz17dGhpcy5wcm9wcy5jb3VudHN9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bGlzdHM9e0tleXN0b25lLm9ycGhhbmVkTGlzdHN9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0c3Bpbm5lcj17c3Bpbm5lcn1cclxuXHRcdFx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0XHRcdDwvU2VjdGlvbj5cclxuXHRcdFx0XHRcdFx0XHQpIDogbnVsbH1cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHQpfVxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L0NvbnRhaW5lcj5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5leHBvcnQge1xyXG5cdEhvbWVWaWV3LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdCgoc3RhdGUpID0+ICh7XHJcblx0Y291bnRzOiBzdGF0ZS5ob21lLmNvdW50cyxcclxuXHRsb2FkaW5nOiBzdGF0ZS5ob21lLmxvYWRpbmcsXHJcblx0ZXJyb3I6IHN0YXRlLmhvbWUuZXJyb3IsXHJcbn0pKShIb21lVmlldyk7XHJcbiIsImltcG9ydCBhc3NpZ24gZnJvbSAnb2JqZWN0LWFzc2lnbic7XHJcbmltcG9ydCB7XHJcblx0TE9BRF9DT1VOVFMsXHJcblx0Q09VTlRTX0xPQURJTkdfU1VDQ0VTUyxcclxuXHRDT1VOVFNfTE9BRElOR19FUlJPUixcclxufSBmcm9tICcuL2NvbnN0YW50cyc7XHJcblxyXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XHJcblx0Y291bnRzOiB7fSxcclxuXHRsb2FkaW5nOiBmYWxzZSxcclxuXHRlcnJvcjogbnVsbCxcclxufTtcclxuXHJcbmZ1bmN0aW9uIGhvbWUgKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pIHtcclxuXHRzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcblx0XHRjYXNlIExPQURfQ09VTlRTOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGxvYWRpbmc6IHRydWUsXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBDT1VOVFNfTE9BRElOR19TVUNDRVNTOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGxvYWRpbmc6IGZhbHNlLFxyXG5cdFx0XHRcdGNvdW50czogYWN0aW9uLmNvdW50cyxcclxuXHRcdFx0XHRlcnJvcjogbnVsbCxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIENPVU5UU19MT0FESU5HX0VSUk9SOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGxvYWRpbmc6IGZhbHNlLFxyXG5cdFx0XHRcdGVycm9yOiBhY3Rpb24uZXJyb3IsXHJcblx0XHRcdH0pO1xyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0cmV0dXJuIHN0YXRlO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgaG9tZTtcclxuIiwiLyoqXHJcbiAqIEdldHMgYSByZWxhdGVkIGljb24gZm9yIGEgc3RyaW5nLCByZXR1cm5lZCBhcyBhIGNsYXNzbmFtZSB0byBiZSBhcHBsaWVkIHRvIGEgc3Bhbi4gSWYgbm8gcmVsYXRlZFxyXG4gKiBpY29uIGlzIGZvdW5kLCByZXR1cm5zIGEgY2xhc3NuYW1lIGZvciBhIGRvdCBpY29uXHJcbiAqXHJcbiAqIEBwYXJhbSAgW1N0cmluZ10gc3RyaW5nXHJcbiAqIEByZXR1cm4gW1N0cmluZ10gICAgICAgIFRoZSBjbGFzc25hbWUgb2YgdGhlIGljb25cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFJlbGF0ZWRJY29uQ2xhc3MgKHN0cmluZykge1xyXG5cdGNvbnN0IGljb25zID0gW1xyXG5cdFx0eyBpY29uOiAnYm9vaycsIHNlY3Rpb25zOiBbJ2Jvb2tzJywgJ3Bvc3RzJywgJ2Jsb2cnLCAnYmxvZy1wb3N0cycsICdzdG9yaWVzJywgJ25ld3Mtc3RvcmllcycsICdjb250ZW50J10gfSxcclxuXHRcdHsgaWNvbjogJ2JyaWVmY2FzZScsIHNlY3Rpb25zOiBbJ2J1c2luZXNzZXMnLCAnY29tcGFuaWVzJywgJ2xpc3RpbmdzJywgJ29yZ2FuaXphdGlvbnMnLCAncGFydG5lcnMnXSB9LFxyXG5cdFx0eyBpY29uOiAnY2FsZW5kYXInLCBzZWN0aW9uczogWydldmVudHMnLCAnZGF0ZXMnXSB9LFxyXG5cdFx0eyBpY29uOiAnY2xvY2snLCBzZWN0aW9uczogWydjbGFzc2VzJywgJ2hvdXJzJywgJ3RpbWVzJ10gfSxcclxuXHRcdHsgaWNvbjogJ2ZpbGUtbWVkaWEnLCBzZWN0aW9uczogWydnYWxsZXJ5JywgJ2dhbGxlcmllcycsICdpbWFnZXMnLCAncGhvdG9zJywgJ3BpY3R1cmVzJ10gfSxcclxuXHRcdHsgaWNvbjogJ2ZpbGUtdGV4dCcsIHNlY3Rpb25zOiBbJ2F0dGFjaG1lbnRzJywgJ2RvY3MnLCAnZG9jdW1lbnRzJywgJ2ZpbGVzJ10gfSxcclxuXHRcdHsgaWNvbjogJ2xvY2F0aW9uJywgc2VjdGlvbnM6IFsnbG9jYXRpb25zJywgJ21hcmtlcnMnLCAncGxhY2VzJ10gfSxcclxuXHRcdHsgaWNvbjogJ21haWwnLCBzZWN0aW9uczogWydlbWFpbHMnLCAnZW5xdWlyaWVzJ10gfSxcclxuXHRcdHsgaWNvbjogJ21lZ2FwaG9uZScsIHNlY3Rpb25zOiBbJ2Jyb2FkY2FzdHMnLCAnam9icycsICd0YWxrcyddIH0sXHJcblx0XHR7IGljb246ICdvcmdhbml6YXRpb24nLCBzZWN0aW9uczogWydjb250YWN0cycsICdjdXN0b21lcnMnLCAnZ3JvdXBzJywgJ21lbWJlcnMnLCAncGVvcGxlJywgJ3NwZWFrZXJzJywgJ3RlYW1zJywgJ3VzZXJzJ10gfSxcclxuXHRcdHsgaWNvbjogJ3BhY2thZ2UnLCBzZWN0aW9uczogWydib3hlcycsICdpdGVtcycsICdwYWNrYWdlcycsICdwYXJjZWxzJ10gfSxcclxuXHRcdHsgaWNvbjogJ3RhZycsIHNlY3Rpb25zOiBbJ3RhZ3MnXSB9LFxyXG5cdF07XHJcblx0Y29uc3QgY2xhc3NlcyA9IGljb25zXHJcblx0XHQuZmlsdGVyKG9iaiA9PiBvYmouc2VjdGlvbnMuaW5kZXhPZihzdHJpbmcpICE9PSAtMSlcclxuXHRcdC5tYXAob2JqID0+IGBvY3RpY29uIG9jdGljb24tJHtvYmouaWNvbn1gKTtcclxuXHJcblx0aWYgKCFjbGFzc2VzLmxlbmd0aCkge1xyXG5cdFx0Y2xhc3Nlcy5wdXNoKCdvY3RpY29uIG9jdGljb24tcHJpbWl0aXZlLWRvdCcpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xyXG59XHJcbiIsImltcG9ydCB7XHJcblx0U0VMRUNUX0lURU0sXHJcblx0TE9BRF9EQVRBLFxyXG5cdERBVEFfTE9BRElOR19TVUNDRVNTLFxyXG5cdERBVEFfTE9BRElOR19FUlJPUixcclxuXHREUkFHX01PVkVfSVRFTSxcclxuXHREUkFHX1JFU0VUX0lURU1TLFxyXG5cdExPQURfUkVMQVRJT05TSElQX0RBVEEsXHJcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xyXG5cclxuaW1wb3J0IHtcclxuXHRsb2FkSXRlbXMsXHJcbn0gZnJvbSAnLi4vTGlzdC9hY3Rpb25zJztcclxuXHJcbi8qKlxyXG4gKiBTZWxlY3QgYW4gaXRlbVxyXG4gKlxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGl0ZW1JZCBUaGUgaXRlbSBJRFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdEl0ZW0gKGl0ZW1JZCkge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBTRUxFQ1RfSVRFTSxcclxuXHRcdGlkOiBpdGVtSWQsXHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIExvYWQgdGhlIGl0ZW0gZGF0YSBvZiB0aGUgY3VycmVudCBpdGVtXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9hZEl0ZW1EYXRhICgpIHtcclxuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG5cdFx0Ly8gSG9sZCBvbiB0byB0aGUgaWQgb2YgdGhlIGl0ZW0gd2UgY3VycmVudGx5IHdhbnQgdG8gbG9hZC5cclxuXHRcdC8vIERpc3BhdGNoIHRoaXMgcmVmZXJlbmNlIHRvIG91ciByZWR1eCBzdG9yZSB0byBob2xkIG9uIHRvIGFzIGEgJ2xvYWRpbmdSZWYnLlxyXG5cdFx0Y29uc3QgY3VycmVudEl0ZW1JRCA9IGdldFN0YXRlKCkuaXRlbS5pZDtcclxuXHRcdGRpc3BhdGNoKHtcclxuXHRcdFx0dHlwZTogTE9BRF9EQVRBLFxyXG5cdFx0fSk7XHJcblx0XHRjb25zdCBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcblx0XHRjb25zdCBsaXN0ID0gc3RhdGUubGlzdHMuY3VycmVudExpc3Q7XHJcblxyXG5cdFx0Ly8gY29uc3QgaXRlbUlEID0gc3RhdGUuaXRlbS5pZDtcclxuXHRcdC8vIExvYWQgYSBzcGVjaWZpYyBpdGVtIHdpdGggdGhlIHV0aWxzL0xpc3QuanMgaGVscGVyXHJcblx0XHRsaXN0LmxvYWRJdGVtKHN0YXRlLml0ZW0uaWQsIHsgZHJpbGxkb3duOiB0cnVlIH0sIChlcnIsIGl0ZW1EYXRhKSA9PiB7XHJcblxyXG5cdFx0XHQvLyBPbmNlIHRoaXMgYXN5bmMgcmVxdWVzdCBoYXMgZmlyZWQgdGhpcyBjYWxsYmFjaywgY2hlY2sgdGhhdFxyXG5cdFx0XHQvLyB0aGUgaXRlbSBpZCByZWZlcmVuY2VkIGJ5IHRoaXNMb2FkUmVmIGlzIHRoZSBzYW1lIGlkXHJcblx0XHRcdC8vIHJlZmVyZW5jZWQgYnkgbG9hZGluZ1JlZiBpbiB0aGUgcmVkdXggc3RvcmUuXHJcblxyXG5cdFx0XHQvLyBJZiBpdCBpcywgdGhlbiB0aGlzIGlzIHRoZSBsYXRlc3QgcmVxdWVzdCwgYW5kIGl0IGlzIHNhZmUgdG8gcmVzb2x2ZSBpdCBub3JtYWxseS5cclxuXHRcdFx0Ly8gSWYgaXQgaXMgbm90IHRoZSBzYW1lIGlkIGhvd2V2ZXIsXHJcblx0XHRcdC8vIHRoaXMgbWVhbnMgdGhhdCB0aGlzIHJlcXVlc3QgaXMgTk9UIHRoZSBsYXRlc3QgZmlyZWQgcmVxdWVzdCxcclxuXHRcdFx0Ly8gYW5kIHNvIHdlJ2xsIGJhaWwgb3V0IG9mIGl0IGVhcmx5LlxyXG5cclxuXHRcdFx0aWYgKGdldFN0YXRlKCkuaXRlbS5pZCAhPT0gY3VycmVudEl0ZW1JRCkgcmV0dXJuO1xyXG5cdFx0XHRpZiAoZXJyIHx8ICFpdGVtRGF0YSkge1xyXG5cdFx0XHRcdGRpc3BhdGNoKGRhdGFMb2FkaW5nRXJyb3IoZXJyKSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGlzcGF0Y2goZGF0YUxvYWRlZChpdGVtRGF0YSkpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9hZFJlbGF0aW9uc2hpcEl0ZW1EYXRhICh7IGNvbHVtbnMsIHJlZkxpc3QsIHJlbGF0aW9uc2hpcCwgcmVsYXRlZEl0ZW1JZCB9KSB7XHJcblx0cmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuXHRcdHJlZkxpc3QubG9hZEl0ZW1zKHtcclxuXHRcdFx0Y29sdW1uczogY29sdW1ucyxcclxuXHRcdFx0ZmlsdGVyczogW3tcclxuXHRcdFx0XHRmaWVsZDogcmVmTGlzdC5maWVsZHNbcmVsYXRpb25zaGlwLnJlZlBhdGhdLFxyXG5cdFx0XHRcdHZhbHVlOiB7IHZhbHVlOiByZWxhdGVkSXRlbUlkIH0sXHJcblx0XHRcdH1dLFxyXG5cdFx0fSwgKGVyciwgaXRlbXMpID0+IHtcclxuXHRcdFx0Ly8gLy8gVE9ETzogaW5kaWNhdGUgcGFnaW5hdGlvbiAmIGxpbmsgdG8gbWFpbiBsaXN0IHZpZXdcclxuXHRcdFx0Ly8gdGhpcy5zZXRTdGF0ZSh7IGl0ZW1zIH0pO1xyXG5cdFx0XHRkaXNwYXRjaChyZWxhdGlvbnNoaXBEYXRhTG9hZGVkKHJlbGF0aW9uc2hpcC5wYXRoLCBpdGVtcykpO1xyXG5cdFx0fSk7XHJcblx0fTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDYWxsZWQgd2hlbiBkYXRhIG9mIHRoZSBjdXJyZW50IGl0ZW0gaXMgbG9hZGVkXHJcbiAqXHJcbiAqIEBwYXJhbSAge09iamVjdH0gZGF0YSBUaGUgaXRlbSBkYXRhXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvYWRlZCAoZGF0YSkge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBEQVRBX0xPQURJTkdfU1VDQ0VTUyxcclxuXHRcdGxvYWRpbmdSZWY6IG51bGwsXHJcblx0XHRkYXRhLFxyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWxhdGlvbnNoaXBEYXRhTG9hZGVkIChwYXRoLCBkYXRhKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IExPQURfUkVMQVRJT05TSElQX0RBVEEsXHJcblx0XHRyZWxhdGlvbnNoaXBQYXRoOiBwYXRoLFxyXG5cdFx0ZGF0YSxcclxuXHR9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENhbGxlZCB3aGVuIHRoZXJlIHdhcyBhbiBlcnJvciBkdXJpbmcgdGhlIGxvYWRpbmcgb2YgdGhlIGN1cnJlbnQgaXRlbSBkYXRhLFxyXG4gKiB3aWxsIHJldHJ5IGxvYWRpbmcgdGhlIGRhdGEgZXZlciBORVRXT1JLX0VSUk9SX1JFVFJZX0RFTEFZIG1pbGxpc2Vjb25kc1xyXG4gKlxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IGVycm9yIFRoZSBlcnJvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb2FkaW5nRXJyb3IgKGVycikge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBEQVRBX0xPQURJTkdfRVJST1IsXHJcblx0XHRsb2FkaW5nUmVmOiBudWxsLFxyXG5cdFx0ZXJyb3I6IGVycixcclxuXHR9O1xyXG59XHJcblxyXG4vKipcclxuICogRGVsZXRlcyBhbiBpdGVtIGFuZCBvcHRpb25hbGx5IHJlZGlyZWN0cyB0byB0aGUgY3VycmVudCBsaXN0IFVSTFxyXG4gKlxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGlkICAgICBUaGUgSUQgb2YgdGhlIGl0ZW0gd2Ugd2FudCB0byBkZWxldGVcclxuICogQHBhcmFtICB7T2JqZWN0fSByb3V0ZXIgQSByZWFjdC1yb3V0ZXIgcm91dGVyIG9iamVjdC4gSWYgdGhpcyBpcyBwYXNzZWQsIHdlXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0IHRvIEtleXN0b25lLmFkbWluUGF0aC9jdXJyZW50TGlzdC5wYXRoIVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUl0ZW0gKGlkLCByb3V0ZXIpIHtcclxuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG5cdFx0Y29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG5cdFx0Y29uc3QgbGlzdCA9IHN0YXRlLmxpc3RzLmN1cnJlbnRMaXN0O1xyXG5cdFx0bGlzdC5kZWxldGVJdGVtKGlkLCAoZXJyKSA9PiB7XHJcblx0XHRcdC8vIElmIGEgcm91dGVyIGlzIHBhc3NlZCwgcmVkaXJlY3QgdG8gdGhlIGN1cnJlbnQgbGlzdCBwYXRoLFxyXG5cdFx0XHQvLyBvdGhlcndpc2Ugc3RheSB3aGVyZSB3ZSBhcmVcclxuXHRcdFx0aWYgKHJvdXRlcikge1xyXG5cdFx0XHRcdGxldCByZWRpcmVjdFVybCA9IGAke0tleXN0b25lLmFkbWluUGF0aH0vJHtsaXN0LnBhdGh9YDtcclxuXHRcdFx0XHRpZiAoc3RhdGUubGlzdHMucGFnZS5pbmRleCAmJiBzdGF0ZS5saXN0cy5wYWdlLmluZGV4ID4gMSkge1xyXG5cdFx0XHRcdFx0cmVkaXJlY3RVcmwgPSBgJHtyZWRpcmVjdFVybH0/cGFnZT0ke3N0YXRlLmxpc3RzLnBhZ2UuaW5kZXh9YDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cm91dGVyLnB1c2gocmVkaXJlY3RVcmwpO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIFRPRE8gUHJvcGVyIGVycm9yIGhhbmRsaW5nXHJcblx0XHRcdGlmIChlcnIpIHtcclxuXHRcdFx0XHRhbGVydCgnRXJyb3IgZGVsZXRpbmcgaXRlbSwgcGxlYXNlIHRyeSBhZ2FpbiEnKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkaXNwYXRjaChsb2FkSXRlbXMoKSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW9yZGVySXRlbXMgKHsgY29sdW1ucywgcmVmTGlzdCwgcmVsYXRpb25zaGlwLCByZWxhdGVkSXRlbUlkLCBpdGVtLCBwcmV2U29ydE9yZGVyLCBuZXdTb3J0T3JkZXIgfSkge1xyXG5cdHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcblx0XHQvLyBTZW5kIHRoZSBpdGVtLCBwcmV2aW91cyBzb3J0T3JkZXIgYW5kIHRoZSBuZXcgc29ydE9yZGVyXHJcblx0XHQvLyB3ZSBzaG91bGQgZ2V0IHRoZSBwcm9wZXIgbGlzdCBhbmQgbmV3IHBhZ2UgcmVzdWx0cyBpbiByZXR1cm5cclxuXHRcdHJlZkxpc3QucmVvcmRlckl0ZW1zKFxyXG5cdFx0XHRpdGVtLFxyXG5cdFx0XHRwcmV2U29ydE9yZGVyLFxyXG5cdFx0XHRuZXdTb3J0T3JkZXIsXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb2x1bW5zOiBjb2x1bW5zLFxyXG5cdFx0XHRcdGZpbHRlcnM6IFt7XHJcblx0XHRcdFx0XHRmaWVsZDogcmVmTGlzdC5maWVsZHNbcmVsYXRpb25zaGlwLnJlZlBhdGhdLFxyXG5cdFx0XHRcdFx0dmFsdWU6IHsgdmFsdWU6IHJlbGF0ZWRJdGVtSWQgfSxcclxuXHRcdFx0XHR9XSxcclxuXHRcdFx0fSxcclxuXHRcdFx0KGVyciwgaXRlbXMpID0+IHtcclxuXHRcdFx0XHRkaXNwYXRjaChyZWxhdGlvbnNoaXBEYXRhTG9hZGVkKHJlbGF0aW9uc2hpcC5wYXRoLCBpdGVtcykpO1xyXG5cdFx0XHRcdC8vIElmIGVyciwgZmxhc2ggdGhlIHJvdyBhbGVydFxyXG5cdFx0XHRcdC8vIGlmIChlcnIpIHtcclxuXHRcdFx0XHQvLyBcdGRpc3BhdGNoKHJlc2V0SXRlbXMoaXRlbS5pZCkpO1xyXG5cdFx0XHRcdC8vIFx0Ly8gcmV0dXJuIHRoaXMucmVzZXRJdGVtcyh0aGlzLmZpbmRJdGVtQnlJZFtpdGVtLmlkXSk7XHJcblx0XHRcdFx0Ly8gfSBlbHNlIHtcclxuXHRcdFx0XHQvLyBcdGRpc3BhdGNoKGl0ZW1zTG9hZGVkKGl0ZW1zKSk7XHJcblx0XHRcdFx0Ly8gXHRkaXNwYXRjaChzZXRSb3dBbGVydCh7XHJcblx0XHRcdFx0Ly8gXHRcdHN1Y2Nlc3M6IGl0ZW0uaWQsXHJcblx0XHRcdFx0Ly8gXHRcdGZhaWw6IGZhbHNlLFxyXG5cdFx0XHRcdC8vIFx0fSkpO1xyXG5cdFx0XHRcdC8vIH1cclxuXHRcdFx0fVxyXG5cdFx0KTtcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbW92ZUl0ZW0gKHsgcHJldkluZGV4LCBuZXdJbmRleCwgcmVsYXRpb25zaGlwUGF0aCwgbmV3U29ydE9yZGVyIH0pIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogRFJBR19NT1ZFX0lURU0sXHJcblx0XHRwcmV2SW5kZXgsXHJcblx0XHRuZXdJbmRleCxcclxuXHRcdHJlbGF0aW9uc2hpcFBhdGgsXHJcblx0XHRuZXdTb3J0T3JkZXIsXHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0SXRlbXMgKCkge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBEUkFHX1JFU0VUX0lURU1TLFxyXG5cdH07XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgdmtleSBmcm9tICd2a2V5JztcclxuXHJcbmNsYXNzIEFsdFRleHQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cdGNvbnN0cnVjdG9yICgpIHtcclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5oYW5kbGVLZXlEb3duID0gdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLmhhbmRsZUtleVVwID0gdGhpcy5oYW5kbGVLZXlVcC5iaW5kKHRoaXMpO1xyXG5cclxuXHRcdHRoaXMuc3RhdGUgPSB7XHJcblx0XHRcdG1vZGlmaWVkOiBmYWxzZSxcclxuXHRcdH07XHJcblx0fVxyXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuXHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93biwgZmFsc2UpO1xyXG5cdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuaGFuZGxlS2V5VXAsIGZhbHNlKTtcclxuXHR9XHJcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xyXG5cdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duKTtcclxuXHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmhhbmRsZUtleVVwKTtcclxuXHR9XHJcblx0aGFuZGxlS2V5RG93biAoZSkge1xyXG5cdFx0aWYgKHZrZXlbZS5rZXlDb2RlXSAhPT0gdGhpcy5wcm9wcy5tb2RpZmllcikgcmV0dXJuO1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdG1vZGlmaWVkOiB0cnVlLFxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdGhhbmRsZUtleVVwIChlKSB7XHJcblx0XHRpZiAodmtleVtlLmtleUNvZGVdICE9PSB0aGlzLnByb3BzLm1vZGlmaWVyKSByZXR1cm47XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0bW9kaWZpZWQ6IGZhbHNlLFxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHQvLyBOT1RFIGBtb2RpZmllcmAgaXMgZGVjbGFyZWQgdG8gcmVtb3ZlIGl0IGZyb20gYHByb3BzYCwgdGhvdWdoIG5ldmVyIHVzZWRcclxuXHRcdGNvbnN0IHtcclxuXHRcdFx0Y29tcG9uZW50OiBDb21wb25lbnQsXHJcblx0XHRcdG1vZGlmaWVkLFxyXG5cdFx0XHRtb2RpZmllciwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG5cdFx0XHRub3JtYWwsXHJcblx0XHRcdC4uLnByb3BzXHJcblx0XHR9ID0gdGhpcy5wcm9wcztcclxuXHJcblx0XHRwcm9wcy5jaGlsZHJlbiA9IHRoaXMuc3RhdGUubW9kaWZpZWRcclxuXHRcdFx0PyBtb2RpZmllZFxyXG5cdFx0XHQ6IG5vcm1hbDtcclxuXHJcblx0XHRyZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xyXG5cdH1cclxufTtcclxuXHJcbmNvbnN0IFNVUFBPUlRFRF9LRVlTID0gW1xyXG5cdCc8YWx0PicsXHJcblx0Jzxjb250cm9sPicsXHJcblx0JzxtZXRhPicsXHJcblx0JzxzaGlmdD4nLFxyXG5dO1xyXG5cclxuQWx0VGV4dC5wcm9wVHlwZXMgPSB7XHJcblx0Y29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5mdW5jLFxyXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcclxuXHRdKSxcclxuXHRtb2RpZmllZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXHJcblx0XHRQcm9wVHlwZXMuZWxlbWVudCxcclxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXHJcblx0XSksXHJcblx0bW9kaWZpZXI6IFByb3BUeXBlcy5vbmVPZihTVVBQT1JURURfS0VZUyksXHJcblx0bm9ybWFsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5lbGVtZW50LFxyXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcclxuXHRdKSxcclxufTtcclxuQWx0VGV4dC5kZWZhdWx0UHJvcHMgPSB7XHJcblx0Y29tcG9uZW50OiAnc3BhbicsXHJcblx0bW9kaWZpZXI6ICc8YWx0PicsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEFsdFRleHQ7XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBEcmlsbGRvd25JdGVtIGZyb20gJy4vRHJpbGxkb3duSXRlbSc7XHJcblxyXG5mdW5jdGlvbiBEcmlsbGRvd24gKHsgY2xhc3NOYW1lLCBpdGVtcywgLi4ucHJvcHMgfSkge1xyXG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhjbGFzc2VzLmRyaWxsZG93biwgY2xhc3NOYW1lKTtcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDx1bCB7Li4ucHJvcHN9PlxyXG5cdFx0XHR7aXRlbXMubWFwKChpdGVtLCBpZHgpID0+IChcclxuXHRcdFx0XHQ8RHJpbGxkb3duSXRlbVxyXG5cdFx0XHRcdFx0aHJlZj17aXRlbS5ocmVmfVxyXG5cdFx0XHRcdFx0a2V5PXtpZHh9XHJcblx0XHRcdFx0XHRsYWJlbD17aXRlbS5sYWJlbH1cclxuXHRcdFx0XHRcdHNlcGFyYXRlPXtpZHggPCBpdGVtcy5sZW5ndGggLSAxfVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdCkpfVxyXG5cdFx0PC91bD5cclxuXHQpO1xyXG59O1xyXG5cclxuRHJpbGxkb3duLnByb3BUeXBlcyA9IHtcclxuXHRpdGVtczogUHJvcFR5cGVzLmFycmF5T2YoXHJcblx0XHRQcm9wVHlwZXMuc2hhcGUoe1xyXG5cdFx0XHRocmVmOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcblx0XHRcdGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcblx0XHRcdHNlcGFyYXRlOiBQcm9wVHlwZXMuYm9vbCwgLy8gRklYTUUgdmVyYjsgY291bGQgYmUgYmV0dGVyXHJcblx0XHR9KVxyXG5cdCkuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0ZHJpbGxkb3duOiB7XHJcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdGxpc3RTdHlsZTogJ25vbmUnLFxyXG5cdFx0bWFyZ2luOiAwLFxyXG5cdFx0cGFkZGluZzogMCxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBEcmlsbGRvd247XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5pbXBvcnQgeyBCdXR0b24sIEdseXBoIH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcclxuXHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZSc7XHJcblxyXG5mdW5jdGlvbiBEcmlsbGRvd25JdGVtICh7IGNsYXNzTmFtZSwgaHJlZiwgbGFiZWwsIHNlcGFyYXRlLCBzZXBhcmF0b3IsIHN0eWxlLCAuLi5wcm9wcyB9KSB7XHJcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKGNsYXNzZXMuaXRlbSwgY2xhc3NOYW1lKTtcclxuXHJcblx0Ly8gcmVtb3ZlIGhvcml6b250YWwgcGFkZGluZ1xyXG5cdGNvbnN0IHN0eWxlcyA9IHtcclxuXHRcdHBhZGRpbmdMZWZ0OiAwLFxyXG5cdFx0cGFkZGluZ1JpZ2h0OiAwLFxyXG5cdFx0Li4uc3R5bGUsXHJcblx0fTtcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxsaSB7Li4ucHJvcHN9PlxyXG5cdFx0XHQ8QnV0dG9uXHJcblx0XHRcdFx0Y29tcG9uZW50PXtMaW5rfVxyXG5cdFx0XHRcdHN0eWxlPXtzdHlsZXN9XHJcblx0XHRcdFx0dG89e2hyZWZ9XHJcblx0XHRcdFx0dmFyaWFudD1cImxpbmtcIlxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHR7bGFiZWx9XHJcblx0XHRcdDwvQnV0dG9uPlxyXG5cdFx0XHR7c2VwYXJhdGUgJiYgKFxyXG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuc2VwYXJhdG9yKX0+XHJcblx0XHRcdFx0XHR7c2VwYXJhdG9yfVxyXG5cdFx0XHRcdDwvc3Bhbj5cclxuXHRcdFx0KX1cclxuXHRcdDwvbGk+XHJcblx0KTtcclxufTtcclxuXHJcbkRyaWxsZG93bkl0ZW0ucHJvcFR5cGVzID0ge1xyXG5cdGhyZWY6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuXHRsYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG5cdHNlcGFyYXRlOiBQcm9wVHlwZXMuYm9vbCwgLy8gRklYTUUgdmVyYjsgY291bGQgYmUgYmV0dGVyXHJcblx0c2VwYXJhdG9yOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFByb3BUeXBlcy5lbGVtZW50LFxyXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcclxuXHRdKSxcclxufTtcclxuRHJpbGxkb3duSXRlbS5kZWZhdWx0UHJvcHMgPSB7XHJcblx0c2VwYXJhdG9yOiA8R2x5cGggbmFtZT1cImNoZXZyb24tcmlnaHRcIiAvPixcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0aXRlbToge1xyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHRtYXJnaW46IDAsXHJcblx0XHRwYWRkaW5nOiAwLFxyXG5cdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZScsXHJcblx0fSxcclxuXHRzZXBhcmF0b3I6IHtcclxuXHRcdGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5NDAsXHJcblx0XHRtYXJnaW5MZWZ0OiAnMC41ZW0nLFxyXG5cdFx0bWFyZ2luUmlnaHQ6ICcwLjVlbScsXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRHJpbGxkb3duSXRlbTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCBhc3NpZ24gZnJvbSAnb2JqZWN0LWFzc2lnbic7XG5pbXBvcnQge1xuXHRGb3JtLFxuXHRGb3JtRmllbGQsXG5cdEZvcm1JbnB1dCxcblx0R3JpZCxcblx0UmVzcG9uc2l2ZVRleHQsXG59IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XG5cbmltcG9ydCB7IEZpZWxkcyB9IGZyb20gJ0ZpZWxkVHlwZXMnO1xuaW1wb3J0IHsgZmFkZSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2NvbG9yJztcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZSc7XG5cbmltcG9ydCB7IEJ1dHRvbiwgTG9hZGluZ0J1dHRvbiB9IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XG5pbXBvcnQgQWxlcnRNZXNzYWdlcyBmcm9tICcuLi8uLi8uLi9zaGFyZWQvQWxlcnRNZXNzYWdlcyc7XG5pbXBvcnQgQ29uZmlybWF0aW9uRGlhbG9nIGZyb20gJy4vLi4vLi4vLi4vc2hhcmVkL0NvbmZpcm1hdGlvbkRpYWxvZyc7XG5cbmltcG9ydCBGb3JtSGVhZGluZyBmcm9tICcuL0Zvcm1IZWFkaW5nJztcbmltcG9ydCBBbHRUZXh0IGZyb20gJy4vQWx0VGV4dCc7XG5pbXBvcnQgRm9vdGVyQmFyIGZyb20gJy4vRm9vdGVyQmFyJztcbmltcG9ydCBJbnZhbGlkRmllbGRUeXBlIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9JbnZhbGlkRmllbGRUeXBlJztcblxuaW1wb3J0IHsgZGVsZXRlSXRlbSB9IGZyb20gJy4uL2FjdGlvbnMnO1xuXG5pbXBvcnQgeyB1cGNhc2UgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9zdHJpbmcnO1xuXG5mdW5jdGlvbiBnZXROYW1lRnJvbURhdGEoZGF0YSkge1xuXHRpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XG5cdFx0aWYgKHR5cGVvZiBkYXRhLmZpcnN0ID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgZGF0YS5sYXN0ID09PSAnc3RyaW5nJykge1xuXHRcdFx0cmV0dXJuIGRhdGEuZmlyc3QgKyAnICcgKyBkYXRhLmxhc3Q7XG5cdFx0fSBlbHNlIGlmIChkYXRhLmlkKSB7XG5cdFx0XHRyZXR1cm4gZGF0YS5pZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIHNtb290aFNjcm9sbFRvcCgpIHtcblx0aWYgKGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApIHtcblx0XHR3aW5kb3cuc2Nyb2xsQnkoMCwgLTUwKTtcblx0XHR2YXIgdGltZU91dCA9IHNldFRpbWVvdXQoc21vb3RoU2Nyb2xsVG9wLCAyMCk7XG5cdH0gZWxzZSB7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVPdXQpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHF1aWNrU2Nyb2xsVG9wKCkge1xuXHRpZiAoZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCkge1xuXHRcdHdpbmRvdy5zY3JvbGxCeSgwLCAtNTApO1xuXHRcdHF1aWNrU2Nyb2xsVG9wKCk7XG5cdH1cbn1cblxudmFyIEVkaXRGb3JtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRkaXNwbGF5TmFtZTogJ0VkaXRGb3JtJyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0ZGF0YTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcblx0XHRsaXN0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuXHR9LFxuXHRnZXRJbml0aWFsU3RhdGUoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHZhbHVlczogYXNzaWduKHt9LCB0aGlzLnByb3BzLmRhdGEuZmllbGRzKSxcblx0XHRcdGNvbmZpcm1hdGlvbkRpYWxvZzogbnVsbCxcblx0XHRcdGxvYWRpbmc6IGZhbHNlLFxuXHRcdFx0bGFzdFZhbHVlczogbnVsbCwgLy8gdXNlZCBmb3IgcmVzZXR0aW5nXG5cdFx0XHRmb2N1c0ZpcnN0RmllbGQ6ICF0aGlzLnByb3BzLmxpc3QubmFtZUZpZWxkICYmICF0aGlzLnByb3BzLmxpc3QubmFtZUZpZWxkSXNGb3JtSGVhZGVyLFxuXHRcdH07XG5cdH0sXG5cdGNvbXBvbmVudERpZE1vdW50KCkge1xuXHRcdHRoaXMuX19pc01vdW50ZWQgPSB0cnVlO1xuXHR9LFxuXHRjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcblx0XHR0aGlzLl9faXNNb3VudGVkID0gZmFsc2U7XG5cdH0sXG5cdGdldEZpZWxkUHJvcHMoZmllbGQpIHtcblx0XHRjb25zdCBwcm9wcyA9IGFzc2lnbih7fSwgZmllbGQpO1xuXHRcdGNvbnN0IGFsZXJ0cyA9IHRoaXMuc3RhdGUuYWxlcnRzO1xuXHRcdC8vIERpc3BsYXkgdmFsaWRhdGlvbiBlcnJvcnMgaW5saW5lXG5cdFx0aWYgKGFsZXJ0cyAmJiBhbGVydHMuZXJyb3IgJiYgYWxlcnRzLmVycm9yLmVycm9yID09PSAndmFsaWRhdGlvbiBlcnJvcnMnKSB7XG5cdFx0XHRpZiAoYWxlcnRzLmVycm9yLmRldGFpbFtmaWVsZC5wYXRoXSkge1xuXHRcdFx0XHQvLyBOT1RFOiBUaGlzIHdvbid0IHdvcmsgeWV0LCBhcyBFbGVtZW50YWxVSSBkb2Vzbid0IGFsbG93XG5cdFx0XHRcdC8vIHBhc3NlZCBpbiBpc1ZhbGlkLCBvbmx5IGludmFsaWRhdGVzIHZpYSBpbnRlcm5hbCBzdGF0ZS5cblx0XHRcdFx0Ly8gUFIgdG8gZml4IHRoYXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9lbGVtZW50YWx1aS9lbGVtZW50YWwvcHVsbC8xNDlcblx0XHRcdFx0cHJvcHMuaXNWYWxpZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRwcm9wcy52YWx1ZSA9IHRoaXMuc3RhdGUudmFsdWVzW2ZpZWxkLnBhdGhdO1xuXHRcdHByb3BzLnZhbHVlcyA9IHRoaXMuc3RhdGUudmFsdWVzO1xuXHRcdHByb3BzLm9uQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2U7XG5cdFx0cHJvcHMubW9kZSA9ICdlZGl0Jztcblx0XHRyZXR1cm4gcHJvcHM7XG5cdH0sXG5cdGhhbmRsZUNoYW5nZShldmVudCkge1xuXHRcdGNvbnN0IHZhbHVlcyA9IGFzc2lnbih7fSwgdGhpcy5zdGF0ZS52YWx1ZXMpO1xuXG5cdFx0dmFsdWVzW2V2ZW50LnBhdGhdID0gZXZlbnQudmFsdWU7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7IHZhbHVlcyB9KTtcblx0fSxcblxuXHR0b2dnbGVEZWxldGVEaWFsb2coKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRkZWxldGVEaWFsb2dJc09wZW46ICF0aGlzLnN0YXRlLmRlbGV0ZURpYWxvZ0lzT3Blbixcblx0XHR9KTtcblx0fSxcblx0dG9nZ2xlUmVzZXREaWFsb2coKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRyZXNldERpYWxvZ0lzT3BlbjogIXRoaXMuc3RhdGUucmVzZXREaWFsb2dJc09wZW4sXG5cdFx0fSk7XG5cdH0sXG5cdGhhbmRsZVJlc2V0KCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0dmFsdWVzOiBhc3NpZ24oe30sIHRoaXMuc3RhdGUubGFzdFZhbHVlcyB8fCB0aGlzLnByb3BzLmRhdGEuZmllbGRzKSxcblx0XHRcdHJlc2V0RGlhbG9nSXNPcGVuOiBmYWxzZSxcblx0XHR9KTtcblx0fSxcblx0aGFuZGxlRGVsZXRlKCkge1xuXHRcdGNvbnN0IHsgZGF0YSB9ID0gdGhpcy5wcm9wcztcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGRlbGV0ZUl0ZW0oZGF0YS5pZCwgdGhpcy5wcm9wcy5yb3V0ZXIpKTtcblx0fSxcblx0aGFuZGxlS2V5Rm9jdXMoKSB7XG5cdFx0Y29uc3QgaW5wdXQgPSB0aGlzLnJlZnMua2V5T3JJZElucHV0O1xuXHRcdGlucHV0LnNlbGVjdCgpO1xuXHR9LFxuXHRyZW1vdmVDb25maXJtYXRpb25EaWFsb2coKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRjb25maXJtYXRpb25EaWFsb2c6IG51bGwsXG5cdFx0fSk7XG5cdH0sXG5cdHVwZGF0ZUl0ZW0oKSB7XG5cdFx0Y29uc3QgeyBkYXRhLCBsaXN0IH0gPSB0aGlzLnByb3BzO1xuXHRcdGNvbnN0IGVkaXRGb3JtID0gdGhpcy5yZWZzLmVkaXRGb3JtO1xuXHRcdGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGVkaXRGb3JtKTtcblx0XHQvLyBTaG93IGxvYWRpbmcgaW5kaWNhdG9yXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRsb2FkaW5nOiB0cnVlLFxuXHRcdH0pO1xuXG5cdFx0bGlzdC51cGRhdGVJdGVtKGRhdGEuaWQsIGZvcm1EYXRhLCAoZXJyLCBkYXRhKSA9PiB7XG5cblx0XHRcdC8vICBzbW9vdGhTY3JvbGxUb3AoKTtcblx0XHRcdHF1aWNrU2Nyb2xsVG9wKCk7XG5cdFx0XHRpZiAoZXJyKSB7XG5cdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdGFsZXJ0czoge1xuXHRcdFx0XHRcdFx0ZXJyb3I6IGVycixcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGxvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIFN1Y2Nlc3MsIGRpc3BsYXkgc3VjY2VzcyBmbGFzaCBtZXNzYWdlcywgcmVwbGFjZSB2YWx1ZXNcblx0XHRcdFx0Ly8gVE9ETzogVXBkYXRlIGtleSB2YWx1ZVxuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRhbGVydHM6IHtcblx0XHRcdFx0XHRcdHN1Y2Nlc3M6IHtcblx0XHRcdFx0XHRcdFx0c3VjY2VzczogJ1lvdXIgY2hhbmdlcyBoYXZlIGJlZW4gc2F2ZWQgc3VjY2Vzc2Z1bGx5Jyxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRsYXN0VmFsdWVzOiB0aGlzLnN0YXRlLnZhbHVlcyxcblx0XHRcdFx0XHR2YWx1ZXM6IGRhdGEuZmllbGRzLFxuXHRcdFx0XHRcdGxvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblx0cmVuZGVyS2V5T3JJZCgpIHtcblx0XHR2YXIgY2xhc3NOYW1lID0gJ0VkaXRGb3JtX19rZXktb3ItaWQnO1xuXHRcdHZhciBsaXN0ID0gdGhpcy5wcm9wcy5saXN0O1xuXG5cdFx0aWYgKGxpc3QubmFtZUZpZWxkICYmIGxpc3QuYXV0b2tleSAmJiB0aGlzLnByb3BzLmRhdGFbbGlzdC5hdXRva2V5LnBhdGhdKSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cblx0XHRcdFx0XHQ8QWx0VGV4dFxuXHRcdFx0XHRcdFx0bW9kaWZpZWQ9XCJJRDpcIlxuXHRcdFx0XHRcdFx0bm9ybWFsPXtgJHt1cGNhc2UobGlzdC5hdXRva2V5LnBhdGgpfTogYH1cblx0XHRcdFx0XHRcdHRpdGxlPVwiUHJlc3MgPGFsdD4gdG8gcmV2ZWFsIHRoZSBJRFwiXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9XCJFZGl0Rm9ybV9fa2V5LW9yLWlkX19sYWJlbFwiIC8+XG5cdFx0XHRcdFx0PEFsdFRleHRcblx0XHRcdFx0XHRcdG1vZGlmaWVkPXs8aW5wdXQgcmVmPVwia2V5T3JJZElucHV0XCIgb25Gb2N1cz17dGhpcy5oYW5kbGVLZXlGb2N1c30gdmFsdWU9e3RoaXMucHJvcHMuZGF0YS5pZH0gY2xhc3NOYW1lPVwiRWRpdEZvcm1fX2tleS1vci1pZF9faW5wdXRcIiByZWFkT25seSAvPn1cblx0XHRcdFx0XHRcdG5vcm1hbD17PGlucHV0IHJlZj1cImtleU9ySWRJbnB1dFwiIG9uRm9jdXM9e3RoaXMuaGFuZGxlS2V5Rm9jdXN9IHZhbHVlPXt0aGlzLnByb3BzLmRhdGFbbGlzdC5hdXRva2V5LnBhdGhdfSBjbGFzc05hbWU9XCJFZGl0Rm9ybV9fa2V5LW9yLWlkX19pbnB1dFwiIHJlYWRPbmx5IC8+fVxuXHRcdFx0XHRcdFx0dGl0bGU9XCJQcmVzcyA8YWx0PiB0byByZXZlYWwgdGhlIElEXCJcblx0XHRcdFx0XHRcdGNsYXNzTmFtZT1cIkVkaXRGb3JtX19rZXktb3ItaWRfX2ZpZWxkXCIgLz5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQpO1xuXHRcdH0gZWxzZSBpZiAobGlzdC5hdXRva2V5ICYmIHRoaXMucHJvcHMuZGF0YVtsaXN0LmF1dG9rZXkucGF0aF0pIHtcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cIkVkaXRGb3JtX19rZXktb3ItaWRfX2xhYmVsXCI+e2xpc3QuYXV0b2tleS5wYXRofTogPC9zcGFuPlxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiRWRpdEZvcm1fX2tleS1vci1pZF9fZmllbGRcIj5cblx0XHRcdFx0XHRcdDxpbnB1dCByZWY9XCJrZXlPcklkSW5wdXRcIiBvbkZvY3VzPXt0aGlzLmhhbmRsZUtleUZvY3VzfSB2YWx1ZT17dGhpcy5wcm9wcy5kYXRhW2xpc3QuYXV0b2tleS5wYXRoXX0gY2xhc3NOYW1lPVwiRWRpdEZvcm1fX2tleS1vci1pZF9faW5wdXRcIiByZWFkT25seSAvPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChsaXN0Lm5hbWVGaWVsZCkge1xuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwiRWRpdEZvcm1fX2tleS1vci1pZF9fbGFiZWxcIj5JRDogPC9zcGFuPlxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiRWRpdEZvcm1fX2tleS1vci1pZF9fZmllbGRcIj5cblx0XHRcdFx0XHRcdDxpbnB1dCByZWY9XCJrZXlPcklkSW5wdXRcIiBvbkZvY3VzPXt0aGlzLmhhbmRsZUtleUZvY3VzfSB2YWx1ZT17dGhpcy5wcm9wcy5kYXRhLmlkfSBjbGFzc05hbWU9XCJFZGl0Rm9ybV9fa2V5LW9yLWlkX19pbnB1dFwiIHJlYWRPbmx5IC8+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0KTtcblx0XHR9XG5cdH0sXG5cdHJlbmRlck5hbWVGaWVsZCgpIHtcblx0XHR2YXIgbmFtZUZpZWxkID0gdGhpcy5wcm9wcy5saXN0Lm5hbWVGaWVsZDtcblx0XHR2YXIgbmFtZUZpZWxkSXNGb3JtSGVhZGVyID0gdGhpcy5wcm9wcy5saXN0Lm5hbWVGaWVsZElzRm9ybUhlYWRlcjtcblx0XHR2YXIgd3JhcE5hbWVGaWVsZCA9IGZpZWxkID0+IChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiRWRpdEZvcm1fX25hbWUtZmllbGRcIj5cblx0XHRcdFx0e2ZpZWxkfVxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0XHRpZiAobmFtZUZpZWxkSXNGb3JtSGVhZGVyKSB7XG5cdFx0XHR2YXIgbmFtZUZpZWxkUHJvcHMgPSB0aGlzLmdldEZpZWxkUHJvcHMobmFtZUZpZWxkKTtcblx0XHRcdG5hbWVGaWVsZFByb3BzLmxhYmVsID0gbnVsbDtcblx0XHRcdG5hbWVGaWVsZFByb3BzLnNpemUgPSAnZnVsbCc7XG5cdFx0XHRuYW1lRmllbGRQcm9wcy5hdXRvRm9jdXMgPSB0cnVlO1xuXHRcdFx0bmFtZUZpZWxkUHJvcHMuaW5wdXRQcm9wcyA9IHtcblx0XHRcdFx0Y2xhc3NOYW1lOiAnaXRlbS1uYW1lLWZpZWxkJyxcblx0XHRcdFx0cGxhY2Vob2xkZXI6IG5hbWVGaWVsZC5sYWJlbCxcblx0XHRcdFx0c2l6ZTogJ2xhcmdlJyxcblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gd3JhcE5hbWVGaWVsZChcblx0XHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChGaWVsZHNbbmFtZUZpZWxkLnR5cGVdLCBuYW1lRmllbGRQcm9wcylcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB3cmFwTmFtZUZpZWxkKFxuXHRcdFx0XHQ8aDI+e3RoaXMucHJvcHMuZGF0YS5uYW1lLnJlcGxhY2UoLyZxdW90Oy9nLCAnXCInKSB8fCAnKG5vXCIgbmFtZSknfTwvaDI+XG5cdFx0XHQpO1xuXHRcdH1cblx0fSxcblx0cmVuZGVyRm9ybUVsZW1lbnRzKCkge1xuXHRcdHZhciBoZWFkaW5ncyA9IDA7XG5cblx0XHRyZXR1cm4gdGhpcy5wcm9wcy5saXN0LnVpRWxlbWVudHMubWFwKChlbCwgaW5kZXgpID0+IHtcblx0XHRcdC8vIERvbid0IHJlbmRlciB0aGUgbmFtZSBmaWVsZCBpZiBpdCBpcyB0aGUgaGVhZGVyIHNpbmNlIGl0J2xsIGJlIHJlbmRlcmVkIGluIEJJRyBhYm92ZVxuXHRcdFx0Ly8gdGhlIGxpc3QuIChzZWUgcmVuZGVyTmFtZUZpZWxkIG1ldGhvZCwgdGhpcyBpcyB0aGUgcmV2ZXJzZSBjaGVjayBvZiB0aGUgb25lIGl0IGRvZXMpXG5cdFx0XHRpZiAoXG5cdFx0XHRcdHRoaXMucHJvcHMubGlzdC5uYW1lRmllbGRcblx0XHRcdFx0JiYgZWwuZmllbGQgPT09IHRoaXMucHJvcHMubGlzdC5uYW1lRmllbGQucGF0aFxuXHRcdFx0XHQmJiB0aGlzLnByb3BzLmxpc3QubmFtZUZpZWxkSXNGb3JtSGVhZGVyXG5cdFx0XHQpIHJldHVybjtcblxuXHRcdFx0aWYgKGVsLnR5cGUgPT09ICdoZWFkaW5nJykge1xuXHRcdFx0XHRoZWFkaW5ncysrO1xuXHRcdFx0XHRlbC5vcHRpb25zLnZhbHVlcyA9IHRoaXMuc3RhdGUudmFsdWVzO1xuXHRcdFx0XHRlbC5rZXkgPSAnaC0nICsgaGVhZGluZ3M7XG5cdFx0XHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1IZWFkaW5nLCBlbCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChlbC50eXBlID09PSAnZmllbGQnKSB7XG5cdFx0XHRcdHZhciBmaWVsZCA9IHRoaXMucHJvcHMubGlzdC5maWVsZHNbZWwuZmllbGRdO1xuXHRcdFx0XHR2YXIgcHJvcHMgPSB0aGlzLmdldEZpZWxkUHJvcHMoZmllbGQpO1xuXHRcdFx0XHRpZiAodHlwZW9mIEZpZWxkc1tmaWVsZC50eXBlXSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEludmFsaWRGaWVsZFR5cGUsIHsgdHlwZTogZmllbGQudHlwZSwgcGF0aDogZmllbGQucGF0aCwga2V5OiBmaWVsZC5wYXRoIH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHByb3BzLmtleSA9IGZpZWxkLnBhdGg7XG5cdFx0XHRcdGlmIChpbmRleCA9PT0gMCAmJiB0aGlzLnN0YXRlLmZvY3VzRmlyc3RGaWVsZCkge1xuXHRcdFx0XHRcdHByb3BzLmF1dG9Gb2N1cyA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmllbGRzW2ZpZWxkLnR5cGVdLCBwcm9wcyk7XG5cdFx0XHR9XG5cdFx0fSwgdGhpcyk7XG5cdH0sXG5cdHJlbmRlckZvb3RlckJhcigpIHtcblx0XHRpZiAodGhpcy5wcm9wcy5saXN0Lm5vZWRpdCAmJiB0aGlzLnByb3BzLmxpc3Qubm9kZWxldGUpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdGNvbnN0IHsgbG9hZGluZyB9ID0gdGhpcy5zdGF0ZTtcblx0XHRjb25zdCBsb2FkaW5nQnV0dG9uVGV4dCA9IGxvYWRpbmcgPyAnU2F2aW5nJyA6ICdTYXZlJztcblxuXHRcdC8vIFBhZGRpbmcgbXVzdCBiZSBhcHBsaWVkIGlubGluZSBzbyB0aGUgRm9vdGVyQmFyIGNhbiBkZXRlcm1pbmUgaXRzXG5cdFx0Ly8gaW5uZXJIZWlnaHQgYXQgcnVudGltZS4gQXBocm9kaXRlJ3Mgc3R5bGluZyBjb21lcyBsYXRlci4uLlxuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxGb290ZXJCYXIgc3R5bGU9e3suLi5zdHlsZXMuZm9vdGVyYmFySW5uZXIsICdiYWNrZ3JvdW5kJzogJyNlOGU0ZTQnfX0+XG5cdFx0XHRcdDxkaXYgc3R5bGU9e3suLi5zdHlsZXMuZm9vdGVyYmFySW5uZXJ9fSA+XG5cdFx0XHRcdFx0eyF0aGlzLnByb3BzLmxpc3Qubm9lZGl0ICYmIChcblx0XHRcdFx0XHRcdDxMb2FkaW5nQnV0dG9uXG5cdFx0XHRcdFx0XHRcdGNvbG9yPVwicHJpbWFyeVwiXG5cdFx0XHRcdFx0XHRcdGRpc2FibGVkPXtsb2FkaW5nfVxuXHRcdFx0XHRcdFx0XHRsb2FkaW5nPXtsb2FkaW5nfVxuXHRcdFx0XHRcdFx0XHRvbkNsaWNrPXt0aGlzLnVwZGF0ZUl0ZW19XG5cdFx0XHRcdFx0XHRcdGRhdGEtYnV0dG9uPVwidXBkYXRlXCJcblx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0e2xvYWRpbmdCdXR0b25UZXh0fVxuXHRcdFx0XHRcdFx0PC9Mb2FkaW5nQnV0dG9uPlxuXHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0eyF0aGlzLnByb3BzLmxpc3Qubm9lZGl0ICYmIChcblx0XHRcdFx0XHRcdDxCdXR0b24gZGlzYWJsZWQ9e2xvYWRpbmd9IG9uQ2xpY2s9e3RoaXMudG9nZ2xlUmVzZXREaWFsb2d9IHZhcmlhbnQ9XCJsaW5rXCIgY29sb3I9XCJjYW5jZWxcIiBkYXRhLWJ1dHRvbj1cInJlc2V0XCI+XG5cdFx0XHRcdFx0XHRcdDxSZXNwb25zaXZlVGV4dFxuXHRcdFx0XHRcdFx0XHRcdGhpZGRlblhTPVwicmVzZXQgY2hhbmdlc1wiXG5cdFx0XHRcdFx0XHRcdFx0dmlzaWJsZVhTPVwicmVzZXRcIlxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9CdXR0b24+XG5cdFx0XHRcdFx0KX1cblx0XHRcdFx0XHR7IXRoaXMucHJvcHMubGlzdC5ub2RlbGV0ZSAmJiAoXG5cdFx0XHRcdFx0XHQ8QnV0dG9uIGRpc2FibGVkPXtsb2FkaW5nfSBvbkNsaWNrPXt0aGlzLnRvZ2dsZURlbGV0ZURpYWxvZ30gdmFyaWFudD1cImxpbmtcIiBjb2xvcj1cImRlbGV0ZVwiIHN0eWxlPXtzdHlsZXMuZGVsZXRlQnV0dG9ufSBkYXRhLWJ1dHRvbj1cImRlbGV0ZVwiPlxuXHRcdFx0XHRcdFx0XHQ8UmVzcG9uc2l2ZVRleHRcblx0XHRcdFx0XHRcdFx0XHRoaWRkZW5YUz17YGRlbGV0ZSAke3RoaXMucHJvcHMubGlzdC5zaW5ndWxhci50b0xvd2VyQ2FzZSgpfWB9XG5cdFx0XHRcdFx0XHRcdFx0dmlzaWJsZVhTPVwiZGVsZXRlXCJcblx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdDwvQnV0dG9uPlxuXHRcdFx0XHRcdCl9XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9Gb290ZXJCYXI+XG5cdFx0KTtcblx0fSxcblx0cmVuZGVyVHJhY2tpbmdNZXRhKCkge1xuXHRcdC8vIFRPRE86IFRoZXNlIGZpZWxkcyBhcmUgdmlzaWJsZSBub3csIHNvIHdlIGRvbid0IHdhbnQgdGhpcy4gV2UgbWF5IHJldmlzaXRcblx0XHQvLyBpdCB3aGVuIHdlIGhhdmUgbW9yZSBncmFudWxhciBjb250cm9sIG92ZXIgaGlkaW5nIGZpZWxkcyBpbiBjZXJ0YWluXG5cdFx0Ly8gY29udGV4dHMsIHNvIEknbSBsZWF2aW5nIHRoaXMgY29kZSBoZXJlIGFzIGEgcmVmZXJlbmNlIGZvciBub3cgLSBKV1xuXHRcdGlmICh0cnVlKSByZXR1cm4gbnVsbDsgLy8gaWYgKHRydWUpIHByZXZlbnRzIHVucmVhY2hhYmxlIGNvZGUgbGludGVyIGVycnByXG5cblx0XHRpZiAoIXRoaXMucHJvcHMubGlzdC50cmFja2luZykgcmV0dXJuIG51bGw7XG5cblx0XHR2YXIgZWxlbWVudHMgPSBbXTtcblx0XHR2YXIgZGF0YSA9IHt9O1xuXG5cdFx0aWYgKHRoaXMucHJvcHMubGlzdC50cmFja2luZy5jcmVhdGVkQXQpIHtcblx0XHRcdGRhdGEuY3JlYXRlZEF0ID0gdGhpcy5wcm9wcy5kYXRhLmZpZWxkc1t0aGlzLnByb3BzLmxpc3QudHJhY2tpbmcuY3JlYXRlZEF0XTtcblx0XHRcdGlmIChkYXRhLmNyZWF0ZWRBdCkge1xuXHRcdFx0XHRlbGVtZW50cy5wdXNoKFxuXHRcdFx0XHRcdDxGb3JtRmllbGQga2V5PVwiY3JlYXRlZEF0XCIgbGFiZWw9XCJDcmVhdGVkIG9uXCI+XG5cdFx0XHRcdFx0XHQ8Rm9ybUlucHV0IG5vZWRpdCB0aXRsZT17bW9tZW50KGRhdGEuY3JlYXRlZEF0KS5mb3JtYXQoJ0REL01NL1lZWVkgaDptbTpzc2EnKX0+e21vbWVudChkYXRhLmNyZWF0ZWRBdCkuZm9ybWF0KCdEbyBNTU0gWVlZWScpfTwvRm9ybUlucHV0PlxuXHRcdFx0XHRcdDwvRm9ybUZpZWxkPlxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICh0aGlzLnByb3BzLmxpc3QudHJhY2tpbmcuY3JlYXRlZEJ5KSB7XG5cdFx0XHRkYXRhLmNyZWF0ZWRCeSA9IHRoaXMucHJvcHMuZGF0YS5maWVsZHNbdGhpcy5wcm9wcy5saXN0LnRyYWNraW5nLmNyZWF0ZWRCeV07XG5cdFx0XHRpZiAoZGF0YS5jcmVhdGVkQnkgJiYgZGF0YS5jcmVhdGVkQnkubmFtZSkge1xuXHRcdFx0XHRsZXQgY3JlYXRlZEJ5TmFtZSA9IGdldE5hbWVGcm9tRGF0YShkYXRhLmNyZWF0ZWRCeS5uYW1lKTtcblx0XHRcdFx0aWYgKGNyZWF0ZWRCeU5hbWUpIHtcblx0XHRcdFx0XHRlbGVtZW50cy5wdXNoKFxuXHRcdFx0XHRcdFx0PEZvcm1GaWVsZCBrZXk9XCJjcmVhdGVkQnlcIiBsYWJlbD1cIkNyZWF0ZWQgYnlcIj5cblx0XHRcdFx0XHRcdFx0PEZvcm1JbnB1dCBub2VkaXQ+e2RhdGEuY3JlYXRlZEJ5Lm5hbWUuZmlyc3R9IHtkYXRhLmNyZWF0ZWRCeS5uYW1lLmxhc3R9PC9Gb3JtSW5wdXQ+XG5cdFx0XHRcdFx0XHQ8L0Zvcm1GaWVsZD5cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMucHJvcHMubGlzdC50cmFja2luZy51cGRhdGVkQXQpIHtcblx0XHRcdGRhdGEudXBkYXRlZEF0ID0gdGhpcy5wcm9wcy5kYXRhLmZpZWxkc1t0aGlzLnByb3BzLmxpc3QudHJhY2tpbmcudXBkYXRlZEF0XTtcblx0XHRcdGlmIChkYXRhLnVwZGF0ZWRBdCAmJiAoIWRhdGEuY3JlYXRlZEF0IHx8IGRhdGEuY3JlYXRlZEF0ICE9PSBkYXRhLnVwZGF0ZWRBdCkpIHtcblx0XHRcdFx0ZWxlbWVudHMucHVzaChcblx0XHRcdFx0XHQ8Rm9ybUZpZWxkIGtleT1cInVwZGF0ZWRBdFwiIGxhYmVsPVwiVXBkYXRlZCBvblwiPlxuXHRcdFx0XHRcdFx0PEZvcm1JbnB1dCBub2VkaXQgdGl0bGU9e21vbWVudChkYXRhLnVwZGF0ZWRBdCkuZm9ybWF0KCdERC9NTS9ZWVlZIGg6bW06c3NhJyl9Pnttb21lbnQoZGF0YS51cGRhdGVkQXQpLmZvcm1hdCgnRG8gTU1NIFlZWVknKX08L0Zvcm1JbnB1dD5cblx0XHRcdFx0XHQ8L0Zvcm1GaWVsZD5cblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAodGhpcy5wcm9wcy5saXN0LnRyYWNraW5nLnVwZGF0ZWRCeSkge1xuXHRcdFx0ZGF0YS51cGRhdGVkQnkgPSB0aGlzLnByb3BzLmRhdGEuZmllbGRzW3RoaXMucHJvcHMubGlzdC50cmFja2luZy51cGRhdGVkQnldO1xuXHRcdFx0aWYgKGRhdGEudXBkYXRlZEJ5ICYmIGRhdGEudXBkYXRlZEJ5Lm5hbWUpIHtcblx0XHRcdFx0bGV0IHVwZGF0ZWRCeU5hbWUgPSBnZXROYW1lRnJvbURhdGEoZGF0YS51cGRhdGVkQnkubmFtZSk7XG5cdFx0XHRcdGlmICh1cGRhdGVkQnlOYW1lKSB7XG5cdFx0XHRcdFx0ZWxlbWVudHMucHVzaChcblx0XHRcdFx0XHRcdDxGb3JtRmllbGQga2V5PVwidXBkYXRlZEJ5XCIgbGFiZWw9XCJVcGRhdGVkIGJ5XCI+XG5cdFx0XHRcdFx0XHRcdDxGb3JtSW5wdXQgbm9lZGl0PntkYXRhLnVwZGF0ZWRCeS5uYW1lLmZpcnN0fSB7ZGF0YS51cGRhdGVkQnkubmFtZS5sYXN0fTwvRm9ybUlucHV0PlxuXHRcdFx0XHRcdFx0PC9Gb3JtRmllbGQ+XG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBPYmplY3Qua2V5cyhlbGVtZW50cykubGVuZ3RoID8gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJFZGl0Rm9ybV9fbWV0YVwiPlxuXHRcdFx0XHQ8aDMgY2xhc3NOYW1lPVwiZm9ybS1oZWFkaW5nXCI+TWV0YTwvaDM+XG5cdFx0XHRcdHtlbGVtZW50c31cblx0XHRcdDwvZGl2PlxuXHRcdCkgOiBudWxsO1xuXHR9LFxuXHRyZW5kZXIoKSB7XG5cdFx0Y29uc3QgbGlzdCA9IHRoaXMucHJvcHMubGlzdDtcblxuXHRcdGxldCBtZXNzYWdlID0gYEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgPHN0cm9uZz4ke3RoaXMucHJvcHMuZGF0YS5uYW1lfT88L3N0cm9uZz5gO1xuXG5cdFx0aWYgKGxpc3QuZGVsZXRlUHJvbXB0KSB7XG5cdFx0XHRtZXNzYWdlID0gbGlzdC5kZWxldGVQcm9tcHQ7XG5cdFx0fVxuXHRcdHJldHVybiAoXG5cdFx0XHQ8Zm9ybSByZWY9XCJlZGl0Rm9ybVwiIGNsYXNzTmFtZT1cIkVkaXRGb3JtLWNvbnRhaW5lclwiPlxuXHRcdFx0XHR7KHRoaXMuc3RhdGUuYWxlcnRzKSA/IDxBbGVydE1lc3NhZ2VzIGFsZXJ0cz17dGhpcy5zdGF0ZS5hbGVydHN9IC8+IDogbnVsbH1cblx0XHRcdFx0PEdyaWQuUm93PlxuXHRcdFx0XHRcdDxHcmlkLkNvbCBsYXJnZT1cInRocmVlLXF1YXJ0ZXJzXCI+XG5cdFx0XHRcdFx0XHQ8Rm9ybSBsYXlvdXQ9XCJob3Jpem9udGFsXCIgY29tcG9uZW50PVwiZGl2XCI+XG5cdFx0XHRcdFx0XHRcdHt0aGlzLnJlbmRlck5hbWVGaWVsZCgpfVxuXHRcdFx0XHRcdFx0XHR7dGhpcy5yZW5kZXJLZXlPcklkKCl9XG5cdFx0XHRcdFx0XHRcdHt0aGlzLnJlbmRlckZvcm1FbGVtZW50cygpfVxuXHRcdFx0XHRcdFx0XHR7dGhpcy5yZW5kZXJUcmFja2luZ01ldGEoKX1cblx0XHRcdFx0XHRcdDwvRm9ybT5cblx0XHRcdFx0XHQ8L0dyaWQuQ29sPlxuXHRcdFx0XHRcdDxHcmlkLkNvbCBsYXJnZT1cIm9uZS1xdWFydGVyXCI+PHNwYW4gLz48L0dyaWQuQ29sPlxuXHRcdFx0XHQ8L0dyaWQuUm93PlxuXHRcdFx0XHR7dGhpcy5yZW5kZXJGb290ZXJCYXIoKX1cblx0XHRcdFx0PENvbmZpcm1hdGlvbkRpYWxvZ1xuXHRcdFx0XHRcdGNvbmZpcm1hdGlvbkxhYmVsPVwiUmVzZXRcIlxuXHRcdFx0XHRcdGlzT3Blbj17dGhpcy5zdGF0ZS5yZXNldERpYWxvZ0lzT3Blbn1cblx0XHRcdFx0XHRvbkNhbmNlbD17dGhpcy50b2dnbGVSZXNldERpYWxvZ31cblx0XHRcdFx0XHRvbkNvbmZpcm1hdGlvbj17dGhpcy5oYW5kbGVSZXNldH1cblx0XHRcdFx0PlxuXHRcdFx0XHRcdDxwPlJlc2V0IHlvdXIgY2hhbmdlcyB0byA8c3Ryb25nPnt0aGlzLnByb3BzLmRhdGEubmFtZX08L3N0cm9uZz4/PC9wPlxuXHRcdFx0XHQ8L0NvbmZpcm1hdGlvbkRpYWxvZz5cblx0XHRcdFx0PENvbmZpcm1hdGlvbkRpYWxvZ1xuXHRcdFx0XHRcdGNvbmZpcm1hdGlvbkxhYmVsPVwiRGVsZXRlXCJcblx0XHRcdFx0XHRpc09wZW49e3RoaXMuc3RhdGUuZGVsZXRlRGlhbG9nSXNPcGVufVxuXHRcdFx0XHRcdG9uQ2FuY2VsPXt0aGlzLnRvZ2dsZURlbGV0ZURpYWxvZ31cblx0XHRcdFx0XHRvbkNvbmZpcm1hdGlvbj17dGhpcy5oYW5kbGVEZWxldGV9XG5cdFx0XHRcdD5cblx0XHRcdFx0XHQ8c3BhbiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IG1lc3NhZ2UgfX0gLz5cblx0XHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0XHRUaGlzIGNhbm5vdCBiZSB1bmRvbmUuXG5cdFx0XHRcdDwvQ29uZmlybWF0aW9uRGlhbG9nPlxuXHRcdFx0PC9mb3JtPlxuXHRcdCk7XG5cdH0sXG59KTtcblxuY29uc3Qgc3R5bGVzID0ge1xuXHRmb290ZXJiYXI6IHtcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUuY29sb3IuYm9keSwgOTMpLFxuXHRcdGJveFNoYWRvdzogJzAgLTJweCAwIHJnYmEoMCwgMCwgMCwgMC4xKScsXG5cdFx0cGFkZGluZ0JvdHRvbTogMjAsXG5cdFx0cGFkZGluZ1RvcDogMjAsXG5cdFx0ekluZGV4OiA5OSxcblx0fSxcblx0Zm9vdGVyYmFySW5uZXI6IHtcblx0XHRoZWlnaHQ6IHRoZW1lLmNvbXBvbmVudC5oZWlnaHQsIC8vIEZJWE1FIGFwaHJvZGl0ZSBidWdcblx0fSxcblx0ZGVsZXRlQnV0dG9uOiB7XG5cdFx0ZmxvYXQ6ICdyaWdodCcsXG5cdH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVkaXRGb3JtO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5cclxuaW1wb3J0IFRvb2xiYXIgZnJvbSAnLi9Ub29sYmFyJztcclxuaW1wb3J0IFRvb2xiYXJTZWN0aW9uIGZyb20gJy4vVG9vbGJhci9Ub29sYmFyU2VjdGlvbic7XHJcbmltcG9ydCBFZGl0Rm9ybUhlYWRlclNlYXJjaCBmcm9tICcuL0VkaXRGb3JtSGVhZGVyU2VhcmNoJztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcblxyXG5pbXBvcnQgRHJpbGxkb3duIGZyb20gJy4vRHJpbGxkb3duJztcclxuaW1wb3J0IHsgR2x5cGhCdXR0b24sIFJlc3BvbnNpdmVUZXh0IH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcclxuXHJcbmV4cG9ydCBjb25zdCBFZGl0Rm9ybUhlYWRlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ0VkaXRGb3JtSGVhZGVyJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGRhdGE6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXHJcblx0XHRsaXN0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxyXG5cdFx0dG9nZ2xlQ3JlYXRlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHR9LFxyXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRzZWFyY2hTdHJpbmc6ICcnLFxyXG5cdFx0fTtcclxuXHR9LFxyXG5cdHRvZ2dsZUNyZWF0ZSAodmlzaWJsZSkge1xyXG5cdFx0dGhpcy5wcm9wcy50b2dnbGVDcmVhdGUodmlzaWJsZSk7XHJcblx0fSxcclxuXHRzZWFyY2hTdHJpbmdDaGFuZ2VkIChldmVudCkge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdHNlYXJjaFN0cmluZzogZXZlbnQudGFyZ2V0LnZhbHVlLFxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRoYW5kbGVFc2NhcGVLZXkgKGV2ZW50KSB7XHJcblx0XHRjb25zdCBlc2NhcGVLZXlDb2RlID0gMjc7XHJcblxyXG5cdFx0aWYgKGV2ZW50LndoaWNoID09PSBlc2NhcGVLZXlDb2RlKSB7XHJcblx0XHRcdGZpbmRET01Ob2RlKHRoaXMucmVmcy5zZWFyY2hGaWVsZCkuYmx1cigpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0cmVuZGVyRHJpbGxkb3duICgpIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxUb29sYmFyU2VjdGlvbiBsZWZ0PlxyXG5cdFx0XHRcdHt0aGlzLnJlbmRlckRyaWxsZG93bkl0ZW1zKCl9XHJcblx0XHRcdFx0e3RoaXMucmVuZGVyU2VhcmNoKCl9XHJcblx0XHRcdDwvVG9vbGJhclNlY3Rpb24+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyRHJpbGxkb3duSXRlbXMgKCkge1xyXG5cdFx0Y29uc3QgeyBkYXRhLCBsaXN0IH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0Y29uc3QgaXRlbXMgPSBkYXRhLmRyaWxsZG93biA/IGRhdGEuZHJpbGxkb3duLml0ZW1zIDogW107XHJcblxyXG5cdFx0bGV0IGJhY2tQYXRoID0gYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2xpc3QucGF0aH1gO1xyXG5cdFx0Y29uc3QgYmFja1N0eWxlcyA9IHsgcGFkZGluZ0xlZnQ6IDAsIHBhZGRpbmdSaWdodDogMCB9O1xyXG5cdFx0Ly8gTGluayB0byB0aGUgbGlzdCBwYWdlIHRoZSB1c2VyIGNhbWUgZnJvbVxyXG5cdFx0aWYgKHRoaXMucHJvcHMubGlzdEFjdGl2ZVBhZ2UgJiYgdGhpcy5wcm9wcy5saXN0QWN0aXZlUGFnZSA+IDEpIHtcclxuXHRcdFx0YmFja1BhdGggPSBgJHtiYWNrUGF0aH0/cGFnZT0ke3RoaXMucHJvcHMubGlzdEFjdGl2ZVBhZ2V9YDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyByZXR1cm4gYSBzaW5nbGUgYmFjayBidXR0b24gd2hlbiBubyBkcmlsbGRvd24gZXhpc3RzXHJcblx0XHRpZiAoIWl0ZW1zLmxlbmd0aCkge1xyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdDxHbHlwaEJ1dHRvblxyXG5cdFx0XHRcdFx0Y29tcG9uZW50PXtMaW5rfVxyXG5cdFx0XHRcdFx0ZGF0YS1lMmUtZWRpdGZvcm0taGVhZGVyLWJhY2tcclxuXHRcdFx0XHRcdGdseXBoPVwiY2hldnJvbi1sZWZ0XCJcclxuXHRcdFx0XHRcdHBvc2l0aW9uPVwibGVmdFwiXHJcblx0XHRcdFx0XHRzdHlsZT17YmFja1N0eWxlc31cclxuXHRcdFx0XHRcdHRvPXtiYWNrUGF0aH1cclxuXHRcdFx0XHRcdHZhcmlhbnQ9XCJsaW5rXCJcclxuXHRcdFx0XHRcdD5cclxuXHRcdFx0XHRcdHtsaXN0LnBsdXJhbH1cclxuXHRcdFx0XHQ8L0dseXBoQnV0dG9uPlxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHByZXBhcmUgdGhlIGRyaWxsZG93biBlbGVtZW50c1xyXG5cdFx0Y29uc3QgZHJpbGxkb3duID0gW107XHJcblx0XHRpdGVtcy5mb3JFYWNoKChpdGVtLCBpZHgpID0+IHtcclxuXHRcdFx0Ly8gRklYTUUgQGplZHdhdHNvblxyXG5cdFx0XHQvLyB3ZSB1c2VkIHRvIHN1cHBvcnQgcmVsYXRpb25zaGlwcyBvZiB0eXBlIE1BTlkgd2hlcmUgaXRlbXMgd2VyZVxyXG5cdFx0XHQvLyByZXByZXNlbnRlZCBhcyBzaWJsaW5ncyBpbnNpZGUgYSBzaW5nbGUgbGlzdCBpdGVtOyB0aGlzIGdvdCBhXHJcblx0XHRcdC8vIGJpdCBtZXNzeS4uLlxyXG5cdFx0XHRpdGVtLml0ZW1zLmZvckVhY2gobGluayA9PiB7XHJcblx0XHRcdFx0ZHJpbGxkb3duLnB1c2goe1xyXG5cdFx0XHRcdFx0aHJlZjogbGluay5ocmVmLFxyXG5cdFx0XHRcdFx0bGFiZWw6IGxpbmsubGFiZWwsXHJcblx0XHRcdFx0XHR0aXRsZTogaXRlbS5saXN0LnNpbmd1bGFyLFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIGFkZCB0aGUgY3VycmVudCBsaXN0IHRvIHRoZSBkcmlsbGRvd25cclxuXHRcdGRyaWxsZG93bi5wdXNoKHtcclxuXHRcdFx0aHJlZjogYmFja1BhdGgsXHJcblx0XHRcdGxhYmVsOiBsaXN0LnBsdXJhbCxcclxuXHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxEcmlsbGRvd24gaXRlbXM9e2RyaWxsZG93bn0gLz5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXJTZWFyY2ggKCkge1xyXG5cdFx0dmFyIGxpc3QgPSB0aGlzLnByb3BzLmxpc3Q7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8Zm9ybSBhY3Rpb249e2Ake0tleXN0b25lLmFkbWluUGF0aH0vJHtsaXN0LnBhdGh9YH0gY2xhc3NOYW1lPVwiRWRpdEZvcm1fX2hlYWRlcl9fc2VhcmNoXCI+XHJcblx0XHRcdFx0PEVkaXRGb3JtSGVhZGVyU2VhcmNoXHJcblx0XHRcdFx0XHR2YWx1ZT17dGhpcy5zdGF0ZS5zZWFyY2hTdHJpbmd9XHJcblx0XHRcdFx0XHRvbkNoYW5nZT17dGhpcy5zZWFyY2hTdHJpbmdDaGFuZ2VkfVxyXG5cdFx0XHRcdFx0b25LZXlVcD17dGhpcy5oYW5kbGVFc2NhcGVLZXl9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0XHR7LyogPEdseXBoRmllbGQgZ2x5cGhDb2xvcj1cIiM5OTlcIiBnbHlwaD1cInNlYXJjaFwiPlxyXG5cdFx0XHRcdFx0PEZvcm1JbnB1dFxyXG5cdFx0XHRcdFx0XHRyZWY9XCJzZWFyY2hGaWVsZFwiXHJcblx0XHRcdFx0XHRcdHR5cGU9XCJzZWFyY2hcIlxyXG5cdFx0XHRcdFx0XHRuYW1lPVwic2VhcmNoXCJcclxuXHRcdFx0XHRcdFx0dmFsdWU9e3RoaXMuc3RhdGUuc2VhcmNoU3RyaW5nfVxyXG5cdFx0XHRcdFx0XHRvbkNoYW5nZT17dGhpcy5zZWFyY2hTdHJpbmdDaGFuZ2VkfVxyXG5cdFx0XHRcdFx0XHRvbktleVVwPXt0aGlzLmhhbmRsZUVzY2FwZUtleX1cclxuXHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJTZWFyY2hcIlxyXG5cdFx0XHRcdFx0XHRzdHlsZT17eyBwYWRkaW5nTGVmdDogJzIuM2VtJyB9fVxyXG5cdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHQ8L0dseXBoRmllbGQ+ICovfVxyXG5cdFx0XHQ8L2Zvcm0+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVySW5mbyAoKSB7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8VG9vbGJhclNlY3Rpb24gcmlnaHQ+XHJcblx0XHRcdFx0e3RoaXMucmVuZGVyQ3JlYXRlQnV0dG9uKCl9XHJcblx0XHRcdDwvVG9vbGJhclNlY3Rpb24+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyQ3JlYXRlQnV0dG9uICgpIHtcclxuXHRcdGNvbnN0IHsgbm9jcmVhdGUsIGF1dG9jcmVhdGUsIHNpbmd1bGFyIH0gPSB0aGlzLnByb3BzLmxpc3Q7XHJcblxyXG5cdFx0aWYgKG5vY3JlYXRlKSByZXR1cm4gbnVsbDtcclxuXHJcblx0XHRsZXQgcHJvcHMgPSB7fTtcclxuXHRcdGlmIChhdXRvY3JlYXRlKSB7XHJcblx0XHRcdHByb3BzLmhyZWYgPSAnP25ldycgKyBLZXlzdG9uZS5jc3JmLnF1ZXJ5O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cHJvcHMub25DbGljayA9ICgpID0+IHsgdGhpcy50b2dnbGVDcmVhdGUodHJ1ZSk7IH07XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8R2x5cGhCdXR0b24gZGF0YS1lMmUtaXRlbS1jcmVhdGUtYnV0dG9uPVwidHJ1ZVwiIGNvbG9yPVwic3VjY2Vzc1wiIGdseXBoPVwicGx1c1wiIHBvc2l0aW9uPVwibGVmdFwiIHsuLi5wcm9wc30+XHJcblx0XHRcdFx0PFJlc3BvbnNpdmVUZXh0IGhpZGRlblhTPXtgTmV3ICR7c2luZ3VsYXJ9YH0gdmlzaWJsZVhTPVwiQ3JlYXRlXCIgLz5cclxuXHRcdFx0PC9HbHlwaEJ1dHRvbj5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PFRvb2xiYXI+XHJcblx0XHRcdFx0e3RoaXMucmVuZGVyRHJpbGxkb3duKCl9XHJcblx0XHRcdFx0e3RoaXMucmVuZGVySW5mbygpfVxyXG5cdFx0XHQ8L1Rvb2xiYXI+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdCgoc3RhdGUpID0+ICh7XHJcblx0bGlzdEFjdGl2ZVBhZ2U6IHN0YXRlLmxpc3RzLnBhZ2UuaW5kZXgsXHJcbn0pKShFZGl0Rm9ybUhlYWRlcik7XHJcbiIsIi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cclxuXHJcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xyXG5pbXBvcnQgeyBGb3JtSW5wdXQsIEdseXBoLCBHbHlwaEJ1dHRvbiB9IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZSc7XHJcblxyXG5jbGFzcyBFZGl0Rm9ybUhlYWRlclNlYXJjaCBleHRlbmRzIENvbXBvbmVudCB7XHJcblx0Y29uc3RydWN0b3IgKCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmZvY3VzRmllbGQgPSB0aGlzLmZvY3VzRmllbGQuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuc3RhdGUgPSB7IGZvY3VzZWQ6IGZhbHNlIH07XHJcblx0fVxyXG5cdGZvY3VzRmllbGQgKCkge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7IGZvY3VzZWQ6IHRydWUgfSwgKCkgPT4ge1xyXG5cdFx0XHRmaW5kRE9NTm9kZSh0aGlzLnJlZnMudGFyZ2V0KS5mb2N1cygpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRjb25zdCB7IGZvY3VzZWQgfSA9IHRoaXMuc3RhdGU7XHJcblx0XHRjb25zdCB7XHJcblx0XHRcdG9uQ2hhbmdlLFxyXG5cdFx0XHRvbktleVVwLFxyXG5cdFx0XHR2YWx1ZSxcclxuXHRcdFx0Li4ucHJvcHNcclxuXHRcdH0gPSB0aGlzLnByb3BzO1xyXG5cclxuXHRcdHJldHVybiBmb2N1c2VkID8gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMud3JhcHBlcil9PlxyXG5cdFx0XHRcdDxHbHlwaFxyXG5cdFx0XHRcdFx0YXBocm9kaXRlU3R5bGVzPXtjbGFzc2VzLmdseXBofVxyXG5cdFx0XHRcdFx0Y29sb3I9e3RoZW1lLmNvbG9yLmdyYXk0MH1cclxuXHRcdFx0XHRcdG5hbWU9XCJzZWFyY2hcIlxyXG5cdFx0XHRcdFx0ZGF0YS1lMmUtc2VhcmNoLWljb25cclxuXHRcdFx0XHQvPlxyXG5cdFx0XHRcdDxGb3JtSW5wdXRcclxuXHRcdFx0XHRcdGFwaHJvZGl0ZVN0eWxlcz17Y2xhc3Nlcy5pbnB1dH1cclxuXHRcdFx0XHRcdG5hbWU9XCJzZWFyY2hcIlxyXG5cdFx0XHRcdFx0b25CbHVyPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgZm9jdXNlZDogZmFsc2UgfSl9XHJcblx0XHRcdFx0XHRvbkNoYW5nZT17b25DaGFuZ2V9XHJcblx0XHRcdFx0XHRvbktleVVwPXtvbktleVVwfVxyXG5cdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJTZWFyY2hcIlxyXG5cdFx0XHRcdFx0cmVmPVwidGFyZ2V0XCJcclxuXHRcdFx0XHRcdHR5cGU9XCJzZWFyY2hcIlxyXG5cdFx0XHRcdFx0dmFsdWU9e3ZhbHVlfVxyXG5cdFx0XHRcdFx0ey4uLnByb3BzfVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KSA6IChcclxuXHRcdFx0PEdseXBoQnV0dG9uXHJcblx0XHRcdFx0Y29sb3I9XCJwcmltYXJ5XCJcclxuXHRcdFx0XHRnbHlwaD1cInNlYXJjaFwiXHJcblx0XHRcdFx0Z2x5cGhTdHlsZT17eyBtYXJnaW5SaWdodDogJzAuNGVtJyB9fVxyXG5cdFx0XHRcdG9uQ2xpY2s9e3RoaXMuZm9jdXNGaWVsZH1cclxuXHRcdFx0XHRvbkZvY3VzPXt0aGlzLmZvY3VzRmllbGR9XHJcblx0XHRcdFx0cG9zaXRpb249XCJsZWZ0XCJcclxuXHRcdFx0XHR2YXJpYW50PVwibGlua1wiXHJcblx0XHRcdFx0c3R5bGU9e3sgcGFkZGluZ0xlZnQ6ICcwLjdlbScgfX1cclxuXHRcdFx0XHRkYXRhLWUyZS1zZWFyY2gtaWNvblxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRTZWFyY2hcclxuXHRcdFx0PC9HbHlwaEJ1dHRvbj5cclxuXHRcdCk7XHJcblx0fVxyXG59O1xyXG5cclxuLy8gRm9yIHByb3BzIFwiZ2x5cGhcIiwgXCJnbHlwaENvbG9yXCIsIGFuZCBcImdseXBoU2l6ZVwiOlxyXG4vLyBwcm9wIHR5cGUgdmFsaWRhdGlvbiB3aWxsIG9jY3VyIHdpdGhpbiB0aGUgR2x5cGggY29tcG9uZW50LCBubyBuZWVkIHRvXHJcbi8vIGR1cGxpY2F0ZSwganVzdCBwYXNzIGl0IHRocm91Z2guXHJcbkVkaXRGb3JtSGVhZGVyU2VhcmNoLnByb3BUeXBlcyA9IHtcclxuXHRvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHR2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcblx0d3JhcHBlcjoge1xyXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJyxcclxuXHRcdHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxyXG5cdH0sXHJcblxyXG5cdC8vIGlucHV0XHJcblx0aW5wdXQ6IHtcclxuXHRcdHBhZGRpbmdMZWZ0OiAnMi4yZW0nLFxyXG5cdFx0Ly8gb3BhY2l0eTogMCxcclxuXHRcdHRyYW5zaXRpb246ICdhbGwgMjQwbXMnLFxyXG5cdFx0d2lkdGg6IDEwMCxcclxuXHJcblx0XHQnOmZvY3VzJzoge1xyXG5cdFx0XHQvLyBvcGFjaXR5OiAxLFxyXG5cdFx0XHR3aWR0aDogMjQwLFxyXG5cdFx0fSxcclxuXHR9LFxyXG5cclxuXHQvLyBnbHlwaFxyXG5cdGdseXBoOiB7XHJcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuXHRcdGRpc3BsYXk6ICdmbGV4JyxcclxuXHRcdGhlaWdodDogJzEwMCUnLFxyXG5cdFx0anVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG5cdFx0cG9zaXRpb246ICdhYnNvbHV0ZScsXHJcblx0XHR3aWR0aDogJzIuMmVtJyxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBFZGl0Rm9ybUhlYWRlclNlYXJjaDtcclxuXHJcblxyXG4vLyBTZWFyY2hcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4vLyAuRWRpdEZvcm1fX2hlYWRlcl9fc2VhcmNoIHtcclxuLy8gXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbi8vIFx0bWFyZ2luLWxlZnQ6IDFlbTtcclxuLy8gfVxyXG4vLyAuRWRpdEZvcm1fX2hlYWRlcl9fc2VhcmNoLWZpZWxkIHtcclxuLy8gXHRtYXJnaW4tYm90dG9tOiAwO1xyXG4vL1xyXG4vLyBcdC5JY29uRmllbGRfX2ljb24ge1xyXG4vLyBcdFx0Y29sb3I6IEBhcHAtcHJpbWFyeTtcclxuLy8gXHR9XHJcbi8vIH1cclxuLy9cclxuLy8gLy8gbWFrZSB0aGUgaW5wdXQgYXBwZWFyIGFzIGEgYnV0dG9uIGxpbmsgdW50aWwgZm9jdXNlZFxyXG4vLyAuRWRpdEZvcm1fX2hlYWRlcl9fc2VhcmNoLWlucHV0IHtcclxuLy8gXHQvLyBvdmVycmlkZSBlbGVtZW50YWwncyB0cmFuc2l0aW9uIHRvIGNhdGNoIHRoZSB3aWR0aCBvciBpdCBsb29rcyB3ZWlyZFxyXG4vLyBcdC50cmFuc2l0aW9uKCBhbGwgMC4xNXMgZWFzZS1pbi1vdXQgKTtcclxuLy8gXHQucGxhY2Vob2xkZXIoQGxpbmstY29sb3IpO1xyXG4vLyBcdGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG4vLyBcdGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbi8vIFx0Ym94LXNoYWRvdzogbm9uZTtcclxuLy8gXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbi8vXHJcbi8vIFx0Ly8gc2V0IHRoZSB3aWR0aCB0byBvbmx5IGJlIGFzIGxvbmcgYXMgaWYgaXQgd2VyZSBhIGJ1dHRvbiBpbml0aWFsbHlcclxuLy8gXHQvLyB0aGlzIGlzIHVwZGF0ZWQgb24gZm9jdXMgdG8gYSBtb3JlIGNvbWZvcnRhYmxlIHR5cGluZyBsZW5ndGhcclxuLy8gXHR3aWR0aDogMTAwcHg7XHJcbi8vXHJcbi8vIFx0Ly8gZGVjb3JhdGUgdGhlIGlucHV0IGFzIGEgbGlua1xyXG4vLyBcdCY6aG92ZXIge1xyXG4vLyBcdFx0LnBsYWNlaG9sZGVyKEBsaW5rLWhvdmVyLWNvbG9yKTtcclxuLy8gXHRcdGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbi8vIFx0XHRjdXJzb3I6IHBvaW50ZXI7XHJcbi8vXHJcbi8vIFx0XHQvLyBoYW5kbGUgcGxhY2Vob2xkZXIgdGV4dFxyXG4vLyBcdFx0Jjo6LW1vei1wbGFjZWhvbGRlciB7IHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyB9XHJcbi8vIFx0XHQmOi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7IHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyB9XHJcbi8vIFx0XHQmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyICB7IHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyB9XHJcbi8vXHJcbi8vIFx0XHQrIC5JY29uRmllbGRfX2ljb24ge1xyXG4vLyBcdFx0XHRjb2xvcjogQGxpbmstaG92ZXItY29sb3I7XHJcbi8vIFx0XHR9XHJcbi8vIFx0fVxyXG4vL1xyXG4vLyBcdC8vIHJldHVybiB0aGUgaW5wdXQgdG8gaXQncyBuYXR1cmFsIGFwcGVhcmFuY2Ugb24gZm9jdXNcclxuLy8gXHQmOmZvY3VzIHtcclxuLy8gXHRcdC5wbGFjZWhvbGRlcihAaW5wdXQtcGxhY2Vob2xkZXItY29sb3IpO1xyXG4vLyBcdFx0YmFja2dyb3VuZDogd2hpdGU7XHJcbi8vIFx0XHRib3JkZXItY29sb3I6IEBpbnB1dC1ib3JkZXItY29sb3ItZm9jdXM7XHJcbi8vIFx0XHRib3gtc2hhZG93OiBpbnNldCAwIDFweCAxcHggcmdiYSgwLCAwLCAwLCAwLjA3NSksIDAgMCAwIDNweCBmYWRlKEBpbnB1dC1ib3JkZXItY29sb3ItZm9jdXMsIDEwJSk7XHJcbi8vIFx0XHRjdXJzb3I6IGF1dG87XHJcbi8vIFx0XHRvdXRsaW5lOiAwO1xyXG4vLyBcdFx0d2lkdGg6IDI0MHB4O1xyXG4vL1xyXG4vLyBcdFx0Ly8gaGFuZGxlIHBsYWNlaG9sZGVyIHRleHRcclxuLy8gXHRcdCY6Oi1tb3otcGxhY2Vob2xkZXIgeyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cclxuLy8gXHRcdCY6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHsgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XHJcbi8vIFx0XHQmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyICB7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxyXG4vL1xyXG4vLyBcdFx0KyAuSWNvbkZpZWxkX19pY29uIHtcclxuLy8gXHRcdFx0Y29sb3I6IEBpbnB1dC1wbGFjZWhvbGRlci1jb2xvcjtcclxuLy8gXHRcdH1cclxuLy8gXHR9XHJcbi8vIH1cclxuLy8gLy8gaGlkZSB0aGUgc2VhcmNoIGZpZWxkIG9uIHNtYWxsIGRldmljZXNcclxuLy8gQG1lZGlhIChtYXgtd2lkdGg6IDQ4MHB4KSB7XHJcbi8vIFx0LkVkaXRGb3JtX19oZWFkZXJfX3NlYXJjaCB7XHJcbi8vIFx0XHRkaXNwbGF5OiBub25lO1xyXG4vLyBcdH1cclxuLy8gfVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgYmxhY2tsaXN0IGZyb20gJ2JsYWNrbGlzdCc7XHJcbmltcG9ydCBhc3NpZ24gZnJvbSAnb2JqZWN0LWFzc2lnbic7XHJcblxyXG52YXIgRm9vdGVyQmFyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0c3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXHJcblx0fSxcclxuXHRnZXREZWZhdWx0UHJvcHMgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0c3R5bGU6IHt9LFxyXG5cdFx0fTtcclxuXHR9LFxyXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJyxcclxuXHRcdFx0d2lkdGg6ICdhdXRvJyxcclxuXHRcdFx0aGVpZ2h0OiAnYXV0bycsXHJcblx0XHRcdHRvcDogMCxcclxuXHRcdH07XHJcblx0fSxcclxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XHJcblx0XHQvLyBCYWlsIGluIElFOCBiZWNhdXNlIFJlYWN0IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgb25TY3JvbGwgZXZlbnQgaW4gdGhhdCBicm93c2VyXHJcblx0XHQvLyBDb252ZW5pZW50bHkgKCEpIElFOCBkb2Vzbid0IGhhdmUgd2luZG93LmdldENvbXB1dGVkU3R5bGUgd2hpY2ggd2UgYWxzbyB1c2UgaGVyZVxyXG5cdFx0aWYgKCF3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkgcmV0dXJuO1xyXG5cdFx0dmFyIGZvb3RlciA9IHRoaXMucmVmcy5mb290ZXI7XHJcblx0XHR0aGlzLndpbmRvd1NpemUgPSB0aGlzLmdldFdpbmRvd1NpemUoKTtcclxuXHRcdHZhciBmb290ZXJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGZvb3Rlcik7XHJcblx0XHR0aGlzLmZvb3RlclNpemUgPSB7XHJcblx0XHRcdHg6IGZvb3Rlci5vZmZzZXRXaWR0aCxcclxuXHRcdFx0eTogZm9vdGVyLm9mZnNldEhlaWdodCArIHBhcnNlSW50KGZvb3RlclN0eWxlLm1hcmdpblRvcCB8fCAnMCcpLFxyXG5cdFx0fTtcclxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLnJlY2FsY1Bvc2l0aW9uLCBmYWxzZSk7XHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZWNhbGNQb3NpdGlvbiwgZmFsc2UpO1xyXG5cdFx0dGhpcy5yZWNhbGNQb3NpdGlvbigpO1xyXG5cdH0sXHJcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xyXG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMucmVjYWxjUG9zaXRpb24sIGZhbHNlKTtcclxuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlY2FsY1Bvc2l0aW9uLCBmYWxzZSk7XHJcblx0fSxcclxuXHRnZXRXaW5kb3dTaXplICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHg6IHdpbmRvdy5pbm5lcldpZHRoLFxyXG5cdFx0XHR5OiB3aW5kb3cuaW5uZXJIZWlnaHQsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0cmVjYWxjUG9zaXRpb24gKCkge1xyXG5cdFx0dmFyIHdyYXBwZXIgPSB0aGlzLnJlZnMud3JhcHBlcjtcclxuXHJcblx0XHR0aGlzLmZvb3RlclNpemUueCA9IHdyYXBwZXIub2Zmc2V0V2lkdGg7XHJcblxyXG5cdFx0dmFyIG9mZnNldFRvcCA9IDA7XHJcblx0XHR2YXIgb2Zmc2V0RWwgPSB3cmFwcGVyO1xyXG5cclxuXHRcdHdoaWxlIChvZmZzZXRFbCkge1xyXG5cdFx0XHRvZmZzZXRUb3AgKz0gb2Zmc2V0RWwub2Zmc2V0VG9wO1xyXG5cdFx0XHRvZmZzZXRFbCA9IG9mZnNldEVsLm9mZnNldFBhcmVudDtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgbWF4WSA9IG9mZnNldFRvcCArIHRoaXMuZm9vdGVyU2l6ZS55O1xyXG5cdFx0dmFyIHZpZXdZID0gd2luZG93LnNjcm9sbFkgKyB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcblxyXG5cdFx0dmFyIG5ld1NpemUgPSB0aGlzLmdldFdpbmRvd1NpemUoKTtcclxuXHRcdHZhciBzaXplQ2hhbmdlZCA9IChuZXdTaXplLnggIT09IHRoaXMud2luZG93U2l6ZS54IHx8IG5ld1NpemUueSAhPT0gdGhpcy53aW5kb3dTaXplLnkpO1xyXG5cdFx0dGhpcy53aW5kb3dTaXplID0gbmV3U2l6ZTtcclxuXHJcblx0XHR2YXIgbmV3U3RhdGUgPSB7XHJcblx0XHRcdHdpZHRoOiB0aGlzLmZvb3RlclNpemUueCxcclxuXHRcdFx0aGVpZ2h0OiB0aGlzLmZvb3RlclNpemUueSxcclxuXHRcdH07XHJcblxyXG5cdFx0aWYgKHZpZXdZID4gbWF4WSAmJiAoc2l6ZUNoYW5nZWQgfHwgdGhpcy5tb2RlICE9PSAnaW5saW5lJykpIHtcclxuXHRcdFx0dGhpcy5tb2RlID0gJ2lubGluZSc7XHJcblx0XHRcdG5ld1N0YXRlLnRvcCA9IDA7XHJcblx0XHRcdG5ld1N0YXRlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuXHRcdFx0dGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSk7XHJcblx0XHR9IGVsc2UgaWYgKHZpZXdZIDw9IG1heFkgJiYgKHNpemVDaGFuZ2VkIHx8IHRoaXMubW9kZSAhPT0gJ2ZpeGVkJykpIHtcclxuXHRcdFx0dGhpcy5tb2RlID0gJ2ZpeGVkJztcclxuXHRcdFx0bmV3U3RhdGUudG9wID0gd2luZG93LmlubmVySGVpZ2h0IC0gdGhpcy5mb290ZXJTaXplLnk7XHJcblx0XHRcdG5ld1N0YXRlLnBvc2l0aW9uID0gJ2ZpeGVkJztcclxuXHRcdFx0dGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0dmFyIHdyYXBwZXJTdHlsZSA9IHtcclxuXHRcdFx0aGVpZ2h0OiB0aGlzLnN0YXRlLmhlaWdodCxcclxuXHRcdFx0bWFyZ2luVG9wOiA2MCxcclxuXHRcdFx0cG9zaXRpb246ICdyZWxhdGl2ZScsXHJcblx0XHR9O1xyXG5cdFx0dmFyIGZvb3RlclByb3BzID0gYmxhY2tsaXN0KHRoaXMucHJvcHMsICdjaGlsZHJlbicsICdzdHlsZScpO1xyXG5cdFx0dmFyIGZvb3RlclN0eWxlID0gYXNzaWduKHt9LCB0aGlzLnByb3BzLnN0eWxlLCB7XHJcblx0XHRcdHBvc2l0aW9uOiB0aGlzLnN0YXRlLnBvc2l0aW9uLFxyXG5cdFx0XHR0b3A6IHRoaXMuc3RhdGUudG9wLFxyXG5cdFx0XHR3aWR0aDogdGhpcy5zdGF0ZS53aWR0aCxcclxuXHRcdFx0aGVpZ2h0OiB0aGlzLnN0YXRlLmhlaWdodCxcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiByZWY9XCJ3cmFwcGVyXCIgc3R5bGU9e3dyYXBwZXJTdHlsZX0+XHJcblx0XHRcdFx0PGRpdiByZWY9XCJmb290ZXJcIiBzdHlsZT17Zm9vdGVyU3R5bGV9IHsuLi5mb290ZXJQcm9wc30+e3RoaXMucHJvcHMuY2hpbGRyZW59PC9kaXY+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRm9vdGVyQmFyO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgZXZhbERlcGVuZHNPbiBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9maWVsZHMvdXRpbHMvZXZhbERlcGVuZHNPbic7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ0Zvcm1IZWFkaW5nJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdG9wdGlvbnM6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0aWYgKCFldmFsRGVwZW5kc09uKHRoaXMucHJvcHMub3B0aW9ucy5kZXBlbmRzT24sIHRoaXMucHJvcHMub3B0aW9ucy52YWx1ZXMpKSB7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIDxoMyBjbGFzc05hbWU9XCJmb3JtLWhlYWRpbmdcIj57dGhpcy5wcm9wcy5jb250ZW50fTwvaDM+O1xyXG5cdH0sXHJcbn0pO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuaW1wb3J0IHsgQWxlcnQsIEJsYW5rU3RhdGUsIENlbnRlciwgU3Bpbm5lciB9IGZyb20gJy4uLy4uLy4uLy4uL2VsZW1lbnRhbCc7XHJcblxyXG5pbXBvcnQgRHJhZ0Ryb3AgZnJvbSAnLi9SZWxhdGVkSXRlbXNMaXN0RHJhZ0Ryb3AnO1xyXG5pbXBvcnQgTGlzdFJvdyBmcm9tICcuL1JlbGF0ZWRJdGVtc0xpc3RSb3cnO1xyXG5cclxuaW1wb3J0IHsgbG9hZFJlbGF0aW9uc2hpcEl0ZW1EYXRhIH0gZnJvbSAnLi4vLi4vYWN0aW9ucyc7XHJcbmltcG9ydCB7IFRBQkxFX0NPTlRST0xfQ09MVU1OX1dJRFRIIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uc3RhbnRzJztcclxuXHJcbmNvbnN0IFJlbGF0ZWRJdGVtc0xpc3QgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRkaXNwYXRjaDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHRcdGRyYWdOZXdTb3J0T3JkZXI6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcblx0XHRpdGVtczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxyXG5cdFx0bGlzdDogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG5cdFx0cmVmTGlzdDogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG5cdFx0cmVsYXRlZEl0ZW1JZDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG5cdFx0cmVsYXRpb25zaGlwOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcblx0fSxcclxuXHRnZXRJbml0aWFsU3RhdGUgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Y29sdW1uczogdGhpcy5nZXRDb2x1bW5zKCksXHJcblx0XHRcdGVycjogbnVsbCxcclxuXHRcdFx0aXRlbXM6IG51bGwsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xyXG5cdFx0dGhpcy5fX2lzTW91bnRlZCA9IHRydWU7XHJcblx0XHR0aGlzLmxvYWRJdGVtcygpO1xyXG5cdH0sXHJcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xyXG5cdFx0dGhpcy5fX2lzTW91bnRlZCA9IGZhbHNlO1xyXG5cdH0sXHJcblx0aXNTb3J0YWJsZSAoKSB7XHJcblx0XHQvLyBDaGVjayBpZiB0aGUgcmVsYXRlZCBpdGVtcyBzaG91bGQgYmUgc29ydGFibGUuIFRoZSByZWZlcmVuY2VkIGxpc3QgaGFzIHRvXHJcblx0XHQvLyAgIGJlIHNvcnRhYmxlIGFuZCBpdCBoYXMgdG8gc2V0IHRoZSBjdXJyZW50IGxpc3QgYXMgaXQncyBzb3J0Q29udGV4dC5cclxuXHRcdGNvbnN0IHsgcmVmTGlzdCwgbGlzdCwgcmVsYXRpb25zaGlwIH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0Y29uc3Qgc29ydENvbnRleHQgPSByZWZMaXN0LnNvcnRDb250ZXh0O1xyXG5cdFx0aWYgKHJlZkxpc3Quc29ydGFibGUgJiYgc29ydENvbnRleHQpIHtcclxuXHRcdFx0Y29uc3QgcGFydHMgPSBzb3J0Q29udGV4dC5zcGxpdCgnOicpO1xyXG5cdFx0XHRpZiAocGFydHNbMF0gPT09IGxpc3Qua2V5ICYmIHBhcnRzWzFdID09PSByZWxhdGlvbnNoaXAucGF0aCkge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fSxcclxuXHRnZXRDb2x1bW5zICgpIHtcclxuXHRcdGNvbnN0IHsgcmVsYXRpb25zaGlwLCByZWZMaXN0IH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0Y29uc3QgY29sdW1ucyA9IHJlZkxpc3QuZXhwYW5kQ29sdW1ucyhyZWZMaXN0LmRlZmF1bHRDb2x1bW5zKTtcclxuXHRcdHJldHVybiBjb2x1bW5zLmZpbHRlcihpID0+IGkucGF0aCAhPT0gcmVsYXRpb25zaGlwLnJlZlBhdGgpO1xyXG5cdH0sXHJcblx0bG9hZEl0ZW1zICgpIHtcclxuXHRcdGNvbnN0IHsgcmVmTGlzdCwgcmVsYXRlZEl0ZW1JZCwgcmVsYXRpb25zaGlwIH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0Y29uc3QgeyBjb2x1bW5zIH0gPSB0aGlzLnN0YXRlO1xyXG5cdFx0Ly8gVE9ETzogTW92ZSBlcnJvciB0byByZWR1eCBzdG9yZVxyXG5cdFx0aWYgKCFyZWZMaXN0LmZpZWxkc1tyZWxhdGlvbnNoaXAucmVmUGF0aF0pIHtcclxuXHRcdFx0Y29uc3QgZXJyID0gKFxyXG5cdFx0XHRcdDxBbGVydCBjb2xvcj1cImRhbmdlclwiPlxyXG5cdFx0XHRcdFx0PHN0cm9uZz5FcnJvcjo8L3N0cm9uZz4gUmVsYXRlZCBMaXN0IDxzdHJvbmc+e3JlZkxpc3QubGFiZWx9PC9zdHJvbmc+IGhhcyBubyBmaWVsZCA8c3Ryb25nPntyZWxhdGlvbnNoaXAucmVmUGF0aH08L3N0cm9uZz5cclxuXHRcdFx0XHQ8L0FsZXJ0PlxyXG5cdFx0XHQpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5zZXRTdGF0ZSh7IGVyciB9KTtcclxuXHRcdH1cclxuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2gobG9hZFJlbGF0aW9uc2hpcEl0ZW1EYXRhKHsgY29sdW1ucywgcmVmTGlzdCwgcmVsYXRlZEl0ZW1JZCwgcmVsYXRpb25zaGlwIH0pKTtcclxuXHR9LFxyXG5cdHJlbmRlckl0ZW1zICgpIHtcclxuXHRcdGNvbnN0IHRhYmxlQm9keSA9ICh0aGlzLmlzU29ydGFibGUoKSkgPyAoXHJcblx0XHRcdDxEcmFnRHJvcFxyXG5cdFx0XHRcdGNvbHVtbnM9e3RoaXMuc3RhdGUuY29sdW1uc31cclxuXHRcdFx0XHRpdGVtcz17dGhpcy5wcm9wcy5pdGVtc31cclxuXHRcdFx0XHR7Li4udGhpcy5wcm9wc31cclxuXHRcdFx0Lz5cclxuXHRcdCkgOiAoXHJcblx0XHRcdDx0Ym9keT5cclxuXHRcdFx0XHR7dGhpcy5wcm9wcy5pdGVtcy5yZXN1bHRzLm1hcCgoaXRlbSkgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuICg8TGlzdFJvd1xyXG5cdFx0XHRcdFx0XHRrZXk9e2l0ZW0uaWR9XHJcblx0XHRcdFx0XHRcdGNvbHVtbnM9e3RoaXMuc3RhdGUuY29sdW1uc31cclxuXHRcdFx0XHRcdFx0aXRlbT17aXRlbX1cclxuXHRcdFx0XHRcdFx0cmVmTGlzdD17dGhpcy5wcm9wcy5yZWZMaXN0fVxyXG5cdFx0XHRcdFx0Lz4pO1xyXG5cdFx0XHRcdH0pfVxyXG5cdFx0XHQ8L3Rib2R5PlxyXG5cdFx0KTtcclxuXHRcdHJldHVybiB0aGlzLnByb3BzLml0ZW1zLnJlc3VsdHMubGVuZ3RoID8gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIkl0ZW1MaXN0LXdyYXBwZXJcIj5cclxuXHRcdFx0XHQ8dGFibGUgY2VsbFBhZGRpbmc9XCIwXCIgY2VsbFNwYWNpbmc9XCIwXCIgY2xhc3NOYW1lPVwiVGFibGUgSXRlbUxpc3RcIj5cclxuXHRcdFx0XHRcdHt0aGlzLnJlbmRlclRhYmxlQ29scygpfVxyXG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyVGFibGVIZWFkZXJzKCl9XHJcblx0XHRcdFx0XHR7dGFibGVCb2R5fVxyXG5cdFx0XHRcdDwvdGFibGU+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KSA6IChcclxuXHRcdFx0PEJsYW5rU3RhdGVcclxuXHRcdFx0XHRoZWFkaW5nPXtgTm8gcmVsYXRlZCAke3RoaXMucHJvcHMucmVmTGlzdC5wbHVyYWwudG9Mb3dlckNhc2UoKX0uLi5gfVxyXG5cdFx0XHRcdHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogJzNlbScgfX1cclxuXHRcdFx0Lz5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXJUYWJsZUNvbHMgKCkge1xyXG5cdFx0Y29uc3QgY29scyA9IHRoaXMuc3RhdGUuY29sdW1ucy5tYXAoKGNvbCkgPT4gPGNvbCB3aWR0aD17Y29sLndpZHRofSBrZXk9e2NvbC5wYXRofSAvPik7XHJcblx0XHRyZXR1cm4gPGNvbGdyb3VwPntjb2xzfTwvY29sZ3JvdXA+O1xyXG5cdH0sXHJcblx0cmVuZGVyVGFibGVIZWFkZXJzICgpIHtcclxuXHRcdGNvbnN0IGNlbGxzID0gdGhpcy5zdGF0ZS5jb2x1bW5zLm1hcCgoY29sKSA9PiB7XHJcblx0XHRcdHJldHVybiA8dGgga2V5PXtjb2wucGF0aH0+e2NvbC5sYWJlbH08L3RoPjtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIGFkZCBzb3J0IGNvbCB3aGVuIGF2YWlsYWJsZVxyXG5cdFx0aWYgKHRoaXMuaXNTb3J0YWJsZSgpKSB7XHJcblx0XHRcdGNlbGxzLnVuc2hpZnQoXHJcblx0XHRcdFx0PHRoIHdpZHRoPXtUQUJMRV9DT05UUk9MX0NPTFVNTl9XSURUSH0ga2V5PVwic29ydGFibGVcIiAvPlxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiA8dGhlYWQ+PHRyPntjZWxsc308L3RyPjwvdGhlYWQ+O1xyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGlmICh0aGlzLnN0YXRlLmVycikge1xyXG5cdFx0XHRyZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJSZWxhdGlvbnNoaXBcIj57dGhpcy5zdGF0ZS5lcnJ9PC9kaXY+O1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGxpc3RIcmVmID0gYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke3RoaXMucHJvcHMucmVmTGlzdC5wYXRofWA7XHJcblx0XHRjb25zdCBsb2FkaW5nRWxlbWVudCA9IChcclxuXHRcdFx0PENlbnRlciBoZWlnaHQ9ezEwMH0+XHJcblx0XHRcdFx0PFNwaW5uZXIgLz5cclxuXHRcdFx0PC9DZW50ZXI+XHJcblx0XHQpO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiUmVsYXRpb25zaGlwXCI+XHJcblx0XHRcdFx0PGgzIGNsYXNzTmFtZT1cIlJlbGF0aW9uc2hpcF9fbGlua1wiPjxMaW5rIHRvPXtsaXN0SHJlZn0+e3RoaXMucHJvcHMucmVmTGlzdC5sYWJlbH08L0xpbms+PC9oMz5cclxuXHRcdFx0XHR7dGhpcy5wcm9wcy5pdGVtcyA/IHRoaXMucmVuZGVySXRlbXMoKSA6IGxvYWRpbmdFbGVtZW50fVxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF0ZWRJdGVtc0xpc3Q7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRHJhZ0Ryb3BDb250ZXh0IH0gZnJvbSAncmVhY3QtZG5kJztcclxuaW1wb3J0IEhUTUw1QmFja2VuZCBmcm9tICdyZWFjdC1kbmQtaHRtbDUtYmFja2VuZCc7XHJcbmltcG9ydCB7IFNvcnRhYmxlIH0gZnJvbSAnLi9SZWxhdGVkSXRlbXNMaXN0Um93JztcclxuXHJcbmNsYXNzIFJlbGF0ZWRJdGVtc0xpc3REcmFnRHJvcCBleHRlbmRzIENvbXBvbmVudCB7XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IHsgaXRlbXMgfSA9IHRoaXMucHJvcHM7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8dGJvZHk+XHJcblx0XHRcdFx0e2l0ZW1zLnJlc3VsdHMubWFwKChpdGVtLCBpKSA9PiB7XHJcblx0XHRcdFx0XHRyZXR1cm4gKDxTb3J0YWJsZVxyXG5cdFx0XHRcdFx0XHRrZXk9e2l0ZW0uaWR9XHJcblx0XHRcdFx0XHRcdGluZGV4PXtpfVxyXG5cdFx0XHRcdFx0XHRpdGVtPXtpdGVtfVxyXG5cdFx0XHRcdFx0XHR7Li4udGhpcy5wcm9wc31cclxuXHRcdFx0XHRcdC8+KTtcclxuXHRcdFx0XHR9KX1cclxuXHRcdFx0PC90Ym9keT5cclxuXHRcdCk7XHJcblx0fVxyXG59O1xyXG5SZWxhdGVkSXRlbXNMaXN0RHJhZ0Ryb3AucHJvcFR5cGVzID0ge1xyXG5cdGNvbHVtbnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxyXG5cdGRpc3BhdGNoOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdGRyYWdOZXdTb3J0T3JkZXI6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcblx0aXRlbXM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxyXG5cdGxpc3Q6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuXHRyZWZMaXN0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcblx0cmVsYXRlZEl0ZW1JZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG5cdHJlbGF0aW9uc2hpcDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBEcmFnRHJvcENvbnRleHQoSFRNTDVCYWNrZW5kKShSZWxhdGVkSXRlbXNMaXN0RHJhZ0Ryb3ApO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IERyb3BUYXJnZXQsIERyYWdTb3VyY2UgfSBmcm9tICdyZWFjdC1kbmQnO1xyXG5cclxuaW1wb3J0IHsgQ29sdW1ucyB9IGZyb20gJ0ZpZWxkVHlwZXMnO1xyXG5cclxuaW1wb3J0IHtcclxuXHRyZW9yZGVySXRlbXMsXHJcblx0cmVzZXRJdGVtcyxcclxuXHRtb3ZlSXRlbSxcclxufSBmcm9tICcuLi8uLi9hY3Rpb25zJztcclxuXHJcbmltcG9ydCBMaXN0Q29udHJvbCBmcm9tICcuLi8uLi8uLi9MaXN0L2NvbXBvbmVudHMvTGlzdENvbnRyb2wnO1xyXG5cclxuY2xhc3MgUmVsYXRlZEl0ZW1zTGlzdFJvdyBleHRlbmRzIENvbXBvbmVudCB7XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IHsgY29sdW1ucywgaXRlbSwgY29ubmVjdERyYWdTb3VyY2UsIGNvbm5lY3REcm9wVGFyZ2V0LCByZWZMaXN0IH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0Y29uc3QgY2VsbHMgPSBjb2x1bW5zLm1hcCgoY29sLCBpKSA9PiB7XHJcblx0XHRcdGNvbnN0IENvbHVtblR5cGUgPSBDb2x1bW5zW2NvbC50eXBlXSB8fCBDb2x1bW5zLl9fdW5yZWNvZ25pc2VkX187XHJcblx0XHRcdGNvbnN0IGxpbmtUbyA9ICFpID8gYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke3JlZkxpc3QucGF0aH0vJHtpdGVtLmlkfWAgOiB1bmRlZmluZWQ7XHJcblx0XHRcdHJldHVybiA8Q29sdW1uVHlwZSBrZXk9e2NvbC5wYXRofSBsaXN0PXtyZWZMaXN0fSBjb2w9e2NvbH0gZGF0YT17aXRlbX0gbGlua1RvPXtsaW5rVG99IC8+O1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gYWRkIHNvcnRhYmxlIGljb24gd2hlbiBhcHBsaWNhYmxlXHJcblx0XHRpZiAoY29ubmVjdERyYWdTb3VyY2UpIHtcclxuXHRcdFx0Y2VsbHMudW5zaGlmdCg8TGlzdENvbnRyb2wga2V5PVwiX3NvcnRcIiB0eXBlPVwic29ydGFibGVcIiBkcmFnU291cmNlPXtjb25uZWN0RHJhZ1NvdXJjZX0gLz4pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHJvdyA9ICg8dHIga2V5PXsnaScgKyBpdGVtLmlkfT57Y2VsbHN9PC90cj4pO1xyXG5cclxuXHRcdGlmIChjb25uZWN0RHJvcFRhcmdldCkge1xyXG5cdFx0XHRyZXR1cm4gY29ubmVjdERyb3BUYXJnZXQocm93KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiByb3c7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblJlbGF0ZWRJdGVtc0xpc3RSb3cucHJvcFR5cGVzID0ge1xyXG5cdGNvbHVtbnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxyXG5cdGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdGRyYWdOZXdTb3J0T3JkZXI6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcblx0aW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXHJcblx0aXRlbTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG5cdHJlZkxpc3Q6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuXHRyZWxhdGVkSXRlbUlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcblx0cmVsYXRpb25zaGlwOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcblx0Ly8gSW5qZWN0ZWQgYnkgUmVhY3QgRG5EOlxyXG5cdGlzRHJhZ2dpbmc6IFByb3BUeXBlcy5ib29sLCAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvc29ydC1wcm9wLXR5cGVzXHJcblx0Y29ubmVjdERyYWdTb3VyY2U6IFByb3BUeXBlcy5mdW5jLCAgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9zb3J0LXByb3AtdHlwZXNcclxuXHRjb25uZWN0RHJvcFRhcmdldDogUHJvcFR5cGVzLmZ1bmMsICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L3NvcnQtcHJvcC10eXBlc1xyXG5cdGNvbm5lY3REcmFnUHJldmlldzogUHJvcFR5cGVzLmZ1bmMsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvc29ydC1wcm9wLXR5cGVzXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBSZWxhdGVkSXRlbXNMaXN0Um93O1xyXG5cclxuLy8gRXhwb3NlIFNvcnRhYmxlXHJcblxyXG4vKipcclxuICogSW1wbGVtZW50cyBkcmFnIHNvdXJjZS5cclxuICovXHJcbmNvbnN0IGRyYWdJdGVtID0ge1xyXG5cdGJlZ2luRHJhZyAocHJvcHMpIHtcclxuXHRcdGNvbnN0IHNlbmQgPSB7IC4uLnByb3BzIH07XHJcblx0XHQvLyBwcm9wcy5kaXNwYXRjaChzZXREcmFnQmFzZShwcm9wcy5pdGVtLCBwcm9wcy5pbmRleCkpO1xyXG5cdFx0cmV0dXJuIHsgLi4uc2VuZCB9O1xyXG5cdH0sXHJcblx0ZW5kRHJhZyAocHJvcHMsIG1vbml0b3IsIGNvbXBvbmVudCkge1xyXG5cdFx0Ly8gRHJvcHBlZCBvdXRzaWRlIG9mIHRoZSBkcm9wIHRhcmdldCwgcmVzZXQgcm93c1xyXG5cdFx0aWYgKCFtb25pdG9yLmRpZERyb3AoKSkge1xyXG5cdFx0XHRwcm9wcy5kaXNwYXRjaChyZXNldEl0ZW1zKCkpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgZHJhZ2dlZEl0ZW0gPSBwcm9wcy5pdGVtO1xyXG5cdFx0Y29uc3QgcHJldlNvcnRPcmRlciA9IGRyYWdnZWRJdGVtLnNvcnRPcmRlcjtcclxuXHRcdGNvbnN0IG5ld1NvcnRPcmRlciA9IHByb3BzLmRyYWdOZXdTb3J0T3JkZXI7XHJcblxyXG5cdFx0Ly8gRHJvcHBpbmcgb24gc2VsZlxyXG5cdFx0aWYgKHByZXZTb3J0T3JkZXIgPT09IG5ld1NvcnRPcmRlcikge1xyXG5cdFx0XHRwcm9wcy5kaXNwYXRjaChyZXNldEl0ZW1zKCkpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZHJvcHBlZCBvbiBhIHRhcmdldFxyXG5cdFx0Y29uc3QgeyBjb2x1bW5zLCByZWZMaXN0LCByZWxhdGlvbnNoaXAsIHJlbGF0ZWRJdGVtSWQsIGl0ZW0gfSA9IHByb3BzO1xyXG5cdFx0cHJvcHMuZGlzcGF0Y2gocmVvcmRlckl0ZW1zKHsgY29sdW1ucywgcmVmTGlzdCwgcmVsYXRpb25zaGlwLCByZWxhdGVkSXRlbUlkLCBpdGVtLCBwcmV2U29ydE9yZGVyLCBuZXdTb3J0T3JkZXIgfSkpO1xyXG5cdH0sXHJcbn07XHJcblxyXG4vKipcclxuICogSW1wbGVtZW50cyBkcmFnIHRhcmdldC5cclxuICovXHJcbmNvbnN0IGRyb3BJdGVtID0ge1xyXG5cdGRyb3AgKHByb3BzLCBtb25pdG9yLCBjb21wb25lbnQpIHtcclxuXHRcdHJldHVybiB7IC4uLnByb3BzIH07XHJcblx0fSxcclxuXHRob3ZlciAocHJvcHMsIG1vbml0b3IsIGNvbXBvbmVudCkge1xyXG5cdFx0Ly8gcmVzZXQgcm93IGFsZXJ0c1xyXG5cdFx0Ly8gaWYgKHByb3BzLnJvd0FsZXJ0LnN1Y2Nlc3MgfHwgcHJvcHMucm93QWxlcnQuZmFpbCkge1xyXG5cdFx0XHQvLyBwcm9wcy5kaXNwYXRjaChzZXRSb3dBbGVydCh7XHJcblx0XHRcdC8vIFx0cmVzZXQ6IHRydWUsXHJcblx0XHRcdC8vIH0pKTtcclxuXHRcdC8vIH1cclxuXHJcblx0XHRjb25zdCBkcmFnZ2VkID0gbW9uaXRvci5nZXRJdGVtKCkuaW5kZXg7XHJcblx0XHRjb25zdCBvdmVyID0gcHJvcHMuaW5kZXg7XHJcblxyXG5cdFx0Ly8gc2VsZlxyXG5cdFx0aWYgKGRyYWdnZWQgPT09IG92ZXIpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNpbmNlIHRoZSBpdGVtcyBhcmUgbW92ZWQgb24gaG92ZXIsIHdlIG5lZWQgdG8gc3RvcmUgdGhlIG5ldyBzb3J0IG9yZGVyIGZyb20gdGhlIGRyYWdnZWQgb3ZlciBpdGVtIHNvIHdlIGNhbiB1c2UgaXQgdG8gcmVvcmRlciB3aGVuIHRoZSBpdGVtIGlzIGRyb3BwZWQuXHJcblx0XHRwcm9wcy5kaXNwYXRjaChtb3ZlSXRlbSh7XHJcblx0XHRcdHByZXZJbmRleDogZHJhZ2dlZCxcclxuXHRcdFx0bmV3SW5kZXg6IG92ZXIsXHJcblx0XHRcdHJlbGF0aW9uc2hpcFBhdGg6IHByb3BzLnJlbGF0aW9uc2hpcC5wYXRoLFxyXG5cdFx0XHRuZXdTb3J0T3JkZXI6IHByb3BzLml0ZW0uc29ydE9yZGVyLFxyXG5cdFx0fSkpO1xyXG5cdFx0bW9uaXRvci5nZXRJdGVtKCkuaW5kZXggPSBvdmVyO1xyXG5cdH0sXHJcbn07XHJcblxyXG4vKipcclxuICogU3BlY2lmaWVzIHRoZSBwcm9wcyB0byBpbmplY3QgaW50byB5b3VyIGNvbXBvbmVudC5cclxuICovXHJcbmZ1bmN0aW9uIGRyYWdQcm9wcyAoY29ubmVjdCwgbW9uaXRvcikge1xyXG5cdHJldHVybiB7XHJcblx0XHRjb25uZWN0RHJhZ1NvdXJjZTogY29ubmVjdC5kcmFnU291cmNlKCksXHJcblx0XHRpc0RyYWdnaW5nOiBtb25pdG9yLmlzRHJhZ2dpbmcoKSxcclxuXHRcdGNvbm5lY3REcmFnUHJldmlldzogY29ubmVjdC5kcmFnUHJldmlldygpLFxyXG5cdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyb3BQcm9wcyAoY29ubmVjdCkge1xyXG5cdHJldHVybiB7XHJcblx0XHRjb25uZWN0RHJvcFRhcmdldDogY29ubmVjdC5kcm9wVGFyZ2V0KCksXHJcblx0fTtcclxufTtcclxuXHJcbi8vIGV4cG9ydHMuU29ydGFibGUgPSBSZWxhdGVkSXRlbXNMaXN0Um93O1xyXG5leHBvcnRzLlNvcnRhYmxlID0gRHJhZ1NvdXJjZSgnaXRlbScsIGRyYWdJdGVtLCBkcmFnUHJvcHMpKERyb3BUYXJnZXQoJ2l0ZW0nLCBkcm9wSXRlbSwgZHJvcFByb3BzKShSZWxhdGVkSXRlbXNMaXN0Um93KSk7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5cclxuZnVuY3Rpb24gVG9vbGJhclNlY3Rpb24gKHsgY2xhc3NOYW1lLCBsZWZ0LCByaWdodCwgLi4ucHJvcHMgfSkge1xyXG5cdHByb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZXMoJ1Rvb2xiYXJfX3NlY3Rpb24nLCB7XHJcblx0XHQnVG9vbGJhcl9fc2VjdGlvbi0tbGVmdCc6IGxlZnQsXHJcblx0XHQnVG9vbGJhcl9fc2VjdGlvbi0tcmlnaHQnOiByaWdodCxcclxuXHR9LCBjbGFzc05hbWUpO1xyXG5cclxuXHRyZXR1cm4gPGRpdiB7Li4ucHJvcHN9IC8+O1xyXG59O1xyXG5cclxuVG9vbGJhclNlY3Rpb24ucHJvcFR5cGVzID0ge1xyXG5cdGxlZnQ6IFByb3BUeXBlcy5ib29sLFxyXG5cdHJpZ2h0OiBQcm9wVHlwZXMuYm9vbCxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVG9vbGJhclNlY3Rpb247XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5jb25zdCBUb29sYmFyID0gKHByb3BzKSA9PiA8ZGl2IHsuLi5wcm9wc30gY2xhc3NOYW1lPVwiVG9vbGJhclwiIC8+O1xyXG5cclxuVG9vbGJhci5kaXNwbGF5TmFtZSA9ICdUb29sYmFyJztcclxuVG9vbGJhci5wcm9wVHlwZXMgPSB7XHJcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFRvb2xiYXI7XHJcbiIsImV4cG9ydCBjb25zdCBTRUxFQ1RfSVRFTSA9ICdhcHAvSXRlbS9TRUxFQ1RfSVRFTSc7XHJcbmV4cG9ydCBjb25zdCBMT0FEX0RBVEEgPSAnYXBwL0l0ZW0vTE9BRF9EQVRBJztcclxuZXhwb3J0IGNvbnN0IERBVEFfTE9BRElOR19TVUNDRVNTID0gJ2FwcC9JdGVtL0RBVEFfTE9BRElOR19TVUNDRVNTJztcclxuZXhwb3J0IGNvbnN0IERBVEFfTE9BRElOR19FUlJPUiA9ICdhcHAvSXRlbS9EQVRBX0xPQURJTkdfRVJST1InO1xyXG5leHBvcnQgY29uc3QgRFJBR19NT1ZFX0lURU0gPSAnYXBwL0l0ZW0vRFJBR19NT1ZFX0lURU0nO1xyXG5leHBvcnQgY29uc3QgRFJBR19SRVNFVF9JVEVNUyA9ICdhcHAvSXRlbS9EUkFHX1JFU0VUX0lURU1TJztcclxuZXhwb3J0IGNvbnN0IExPQURfUkVMQVRJT05TSElQX0RBVEEgPSAnYXBwL0l0ZW0vTE9BRF9SRUxBVElPTlNISVBfREFUQSc7XHJcbiIsIi8qKlxyXG4gKiBJdGVtIFZpZXdcclxuICpcclxuICogVGhpcyBpcyB0aGUgaXRlbSB2aWV3LCBpdCBpcyByZW5kZXJlZCB3aGVuIHVzZXJzIHZpc2l0IGEgcGFnZSBvZiBhIHNwZWNpZmljXHJcbiAqIGl0ZW0uIFRoaXMgbWFpbmx5IHJlbmRlcnMgdGhlIGZvcm0gdG8gZWRpdCB0aGUgaXRlbSBjb250ZW50IGluLlxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENlbnRlciwgQ29udGFpbmVyLCBTcGlubmVyIH0gZnJvbSAnLi4vLi4vZWxlbWVudGFsJztcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcblxyXG5pbXBvcnQgeyBsaXN0c0J5S2V5IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbGlzdHMnO1xyXG5pbXBvcnQgQ3JlYXRlRm9ybSBmcm9tICcuLi8uLi9zaGFyZWQvQ3JlYXRlRm9ybSc7XHJcbmltcG9ydCBBbGVydCBmcm9tICcuLi8uLi9lbGVtZW50YWwvQWxlcnQnO1xyXG5pbXBvcnQgRWRpdEZvcm0gZnJvbSAnLi9jb21wb25lbnRzL0VkaXRGb3JtJztcclxuaW1wb3J0IEVkaXRGb3JtSGVhZGVyIGZyb20gJy4vY29tcG9uZW50cy9FZGl0Rm9ybUhlYWRlcic7XHJcbmltcG9ydCBSZWxhdGVkSXRlbXNMaXN0IGZyb20gJy4vY29tcG9uZW50cy9SZWxhdGVkSXRlbXNMaXN0L1JlbGF0ZWRJdGVtc0xpc3QnO1xyXG4vLyBpbXBvcnQgRmxhc2hNZXNzYWdlcyBmcm9tICcuLi8uLi9zaGFyZWQvRmxhc2hNZXNzYWdlcyc7XHJcblxyXG5pbXBvcnQgSWZyYW1lQ29udGVudCBmcm9tICcuLi8uLi9zaGFyZWQvSWZyYW1lQ29udGVudCc7XHJcblxyXG5pbXBvcnQge1xyXG5cdHNlbGVjdEl0ZW0sXHJcblx0bG9hZEl0ZW1EYXRhLFxyXG59IGZyb20gJy4vYWN0aW9ucyc7XHJcblxyXG5pbXBvcnQge1xyXG5cdHNlbGVjdExpc3QsXHJcbn0gZnJvbSAnLi4vTGlzdC9hY3Rpb25zJztcclxuXHJcbnZhciBJdGVtVmlldyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ0l0ZW1WaWV3JyxcclxuXHRjb250ZXh0VHlwZXM6IHtcclxuXHRcdHJvdXRlcjogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG5cdH0sXHJcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGNyZWF0ZUlzT3BlbjogZmFsc2UsXHJcblx0XHRcdHNob3dJZnJhbWU6IGZhbHNlXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xyXG5cdFx0Ly8gV2hlbiB3ZSBkaXJlY3RseSBuYXZpZ2F0ZSB0byBhbiBpdGVtIHdpdGhvdXQgY29taW5nIGZyb20gYW5vdGhlciBjbGllbnRcclxuXHRcdC8vIHNpZGUgcm91dGVkIHBhZ2UgYmVmb3JlLCB3ZSBuZWVkIHRvIHNlbGVjdCB0aGUgbGlzdCBiZWZvcmUgaW5pdGlhbGl6aW5nIHRoZSBpdGVtXHJcblx0XHQvLyBXZSBhbHNvIG5lZWQgdG8gdXBkYXRlIHdoZW4gdGhlIGxpc3QgaWQgaGFzIGNoYW5nZWRcclxuXHRcdGlmICghdGhpcy5wcm9wcy5jdXJyZW50TGlzdCB8fCB0aGlzLnByb3BzLmN1cnJlbnRMaXN0LmlkICE9PSB0aGlzLnByb3BzLnBhcmFtcy5saXN0SWQpIHtcclxuXHRcdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChzZWxlY3RMaXN0KHRoaXMucHJvcHMucGFyYW1zLmxpc3RJZCkpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5pbml0aWFsaXplSXRlbSh0aGlzLnByb3BzLnBhcmFtcy5pdGVtSWQpO1xyXG5cclxuXHR9LFxyXG5cdGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKG5leHRQcm9wcykge1xyXG5cdFx0Ly8gV2UndmUgb3BlbmVkIGEgbmV3IGl0ZW0gZnJvbSB0aGUgY2xpZW50IHNpZGUgcm91dGluZywgc28gaW5pdGlhbGl6ZVxyXG5cdFx0Ly8gYWdhaW4gd2l0aCB0aGUgbmV3IGl0ZW0gaWRcclxuXHRcdGlmIChuZXh0UHJvcHMucGFyYW1zLml0ZW1JZCAhPT0gdGhpcy5wcm9wcy5wYXJhbXMuaXRlbUlkKSB7XHJcblx0XHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goc2VsZWN0TGlzdChuZXh0UHJvcHMucGFyYW1zLmxpc3RJZCkpO1xyXG5cdFx0XHR0aGlzLmluaXRpYWxpemVJdGVtKG5leHRQcm9wcy5wYXJhbXMuaXRlbUlkKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdC8vIEluaXRpYWxpemUgYW4gaXRlbVxyXG5cdGluaXRpYWxpemVJdGVtIChpdGVtSWQpIHtcclxuXHRcdGNvbnN0IGxpc3RJdGVtID0gdGhpcy5wcm9wcy5saXN0cy5kYXRhW3RoaXMucHJvcHMucGFyYW1zLmxpc3RJZF07XHJcblx0XHRpZihsaXN0SXRlbS5saW5rLmVkaXQpIHtcclxuXHRcdFx0bGV0IGVkaXRMaW5rID0gbGlzdEl0ZW0ubGluay5lZGl0O1xyXG5cdFx0XHRlZGl0TGluayA9IGVkaXRMaW5rLnJlcGxhY2UoJzppZCcsIGl0ZW1JZCk7XHJcblx0XHRcdGNvbnN0IGlmcmFtZVVSTCA9IGAke0tleXN0b25lLmV4dGVybmFsSG9zdH0ke2VkaXRMaW5rfWA7XHJcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRcdHNob3dJZnJhbWU6IHRydWUsXHJcblx0XHRcdFx0aWZyYW1lVVJMOiBpZnJhbWVVUkxcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKHNlbGVjdEl0ZW0oaXRlbUlkKSk7XHJcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGxvYWRJdGVtRGF0YSgpKTtcclxuXHR9LFxyXG5cdC8vIENhbGxlZCB3aGVuIGEgbmV3IGl0ZW0gaXMgY3JlYXRlZFxyXG5cdG9uQ3JlYXRlIChpdGVtKSB7XHJcblx0XHQvLyBIaWRlIHRoZSBjcmVhdGUgZm9ybVxyXG5cdFx0dGhpcy50b2dnbGVDcmVhdGVNb2RhbChmYWxzZSk7XHJcblx0XHQvLyBSZWRpcmVjdCB0byBuZXdseSBjcmVhdGVkIGl0ZW0gcGF0aFxyXG5cdFx0Y29uc3QgbGlzdCA9IHRoaXMucHJvcHMuY3VycmVudExpc3Q7XHJcblx0XHR0aGlzLmNvbnRleHQucm91dGVyLnB1c2goYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2xpc3QucGF0aH0vJHtpdGVtLmlkfWApO1xyXG5cdH0sXHJcblxyXG5cdGNhbmNlbElmcmFtZSAoKSB7XHJcblx0XHRjb25zdCBsaXN0ID0gdGhpcy5wcm9wcy5jdXJyZW50TGlzdDtcclxuXHRcdHRoaXMuY29udGV4dC5yb3V0ZXIucHVzaChgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7bGlzdC5wYXRofWApO1xyXG5cdH0sXHJcblx0Ly8gT3BlbiBhbmQgY2xvc2UgdGhlIGNyZWF0ZSBuZXcgaXRlbSBtb2RhbFxyXG5cdHRvZ2dsZUNyZWF0ZU1vZGFsICh2aXNpYmxlKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0Y3JlYXRlSXNPcGVuOiB2aXNpYmxlLFxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHQvLyBSZW5kZXIgdGhpcyBpdGVtcyByZWxhdGlvbnNoaXBzXHJcblx0cmVuZGVyUmVsYXRpb25zaGlwcyAoKSB7XHJcblx0XHRjb25zdCB7IHJlbGF0aW9uc2hpcHMgfSA9IHRoaXMucHJvcHMuY3VycmVudExpc3Q7XHJcblx0XHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpb25zaGlwcyk7XHJcblx0XHRpZiAoIWtleXMubGVuZ3RoKSByZXR1cm47XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIlJlbGF0aW9uc2hpcHNcIj5cclxuXHRcdFx0XHQ8Q29udGFpbmVyPlxyXG5cdFx0XHRcdFx0PGgyPlJlbGF0aW9uc2hpcHM8L2gyPlxyXG5cdFx0XHRcdFx0e2tleXMubWFwKGtleSA9PiB7XHJcblx0XHRcdFx0XHRcdGNvbnN0IHJlbGF0aW9uc2hpcCA9IHJlbGF0aW9uc2hpcHNba2V5XTtcclxuXHRcdFx0XHRcdFx0Y29uc3QgcmVmTGlzdCA9IGxpc3RzQnlLZXlbcmVsYXRpb25zaGlwLnJlZl07XHJcblx0XHRcdFx0XHRcdGNvbnN0IHsgY3VycmVudExpc3QsIHBhcmFtcywgcmVsYXRpb25zaGlwRGF0YSwgZHJhZyB9ID0gdGhpcy5wcm9wcztcclxuXHRcdFx0XHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHRcdFx0XHQ8UmVsYXRlZEl0ZW1zTGlzdFxyXG5cdFx0XHRcdFx0XHRcdFx0a2V5PXtyZWxhdGlvbnNoaXAucGF0aH1cclxuXHRcdFx0XHRcdFx0XHRcdGxpc3Q9e2N1cnJlbnRMaXN0fVxyXG5cdFx0XHRcdFx0XHRcdFx0cmVmTGlzdD17cmVmTGlzdH1cclxuXHRcdFx0XHRcdFx0XHRcdHJlbGF0ZWRJdGVtSWQ9e3BhcmFtcy5pdGVtSWR9XHJcblx0XHRcdFx0XHRcdFx0XHRyZWxhdGlvbnNoaXA9e3JlbGF0aW9uc2hpcH1cclxuXHRcdFx0XHRcdFx0XHRcdGl0ZW1zPXtyZWxhdGlvbnNoaXBEYXRhW3JlbGF0aW9uc2hpcC5wYXRoXX1cclxuXHRcdFx0XHRcdFx0XHRcdGRyYWdOZXdTb3J0T3JkZXI9e2RyYWcubmV3U29ydE9yZGVyfVxyXG5cdFx0XHRcdFx0XHRcdFx0ZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XHJcblx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdH0pfVxyXG5cdFx0XHRcdDwvQ29udGFpbmVyPlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fSxcclxuXHQvLyBIYW5kbGUgZXJyb3JzXHJcblx0aGFuZGxlRXJyb3IgKGVycm9yKSB7XHJcblx0XHRjb25zdCBkZXRhaWwgPSBlcnJvci5kZXRhaWw7XHJcblx0XHRpZiAoZGV0YWlsKSB7XHJcblx0XHRcdC8vIEl0ZW0gbm90IGZvdW5kXHJcblx0XHRcdGlmIChkZXRhaWwubmFtZSA9PT0gJ0Nhc3RFcnJvcidcclxuXHRcdFx0XHQmJiBkZXRhaWwucGF0aCA9PT0gJ19pZCcpIHtcclxuXHRcdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdFx0PENvbnRhaW5lcj5cclxuXHRcdFx0XHRcdFx0PEFsZXJ0IGNvbG9yPVwiZGFuZ2VyXCIgc3R5bGU9e3sgbWFyZ2luVG9wOiAnMmVtJyB9fT5cclxuXHRcdFx0XHRcdFx0XHRObyBpdGVtIG1hdGNoaW5nIGlkIFwie3RoaXMucHJvcHMucm91dGVQYXJhbXMuaXRlbUlkfVwiLiZuYnNwO1xyXG5cdFx0XHRcdFx0XHRcdDxMaW5rIHRvPXtgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7dGhpcy5wcm9wcy5yb3V0ZVBhcmFtcy5saXN0SWR9YH0+XHJcblx0XHRcdFx0XHRcdFx0XHRHb3QgYmFjayB0byB7dGhpcy5wcm9wcy5yb3V0ZVBhcmFtcy5saXN0SWR9P1xyXG5cdFx0XHRcdFx0XHRcdDwvTGluaz5cclxuXHRcdFx0XHRcdFx0PC9BbGVydD5cclxuXHRcdFx0XHRcdDwvQ29udGFpbmVyPlxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmIChlcnJvci5tZXNzYWdlKSB7XHJcblx0XHRcdC8vIFNlcnZlciBkb3duICsgcG9zc2libHkgb3RoZXIgZXJyb3JzXHJcblx0XHRcdGlmIChlcnJvci5tZXNzYWdlID09PSAnSW50ZXJuYWwgWE1MSHR0cFJlcXVlc3QgRXJyb3InKSB7XHJcblx0XHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHRcdDxDb250YWluZXI+XHJcblx0XHRcdFx0XHRcdDxBbGVydCBjb2xvcj1cImRhbmdlclwiIHN0eWxlPXt7IG1hcmdpblRvcDogJzJlbScgfX0+XHJcblx0XHRcdFx0XHRcdFx0V2UgZW5jb3VudGVyZWQgc29tZSBuZXR3b3JrIHByb2JsZW1zLCBwbGVhc2UgcmVmcmVzaC5cclxuXHRcdFx0XHRcdFx0PC9BbGVydD5cclxuXHRcdFx0XHRcdDwvQ29udGFpbmVyPlxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxDb250YWluZXI+XHJcblx0XHRcdFx0PEFsZXJ0IGNvbG9yPVwiZGFuZ2VyXCIgc3R5bGU9e3sgbWFyZ2luVG9wOiAnMmVtJyB9fT5cclxuXHRcdFx0XHRcdEFuIHVua25vd24gZXJyb3IgaGFzIG9jdXJyZWQsIHBsZWFzZSByZWZyZXNoLlxyXG5cdFx0XHRcdDwvQWxlcnQ+XHJcblx0XHRcdDwvQ29udGFpbmVyPlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHQvLyBJZiB3ZSBkb24ndCBoYXZlIGFueSBkYXRhIHlldCwgc2hvdyB0aGUgbG9hZGluZyBpbmRpY2F0b3JcclxuXHRcdGlmICghdGhpcy5wcm9wcy5yZWFkeSkge1xyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdDxDZW50ZXIgaGVpZ2h0PVwiNTB2aFwiIGRhdGEtc2NyZWVuLWlkPVwiaXRlbVwiPlxyXG5cdFx0XHRcdFx0PFNwaW5uZXIgLz5cclxuXHRcdFx0XHQ8L0NlbnRlcj5cclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCB7c2hvd0lmcmFtZSwgaWZyYW1lVVJMfSA9IHRoaXMuc3RhdGU7XHJcblxyXG5cdFx0Ly8gV2hlbiB3ZSBoYXZlIHRoZSBkYXRhLCByZW5kZXIgdGhlIGl0ZW0gdmlldyB3aXRoIGl0XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGRhdGEtc2NyZWVuLWlkPVwiaXRlbVwiIGNsYXNzTmFtZT1cImZsZXgtY29sdW1uXCI+XHJcblx0XHRcdFx0eyh0aGlzLnByb3BzLmVycm9yKSA/IHRoaXMuaGFuZGxlRXJyb3IodGhpcy5wcm9wcy5lcnJvcikgOiAoXHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImZsZXgtY29sdW1uXCI+XHJcblx0XHRcdFx0XHRcdDxDb250YWluZXIgY2xhc3NOYW1lPXtcImZsZXgtY29sdW1uXCJ9PlxyXG5cdFx0XHRcdFx0XHRcdDxFZGl0Rm9ybUhlYWRlclxyXG5cdFx0XHRcdFx0XHRcdFx0bGlzdD17dGhpcy5wcm9wcy5jdXJyZW50TGlzdH1cclxuXHRcdFx0XHRcdFx0XHRcdGRhdGE9e3RoaXMucHJvcHMuZGF0YX1cclxuXHRcdFx0XHRcdFx0XHRcdHRvZ2dsZUNyZWF0ZT17dGhpcy50b2dnbGVDcmVhdGVNb2RhbH1cclxuXHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHRcdDxDcmVhdGVGb3JtXHJcblx0XHRcdFx0XHRcdFx0XHRsaXN0PXt0aGlzLnByb3BzLmN1cnJlbnRMaXN0fVxyXG5cdFx0XHRcdFx0XHRcdFx0aXNPcGVuPXt0aGlzLnN0YXRlLmNyZWF0ZUlzT3Blbn1cclxuXHRcdFx0XHRcdFx0XHRcdG9uQ2FuY2VsPXsoKSA9PiB0aGlzLnRvZ2dsZUNyZWF0ZU1vZGFsKGZhbHNlKX1cclxuXHRcdFx0XHRcdFx0XHRcdG9uQ3JlYXRlPXsoaXRlbSkgPT4gdGhpcy5vbkNyZWF0ZShpdGVtKX1cclxuXHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHRcdHtzaG93SWZyYW1lICYmIGlmcmFtZVVSTCA/IDxJZnJhbWVDb250ZW50IHNyYz17aWZyYW1lVVJMfSBzaG93PXt0cnVlfSBvbkNhbmNlbD17dGhpcy5jYW5jZWxJZnJhbWV9Lz4gOlxyXG5cdFx0XHRcdFx0XHRcdFx0PEVkaXRGb3JtXHJcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3Q9e3RoaXMucHJvcHMuY3VycmVudExpc3R9XHJcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGE9e3RoaXMucHJvcHMuZGF0YX1cclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJvdXRlcj17dGhpcy5jb250ZXh0LnJvdXRlcn1cclxuXHRcdFx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0PC9Db250YWluZXI+XHJcblx0XHRcdFx0XHRcdHt0aGlzLnJlbmRlclJlbGF0aW9uc2hpcHMoKX1cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdCl9XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gY29ubmVjdCgoc3RhdGUpID0+ICh7XHJcblx0bGlzdHM6IHN0YXRlLmxpc3RzLFxyXG5cdGRhdGE6IHN0YXRlLml0ZW0uZGF0YSxcclxuXHRsb2FkaW5nOiBzdGF0ZS5pdGVtLmxvYWRpbmcsXHJcblx0cmVhZHk6IHN0YXRlLml0ZW0ucmVhZHksXHJcblx0ZXJyb3I6IHN0YXRlLml0ZW0uZXJyb3IsXHJcblx0Y3VycmVudExpc3Q6IHN0YXRlLmxpc3RzLmN1cnJlbnRMaXN0LFxyXG5cdHJlbGF0aW9uc2hpcERhdGE6IHN0YXRlLml0ZW0ucmVsYXRpb25zaGlwRGF0YSxcclxuXHRkcmFnOiBzdGF0ZS5pdGVtLmRyYWcsXHJcbn0pKShJdGVtVmlldyk7XHJcbiIsIi8qKlxyXG4gKiBJdGVtIHJlZHVjZXIsIGhhbmRsZXMgdGhlIGl0ZW0gZGF0YSBhbmQgbG9hZGluZ1xyXG4gKi9cclxuaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcclxuaW1wb3J0IHtcclxuXHRTRUxFQ1RfSVRFTSxcclxuXHRMT0FEX0RBVEEsXHJcblx0REFUQV9MT0FESU5HX1NVQ0NFU1MsXHJcblx0REFUQV9MT0FESU5HX0VSUk9SLFxyXG5cdERSQUdfTU9WRV9JVEVNLFxyXG5cdERSQUdfUkVTRVRfSVRFTVMsXHJcblx0TE9BRF9SRUxBVElPTlNISVBfREFUQSxcclxufSBmcm9tICcuL2NvbnN0YW50cyc7XHJcblxyXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XHJcblx0ZGF0YTogbnVsbCxcclxuXHRpZDogbnVsbCxcclxuXHRsb2FkaW5nOiBmYWxzZSxcclxuXHRyZWFkeTogZmFsc2UsXHJcblx0ZXJyb3I6IG51bGwsXHJcblx0cmVsYXRpb25zaGlwRGF0YToge30sXHJcblx0ZHJhZzoge1xyXG5cdFx0Y2xvbmVkSXRlbXM6IGZhbHNlLFxyXG5cdFx0bmV3U29ydE9yZGVyOiBudWxsLFxyXG5cdFx0cmVsYXRpb25zaGlwUGF0aDogZmFsc2UsXHJcblx0fSxcclxufTtcclxuXHJcbmZ1bmN0aW9uIGl0ZW0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pIHtcclxuXHRzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcblx0XHRjYXNlIFNFTEVDVF9JVEVNOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdHJlYWR5OiBmYWxzZSxcclxuXHRcdFx0XHRpZDogYWN0aW9uLmlkLFxyXG5cdFx0XHRcdGRhdGE6IG51bGwsXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBMT0FEX0RBVEE6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0bG9hZGluZzogdHJ1ZSxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIERBVEFfTE9BRElOR19TVUNDRVNTOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGRhdGE6IGFjdGlvbi5kYXRhLFxyXG5cdFx0XHRcdGxvYWRpbmc6IGZhbHNlLFxyXG5cdFx0XHRcdHJlYWR5OiB0cnVlLFxyXG5cdFx0XHRcdGVycm9yOiBudWxsLFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgREFUQV9MT0FESU5HX0VSUk9SOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGRhdGE6IG51bGwsXHJcblx0XHRcdFx0bG9hZGluZzogZmFsc2UsXHJcblx0XHRcdFx0cmVhZHk6IHRydWUsXHJcblx0XHRcdFx0ZXJyb3I6IGFjdGlvbi5lcnJvcixcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIERSQUdfTU9WRV9JVEVNOlxyXG5cdFx0XHRjb25zdCBjdXJyZW50SXRlbXMgPSBzdGF0ZS5yZWxhdGlvbnNoaXBEYXRhW2FjdGlvbi5yZWxhdGlvbnNoaXBQYXRoXS5yZXN1bHRzO1xyXG5cdFx0XHQvLyBDYWNoZSBhIGNvcHkgb2YgdGhlIGN1cnJlbnQgaXRlbXMgdG8gcmVzZXQgdGhlIGl0ZW1zIHdoZW4gZGlzbWlzc2luZyBhIGRyYWcgYW5kIGRyb3AgaWYgYSBjYWNoZWQgY29weSBkb2Vzbid0IGFscmVhZHkgZXhpc3RcclxuXHRcdFx0Y29uc3QgY2xvbmVkSXRlbXMgPSBzdGF0ZS5kcmFnLmNsb25lZEl0ZW1zIHx8IGN1cnJlbnRJdGVtcztcclxuXHRcdFx0Y29uc3QgaXRlbSA9IGN1cnJlbnRJdGVtc1thY3Rpb24ucHJldkluZGV4XTtcclxuXHRcdFx0Ly8gUmVtb3ZlIGl0ZW0gYXQgcHJldkluZGV4IGZyb20gYXJyYXkgYW5kIHNhdmUgdGhhdCBhcnJheSBpblxyXG5cdFx0XHQvLyBpdGVtc1dpdGhvdXRJdGVtXHJcblx0XHRcdGxldCBpdGVtc1dpdGhvdXRJdGVtID0gY3VycmVudEl0ZW1zXHJcblx0XHRcdFx0LnNsaWNlKDAsIGFjdGlvbi5wcmV2SW5kZXgpXHJcblx0XHRcdFx0LmNvbmNhdChcclxuXHRcdFx0XHRcdGN1cnJlbnRJdGVtcy5zbGljZShcclxuXHRcdFx0XHRcdFx0YWN0aW9uLnByZXZJbmRleCArIDEsXHJcblx0XHRcdFx0XHRcdGN1cnJlbnRJdGVtcy5sZW5ndGhcclxuXHRcdFx0XHRcdClcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHQvLyBBZGQgaXRlbSBiYWNrIGluIGF0IG5ldyBpbmRleFxyXG5cdFx0XHRpdGVtc1dpdGhvdXRJdGVtLnNwbGljZShhY3Rpb24ubmV3SW5kZXgsIDAsIGl0ZW0pO1xyXG5cdFx0XHRjb25zdCBuZXdSZWxhdGlvbnNoaXBEYXRhID0gYXNzaWduKHt9LCBzdGF0ZS5yZWxhdGlvbnNoaXBEYXRhW2FjdGlvbi5yZWxhdGlvbnNoaXBQYXRoXSwge1xyXG5cdFx0XHRcdHJlc3VsdHM6IGl0ZW1zV2l0aG91dEl0ZW0sXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGRyYWc6IHtcclxuXHRcdFx0XHRcdG5ld1NvcnRPcmRlcjogYWN0aW9uLm5ld1NvcnRPcmRlcixcclxuXHRcdFx0XHRcdGNsb25lZEl0ZW1zOiBjbG9uZWRJdGVtcyxcclxuXHRcdFx0XHRcdHJlbGF0aW9uc2hpcFBhdGg6IGFjdGlvbi5yZWxhdGlvbnNoaXBQYXRoLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0cmVsYXRpb25zaGlwRGF0YToge1xyXG5cdFx0XHRcdFx0Li4uc3RhdGUucmVsYXRpb25zaGlwRGF0YSxcclxuXHRcdFx0XHRcdFthY3Rpb24ucmVsYXRpb25zaGlwUGF0aF06IG5ld1JlbGF0aW9uc2hpcERhdGEsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIERSQUdfUkVTRVRfSVRFTVM6XHJcblx0XHRcdGNvbnN0IG9yaWdpbmFsUmVsYXRpb25zaGlwRGF0YSA9IGFzc2lnbih7fSwgc3RhdGUucmVsYXRpb25zaGlwRGF0YVtzdGF0ZS5kcmFnLnJlbGF0aW9uc2hpcFBhdGhdLCB7XHJcblx0XHRcdFx0cmVzdWx0czogc3RhdGUuZHJhZy5jbG9uZWRJdGVtcyxcclxuXHRcdFx0fSk7XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0ZHJhZzoge1xyXG5cdFx0XHRcdFx0bmV3U29ydE9yZGVyOiBudWxsLFxyXG5cdFx0XHRcdFx0Y2xvbmVkSXRlbXM6IGZhbHNlLFxyXG5cdFx0XHRcdFx0cmVsYXRpb25zaGlwUGF0aDogZmFsc2UsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRyZWxhdGlvbnNoaXBEYXRhOiB7XHJcblx0XHRcdFx0XHQuLi5zdGF0ZS5yZWxhdGlvbnNoaXBEYXRhLFxyXG5cdFx0XHRcdFx0W3N0YXRlLmRyYWcucmVsYXRpb25zaGlwUGF0aF06IG9yaWdpbmFsUmVsYXRpb25zaGlwRGF0YSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgTE9BRF9SRUxBVElPTlNISVBfREFUQTpcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHQvLyBSZXNldCBkcmFnIGFuZCBkcm9wIHdoZW4gcmVsYXRpb25zaGlwIGRhdGEgaXMgbG9hZGVkXHJcblx0XHRcdFx0ZHJhZzoge1xyXG5cdFx0XHRcdFx0bmV3U29ydE9yZGVyOiBudWxsLFxyXG5cdFx0XHRcdFx0Y2xvbmVkSXRlbXM6IGZhbHNlLFxyXG5cdFx0XHRcdFx0cmVsYXRpb25zaGlwUGF0aDogZmFsc2UsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRyZWxhdGlvbnNoaXBEYXRhOiB7XHJcblx0XHRcdFx0XHQuLi5zdGF0ZS5yZWxhdGlvbnNoaXBEYXRhLFxyXG5cdFx0XHRcdFx0W2FjdGlvbi5yZWxhdGlvbnNoaXBQYXRoXTogYWN0aW9uLmRhdGEsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSk7XHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHRyZXR1cm4gc3RhdGU7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpdGVtO1xyXG4iLCJpbXBvcnQge1xyXG5cdENMRUFSX0ZJTFRFUixcclxuXHRDTEVBUl9BTExfRklMVEVSUyxcclxuXHRDTEVBUl9DQUNIRURfUVVFUlksXHJcblx0U0VUX0FDVElWRV9TRUFSQ0gsXHJcblx0U0VMRUNUX0FDVElWRV9TT1JULFxyXG5cdFNFTEVDVF9BQ1RJVkVfQ09MVU1OUyxcclxuXHRTRVRfQUNUSVZFX0xJU1QsXHJcblx0U0VMRUNUX0ZJTFRFUixcclxufSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBBY3RpdmUgYWN0aW9uc1xyXG4gKi9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRBY3RpdmVTZWFyY2ggKHNlYXJjaFN0cmluZykge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBTRVRfQUNUSVZFX1NFQVJDSCxcclxuXHRcdHNlYXJjaFN0cmluZyxcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0QWN0aXZlU29ydCAocGF0aCkge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBTRUxFQ1RfQUNUSVZFX1NPUlQsXHJcblx0XHRwYXRoLFxyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRBY3RpdmVDb2x1bW5zIChjb2x1bW5zKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IFNFTEVDVF9BQ1RJVkVfQ09MVU1OUyxcclxuXHRcdGNvbHVtbnMsXHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEFjdGl2ZUxpc3QgKGxpc3QsIGlkKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IFNFVF9BQ1RJVkVfTElTVCxcclxuXHRcdGxpc3QsXHJcblx0XHRpZCxcclxuXHR9O1xyXG59XHJcblxyXG4vKipcclxuICogRmlsdGVyaW5nIGFjdGlvbnNcclxuICovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJGaWx0ZXIgKHBhdGgpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogQ0xFQVJfRklMVEVSLFxyXG5cdFx0cGF0aCxcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJBbGxGaWx0ZXJzICgpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogQ0xFQVJfQUxMX0ZJTFRFUlMsXHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEZpbHRlciAocGF0aCwgdmFsdWUpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogU0VMRUNUX0ZJTFRFUixcclxuXHRcdGZpbHRlcjogeyBwYXRoLCB2YWx1ZSB9LFxyXG5cdH07XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJDYWNoZWRRdWVyeSAoKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IENMRUFSX0NBQ0hFRF9RVUVSWSxcclxuXHR9O1xyXG59XHJcbiIsImltcG9ydCB7XHJcblx0U0VUX1JPV19BTEVSVCxcclxuXHRSRVNFVF9EUkFHX1BBR0UsXHJcblx0UkVTRVRfRFJBR19JVEVNUyxcclxuXHRTRVRfRFJBR19JVEVNLFxyXG5cdFNFVF9EUkFHX0lOREVYLFxyXG5cdERSQUdfTU9WRV9JVEVNLFxyXG59IGZyb20gJy4uL2NvbnN0YW50cyc7XHJcblxyXG5pbXBvcnQge1xyXG5cdHNldEN1cnJlbnRQYWdlLFxyXG5cdGl0ZW1zTG9hZGVkLFxyXG5cdGxvYWRJdGVtcyxcclxufSBmcm9tICcuLi9hY3Rpb25zJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXREcmFnQmFzZSAoaXRlbSwgaW5kZXgpIHtcclxuXHRyZXR1cm4gKGRpc3BhdGNoKSA9PiB7XHJcblx0XHRkaXNwYXRjaChyZXNldERyYWdQYWdlKCkpO1xyXG5cdFx0ZGlzcGF0Y2gocmVzZXREcmFnSXRlbXMoKSk7XHJcblx0XHRpZiAoaXRlbSkge1xyXG5cdFx0XHRkaXNwYXRjaChzZXREcmFnSXRlbShpdGVtKSk7XHJcblx0XHRcdGlmIChpbmRleCkge1xyXG5cdFx0XHRcdGRpc3BhdGNoKHNldERyYWdJbmRleChpbmRleCkpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNldERyYWdQYWdlICgpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0dHlwZTogUkVTRVRfRFJBR19QQUdFLFxyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNldERyYWdJdGVtcyAoKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IFJFU0VUX0RSQUdfSVRFTVMsXHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldERyYWdJdGVtIChpdGVtKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IFNFVF9EUkFHX0lURU0sXHJcblx0XHRpdGVtLFxyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXREcmFnSW5kZXggKGluZGV4KSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IFNFVF9EUkFHX0lOREVYLFxyXG5cdFx0aW5kZXgsXHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFJvd0FsZXJ0IChkYXRhKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IFNFVF9ST1dfQUxFUlQsXHJcblx0XHRkYXRhLFxyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtb3ZlSXRlbSAocHJldkluZGV4LCBuZXdJbmRleCwgb3B0aW9ucykge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBEUkFHX01PVkVfSVRFTSxcclxuXHRcdHByZXZJbmRleCxcclxuXHRcdG5ld0luZGV4LFxyXG5cdFx0b3B0aW9ucyxcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVvcmRlckl0ZW1zIChpdGVtLCBwcmV2U29ydE9yZGVyLCBuZXdTb3J0T3JkZXIsIGdvVG9QYWdlKSB7XHJcblx0Ly8gLy8gcmVzZXQgZHJhZ1xyXG5cdC8vIGRlZmF1bHREcmFnKCk7XHJcblx0cmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuXHRcdGlmIChnb1RvUGFnZSkge1xyXG5cdFx0XHQvLyBUT0RPIEZJR1VSRSBPVVQgSUYgVEhJUyBJUyBBIFJBQ0UgQ09ORElUSU9OXHJcblx0XHRcdGRpc3BhdGNoKHNldEN1cnJlbnRQYWdlKGdvVG9QYWdlKSk7XHJcblx0XHR9XHJcblx0XHRjb25zdCBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcblx0XHRjb25zdCBsaXN0ID0gc3RhdGUubGlzdHMuY3VycmVudExpc3Q7XHJcblxyXG5cdFx0Ly8gU2VuZCB0aGUgaXRlbSwgcHJldmlvdXMgc29ydE9yZGVyIGFuZCB0aGUgbmV3IHNvcnRPcmRlclxyXG5cdFx0Ly8gd2Ugc2hvdWxkIGdldCB0aGUgcHJvcGVyIGxpc3QgYW5kIG5ldyBwYWdlIHJlc3VsdHMgaW4gcmV0dXJuXHJcblx0XHRsaXN0LnJlb3JkZXJJdGVtcyhcclxuXHRcdFx0aXRlbSxcclxuXHRcdFx0cHJldlNvcnRPcmRlcixcclxuXHRcdFx0bmV3U29ydE9yZGVyLFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c2VhcmNoOiBzdGF0ZS5hY3RpdmUuc2VhcmNoLFxyXG5cdFx0XHRcdGZpbHRlcnM6IHN0YXRlLmFjdGl2ZS5maWx0ZXJzLFxyXG5cdFx0XHRcdHNvcnQ6IHN0YXRlLmFjdGl2ZS5zb3J0LFxyXG5cdFx0XHRcdGNvbHVtbnM6IHN0YXRlLmFjdGl2ZS5jb2x1bW5zLFxyXG5cdFx0XHRcdHBhZ2U6IHN0YXRlLmxpc3RzLnBhZ2UsXHJcblx0XHRcdH0sIChlcnIsIGl0ZW1zKSA9PiB7XHJcblx0XHRcdFx0Ly8gSWYgZXJyLCBmbGFzaCB0aGUgcm93IGFsZXJ0XHJcblx0XHRcdFx0aWYgKGVycikge1xyXG5cdFx0XHRcdFx0ZGlzcGF0Y2gocmVzZXRJdGVtcyhpdGVtLmlkKSk7XHJcblx0XHRcdFx0XHQvLyByZXR1cm4gdGhpcy5yZXNldEl0ZW1zKHRoaXMuZmluZEl0ZW1CeUlkW2l0ZW0uaWRdKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZGlzcGF0Y2goaXRlbXNMb2FkZWQoaXRlbXMpKTtcclxuXHRcdFx0XHRcdGRpc3BhdGNoKHNldFJvd0FsZXJ0KHtcclxuXHRcdFx0XHRcdFx0c3VjY2VzczogaXRlbS5pZCxcclxuXHRcdFx0XHRcdFx0ZmFpbDogZmFsc2UsXHJcblx0XHRcdFx0XHR9KSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHQpO1xyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNldEl0ZW1zIChpdGVtSWQpIHtcclxuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG5cdFx0Y29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG5cdFx0Y29uc3QgeyBwYWdlLCBkcmFnIH0gPSBzdGF0ZS5saXN0cztcclxuXHJcblx0XHRpZiAocGFnZS5pbmRleCAhPT0gZHJhZy5wYWdlKSB7XHJcblx0XHRcdC8vIFdlIGFyZSBub3Qgb24gdGhlIG9yaWdpbmFsIHBhZ2Ugc28gd2UgbmVlZCB0byBtb3ZlIGJhY2sgdG8gaXRcclxuXHRcdFx0ZGlzcGF0Y2goc2V0Q3VycmVudFBhZ2UoZHJhZy5wYWdlKSk7XHJcblx0XHRcdGRpc3BhdGNoKGxvYWRJdGVtcyh7XHJcblx0XHRcdFx0ZmFpbDogdHJ1ZSxcclxuXHRcdFx0XHRpZDogaXRlbUlkLFxyXG5cdFx0XHR9KSk7XHJcblx0XHRcdC8vIHJlc2V0IGRyYWdcclxuXHRcdFx0Ly8gcmV0dXJuIGRlZmF1bHREcmFnKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVzZXQgdGhlIGxpc3QgaWYgZHJhZ291dCBvciBlcnJvclxyXG5cdFx0ZGlzcGF0Y2goc2V0Um93QWxlcnQoe1xyXG5cdFx0XHRzdWNjZXNzOiBmYWxzZSxcclxuXHRcdFx0ZmFpbDogaXRlbUlkLFxyXG5cdFx0fSkpO1xyXG5cdFx0Ly8gd2UgdXNlIHRoZSBjYWNoZWQgY2xvbmUgc2luY2UgdGhpcyBpcyB0aGUgc2FtZSBwYWdlXHJcblx0XHQvLyB0aGUgY2xvbmUgY29udGFpbnMgdGhlIHByb3BlciBpbmRleCBudW1iZXJzIHdoaWNoIGdldCBvdmVyd3JpdHRlbiBvbiBkcmFnXHJcblx0XHQvLyBfaXRlbXMucmVzdWx0cyA9IGRyYWcuY2xvbmVkSXRlbXM7XHJcblx0XHQvLyBkZWZhdWx0RHJhZygpO1xyXG5cdFx0Ly8gdGhpcy5ub3RpZnlDaGFuZ2UoKTtcclxuXHR9O1xyXG59XHJcbiIsImltcG9ydCB7XHJcblx0U0VMRUNUX0xJU1QsXHJcblx0U0VUX0NVUlJFTlRfUEFHRSxcclxuXHRJTklUSUFMX0xJU1RfTE9BRCxcclxufSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5cclxuaW1wb3J0IHsgc2V0QWN0aXZlTGlzdCB9IGZyb20gJy4vYWN0aXZlJztcclxuXHJcbi8qKlxyXG4gKiBTZWxlY3QgYSBsaXN0LCBhbmQgc2V0IGl0IGFzIHRoZSBhY3RpdmUgbGlzdC4gQ2FsbGVkIHdoZW5ldmVyIHRoZSBtYWluXHJcbiAqIExpc3QgY29tcG9uZW50IG1vdW50cyBvciB0aGUgbGlzdCBjaGFuZ2VzLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGlkIFRoZSBsaXN0IElELCBwYXNzZWQgdmlhIHRoaXMucHJvcHMucGFyYW1zLmxpc3RJZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdExpc3QgKGlkKSB7XHJcblx0cmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuXHRcdGRpc3BhdGNoKHtcclxuXHRcdFx0dHlwZTogU0VMRUNUX0xJU1QsXHJcblx0XHRcdGlkLFxyXG5cdFx0fSk7XHJcblx0XHRkaXNwYXRjaChzZXRBY3RpdmVMaXN0KGdldFN0YXRlKCkubGlzdHMuZGF0YVtpZF0sIGlkKSk7XHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRJbml0aWFsSXRlbXMgKCkge1xyXG5cdHJldHVybiB7XHJcblx0XHR0eXBlOiBJTklUSUFMX0xJU1RfTE9BRCxcclxuXHR9O1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBjdXJyZW50IHBhZ2VcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4IFRoZSBwYWdlIG51bWJlciB3ZSB3YW50IHRvIGJlIG9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0Q3VycmVudFBhZ2UgKGluZGV4KSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IFNFVF9DVVJSRU5UX1BBR0UsXHJcblx0XHRpbmRleDogcGFyc2VJbnQoaW5kZXgpLFxyXG5cdH07XHJcbn1cclxuXHJcbi8vIEV4cG9ydCBhbGwgYWN0aW9ucyBmcm9tIGhlcmUgYWdhaW4gZm9yIGVhc2llciB1c2FiaWxpdHksIHRoYXQgdGhleSdyZSBzcGxpdCB1cFxyXG4vLyBzaG91bGQgYmUgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsIG9mIExpc3RcclxuXHJcbmltcG9ydCB7XHJcblx0c2V0RmlsdGVyLFxyXG5cdGNsZWFyRmlsdGVyLFxyXG5cdGNsZWFyQWxsRmlsdGVycyxcclxuXHRzZXRBY3RpdmVGaWx0ZXJzLFxyXG5cdHNldEFjdGl2ZVNlYXJjaCxcclxuXHRzZXRBY3RpdmVDb2x1bW5zLFxyXG5cdGNsZWFyQ2FjaGVkUXVlcnksXHJcblx0c2V0QWN0aXZlU29ydCxcclxufSBmcm9tICcuL2FjdGl2ZSc7XHJcblxyXG5pbXBvcnQge1xyXG5cdGxvYWRJdGVtcyxcclxuXHRpdGVtc0xvYWRlZCxcclxuXHRpdGVtTG9hZGluZ0Vycm9yLFxyXG5cdGRlbGV0ZUl0ZW1zLFxyXG5cdGRvd25sb2FkSXRlbXMsXHJcblx0Y3VzdG9tQWN0aW9uLFxyXG5cdGN1c3RvbUFjdGlvbkRvd25sb2FkLFxyXG59IGZyb20gJy4vaXRlbXMnO1xyXG5cclxuaW1wb3J0IHtcclxuXHRzZXREcmFnQmFzZSxcclxuXHRyZXNldEl0ZW1zLFxyXG5cdHJlb3JkZXJJdGVtcyxcclxuXHRzZXRSb3dBbGVydCxcclxuXHRtb3ZlSXRlbSxcclxufSBmcm9tICcuL2RyYWdkcm9wJztcclxuXHJcbmV4cG9ydCB7XHJcblx0c2V0RmlsdGVyLFxyXG5cdGNsZWFyRmlsdGVyLFxyXG5cdGNsZWFyQWxsRmlsdGVycyxcclxuXHRzZXRBY3RpdmVGaWx0ZXJzLFxyXG5cdHNldEFjdGl2ZVNlYXJjaCxcclxuXHRzZXRBY3RpdmVDb2x1bW5zLFxyXG5cdHNldEFjdGl2ZVNvcnQsXHJcblx0Y2xlYXJDYWNoZWRRdWVyeSxcclxuXHRsb2FkSXRlbXMsXHJcblx0aXRlbXNMb2FkZWQsXHJcblx0aXRlbUxvYWRpbmdFcnJvcixcclxuXHRkZWxldGVJdGVtcyxcclxuXHRzZXREcmFnQmFzZSxcclxuXHRyZXNldEl0ZW1zLFxyXG5cdHJlb3JkZXJJdGVtcyxcclxuXHRzZXRSb3dBbGVydCxcclxuXHRtb3ZlSXRlbSxcclxuXHRkb3dubG9hZEl0ZW1zLFxyXG5cdGN1c3RvbUFjdGlvbixcclxuXHRjdXN0b21BY3Rpb25Eb3dubG9hZCxcclxufTtcclxuIiwiaW1wb3J0IHtcclxuXHRMT0FEX0lURU1TLFxyXG5cdElURU1TX0xPQURFRCxcclxuXHRJVEVNX0xPQURJTkdfRVJST1IsXHJcbn0gZnJvbSAnLi4vY29uc3RhbnRzJztcclxuY29uc3QgeGhyID0gcmVxdWlyZSgneGhyJyk7XHJcbmNvbnN0IGFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcclxuaW1wb3J0IHsgTkVUV09SS19FUlJPUl9SRVRSWV9ERUxBWSB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbnN0YW50cyc7XHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkSXRlbXMob3B0aW9ucyA9IHt9KSB7XHJcblx0cmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcclxuXHRcdGxldCBjdXJyZW50TG9hZENvdW50ZXIgPSBnZXRTdGF0ZSgpLmxpc3RzLmxvYWRDb3VudGVyICsgMTtcclxuXHJcblx0XHRkaXNwYXRjaCh7XHJcblx0XHRcdHR5cGU6IExPQURfSVRFTVMsXHJcblx0XHRcdGxvYWRDb3VudGVyOiBjdXJyZW50TG9hZENvdW50ZXIsXHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBUYWtlIGEgc25hcHNob3Qgb2YgdGhlIGN1cnJlbnQgcmVkdXggc3RhdGUuXHJcblx0XHRjb25zdCBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcblx0XHQvLyBIb2xkIGEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50TGlzdCBpbiBzdGF0ZS5cclxuXHRcdGNvbnN0IGN1cnJlbnRMaXN0ID0gc3RhdGUubGlzdHMuY3VycmVudExpc3Q7XHJcblxyXG5cdFx0Y3VycmVudExpc3QubG9hZEl0ZW1zKHtcclxuXHRcdFx0c2VhcmNoOiBzdGF0ZS5hY3RpdmUuc2VhcmNoLFxyXG5cdFx0XHRmaWx0ZXJzOiBzdGF0ZS5hY3RpdmUuZmlsdGVycyxcclxuXHRcdFx0c29ydDogc3RhdGUuYWN0aXZlLnNvcnQsXHJcblx0XHRcdGNvbHVtbnM6IHN0YXRlLmFjdGl2ZS5jb2x1bW5zLFxyXG5cdFx0XHRwYWdlOiBzdGF0ZS5saXN0cy5wYWdlLFxyXG5cdFx0fSwgKGVyciwgaXRlbXMpID0+IHtcclxuXHJcblx0XHRcdC8vIENyZWF0ZSBhIG5ldyBzdGF0ZSBzbmFwc2hvdCBhbmQgY29tcGFyZSB0aGUgY3VycmVudCBhY3RpdmUgbGlzdCBpZFxyXG5cdFx0XHQvLyB0byB0aGUgaWQgb2YgdGhlIGN1cnJlbnRMaXN0IHJlZmVyZW5jZWQgYWJvdmUuXHJcblx0XHRcdC8vIElmIHRoZXkgYXJlIHRoZSBzYW1lLCB0aGVuIHRoaXMgaXMgdGhlIGxhdGVzdCBmZXRjaCByZXF1ZXN0LCB3ZSBtYXkgcmVzb2x2ZSB0aGlzIG5vcm1hbGx5LlxyXG5cdFx0XHQvLyBJZiB0aGVzZSBhcmUgbm90IHRoZSBzYW1lLCB0aGVuIGl0IG1lYW5zIHRoYXQgdGhpcyBpcyBub3QgdGhlIGxhdGVzdCBmZXRjaCByZXF1ZXN0LlxyXG5cdFx0XHQvLyBCQUlMIE9VVCFcclxuXHJcblx0XHRcdGlmIChnZXRTdGF0ZSgpLmFjdGl2ZS5pZCAhPT0gY3VycmVudExpc3QuaWQpIHJldHVybjtcclxuXHRcdFx0aWYgKGdldFN0YXRlKCkubGlzdHMubG9hZENvdW50ZXIgPiBjdXJyZW50TG9hZENvdW50ZXIpIHJldHVybjtcclxuXHRcdFx0aWYgKGl0ZW1zKSB7XHJcblxyXG5cdFx0XHRcdC8vIGlmIChwYWdlLmluZGV4ICE9PSBkcmFnLnBhZ2UgJiYgZHJhZy5pdGVtKSB7XHJcblx0XHRcdFx0Ly8gXHQvLyBhZGQgdGhlIGRyYWdnaW5nIGl0ZW1cclxuXHRcdFx0XHQvLyBcdGlmIChwYWdlLmluZGV4ID4gZHJhZy5wYWdlKSB7XHJcblx0XHRcdFx0Ly8gXHRcdF9pdGVtcy5yZXN1bHRzLnVuc2hpZnQoZHJhZy5pdGVtKTtcclxuXHRcdFx0XHQvLyBcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gXHRcdF9pdGVtcy5yZXN1bHRzLnB1c2goZHJhZy5pdGVtKTtcclxuXHRcdFx0XHQvLyBcdH1cclxuXHRcdFx0XHQvLyB9XHJcblx0XHRcdFx0Ly8gX2l0ZW1zUmVzdWx0c0Nsb25lID0gaXRlbXMucmVzdWx0cy5zbGljZSgwKTtcclxuXHRcdFx0XHQvL1xyXG5cclxuXHRcdFx0XHQvLyBUT0RPIFJlZW5hYmxlIHRoaXNcclxuXHRcdFx0XHQvLyBpZiAob3B0aW9ucy5zdWNjZXNzICYmIG9wdGlvbnMuaWQpIHtcclxuXHRcdFx0XHQvLyBcdC8vIGZsYXNoZXMgYSBzdWNjZXNzIGJhY2tncm91bmQgb24gdGhlIHJvd1xyXG5cdFx0XHRcdC8vIFx0X3Jvd0FsZXJ0LnN1Y2Nlc3MgPSBvcHRpb25zLmlkO1xyXG5cdFx0XHRcdC8vIH1cclxuXHRcdFx0XHQvLyBpZiAob3B0aW9ucy5mYWlsICYmIG9wdGlvbnMuaWQpIHtcclxuXHRcdFx0XHQvLyBcdC8vIGZsYXNoZXMgYSBmYWlsdXJlIGJhY2tncm91bmQgb24gdGhlIHJvd1xyXG5cdFx0XHRcdC8vIFx0X3Jvd0FsZXJ0LmZhaWwgPSBvcHRpb25zLmlkO1xyXG5cdFx0XHRcdC8vIH1cclxuXHJcblx0XHRcdFx0Ly8gU3VjY2Vzc2Z1bGx5IHJlc29sdmUgdGhpcyByZXF1ZXN0IGluIHJlZHV4IGFuZCBzZXQgdGhlIGxvYWRDb3VudGVyIGJhY2sgdG8gemVyby5cclxuXHRcdFx0XHRkaXNwYXRjaChpdGVtc0xvYWRlZChpdGVtcykpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIENhdGNoIHRoaXMgZXJyb3IgaW4gcmVkdXggYW5kIHNldCB0aGUgbG9hZENvdW50ZXIgYmFjayB0byB6ZXJvLlxyXG5cdFx0XHRcdGRpc3BhdGNoKGl0ZW1Mb2FkaW5nRXJyb3IoZXJyKSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZEl0ZW1zKGZvcm1hdCwgY29sdW1ucykge1xyXG5cdHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcblx0XHRjb25zdCBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcblx0XHRjb25zdCBhY3RpdmUgPSBzdGF0ZS5hY3RpdmU7XHJcblx0XHRjb25zdCBjdXJyZW50TGlzdCA9IHN0YXRlLmxpc3RzLmN1cnJlbnRMaXN0O1xyXG5cdFx0Y29uc3QgdXJsID0gY3VycmVudExpc3QuZ2V0RG93bmxvYWRVUkwoe1xyXG5cdFx0XHRzZWFyY2g6IGFjdGl2ZS5zZWFyY2gsXHJcblx0XHRcdGZpbHRlcnM6IGFjdGl2ZS5maWx0ZXJzLFxyXG5cdFx0XHRzb3J0OiBhY3RpdmUuc29ydCxcclxuXHRcdFx0Y29sdW1uczogY29sdW1ucyA/IGN1cnJlbnRMaXN0LmV4cGFuZENvbHVtbnMoY29sdW1ucykgOiBhY3RpdmUuY29sdW1ucyxcclxuXHRcdFx0Zm9ybWF0OiBmb3JtYXQsXHJcblx0XHR9KTtcclxuXHRcdHdpbmRvdy5vcGVuKHVybCk7XHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGl0ZW1zTG9hZGVkKGl0ZW1zKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdHR5cGU6IElURU1TX0xPQURFRCxcclxuXHRcdGl0ZW1zLFxyXG5cdH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEaXNwYXRjaGVkIHdoZW4gdW5zdWNjZXNzZnVsbHkgdHJ5aW5nIHRvIGxvYWQgdGhlIGl0ZW1zLCB3aWxsIHJlZGlzcGF0Y2hcclxuICogbG9hZEl0ZW1zIGFmdGVyIE5FVFdPUktfRVJST1JfUkVUUllfREVMQVkgbWlsbGlzZWNvbmRzIHVudGlsIHdlIGdldCBpdGVtcyBiYWNrXHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGl0ZW1Mb2FkaW5nRXJyb3IoKSB7XHJcblx0cmV0dXJuIChkaXNwYXRjaCkgPT4ge1xyXG5cdFx0ZGlzcGF0Y2goe1xyXG5cdFx0XHR0eXBlOiBJVEVNX0xPQURJTkdfRVJST1IsXHJcblx0XHRcdGVycjogJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnLFxyXG5cdFx0fSk7XHJcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0ZGlzcGF0Y2gobG9hZEl0ZW1zKCkpO1xyXG5cdFx0fSwgTkVUV09SS19FUlJPUl9SRVRSWV9ERUxBWSk7XHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUl0ZW1zKGlkcykge1xyXG5cdHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcblx0XHRjb25zdCBsaXN0ID0gZ2V0U3RhdGUoKS5saXN0cy5jdXJyZW50TGlzdDtcclxuXHRcdGxpc3QuZGVsZXRlSXRlbXMoaWRzLCAoZXJyLCBkYXRhKSA9PiB7XHJcblx0XHRcdC8vIFRPRE8gRVJST1IgSEFORExJTkdcclxuXHRcdFx0ZGlzcGF0Y2gobG9hZEl0ZW1zKCkpO1xyXG5cdFx0fSk7XHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbUFjdGlvbihpZHMsIGFjdGlvbiwgY3VzdG9tVXBkYXRlVmFsdWUpIHtcclxuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xyXG5cclxuXHRcdGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG5cdFx0Zm9ybURhdGEuYXBwZW5kKCdpZHMnLCBpZHMpO1xyXG5cdFx0Zm9ybURhdGEuYXBwZW5kKCdjdXN0b21VcGRhdGVWYWx1ZScsIGN1c3RvbVVwZGF0ZVZhbHVlKTtcclxuXHJcblx0XHR4aHIoe1xyXG5cdFx0XHR1cmw6IGAvYXBwLyR7YWN0aW9ufWAsXHJcblx0XHRcdHJlc3BvbnNlVHlwZTogJ2pzb24nLFxyXG5cdFx0XHRtZXRob2Q6ICdQVVQnLFxyXG5cdFx0XHRoZWFkZXJzOiBhc3NpZ24oe30sIEtleXN0b25lLmNzcmYuaGVhZGVyKSxcclxuXHRcdFx0Ym9keTogZm9ybURhdGEsXHJcblx0XHR9LCAoZXJyLCByZXNwLCBkYXRhKSA9PiB7XHJcblx0XHRcdGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xyXG5cclxuXHRcdFx0aWYgKHJlc3Auc3RhdHVzQ29kZSA9PT0gMjAwKSB7XHJcblx0XHRcdFx0ZGlzcGF0Y2gobG9hZEl0ZW1zKCkpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNhbGxiYWNrKGRhdGEpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tQWN0aW9uRG93bmxvYWQoaWQsIGFjdGlvbikge1xyXG5cdHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XHJcblx0XHRjb25zdCB1cmwgPSAnL2FwcC8nICsgYWN0aW9uICsgJz9pZD0nICsgaWQ7XHJcblx0XHR3aW5kb3cub3Blbih1cmwpO1xyXG5cdH07XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBGaWx0ZXJzIH0gZnJvbSAnRmllbGRUeXBlcyc7XHJcbmltcG9ydCB7IENoaXAgfSBmcm9tICcuLi8uLi8uLi8uLi9lbGVtZW50YWwnO1xyXG5cclxuaW1wb3J0IFBvcG91dCBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvUG9wb3V0JztcclxuaW1wb3J0IHsgc2V0RmlsdGVyLCBjbGVhckZpbHRlciB9IGZyb20gJy4uLy4uL2FjdGlvbnMnO1xyXG5pbXBvcnQgZ2V0RmlsdGVyTGFiZWwgZnJvbSAnLi9nZXRGaWx0ZXJMYWJlbCc7XHJcblxyXG5jbGFzcyBGaWx0ZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cdGNvbnN0cnVjdG9yICgpIHtcclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5vcGVuID0gdGhpcy5vcGVuLmJpbmQodGhpcyk7XHJcblx0XHR0aGlzLmNsb3NlID0gdGhpcy5jbG9zZS5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy51cGRhdGVWYWx1ZSA9IHRoaXMudXBkYXRlVmFsdWUuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMudXBkYXRlRmlsdGVyID0gdGhpcy51cGRhdGVGaWx0ZXIuYmluZCh0aGlzKTtcclxuXHRcdHRoaXMucmVtb3ZlRmlsdGVyID0gdGhpcy5yZW1vdmVGaWx0ZXIuYmluZCh0aGlzKTtcclxuXHJcblx0XHR0aGlzLnN0YXRlID0ge1xyXG5cdFx0XHRpc09wZW46IGZhbHNlLFxyXG5cdFx0fTtcclxuXHR9XHJcblx0b3BlbiAoKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0aXNPcGVuOiB0cnVlLFxyXG5cdFx0XHRmaWx0ZXJWYWx1ZTogdGhpcy5wcm9wcy5maWx0ZXIudmFsdWUsXHJcblx0XHR9KTtcclxuXHR9XHJcblx0Y2xvc2UgKCkge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdGlzT3BlbjogZmFsc2UsXHJcblx0XHR9KTtcclxuXHR9XHJcblx0dXBkYXRlVmFsdWUgKGZpbHRlclZhbHVlKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0ZmlsdGVyVmFsdWU6IGZpbHRlclZhbHVlLFxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHVwZGF0ZUZpbHRlciAoZSkge1xyXG5cdFx0Y29uc3QgeyBkaXNwYXRjaCwgZmlsdGVyIH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0ZGlzcGF0Y2goc2V0RmlsdGVyKGZpbHRlci5maWVsZC5wYXRoLCB0aGlzLnN0YXRlLmZpbHRlclZhbHVlKSk7XHJcblx0XHR0aGlzLmNsb3NlKCk7XHJcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0fVxyXG5cdHJlbW92ZUZpbHRlciAoKSB7XHJcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGNsZWFyRmlsdGVyKHRoaXMucHJvcHMuZmlsdGVyLmZpZWxkLnBhdGgpKTtcclxuXHR9XHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IHsgZmlsdGVyIH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0Y29uc3QgZmlsdGVySWQgPSBgYWN0aXZlRmlsdGVyX18ke2ZpbHRlci5maWVsZC5wYXRofWA7XHJcblx0XHRjb25zdCBGaWx0ZXJDb21wb25lbnQgPSBGaWx0ZXJzW2ZpbHRlci5maWVsZC50eXBlXTtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8c3Bhbj5cclxuXHRcdFx0XHQ8Q2hpcFxyXG5cdFx0XHRcdFx0bGFiZWw9e2dldEZpbHRlckxhYmVsKGZpbHRlci5maWVsZCwgZmlsdGVyLnZhbHVlKX1cclxuXHRcdFx0XHRcdG9uQ2xpY2s9e3RoaXMub3Blbn1cclxuXHRcdFx0XHRcdG9uQ2xlYXI9e3RoaXMucmVtb3ZlRmlsdGVyfVxyXG5cdFx0XHRcdFx0Y29sb3I9XCJwcmltYXJ5XCJcclxuXHRcdFx0XHRcdGlkPXtmaWx0ZXJJZH1cclxuXHRcdFx0XHQvPlxyXG5cdFx0XHRcdDxQb3BvdXQgaXNPcGVuPXt0aGlzLnN0YXRlLmlzT3Blbn0gb25DYW5jZWw9e3RoaXMuY2xvc2V9IHJlbGF0aXZlVG9JRD17ZmlsdGVySWR9PlxyXG5cdFx0XHRcdFx0PGZvcm0gb25TdWJtaXQ9e3RoaXMudXBkYXRlRmlsdGVyfT5cclxuXHRcdFx0XHRcdFx0PFBvcG91dC5IZWFkZXIgdGl0bGU9XCJFZGl0IEZpbHRlclwiIC8+XHJcblx0XHRcdFx0XHRcdDxQb3BvdXQuQm9keT5cclxuXHRcdFx0XHRcdFx0XHQ8RmlsdGVyQ29tcG9uZW50XHJcblx0XHRcdFx0XHRcdFx0XHRmaWVsZD17ZmlsdGVyLmZpZWxkfVxyXG5cdFx0XHRcdFx0XHRcdFx0ZmlsdGVyPXt0aGlzLnN0YXRlLmZpbHRlclZhbHVlfVxyXG5cdFx0XHRcdFx0XHRcdFx0b25DaGFuZ2U9e3RoaXMudXBkYXRlVmFsdWV9XHJcblx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0PC9Qb3BvdXQuQm9keT5cclxuXHRcdFx0XHRcdFx0PFBvcG91dC5Gb290ZXJcclxuXHRcdFx0XHRcdFx0XHRyZWY9XCJmb290ZXJcIlxyXG5cdFx0XHRcdFx0XHRcdHByaW1hcnlCdXR0b25Jc1N1Ym1pdFxyXG5cdFx0XHRcdFx0XHRcdHByaW1hcnlCdXR0b25MYWJlbD1cIkFwcGx5XCJcclxuXHRcdFx0XHRcdFx0XHRzZWNvbmRhcnlCdXR0b25BY3Rpb249e3RoaXMuY2xvc2V9XHJcblx0XHRcdFx0XHRcdFx0c2Vjb25kYXJ5QnV0dG9uTGFiZWw9XCJDYW5jZWxcIiAvPlxyXG5cdFx0XHRcdFx0PC9mb3JtPlxyXG5cdFx0XHRcdDwvUG9wb3V0PlxyXG5cdFx0XHQ8L3NwYW4+XHJcblx0XHQpO1xyXG5cdH1cclxufTtcclxuXHJcbkZpbHRlci5wcm9wVHlwZXMgPSB7XHJcblx0ZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcblx0ZmlsdGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xyXG5cdFx0ZmllbGQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuXHRcdHZhbHVlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcblx0fSkuaXNSZXF1aXJlZCxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRmlsdGVyO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBDaGlwIH0gZnJvbSAnLi4vLi4vLi4vLi4vZWxlbWVudGFsJztcclxuaW1wb3J0IEZpbHRlciBmcm9tICcuL0ZpbHRlcic7XHJcblxyXG5pbXBvcnQgeyBjbGVhckFsbEZpbHRlcnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zJztcclxuXHJcbmNvbnN0IExpc3RGaWx0ZXJzID0gKHsgZGlzcGF0Y2gsIGZpbHRlcnMgfSkgPT4ge1xyXG5cclxuXHRpZiAoIWZpbHRlcnMubGVuZ3RoKSByZXR1cm4gPGRpdiAvPjtcclxuXHJcblx0Y29uc3QgZGlzcGF0Y2hDbGVhckFsbEZpbHRlcnMgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRkaXNwYXRjaChjbGVhckFsbEZpbHRlcnMoKSk7XHJcblx0fTtcclxuXHJcblx0Ly8gR2VuZXJhdGUgdGhlIGxpc3Qgb2YgZmlsdGVyIHBpbGxzXHJcblx0Y29uc3QgY3VycmVudEZpbHRlcnMgPSBmaWx0ZXJzLm1hcCgoZmlsdGVyLCBpKSA9PiAoXHJcblx0XHQ8RmlsdGVyXHJcblx0XHRcdGtleT17J2YnICsgaX1cclxuXHRcdFx0ZmlsdGVyPXtmaWx0ZXJ9XHJcblx0XHRcdGRpc3BhdGNoPXtkaXNwYXRjaH1cclxuXHRcdC8+XHJcblx0KSk7XHJcblxyXG5cdC8vIFdoZW4gbW9yZSB0aGFuIDEsIGFwcGVuZCB0aGUgY2xlYXIgYnV0dG9uXHJcblx0aWYgKGN1cnJlbnRGaWx0ZXJzLmxlbmd0aCA+IDEpIHtcclxuXHRcdGN1cnJlbnRGaWx0ZXJzLnB1c2goXHJcblx0XHRcdDxDaGlwXHJcblx0XHRcdFx0a2V5PVwibGlzdEZpbHRlcnNfX2NsZWFyXCJcclxuXHRcdFx0XHRsYWJlbD1cIkNsZWFyIEFsbFwiXHJcblx0XHRcdFx0b25DbGljaz17ZGlzcGF0Y2hDbGVhckFsbEZpbHRlcnN9XHJcblx0XHRcdC8+XHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0Y29uc3Qgc3R5bGVzID0ge1xyXG5cdFx0bWFyZ2luQm90dG9tOiAnMWVtJyxcclxuXHRcdG1hcmdpblRvcDogJzFlbScsXHJcblx0fTtcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXYgc3R5bGU9e3N0eWxlc30+XHJcblx0XHRcdHtjdXJyZW50RmlsdGVyc31cclxuXHRcdDwvZGl2PlxyXG5cdCk7XHJcbn07XHJcblxyXG5MaXN0RmlsdGVycy5wcm9wVHlwZXMgPSB7XHJcblx0ZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcblx0ZmlsdGVyczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RGaWx0ZXJzO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCBUcmFuc2l0aW9uXHJcblx0ZnJvbSAncmVhY3QtYWRkb25zLWNzcy10cmFuc2l0aW9uLWdyb3VwJztcclxuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcbmltcG9ydCBMaXN0RmlsdGVyc0FkZEZvcm0gZnJvbSAnLi9MaXN0RmlsdGVyc0FkZEZvcm0nO1xyXG5pbXBvcnQgUG9wb3V0IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9Qb3BvdXQnO1xyXG5pbXBvcnQgUG9wb3V0TGlzdCBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvUG9wb3V0L1BvcG91dExpc3QnO1xyXG5pbXBvcnQgeyBGb3JtSW5wdXQgfSBmcm9tICcuLi8uLi8uLi8uLi9lbGVtZW50YWwnO1xyXG5pbXBvcnQgTGlzdEhlYWRlckJ1dHRvbiBmcm9tICcuLi9MaXN0SGVhZGVyQnV0dG9uJztcclxuXHJcbmltcG9ydCB7IHNldEZpbHRlciB9IGZyb20gJy4uLy4uL2FjdGlvbnMnO1xyXG5cclxudmFyIExpc3RGaWx0ZXJzQWRkID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnTGlzdEZpbHRlcnNBZGQnLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0bWF4SGVpZ2h0OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxyXG5cdH0sXHJcblx0Z2V0RGVmYXVsdFByb3BzICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdG1heEhlaWdodDogMzYwLFxyXG5cdFx0fTtcclxuXHR9LFxyXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRpbm5lckhlaWdodDogMCxcclxuXHRcdFx0aXNPcGVuOiBmYWxzZSxcclxuXHRcdFx0c2VhcmNoU3RyaW5nOiAnJyxcclxuXHRcdFx0c2VsZWN0ZWRGaWVsZDogZmFsc2UsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0dXBkYXRlU2VhcmNoIChlKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHsgc2VhcmNoU3RyaW5nOiBlLnRhcmdldC52YWx1ZSB9KTtcclxuXHR9LFxyXG5cdG9wZW5Qb3BvdXQgKCkge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7IGlzT3BlbjogdHJ1ZSB9LCB0aGlzLmZvY3VzU2VhcmNoKTtcclxuXHR9LFxyXG5cdGNsb3NlUG9wb3V0ICgpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRpbm5lckhlaWdodDogMCxcclxuXHRcdFx0aXNPcGVuOiBmYWxzZSxcclxuXHRcdFx0c2VhcmNoU3RyaW5nOiAnJyxcclxuXHRcdFx0c2VsZWN0ZWRGaWVsZDogZmFsc2UsXHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdHNldFBvcG91dEhlaWdodCAoaGVpZ2h0KSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHsgaW5uZXJIZWlnaHQ6IE1hdGgubWluKHRoaXMucHJvcHMubWF4SGVpZ2h0LCBoZWlnaHQpIH0pO1xyXG5cdH0sXHJcblx0bmF2aWdhdGVCYWNrICgpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRzZWxlY3RlZEZpZWxkOiBmYWxzZSxcclxuXHRcdFx0c2VhcmNoU3RyaW5nOiAnJyxcclxuXHRcdFx0aW5uZXJIZWlnaHQ6IDAsXHJcblx0XHR9LCB0aGlzLmZvY3VzU2VhcmNoKTtcclxuXHR9LFxyXG5cdGZvY3VzU2VhcmNoICgpIHtcclxuXHRcdGZpbmRET01Ob2RlKHRoaXMucmVmcy5zZWFyY2gpLmZvY3VzKCk7XHJcblx0fSxcclxuXHRzZWxlY3RGaWVsZCAoZmllbGQpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRzZWxlY3RlZEZpZWxkOiBmaWVsZCxcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0YXBwbHlGaWx0ZXIgKHZhbHVlKSB7XHJcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKHNldEZpbHRlcih0aGlzLnN0YXRlLnNlbGVjdGVkRmllbGQucGF0aCwgdmFsdWUpKTtcclxuXHRcdHRoaXMuY2xvc2VQb3BvdXQoKTtcclxuXHR9LFxyXG5cdHJlbmRlckxpc3QgKCkge1xyXG5cdFx0Y29uc3QgYWN0aXZlRmlsdGVyRmllbGRzID0gdGhpcy5wcm9wcy5hY3RpdmVGaWx0ZXJzLm1hcChvYmogPT4gb2JqLmZpZWxkKTtcclxuXHRcdGNvbnN0IGFjdGl2ZUZpbHRlclBhdGhzID0gYWN0aXZlRmlsdGVyRmllbGRzLm1hcChvYmogPT4gb2JqLnBhdGgpO1xyXG5cdFx0Y29uc3QgeyBzZWFyY2hTdHJpbmcgfSA9IHRoaXMuc3RhdGU7XHJcblx0XHRsZXQgZmlsdGVyZWRGaWx0ZXJzID0gdGhpcy5wcm9wcy5hdmFpbGFibGVGaWx0ZXJzO1xyXG5cclxuXHRcdGlmIChzZWFyY2hTdHJpbmcpIHtcclxuXHRcdFx0ZmlsdGVyZWRGaWx0ZXJzID0gZmlsdGVyZWRGaWx0ZXJzXHJcblx0XHRcdFx0LmZpbHRlcihmaWx0ZXIgPT4gZmlsdGVyLnR5cGUgIT09ICdoZWFkaW5nJylcclxuXHRcdFx0XHQuZmlsdGVyKGZpbHRlciA9PiBuZXcgUmVnRXhwKHNlYXJjaFN0cmluZylcclxuXHRcdFx0XHQudGVzdChmaWx0ZXIuZmllbGQubGFiZWwudG9Mb3dlckNhc2UoKSkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IHBvcG91dExpc3QgPSBmaWx0ZXJlZEZpbHRlcnMubWFwKChlbCwgaSkgPT4ge1xyXG5cdFx0XHRpZiAoZWwudHlwZSA9PT0gJ2hlYWRpbmcnKSB7XHJcblx0XHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHRcdDxQb3BvdXRMaXN0LkhlYWRpbmcga2V5PXsnaGVhZGluZ18nICsgaX0+XHJcblx0XHRcdFx0XHRcdHtlbC5jb250ZW50fVxyXG5cdFx0XHRcdFx0PC9Qb3BvdXRMaXN0LkhlYWRpbmc+XHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgZmlsdGVySXNBY3RpdmUgPSBhY3RpdmVGaWx0ZXJQYXRocy5sZW5ndGggJiYgKGFjdGl2ZUZpbHRlclBhdGhzLmluZGV4T2YoZWwuZmllbGQucGF0aCkgPiAtMSk7XHJcblxyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdDxQb3BvdXRMaXN0Lkl0ZW1cclxuXHRcdFx0XHRcdGtleT17J2l0ZW1fJyArIGVsLmZpZWxkLnBhdGh9XHJcblx0XHRcdFx0XHRpY29uPXtmaWx0ZXJJc0FjdGl2ZSA/ICdjaGVjaycgOiAnY2hldnJvbi1yaWdodCd9XHJcblx0XHRcdFx0XHRpY29uSG92ZXI9e2ZpbHRlcklzQWN0aXZlID8gJ2NoZWNrJyA6ICdjaGV2cm9uLXJpZ2h0J31cclxuXHRcdFx0XHRcdGlzU2VsZWN0ZWQ9eyEhZmlsdGVySXNBY3RpdmV9XHJcblx0XHRcdFx0XHRsYWJlbD17ZWwuZmllbGQubGFiZWx9XHJcblx0XHRcdFx0XHRvbkNsaWNrPXsoKSA9PiB7IHRoaXMuc2VsZWN0RmllbGQoZWwuZmllbGQpOyB9fSAvPlxyXG5cdFx0XHQpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Y29uc3QgZm9ybUZpZWxkU3R5bGVzID0ge1xyXG5cdFx0XHRib3JkZXJCb3R0b206ICcxcHggZGFzaGVkIHJnYmEoMCwgMCwgMCwgMC4xKScsXHJcblx0XHRcdG1hcmdpbkJvdHRvbTogJzFlbScsXHJcblx0XHRcdHBhZGRpbmdCb3R0b206ICcxZW0nLFxyXG5cdFx0fTtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8UG9wb3V0LlBhbmUgb25MYXlvdXQ9e3RoaXMuc2V0UG9wb3V0SGVpZ2h0fSBrZXk9XCJsaXN0XCI+XHJcblx0XHRcdFx0PFBvcG91dC5Cb2R5PlxyXG5cdFx0XHRcdFx0PGRpdiBzdHlsZT17Zm9ybUZpZWxkU3R5bGVzfT5cclxuXHRcdFx0XHRcdFx0PEZvcm1JbnB1dFxyXG5cdFx0XHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZVNlYXJjaH1cclxuXHRcdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cIkZpbmQgYSBmaWx0ZXIuLi5cIlxyXG5cdFx0XHRcdFx0XHRcdHJlZj1cInNlYXJjaFwiXHJcblx0XHRcdFx0XHRcdFx0dmFsdWU9e3RoaXMuc3RhdGUuc2VhcmNoU3RyaW5nfVxyXG5cdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHR7cG9wb3V0TGlzdH1cclxuXHRcdFx0XHQ8L1BvcG91dC5Cb2R5PlxyXG5cdFx0XHQ8L1BvcG91dC5QYW5lPlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdHJlbmRlckZvcm0gKCkge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PFBvcG91dC5QYW5lIG9uTGF5b3V0PXt0aGlzLnNldFBvcG91dEhlaWdodH0ga2V5PVwiZm9ybVwiPlxyXG5cdFx0XHRcdDxMaXN0RmlsdGVyc0FkZEZvcm1cclxuXHRcdFx0XHRcdGFjdGl2ZUZpbHRlcnM9e3RoaXMucHJvcHMuYWN0aXZlRmlsdGVyc31cclxuXHRcdFx0XHRcdGZpZWxkPXt0aGlzLnN0YXRlLnNlbGVjdGVkRmllbGR9XHJcblx0XHRcdFx0XHRvbkFwcGx5PXt0aGlzLmFwcGx5RmlsdGVyfVxyXG5cdFx0XHRcdFx0b25DYW5jZWw9e3RoaXMuY2xvc2VQb3BvdXR9XHJcblx0XHRcdFx0XHRvbkJhY2s9e3RoaXMubmF2aWdhdGVCYWNrfVxyXG5cdFx0XHRcdFx0bWF4SGVpZ2h0PXt0aGlzLnByb3BzLm1heEhlaWdodH1cclxuXHRcdFx0XHRcdG9uSGVpZ2h0Q2hhbmdlPXt0aGlzLnNldFBvcG91dEhlaWdodH1cclxuXHRcdFx0XHRcdGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdDwvUG9wb3V0LlBhbmU+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IHsgaXNPcGVuLCBzZWxlY3RlZEZpZWxkIH0gPSB0aGlzLnN0YXRlO1xyXG5cdFx0Y29uc3QgcG9wb3V0Qm9keVN0eWxlID0gdGhpcy5zdGF0ZS5pbm5lckhlaWdodFxyXG5cdFx0XHQ/IHsgaGVpZ2h0OiB0aGlzLnN0YXRlLmlubmVySGVpZ2h0IH1cclxuXHRcdFx0OiBudWxsO1xyXG5cdFx0Y29uc3QgcG9wb3V0UGFuZXNDbGFzc25hbWUgPSBjbGFzc25hbWVzKCdQb3BvdXRfX3BhbmVzJywge1xyXG5cdFx0XHQnUG9wb3V0X19zY3JvbGxhYmxlLWFyZWEnOiAhc2VsZWN0ZWRGaWVsZCxcclxuXHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXY+XHJcblx0XHRcdFx0PExpc3RIZWFkZXJCdXR0b25cclxuXHRcdFx0XHRcdGFjdGl2ZT17aXNPcGVufVxyXG5cdFx0XHRcdFx0Z2x5cGg9XCJleWVcIlxyXG5cdFx0XHRcdFx0aWQ9XCJsaXN0SGVhZGVyRmlsdGVyQnV0dG9uXCJcclxuXHRcdFx0XHRcdGxhYmVsPVwiRmlsdGVyXCJcclxuXHRcdFx0XHRcdG9uQ2xpY2s9e2lzT3BlbiA/IHRoaXMuY2xvc2VQb3BvdXQgOiB0aGlzLm9wZW5Qb3BvdXR9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0XHQ8UG9wb3V0IGlzT3Blbj17aXNPcGVufSBvbkNhbmNlbD17dGhpcy5jbG9zZVBvcG91dH0gcmVsYXRpdmVUb0lEPVwibGlzdEhlYWRlckZpbHRlckJ1dHRvblwiPlxyXG5cdFx0XHRcdFx0PFBvcG91dC5IZWFkZXJcclxuXHRcdFx0XHRcdFx0bGVmdEFjdGlvbj17c2VsZWN0ZWRGaWVsZCA/IHRoaXMubmF2aWdhdGVCYWNrIDogbnVsbH1cclxuXHRcdFx0XHRcdFx0bGVmdEljb249e3NlbGVjdGVkRmllbGQgPyAnY2hldnJvbi1sZWZ0JyA6IG51bGx9XHJcblx0XHRcdFx0XHRcdHRpdGxlPXtzZWxlY3RlZEZpZWxkID8gc2VsZWN0ZWRGaWVsZC5sYWJlbCA6ICdGaWx0ZXInfVxyXG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uRGlyZWN0aW9uPXtzZWxlY3RlZEZpZWxkID8gJ25leHQnIDogJ3ByZXYnfSAvPlxyXG5cdFx0XHRcdFx0PFRyYW5zaXRpb25cclxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtwb3BvdXRQYW5lc0NsYXNzbmFtZX1cclxuXHRcdFx0XHRcdFx0Y29tcG9uZW50PVwiZGl2XCJcclxuXHRcdFx0XHRcdFx0c3R5bGU9e3BvcG91dEJvZHlTdHlsZX1cclxuXHRcdFx0XHRcdFx0dHJhbnNpdGlvbk5hbWU9e3NlbGVjdGVkRmllbGQgPyAnUG9wb3V0X19wYW5lLW5leHQnIDogJ1BvcG91dF9fcGFuZS1wcmV2J31cclxuXHRcdFx0XHRcdFx0dHJhbnNpdGlvbkVudGVyVGltZW91dD17MzYwfVxyXG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uTGVhdmVUaW1lb3V0PXszNjB9XHJcblx0XHRcdFx0XHRcdD5cclxuXHRcdFx0XHRcdFx0e3NlbGVjdGVkRmllbGQgPyB0aGlzLnJlbmRlckZvcm0oKSA6IHRoaXMucmVuZGVyTGlzdCgpfVxyXG5cdFx0XHRcdFx0PC9UcmFuc2l0aW9uPlxyXG5cdFx0XHRcdDwvUG9wb3V0PlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RGaWx0ZXJzQWRkO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCBQb3BvdXQgZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL1BvcG91dCc7XHJcblxyXG5pbXBvcnQgeyBGaWx0ZXJzIH0gZnJvbSAnRmllbGRUeXBlcyc7XHJcblxyXG52YXIgTGlzdEZpbHRlcnNBZGRGb3JtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0ZmllbGQ6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuXHRcdG1heEhlaWdodDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcclxuXHRcdG9uQXBwbHk6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdFx0b25DYW5jZWw6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdFx0b25IZWlnaHRDaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdH0sXHJcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcclxuXHRcdGNvbnN0IGZpbHRlckNvbXBvbmVudCA9IEZpbHRlcnNbdGhpcy5wcm9wcy5maWVsZC50eXBlXTtcclxuXHRcdGxldCBmaWx0ZXJWYWx1ZSA9IHRoaXMucHJvcHMuYWN0aXZlRmlsdGVycy5maWx0ZXIoaSA9PiBpLmZpZWxkLnBhdGggPT09IHRoaXMucHJvcHMuZmllbGQucGF0aClbMF07XHJcblx0XHRpZiAoZmlsdGVyVmFsdWUpIHtcclxuXHRcdFx0ZmlsdGVyVmFsdWUgPSBmaWx0ZXJWYWx1ZS52YWx1ZTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZpbHRlclZhbHVlID0gZmlsdGVyQ29tcG9uZW50ICYmIGZpbHRlckNvbXBvbmVudC5nZXREZWZhdWx0VmFsdWUgPyBmaWx0ZXJDb21wb25lbnQuZ2V0RGVmYXVsdFZhbHVlKCkgOiB7fTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGZpbHRlckNvbXBvbmVudDogZmlsdGVyQ29tcG9uZW50LFxyXG5cdFx0XHRmaWx0ZXJWYWx1ZTogZmlsdGVyVmFsdWUsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0dXBkYXRlSGVpZ2h0IChib2R5SGVpZ2h0KSB7XHJcblx0XHRib2R5SGVpZ2h0ICs9IDQwOyAvLyBUT0RPOiByZW1vdmUgbWFnaWMgbnVtYmVyLCBjdXJyZW50bHkgYWNjb3VudHMgZm9yIHBhZGRpbmdcclxuXHRcdGNvbnN0IGZvb3RlckhlaWdodCA9IGZpbmRET01Ob2RlKHRoaXMucmVmcy5mb290ZXIpLm9mZnNldEhlaWdodDtcclxuXHRcdGNvbnN0IG1heEJvZHlIZWlnaHQgPSB0aGlzLnByb3BzLm1heEhlaWdodCAtIGZvb3RlckhlaWdodDtcclxuXHRcdGNvbnN0IG5ld0hlaWdodCA9IGJvZHlIZWlnaHQgKyBmb290ZXJIZWlnaHQ7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhib2R5SGVpZ2h0LCBtYXhCb2R5SGVpZ2h0LCAnfCcsIG5ld0hlaWdodCwgdGhpcy5wcm9wcy5tYXhIZWlnaHQpO1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdGJvZHlIZWlnaHQ6IE1hdGgubWluKGJvZHlIZWlnaHQsIG1heEJvZHlIZWlnaHQpLFxyXG5cdFx0fSwgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLnByb3BzLm9uSGVpZ2h0Q2hhbmdlKE1hdGgubWluKG5ld0hlaWdodCwgdGhpcy5wcm9wcy5tYXhIZWlnaHQpKTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0dXBkYXRlVmFsdWUgKGZpbHRlclZhbHVlKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0ZmlsdGVyVmFsdWU6IGZpbHRlclZhbHVlLFxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRoYW5kbGVGb3JtU3VibWl0IChlKSB7XHJcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHR0aGlzLnByb3BzLm9uQXBwbHkodGhpcy5zdGF0ZS5maWx0ZXJWYWx1ZSk7XHJcblx0fSxcclxuXHRyZW5kZXJJbnZhbGlkRmlsdGVyICgpIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXY+RXJyb3I6IHR5cGUge3RoaXMucHJvcHMuZmllbGQudHlwZX0gaGFzIG5vIGZpbHRlciBVSS48L2Rpdj5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0dmFyIEZpbHRlckNvbXBvbmVudCA9IHRoaXMuc3RhdGUuZmlsdGVyQ29tcG9uZW50O1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlRm9ybVN1Ym1pdH0+XHJcblx0XHRcdFx0PFBvcG91dC5Cb2R5IHJlZj1cImJvZHlcIiBzY3JvbGxhYmxlIHN0eWxlPXt7IGhlaWdodDogdGhpcy5zdGF0ZS5ib2R5SGVpZ2h0IH19PlxyXG5cdFx0XHRcdFx0e0ZpbHRlckNvbXBvbmVudCA/IDxGaWx0ZXJDb21wb25lbnQgZmllbGQ9e3RoaXMucHJvcHMuZmllbGR9IGZpbHRlcj17dGhpcy5zdGF0ZS5maWx0ZXJWYWx1ZX0gb25DaGFuZ2U9e3RoaXMudXBkYXRlVmFsdWV9IG9uSGVpZ2h0Q2hhbmdlPXt0aGlzLnVwZGF0ZUhlaWdodH0gLz4gOiB0aGlzLnJlbmRlckludmFsaWRGaWx0ZXIoKX1cclxuXHRcdFx0XHQ8L1BvcG91dC5Cb2R5PlxyXG5cdFx0XHRcdDxQb3BvdXQuRm9vdGVyXHJcblx0XHRcdFx0XHRyZWY9XCJmb290ZXJcIlxyXG5cdFx0XHRcdFx0cHJpbWFyeUJ1dHRvbklzU3VibWl0XHJcblx0XHRcdFx0XHRwcmltYXJ5QnV0dG9uTGFiZWw9XCJBcHBseVwiXHJcblx0XHRcdFx0XHRzZWNvbmRhcnlCdXR0b25BY3Rpb249e3RoaXMucHJvcHMub25DYW5jZWx9XHJcblx0XHRcdFx0XHRzZWNvbmRhcnlCdXR0b25MYWJlbD1cIkNhbmNlbFwiIC8+XHJcblx0XHRcdDwvZm9ybT5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RGaWx0ZXJzQWRkRm9ybTtcclxuIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5cclxuY29uc3QgREFURV9GT1JNQVQgPSAnWVlZWS1NTS1ERCc7XHJcbmNvbnN0IERBVEVUSU1FX0ZPUk1BVCA9ICdZWVlZLU1NLUREIGg6bW06c3MgYSc7XHJcblxyXG5mdW5jdGlvbiBnZXRGaWx0ZXJMYWJlbCAoZmllbGQsIHZhbHVlKSB7XHJcblx0Y29uc3QgbGFiZWwgPSBmaWVsZC5sYWJlbDtcclxuXHJcblx0c3dpdGNoIChmaWVsZC50eXBlKSB7XHJcblx0XHQvLyBCT09MRUFOXHJcblx0XHRjYXNlICdib29sZWFuJzoge1xyXG5cdFx0XHRyZXR1cm4gdmFsdWUudmFsdWVcclxuXHRcdFx0XHQ/IGxhYmVsXHJcblx0XHRcdFx0OiBgTk9UICR7bGFiZWx9YDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBEQVRFXHJcblx0XHRjYXNlICdkYXRlJzoge1xyXG5cdFx0XHRyZXR1cm4gYCR7bGFiZWx9ICR7cmVzb2x2ZURhdGVGb3JtYXQodmFsdWUsIERBVEVfRk9STUFUKX1gO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIERBVEUgQVJSQVlcclxuXHRcdGNhc2UgJ2RhdGVhcnJheSc6IHtcclxuXHRcdFx0Y29uc3QgcHJlc2VuY2UgPSB2YWx1ZS5wcmVzZW5jZSA9PT0gJ3NvbWUnID8gJ1NvbWUnIDogJ05vJztcclxuXHJcblx0XHRcdHJldHVybiBgJHtwcmVzZW5jZX0gJHtsYWJlbH0gJHtyZXNvbHZlRGF0ZUZvcm1hdCh2YWx1ZSwgREFURVRJTUVfRk9STUFULCAnYXJlJyl9YDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBEQVRFVElNRVxyXG5cdFx0Y2FzZSAnZGF0ZXRpbWUnOiB7XHJcblx0XHRcdHJldHVybiBgJHtsYWJlbH0gJHtyZXNvbHZlRGF0ZUZvcm1hdCh2YWx1ZSwgREFURVRJTUVfRk9STUFUKX1gO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEdFT1BPSU5UXHJcblx0XHQvLyBUT0RPIGRpc3RhbmNlIG5lZWRzIGEgcXVhbGlmaWVyLCBjdXJyZW50bHkgZGVmYXVsdHMgdG8gXCJrbVwiP1xyXG5cdFx0Y2FzZSAnZ2VvcG9pbnQnOiB7XHJcblx0XHRcdGNvbnN0IG1vZGUgPSB2YWx1ZS5kaXN0YW5jZS5tb2RlID09PSAnbWF4JyA/ICdpcyB3aXRoaW4nIDogJ2lzIGF0IGxlYXN0JztcclxuXHRcdFx0Y29uc3QgZGlzdGFuY2UgPSBgJHt2YWx1ZS5kaXN0YW5jZS52YWx1ZX1rbWA7XHJcblx0XHRcdGNvbnN0IGNvbmp1bmN0aW9uID0gdmFsdWUuZGlzdGFuY2UubW9kZSA9PT0gJ21heCcgPyAnb2YnIDogJ2Zyb20nO1xyXG5cdFx0XHRjb25zdCBsYXRsb25nID0gYCR7dmFsdWUubGF0fSwgJHt2YWx1ZS5sb259YDtcclxuXHJcblx0XHRcdHJldHVybiBgJHtsYWJlbH0gJHttb2RlfSAke2Rpc3RhbmNlfSAke2Nvbmp1bmN0aW9ufSAke2xhdGxvbmd9YDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBMT0NBVElPTlxyXG5cdFx0Y2FzZSAnbG9jYXRpb24nOiB7XHJcblx0XHRcdGNvbnN0IGpvaW5lciA9IHZhbHVlLmludmVydGVkID8gJ2RvZXMgTk9UIG1hdGNoJyA6ICdtYXRjaGVzJztcclxuXHJcblx0XHRcdC8vIFJlbW92ZSB1bmRlZmluZWQgdmFsdWVzIGJlZm9yZSByZW5kZXJpbmcgdGhlIHRlbXBsYXRlIGxpdGVyYWxcclxuXHRcdFx0Y29uc3QgZm9ybWF0dGVkVmFsdWUgPSBbXHJcblx0XHRcdFx0dmFsdWUuc3RyZWV0LFxyXG5cdFx0XHRcdHZhbHVlLmNpdHksXHJcblx0XHRcdFx0dmFsdWUuc3RhdGUsXHJcblx0XHRcdFx0dmFsdWUuY29kZSxcclxuXHRcdFx0XHR2YWx1ZS5jb3VudHJ5LFxyXG5cdFx0XHRdLmpvaW4oJyAnKS50cmltKCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gYCR7bGFiZWx9ICR7am9pbmVyfSBcIiR7Zm9ybWF0dGVkVmFsdWV9XCJgO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE5VTUJFUiAmIE1PTkVZXHJcblx0XHRjYXNlICdudW1iZXInOlxyXG5cdFx0Y2FzZSAnbW9uZXknOiB7XHJcblx0XHRcdHJldHVybiBgJHtsYWJlbH0gJHtyZXNvbHZlTnVtYmVyRm9ybWF0KHZhbHVlKX1gO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE5VTUJFUiBBUlJBWVxyXG5cdFx0Y2FzZSAnbnVtYmVyYXJyYXknOiB7XHJcblx0XHRcdGNvbnN0IHByZXNlbmNlID0gdmFsdWUucHJlc2VuY2UgPT09ICdzb21lJyA/ICdTb21lJyA6ICdObyc7XHJcblxyXG5cdFx0XHRyZXR1cm4gYCR7cHJlc2VuY2V9ICR7bGFiZWx9ICR7cmVzb2x2ZU51bWJlckZvcm1hdCh2YWx1ZSwgJ2FyZScpfWA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUEFTU1dPUkRcclxuXHRcdGNhc2UgJ3Bhc3N3b3JkJzoge1xyXG5cdFx0XHRyZXR1cm4gdmFsdWUuZXhpc3RzXHJcblx0XHRcdFx0PyBgJHtsYWJlbH0gaXMgc2V0YFxyXG5cdFx0XHRcdDogYCR7bGFiZWx9IGlzIE5PVCBzZXRgO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJFTEFUSU9OU0hJUFxyXG5cdFx0Ly8gVE9ETyBwb3B1bGF0ZSByZWxhdGlvbnNoaXAsIGN1cnJlbnRseSByZW5kZXJpbmcgYW4gSURcclxuXHRcdGNhc2UgJ3JlbGF0aW9uc2hpcCc6IHtcclxuXHRcdFx0bGV0IGpvaW5lciA9IHZhbHVlLmludmVydGVkID8gJ2lzIE5PVCcgOiAnaXMnO1xyXG5cdFx0XHRsZXQgZm9ybWF0dGVkVmFsdWUgPSAodmFsdWUudmFsdWUubGVuZ3RoID4gMSlcclxuXHRcdFx0XHQ/IHZhbHVlLnZhbHVlLmpvaW4oJywgb3IgJylcclxuXHRcdFx0XHQ6IHZhbHVlLnZhbHVlWzBdO1xyXG5cclxuXHRcdFx0cmV0dXJuIGAke2xhYmVsfSAke2pvaW5lcn0gJHtmb3JtYXR0ZWRWYWx1ZX1gO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNFTEVDVFxyXG5cdFx0Y2FzZSAnc2VsZWN0Jzoge1xyXG5cdFx0XHRsZXQgam9pbmVyID0gdmFsdWUuaW52ZXJ0ZWQgPyAnaXMgTk9UJyA6ICdpcyc7XHJcblx0XHRcdGxldCBmb3JtYXR0ZWRWYWx1ZSA9ICh2YWx1ZS52YWx1ZS5sZW5ndGggPiAxKVxyXG5cdFx0XHRcdD8gdmFsdWUudmFsdWUuam9pbignLCBvciAnKVxyXG5cdFx0XHRcdDogdmFsdWUudmFsdWVbMF07XHJcblxyXG5cdFx0XHRyZXR1cm4gYCR7bGFiZWx9ICR7am9pbmVyfSAke2Zvcm1hdHRlZFZhbHVlfWA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVEVYVC1MSUtFXHJcblx0XHRjYXNlICdjb2RlJzpcclxuXHRcdGNhc2UgJ2NvbG9yJzpcclxuXHRcdGNhc2UgJ2VtYWlsJzpcclxuXHRcdGNhc2UgJ2h0bWwnOlxyXG5cdFx0Y2FzZSAna2V5JzpcclxuXHRcdGNhc2UgJ21hcmtkb3duJzpcclxuXHRcdGNhc2UgJ25hbWUnOlxyXG5cdFx0Y2FzZSAndGV4dCc6XHJcblx0XHRjYXNlICd0ZXh0YXJlYSc6XHJcblx0XHRjYXNlICd1cmwnOiB7XHJcblx0XHRcdGxldCBtb2RlID0gJyc7XHJcblx0XHRcdGlmICh2YWx1ZS5tb2RlID09PSAnYmVnaW5zV2l0aCcpIHtcclxuXHRcdFx0XHRtb2RlID0gdmFsdWUuaW52ZXJ0ZWQgPyAnZG9lcyBOT1QgYmVnaW4gd2l0aCcgOiAnYmVnaW5zIHdpdGgnO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlLm1vZGUgPT09ICdlbmRzV2l0aCcpIHtcclxuXHRcdFx0XHRtb2RlID0gdmFsdWUuaW52ZXJ0ZWQgPyAnZG9lcyBOT1QgZW5kIHdpdGgnIDogJ2VuZHMgd2l0aCc7XHJcblx0XHRcdH0gZWxzZSBpZiAodmFsdWUubW9kZSA9PT0gJ2V4YWN0bHknKSB7XHJcblx0XHRcdFx0bW9kZSA9IHZhbHVlLmludmVydGVkID8gJ2lzIE5PVCBleGFjdGx5JyA6ICdpcyBleGFjdGx5JztcclxuXHRcdFx0fSBlbHNlIGlmICh2YWx1ZS5tb2RlID09PSAnY29udGFpbnMnKSB7XHJcblx0XHRcdFx0bW9kZSA9IHZhbHVlLmludmVydGVkID8gJ2RvZXMgTk9UIGNvbnRhaW4nIDogJ2NvbnRhaW5zJztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGAke2xhYmVsfSAke21vZGV9IFwiJHt2YWx1ZS52YWx1ZX1cImA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVEVYVEFSUkFZXHJcblx0XHRjYXNlICd0ZXh0YXJyYXknOiB7XHJcblx0XHRcdGNvbnN0IHByZXNlbmNlID0gdmFsdWUucHJlc2VuY2UgPT09ICdzb21lJyA/ICdTb21lJyA6ICdObyc7XHJcblx0XHRcdGxldCBtb2RlID0gJyc7XHJcblx0XHRcdGlmICh2YWx1ZS5tb2RlID09PSAnYmVnaW5zV2l0aCcpIHtcclxuXHRcdFx0XHRtb2RlID0gdmFsdWUuaW52ZXJ0ZWQgPyAnZG8gTk9UIGJlZ2luIHdpdGgnIDogJ2JlZ2luIHdpdGgnO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlLm1vZGUgPT09ICdlbmRzV2l0aCcpIHtcclxuXHRcdFx0XHRtb2RlID0gdmFsdWUuaW52ZXJ0ZWQgPyAnZG8gTk9UIGVuZCB3aXRoJyA6ICdlbmQgd2l0aCc7XHJcblx0XHRcdH0gZWxzZSBpZiAodmFsdWUubW9kZSA9PT0gJ2V4YWN0bHknKSB7XHJcblx0XHRcdFx0bW9kZSA9IHZhbHVlLmludmVydGVkID8gJ2FyZSBOT1QgZXhhY3RseScgOiAnYXJlIGV4YWN0bHknO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlLm1vZGUgPT09ICdjb250YWlucycpIHtcclxuXHRcdFx0XHRtb2RlID0gdmFsdWUuaW52ZXJ0ZWQgPyAnZG8gTk9UIGNvbnRhaW4nIDogJ2NvbnRhaW4nO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gYCR7cHJlc2VuY2V9ICR7bGFiZWx9ICR7bW9kZX0gXCIke3ZhbHVlLnZhbHVlfVwiYDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDQVRDSEFMTFxyXG5cdFx0ZGVmYXVsdDoge1xyXG5cdFx0XHRyZXR1cm4gYCR7bGFiZWx9IFwiJHt2YWx1ZS52YWx1ZX1cImA7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuZnVuY3Rpb24gcmVzb2x2ZU51bWJlckZvcm1hdCAodmFsdWUsIGNvbmp1bmN0aW9uID0gJ2lzJykge1xyXG5cdGxldCBtb2RlID0gJyc7XHJcblx0aWYgKHZhbHVlLm1vZGUgPT09ICdlcXVhbHMnKSBtb2RlID0gY29uanVuY3Rpb247XHJcblx0ZWxzZSBpZiAodmFsdWUubW9kZSA9PT0gJ2d0JykgbW9kZSA9IGAke2Nvbmp1bmN0aW9ufSBncmVhdGVyIHRoYW5gO1xyXG5cdGVsc2UgaWYgKHZhbHVlLm1vZGUgPT09ICdsdCcpIG1vZGUgPSBgJHtjb25qdW5jdGlvbn0gbGVzcyB0aGFuYDtcclxuXHJcblx0Y29uc3QgZm9ybWF0dGVkVmFsdWUgPSB2YWx1ZS5tb2RlID09PSAnYmV0d2VlbidcclxuXHRcdD8gYGlzIGJldHdlZW4gJHt2YWx1ZS52YWx1ZS5taW59IGFuZCAke3ZhbHVlLnZhbHVlLm1heH1gXHJcblx0XHQ6IHZhbHVlLnZhbHVlO1xyXG5cclxuXHRyZXR1cm4gYCR7bW9kZX0gJHtmb3JtYXR0ZWRWYWx1ZX1gO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNvbHZlRGF0ZUZvcm1hdCAodmFsdWUsIGZvcm1hdCwgY29uanVuY3Rpb24gPSAnaXMnKSB7XHJcblx0Y29uc3Qgam9pbmVyID0gdmFsdWUuaW52ZXJ0ZWQgPyBgJHtjb25qdW5jdGlvbn0gTk9UYCA6IGNvbmp1bmN0aW9uO1xyXG5cdGNvbnN0IG1vZGUgPSB2YWx1ZS5tb2RlID09PSAnb24nID8gJycgOiB2YWx1ZS5tb2RlO1xyXG5cdGNvbnN0IGZvcm1hdHRlZFZhbHVlID0gdmFsdWUubW9kZSA9PT0gJ2JldHdlZW4nXHJcblx0XHQ/IGAke21vbWVudCh2YWx1ZS5hZnRlcikuZm9ybWF0KGZvcm1hdCl9IGFuZCAke21vbWVudCh2YWx1ZS5iZWZvcmUpLmZvcm1hdChmb3JtYXQpfWBcclxuXHRcdDogbW9tZW50KHZhbHVlLnZhbHVlKS5mb3JtYXQoZm9ybWF0KTtcclxuXHJcblx0cmV0dXJuIGAke2pvaW5lcn0gJHttb2RlfSAke2Zvcm1hdHRlZFZhbHVlfWA7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZ2V0RmlsdGVyTGFiZWw7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IFRhYmxlUm93IGZyb20gJy4vSXRlbXNUYWJsZVJvdyc7XG5pbXBvcnQgRHJhZ0Ryb3AgZnJvbSAnLi9JdGVtc1RhYmxlRHJhZ0Ryb3AnO1xuXG5pbXBvcnQgeyBUQUJMRV9DT05UUk9MX0NPTFVNTl9XSURUSCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbnN0YW50cyc7XG5cbmNvbnN0IEl0ZW1zVGFibGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdHByb3BUeXBlczoge1xuXHRcdGNoZWNrZWRJdGVtczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXHRcdGNvbHVtbnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuXHRcdGRlbGV0ZVRhYmxlSXRlbTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0XHRoYW5kbGVTb3J0U2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRcdGl0ZW1zOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cdFx0bGlzdDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXHRcdG1hbmFnZU1vZGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cdFx0cm93QWxlcnQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblx0fSxcblx0cmVuZGVyQ29scygpIHtcblx0XHRsZXQgY29scyA9IHRoaXMucHJvcHMuY29sdW1ucy5tYXAoY29sID0+IChcblx0XHRcdDxjb2wga2V5PXtjb2wucGF0aH0gd2lkdGg9e2NvbC53aWR0aH0gLz5cblx0XHQpKTtcblxuXHRcdC8vIGFkZCBkZWxldGUgY29sIHdoZW4gYXZhaWxhYmxlXG5cdFx0aWYgKCF0aGlzLnByb3BzLmxpc3Qubm9kZWxldGUpIHtcblx0XHRcdGNvbHMudW5zaGlmdChcblx0XHRcdFx0PGNvbCB3aWR0aD17VEFCTEVfQ09OVFJPTF9DT0xVTU5fV0lEVEh9IGtleT1cImRlbGV0ZVwiIC8+XG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdC8vIGFkZCBzb3J0IGNvbCB3aGVuIGF2YWlsYWJsZVxuXHRcdGlmICh0aGlzLnByb3BzLmxpc3Quc29ydGFibGUpIHtcblx0XHRcdGNvbHMudW5zaGlmdChcblx0XHRcdFx0PGNvbCB3aWR0aD17VEFCTEVfQ09OVFJPTF9DT0xVTU5fV0lEVEh9IGtleT1cInNvcnRhYmxlXCIgLz5cblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxjb2xncm91cD5cblx0XHRcdFx0e2NvbHN9XG5cdFx0XHQ8L2NvbGdyb3VwPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlckhlYWRlcnMoKSB7XG5cdFx0bGV0IGxpc3RDb250cm9sQ291bnQgPSAwO1xuXG5cdFx0aWYgKHRoaXMucHJvcHMubGlzdC5zb3J0YWJsZSkgbGlzdENvbnRyb2xDb3VudCsrO1xuXHRcdGlmICghdGhpcy5wcm9wcy5saXN0Lm5vZGVsZXRlKSBsaXN0Q29udHJvbENvdW50Kys7XG5cblx0XHQvLyBzZXQgYWN0aXZlIHNvcnRcblx0XHRjb25zdCBhY3RpdmVTb3J0UGF0aCA9IHRoaXMucHJvcHMuYWN0aXZlU29ydC5wYXRoc1swXTtcblxuXHRcdC8vIHBhZCBmaXJzdCBjb2wgd2hlbiBjb250cm9scyBhcmUgYXZhaWxhYmxlXG5cdFx0Y29uc3QgY2VsbFBhZCA9IGxpc3RDb250cm9sQ291bnQgPyAoXG5cdFx0XHQ8dGggY29sU3Bhbj17bGlzdENvbnRyb2xDb3VudH0gLz5cblx0XHQpIDogbnVsbDtcblxuXHRcdC8vIG1hcCBlYWNoIGhlYWRpbmcgY29sdW1uXG5cdFx0Y29uc3QgY2VsbE1hcCA9IHRoaXMucHJvcHMuY29sdW1ucy5tYXAoY29sID0+IHtcblx0XHRcdGNvbnN0IGlzU2VsZWN0ZWQgPSBhY3RpdmVTb3J0UGF0aCAmJiBhY3RpdmVTb3J0UGF0aC5wYXRoID09PSBjb2wucGF0aDtcblx0XHRcdGNvbnN0IGlzSW52ZXJ0ZWQgPSBpc1NlbGVjdGVkICYmIGFjdGl2ZVNvcnRQYXRoLmludmVydDtcblx0XHRcdGNvbnN0IGJ1dHRvblRpdGxlID0gYFNvcnQgYnkgJHtjb2wubGFiZWx9JHtpc1NlbGVjdGVkICYmICFpc0ludmVydGVkID8gJyAoZGVzYyknIDogJyd9YDtcblx0XHRcdGNvbnN0IGNvbENsYXNzTmFtZSA9IGNsYXNzbmFtZXMoJ0l0ZW1MaXN0X19zb3J0LWJ1dHRvbiB0aC1zb3J0Jywge1xuXHRcdFx0XHQndGgtc29ydC0tYXNjJzogaXNTZWxlY3RlZCAmJiAhaXNJbnZlcnRlZCxcblx0XHRcdFx0J3RoLXNvcnQtLWRlc2MnOiBpc0ludmVydGVkLFxuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDx0aCBrZXk9e2NvbC5wYXRofSBjb2xTcGFuPVwiMVwiPlxuXHRcdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRcdGNsYXNzTmFtZT17Y29sQ2xhc3NOYW1lfVxuXHRcdFx0XHRcdFx0b25DbGljaz17KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnByb3BzLmhhbmRsZVNvcnRTZWxlY3QoXG5cdFx0XHRcdFx0XHRcdFx0Y29sLnBhdGgsXG5cdFx0XHRcdFx0XHRcdFx0aXNTZWxlY3RlZCAmJiAhaXNJbnZlcnRlZFxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdHRpdGxlPXtidXR0b25UaXRsZX0+XG5cdFx0XHRcdFx0XHR7Y29sLmxhYmVsfVxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwidGgtc29ydF9faWNvblwiIC8+XG5cdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdDwvdGg+XG5cdFx0XHQpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDx0aGVhZD5cblx0XHRcdFx0PHRyPlxuXHRcdFx0XHRcdHtjZWxsUGFkfVxuXHRcdFx0XHRcdHtjZWxsTWFwfVxuXHRcdFx0XHQ8L3RyPlxuXHRcdFx0PC90aGVhZD5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXIoKSB7XG5cdFx0Y29uc3QgeyBpdGVtcyB9ID0gdGhpcy5wcm9wcztcblx0XHRpZiAoIWl0ZW1zLnJlc3VsdHMubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuXHRcdGNvbnN0IHRhYmxlQm9keSA9ICh0aGlzLnByb3BzLmxpc3Quc29ydGFibGUpID8gKFxuXHRcdFx0PERyYWdEcm9wIHsuLi50aGlzLnByb3BzfSAvPlxuXHRcdCkgOiAoXG5cdFx0XHRcdDx0Ym9keSA+XG5cdFx0XHRcdFx0e2l0ZW1zLnJlc3VsdHMubWFwKChpdGVtLCBpKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdFx0XHQ8VGFibGVSb3cga2V5PXtpdGVtLmlkfVxuXHRcdFx0XHRcdFx0XHRcdGRlbGV0ZVRhYmxlSXRlbT17dGhpcy5wcm9wcy5kZWxldGVUYWJsZUl0ZW19XG5cdFx0XHRcdFx0XHRcdFx0aW5kZXg9e2l9XG5cdFx0XHRcdFx0XHRcdFx0c29ydE9yZGVyPXtpdGVtLnNvcnRPcmRlciB8fCAwfVxuXHRcdFx0XHRcdFx0XHRcdGlkPXtpdGVtLmlkfVxuXHRcdFx0XHRcdFx0XHRcdGl0ZW09e2l0ZW19XG5cdFx0XHRcdFx0XHRcdFx0ey4uLnRoaXMucHJvcHN9XG5cdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pfVxuXHRcdFx0XHQ8L3Rib2R5PlxuXHRcdFx0KTtcblx0XHQvKiogVE8gQUREIFNDUk9MTCBPTiBESVJFQ1RPUklFUyBQQUdFUyAqL1xuXHRcdGNvbnN0IGRpcmVjdG9yeV9kaXZfY2xhc3MgPSAhdGhpcy5wcm9wcy5saXN0LnNjcm9sbGFibGUgPyAnSXRlbUxpc3Qtd3JhcHBlcicgOiAnSXRlbUxpc3Qtd3JhcHBlci13aXRoLXNjcm9sbCc7XG5cdFx0Y29uc3QgdGFibGVfY2xhc3MgPSAhdGhpcy5wcm9wcy5saXN0LnNjcm9sbGFibGUgPyAnVGFibGUgSXRlbUxpc3QnIDogJ1RhYmxlIEl0ZW1MaXN0LXdpdGgtc2Nyb2xsJztcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2RpcmVjdG9yeV9kaXZfY2xhc3N9PlxuXHRcdFx0XHQ8dGFibGUgY2VsbFBhZGRpbmc9XCIwXCIgY2VsbFNwYWNpbmc9XCIwXCIgY2xhc3NOYW1lPXt0YWJsZV9jbGFzc30+XG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyQ29scygpfVxuXHRcdFx0XHRcdHt0aGlzLnJlbmRlckhlYWRlcnMoKX1cblx0XHRcdFx0XHR7dGFibGVCb2R5fVxuXHRcdFx0XHQ8L3RhYmxlPlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBJdGVtc1RhYmxlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRHJhZ0Ryb3BDb250ZXh0IH0gZnJvbSAncmVhY3QtZG5kJztcclxuaW1wb3J0IEhUTUw1QmFja2VuZCBmcm9tICdyZWFjdC1kbmQtaHRtbDUtYmFja2VuZCc7XHJcbmltcG9ydCB7IFNvcnRhYmxlIH0gZnJvbSAnLi9JdGVtc1RhYmxlUm93JztcclxuaW1wb3J0IERyb3Bab25lIGZyb20gJy4vSXRlbXNUYWJsZURyYWdEcm9wWm9uZSc7XHJcblxyXG52YXIgSXRlbXNUYWJsZURyYWdEcm9wID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnSXRlbXNUYWJsZURyYWdEcm9wJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGNvbHVtbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcclxuXHRcdGlkOiBSZWFjdC5Qcm9wVHlwZXMuYW55LFxyXG5cdFx0aW5kZXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcblx0XHRpdGVtczogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcclxuXHRcdGxpc3Q6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PHRib2R5ID5cclxuXHRcdFx0XHR7dGhpcy5wcm9wcy5pdGVtcy5yZXN1bHRzLm1hcCgoaXRlbSwgaSkgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHRcdFx0PFNvcnRhYmxlIGtleT17aXRlbS5pZH1cclxuXHRcdFx0XHRcdFx0XHRpbmRleD17aX1cclxuXHRcdFx0XHRcdFx0XHRzb3J0T3JkZXI9e2l0ZW0uc29ydE9yZGVyIHx8IDB9XHJcblx0XHRcdFx0XHRcdFx0aWQ9e2l0ZW0uaWR9XHJcblx0XHRcdFx0XHRcdFx0aXRlbT17aXRlbX1cclxuXHRcdFx0XHRcdFx0XHR7Li4udGhpcy5wcm9wc31cclxuXHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fSl9XHJcblx0XHRcdFx0PERyb3Bab25lIHsuLi50aGlzLnByb3BzfSAvPlxyXG5cdFx0XHQ8L3Rib2R5PlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRHJhZ0Ryb3BDb250ZXh0KEhUTUw1QmFja2VuZCkoSXRlbXNUYWJsZURyYWdEcm9wKTtcclxuIiwiLyoqXHJcbiAqIFRISVMgSVMgT1JQSEFORUQgQU5EIElTTidUIFJFTkRFUkVEIEFUIFRIRSBNT01FTlRcclxuICogVEhJUyBXQVMgRE9ORSBUTyBGSU5JU0ggVEhFIFJFRFVYIElOVEVHUkFUSU9OLCBXSUxMIFJFV1JJVEUgU09PTlxyXG4gKiAtIEBteHN0YnJcclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgRHJvcFpvbmVUYXJnZXQgZnJvbSAnLi9JdGVtc1RhYmxlRHJhZ0Ryb3Bab25lVGFyZ2V0JztcclxuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcblxyXG52YXIgSXRlbXNUYWJsZURyYWdEcm9wWm9uZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ0l0ZW1zVGFibGVEcmFnRHJvcFpvbmUnLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0Y29sdW1uczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxyXG5cdFx0Y29ubmVjdERyb3BUYXJnZXQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdFx0aXRlbXM6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXHJcblx0XHRsaXN0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxyXG5cdH0sXHJcblx0cmVuZGVyUGFnZURyb3BzICgpIHtcclxuXHRcdGNvbnN0IHsgaXRlbXMsIGN1cnJlbnRQYWdlLCBwYWdlU2l6ZSB9ID0gdGhpcy5wcm9wcztcclxuXHJcblx0XHRjb25zdCB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKGl0ZW1zLmNvdW50IC8gcGFnZVNpemUpO1xyXG5cdFx0Y29uc3Qgc3R5bGUgPSB7IGRpc3BsYXk6IHRvdGFsUGFnZXMgPiAxID8gbnVsbCA6ICdub25lJyB9O1xyXG5cclxuXHRcdGNvbnN0IHBhZ2VzID0gW107XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsUGFnZXM7IGkrKykge1xyXG5cdFx0XHRjb25zdCBwYWdlID0gaSArIDE7XHJcblx0XHRcdGNvbnN0IHBhZ2VJdGVtcyA9ICcnICsgKHBhZ2UgKiBwYWdlU2l6ZSAtIChwYWdlU2l6ZSAtIDEpKSArICcgLSAnICsgKHBhZ2UgKiBwYWdlU2l6ZSk7XHJcblx0XHRcdGNvbnN0IGN1cnJlbnQgPSAocGFnZSA9PT0gY3VycmVudFBhZ2UpO1xyXG5cdFx0XHRjb25zdCBjbGFzc05hbWUgPSBjbGFzc25hbWVzKCdJdGVtTGlzdF9fZHJvcHpvbmUtLXBhZ2UnLCB7XHJcblx0XHRcdFx0J2lzLWFjdGl2ZSc6IGN1cnJlbnQsXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRwYWdlcy5wdXNoKFxyXG5cdFx0XHRcdDxEcm9wWm9uZVRhcmdldFxyXG5cdFx0XHRcdFx0a2V5PXsncGFnZV8nICsgcGFnZX1cclxuXHRcdFx0XHRcdHBhZ2U9e3BhZ2V9XHJcblx0XHRcdFx0XHRjbGFzc05hbWU9e2NsYXNzTmFtZX1cclxuXHRcdFx0XHRcdHBhZ2VJdGVtcz17cGFnZUl0ZW1zfVxyXG5cdFx0XHRcdFx0cGFnZVNpemU9e3BhZ2VTaXplfVxyXG5cdFx0XHRcdFx0Y3VycmVudFBhZ2U9e2N1cnJlbnRQYWdlfVxyXG5cdFx0XHRcdFx0ZHJhZz17dGhpcy5wcm9wcy5kcmFnfVxyXG5cdFx0XHRcdFx0ZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgY29scyA9IHRoaXMucHJvcHMuY29sdW1ucy5sZW5ndGg7XHJcblx0XHRpZiAodGhpcy5wcm9wcy5saXN0LnNvcnRhYmxlKSBjb2xzKys7XHJcblx0XHRpZiAoIXRoaXMucHJvcHMubGlzdC5ub2RlbGV0ZSkgY29scysrO1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PHRyIHN0eWxlPXtzdHlsZX0+XHJcblx0XHRcdFx0PHRkIGNvbFNwYW49e2NvbHN9ID5cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiSXRlbUxpc3RfX2Ryb3B6b25lXCIgPlxyXG5cdFx0XHRcdFx0XHR7cGFnZXN9XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiY2xlYXJmaXhcIiAvPlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0PC90ZD5cclxuXHRcdFx0PC90cj5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucmVuZGVyUGFnZURyb3BzKCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEl0ZW1zVGFibGVEcmFnRHJvcFpvbmU7XHJcbiIsIi8qKlxyXG4gKiBUSElTIElTIE9SUEhBTkVEIEFORCBJU04nVCBSRU5ERVJFRCBBVCBUSEUgTU9NRU5UXHJcbiAqIFRISVMgV0FTIERPTkUgVE8gRklOSVNIIFRIRSBSRURVWCBJTlRFR1JBVElPTiwgV0lMTCBSRVdSSVRFIFNPT05cclxuICogLSBAbXhzdGJyXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRHJvcFRhcmdldCB9IGZyb20gJ3JlYWN0LWRuZCc7XHJcblxyXG5pbXBvcnQgeyBzZXRDdXJyZW50UGFnZSB9IGZyb20gJy4uLy4uL2FjdGlvbnMnO1xyXG5cclxubGV0IHRpbWVvdXRJRCA9IGZhbHNlO1xyXG5cclxuLy8gZHJvcCB0YXJnZXRcclxudmFyIEl0ZW1zVGFibGVEcmFnRHJvcFpvbmVUYXJnZXQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdJdGVtc1RhYmxlRHJhZ0Ryb3Bab25lVGFyZ2V0JyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdGNvbm5lY3REcm9wVGFyZ2V0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHRcdGlzT3ZlcjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcblx0XHRwYWdlSXRlbXM6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0fSxcclxuXHRjb21wb25lbnREaWRVcGRhdGUgKCkge1xyXG5cdFx0aWYgKHRpbWVvdXRJRCAmJiAhdGhpcy5wcm9wcy5pc092ZXIpIHtcclxuXHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXRJRCk7XHJcblx0XHRcdHRpbWVvdXRJRCA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IHsgcGFnZUl0ZW1zLCBwYWdlLCBpc092ZXIsIGRpc3BhdGNoIH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0bGV0IHsgY2xhc3NOYW1lIH0gPSB0aGlzLnByb3BzO1xyXG5cdFx0aWYgKGlzT3Zlcikge1xyXG5cdFx0XHRjbGFzc05hbWUgKz0gKHBhZ2UgPT09IHRoaXMucHJvcHMuY3VycmVudFBhZ2UpID8gJyBpcy1hdmFpbGFibGUgJyA6ICcgaXMtd2FpdGluZyAnO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMucHJvcHMuY29ubmVjdERyb3BUYXJnZXQoXHJcblx0XHRcdDxkaXZcclxuXHRcdFx0XHRjbGFzc05hbWU9e2NsYXNzTmFtZX1cclxuXHRcdFx0XHRvbkNsaWNrPXsoZSkgPT4ge1xyXG5cdFx0XHRcdFx0ZGlzcGF0Y2goc2V0Q3VycmVudFBhZ2UocGFnZSkpO1xyXG5cdFx0XHRcdH19XHJcblx0XHRcdD5cclxuXHRcdFx0XHR7cGFnZUl0ZW1zfVxyXG5cdFx0XHQ8L2Rpdj4pO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEltcGxlbWVudHMgZHJhZyB0YXJnZXQuXHJcbiAqL1xyXG5jb25zdCBkcm9wVGFyZ2V0ID0ge1xyXG5cdGRyb3AgKHByb3BzLCBtb25pdG9yLCBjb21wb25lbnQpIHtcclxuXHRcdC8vIHdlIHNlbmQgbWFudWFsIGRhdGEgdG8gZW5kRHJhZyB0byBzZW5kIHRoaXMgaXRlbSB0byB0aGUgY29ycmVjdCBwYWdlXHJcblx0XHRjb25zdCB7IHBhZ2UgfSA9IHByb3BzLmRyYWc7XHJcblx0XHRjb25zdCB0YXJnZXRQYWdlID0gcHJvcHMucGFnZTtcclxuXHRcdGNvbnN0IHBhZ2VTaXplID0gcHJvcHMucGFnZVNpemU7XHJcblxyXG5cdFx0Y29uc3QgaXRlbSA9IG1vbml0b3IuZ2V0SXRlbSgpO1xyXG5cdFx0aXRlbS5nb1RvUGFnZSA9IHByb3BzLnBhZ2U7XHJcblx0XHRpdGVtLnByZXZTb3J0T3JkZXIgPSBpdGVtLnNvcnRPcmRlcjtcclxuXHRcdC8vIFdvcmsgb3V0IHRoZSBuZXcgc29ydCBvcmRlci4gSWYgdGhlIG5ldyBwYWdlIGlzIGdyZWF0ZXIsIHdlJ2xsIHB1dCBpdCBhdCB0aGUgc3RhcnQgb2YgdGhlIHBhZ2UsIGFuZFxyXG5cdFx0Ly8gaWYgaXQncyBzbWFsbGVyIHdlJ2xsIHB1dCBpdCBhdCB0aGUgZW5kIG9mIHRoZSBwYWdlLlxyXG5cdFx0aXRlbS5uZXdTb3J0T3JkZXIgPSAodGFyZ2V0UGFnZSA8IHBhZ2UpID8gKHRhcmdldFBhZ2UgKiBwYWdlU2l6ZSkgOiAodGFyZ2V0UGFnZSAqIHBhZ2VTaXplIC0gKHBhZ2VTaXplIC0gMSkpO1xyXG5cdFx0cmV0dXJuIGl0ZW07XHJcblx0fSxcclxuXHQvKlxyXG5cdCogVE9ETyBXb3JrIG91dCBpZiBpdCdzIHBvc3NpYmxlIHRvIGltcGxlbWVudCB0aGlzIGluIGEgd2F5IHRoYXQgd29ya3MuXHJcblx0aG92ZXIgKHByb3BzLCBtb25pdG9yLCBjb21wb25lbnQpIHtcclxuXHRcdGlmICh0aW1lb3V0SUQpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgeyBwYWdlLCBjdXJyZW50UGFnZSB9ID0gcHJvcHM7XHJcblxyXG5cdFx0Ly8gc2VsZlxyXG5cdFx0aWYgKHBhZ2UgPT09IGN1cnJlbnRQYWdlKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAobW9uaXRvci5pc092ZXIoKSkge1xyXG5cdFx0XHR0aW1lb3V0SUQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHQvLyBJZiB1c2VyIGhvdmVycyBvdmVyIHRoZSB0YXJnZXQgZm9yIGEgd2hpbGUgY2hhbmdlIHRoZSBwYWdlLlxyXG5cdFx0XHRcdC8vIFRPRE8gR2V0IHRoaXMgd29ya2luZy4gQ3VycmVudGx5LCBpdCBsb29rcyBsaWtlIGl0J3MgZ29pbmcgdG8gd29yaywgYnV0IHdoZW4geW91XHJcblx0XHRcdFx0Ly8gZHJvcCBvbnRvIGEgbmV3IHBhZ2UsIG5vIGRyb3AgZXZlbnRzIGFyZSBmaXJlZCwgYW5kIHJlYWN0LWRuZCBkb2Vzbid0IGhhdmUgYSB3YXkgdG9cclxuXHRcdFx0XHQvLyBtYW51YWxseSBmb3JjZSB0aGVtIHRvIGhhcHBlbi4gTm90IHN1cmUgd2hhdCB0byBkbyBoZXJlLlxyXG5cdFx0XHRcdHByb3BzLmRpc3BhdGNoKHNldEN1cnJlbnRQYWdlKHByb3BzLnBhZ2UpKTtcclxuXHJcblxyXG5cdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0SUQpO1xyXG5cdFx0XHRcdHRpbWVvdXRJRCA9IGZhbHNlO1xyXG5cdFx0XHR9LCA3NTApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0Ki9cclxufTtcclxuLyoqXHJcbiAqIFNwZWNpZmllcyB0aGUgcHJvcHMgdG8gaW5qZWN0IGludG8geW91ciBjb21wb25lbnQuXHJcbiAqL1xyXG5mdW5jdGlvbiBkcm9wUHJvcHMgKGNvbm5lY3QsIG1vbml0b3IpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0Y29ubmVjdERyb3BUYXJnZXQ6IGNvbm5lY3QuZHJvcFRhcmdldCgpLFxyXG5cdFx0aXNPdmVyOiBtb25pdG9yLmlzT3ZlcigpLFxyXG5cdH07XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IERyb3BUYXJnZXQoJ2l0ZW0nLCBkcm9wVGFyZ2V0LCBkcm9wUHJvcHMpKEl0ZW1zVGFibGVEcmFnRHJvcFpvbmVUYXJnZXQpO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBMaXN0Q29udHJvbCBmcm9tICcuLi9MaXN0Q29udHJvbCc7XG5cbmltcG9ydCB7IENvbHVtbnMgfSBmcm9tICdGaWVsZFR5cGVzJztcbmltcG9ydCB7IERyb3BUYXJnZXQsIERyYWdTb3VyY2UgfSBmcm9tICdyZWFjdC1kbmQnO1xuXG5pbXBvcnQge1xuXHRzZXREcmFnQmFzZSxcblx0cmVzZXRJdGVtcyxcblx0cmVvcmRlckl0ZW1zLFxuXHRzZXRSb3dBbGVydCxcblx0bW92ZUl0ZW0sXG59IGZyb20gJy4uLy4uL2FjdGlvbnMnO1xuaW1wb3J0IG1vbWVudCBmcm9tICAnbW9tZW50J1xuY29uc3QgSXRlbXNSb3cgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdHByb3BUeXBlczoge1xuXHRcdGNvbHVtbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcblx0XHRpZDogUmVhY3QuUHJvcFR5cGVzLmFueSxcblx0XHRpbmRleDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcblx0XHRpdGVtczogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcblx0XHRsaXN0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuXHRcdC8vIEluamVjdGVkIGJ5IFJlYWN0IERuRDpcblx0XHRpc0RyYWdnaW5nOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCwgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L3NvcnQtcHJvcC10eXBlc1xuXHRcdGNvbm5lY3REcmFnU291cmNlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYywgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvc29ydC1wcm9wLXR5cGVzXG5cdFx0Y29ubmVjdERyb3BUYXJnZXQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9zb3J0LXByb3AtdHlwZXNcblx0XHRjb25uZWN0RHJhZ1ByZXZpZXc6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L3NvcnQtcHJvcC10eXBlc1xuXHR9LFxuXHRyZW5kZXJSb3cgKGl0ZW0pIHtcblx0XHRjb25zdCBpdGVtSWQgPSBpdGVtLmlkO1xuXHRcdGNvbnN0IHJvd0NsYXNzbmFtZSA9IGNsYXNzbmFtZXMoe1xuXHRcdFx0J0l0ZW1MaXN0X19yb3ctLWRyYWdnaW5nJzogdGhpcy5wcm9wcy5pc0RyYWdnaW5nLFxuXHRcdFx0J0l0ZW1MaXN0X19yb3ctLXNlbGVjdGVkJzogdGhpcy5wcm9wcy5jaGVja2VkSXRlbXNbaXRlbUlkXSxcblx0XHRcdCdJdGVtTGlzdF9fcm93LS1tYW5hZ2UnOiB0aGlzLnByb3BzLm1hbmFnZU1vZGUsXG5cdFx0XHQnSXRlbUxpc3RfX3Jvdy0tc3VjY2Vzcyc6IHRoaXMucHJvcHMucm93QWxlcnQuc3VjY2VzcyA9PT0gaXRlbUlkLFxuXHRcdFx0J0l0ZW1MaXN0X19yb3ctLWZhaWx1cmUnOiB0aGlzLnByb3BzLnJvd0FsZXJ0LmZhaWwgPT09IGl0ZW1JZCxcblx0XHR9KTtcblx0XHQvLyBpdGVtIGZpZWxkc1xuXHRcdHZhciBjZWxscyA9IHRoaXMucHJvcHMuY29sdW1ucy5tYXAoKGNvbCwgaSkgPT4ge1xuXHRcdFx0dmFyIENvbHVtblR5cGUgPSBDb2x1bW5zW2NvbC50eXBlXSB8fCBDb2x1bW5zLl9fdW5yZWNvZ25pc2VkX187XG5cdFx0XHR2YXIgbGlua1RvID0gIWkgPyBgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7dGhpcy5wcm9wcy5saXN0LnBhdGh9LyR7aXRlbUlkfWAgOiB1bmRlZmluZWQ7XG5cdFx0XHRyZXR1cm4gPENvbHVtblR5cGUga2V5PXtjb2wucGF0aH0gbGlzdD17dGhpcy5wcm9wcy5saXN0fSBjb2w9e2NvbH0gZGF0YT17aXRlbX0gbGlua1RvPXtsaW5rVG99IC8+O1xuXHRcdH0pO1xuXG5cdFx0Ly8gYWRkIHNvcnRhYmxlIGljb24gd2hlbiBhcHBsaWNhYmxlXG5cdFx0aWYgKHRoaXMucHJvcHMubGlzdC5zb3J0YWJsZSkge1xuXHRcdFx0Y2VsbHMudW5zaGlmdCg8TGlzdENvbnRyb2wga2V5PVwiX3NvcnRcIiB0eXBlPVwic29ydGFibGVcIiBkcmFnU291cmNlPXt0aGlzLnByb3BzLmNvbm5lY3REcmFnU291cmNlfSAvPik7XG5cdFx0fVxuXG5cdFx0Ly8gYWRkIGRlbGV0ZS9jaGVjayBpY29uIHdoZW4gYXBwbGljYWJsZVxuXHRcdGlmICghdGhpcy5wcm9wcy5saXN0Lm5vZGVsZXRlKSB7XG5cdFx0XHRjZWxscy51bnNoaWZ0KHRoaXMucHJvcHMubWFuYWdlTW9kZSA/IChcblx0XHRcdFx0PExpc3RDb250cm9sIGtleT1cIl9jaGVja1wiIHR5cGU9XCJjaGVja1wiIGFjdGl2ZT17dGhpcy5wcm9wcy5jaGVja2VkSXRlbXNbaXRlbUlkXX0gLz5cblx0XHRcdCkgOiAoXG5cdFx0XHRcdDxMaXN0Q29udHJvbCBrZXk9XCJfZGVsZXRlXCIgb25DbGljaz17KGUpID0+IHRoaXMucHJvcHMuZGVsZXRlVGFibGVJdGVtKGl0ZW0sIGUpfSB0eXBlPVwiZGVsZXRlXCIgLz5cblx0XHRcdCkpO1xuXHRcdH1cblx0XHRjb25zdCAge2ZpZWxkczoge3VwdG99PXt9fSA9IGl0ZW1cblx0XHRsZXQgYmFja2dyb3VuZENvbG9yID0gJ25vbmUnXG5cdFx0aWYgKHVwdG8pe1xuXHRcdFx0aWYobW9tZW50KCkuaXNTYW1lT3JBZnRlcihtb21lbnQodXB0bykuc3VidHJhY3QoJzMwJywgJ2RheXMnKSwgJ2RheScpKXtcblx0XHRcdFx0YmFja2dyb3VuZENvbG9yID0gJ1JlZCdcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYobW9tZW50KCkuaXNTYW1lT3JBZnRlcihtb21lbnQodXB0bykuc3VidHJhY3QoJzYwJywgJ2RheXMnKSwgJ2RheScpKXtcblx0XHRcdFx0YmFja2dyb3VuZENvbG9yID0gJ1llbGxvdydcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIGFkZFJvdyA9ICg8dHIga2V5PXsnaScgKyBpdGVtLmlkfVxuXHRcdHRpdGxlID0ge3VwdG8gPyBgRXhwaXJlIGluICR7bW9tZW50KHVwdG8pLmZyb20obW9tZW50KCkpfWA6ICcnfVxuXHRcdHN0eWxlPXt7YmFja2dyb3VuZENvbG9yfX0gb25DbGljaz17dGhpcy5wcm9wcy5tYW5hZ2VNb2RlID8gKGUpID0+IHRoaXMucHJvcHMuY2hlY2tUYWJsZUl0ZW0oaXRlbSwgZSkgOiBudWxsfSBjbGFzc05hbWU9e3Jvd0NsYXNzbmFtZX0+e2NlbGxzfVxuXHRcdDx0ZCBzdHlsZT17e2NvbG9yOiAnIzgwNzc3YScsIGZvbnRXZWlnaHQ6ICdib2xkJywgZGlzcGxheTogIXVwdG8gPyAnbm9uZSc6ICAnYmxvY2snfX0+RXhwaXJlIGluIHttb21lbnQodXB0bykuZnJvbShtb21lbnQoKSl9PC90ZD48L3RyPik7XG5cblx0XHRpZiAodGhpcy5wcm9wcy5saXN0LnNvcnRhYmxlKSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQvLyB3ZSBjb3VsZCBhZGQgYSBwcmV2aWV3IGNvbnRhaW5lci9pbWFnZVxuXHRcdFx0XHQvLyB0aGlzLnByb3BzLmNvbm5lY3REcmFnUHJldmlldyh0aGlzLnByb3BzLmNvbm5lY3REcm9wVGFyZ2V0KGFkZFJvdykpXG5cdFx0XHRcdHRoaXMucHJvcHMuY29ubmVjdERyb3BUYXJnZXQoYWRkUm93KVxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIChhZGRSb3cpO1xuXHRcdH1cblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRyZXR1cm4gdGhpcy5yZW5kZXJSb3codGhpcy5wcm9wcy5pdGVtKTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBJdGVtc1JvdztcblxuLy8gRXhwb3NlIFNvcnRhYmxlXG5cbi8qKlxuICogSW1wbGVtZW50cyBkcmFnIHNvdXJjZS5cbiAqL1xuY29uc3QgZHJhZ0l0ZW0gPSB7XG5cdGJlZ2luRHJhZyAocHJvcHMpIHtcblx0XHRjb25zdCBzZW5kID0geyAuLi5wcm9wcyB9O1xuXHRcdHByb3BzLmRpc3BhdGNoKHNldERyYWdCYXNlKHByb3BzLml0ZW0sIHByb3BzLmluZGV4KSk7XG5cdFx0cmV0dXJuIHsgLi4uc2VuZCB9O1xuXHR9LFxuXHRlbmREcmFnIChwcm9wcywgbW9uaXRvciwgY29tcG9uZW50KSB7XG5cdFx0aWYgKCFtb25pdG9yLmRpZERyb3AoKSkge1xuXHRcdFx0cHJvcHMuZGlzcGF0Y2gocmVzZXRJdGVtcyhwcm9wcy5pZCkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBwYWdlID0gcHJvcHMuY3VycmVudFBhZ2U7XG5cdFx0Y29uc3QgcGFnZVNpemUgPSBwcm9wcy5wYWdlU2l6ZTtcblxuXHRcdC8vIElmIHdlIHdlcmUgZHJvcHBlZCBvbnRvIGEgcGFnZSBjaGFuZ2UgdGFyZ2V0LCB0aGVuIGRyb3BwZWRPbi5wcmV2U29ydE9yZGVyIGV0YyB3aWxsIGJlXG5cdFx0Ly8gc2V0IGJ5IHRoYXQgdGFyZ2V0LCBhbmQgd2Ugc2hvdWxkIHVzZSB0aG9zZSB2YWx1ZXMuIElmIHdlIHdlcmUganVzdCBkcm9wcGVkIG9udG8gYSBuZXcgcm93XG5cdFx0Ly8gdGhlbiB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSB0aGVzZSB2YWx1ZXMgb3Vyc2VsdmVzLlxuXHRcdGNvbnN0IGRyb3BwZWRPbiA9IG1vbml0b3IuZ2V0RHJvcFJlc3VsdCgpO1xuXG5cdFx0Y29uc3QgcHJldlNvcnRPcmRlciA9IGRyb3BwZWRPbi5wcmV2U29ydE9yZGVyIHx8IHByb3BzLnNvcnRPcmRlcjtcblx0XHQvLyBUbyBleHBsYWluIHRoZSBmb2xsb3dpbmcgbGluZSwgc3VwcG9zZSB3ZSBhcmUgb24gcGFnZSAzIGFuZCB0aGVyZSBhcmUgMTAgaXRlbXMgcGVyIHBhZ2UuXG5cdFx0Ly8gUHJldmlvdXMgdG8gdGhpcyBwYWdlLCB0aGVyZSBhcmUgKDMgLSAxKSoxMCA9IDIwIGl0ZW1zIGJlZm9yZSB1cy4gSWYgd2UgaGF2ZSBpbmRleCA2XG5cdFx0Ly8gb24gdGhpcyBwYWdlLCB0aGVuIHdlJ3JlIHRoZSA3dGggaXRlbSB0byBkaXNwbGF5IChpbmRleCBzdGFydHMgZnJvbSAwKSwgYW5kIHNvIHdlXG5cdFx0Ly8gd2FudCB0byB1cGRhdGUgdGhlIGRpc3BsYXkgb3JkZXIgdG8gMjAgKyA3ID0gMjcuXG5cdFx0Y29uc3QgbmV3U29ydE9yZGVyID0gZHJvcHBlZE9uLm5ld1NvcnRPcmRlciB8fCAocGFnZSAtIDEpICogcGFnZVNpemUgKyBkcm9wcGVkT24uaW5kZXggKyAxO1xuXG5cdFx0Ly8gSWYgd2Ugd2VyZSBkcm9wcGVkIG9uIGEgcGFnZSBjaGFuZ2UgdGFyZ2V0LCB0aGVuIGRyb3BwZWRPbi5nb3RUb1BhZ2Ugd2lsbCBiZSBzZXQsIGFuZCB3ZSBzaG91bGRcblx0XHQvLyBwYXNzIHRoaXMgdG8gcmVvcmRlckl0ZW1zLCB3aGljaCB3aWxsIHRoZW4gY2hhbmdlIHRoZSBwYWdlIGZvciB0aGUgdXNlci5cblx0XHRwcm9wcy5kaXNwYXRjaChyZW9yZGVySXRlbXMocHJvcHMuaXRlbSwgcHJldlNvcnRPcmRlciwgbmV3U29ydE9yZGVyLCBOdW1iZXIoZHJvcHBlZE9uLmdvVG9QYWdlKSkpO1xuXHR9LFxufTtcbi8qKlxuICogSW1wbGVtZW50cyBkcmFnIHRhcmdldC5cbiAqL1xuY29uc3QgZHJvcEl0ZW0gPSB7XG5cdGRyb3AgKHByb3BzLCBtb25pdG9yLCBjb21wb25lbnQpIHtcblx0XHRyZXR1cm4geyAuLi5wcm9wcyB9O1xuXHR9LFxuXHRob3ZlciAocHJvcHMsIG1vbml0b3IsIGNvbXBvbmVudCkge1xuXHRcdC8vIHJlc2V0IHJvdyBhbGVydHNcblx0XHRpZiAocHJvcHMucm93QWxlcnQuc3VjY2VzcyB8fCBwcm9wcy5yb3dBbGVydC5mYWlsKSB7XG5cdFx0XHRwcm9wcy5kaXNwYXRjaChzZXRSb3dBbGVydCh7XG5cdFx0XHRcdHJlc2V0OiB0cnVlLFxuXHRcdFx0fSkpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGRyYWdnZWQgPSBtb25pdG9yLmdldEl0ZW0oKS5pbmRleDtcblx0XHRjb25zdCBvdmVyID0gcHJvcHMuaW5kZXg7XG5cblx0XHQvLyBzZWxmXG5cdFx0aWYgKGRyYWdnZWQgPT09IG92ZXIpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRwcm9wcy5kaXNwYXRjaChtb3ZlSXRlbShkcmFnZ2VkLCBvdmVyLCBwcm9wcykpO1xuXHRcdG1vbml0b3IuZ2V0SXRlbSgpLmluZGV4ID0gb3Zlcjtcblx0fSxcbn07XG5cbi8qKlxuICogU3BlY2lmaWVzIHRoZSBwcm9wcyB0byBpbmplY3QgaW50byB5b3VyIGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gZHJhZ1Byb3BzIChjb25uZWN0LCBtb25pdG9yKSB7XG5cdHJldHVybiB7XG5cdFx0Y29ubmVjdERyYWdTb3VyY2U6IGNvbm5lY3QuZHJhZ1NvdXJjZSgpLFxuXHRcdGlzRHJhZ2dpbmc6IG1vbml0b3IuaXNEcmFnZ2luZygpLFxuXHRcdGNvbm5lY3REcmFnUHJldmlldzogY29ubmVjdC5kcmFnUHJldmlldygpLFxuXHR9O1xufVxuXG5mdW5jdGlvbiBkcm9wUHJvcHMgKGNvbm5lY3QpIHtcblx0cmV0dXJuIHtcblx0XHRjb25uZWN0RHJvcFRhcmdldDogY29ubmVjdC5kcm9wVGFyZ2V0KCksXG5cdH07XG59O1xuXG5leHBvcnRzLlNvcnRhYmxlID0gRHJhZ1NvdXJjZSgnaXRlbScsIGRyYWdJdGVtLCBkcmFnUHJvcHMpKERyb3BUYXJnZXQoJ2l0ZW0nLCBkcm9wSXRlbSwgZHJvcFByb3BzKShJdGVtc1JvdykpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcclxuXHJcbmltcG9ydCBQb3BvdXQgZnJvbSAnLi4vLi4vLi4vc2hhcmVkL1BvcG91dCc7XHJcbmltcG9ydCBQb3BvdXRMaXN0IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Qb3BvdXQvUG9wb3V0TGlzdCc7XHJcbmltcG9ydCB7IEZvcm1JbnB1dCB9IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XHJcbmltcG9ydCBMaXN0SGVhZGVyQnV0dG9uIGZyb20gJy4vTGlzdEhlYWRlckJ1dHRvbic7XHJcblxyXG5pbXBvcnQgeyBzZXRBY3RpdmVDb2x1bW5zIH0gZnJvbSAnLi4vYWN0aW9ucyc7XHJcblxyXG52YXIgTGlzdENvbHVtbnNGb3JtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnTGlzdENvbHVtbnNGb3JtJyxcclxuXHRnZXRJbml0aWFsU3RhdGUgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiB7fSxcclxuXHRcdFx0c2VhcmNoU3RyaW5nOiAnJyxcclxuXHRcdH07XHJcblx0fSxcclxuXHRnZXRTZWxlY3RlZENvbHVtbnNGcm9tU3RvcmUgKCkge1xyXG5cdFx0dmFyIHNlbGVjdGVkQ29sdW1ucyA9IHt9O1xyXG5cdFx0dGhpcy5wcm9wcy5hY3RpdmVDb2x1bW5zLmZvckVhY2goY29sID0+IHtcclxuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zW2NvbC5wYXRoXSA9IHRydWU7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiBzZWxlY3RlZENvbHVtbnM7XHJcblx0fSxcclxuXHR0b2dnbGVQb3BvdXQgKHZpc2libGUpIHtcclxuXHRcdHRoaXMuc2V0U3RhdGUoe1xyXG5cdFx0XHRzZWxlY3RlZENvbHVtbnM6IHRoaXMuZ2V0U2VsZWN0ZWRDb2x1bW5zRnJvbVN0b3JlKCksXHJcblx0XHRcdGlzT3BlbjogdmlzaWJsZSxcclxuXHRcdFx0c2VhcmNoU3RyaW5nOiAnJyxcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0dG9nZ2xlQ29sdW1uIChwYXRoLCB2YWx1ZSkge1xyXG5cdFx0Y29uc3QgbmV3Q29sdW1ucyA9IGFzc2lnbih7fSwgdGhpcy5zdGF0ZS5zZWxlY3RlZENvbHVtbnMpO1xyXG5cclxuXHRcdGlmICh2YWx1ZSkge1xyXG5cdFx0XHRuZXdDb2x1bW5zW3BhdGhdID0gdmFsdWU7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkZWxldGUgbmV3Q29sdW1uc1twYXRoXTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiBuZXdDb2x1bW5zLFxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRhcHBseUNvbHVtbnMgKCkge1xyXG5cdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChzZXRBY3RpdmVDb2x1bW5zKE9iamVjdC5rZXlzKHRoaXMuc3RhdGUuc2VsZWN0ZWRDb2x1bW5zKSkpO1xyXG5cdFx0dGhpcy50b2dnbGVQb3BvdXQoZmFsc2UpO1xyXG5cdH0sXHJcblx0dXBkYXRlU2VhcmNoIChlKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHsgc2VhcmNoU3RyaW5nOiBlLnRhcmdldC52YWx1ZSB9KTtcclxuXHR9LFxyXG5cdHJlbmRlckNvbHVtbnMgKCkge1xyXG5cdFx0Y29uc3QgYXZhaWxhYmxlQ29sdW1ucyA9IHRoaXMucHJvcHMuYXZhaWxhYmxlQ29sdW1ucztcclxuXHRcdGNvbnN0IHsgc2VhcmNoU3RyaW5nIH0gPSB0aGlzLnN0YXRlO1xyXG5cdFx0bGV0IGZpbHRlcmVkQ29sdW1ucyA9IGF2YWlsYWJsZUNvbHVtbnM7XHJcblxyXG5cdFx0aWYgKHNlYXJjaFN0cmluZykge1xyXG5cdFx0XHRmaWx0ZXJlZENvbHVtbnMgPSBmaWx0ZXJlZENvbHVtbnNcclxuXHRcdFx0XHQuZmlsdGVyKGNvbHVtbiA9PiBjb2x1bW4udHlwZSAhPT0gJ2hlYWRpbmcnKVxyXG5cdFx0XHRcdC5maWx0ZXIoY29sdW1uID0+IG5ldyBSZWdFeHAoc2VhcmNoU3RyaW5nKS50ZXN0KGNvbHVtbi5maWVsZC5sYWJlbC50b0xvd2VyQ2FzZSgpKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZpbHRlcmVkQ29sdW1ucy5tYXAoKGVsLCBpKSA9PiB7XHJcblx0XHRcdGlmIChlbC50eXBlID09PSAnaGVhZGluZycpIHtcclxuXHRcdFx0XHRyZXR1cm4gPFBvcG91dExpc3QuSGVhZGluZyBrZXk9eydoZWFkaW5nXycgKyBpfT57ZWwuY29udGVudH08L1BvcG91dExpc3QuSGVhZGluZz47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnN0IHBhdGggPSBlbC5maWVsZC5wYXRoO1xyXG5cdFx0XHRjb25zdCBzZWxlY3RlZCA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRDb2x1bW5zW3BhdGhdO1xyXG5cclxuXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHQ8UG9wb3V0TGlzdC5JdGVtXHJcblx0XHRcdFx0XHRrZXk9eydjb2x1bW5fJyArIGVsLmZpZWxkLnBhdGh9XHJcblx0XHRcdFx0XHRpY29uPXtzZWxlY3RlZCA/ICdjaGVjaycgOiAnZGFzaCd9XHJcblx0XHRcdFx0XHRpY29uSG92ZXI9e3NlbGVjdGVkID8gJ2Rhc2gnIDogJ2NoZWNrJ31cclxuXHRcdFx0XHRcdGlzU2VsZWN0ZWQ9eyEhc2VsZWN0ZWR9XHJcblx0XHRcdFx0XHRsYWJlbD17ZWwuZmllbGQubGFiZWx9XHJcblx0XHRcdFx0XHRvbkNsaWNrPXsoKSA9PiB7IHRoaXMudG9nZ2xlQ29sdW1uKHBhdGgsICFzZWxlY3RlZCk7IH19IC8+XHJcblx0XHRcdCk7XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRjb25zdCBmb3JtRmllbGRTdHlsZXMgPSB7XHJcblx0XHRcdGJvcmRlckJvdHRvbTogJzFweCBkYXNoZWQgcmdiYSgwLDAsMCwwLjEpJyxcclxuXHRcdFx0bWFyZ2luQm90dG9tOiAnMWVtJyxcclxuXHRcdFx0cGFkZGluZ0JvdHRvbTogJzFlbScsXHJcblx0XHR9O1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdj5cclxuXHRcdFx0XHQ8TGlzdEhlYWRlckJ1dHRvblxyXG5cdFx0XHRcdFx0YWN0aXZlPXt0aGlzLnN0YXRlLmlzT3Blbn1cclxuXHRcdFx0XHRcdGlkPVwibGlzdEhlYWRlckNvbHVtbkJ1dHRvblwiXHJcblx0XHRcdFx0XHRnbHlwaD1cImxpc3QtdW5vcmRlcmVkXCJcclxuXHRcdFx0XHRcdGxhYmVsPVwiQ29sdW1uc1wiXHJcblx0XHRcdFx0XHRvbkNsaWNrPXsoKSA9PiB0aGlzLnRvZ2dsZVBvcG91dCghdGhpcy5zdGF0ZS5pc09wZW4pfVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdFx0PFBvcG91dCBpc09wZW49e3RoaXMuc3RhdGUuaXNPcGVufSBvbkNhbmNlbD17KCkgPT4gdGhpcy50b2dnbGVQb3BvdXQoZmFsc2UpfSByZWxhdGl2ZVRvSUQ9XCJsaXN0SGVhZGVyQ29sdW1uQnV0dG9uXCI+XHJcblx0XHRcdFx0XHQ8UG9wb3V0LkhlYWRlciB0aXRsZT1cIkNvbHVtbnNcIiAvPlxyXG5cdFx0XHRcdFx0PFBvcG91dC5Cb2R5IHNjcm9sbGFibGU+XHJcblx0XHRcdFx0XHRcdDxkaXYgc3R5bGU9e2Zvcm1GaWVsZFN0eWxlc30+XHJcblx0XHRcdFx0XHRcdFx0PEZvcm1JbnB1dFxyXG5cdFx0XHRcdFx0XHRcdFx0YXV0b0ZvY3VzXHJcblx0XHRcdFx0XHRcdFx0XHRvbkNoYW5nZT17dGhpcy51cGRhdGVTZWFyY2h9XHJcblx0XHRcdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cIkZpbmQgYSBjb2x1bW4uLi5cIlxyXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU9e3RoaXMuc3RhdGUuc2VhcmNoU3RyaW5nfVxyXG5cdFx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHQ8UG9wb3V0TGlzdD5cclxuXHRcdFx0XHRcdFx0XHR7dGhpcy5yZW5kZXJDb2x1bW5zKCl9XHJcblx0XHRcdFx0XHRcdDwvUG9wb3V0TGlzdD5cclxuXHRcdFx0XHRcdDwvUG9wb3V0LkJvZHk+XHJcblx0XHRcdFx0XHQ8UG9wb3V0LkZvb3RlclxyXG5cdFx0XHRcdFx0XHRwcmltYXJ5QnV0dG9uQWN0aW9uPXt0aGlzLmFwcGx5Q29sdW1uc31cclxuXHRcdFx0XHRcdFx0cHJpbWFyeUJ1dHRvbkxhYmVsPVwiQXBwbHlcIlxyXG5cdFx0XHRcdFx0XHRzZWNvbmRhcnlCdXR0b25BY3Rpb249eygpID0+IHRoaXMudG9nZ2xlUG9wb3V0KGZhbHNlKX1cclxuXHRcdFx0XHRcdFx0c2Vjb25kYXJ5QnV0dG9uTGFiZWw9XCJDYW5jZWxcIiAvPlxyXG5cdFx0XHRcdDwvUG9wb3V0PlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDb2x1bW5zRm9ybTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcblxyXG52YXIgTGlzdENvbnRyb2wgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRkcmFnU291cmNlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHRcdG9uQ2xpY2s6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdFx0dHlwZTogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnY2hlY2snLCAnZGVsZXRlJywgJ3NvcnRhYmxlJ10pLmlzUmVxdWlyZWQsXHJcblx0fSxcclxuXHRyZW5kZXJDb250cm9sICgpIHtcclxuXHRcdHZhciBpY29uID0gJ29jdGljb24gb2N0aWNvbi0nO1xyXG5cdFx0dmFyIGNsYXNzTmFtZSA9IGNsYXNzbmFtZXMoJ0l0ZW1MaXN0X19jb250cm9sIEl0ZW1MaXN0X19jb250cm9sLS0nICsgdGhpcy5wcm9wcy50eXBlLCB7XHJcblx0XHRcdCdpcy1hY3RpdmUnOiB0aGlzLnByb3BzLmFjdGl2ZSxcclxuXHRcdH0pO1xyXG5cdFx0dmFyIHRhYmluZGV4ID0gdGhpcy5wcm9wcy50eXBlID09PSAnc29ydGFibGUnID8gLTEgOiBudWxsO1xyXG5cclxuXHRcdGlmICh0aGlzLnByb3BzLnR5cGUgPT09ICdjaGVjaycpIHtcclxuXHRcdFx0aWNvbiArPSAnY2hlY2snO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHRoaXMucHJvcHMudHlwZSA9PT0gJ2RlbGV0ZScpIHtcclxuXHRcdFx0aWNvbiArPSAndHJhc2hjYW4nO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHRoaXMucHJvcHMudHlwZSA9PT0gJ3NvcnRhYmxlJykge1xyXG5cdFx0XHRpY29uICs9ICd0aHJlZS1iYXJzJztcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgcmVuZGVyQnV0dG9uID0gKFxyXG5cdFx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xpY2t9IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSB0YWJJbmRleD17dGFiaW5kZXh9PlxyXG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17aWNvbn0gLz5cclxuXHRcdFx0PC9idXR0b24+XHJcblx0XHQpO1xyXG5cdFx0aWYgKHRoaXMucHJvcHMuZHJhZ1NvdXJjZSkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5wcm9wcy5kcmFnU291cmNlKHJlbmRlckJ1dHRvbik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gcmVuZGVyQnV0dG9uO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHZhciBjbGFzc05hbWUgPSAnSXRlbUxpc3RfX2NvbC0tY29udHJvbCBJdGVtTGlzdF9fY29sLS0nICsgdGhpcy5wcm9wcy50eXBlO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDx0ZCBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XHJcblx0XHRcdFx0e3RoaXMucmVuZGVyQ29udHJvbCgpfVxyXG5cdFx0XHQ8L3RkPlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTGlzdENvbnRyb2w7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xuaW1wb3J0IFBvcG91dCBmcm9tICcuLi8uLi8uLi9zaGFyZWQvUG9wb3V0JztcbmltcG9ydCBQb3BvdXRMaXN0IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Qb3BvdXQvUG9wb3V0TGlzdCc7XG5pbXBvcnQgTGlzdEhlYWRlckJ1dHRvbiBmcm9tICcuL0xpc3RIZWFkZXJCdXR0b24nO1xuaW1wb3J0IHsgTGFiZWxsZWRDb250cm9sLCBGb3JtLCBGb3JtRmllbGQsIFNlZ21lbnRlZENvbnRyb2wgfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50YWwnO1xuXG5pbXBvcnQgeyBkb3dubG9hZEl0ZW1zIH0gZnJvbSAnLi4vYWN0aW9ucyc7XG5jb25zdCBGT1JNQVRfT1BUSU9OUyA9IFtcblx0eyBsYWJlbDogJ0VYQ0VMJywgdmFsdWU6ICdjc3YnIH0sXG5cdHsgbGFiZWw6ICdKU09OJywgdmFsdWU6ICdqc29uJyB9LFxuXTtcblxudmFyIExpc3REb3dubG9hZEZvcm0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdHByb3BUeXBlczoge1xuXHRcdGFjdGl2ZUNvbHVtbnM6IFByb3BUeXBlcy5hcnJheSxcblx0XHRkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0XHRsaXN0OiBQcm9wVHlwZXMub2JqZWN0LFxuXHR9LFxuXHRnZXRJbml0aWFsU3RhdGUgKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRmb3JtYXQ6IEZPUk1BVF9PUFRJT05TWzBdLnZhbHVlLFxuXHRcdFx0aXNPcGVuOiBmYWxzZSxcblx0XHRcdHVzZUN1cnJlbnRDb2x1bW5zOiB0cnVlLFxuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiB0aGlzLmdldERlZmF1bHRTZWxlY3RlZENvbHVtbnMoKSxcblx0XHR9O1xuXHR9LFxuXHRnZXREZWZhdWx0U2VsZWN0ZWRDb2x1bW5zICgpIHtcblx0XHR2YXIgc2VsZWN0ZWRDb2x1bW5zID0ge307XG5cdFx0dGhpcy5wcm9wcy5hY3RpdmVDb2x1bW5zLmZvckVhY2goY29sID0+IHtcblx0XHRcdHNlbGVjdGVkQ29sdW1uc1tjb2wucGF0aF0gPSB0cnVlO1xuXHRcdH0pO1xuXHRcdHJldHVybiBzZWxlY3RlZENvbHVtbnM7XG5cdH0sXG5cdGdldExpc3RVSUVsZW1lbnRzICgpIHtcblx0XHRyZXR1cm4gdGhpcy5wcm9wcy5saXN0LnVpRWxlbWVudHMubWFwKChlbCkgPT4ge1xuXHRcdFx0cmV0dXJuIGVsLnR5cGUgPT09ICdmaWVsZCcgPyB7XG5cdFx0XHRcdHR5cGU6ICdmaWVsZCcsXG5cdFx0XHRcdGZpZWxkOiB0aGlzLnByb3BzLmxpc3QuZmllbGRzW2VsLmZpZWxkXSxcblx0XHRcdH0gOiBlbDtcblx0XHR9KTtcblx0fSxcblx0YWxsQ29sdW1uc1NlbGVjdGVkICgpIHtcblx0XHRjb25zdCBzZWxlY3RlZENvbHVtbnMgPSBPYmplY3Qua2V5cyh0aGlzLnN0YXRlLnNlbGVjdGVkQ29sdW1ucykubGVuZ3RoO1xuXHRcdGNvbnN0IGNvbHVtbkFtb3VudCA9IHRoaXMuZ2V0TGlzdFVJRWxlbWVudHMoKS5maWx0ZXIoKGVsKSA9PiBlbC50eXBlICE9PSAnaGVhZGluZycpLmxlbmd0aDtcblx0XHRyZXR1cm4gc2VsZWN0ZWRDb2x1bW5zID09PSBjb2x1bW5BbW91bnQ7XG5cdH0sXG5cdHRvZ2dsZVBvcG91dCAodmlzaWJsZSkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0aXNPcGVuOiB2aXNpYmxlLFxuXHRcdH0pO1xuXHR9LFxuXHR0b2dnbGVDb2x1bW4gKGNvbHVtbiwgdmFsdWUpIHtcblx0XHRjb25zdCBuZXdDb2x1bW5zID0gYXNzaWduKHt9LCB0aGlzLnN0YXRlLnNlbGVjdGVkQ29sdW1ucyk7XG5cdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRuZXdDb2x1bW5zW2NvbHVtbl0gPSB2YWx1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVsZXRlIG5ld0NvbHVtbnNbY29sdW1uXTtcblx0XHR9XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRzZWxlY3RlZENvbHVtbnM6IG5ld0NvbHVtbnMsXG5cdFx0fSk7XG5cdH0sXG5cdGNoYW5nZUZvcm1hdCAodmFsdWUpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGZvcm1hdDogdmFsdWUsXG5cdFx0fSk7XG5cdH0sXG5cdHRvZ2dsZUN1cnJlbnRseVNlbGVjdGVkQ29sdW1ucyAoZSkge1xuXHRcdGNvbnN0IG5ld1N0YXRlID0ge1xuXHRcdFx0dXNlQ3VycmVudENvbHVtbnM6IGUudGFyZ2V0LmNoZWNrZWQsXG5cdFx0XHRzZWxlY3RlZENvbHVtbnM6IHRoaXMuZ2V0RGVmYXVsdFNlbGVjdGVkQ29sdW1ucygpLFxuXHRcdH07XG5cdFx0dGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSk7XG5cdH0sXG5cdGNsaWNrU2VsZWN0QWxsICgpIHtcblx0XHRpZiAodGhpcy5hbGxDb2x1bW5zU2VsZWN0ZWQoKSkge1xuXHRcdFx0dGhpcy5zZWxlY3ROb0NvbHVtbnMoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zZWxlY3RBbGxDb2x1bW5zKCk7XG5cdFx0fVxuXHR9LFxuXHRzZWxlY3RBbGxDb2x1bW5zICgpIHtcblx0XHRjb25zdCBuZXdDb2x1bW5zID0ge307XG5cdFx0dGhpcy5nZXRMaXN0VUlFbGVtZW50cygpLm1hcCgoZWwpID0+IHtcblx0XHRcdGlmIChlbC50eXBlICE9PSAnaGVhZGluZycpIHtcblx0XHRcdFx0bmV3Q29sdW1uc1tlbC5maWVsZC5wYXRoXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRzZWxlY3RlZENvbHVtbnM6IG5ld0NvbHVtbnMsXG5cdFx0fSk7XG5cdH0sXG5cdHNlbGVjdE5vQ29sdW1ucyAoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRzZWxlY3RlZENvbHVtbnM6IHt9LFxuXHRcdH0pO1xuXHR9LFxuXHRoYW5kbGVEb3dubG9hZFJlcXVlc3QgKCkge1xuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goZG93bmxvYWRJdGVtcyh0aGlzLnN0YXRlLmZvcm1hdCwgT2JqZWN0LmtleXModGhpcy5zdGF0ZS5zZWxlY3RlZENvbHVtbnMpKSk7XG5cdFx0dGhpcy50b2dnbGVQb3BvdXQoZmFsc2UpO1xuXHR9LFxuXHRyZW5kZXJDb2x1bW5TZWxlY3QgKCkge1xuXHRcdGlmICh0aGlzLnN0YXRlLnVzZUN1cnJlbnRDb2x1bW5zKSByZXR1cm4gbnVsbDtcblxuXHRcdGNvbnN0IHBvc3NpYmxlQ29sdW1ucyA9IHRoaXMuZ2V0TGlzdFVJRWxlbWVudHMoKS5tYXAoKGVsLCBpKSA9PiB7XG5cdFx0XHRpZiAoZWwudHlwZSA9PT0gJ2hlYWRpbmcnKSB7XG5cdFx0XHRcdHJldHVybiA8UG9wb3V0TGlzdC5IZWFkaW5nIGtleT17J2hlYWRpbmdfJyArIGl9PntlbC5jb250ZW50fTwvUG9wb3V0TGlzdC5IZWFkaW5nPjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgY29sdW1uS2V5ID0gZWwuZmllbGQucGF0aDtcblx0XHRcdGNvbnN0IGNvbHVtblZhbHVlID0gdGhpcy5zdGF0ZS5zZWxlY3RlZENvbHVtbnNbY29sdW1uS2V5XTtcblxuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0PFBvcG91dExpc3QuSXRlbVxuXHRcdFx0XHRcdGtleT17J2l0ZW1fJyArIGVsLmZpZWxkLnBhdGh9XG5cdFx0XHRcdFx0aWNvbj17Y29sdW1uVmFsdWUgPyAnY2hlY2snIDogJ2Rhc2gnfVxuXHRcdFx0XHRcdGljb25Ib3Zlcj17Y29sdW1uVmFsdWUgPyAnZGFzaCcgOiAnY2hlY2snfVxuXHRcdFx0XHRcdGlzU2VsZWN0ZWQ9e2NvbHVtblZhbHVlfVxuXHRcdFx0XHRcdGxhYmVsPXtlbC5maWVsZC5sYWJlbH1cblx0XHRcdFx0XHRvbkNsaWNrPXsoKSA9PiB0aGlzLnRvZ2dsZUNvbHVtbihjb2x1bW5LZXksICFjb2x1bW5WYWx1ZSl9IC8+XG5cdFx0XHQpO1xuXHRcdH0pO1xuXG5cdFx0Y29uc3QgYWxsQ29sdW1uc1NlbGVjdGVkID0gdGhpcy5hbGxDb2x1bW5zU2VsZWN0ZWQoKTtcblx0XHRjb25zdCBjaGVja2JveExhYmVsID0gYWxsQ29sdW1uc1NlbGVjdGVkID8gJ1NlbGVjdCBOb25lJyA6ICdTZWxlY3QgQWxsJztcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2PlxuXHRcdFx0XHQ8Rm9ybUZpZWxkIG9mZnNldEFic2VudExhYmVsPlxuXHRcdFx0XHRcdDxMYWJlbGxlZENvbnRyb2xcblx0XHRcdFx0XHRcdGNoZWNrZWQ9e2FsbENvbHVtbnNTZWxlY3RlZH1cblx0XHRcdFx0XHRcdGxhYmVsPXtjaGVja2JveExhYmVsfVxuXHRcdFx0XHRcdFx0b25DaGFuZ2U9e3RoaXMuY2xpY2tTZWxlY3RBbGx9XG5cdFx0XHRcdFx0XHR0eXBlPVwiY2hlY2tib3hcIlxuXHRcdFx0XHRcdFx0dmFsdWVcblx0XHRcdFx0XHQvPlxuXHRcdFx0XHQ8L0Zvcm1GaWVsZD5cblx0XHRcdFx0PGRpdiBzdHlsZT17eyBib3JkZXJUb3A6ICcxcHggZGFzaGVkIHJnYmEoMCwwLDAsMC4xKScsIG1hcmdpblRvcDogJzFlbScsIHBhZGRpbmdUb3A6ICcxZW0nIH19PlxuXHRcdFx0XHRcdHtwb3NzaWJsZUNvbHVtbnN9XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRjb25zdCB7IHVzZUN1cnJlbnRDb2x1bW5zIH0gPSB0aGlzLnN0YXRlO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXY+XG5cdFx0XHRcdDxMaXN0SGVhZGVyQnV0dG9uXG5cdFx0XHRcdFx0YWN0aXZlPXt0aGlzLnN0YXRlLmlzT3Blbn1cblx0XHRcdFx0XHRpZD1cImxpc3RIZWFkZXJEb3dubG9hZEJ1dHRvblwiXG5cdFx0XHRcdFx0Z2x5cGg9XCJjbG91ZC1kb3dubG9hZFwiXG5cdFx0XHRcdFx0bGFiZWw9XCJEb3dubG9hZFwiXG5cdFx0XHRcdFx0b25DbGljaz17KCkgPT4gdGhpcy50b2dnbGVQb3BvdXQoIXRoaXMuc3RhdGUuaXNPcGVuKX1cblx0XHRcdFx0Lz5cblx0XHRcdFx0PFBvcG91dCBpc09wZW49e3RoaXMuc3RhdGUuaXNPcGVufSBvbkNhbmNlbD17KCkgPT4gdGhpcy50b2dnbGVQb3BvdXQoZmFsc2UpfSByZWxhdGl2ZVRvSUQ9XCJsaXN0SGVhZGVyRG93bmxvYWRCdXR0b25cIj5cblx0XHRcdFx0XHQ8UG9wb3V0LkhlYWRlciB0aXRsZT1cIkRvd25sb2FkXCIgLz5cblx0XHRcdFx0XHQ8UG9wb3V0LkJvZHkgc2Nyb2xsYWJsZT5cblx0XHRcdFx0XHRcdDxGb3JtIGxheW91dD1cImhvcml6b250YWxcIiBsYWJlbFdpZHRoPXsxMDB9IGNvbXBvbmVudD1cImRpdlwiPlxuXHRcdFx0XHRcdFx0XHQ8Rm9ybUZpZWxkIGxhYmVsPVwiRmlsZSBmb3JtYXQ6XCI+XG5cdFx0XHRcdFx0XHRcdFx0PFNlZ21lbnRlZENvbnRyb2xcblx0XHRcdFx0XHRcdFx0XHRcdGVxdWFsV2lkdGhTZWdtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0b25DaGFuZ2U9e3RoaXMuY2hhbmdlRm9ybWF0fVxuXHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucz17Rk9STUFUX09QVElPTlN9XG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZT17dGhpcy5zdGF0ZS5mb3JtYXR9XG5cdFx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdFx0PC9Gb3JtRmllbGQ+XG5cdFx0XHRcdFx0XHRcdDxGb3JtRmllbGQgbGFiZWw9XCJDb2x1bW5zOlwiIHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogMCB9fT5cblx0XHRcdFx0XHRcdFx0XHQ8TGFiZWxsZWRDb250cm9sXG5cdFx0XHRcdFx0XHRcdFx0XHRhdXRvRm9jdXNcblx0XHRcdFx0XHRcdFx0XHRcdGNoZWNrZWQ9e3VzZUN1cnJlbnRDb2x1bW5zfVxuXHRcdFx0XHRcdFx0XHRcdFx0bGFiZWw9XCJVc2UgY3VycmVudGx5IHNlbGVjdGVkXCJcblx0XHRcdFx0XHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLnRvZ2dsZUN1cnJlbnRseVNlbGVjdGVkQ29sdW1uc31cblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU9XCJjaGVja2JveFwiXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdDwvRm9ybUZpZWxkPlxuXHRcdFx0XHRcdFx0XHR7dGhpcy5yZW5kZXJDb2x1bW5TZWxlY3QoKX1cblx0XHRcdFx0XHRcdDwvRm9ybT5cblx0XHRcdFx0XHQ8L1BvcG91dC5Cb2R5PlxuXHRcdFx0XHRcdDxQb3BvdXQuRm9vdGVyXG5cdFx0XHRcdFx0XHRwcmltYXJ5QnV0dG9uQWN0aW9uPXt0aGlzLmhhbmRsZURvd25sb2FkUmVxdWVzdH1cblx0XHRcdFx0XHRcdHByaW1hcnlCdXR0b25MYWJlbD1cIkRvd25sb2FkXCJcblx0XHRcdFx0XHRcdHNlY29uZGFyeUJ1dHRvbkFjdGlvbj17KCkgPT4gdGhpcy50b2dnbGVQb3BvdXQoZmFsc2UpfVxuXHRcdFx0XHRcdFx0c2Vjb25kYXJ5QnV0dG9uTGFiZWw9XCJDYW5jZWxcIiAvPlxuXHRcdFx0XHQ8L1BvcG91dD5cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0RG93bmxvYWRGb3JtO1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRHJvcGRvd25CdXR0b24sIEdseXBoIH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcclxuXHJcbmZ1bmN0aW9uIExpc3RIZWFkZXJCdXR0b24gKHsgY2xhc3NOYW1lLCBsYWJlbCwgZ2x5cGgsIC4uLnByb3BzIH0pIHtcclxuXHRyZXR1cm4gKFxyXG5cdFx0PERyb3Bkb3duQnV0dG9uIGJsb2NrIHsuLi5wcm9wc30+XHJcblx0XHRcdDxHbHlwaCBuYW1lPXtnbHlwaH0gYXBocm9kaXRlU3R5bGVzPXtjbGFzc2VzLmdseXBofSAvPlxyXG5cdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmxhYmVsKX0+e2xhYmVsfTwvc3Bhbj5cclxuXHRcdDwvRHJvcGRvd25CdXR0b24+XHJcblx0KTtcclxufTtcclxuXHJcbkxpc3RIZWFkZXJCdXR0b24ucHJvcFR5cGVzID0ge1xyXG5cdGdseXBoOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbn07XHJcblxyXG4vLyBzaG93IGFuIGljb24gb24gc21hbGwgc2NyZWVucyB3aGVyZSByZWFsIGVzdGF0ZSBpcyBwcmVjaW91c1xyXG4vLyBvdGhlcndpc2UgcmVuZGVyIHRoZSBsYWJlbFxyXG5jb25zdCBjbGFzc2VzID0ge1xyXG5cdGdseXBoOiB7XHJcblx0XHQnZGlzcGxheSc6ICdub25lJyxcclxuXHJcblx0XHQnQG1lZGlhIChtYXgtd2lkdGg6IDUwMHB4KSc6IHtcclxuXHRcdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXHJcblx0XHR9LFxyXG5cdH0sXHJcblx0bGFiZWw6IHtcclxuXHRcdCdkaXNwbGF5JzogJ2lubGluZS1ibG9jaycsXHJcblxyXG5cdFx0J0BtZWRpYSAobWF4LXdpZHRoOiA1MDBweCknOiB7XHJcblx0XHRcdGRpc3BsYXk6ICdub25lJyxcclxuXHRcdH0sXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTGlzdEhlYWRlckJ1dHRvbjtcclxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uLy4uL3RoZW1lJztcclxuaW1wb3J0IHsgZGFya2VuIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvY29sb3InO1xyXG5cclxuaW1wb3J0IHsgRm9ybUlucHV0LCBHbHlwaCB9IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XHJcblxyXG5mdW5jdGlvbiBMaXN0SGVhZGVyU2VhcmNoICh7XHJcblx0Zm9jdXNJbnB1dCxcclxuXHRoYW5kbGVDaGFuZ2UsXHJcblx0aGFuZGxlQ2xlYXIsXHJcblx0aGFuZGxlS2V5dXAsXHJcblx0dmFsdWUsXHJcblx0Li4ucHJvcHNcclxufSkge1xyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2IHsuLi5wcm9wc30gY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy53cmFwcGVyKX0+XHJcblx0XHRcdDxGb3JtSW5wdXRcclxuXHRcdFx0XHRkYXRhLXNlYXJjaC1pbnB1dC1maWVsZFxyXG5cdFx0XHRcdG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcblx0XHRcdFx0b25LZXlVcD17aGFuZGxlS2V5dXB9XHJcblx0XHRcdFx0cGxhY2Vob2xkZXI9XCJTZWFyY2hcIlxyXG5cdFx0XHRcdHZhbHVlPXt2YWx1ZX1cclxuXHRcdFx0Lz5cclxuXHRcdFx0PGJ1dHRvblxyXG5cdFx0XHRcdGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuaWNvbiwgISF2YWx1ZS5sZW5ndGggJiYgY2xhc3Nlcy5pY29uV2hlbkNsZWFyKX1cclxuXHRcdFx0XHRkYXRhLXNlYXJjaC1pbnB1dC1maWVsZC1jbGVhci1pY29uXHJcblx0XHRcdFx0ZGlzYWJsZWQ9eyF2YWx1ZS5sZW5ndGh9XHJcblx0XHRcdFx0b25DbGljaz17dmFsdWUubGVuZ3RoICYmIGhhbmRsZUNsZWFyfVxyXG5cdFx0XHRcdHRpdGxlPVwiQ2xlYXIgc2VhcmNoIHF1ZXJ5XCJcclxuXHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcclxuXHRcdFx0PlxyXG5cdFx0XHRcdDxHbHlwaCBuYW1lPXt2YWx1ZS5sZW5ndGggPyAneCcgOiAnc2VhcmNoJ30gLz5cclxuXHRcdFx0PC9idXR0b24+XHJcblx0XHQ8L2Rpdj5cclxuXHQpO1xyXG59O1xyXG5cclxuTGlzdEhlYWRlclNlYXJjaC5wcm9wVHlwZXMgPSB7XHJcblx0Zm9jdXNJbnB1dDogUHJvcFR5cGVzLmJvb2wsXHJcblx0aGFuZGxlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdGhhbmRsZUNsZWFyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdGhhbmRsZUtleXVwOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG5cdHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59O1xyXG5cclxuY29uc3QgY2xlYXJIb3ZlckFuZEZvY3VzU3R5bGVzID0ge1xyXG5cdGNvbG9yOiB0aGVtZS5jb2xvci5kYW5nZXIsXHJcblx0b3V0bGluZTogMCxcclxuXHR0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxyXG59O1xyXG5cclxuY29uc3QgY2xhc3NlcyA9IHtcclxuXHR3cmFwcGVyOiB7XHJcblx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJyxcclxuXHR9LFxyXG5cdGljb246IHtcclxuXHRcdGJhY2tncm91bmQ6ICdub25lJyxcclxuXHRcdGJvcmRlcjogJ25vbmUnLFxyXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk0MCxcclxuXHRcdGhlaWdodDogJzEwMCUnLFxyXG5cdFx0cG9zaXRpb246ICdhYnNvbHV0ZScsXHJcblx0XHRyaWdodDogMCxcclxuXHRcdHRleHRBbGlnbjogJ2NlbnRlcicsXHJcblx0XHR0b3A6IDAsXHJcblx0XHR3aWR0aDogJzIuMmVtJyxcclxuXHRcdHpJbmRleDogMiwgLy8gYWJvdmUgdGhlIGZvcm0gZmllbGQgb24gZm9jdXNcclxuXHR9LFxyXG5cdGljb25XaGVuQ2xlYXI6IHtcclxuXHRcdCc6aG92ZXInOiBjbGVhckhvdmVyQW5kRm9jdXNTdHlsZXMsXHJcblx0XHQnOmZvY3VzJzogY2xlYXJIb3ZlckFuZEZvY3VzU3R5bGVzLFxyXG5cdFx0JzphY3RpdmUnOiB7XHJcblx0XHRcdGNvbG9yOiBkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCAxMCksXHJcblx0XHR9LFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RIZWFkZXJTZWFyY2g7XHJcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZSc7XHJcblxyXG5pbXBvcnQgTGlzdFNvcnQgZnJvbSAnLi9MaXN0U29ydCc7XHJcblxyXG5mdW5jdGlvbiBMaXN0SGVhZGVyVGl0bGUgKHtcclxuXHRhY3RpdmVTb3J0LFxyXG5cdGF2YWlsYWJsZUNvbHVtbnMsXHJcblx0aGFuZGxlU29ydFNlbGVjdCxcclxuXHR0aXRsZSxcclxuXHQuLi5wcm9wc1xyXG59KSB7XHJcblx0cmV0dXJuIChcclxuXHRcdDxoMiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmhlYWRpbmcpfSB7Li4ucHJvcHN9PlxyXG5cdFx0XHR7dGl0bGV9XHJcblx0XHRcdDxMaXN0U29ydFxyXG5cdFx0XHRcdGFjdGl2ZVNvcnQ9e2FjdGl2ZVNvcnR9XHJcblx0XHRcdFx0YXZhaWxhYmxlQ29sdW1ucz17YXZhaWxhYmxlQ29sdW1uc31cclxuXHRcdFx0XHRoYW5kbGVTb3J0U2VsZWN0PXtoYW5kbGVTb3J0U2VsZWN0fVxyXG5cdFx0XHQvPlxyXG5cdFx0PC9oMj5cclxuXHQpO1xyXG59O1xyXG5cclxuTGlzdEhlYWRlclRpdGxlLnByb3BUeXBlcyA9IHtcclxuXHRhY3RpdmVTb3J0OiBQcm9wVHlwZXMub2JqZWN0LFxyXG5cdGF2YWlsYWJsZUNvbHVtbnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLFxyXG5cdGhhbmRsZVNvcnRTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcblx0dGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn07XHJcblxyXG5jb25zdCBjbGFzc2VzID0ge1xyXG5cdGhlYWRpbmc6IHtcclxuXHRcdFtgQG1lZGlhIChtYXgtd2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC5tb2JpbGVNYXh9KWBdOiB7XHJcblx0XHRcdGZvbnRTaXplOiAnMS4yNWVtJyxcclxuXHRcdFx0Zm9udFdlaWdodDogNTAwLFxyXG5cdFx0fSxcclxuXHR9LFxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBMaXN0SGVhZGVyVGl0bGU7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuXHRHbHlwaEJ1dHRvbixcblx0SW5saW5lR3JvdXAgYXMgR3JvdXAsXG5cdElubGluZUdyb3VwU2VjdGlvbiBhcyBTZWN0aW9uLFxuXHRSZXNwb25zaXZlVGV4dCxcbn0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZSc7XG5pbXBvcnQgUG9wb3V0IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Qb3BvdXQnO1xuaW1wb3J0IFBvcG91dExpc3QgZnJvbSAnLi4vLi4vLi4vc2hhcmVkL1BvcG91dC9Qb3BvdXRMaXN0JztcbmltcG9ydCBMaXN0Q29sdW1uc0Zvcm0gZnJvbSAnLi9MaXN0Q29sdW1uc0Zvcm0nO1xuaW1wb3J0IExpc3REb3dubG9hZEZvcm0gZnJvbSAnLi9MaXN0RG93bmxvYWRGb3JtJztcbmltcG9ydCBMaXN0SGVhZGVyU2VhcmNoIGZyb20gJy4vTGlzdEhlYWRlclNlYXJjaCc7XG5cbmltcG9ydCBMaXN0RmlsdGVyc0FkZCBmcm9tICcuL0ZpbHRlcmluZy9MaXN0RmlsdGVyc0FkZCc7XG5cbmZ1bmN0aW9uIEJ1dHRvbkRpdmlkZXIoeyBzdHlsZSwgLi4ucHJvcHMgfSkge1xuXHRwcm9wcy5zdHlsZSA9IHtcblx0XHRib3JkZXJMZWZ0OiAnMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKScsXG5cdFx0cGFkZGluZ0xlZnQ6ICcwLjc1ZW0nLFxuXHRcdC4uLnN0eWxlLFxuXHR9O1xuXG5cdHJldHVybiA8ZGl2IHsuLi5wcm9wc30gLz47XG59O1xuXG5mdW5jdGlvbiBDcmVhdGVCdXR0b24oeyBsaXN0TmFtZSwgb25DbGljaywgLi4ucHJvcHMgfSkge1xuXHRyZXR1cm4gKFxuXHRcdDxHbHlwaEJ1dHRvblxuXHRcdFx0YmxvY2tcblx0XHRcdGNvbG9yPVwic3VjY2Vzc1wiXG5cdFx0XHRkYXRhLWUyZS1saXN0LWNyZWF0ZS1idXR0b249XCJoZWFkZXJcIlxuXHRcdFx0Z2x5cGg9XCJwbHVzXCJcblx0XHRcdG9uQ2xpY2s9e29uQ2xpY2t9XG5cdFx0XHRwb3NpdGlvbj1cImxlZnRcIlxuXHRcdFx0dGl0bGU9e2BDcmVhdGUgJHtsaXN0TmFtZX1gfVxuXHRcdFx0ey4uLnByb3BzfVxuXHRcdD5cblx0XHRcdDxSZXNwb25zaXZlVGV4dFxuXHRcdFx0XHR2aXNpYmxlU009XCJDcmVhdGVcIlxuXHRcdFx0XHR2aXNpYmxlTUQ9XCJDcmVhdGVcIlxuXHRcdFx0XHR2aXNpYmxlTEc9e2BDcmVhdGUgJHtsaXN0TmFtZX1gfVxuXHRcdFx0Lz5cblx0XHQ8L0dseXBoQnV0dG9uPlxuXHQpO1xufTtcblxuXG52YXIgTGlzdEhlYWRlclRvb2xiYXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnTGlzdEhlYWRlclRvb2xiYXInLFxuXHRwcm9wVHlwZXM6IHtcblx0XHRjb2x1bW5zQWN0aXZlOiBQcm9wVHlwZXMuYXJyYXksXG5cdFx0Y29sdW1uc0F2YWlsYWJsZTogUHJvcFR5cGVzLmFycmF5LFxuXHRcdGNyZWF0ZUlzQXZhaWxhYmxlOiBQcm9wVHlwZXMuYm9vbCxcblx0XHRjcmVhdGVMaXN0TmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblx0XHRjcmVhdGVPbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRcdGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRcdGV4cGFuZElzQWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblx0XHRleHBhbmRPbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRcdGZpbHRlcnNBY3RpdmU6IFByb3BUeXBlcy5hcnJheSxcblx0XHRmaWx0ZXJzQXZhaWxhYmxlOiBQcm9wVHlwZXMuYXJyYXksXG5cdFx0bGlzdDogUHJvcFR5cGVzLm9iamVjdCxcblx0XHRzZWFyY2hIYW5kbGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdFx0c2VhcmNoSGFuZGxlQ2xlYXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdFx0c2VhcmNoSGFuZGxlS2V5dXA6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdFx0Y3VzdG9tQ3JlYXRlQnV0dG9uOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRcdHNlYXJjaFZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHR9LFxuXHRnZXRJbml0aWFsU3RhdGUoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHBvcG91dElzT3BlbjogZmFsc2UsXG5cdFx0fTtcblx0fSxcblx0Y2xvc2VQb3BvdXQoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRwb3BvdXRJc09wZW46IGZhbHNlLFxuXHRcdH0pO1xuXHR9LFxuXHRoYW5kbGVDcmVhdGVCdXR0b25PcHRpb25zKGFjdGlvbl90eXBlKSB7XG5cdFx0dGhpcy5wcm9wcy5jdXN0b21DcmVhdGVCdXR0b24oYWN0aW9uX3R5cGUpO1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0cG9wb3V0SXNPcGVuOiBmYWxzZSxcblx0XHR9KTtcblx0fSxcblx0cmVuZGVyKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8c3Bhbj5cblx0XHRcdFx0PEdyb3VwIGJsb2NrIGFwaHJvZGl0ZVN0eWxlcz17Y2xhc3Nlcy53cmFwcGVyfT5cblx0XHRcdFx0XHQ8U2VjdGlvbiBncm93IGFwaHJvZGl0ZVN0eWxlcz17Y2xhc3Nlcy5zZWFyY2h9PlxuXHRcdFx0XHRcdFx0PExpc3RIZWFkZXJTZWFyY2hcblx0XHRcdFx0XHRcdFx0aGFuZGxlQ2hhbmdlPXt0aGlzLnByb3BzLnNlYXJjaEhhbmRsZUNoYW5nZX1cblx0XHRcdFx0XHRcdFx0aGFuZGxlQ2xlYXI9e3RoaXMucHJvcHMuc2VhcmNoSGFuZGxlQ2xlYXJ9XG5cdFx0XHRcdFx0XHRcdGhhbmRsZUtleXVwPXt0aGlzLnByb3BzLnNlYXJjaEhhbmRsZUtleXVwfVxuXHRcdFx0XHRcdFx0XHR2YWx1ZT17dGhpcy5wcm9wcy5zZWFyY2hWYWx1ZX1cblx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0PC9TZWN0aW9uPlxuXHRcdFx0XHRcdDxTZWN0aW9uIGdyb3cgYXBocm9kaXRlU3R5bGVzPXtjbGFzc2VzLmJ1dHRvbnN9PlxuXHRcdFx0XHRcdFx0PEdyb3VwIGJsb2NrPlxuXHRcdFx0XHRcdFx0XHQ8U2VjdGlvbiBhcGhyb2RpdGVTdHlsZXM9e2NsYXNzZXMuZmlsdGVyfT5cblx0XHRcdFx0XHRcdFx0XHQ8TGlzdEZpbHRlcnNBZGRcblx0XHRcdFx0XHRcdFx0XHRcdGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuXHRcdFx0XHRcdFx0XHRcdFx0YWN0aXZlRmlsdGVycz17dGhpcy5wcm9wcy5maWx0ZXJzQWN0aXZlfVxuXHRcdFx0XHRcdFx0XHRcdFx0YXZhaWxhYmxlRmlsdGVycz17dGhpcy5wcm9wcy5maWx0ZXJzQXZhaWxhYmxlfVxuXHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdDwvU2VjdGlvbj5cblx0XHRcdFx0XHRcdFx0PFNlY3Rpb24gYXBocm9kaXRlU3R5bGVzPXtjbGFzc2VzLmNvbHVtbnN9PlxuXHRcdFx0XHRcdFx0XHRcdDxMaXN0Q29sdW1uc0Zvcm1cblx0XHRcdFx0XHRcdFx0XHRcdGF2YWlsYWJsZUNvbHVtbnM9e3RoaXMucHJvcHMuY29sdW1uc0F2YWlsYWJsZX1cblx0XHRcdFx0XHRcdFx0XHRcdGFjdGl2ZUNvbHVtbnM9e3RoaXMucHJvcHMuY29sdW1uc0FjdGl2ZX1cblx0XHRcdFx0XHRcdFx0XHRcdGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuXHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdDwvU2VjdGlvbj5cblx0XHRcdFx0XHRcdFx0PFNlY3Rpb24gYXBocm9kaXRlU3R5bGVzPXtjbGFzc2VzLmRvd25sb2FkfT5cblx0XHRcdFx0XHRcdFx0XHQ8TGlzdERvd25sb2FkRm9ybVxuXHRcdFx0XHRcdFx0XHRcdFx0YWN0aXZlQ29sdW1ucz17dGhpcy5wcm9wcy5jb2x1bW5zQWN0aXZlfVxuXHRcdFx0XHRcdFx0XHRcdFx0ZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0PXt0aGlzLnByb3BzLmxpc3R9XG5cdFx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdFx0PC9TZWN0aW9uPlxuXHRcdFx0XHRcdFx0XHQ8U2VjdGlvbiBhcGhyb2RpdGVTdHlsZXM9e2NsYXNzZXMuZXhwYW5kfT5cblx0XHRcdFx0XHRcdFx0XHQ8QnV0dG9uRGl2aWRlcj5cblx0XHRcdFx0XHRcdFx0XHRcdDxHbHlwaEJ1dHRvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRhY3RpdmU9e3RoaXMucHJvcHMuZXhwYW5kSXNBY3RpdmV9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGdseXBoPVwibWlycm9yXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0b25DbGljaz17dGhpcy5wcm9wcy5leHBhbmRPbkNsaWNrfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aXRsZT1cIkV4cGFuZCB0YWJsZSB3aWR0aFwiXG5cdFx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHRcdDwvQnV0dG9uRGl2aWRlcj5cblx0XHRcdFx0XHRcdFx0PC9TZWN0aW9uPlxuXHRcdFx0XHRcdFx0XHR7dGhpcy5wcm9wcy5jcmVhdGVJc0F2YWlsYWJsZSAmJiA8c3BhbiBpZD1cImxpc3RDcmVhdGVIZWFkZXJCdXR0b25cIj5cblx0XHRcdFx0XHRcdFx0XHQ8U2VjdGlvbiBhcGhyb2RpdGVTdHlsZXM9e2NsYXNzZXMuY3JlYXRlfT5cblx0XHRcdFx0XHRcdFx0XHRcdDxCdXR0b25EaXZpZGVyPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8Q3JlYXRlQnV0dG9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bGlzdE5hbWU9e3RoaXMucHJvcHMuY3JlYXRlTGlzdE5hbWV9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b25DbGljaz17dGhpcy5wcm9wcy5saXN0LmN1c3RvbUNyZWF0ZUJ1dHRvbiA/ICgpID0+IHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cG9wb3V0SXNPcGVuOiB0cnVlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0pIDogdGhpcy5wcm9wcy5jcmVhdGVPbkNsaWNrfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHRcdFx0PC9CdXR0b25EaXZpZGVyPlxuXHRcdFx0XHRcdFx0XHRcdDwvU2VjdGlvbj5cblx0XHRcdFx0XHRcdFx0PC9zcGFuPn1cblx0XHRcdFx0XHRcdDwvR3JvdXA+XG5cdFx0XHRcdFx0PC9TZWN0aW9uPlxuXHRcdFx0XHQ8L0dyb3VwPlxuXHRcdFx0XHQ8UG9wb3V0IGlzT3Blbj17dGhpcy5zdGF0ZS5wb3BvdXRJc09wZW59IG9uQ2FuY2VsPXt0aGlzLmNsb3NlUG9wb3V0fSByZWxhdGl2ZVRvSUQ9XCJsaXN0Q3JlYXRlSGVhZGVyQnV0dG9uXCI+XG5cdFx0XHRcdFx0PFBvcG91dC5IZWFkZXJcblx0XHRcdFx0XHRcdHRpdGxlPXtgU2VsZWN0ICR7dGhpcy5wcm9wcy5jcmVhdGVMaXN0TmFtZX0gVHlwZWB9XG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHQ8UG9wb3V0LkJvZHk+XG5cdFx0XHRcdFx0XHR7dGhpcy5wcm9wcy5saXN0LmN1c3RvbUJ1dHRvbk9wdGlvbnMgJiYgdGhpcy5wcm9wcy5saXN0LmN1c3RvbUJ1dHRvbk9wdGlvbnMubWFwKGl0ZW0gPT4gKFxuXHRcdFx0XHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXG5cdFx0XHRcdFx0XHRcdFx0dGl0bGU9e2l0ZW0ubGFiZWx9XG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lPVwiUG9wb3V0TGlzdF9faXRlbVwiXG5cdFx0XHRcdFx0XHRcdFx0a2V5PXtpdGVtLmtleX1cblx0XHRcdFx0XHRcdFx0XHRvbkNsaWNrPXsoKSA9PiB0aGlzLmhhbmRsZUNyZWF0ZUJ1dHRvbk9wdGlvbnMoaXRlbS5rZXkpfVxuXHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwiUG9wb3V0TGlzdF9faXRlbV9faWNvbiBvY3RpY29uIG9jdGljb24tY2hldnJvbi1yaWdodFwiPjwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJQb3BvdXRMaXN0X19pdGVtX19sYWJlbFwiPntpdGVtLmxhYmVsfTwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdFx0XHQpKX1cblx0XHRcdFx0XHQ8L1BvcG91dC5Cb2R5PlxuXHRcdFx0XHQ8L1BvcG91dD5cblx0XHRcdDwvc3BhbiA+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5cbmNvbnN0IHRhYmxldEdyb3dTdHlsZXMgPSB7XG5cdFtgQG1lZGlhIChtYXgtd2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC50YWJsZXRQb3J0cmFpdE1heH0pYF06IHtcblx0XHRmbGV4R3JvdzogMSxcblx0fSxcbn07XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG5cdC8vIG1haW4gd3JhcHBlclxuXHR3cmFwcGVyOiB7XG5cdFx0W2BAbWVkaWEgKG1heC13aWR0aDogJHt0aGVtZS5icmVha3BvaW50LnRhYmxldFBvcnRyYWl0TWF4fSlgXToge1xuXHRcdFx0ZmxleFdyYXA6ICd3cmFwJyxcblx0XHR9LFxuXHR9LFxuXG5cdC8vIGJ1dHRvbiB3cmFwcGVyXG5cdGJ1dHRvbnM6IHtcblx0XHRbYEBtZWRpYSAobWF4LXdpZHRoOiAke3RoZW1lLmJyZWFrcG9pbnQudGFibGV0UG9ydHJhaXRNYXh9KWBdOiB7XG5cdFx0XHRwYWRkaW5nTGVmdDogMCxcblx0XHR9LFxuXHR9LFxuXG5cdC8vIGNvbHNcblx0ZXhwYW5kOiB7XG5cdFx0W2BAbWVkaWEgKG1heC13aWR0aDogJHt0aGVtZS5icmVha3BvaW50LmRlc2t0b3BNYXh9KWBdOiB7XG5cdFx0XHRkaXNwbGF5OiAnbm9uZScsXG5cdFx0fSxcblx0fSxcblx0ZmlsdGVyOiB7XG5cdFx0W2BAbWVkaWEgKG1heC13aWR0aDogJHt0aGVtZS5icmVha3BvaW50LnRhYmxldFBvcnRyYWl0TWF4fSlgXToge1xuXHRcdFx0cGFkZGluZ0xlZnQ6IDAsXG5cdFx0XHRmbGV4R3JvdzogMSxcblx0XHR9LFxuXHR9LFxuXHRjb2x1bW5zOiB0YWJsZXRHcm93U3R5bGVzLFxuXHRjcmVhdGU6IHRhYmxldEdyb3dTdHlsZXMsXG5cdGRvd25sb2FkOiB0YWJsZXRHcm93U3R5bGVzLFxuXHRzZWFyY2g6IHtcblx0XHRbYEBtZWRpYSAobWF4LXdpZHRoOiAke3RoZW1lLmJyZWFrcG9pbnQudGFibGV0UG9ydHJhaXRNYXh9KWBdOiB7XG5cdFx0XHRtYXJnaW5Cb3R0b206ICcwLjc1ZW0nLFxuXHRcdFx0bWluV2lkdGg6ICcxMDAlJyxcblx0XHR9LFxuXHR9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0SGVhZGVyVG9vbGJhcjtcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuXHRCdXR0b24sXG5cdEdseXBoQnV0dG9uLFxuXHRJbmxpbmVHcm91cCBhcyBHcm91cCxcblx0SW5saW5lR3JvdXBTZWN0aW9uIGFzIFNlY3Rpb24sXG5cdFNwaW5uZXIsXG59IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5mdW5jdGlvbiBMaXN0TWFuYWdlbWVudCh7XG5cdGNoZWNrZWRJdGVtQ291bnQsXG5cdGhhbmRsZURlbGV0ZSxcblx0aGFuZGxlU2VsZWN0LFxuXHRoYW5kbGVUb2dnbGUsXG5cdGlzT3Blbixcblx0aXRlbUNvdW50LFxuXHRpdGVtc1BlclBhZ2UsXG5cdG5vZGVsZXRlLFxuXHRub2VkaXQsXG5cdHNlbGVjdEFsbEl0ZW1zTG9hZGluZyxcblx0Y3VycmVudExpc3QsXG5cdGhhbmRsZUN1c3RvbUFjdGlvbixcblx0Li4ucHJvcHNcbn0pIHtcblx0Ly8gZG8gbm90IHJlbmRlciBpZiB0aGVyZSdzIG5vIHJlc3VsdHNcblx0Ly8gb3IgaWYgZWRpdC9kZWxldGUgdW5hdmFpbGFibGUgb24gdGhlIGxpc3Rcblx0aWYgKCFpdGVtQ291bnQgfHwgKG5vZGVsZXRlICYmIG5vZWRpdCkpIHJldHVybiBudWxsO1xuXG5cdGNvbnN0IGJ1dHRvbk5vdGVTdHlsZXMgPSB7IGNvbG9yOiAnIzk5OScsIGZvbnRXZWlnaHQ6ICdub3JtYWwnIH07XG5cdGNvbnN0IGN1c3RvbUFjdGlvbkJ1dHRvbnMgPSBbXTtcblx0aWYgKGlzT3BlbiAmJiBjdXJyZW50TGlzdCAmJiBjdXJyZW50TGlzdC5jdXN0b21BY3Rpb24pIHtcblx0XHQvLyBTSE9XIERST1BET1dOIE9QVElPTiBGT1IgQ1VTVE9NIEFDVElPTlMgSUYgIGN1c3RvbUFjdGlvblR5cGUgPT09ICdkcm9wZG93bidcblx0XHRpZiAoY3VycmVudExpc3QuY3VzdG9tQWN0aW9uVHlwZSA9PT0gJ2Ryb3Bkb3duJykge1xuXHRcdFx0Y29uc3Qgb3B0aW9ucyA9IFtdO1xuXG5cdFx0XHRvcHRpb25zLnB1c2goPG9wdGlvbiA+U2VsZWN0IEFjdGlvbjwvb3B0aW9uPik7XG5cdFx0XHRmb3IgKGNvbnN0IGN1c3RvbUFjdGlvbiBvZiBjdXJyZW50TGlzdC5jdXN0b21BY3Rpb24pIHtcblx0XHRcdFx0b3B0aW9ucy5wdXNoKDxvcHRpb24gdmFsdWU9e2N1c3RvbUFjdGlvbi5rZXl9PntjdXN0b21BY3Rpb24ubGFiZWx9IDwvb3B0aW9uPik7XG5cdFx0XHR9XG5cblx0XHRcdGN1c3RvbUFjdGlvbkJ1dHRvbnMucHVzaChcblx0XHRcdFx0PFNlY3Rpb24+XG5cdFx0XHRcdFx0PHNlbGVjdFxuXHRcdFx0XHRcdFx0c3R5bGU9e3sgd2lkdGg6IDIwMCwgaGVpZ2h0OiAzMywgYm9yZGVyV2lkdGg6IDEsIGJvcmRlclJhZGl1czogJzAuM3JlbScgfX1cblx0XHRcdFx0XHRcdC8vIGRpc2FibGVkPXshY2hlY2tlZEl0ZW1Db3VudH1cblx0XHRcdFx0XHRcdG9uQ2hhbmdlPXsoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdFx0Y29uc3Qgc2VsZWN0ZWRBY3Rpb24gPSBfLmZpbmQoY3VycmVudExpc3QuY3VzdG9tQWN0aW9uLCB7IGtleTogZXZlbnQudGFyZ2V0LnZhbHVlIH0pO1xuXHRcdFx0XHRcdFx0XHRpZiAoc2VsZWN0ZWRBY3Rpb24pIHtcblx0XHRcdFx0XHRcdFx0XHRoYW5kbGVDdXN0b21BY3Rpb24oc2VsZWN0ZWRBY3Rpb24pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdHtvcHRpb25zfVxuXHRcdFx0XHRcdDwvc2VsZWN0PlxuXHRcdFx0XHQ8L1NlY3Rpb24+XG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGNvbnN0IGN1c3RvbUFjdGlvbiBvZiBjdXJyZW50TGlzdC5jdXN0b21BY3Rpb24pIHtcblx0XHRcdFx0Y3VzdG9tQWN0aW9uQnV0dG9ucy5wdXNoKDxTZWN0aW9uPlxuXHRcdFx0XHRcdDxHbHlwaEJ1dHRvblxuXHRcdFx0XHRcdFx0Y29sb3I9XCJpbmZvXCJcblx0XHRcdFx0XHRcdGRpc2FibGVkPXshY2hlY2tlZEl0ZW1Db3VudH1cblx0XHRcdFx0XHRcdGdseXBoPVwiZG93bmxvYWRcIlxuXHRcdFx0XHRcdFx0b25DbGljaz17KCkgPT4gaGFuZGxlQ3VzdG9tQWN0aW9uKGN1c3RvbUFjdGlvbil9XG5cdFx0XHRcdFx0XHRwb3NpdGlvbj1cImxlZnRcIlxuXHRcdFx0XHRcdFx0dmFyaWFudD1cImxpbmtcIj5cblx0XHRcdFx0XHRcdHtjdXN0b21BY3Rpb24ubGFiZWx9XG5cdFx0XHRcdFx0PC9HbHlwaEJ1dHRvbj5cblx0XHRcdFx0PC9TZWN0aW9uPik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gZGVsZXRlIGJ1dHRvblxuXHRjb25zdCBhY3Rpb25CdXR0b25zID0gaXNPcGVuICYmIChcblx0XHQ8U2VjdGlvbj5cblx0XHRcdDxHbHlwaEJ1dHRvblxuXHRcdFx0XHRjb2xvcj1cImNhbmNlbFwiXG5cdFx0XHRcdGRpc2FibGVkPXshY2hlY2tlZEl0ZW1Db3VudH1cblx0XHRcdFx0Z2x5cGg9XCJ0cmFzaGNhblwiXG5cdFx0XHRcdG9uQ2xpY2s9e2hhbmRsZURlbGV0ZX1cblx0XHRcdFx0cG9zaXRpb249XCJsZWZ0XCJcblx0XHRcdFx0dmFyaWFudD1cImxpbmtcIj5cblx0XHRcdFx0RGVsZXRlXG5cdFx0XHQ8L0dseXBoQnV0dG9uPlxuXHRcdDwvU2VjdGlvbj5cblx0KTtcblxuXHQvLyBzZWxlY3QgYnV0dG9uc1xuXHRjb25zdCBhbGxWaXNpYmxlQnV0dG9uSXNBY3RpdmUgPSBjaGVja2VkSXRlbUNvdW50ID09PSBpdGVtQ291bnQ7XG5cdGNvbnN0IHBhZ2VWaXNpYmxlQnV0dG9uSXNBY3RpdmUgPSBjaGVja2VkSXRlbUNvdW50ID09PSBpdGVtc1BlclBhZ2U7XG5cdGNvbnN0IG5vbmVCdXR0b25Jc0FjdGl2ZSA9ICFjaGVja2VkSXRlbUNvdW50O1xuXHRjb25zdCBzZWxlY3RBbGxCdXR0b24gPSBpdGVtQ291bnQgPiBpdGVtc1BlclBhZ2UgJiYgKFxuXHRcdDxTZWN0aW9uPlxuXHRcdFx0PEJ1dHRvblxuXHRcdFx0XHRhY3RpdmU9e2FsbFZpc2libGVCdXR0b25Jc0FjdGl2ZX1cblx0XHRcdFx0b25DbGljaz17KCkgPT4gaGFuZGxlU2VsZWN0KCdhbGwnKX1cblx0XHRcdFx0dGl0bGU9XCJTZWxlY3QgYWxsIHJvd3MgKGluY2x1ZGluZyB0aG9zZSBub3QgdmlzaWJsZSlcIj5cblx0XHRcdFx0e3NlbGVjdEFsbEl0ZW1zTG9hZGluZyA/IDxTcGlubmVyIC8+IDogJ0FsbCd9IDxzbWFsbCBzdHlsZT17YnV0dG9uTm90ZVN0eWxlc30+KHtpdGVtQ291bnR9KTwvc21hbGw+XG5cdFx0XHQ8L0J1dHRvbj5cblx0XHQ8L1NlY3Rpb24+XG5cdCk7XG5cblx0Y29uc3Qgc2VsZWN0QnV0dG9ucyA9IGlzT3BlbiA/IChcblx0XHQ8U2VjdGlvbj5cblx0XHRcdDxHcm91cCBjb250aWd1b3VzPlxuXHRcdFx0XHR7c2VsZWN0QWxsQnV0dG9ufVxuXHRcdFx0XHQ8U2VjdGlvbj5cblx0XHRcdFx0XHQ8QnV0dG9uIGFjdGl2ZT17cGFnZVZpc2libGVCdXR0b25Jc0FjdGl2ZX0gb25DbGljaz17KCkgPT4gaGFuZGxlU2VsZWN0KCd2aXNpYmxlJyl9IHRpdGxlPVwiU2VsZWN0IGFsbCByb3dzXCI+XG5cdFx0XHRcdFx0XHR7aXRlbUNvdW50ID4gaXRlbXNQZXJQYWdlID8gJ1BhZ2UgJyA6ICdBbGwgJ31cblx0XHRcdFx0XHRcdDxzbWFsbCBzdHlsZT17YnV0dG9uTm90ZVN0eWxlc30+KHtpdGVtQ291bnQgPiBpdGVtc1BlclBhZ2UgPyBpdGVtc1BlclBhZ2UgOiBpdGVtQ291bnR9KTwvc21hbGw+XG5cdFx0XHRcdFx0PC9CdXR0b24+XG5cdFx0XHRcdDwvU2VjdGlvbj5cblx0XHRcdFx0PFNlY3Rpb24+XG5cdFx0XHRcdFx0PEJ1dHRvbiBhY3RpdmU9e25vbmVCdXR0b25Jc0FjdGl2ZX0gb25DbGljaz17KCkgPT4gaGFuZGxlU2VsZWN0KCdub25lJyl9IHRpdGxlPVwiRGVzZWxlY3QgYWxsIHJvd3NcIj5Ob25lPC9CdXR0b24+XG5cdFx0XHRcdDwvU2VjdGlvbj5cblx0XHRcdDwvR3JvdXA+XG5cdFx0PC9TZWN0aW9uPlxuXHQpIDogbnVsbDtcblxuXHQvLyBzZWxlY3RlZCBjb3VudCB0ZXh0XG5cdGNvbnN0IHNlbGVjdGVkQ291bnRUZXh0ID0gaXNPcGVuID8gKFxuXHRcdDxTZWN0aW9uPlxuXHRcdFx0PHNwYW4gc3R5bGU9e3sgY29sb3I6ICcjNjY2JywgZGlzcGxheTogJ2lubGluZS1ibG9jaycsIGxpbmVIZWlnaHQ6ICcyLjRlbScsIG1hcmdpbjogMSB9fT5cblx0XHRcdFx0e2NoZWNrZWRJdGVtQ291bnR9IHNlbGVjdGVkXG5cdFx0XHQ8L3NwYW4+XG5cdFx0PC9TZWN0aW9uPlxuXHQpIDogbnVsbDtcblxuXHQvLyBwdXQgaXQgYWxsIHRvZ2V0aGVyXG5cdHJldHVybiAoXG5cdFx0PGRpdj5cblx0XHRcdDxHcm91cCBzdHlsZT17eyBmbG9hdDogJ2xlZnQnLCBtYXJnaW5SaWdodDogJy43NWVtJywgbWFyZ2luQm90dG9tOiAwIH19PlxuXHRcdFx0XHQ8U2VjdGlvbj5cblx0XHRcdFx0XHQ8QnV0dG9uIGFjdGl2ZT17aXNPcGVufSBvbkNsaWNrPXsoKSA9PiBoYW5kbGVUb2dnbGUoIWlzT3Blbil9PlxuXHRcdFx0XHRcdFx0TWFuYWdlXG5cdFx0XHRcdFx0PC9CdXR0b24+XG5cdFx0XHRcdDwvU2VjdGlvbj5cblx0XHRcdFx0e3NlbGVjdEJ1dHRvbnN9XG5cdFx0XHRcdHthY3Rpb25CdXR0b25zfVxuXHRcdFx0XHR7Y3VzdG9tQWN0aW9uQnV0dG9uc31cblx0XHRcdFx0e3NlbGVjdGVkQ291bnRUZXh0fVxuXHRcdFx0PC9Hcm91cD5cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbkxpc3RNYW5hZ2VtZW50LnByb3BUeXBlcyA9IHtcblx0Y2hlY2tlZEl0ZW1zOiBQcm9wVHlwZXMubnVtYmVyLFxuXHRoYW5kbGVDdXN0b21BY3Rpb246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdGhhbmRsZURlbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0aGFuZGxlU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRoYW5kbGVUb2dnbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdGlzT3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cdGl0ZW1Db3VudDogUHJvcFR5cGVzLm51bWJlcixcblx0aXRlbXNQZXJQYWdlOiBQcm9wVHlwZXMubnVtYmVyLFxuXHRub2RlbGV0ZTogUHJvcFR5cGVzLmJvb2wsXG5cdG5vZWRpdDogUHJvcFR5cGVzLmJvb2wsXG5cdHNlbGVjdEFsbEl0ZW1zTG9hZGluZzogUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RNYW5hZ2VtZW50O1xuIiwiaW1wb3J0IHsgRm9ybU5vdGUsIEZvcm1GaWVsZCwgRm9ybUlucHV0IH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcclxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHZrZXkgZnJvbSAndmtleSc7XHJcblxyXG5pbXBvcnQgS2JkIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9LYmQnO1xyXG5pbXBvcnQgUG9wb3V0IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Qb3BvdXQnO1xyXG5pbXBvcnQgUG9wb3V0TGlzdCBmcm9tICcuLi8uLi8uLi9zaGFyZWQvUG9wb3V0L1BvcG91dExpc3QnO1xyXG5cclxudmFyIExpc3RTb3J0ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnTGlzdFNvcnQnLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0aGFuZGxlU29ydFNlbGVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuXHR9LFxyXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRhbHREb3duOiBmYWxzZSxcclxuXHRcdFx0cG9wb3V0SXNPcGVuOiBmYWxzZSxcclxuXHRcdFx0c2VhcmNoU3RyaW5nOiAnJyxcclxuXHRcdH07XHJcblx0fSxcclxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XHJcblx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24sIGZhbHNlKTtcclxuXHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmhhbmRsZUtleVVwLCBmYWxzZSk7XHJcblx0fSxcclxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XHJcblx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pO1xyXG5cdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuaGFuZGxlS2V5VXApO1xyXG5cdH0sXHJcblx0aGFuZGxlS2V5RG93biAoZSkge1xyXG5cdFx0aWYgKHZrZXlbZS5rZXlDb2RlXSAhPT0gJzxhbHQ+JykgcmV0dXJuO1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdGFsdERvd246IHRydWUsXHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdGhhbmRsZUtleVVwIChlKSB7XHJcblx0XHRpZiAodmtleVtlLmtleUNvZGVdICE9PSAnPGFsdD4nKSByZXR1cm47XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0YWx0RG93bjogZmFsc2UsXHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdGhhbmRsZVNvcnRTZWxlY3QgKHBhdGgsIGludmVydGVkKSB7XHJcblx0XHRpZiAodGhpcy5zdGF0ZS5hbHREb3duKSBpbnZlcnRlZCA9IHRydWU7XHJcblx0XHR0aGlzLnByb3BzLmhhbmRsZVNvcnRTZWxlY3QocGF0aCwgaW52ZXJ0ZWQpO1xyXG5cdFx0dGhpcy5jbG9zZVBvcG91dCgpO1xyXG5cdH0sXHJcblx0b3BlblBvcG91dCAoKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0cG9wb3V0SXNPcGVuOiB0cnVlLFxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRjbG9zZVBvcG91dCAoKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0cG9wb3V0SXNPcGVuOiBmYWxzZSxcclxuXHRcdFx0c2VhcmNoU3RyaW5nOiAnJyxcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0dXBkYXRlU2VhcmNoIChlKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHsgc2VhcmNoU3RyaW5nOiBlLnRhcmdldC52YWx1ZSB9KTtcclxuXHR9LFxyXG5cdHJlbmRlclNvcnRPcHRpb25zICgpIHtcclxuXHRcdC8vIFRPRE86IEhhbmRsZSBtdWx0aXBsZSBzb3J0IHBhdGhzXHJcblx0XHRjb25zdCBhY3RpdmVTb3J0UGF0aCA9IHRoaXMucHJvcHMuYWN0aXZlU29ydC5wYXRoc1swXTtcclxuXHRcdGNvbnN0IGF2YWlsaWJsZUNvbHVtbnMgPSB0aGlzLnByb3BzLmF2YWlsYWJsZUNvbHVtbnM7XHJcblx0XHRjb25zdCB7IHNlYXJjaFN0cmluZyB9ID0gdGhpcy5zdGF0ZTtcclxuXHRcdGxldCBmaWx0ZXJlZENvbHVtbnMgPSBhdmFpbGlibGVDb2x1bW5zO1xyXG5cclxuXHRcdGlmIChzZWFyY2hTdHJpbmcpIHtcclxuXHRcdFx0ZmlsdGVyZWRDb2x1bW5zID0gZmlsdGVyZWRDb2x1bW5zXHJcblx0XHRcdFx0LmZpbHRlcihjb2x1bW4gPT4gY29sdW1uLnR5cGUgIT09ICdoZWFkaW5nJylcclxuXHRcdFx0XHQuZmlsdGVyKGNvbHVtbiA9PiBuZXcgUmVnRXhwKHNlYXJjaFN0cmluZykudGVzdChjb2x1bW4uZmllbGQubGFiZWwudG9Mb3dlckNhc2UoKSkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmaWx0ZXJlZENvbHVtbnMubWFwKChlbCwgaSkgPT4ge1xyXG5cdFx0XHRpZiAoZWwudHlwZSA9PT0gJ2hlYWRpbmcnKSB7XHJcblx0XHRcdFx0cmV0dXJuIDxQb3BvdXRMaXN0LkhlYWRpbmcga2V5PXsnaGVhZGluZ18nICsgaX0+e2VsLmNvbnRlbnR9PC9Qb3BvdXRMaXN0LkhlYWRpbmc+O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb25zdCBwYXRoID0gZWwuZmllbGQucGF0aDtcclxuXHRcdFx0Y29uc3QgaXNTZWxlY3RlZCA9IGFjdGl2ZVNvcnRQYXRoICYmIGFjdGl2ZVNvcnRQYXRoLnBhdGggPT09IHBhdGg7XHJcblx0XHRcdGNvbnN0IGlzSW52ZXJ0ZWQgPSBpc1NlbGVjdGVkICYmIGFjdGl2ZVNvcnRQYXRoLmludmVydDtcclxuXHRcdFx0Y29uc3QgaWNvbiA9IHRoaXMuc3RhdGUuYWx0RG93biB8fCAoaXNTZWxlY3RlZCAmJiAhaXNJbnZlcnRlZCkgPyAnY2hldnJvbi11cCcgOiAnY2hldnJvbi1kb3duJztcclxuXHJcblx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0PFBvcG91dExpc3QuSXRlbVxyXG5cdFx0XHRcdFx0a2V5PXsnY29sdW1uXycgKyBlbC5maWVsZC5wYXRofVxyXG5cdFx0XHRcdFx0aWNvbj17aWNvbn1cclxuXHRcdFx0XHRcdGlzU2VsZWN0ZWQ9e2lzU2VsZWN0ZWR9XHJcblx0XHRcdFx0XHRsYWJlbD17ZWwuZmllbGQubGFiZWx9XHJcblx0XHRcdFx0XHRvbkNsaWNrPXsoKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMuaGFuZGxlU29ydFNlbGVjdChwYXRoLCBpc1NlbGVjdGVkICYmICFpc0ludmVydGVkKTtcclxuXHRcdFx0XHRcdH19IC8+XHJcblx0XHRcdCk7XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHQvLyBUT0RPOiBIYW5kbGUgbXVsdGlwbGUgc29ydCBwYXRoc1xyXG5cdFx0Y29uc3QgYWN0aXZlU29ydFBhdGggPSB0aGlzLnByb3BzLmFjdGl2ZVNvcnQucGF0aHNbMF07XHJcblx0XHRjb25zdCBmb3JtRmllbGRTdHlsZXMgPSB7IGJvcmRlckJvdHRvbTogJzFweCBkYXNoZWQgcmdiYSgwLDAsMCwwLjEpJywgcGFkZGluZ0JvdHRvbTogJzFlbScgfTtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8c3Bhbj5cclxuXHRcdFx0XHR7YWN0aXZlU29ydFBhdGggJiYgKFxyXG5cdFx0XHRcdFx0PHNwYW4+XHJcblx0XHRcdFx0XHRcdDxzcGFuIHN0eWxlPXt7IGNvbG9yOiAnIzk5OScgfX0+IHNvcnRlZCBieSA8L3NwYW4+XHJcblx0XHRcdFx0XHRcdDxhIGlkPVwibGlzdEhlYWRlclNvcnRCdXR0b25cIiBocmVmPVwiamF2YXNjcmlwdDo7XCIgb25DbGljaz17dGhpcy5vcGVuUG9wb3V0fT5cclxuXHRcdFx0XHRcdFx0XHR7YWN0aXZlU29ydFBhdGgubGFiZWwudG9Mb3dlckNhc2UoKX1cclxuXHRcdFx0XHRcdFx0XHR7YWN0aXZlU29ydFBhdGguaW52ZXJ0ID8gJyAoZGVzY2VuZGluZyknIDogJyd9XHJcblx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwiZGlzY2xvc3VyZS1hcnJvd1wiIC8+XHJcblx0XHRcdFx0XHRcdDwvYT5cclxuXHRcdFx0XHRcdDwvc3Bhbj5cclxuXHRcdFx0XHQpfVxyXG5cdFx0XHRcdDxQb3BvdXQgaXNPcGVuPXt0aGlzLnN0YXRlLnBvcG91dElzT3Blbn0gb25DYW5jZWw9e3RoaXMuY2xvc2VQb3BvdXR9IHJlbGF0aXZlVG9JRD1cImxpc3RIZWFkZXJTb3J0QnV0dG9uXCI+XHJcblx0XHRcdFx0XHQ8UG9wb3V0LkhlYWRlciB0aXRsZT1cIlNvcnRcIiAvPlxyXG5cclxuXHRcdFx0XHRcdDxQb3BvdXQuQm9keSBzY3JvbGxhYmxlPlxyXG5cdFx0XHRcdFx0XHQ8Rm9ybUZpZWxkIHN0eWxlPXtmb3JtRmllbGRTdHlsZXN9PlxyXG5cdFx0XHRcdFx0XHRcdDxGb3JtSW5wdXRcclxuXHRcdFx0XHRcdFx0XHRcdGF1dG9Gb2N1c1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU9e3RoaXMuc3RhdGUuc2VhcmNoU3RyaW5nfVxyXG5cdFx0XHRcdFx0XHRcdFx0b25DaGFuZ2U9e3RoaXMudXBkYXRlU2VhcmNofVxyXG5cdFx0XHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJGaW5kIGEgZmllbGQuLi5cIlxyXG5cdFx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHRcdDwvRm9ybUZpZWxkPlxyXG5cdFx0XHRcdFx0XHQ8UG9wb3V0TGlzdD5cclxuXHRcdFx0XHRcdFx0XHR7dGhpcy5yZW5kZXJTb3J0T3B0aW9ucygpfVxyXG5cdFx0XHRcdFx0XHQ8L1BvcG91dExpc3Q+XHJcblx0XHRcdFx0XHQ8L1BvcG91dC5Cb2R5PlxyXG5cclxuXHRcdFx0XHRcdDxQb3BvdXQuRm9vdGVyPlxyXG5cdFx0XHRcdFx0XHQ8Rm9ybU5vdGU+SG9sZCA8S2JkPmFsdDwvS2JkPiB0byB0b2dnbGUgYXNjZW5kaW5nL2Rlc2NlbmRpbmc8L0Zvcm1Ob3RlPlxyXG5cdFx0XHRcdFx0PC9Qb3BvdXQuRm9vdGVyPlxyXG5cdFx0XHRcdDwvUG9wb3V0PlxyXG5cdFx0XHQ8L3NwYW4+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBMaXN0U29ydDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFNlbGVjdCBmcm9tICdyZWFjdC1zZWxlY3QnO1xyXG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCBhc3NpZ24gZnJvbSAnb2JqZWN0LWFzc2lnbic7XHJcbmltcG9ydCB7IEZpZWxkcyB9IGZyb20gJ0ZpZWxkVHlwZXMnO1xyXG5pbXBvcnQgSW52YWxpZEZpZWxkVHlwZSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvSW52YWxpZEZpZWxkVHlwZSc7XHJcbmltcG9ydCB7IHBsdXJhbCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3N0cmluZyc7XHJcbmltcG9ydCB7IEJsYW5rU3RhdGUsIEJ1dHRvbiwgRm9ybSwgTW9kYWwgfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50YWwnO1xyXG5cclxudmFyIFVwZGF0ZUZvcm0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdVcGRhdGVGb3JtJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGlzT3BlbjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcblx0XHRpdGVtSWRzOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXHJcblx0XHRsaXN0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxyXG5cdFx0b25DYW5jZWw6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdH0sXHJcblx0Z2V0RGVmYXVsdFByb3BzICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGlzT3BlbjogZmFsc2UsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGZpZWxkczogW10sXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xyXG5cdFx0dGhpcy5kb0ZvY3VzKCk7XHJcblx0fSxcclxuXHRjb21wb25lbnREaWRVcGRhdGUgKCkge1xyXG5cdFx0dGhpcy5kb0ZvY3VzKCk7XHJcblx0fSxcclxuXHRkb0ZvY3VzICgpIHtcclxuXHRcdGlmICh0aGlzLnJlZnMuZm9jdXNUYXJnZXQpIHtcclxuXHRcdFx0ZmluZERPTU5vZGUodGhpcy5yZWZzLmZvY3VzVGFyZ2V0KS5mb2N1cygpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0Z2V0T3B0aW9ucyAoKSB7XHJcblx0XHRjb25zdCB7IGZpZWxkcyB9ID0gdGhpcy5wcm9wcy5saXN0O1xyXG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKGZpZWxkcykubWFwKGtleSA9PiAoeyB2YWx1ZTogZmllbGRzW2tleV0ucGF0aCwgbGFiZWw6IGZpZWxkc1trZXldLmxhYmVsIH0pKTtcclxuXHR9LFxyXG5cdGdldEZpZWxkUHJvcHMgKGZpZWxkKSB7XHJcblx0XHR2YXIgcHJvcHMgPSBhc3NpZ24oe30sIGZpZWxkKTtcclxuXHRcdHByb3BzLnZhbHVlID0gdGhpcy5zdGF0ZS5maWVsZHNbZmllbGQucGF0aF07XHJcblx0XHRwcm9wcy52YWx1ZXMgPSB0aGlzLnN0YXRlLmZpZWxkcztcclxuXHRcdHByb3BzLm9uQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2U7XHJcblx0XHRwcm9wcy5tb2RlID0gJ2NyZWF0ZSc7XHJcblx0XHRwcm9wcy5rZXkgPSBmaWVsZC5wYXRoO1xyXG5cdFx0cmV0dXJuIHByb3BzO1xyXG5cdH0sXHJcblx0dXBkYXRlT3B0aW9ucyAoZmllbGRzKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0ZmllbGRzOiBmaWVsZHMsXHJcblx0XHR9LCB0aGlzLmRvRm9jdXMpO1xyXG5cdH0sXHJcblx0aGFuZGxlQ2hhbmdlICh2YWx1ZSkge1xyXG5cdFx0Y29uc29sZS5sb2coJ2hhbmRsZUNoYW5nZTonLCB2YWx1ZSk7XHJcblx0fSxcclxuXHRoYW5kbGVDbG9zZSAoKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0ZmllbGRzOiBbXSxcclxuXHRcdH0pO1xyXG5cdFx0dGhpcy5wcm9wcy5vbkNhbmNlbCgpO1xyXG5cdH0sXHJcblxyXG5cdHJlbmRlckZpZWxkcyAoKSB7XHJcblx0XHRjb25zdCB7IGxpc3QgfSA9IHRoaXMucHJvcHM7XHJcblx0XHRjb25zdCB7IGZpZWxkcyB9ID0gdGhpcy5zdGF0ZTtcclxuXHRcdGNvbnN0IGZvcm1GaWVsZHMgPSBbXTtcclxuXHRcdGxldCBmb2N1c1JlZjtcclxuXHJcblx0XHRmaWVsZHMuZm9yRWFjaCgoZmllbGRPcHRpb24pID0+IHtcclxuXHRcdFx0Y29uc3QgZmllbGQgPSBsaXN0LmZpZWxkc1tmaWVsZE9wdGlvbi52YWx1ZV07XHJcblxyXG5cdFx0XHRpZiAodHlwZW9mIEZpZWxkc1tmaWVsZC50eXBlXSAhPT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdGZvcm1GaWVsZHMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KEludmFsaWRGaWVsZFR5cGUsIHsgdHlwZTogZmllbGQudHlwZSwgcGF0aDogZmllbGQucGF0aCwga2V5OiBmaWVsZC5wYXRoIH0pKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIGZpZWxkUHJvcHMgPSB0aGlzLmdldEZpZWxkUHJvcHMoZmllbGQpO1xyXG5cdFx0XHRpZiAoIWZvY3VzUmVmKSB7XHJcblx0XHRcdFx0ZmllbGRQcm9wcy5yZWYgPSBmb2N1c1JlZiA9ICdmb2N1c1RhcmdldCc7XHJcblx0XHRcdH1cclxuXHRcdFx0Zm9ybUZpZWxkcy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmllbGRzW2ZpZWxkLnR5cGVdLCBmaWVsZFByb3BzKSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRjb25zdCBmaWVsZHNVSSA9IGZvcm1GaWVsZHMubGVuZ3RoID8gZm9ybUZpZWxkcyA6IChcclxuXHRcdFx0PEJsYW5rU3RhdGVcclxuXHRcdFx0XHRoZWFkaW5nPVwiQ2hvb3NlIGEgZmllbGQgYWJvdmUgdG8gYmVnaW5cIlxyXG5cdFx0XHRcdHN0eWxlPXt7IHBhZGRpbmc6ICczZW0gMmVtJyB9fVxyXG5cdFx0XHQvPlxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IHN0eWxlPXt7IGJvcmRlclRvcDogJzFweCBkYXNoZWQgcmdiYSgwLDAsMCwwLjEpJywgbWFyZ2luVG9wOiAyMCwgcGFkZGluZ1RvcDogMjAgfX0+XHJcblx0XHRcdFx0e2ZpZWxkc1VJfVxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdCk7XHJcblx0fSxcclxuXHRyZW5kZXJGb3JtICgpIHtcclxuXHRcdGNvbnN0IHsgaXRlbUlkcywgbGlzdCB9ID0gdGhpcy5wcm9wcztcclxuXHRcdGNvbnN0IGl0ZW1Db3VudCA9IHBsdXJhbChpdGVtSWRzLCAoJyogJyArIGxpc3Quc2luZ3VsYXIpLCAoJyogJyArIGxpc3QucGx1cmFsKSk7XHJcblx0XHRjb25zdCBmb3JtQWN0aW9uID0gYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2xpc3QucGF0aH1gO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxGb3JtIGxheW91dD1cImhvcml6b250YWxcIiBhY3Rpb249e2Zvcm1BY3Rpb259IG5vVmFsaWRhdGU9XCJ0cnVlXCI+XHJcblx0XHRcdFx0PE1vZGFsLkhlYWRlclxyXG5cdFx0XHRcdFx0b25DbG9zZT17dGhpcy5oYW5kbGVDbG9zZX1cclxuXHRcdFx0XHRcdHNob3dDbG9zZUJ1dHRvblxyXG5cdFx0XHRcdFx0dGV4dD17J1VwZGF0ZSAnICsgaXRlbUNvdW50fVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdFx0PE1vZGFsLkJvZHk+XHJcblx0XHRcdFx0XHQ8U2VsZWN0XHJcblx0XHRcdFx0XHRcdGtleT1cImZpZWxkLXNlbGVjdFwiXHJcblx0XHRcdFx0XHRcdG11bHRpXHJcblx0XHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZU9wdGlvbnN9XHJcblx0XHRcdFx0XHRcdG9wdGlvbnM9e3RoaXMuZ2V0T3B0aW9ucygpfVxyXG5cdFx0XHRcdFx0XHRyZWY9XCJpbml0aWFsRm9jdXNUYXJnZXRcIlxyXG5cdFx0XHRcdFx0XHR2YWx1ZT17dGhpcy5zdGF0ZS5maWVsZHN9XHJcblx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyRmllbGRzKCl9XHJcblx0XHRcdFx0PC9Nb2RhbC5Cb2R5PlxyXG5cdFx0XHRcdDxNb2RhbC5Gb290ZXI+XHJcblx0XHRcdFx0XHQ8QnV0dG9uIGNvbG9yPVwicHJpbWFyeVwiIHN1Ym1pdD5VcGRhdGU8L0J1dHRvbj5cclxuXHRcdFx0XHRcdDxCdXR0b24gY29sb3I9XCJjYW5jZWxcIiB2YXJpYW50PVwibGlua1wiIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xvc2V9PkNhbmNlbDwvQnV0dG9uPlxyXG5cdFx0XHRcdDwvTW9kYWwuRm9vdGVyPlxyXG5cdFx0XHQ8L0Zvcm0+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxNb2RhbC5EaWFsb2cgaXNPcGVuPXt0aGlzLnByb3BzLmlzT3Blbn0gb25DbG9zZT17dGhpcy5oYW5kbGVDbG9zZX0gYmFja2Ryb3BDbG9zZXNNb2RhbD5cclxuXHRcdFx0XHR7dGhpcy5yZW5kZXJGb3JtKCl9XHJcblx0XHRcdDwvTW9kYWwuRGlhbG9nPlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVXBkYXRlRm9ybTtcclxuIiwiLy8gR2VuZXJhbFxyXG5leHBvcnQgY29uc3QgU0VMRUNUX0xJU1QgPSAnYXBwL0xpc3QvU0VMRUNUX0xJU1QnO1xyXG5leHBvcnQgY29uc3QgU0VUX0NVUlJFTlRfUEFHRSA9ICdhcHAvTGlzdC9TRVRfQ1VSUkVOVF9QQUdFJztcclxuZXhwb3J0IGNvbnN0IElOSVRJQUxfTElTVF9MT0FEID0gJ2FwcC9MaXN0L0lOSVRJQUxfTElTVF9MT0FEJztcclxuLy8gSXRlbXNcclxuZXhwb3J0IGNvbnN0IExPQURfSVRFTVMgPSAnYXBwL0xpc3QvTE9BRF9JVEVNUyc7XHJcbmV4cG9ydCBjb25zdCBMT0FESU5HX0lURU1TID0gJ2FwcC9MaXN0L0xPQURJTkdfSVRFTVMnO1xyXG5leHBvcnQgY29uc3QgSVRFTVNfTE9BREVEID0gJ2FwcC9MaXN0L0lURU1TX0xPQURFRCc7XHJcbmV4cG9ydCBjb25zdCBJVEVNX0xPQURJTkdfRVJST1IgPSAnYXBwL0xpc3QvSVRFTV9MT0FESU5HX0VSUk9SJztcclxuLy8gQWN0aXZlXHJcbmV4cG9ydCBjb25zdCBTRUxFQ1RfQUNUSVZFX1NPUlQgPSAnYXBwL0xpc3QvU0VMRUNUX0FDVElWRV9TT1JUJztcclxuZXhwb3J0IGNvbnN0IFNFTEVDVF9BQ1RJVkVfQ09MVU1OUyA9ICdhcHAvTGlzdC9TRUxFQ1RfQUNUSVZFX0NPTFVNTlMnO1xyXG5leHBvcnQgY29uc3QgU0VMRUNUX0ZJTFRFUiA9ICdhcHAvTGlzdC9TRUxFQ1RfRklMVEVSJztcclxuXHJcbmV4cG9ydCBjb25zdCBTRVRfQUNUSVZFX1NFQVJDSCA9ICdhcHAvTGlzdC9TRVRfQUNUSVZFX1NFQVJDSCc7XHJcbmV4cG9ydCBjb25zdCBTRVRfQUNUSVZFX1NPUlQgPSAnYXBwL0xpc3QvU0VUX0FDVElWRV9TT1JUJztcclxuZXhwb3J0IGNvbnN0IFNFVF9BQ1RJVkVfQ09MVU1OUyA9ICdhcHAvTGlzdC9TRVRfQUNUSVZFX0NPTFVNTlMnO1xyXG5leHBvcnQgY29uc3QgU0VUX0FDVElWRV9MSVNUID0gJ2FwcC9MaXN0L1NFVF9BQ1RJVkVfTElTVCc7XHJcblxyXG4vLyBRdWVyeSBQYXJhbXNcclxuZXhwb3J0IGNvbnN0IFFVRVJZX0hBU19DSEFOR0VEID0gJ2FwcC9MaXN0L1FVRVJZX0hBU19DSEFOR0VEJztcclxuZXhwb3J0IGNvbnN0IFFVRVJZX0hBU19OT1RfQ0hBTkdFRCA9ICdhcHAvTGlzdC9RVUVSWV9IQVNfTk9UX0NIQU5HRUQnO1xyXG5leHBvcnQgY29uc3QgUkVQTEFDRV9DQUNIRURfUVVFUlkgPSAnYXBwL0xpc3QvUkVQTEFDRV9DQUNIRURfUVVFUlknO1xyXG5leHBvcnQgY29uc3QgQ0xFQVJfQ0FDSEVEX1FVRVJZID0gJ2FwcC9MaXN0L0NMRUFSX0NBQ0hFRF9RVUVSWSc7XHJcblxyXG4vLyBGaWx0ZXJpbmdcclxuZXhwb3J0IGNvbnN0IEFERF9GSUxURVIgPSAnYXBwL0xpc3QvQUREX0ZJTFRFUic7XHJcbmV4cG9ydCBjb25zdCBDTEVBUl9GSUxURVIgPSAnYXBwL0xpc3QvQ0xFQVJfRklMVEVSJztcclxuZXhwb3J0IGNvbnN0IENMRUFSX0FMTF9GSUxURVJTID0gJ2FwcC9MaXN0L0NMRUFSX0FMTF9GSUxURVJTJztcclxuZXhwb3J0IGNvbnN0IFNFVF9GSUxURVJTID0gJ2FwcC9MaXN0L1NFVF9GSUxURVJTJztcclxuLy8gRHJhZ1xyXG5leHBvcnQgY29uc3QgU0VUX1JPV19BTEVSVCA9ICdhcHAvTGlzdC9TRVRfUk9XX0FMRVJUJztcclxuZXhwb3J0IGNvbnN0IFJFU0VUX0RSQUdfUEFHRSA9ICdhcHAvTGlzdC9SRVNFVF9EUkFHX1BBR0UnO1xyXG5leHBvcnQgY29uc3QgUkVTRVRfRFJBR19JVEVNUyA9ICdhcHAvTGlzdC9SRVNFVF9EUkFHX0lURU1TJztcclxuZXhwb3J0IGNvbnN0IFNFVF9EUkFHX0lURU0gPSAnYXBwL0xpc3QvU0VUX0RSQUdfSVRFTSc7XHJcbmV4cG9ydCBjb25zdCBTRVRfRFJBR19JTkRFWCA9ICdhcHAvTGlzdC9TRVRfRFJBR19JTkRFWCc7XHJcbmV4cG9ydCBjb25zdCBEUkFHX01PVkVfSVRFTSA9ICdhcHAvTGlzdC9EUkFHX01PVkVfSVRFTSc7XHJcbiIsIi8qKlxuICogVGhlIGxpc3QgdmlldyBpcyBhIHBhZ2luYXRlZCB0YWJsZSBvZiBhbGwgaXRlbXMgaW4gdGhlIGxpc3QuIEl0IGNhbiBzaG93IGFcbiAqIHZhcmlldHkgb2YgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGluZGl2aWR1YWwgaXRlbXMgaW4gY29sdW1ucy5cbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLy8gaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nOyAvLyBUT0RPIHJlLWltcGxlbWVudCBmb2N1cyB3aGVuIHJlYWR5XG5pbXBvcnQgbnVtZXJhbCBmcm9tICdudW1lcmFsJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCB7XG5cdEJsYW5rU3RhdGUsXG5cdENlbnRlcixcblx0Q29udGFpbmVyLFxuXHRHbHlwaCxcblx0R2x5cGhCdXR0b24sXG5cdFBhZ2luYXRpb24sXG5cdFNwaW5uZXIsXG59IGZyb20gJy4uLy4uL2VsZW1lbnRhbCc7XG5cbmltcG9ydCBMaXN0RmlsdGVycyBmcm9tICcuL2NvbXBvbmVudHMvRmlsdGVyaW5nL0xpc3RGaWx0ZXJzJztcbmltcG9ydCBMaXN0SGVhZGVyVGl0bGUgZnJvbSAnLi9jb21wb25lbnRzL0xpc3RIZWFkZXJUaXRsZSc7XG5pbXBvcnQgTGlzdEhlYWRlclRvb2xiYXIgZnJvbSAnLi9jb21wb25lbnRzL0xpc3RIZWFkZXJUb29sYmFyJztcbmltcG9ydCBMaXN0TWFuYWdlbWVudCBmcm9tICcuL2NvbXBvbmVudHMvTGlzdE1hbmFnZW1lbnQnO1xuXG5pbXBvcnQgQ29uZmlybWF0aW9uRGlhbG9nIGZyb20gJy4uLy4uL3NoYXJlZC9Db25maXJtYXRpb25EaWFsb2cnO1xuaW1wb3J0IEFsZXJ0TWVzc2FnZXMgZnJvbSAnLi4vLi4vc2hhcmVkL0FsZXJ0TWVzc2FnZXMnO1xuaW1wb3J0IENyZWF0ZUZvcm0gZnJvbSAnLi4vLi4vc2hhcmVkL0NyZWF0ZUZvcm0nO1xuaW1wb3J0IEZsYXNoTWVzc2FnZXMgZnJvbSAnLi4vLi4vc2hhcmVkL0ZsYXNoTWVzc2FnZXMnO1xuaW1wb3J0IEl0ZW1zVGFibGUgZnJvbSAnLi9jb21wb25lbnRzL0l0ZW1zVGFibGUvSXRlbXNUYWJsZSc7XG5pbXBvcnQgVXBkYXRlRm9ybSBmcm9tICcuL2NvbXBvbmVudHMvVXBkYXRlRm9ybSc7XG5pbXBvcnQgeyBwbHVyYWwgYXMgcGx1cmFsaXplIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvc3RyaW5nJztcbmltcG9ydCB7IGxpc3RzQnlQYXRoIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbGlzdHMnO1xuaW1wb3J0IHsgY2hlY2tGb3JRdWVyeUNoYW5nZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3F1ZXJ5UGFyYW1zJztcbmltcG9ydCBJZnJhbWVDb250ZW50IGZyb20gJy4uLy4uLy4uL0FwcC9zaGFyZWQvSWZyYW1lQ29udGVudCc7XG5cbmltcG9ydCB7XG5cdGRlbGV0ZUl0ZW1zLFxuXHRzZXRBY3RpdmVTZWFyY2gsXG5cdHNldEFjdGl2ZVNvcnQsXG5cdHNldEN1cnJlbnRQYWdlLFxuXHRzZWxlY3RMaXN0LFxuXHRjbGVhckNhY2hlZFF1ZXJ5LFxuXHRjdXN0b21BY3Rpb24sXG5cdGN1c3RvbUFjdGlvbkRvd25sb2FkLFxufSBmcm9tICcuL2FjdGlvbnMnO1xuXG5pbXBvcnQge1xuXHRkZWxldGVJdGVtLFxufSBmcm9tICcuLi9JdGVtL2FjdGlvbnMnO1xuXG5jb25zdCBFU0NfS0VZX0NPREUgPSAyNztcblxuY29uc3QgTGlzdFZpZXcgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGNvbnRleHRUeXBlczoge1xuXHRcdHJvdXRlcjogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXHR9LFxuXHRnZXRJbml0aWFsU3RhdGUoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvbmZpcm1hdGlvbkRpYWxvZzoge1xuXHRcdFx0XHRpc09wZW46IGZhbHNlLFxuXHRcdFx0fSxcblx0XHRcdGNoZWNrZWRJdGVtczoge30sXG5cdFx0XHRjb25zdHJhaW5UYWJsZVdpZHRoOiB0cnVlLFxuXHRcdFx0bWFuYWdlTW9kZTogZmFsc2UsXG5cdFx0XHRzaG93Q3JlYXRlRm9ybTogZmFsc2UsXG5cdFx0XHRzaG93VXBkYXRlRm9ybTogZmFsc2UsXG5cdFx0XHRhbGVydHM6IHt9LFxuXHRcdFx0Ly8gQ3VzdG9tIEFjdGlvbiBWaWV3XG5cdFx0XHRzaG93SWZyYW1lOiBmYWxzZSxcblx0XHRcdGFjdGlvbl91cmw6IG51bGwsXG5cdFx0XHRpZDogbnVsbCxcblx0XHRcdGN1c3RvbVVwZGF0ZVZhbHVlOiBudWxsLFxuXHRcdH07XG5cdH0sXG5cdGNvbXBvbmVudFdpbGxNb3VudCgpIHtcblx0XHQvLyBXaGVuIHdlIGRpcmVjdGx5IG5hdmlnYXRlIHRvIGEgbGlzdCB3aXRob3V0IGNvbWluZyBmcm9tIGFub3RoZXIgY2xpZW50XG5cdFx0Ly8gc2lkZSByb3V0ZWQgcGFnZSBiZWZvcmUsIHdlIG5lZWQgdG8gaW5pdGlhbGl6ZSB0aGUgbGlzdCBhbmQgcGFyc2Vcblx0XHQvLyBwb3NzaWJseSBzcGVjaWZpZWQgcXVlcnkgcGFyYW1ldGVyc1xuXG5cdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChzZWxlY3RMaXN0KHRoaXMucHJvcHMucGFyYW1zLmxpc3RJZCkpO1xuXG5cdFx0Y29uc3QgaXNOb0NyZWF0ZSA9IHRoaXMucHJvcHMubGlzdHMuZGF0YVt0aGlzLnByb3BzLnBhcmFtcy5saXN0SWRdLm5vY3JlYXRlO1xuXHRcdGNvbnN0IHNob3VsZE9wZW5DcmVhdGUgPSB0aGlzLnByb3BzLmxvY2F0aW9uLnNlYXJjaCA9PT0gJz9jcmVhdGUnO1xuXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRzaG93Q3JlYXRlRm9ybTogKHNob3VsZE9wZW5DcmVhdGUgJiYgIWlzTm9DcmVhdGUpIHx8IEtleXN0b25lLmNyZWF0ZUZvcm1FcnJvcnMsXG5cdFx0fSk7XG5cblx0fSxcblx0Y29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcblx0XHQvLyBSZXZpZXcgYW5kIG1ha2UgaXQgbW9yZSBnZW5lcmljIHRvIGNsZWFyIGN1c3RvbSBhY3Rpb24gdmlldyBvbiBsaW5rIGNoYW5nZVxuXHRcdGlmICh0aGlzLnByb3BzICYmIHRoaXMucHJvcHMubGlzdHMuY3VycmVudExpc3QgJiYgdGhpcy5wcm9wcy5saXN0cy5jdXJyZW50TGlzdC5pZCAhPT0gJ2xpc3RfaXRlbXMnKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHsgc2hvd0lmcmFtZTogZmFsc2UsIGFjdGlvbl91cmw6IG51bGwsIGlkOiBudWxsLCBzaG93Q3JlYXRlRm9ybTogZmFsc2UgfSk7XG5cdFx0fVxuXG5cdFx0Ly8gV2UndmUgb3BlbmVkIGEgbmV3IGxpc3QgZnJvbSB0aGUgY2xpZW50IHNpZGUgcm91dGluZywgc28gaW5pdGlhbGl6ZVxuXHRcdC8vIGFnYWluIHdpdGggdGhlIG5ldyBsaXN0IGlkXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRhbGVydHM6IHt9LFxuXHRcdH0pO1xuXHRcdGNvbnN0IGlzUmVhZHkgPSB0aGlzLnByb3BzLmxpc3RzLnJlYWR5ICYmIG5leHRQcm9wcy5saXN0cy5yZWFkeTtcblx0XHRpZiAoaXNSZWFkeSAmJiBjaGVja0ZvclF1ZXJ5Q2hhbmdlKG5leHRQcm9wcywgdGhpcy5wcm9wcykpIHtcblx0XHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goc2VsZWN0TGlzdChuZXh0UHJvcHMucGFyYW1zLmxpc3RJZCkpO1xuXHRcdH1cblx0fSxcblx0Y29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7IHNob3dJZnJhbWU6IGZhbHNlLCBhY3Rpb25fdXJsOiBudWxsLCBpZDogbnVsbCB9KTsgLy8gQ3VzdG9tIEFjdGlvbiBWaWV3XG5cdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChjbGVhckNhY2hlZFF1ZXJ5KCkpO1xuXG5cdH0sXG5cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdC8vIEhFQURFUlxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0Ly8gQ2FsbGVkIHdoZW4gYSBuZXcgaXRlbSBpcyBjcmVhdGVkXG5cdG9uQ3JlYXRlKGl0ZW0pIHtcblx0XHQvLyBIaWRlIHRoZSBjcmVhdGUgZm9ybVxuXHRcdHRoaXMudG9nZ2xlQ3JlYXRlTW9kYWwoZmFsc2UpO1xuXHRcdC8vIFJlZGlyZWN0IHRvIG5ld2x5IGNyZWF0ZWQgaXRlbSBwYXRoXG5cdFx0Y29uc3QgbGlzdCA9IHRoaXMucHJvcHMuY3VycmVudExpc3Q7XG5cdFx0dGhpcy5jb250ZXh0LnJvdXRlci5wdXNoKGAke0tleXN0b25lLmFkbWluUGF0aH0vJHtsaXN0LnBhdGh9LyR7aXRlbS5pZH1gKTtcblx0fSxcblx0Y3JlYXRlQXV0b2NyZWF0ZSgpIHtcblx0XHRjb25zdCBsaXN0ID0gdGhpcy5wcm9wcy5jdXJyZW50TGlzdDtcblx0XHRsaXN0LmNyZWF0ZUl0ZW0obnVsbCwgKGVyciwgZGF0YSkgPT4ge1xuXHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHQvLyBUT0RPIFByb3BlciBlcnJvciBoYW5kbGluZ1xuXHRcdFx0XHRhbGVydCgnU29tZXRoaW5nIHdlbnQgd3JvbmcsIHBsZWFzZSB0cnkgYWdhaW4hJyk7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGVycik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmNvbnRleHQucm91dGVyLnB1c2goYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2xpc3QucGF0aH0vJHtkYXRhLmlkfWApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXHR1cGRhdGVTZWFyY2goZSkge1xuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goc2V0QWN0aXZlU2VhcmNoKGUudGFyZ2V0LnZhbHVlKSk7XG5cdH0sXG5cdGhhbmRsZVNlYXJjaENsZWFyKCkge1xuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goc2V0QWN0aXZlU2VhcmNoKCcnKSk7XG5cblx0XHQvLyBUT0RPIHJlLWltcGxlbWVudCBmb2N1cyB3aGVuIHJlYWR5XG5cdFx0Ly8gZmluZERPTU5vZGUodGhpcy5yZWZzLmxpc3RTZWFyY2hJbnB1dCkuZm9jdXMoKTtcblx0fSxcblx0aGFuZGxlU2VhcmNoS2V5KGUpIHtcblx0XHQvLyBjbGVhciBvbiBlc2Ncblx0XHRpZiAoZS53aGljaCA9PT0gRVNDX0tFWV9DT0RFKSB7XG5cdFx0XHR0aGlzLmhhbmRsZVNlYXJjaENsZWFyKCk7XG5cdFx0fVxuXHR9LFxuXHRoYW5kbGVQYWdlU2VsZWN0KGkpIHtcblx0XHQvLyBJZiB0aGUgY3VycmVudCBwYWdlIGluZGV4IGlzIHRoZSBzYW1lIGFzIHRoZSBpbmRleCB3ZSBhcmUgaW50ZW5kaW5nIHRvIHBhc3MgdG8gcmVkdXgsIGJhaWwgb3V0LlxuXHRcdGlmIChpID09PSB0aGlzLnByb3BzLmxpc3RzLnBhZ2UuaW5kZXgpIHJldHVybjtcblx0XHRyZXR1cm4gdGhpcy5wcm9wcy5kaXNwYXRjaChzZXRDdXJyZW50UGFnZShpKSk7XG5cdH0sXG5cdHRvZ2dsZU1hbmFnZU1vZGUoZmlsdGVyID0gIXRoaXMuc3RhdGUubWFuYWdlTW9kZSkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0bWFuYWdlTW9kZTogZmlsdGVyLFxuXHRcdFx0Y2hlY2tlZEl0ZW1zOiB7fSxcblx0XHR9KTtcblx0fSxcblx0dG9nZ2xlVXBkYXRlTW9kYWwoZmlsdGVyID0gIXRoaXMuc3RhdGUuc2hvd1VwZGF0ZUZvcm0pIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdHNob3dVcGRhdGVGb3JtOiBmaWx0ZXIsXG5cdFx0fSk7XG5cdH0sXG5cdGhhbmRsZVByb21wdElucHV0Q2hhbmdlKGV2ZW50KSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRjdXN0b21VcGRhdGVWYWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlLFxuXHRcdH0pXG5cdH0sXG5cdG1hc3NVcGRhdGUoKSB7XG5cdFx0Ly8gVE9ETzogSW1wbGVtZW50IHVwZGF0ZSBtdWx0aS1pdGVtXG5cdFx0Y29uc29sZS5sb2coJ1VwZGF0ZSBBTEwgdGhlIHRoaW5ncyEnKTtcblx0fSxcblx0bWFzc0RlbGV0ZSgpIHtcblx0XHRjb25zdCB7IGNoZWNrZWRJdGVtcyB9ID0gdGhpcy5zdGF0ZTtcblx0XHRjb25zdCBsaXN0ID0gdGhpcy5wcm9wcy5jdXJyZW50TGlzdDtcblx0XHRjb25zdCBpdGVtQ291bnQgPSBwbHVyYWxpemUoY2hlY2tlZEl0ZW1zLCAoJyogJyArIGxpc3Quc2luZ3VsYXIudG9Mb3dlckNhc2UoKSksICgnKiAnICsgbGlzdC5wbHVyYWwudG9Mb3dlckNhc2UoKSkpO1xuXHRcdGNvbnN0IGl0ZW1JZHMgPSBPYmplY3Qua2V5cyhjaGVja2VkSXRlbXMpO1xuXG5cdFx0bGV0IG1lc3NhZ2UgPSBgQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSAke2l0ZW1Db3VudH0/YDtcblxuXHRcdGlmIChsaXN0LmRlbGV0ZVByb21wdCkge1xuXHRcdFx0bWVzc2FnZSA9IGxpc3QuZGVsZXRlUHJvbXB0O1xuXHRcdH1cblxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Y29uZmlybWF0aW9uRGlhbG9nOiB7XG5cdFx0XHRcdGlzT3BlbjogdHJ1ZSxcblx0XHRcdFx0bGFiZWw6ICdEZWxldGUnLFxuXHRcdFx0XHRib2R5OiAoXG5cdFx0XHRcdFx0PGRpdj5cblx0XHRcdFx0XHRcdHttZXNzYWdlfVxuXHRcdFx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0XHRcdFRoaXMgY2Fubm90IGJlIHVuZG9uZS5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0KSxcblx0XHRcdFx0b25Db25maXJtYXRpb246ICgpID0+IHtcblx0XHRcdFx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGRlbGV0ZUl0ZW1zKGl0ZW1JZHMpKTtcblx0XHRcdFx0XHR0aGlzLnRvZ2dsZU1hbmFnZU1vZGUoKTtcblx0XHRcdFx0XHR0aGlzLnJlbW92ZUNvbmZpcm1hdGlvbkRpYWxvZygpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9KTtcblx0fSxcblx0aXNNdWx0aXBsZUFsbG93ZWQoaXRlbUlkcywgbXVsdGlwbGUpIHtcblx0XHRpZiAoIW11bHRpcGxlICYmIGl0ZW1JZHMubGVuZ3RoID4gMSkge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGFsZXJ0czoge1xuXHRcdFx0XHRcdGVycm9yOiB7XG5cdFx0XHRcdFx0XHRlcnJvcjogJ1BsZWFzZSBzZWxlY3Qgb25seSBvbmUgUmVjb3JkIHRvIGNvbXBsZXRlIHRoaXMgdGFzay4nLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0sXG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cdGN1c3RvbUFjdGlvbihjdXN0b21BY3Rpb25EYXRhKSB7XG5cdFx0Y29uc3QgeyBhY3Rpb24sIHR5cGUsIG11bHRpcGxlLCBkYXRhLCBzdGF0dXMgfSA9IGN1c3RvbUFjdGlvbkRhdGE7XG5cdFx0Y29uc3QgeyBjaGVja2VkSXRlbXMgfSA9IHRoaXMuc3RhdGU7XG5cdFx0Y29uc3QgaXRlbUlkcyA9IE9iamVjdC5rZXlzKGNoZWNrZWRJdGVtcyk7XG5cdFx0aWYgKHR5cGUgPT09ICdkb3dubG9hZCcpIHtcblx0XHRcdGlmICh0aGlzLmlzTXVsdGlwbGVBbGxvd2VkKGl0ZW1JZHMsIG11bHRpcGxlKSkge1xuXHRcdFx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGN1c3RvbUFjdGlvbkRvd25sb2FkKGl0ZW1JZHMsIGFjdGlvbikpO1xuXHRcdFx0XHR0aGlzLnRvZ2dsZU1hbmFnZU1vZGUoKTtcblx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdFx0YWxlcnRzOiB7fSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh0eXBlID09PSAndmlldycpIHsgLy8gQ3VzdG9tIEFjdGlvbiBWaWV3XG5cblx0XHRcdGlmICh0aGlzLmlzTXVsdGlwbGVBbGxvd2VkKGl0ZW1JZHMsIG11bHRpcGxlKSkge1xuXHRcdFx0XHRjb25zdCBpZnJhbWVVUkwgPSBgJHtLZXlzdG9uZS5leHRlcm5hbEhvc3R9LyR7YWN0aW9ufS8ke2l0ZW1JZHN9YDtcblx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdFx0c2hvd0lmcmFtZTogdHJ1ZSxcblx0XHRcdFx0XHRhY3Rpb25fdXJsOiBhY3Rpb24sXG5cdFx0XHRcdFx0aWQ6IGl0ZW1JZHMsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR0aGlzLnRvZ2dsZU1hbmFnZU1vZGUoKTtcblx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdFx0YWxlcnRzOiB7fSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh0eXBlID09PSAncHJvbXB0Jykge1xuXHRcdFx0aWYgKHRoaXMuaXNNdWx0aXBsZUFsbG93ZWQoaXRlbUlkcywgbXVsdGlwbGUpKSB7XG5cdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdGNvbmZpcm1hdGlvbkRpYWxvZzoge1xuXHRcdFx0XHRcdFx0aXNPcGVuOiB0cnVlLFxuXHRcdFx0XHRcdFx0bGFiZWw6ICdTYXZlJyxcblx0XHRcdFx0XHRcdGJvZHk6IChcblx0XHRcdFx0XHRcdFx0PGRpdj5cblx0XHRcdFx0XHRcdFx0XHQ8bGFibGUgc3R5bGU9e3sgY29sb3I6ICcjN0Y3RjdGJyB9fT5FbnRlciBhIFZhbHVlOiA8L2xhYmxlPlxuXHRcdFx0XHRcdFx0XHRcdDxpbnB1dCBzdHlsZT17eyBwYWRkaW5nOiAnMC43NWVtJywgaGVpZ2h0OiAnMi4wZW0nLCBib3JkZXJDb2xvcjogJyNjY2MnLCBib3JkZXJXaWR0aDogMSwgYm9yZGVyUmFkaXVzOiAnMC4zcmVtJywgYm9yZGVyU3R5bGU6ICdzb2xpZCcgfX0gdHlwZT1cInRleHRcIiBvbkNoYW5nZT17dGhpcy5oYW5kbGVQcm9tcHRJbnB1dENoYW5nZX0gLz5cblx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0b25Db25maXJtYXRpb246ICgpID0+IHtcblx0XHRcdFx0XHRcdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChjdXN0b21BY3Rpb24oaXRlbUlkcywgYWN0aW9uLCB0aGlzLnN0YXRlLmN1c3RvbVVwZGF0ZVZhbHVlKSk7XG5cdFx0XHRcdFx0XHRcdHRoaXMudG9nZ2xlTWFuYWdlTW9kZSgpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLnJlbW92ZUNvbmZpcm1hdGlvbkRpYWxvZygpO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9IGVsc2UgeyAvLyBzaW1wbGUgZXZlbnQgdHJpZ2dlclxuXHRcdFx0aWYgKHRoaXMuaXNNdWx0aXBsZUFsbG93ZWQoaXRlbUlkcywgbXVsdGlwbGUpKSB7XG5cdFx0XHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goY3VzdG9tQWN0aW9uKGl0ZW1JZHMsIGFjdGlvbiwgc3RhdHVzKSk7XG5cdFx0XHRcdHRoaXMudG9nZ2xlTWFuYWdlTW9kZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFuZGxlTWFuYWdlbWVudFNlbGVjdChzZWxlY3Rpb24pIHtcblx0XHRpZiAoc2VsZWN0aW9uID09PSAnYWxsJykgdGhpcy5jaGVja0FsbEl0ZW1zKCk7XG5cdFx0aWYgKHNlbGVjdGlvbiA9PT0gJ25vbmUnKSB0aGlzLnVuY2hlY2tBbGxUYWJsZUl0ZW1zKCk7XG5cdFx0aWYgKHNlbGVjdGlvbiA9PT0gJ3Zpc2libGUnKSB0aGlzLmNoZWNrQWxsVGFibGVJdGVtcygpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblx0cmVuZGVyQ29uZmlybWF0aW9uRGlhbG9nKCkge1xuXHRcdGNvbnN0IHByb3BzID0gdGhpcy5zdGF0ZS5jb25maXJtYXRpb25EaWFsb2c7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxDb25maXJtYXRpb25EaWFsb2dcblx0XHRcdFx0Y29uZmlybWF0aW9uTGFiZWw9e3Byb3BzLmxhYmVsfVxuXHRcdFx0XHRpc09wZW49e3Byb3BzLmlzT3Blbn1cblx0XHRcdFx0b25DYW5jZWw9e3RoaXMucmVtb3ZlQ29uZmlybWF0aW9uRGlhbG9nfVxuXHRcdFx0XHRvbkNvbmZpcm1hdGlvbj17cHJvcHMub25Db25maXJtYXRpb259XG5cdFx0XHQ+XG5cdFx0XHRcdHtwcm9wcy5ib2R5fVxuXHRcdFx0PC9Db25maXJtYXRpb25EaWFsb2c+XG5cdFx0KTtcblx0fSxcblx0cmVuZGVyTWFuYWdlbWVudCgpIHtcblx0XHRjb25zdCB7IGNoZWNrZWRJdGVtcywgbWFuYWdlTW9kZSwgc2VsZWN0QWxsSXRlbXNMb2FkaW5nIH0gPSB0aGlzLnN0YXRlO1xuXHRcdGNvbnN0IHsgY3VycmVudExpc3QgfSA9IHRoaXMucHJvcHM7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PExpc3RNYW5hZ2VtZW50XG5cdFx0XHRcdGNoZWNrZWRJdGVtQ291bnQ9e09iamVjdC5rZXlzKGNoZWNrZWRJdGVtcykubGVuZ3RofVxuXHRcdFx0XHRoYW5kbGVEZWxldGU9e3RoaXMubWFzc0RlbGV0ZX1cblx0XHRcdFx0aGFuZGxlU2VsZWN0PXt0aGlzLmhhbmRsZU1hbmFnZW1lbnRTZWxlY3R9XG5cdFx0XHRcdGhhbmRsZVRvZ2dsZT17KCkgPT4gdGhpcy50b2dnbGVNYW5hZ2VNb2RlKCFtYW5hZ2VNb2RlKX1cblx0XHRcdFx0aXNPcGVuPXttYW5hZ2VNb2RlfVxuXHRcdFx0XHRpdGVtQ291bnQ9e3RoaXMucHJvcHMuaXRlbXMuY291bnR9XG5cdFx0XHRcdGl0ZW1zUGVyUGFnZT17dGhpcy5wcm9wcy5saXN0cy5wYWdlLnNpemV9XG5cdFx0XHRcdG5vZGVsZXRlPXtjdXJyZW50TGlzdC5ub2RlbGV0ZX1cblx0XHRcdFx0bm9lZGl0PXtjdXJyZW50TGlzdC5ub2VkaXR9XG5cdFx0XHRcdHNlbGVjdEFsbEl0ZW1zTG9hZGluZz17c2VsZWN0QWxsSXRlbXNMb2FkaW5nfVxuXHRcdFx0XHRjdXJyZW50TGlzdD17Y3VycmVudExpc3R9XG5cdFx0XHRcdGhhbmRsZUN1c3RvbUFjdGlvbj17dGhpcy5jdXN0b21BY3Rpb259XG5cdFx0XHRcdGhhbmRsZUN1c3RvbUFjdGlvbkRvd25sb2FkPXt0aGlzLmN1c3RvbUFjdGlvbkRvd25sb2FkfVxuXHRcdFx0Lz5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXJQYWdpbmF0aW9uKCkge1xuXHRcdGNvbnN0IGl0ZW1zID0gdGhpcy5wcm9wcy5pdGVtcztcblx0XHRpZiAodGhpcy5zdGF0ZS5tYW5hZ2VNb2RlIHx8ICFpdGVtcy5jb3VudCkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgbGlzdCA9IHRoaXMucHJvcHMuY3VycmVudExpc3Q7XG5cdFx0Y29uc3QgY3VycmVudFBhZ2UgPSB0aGlzLnByb3BzLmxpc3RzLnBhZ2UuaW5kZXg7XG5cdFx0Y29uc3QgcGFnZVNpemUgPSB0aGlzLnByb3BzLmxpc3RzLnBhZ2Uuc2l6ZTtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8UGFnaW5hdGlvblxuXHRcdFx0XHRjdXJyZW50UGFnZT17Y3VycmVudFBhZ2V9XG5cdFx0XHRcdG9uUGFnZVNlbGVjdD17dGhpcy5oYW5kbGVQYWdlU2VsZWN0fVxuXHRcdFx0XHRwYWdlU2l6ZT17cGFnZVNpemV9XG5cdFx0XHRcdHBsdXJhbD17bGlzdC5wbHVyYWx9XG5cdFx0XHRcdHNpbmd1bGFyPXtsaXN0LnNpbmd1bGFyfVxuXHRcdFx0XHRzdHlsZT17eyBtYXJnaW5Cb3R0b206IDAgfX1cblx0XHRcdFx0dG90YWw9e2l0ZW1zLmNvdW50fVxuXHRcdFx0XHRsaW1pdD17MTB9XG5cdFx0XHQvPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlckhlYWRlcigpIHtcblx0XHRjb25zdCBpdGVtcyA9IHRoaXMucHJvcHMuaXRlbXM7XG5cdFx0Y29uc3QgeyBhdXRvY3JlYXRlLCBub2NyZWF0ZSwgcGx1cmFsLCBzaW5ndWxhciB9ID0gdGhpcy5wcm9wcy5jdXJyZW50TGlzdDtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8Q29udGFpbmVyIHN0eWxlPXt7IHBhZGRpbmdUb3A6ICcyZW0nIH19PlxuXHRcdFx0XHQ8TGlzdEhlYWRlclRpdGxlXG5cdFx0XHRcdFx0YWN0aXZlU29ydD17dGhpcy5wcm9wcy5hY3RpdmUuc29ydH1cblx0XHRcdFx0XHRhdmFpbGFibGVDb2x1bW5zPXt0aGlzLnByb3BzLmN1cnJlbnRMaXN0LmNvbHVtbnN9XG5cdFx0XHRcdFx0aGFuZGxlU29ydFNlbGVjdD17dGhpcy5oYW5kbGVTb3J0U2VsZWN0fVxuXHRcdFx0XHRcdHRpdGxlPXtgXG5cdFx0XHRcdFx0XHQke251bWVyYWwoaXRlbXMuY291bnQpLmZvcm1hdCgpfVxuXHRcdFx0XHRcdFx0JHtwbHVyYWxpemUoaXRlbXMuY291bnQsICcgJyArIHNpbmd1bGFyLCAnICcgKyBwbHVyYWwpfVxuXHRcdFx0XHRcdGB9XG5cdFx0XHRcdC8+XG5cdFx0XHRcdDxMaXN0SGVhZGVyVG9vbGJhclxuXHRcdFx0XHRcdC8vIGNvbW1vblxuXHRcdFx0XHRcdGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuXHRcdFx0XHRcdGxpc3Q9e2xpc3RzQnlQYXRoW3RoaXMucHJvcHMucGFyYW1zLmxpc3RJZF19XG5cblx0XHRcdFx0XHQvLyBleHBhbmRcblx0XHRcdFx0XHRleHBhbmRJc0FjdGl2ZT17IXRoaXMuc3RhdGUuY29uc3RyYWluVGFibGVXaWR0aH1cblx0XHRcdFx0XHRleHBhbmRPbkNsaWNrPXt0aGlzLnRvZ2dsZVRhYmxlV2lkdGh9XG5cblx0XHRcdFx0XHQvLyBjcmVhdGVcblx0XHRcdFx0XHRjcmVhdGVJc0F2YWlsYWJsZT17IW5vY3JlYXRlfVxuXHRcdFx0XHRcdGNyZWF0ZUxpc3ROYW1lPXtzaW5ndWxhcn1cblx0XHRcdFx0XHRjcmVhdGVPbkNsaWNrPXthdXRvY3JlYXRlXG5cdFx0XHRcdFx0XHQ/IHRoaXMuY3JlYXRlQXV0b2NyZWF0ZVxuXHRcdFx0XHRcdFx0OiB0aGlzLm9wZW5DcmVhdGVNb2RhbH1cblxuXHRcdFx0XHRcdC8vIHNlYXJjaFxuXHRcdFx0XHRcdHNlYXJjaEhhbmRsZUNoYW5nZT17dGhpcy51cGRhdGVTZWFyY2h9XG5cdFx0XHRcdFx0c2VhcmNoSGFuZGxlQ2xlYXI9e3RoaXMuaGFuZGxlU2VhcmNoQ2xlYXJ9XG5cdFx0XHRcdFx0c2VhcmNoSGFuZGxlS2V5dXA9e3RoaXMuaGFuZGxlU2VhcmNoS2V5fVxuXHRcdFx0XHRcdHNlYXJjaFZhbHVlPXt0aGlzLnByb3BzLmFjdGl2ZS5zZWFyY2h9XG5cblx0XHRcdFx0XHQvLyBmaWx0ZXJzXG5cdFx0XHRcdFx0ZmlsdGVyc0FjdGl2ZT17dGhpcy5wcm9wcy5hY3RpdmUuZmlsdGVyc31cblx0XHRcdFx0XHRmaWx0ZXJzQXZhaWxhYmxlPXt0aGlzLnByb3BzLmN1cnJlbnRMaXN0LmNvbHVtbnMuZmlsdGVyKChjb2wpID0+IChcblx0XHRcdFx0XHRcdGNvbC5maWVsZCAmJiBjb2wuZmllbGQuaGFzRmlsdGVyTWV0aG9kKSB8fCBjb2wudHlwZSA9PT0gJ2hlYWRpbmcnXG5cdFx0XHRcdFx0KX1cblxuXHRcdFx0XHRcdC8vIGNvbHVtbnNcblx0XHRcdFx0XHRjb2x1bW5zQWN0aXZlPXt0aGlzLnByb3BzLmFjdGl2ZS5jb2x1bW5zfVxuXHRcdFx0XHRcdGNvbHVtbnNBdmFpbGFibGU9e3RoaXMucHJvcHMuY3VycmVudExpc3QuY29sdW1uc31cblxuXHRcdFx0XHRcdC8vIEN1c3RvbSBDcmVhdGUgQnV0dG9uXG5cdFx0XHRcdFx0Y3VzdG9tQ3JlYXRlQnV0dG9uPXt0aGlzLmN1c3RvbUNyZWF0ZUJ1dHRvbn1cblx0XHRcdFx0Lz5cblx0XHRcdFx0PExpc3RGaWx0ZXJzXG5cdFx0XHRcdFx0ZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG5cdFx0XHRcdFx0ZmlsdGVycz17dGhpcy5wcm9wcy5hY3RpdmUuZmlsdGVyc31cblx0XHRcdFx0Lz5cblx0XHRcdDwvQ29udGFpbmVyPlxuXHRcdCk7XG5cdH0sXG5cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdC8vIFRBQkxFXG5cdC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cdGNoZWNrVGFibGVJdGVtKGl0ZW0sIGUpIHtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Y29uc3QgbmV3Q2hlY2tlZEl0ZW1zID0geyAuLi50aGlzLnN0YXRlLmNoZWNrZWRJdGVtcyB9O1xuXHRcdGNvbnN0IGl0ZW1JZCA9IGl0ZW0uaWQ7XG5cdFx0aWYgKHRoaXMuc3RhdGUuY2hlY2tlZEl0ZW1zW2l0ZW1JZF0pIHtcblx0XHRcdGRlbGV0ZSBuZXdDaGVja2VkSXRlbXNbaXRlbUlkXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bmV3Q2hlY2tlZEl0ZW1zW2l0ZW1JZF0gPSB0cnVlO1xuXHRcdH1cblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGNoZWNrZWRJdGVtczogbmV3Q2hlY2tlZEl0ZW1zLFxuXHRcdH0pO1xuXHR9LFxuXHRjaGVja0FsbFRhYmxlSXRlbXMoKSB7XG5cdFx0Y29uc3QgY2hlY2tlZEl0ZW1zID0ge307XG5cdFx0dGhpcy5wcm9wcy5pdGVtcy5yZXN1bHRzLmZvckVhY2goaXRlbSA9PiB7XG5cdFx0XHRjaGVja2VkSXRlbXNbaXRlbS5pZF0gPSB0cnVlO1xuXHRcdH0pO1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Y2hlY2tlZEl0ZW1zOiBjaGVja2VkSXRlbXMsXG5cdFx0fSk7XG5cdH0sXG5cdGNoZWNrQWxsSXRlbXMoKSB7XG5cdFx0Y29uc3QgY2hlY2tlZEl0ZW1zID0geyAuLi50aGlzLnN0YXRlLmNoZWNrZWRJdGVtcyB9O1xuXHRcdC8vIEp1c3QgaW4gY2FzZSB0aGlzIEFQSSBjYWxsIHRha2VzIGEgbG9uZyB0aW1lLCB3ZSdsbCB1cGRhdGUgdGhlIHNlbGVjdCBhbGwgYnV0dG9uIHdpdGhcblx0XHQvLyBhIHNwaW5uZXIuXG5cdFx0dGhpcy5zZXRTdGF0ZSh7IHNlbGVjdEFsbEl0ZW1zTG9hZGluZzogdHJ1ZSB9KTtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0dGhpcy5wcm9wcy5jdXJyZW50TGlzdC5sb2FkSXRlbXMoe1xuXHRcdFx0ZXhwYW5kUmVsYXRpb25zaGlwRmlsdGVyczogZmFsc2UsXG5cdFx0XHRmaWx0ZXJzOiB7XG5cdFx0XHRcdGZldGNoX2FsbF9kYXRhOiB0cnVlLFxuXHRcdFx0XHRpdGVtX2NvdW50OiB0aGlzLnByb3BzLmN1cnJlbnRMaXN0ICYmIHRoaXMucHJvcHMuY3VycmVudExpc3QuaXRlbXMgJiYgdGhpcy5wcm9wcy5jdXJyZW50TGlzdC5pdGVtcy5jb3VudCxcblx0XHRcdH0sXG5cdFx0fSwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuXHRcdFx0ZGF0YS5yZXN1bHRzLmZvckVhY2goaXRlbSA9PiB7XG5cdFx0XHRcdGNoZWNrZWRJdGVtc1tpdGVtLmlkXSA9IHRydWU7XG5cdFx0XHR9KTtcblx0XHRcdHNlbGYuc2V0U3RhdGUoe1xuXHRcdFx0XHRjaGVja2VkSXRlbXM6IGNoZWNrZWRJdGVtcyxcblx0XHRcdFx0c2VsZWN0QWxsSXRlbXNMb2FkaW5nOiBmYWxzZSxcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9LFxuXHR1bmNoZWNrQWxsVGFibGVJdGVtcygpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGNoZWNrZWRJdGVtczoge30sXG5cdFx0fSk7XG5cdH0sXG5cdGRlbGV0ZVRhYmxlSXRlbShpdGVtLCBlKSB7XG5cdFx0aWYgKGUuYWx0S2V5KSB7XG5cdFx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGRlbGV0ZUl0ZW0oaXRlbS5pZCkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGNvbnN0IGxpc3QgPSB0aGlzLnByb3BzLmN1cnJlbnRMaXN0O1xuXG5cdFx0bGV0IG1lc3NhZ2UgPSBgQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSA8c3Ryb25nPiR7aXRlbS5uYW1lfTwvc3Ryb25nPj9gO1xuXG5cblxuXHRcdGlmIChsaXN0LmRlbGV0ZVByb21wdCkge1xuXHRcdFx0bWVzc2FnZSA9IGxpc3QuZGVsZXRlUHJvbXB0O1xuXHRcdH1cblxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Y29uZmlybWF0aW9uRGlhbG9nOiB7XG5cdFx0XHRcdGlzT3BlbjogdHJ1ZSxcblx0XHRcdFx0bGFiZWw6ICdEZWxldGUnLFxuXHRcdFx0XHRib2R5OiAoXG5cdFx0XHRcdFx0PGRpdj5cblx0XHRcdFx0XHRcdDxzcGFuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogbWVzc2FnZSB9fSAvPlxuXHRcdFx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0XHRcdFRoaXMgY2Fubm90IGJlIHVuZG9uZS5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0KSxcblx0XHRcdFx0b25Db25maXJtYXRpb246ICgpID0+IHtcblx0XHRcdFx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGRlbGV0ZUl0ZW0oaXRlbS5pZCkpO1xuXHRcdFx0XHRcdHRoaXMucmVtb3ZlQ29uZmlybWF0aW9uRGlhbG9nKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9LFxuXHRyZW1vdmVDb25maXJtYXRpb25EaWFsb2coKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRjb25maXJtYXRpb25EaWFsb2c6IHtcblx0XHRcdFx0aXNPcGVuOiBmYWxzZSxcblx0XHRcdH0sXG5cdFx0fSk7XG5cdH0sXG5cdHRvZ2dsZVRhYmxlV2lkdGgoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRjb25zdHJhaW5UYWJsZVdpZHRoOiAhdGhpcy5zdGF0ZS5jb25zdHJhaW5UYWJsZVdpZHRoLFxuXHRcdH0pO1xuXHR9LFxuXG5cdC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQvLyBDT01NT05cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblx0aGFuZGxlU29ydFNlbGVjdChwYXRoLCBpbnZlcnRlZCkge1xuXHRcdGlmIChpbnZlcnRlZCkgcGF0aCA9ICctJyArIHBhdGg7XG5cdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChzZXRBY3RpdmVTb3J0KHBhdGgpKTtcblx0fSxcblx0dG9nZ2xlQ3JlYXRlTW9kYWwodmlzaWJsZSkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0c2hvd0NyZWF0ZUZvcm06IHZpc2libGUsXG5cdFx0XHRzaG93SWZyYW1lOiB2aXNpYmxlLCAvLyBDdXN0b20gQWN0aW9uIFZpZXdcblx0XHR9KTtcblx0fSxcblx0b3BlbkNyZWF0ZU1vZGFsKCkge1xuXHRcdHRoaXMudG9nZ2xlQ3JlYXRlTW9kYWwodHJ1ZSk7XG5cdH0sXG5cdGNsb3NlQ3JlYXRlTW9kYWwoKSB7XG5cdFx0dGhpcy50b2dnbGVDcmVhdGVNb2RhbChmYWxzZSk7XG5cdH0sXG5cdHNob3dCbGFua1N0YXRlKCkge1xuXHRcdHJldHVybiAhdGhpcy5wcm9wcy5sb2FkaW5nXG5cdFx0XHQmJiAhdGhpcy5wcm9wcy5pdGVtcy5yZXN1bHRzLmxlbmd0aFxuXHRcdFx0JiYgIXRoaXMucHJvcHMuYWN0aXZlLnNlYXJjaFxuXHRcdFx0JiYgIXRoaXMucHJvcHMuYWN0aXZlLmZpbHRlcnMubGVuZ3RoO1xuXHR9LFxuXHRyZW5kZXJCbGFua1N0YXRlKCkge1xuXHRcdGNvbnN0IHsgY3VycmVudExpc3QgfSA9IHRoaXMucHJvcHM7XG5cblx0XHRpZiAoIXRoaXMuc2hvd0JsYW5rU3RhdGUoKSkgcmV0dXJuIG51bGw7XG5cblx0XHQvLyBjcmVhdGUgYW5kIG5hdiBkaXJlY3RseSB0byB0aGUgaXRlbSB2aWV3LCBvciBvcGVuIHRoZSBjcmVhdGUgbW9kYWxcblx0XHRjb25zdCBvbkNsaWNrID0gY3VycmVudExpc3QuYXV0b2NyZWF0ZVxuXHRcdFx0PyB0aGlzLmNyZWF0ZUF1dG9jcmVhdGVcblx0XHRcdDogdGhpcy5vcGVuQ3JlYXRlTW9kYWw7XG5cblx0XHQvLyBkaXNwbGF5IHRoZSBidXR0b24gaWYgY3JlYXRlIGFsbG93ZWRcblx0XHRjb25zdCBidXR0b24gPSAhY3VycmVudExpc3Qubm9jcmVhdGUgPyAoXG5cdFx0XHQ8R2x5cGhCdXR0b24gY29sb3I9XCJzdWNjZXNzXCIgZ2x5cGg9XCJwbHVzXCIgcG9zaXRpb249XCJsZWZ0XCIgb25DbGljaz17b25DbGlja30gZGF0YS1lMmUtbGlzdC1jcmVhdGUtYnV0dG9uPVwibm8tcmVzdWx0c1wiPlxuXHRcdFx0XHRDcmVhdGUge2N1cnJlbnRMaXN0LnNpbmd1bGFyfVxuXHRcdFx0PC9HbHlwaEJ1dHRvbj5cblx0XHQpIDogbnVsbDtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8Q29udGFpbmVyPlxuXHRcdFx0XHR7KHRoaXMucHJvcHMuZXJyb3IpID8gKFxuXHRcdFx0XHRcdDxGbGFzaE1lc3NhZ2VzXG5cdFx0XHRcdFx0XHRtZXNzYWdlcz17e1xuXHRcdFx0XHRcdFx0XHRlcnJvcjogW3tcblx0XHRcdFx0XHRcdFx0XHR0aXRsZTogXCJUaGVyZSBpcyBhIHByb2JsZW0gd2l0aCB0aGUgbmV0d29yaywgd2UncmUgdHJ5aW5nIHRvIHJlY29ubmVjdC4uLlwiLFxuXHRcdFx0XHRcdFx0XHR9XSxcblx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0KSA6IG51bGx9XG5cdFx0XHRcdDxCbGFua1N0YXRlIGhlYWRpbmc9e2BObyAke3RoaXMucHJvcHMuY3VycmVudExpc3QucGx1cmFsLnRvTG93ZXJDYXNlKCl9IGZvdW5kLi4uYH0gc3R5bGU9e3sgbWFyZ2luVG9wOiA0MCB9fT5cblx0XHRcdFx0XHR7YnV0dG9ufVxuXHRcdFx0XHQ8L0JsYW5rU3RhdGU+XG5cdFx0XHQ8L0NvbnRhaW5lcj5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXJBY3RpdmVTdGF0ZSgpIHtcblx0XHRpZiAodGhpcy5zaG93QmxhbmtTdGF0ZSgpKSByZXR1cm4gbnVsbDtcblxuXHRcdGNvbnN0IGNvbnRhaW5lclN0eWxlID0ge1xuXHRcdFx0dHJhbnNpdGlvbjogJ21heC13aWR0aCAxNjBtcyBlYXNlLW91dCcsXG5cdFx0XHRtc1RyYW5zaXRpb246ICdtYXgtd2lkdGggMTYwbXMgZWFzZS1vdXQnLFxuXHRcdFx0TW96VHJhbnNpdGlvbjogJ21heC13aWR0aCAxNjBtcyBlYXNlLW91dCcsXG5cdFx0XHRXZWJraXRUcmFuc2l0aW9uOiAnbWF4LXdpZHRoIDE2MG1zIGVhc2Utb3V0Jyxcblx0XHR9O1xuXHRcdGlmICghdGhpcy5zdGF0ZS5jb25zdHJhaW5UYWJsZVdpZHRoKSB7XG5cdFx0XHRjb250YWluZXJTdHlsZS5tYXhXaWR0aCA9ICcxMDAlJztcblx0XHR9XG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXY+XG5cdFx0XHRcdHt0aGlzLnJlbmRlckhlYWRlcigpfVxuXHRcdFx0XHQ8Q29udGFpbmVyPlxuXHRcdFx0XHRcdDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiAzNSwgbWFyZ2luQm90dG9tOiAnMWVtJywgbWFyZ2luVG9wOiAnMWVtJyB9fT5cblx0XHRcdFx0XHRcdHt0aGlzLnJlbmRlck1hbmFnZW1lbnQoKX1cblx0XHRcdFx0XHRcdHt0aGlzLnJlbmRlclBhZ2luYXRpb24oKX1cblx0XHRcdFx0XHRcdDxzcGFuIHN0eWxlPXt7IGNsZWFyOiAnYm90aCcsIGRpc3BsYXk6ICd0YWJsZScgfX0gLz5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9Db250YWluZXI+XG5cdFx0XHRcdDxDb250YWluZXIgc3R5bGU9e2NvbnRhaW5lclN0eWxlfT5cblx0XHRcdFx0XHR7KHRoaXMucHJvcHMuZXJyb3IpID8gKFxuXHRcdFx0XHRcdFx0PEZsYXNoTWVzc2FnZXNcblx0XHRcdFx0XHRcdFx0bWVzc2FnZXM9e3tcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogW3tcblx0XHRcdFx0XHRcdFx0XHRcdHRpdGxlOiBcIlRoZXJlIGlzIGEgcHJvYmxlbSB3aXRoIHRoZSBuZXR3b3JrLCB3ZSdyZSB0cnlpbmcgdG8gcmVjb25uZWN0Li5cIixcblx0XHRcdFx0XHRcdFx0XHR9XSxcblx0XHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0KSA6IG51bGx9XG5cdFx0XHRcdFx0eyh0aGlzLnByb3BzLmxvYWRpbmcpID8gKFxuXHRcdFx0XHRcdFx0PENlbnRlciBoZWlnaHQ9XCI1MHZoXCI+XG5cdFx0XHRcdFx0XHRcdDxTcGlubmVyIC8+XG5cdFx0XHRcdFx0XHQ8L0NlbnRlcj5cblx0XHRcdFx0XHQpIDogKFxuXHRcdFx0XHRcdFx0XHQ8ZGl2PlxuXHRcdFx0XHRcdFx0XHRcdDxJdGVtc1RhYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRhY3RpdmVTb3J0PXt0aGlzLnByb3BzLmFjdGl2ZS5zb3J0fVxuXHRcdFx0XHRcdFx0XHRcdFx0Y2hlY2tlZEl0ZW1zPXt0aGlzLnN0YXRlLmNoZWNrZWRJdGVtc31cblx0XHRcdFx0XHRcdFx0XHRcdGNoZWNrVGFibGVJdGVtPXt0aGlzLmNoZWNrVGFibGVJdGVtfVxuXHRcdFx0XHRcdFx0XHRcdFx0Y29sdW1ucz17dGhpcy5wcm9wcy5hY3RpdmUuY29sdW1uc31cblx0XHRcdFx0XHRcdFx0XHRcdGRlbGV0ZVRhYmxlSXRlbT17dGhpcy5kZWxldGVUYWJsZUl0ZW19XG5cdFx0XHRcdFx0XHRcdFx0XHRoYW5kbGVTb3J0U2VsZWN0PXt0aGlzLmhhbmRsZVNvcnRTZWxlY3R9XG5cdFx0XHRcdFx0XHRcdFx0XHRpdGVtcz17dGhpcy5wcm9wcy5pdGVtc31cblx0XHRcdFx0XHRcdFx0XHRcdGxpc3Q9e3RoaXMucHJvcHMuY3VycmVudExpc3R9XG5cdFx0XHRcdFx0XHRcdFx0XHRtYW5hZ2VNb2RlPXt0aGlzLnN0YXRlLm1hbmFnZU1vZGV9XG5cdFx0XHRcdFx0XHRcdFx0XHRyb3dBbGVydD17dGhpcy5wcm9wcy5yb3dBbGVydH1cblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRQYWdlPXt0aGlzLnByb3BzLmxpc3RzLnBhZ2UuaW5kZXh9XG5cdFx0XHRcdFx0XHRcdFx0XHRwYWdlU2l6ZT17dGhpcy5wcm9wcy5saXN0cy5wYWdlLnNpemV9XG5cdFx0XHRcdFx0XHRcdFx0XHRkcmFnPXt0aGlzLnByb3BzLmxpc3RzLmRyYWd9XG5cdFx0XHRcdFx0XHRcdFx0XHRkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cblx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHRcdHt0aGlzLnJlbmRlck5vU2VhcmNoUmVzdWx0cygpfVxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdDwvQ29udGFpbmVyPlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcblx0cmVuZGVyTm9TZWFyY2hSZXN1bHRzKCkge1xuXHRcdGlmICh0aGlzLnByb3BzLml0ZW1zLnJlc3VsdHMubGVuZ3RoKSByZXR1cm4gbnVsbDtcblx0XHRsZXQgbWF0Y2hpbmcgPSB0aGlzLnByb3BzLmFjdGl2ZS5zZWFyY2g7XG5cdFx0aWYgKHRoaXMucHJvcHMuYWN0aXZlLmZpbHRlcnMubGVuZ3RoKSB7XG5cdFx0XHRtYXRjaGluZyArPSAobWF0Y2hpbmcgPyAnIGFuZCAnIDogJycpICsgcGx1cmFsaXplKHRoaXMucHJvcHMuYWN0aXZlLmZpbHRlcnMubGVuZ3RoLCAnKiBmaWx0ZXInLCAnKiBmaWx0ZXJzJyk7XG5cdFx0fVxuXHRcdG1hdGNoaW5nID0gbWF0Y2hpbmcgPyAnIGZvdW5kIG1hdGNoaW5nICcgKyBtYXRjaGluZyA6ICcuJztcblx0XHRyZXR1cm4gKFxuXHRcdFx0PEJsYW5rU3RhdGUgc3R5bGU9e3sgbWFyZ2luVG9wOiAyMCwgbWFyZ2luQm90dG9tOiAyMCB9fT5cblx0XHRcdFx0PEdseXBoXG5cdFx0XHRcdFx0bmFtZT1cInNlYXJjaFwiXG5cdFx0XHRcdFx0c2l6ZT1cIm1lZGl1bVwiXG5cdFx0XHRcdFx0c3R5bGU9e3sgbWFyZ2luQm90dG9tOiAyMCB9fVxuXHRcdFx0XHQvPlxuXHRcdFx0XHQ8aDIgc3R5bGU9e3sgY29sb3I6ICdpbmhlcml0JyB9fT5cblx0XHRcdFx0XHRObyB7dGhpcy5wcm9wcy5jdXJyZW50TGlzdC5wbHVyYWwudG9Mb3dlckNhc2UoKX17bWF0Y2hpbmd9XG5cdFx0XHRcdDwvaDI+XG5cdFx0XHQ8L0JsYW5rU3RhdGU+XG5cdFx0KTtcblx0fSxcblx0Y3VzdG9tQ3JlYXRlQnV0dG9uKGFjdGlvbl90eXBlKSB7XG5cdFx0bGV0IGFjdGlvbiA9IHRoaXMucHJvcHMubGlzdHMuY3VycmVudExpc3QgJiYgdGhpcy5wcm9wcy5saXN0cy5jdXJyZW50TGlzdC5saW5rICYmIHRoaXMucHJvcHMubGlzdHMuY3VycmVudExpc3QubGluay5jcmVhdGU7XG5cdFx0YWN0aW9uID0gKGFjdGlvbi5sZW5ndGggJiYgYWN0aW9uWzBdID09PSAnLycpID8gYWN0aW9uLnNsaWNlKDEpIDogYWN0aW9uO1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0c2hvd0lmcmFtZTogdHJ1ZSxcblx0XHRcdGFjdGlvbl91cmw6IGFjdGlvbixcblx0XHRcdGlkOiBhY3Rpb25fdHlwZSxcblx0XHR9KTtcblx0fSxcblx0cmVuZGVySWZyYW1lVmlldygpIHsgLy8gQ3VzdG9tIEFjdGlvbiBWaWV3XG5cdFx0Y29uc3QgeyBhY3Rpb25fdXJsLCBpZCB9ID0gdGhpcy5zdGF0ZTtcblx0XHRjb25zdCBpZnJhbWVVUkwgPSBgJHtLZXlzdG9uZS5leHRlcm5hbEhvc3R9LyR7YWN0aW9uX3VybH0vJHtpZH1gO1xuXHRcdHJldHVybiA8SWZyYW1lQ29udGVudCBzcmM9e2lmcmFtZVVSTH0gc2hvdz17dGhpcy5zdGF0ZS5zaG93SWZyYW1lfSBvbkNhbmNlbD17dGhpcy5jbG9zZUNyZWF0ZU1vZGFsfSBvblNhdmU9e3RoaXMub25DcmVhdGV9IGNsYXNzTmFtZT17XCJmdWxsLXNjcmVlblwifSAvPjtcblx0fSxcblx0cmVuZGVyKCkge1xuXHRcdGlmICghdGhpcy5wcm9wcy5yZWFkeSkge1xuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0PENlbnRlciBoZWlnaHQ9XCI1MHZoXCIgZGF0YS1zY3JlZW4taWQ9XCJsaXN0XCI+XG5cdFx0XHRcdFx0PFNwaW5uZXIgLz5cblx0XHRcdFx0PC9DZW50ZXI+XG5cdFx0XHQpO1xuXHRcdH1cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBkYXRhLXNjcmVlbi1pZD1cImxpc3RcIj5cblx0XHRcdFx0e3RoaXMucmVuZGVySWZyYW1lVmlldygpfVxuXHRcdFx0XHR7KHRoaXMuc3RhdGUuYWxlcnRzKSA/IDxBbGVydE1lc3NhZ2VzIGFsZXJ0cz17dGhpcy5zdGF0ZS5hbGVydHN9IC8+IDogbnVsbH1cblx0XHRcdFx0e3RoaXMucmVuZGVyQmxhbmtTdGF0ZSgpfVxuXHRcdFx0XHR7dGhpcy5yZW5kZXJBY3RpdmVTdGF0ZSgpfVxuXHRcdFx0XHQ8Q3JlYXRlRm9ybVxuXHRcdFx0XHRcdGVycj17S2V5c3RvbmUuY3JlYXRlRm9ybUVycm9yc31cblx0XHRcdFx0XHRpc09wZW49e3RoaXMuc3RhdGUuc2hvd0NyZWF0ZUZvcm19XG5cdFx0XHRcdFx0bGlzdD17dGhpcy5wcm9wcy5jdXJyZW50TGlzdH1cblx0XHRcdFx0XHRvbkNhbmNlbD17dGhpcy5jbG9zZUNyZWF0ZU1vZGFsfVxuXHRcdFx0XHRcdG9uQ3JlYXRlPXt0aGlzLm9uQ3JlYXRlfVxuXHRcdFx0XHQvPlxuXHRcdFx0XHQ8VXBkYXRlRm9ybVxuXHRcdFx0XHRcdGlzT3Blbj17dGhpcy5zdGF0ZS5zaG93VXBkYXRlRm9ybX1cblx0XHRcdFx0XHRpdGVtSWRzPXtPYmplY3Qua2V5cyh0aGlzLnN0YXRlLmNoZWNrZWRJdGVtcyl9XG5cdFx0XHRcdFx0bGlzdD17dGhpcy5wcm9wcy5jdXJyZW50TGlzdH1cblx0XHRcdFx0XHRvbkNhbmNlbD17KCkgPT4gdGhpcy50b2dnbGVVcGRhdGVNb2RhbChmYWxzZSl9XG5cdFx0XHRcdC8+XG5cdFx0XHRcdHt0aGlzLnJlbmRlckNvbmZpcm1hdGlvbkRpYWxvZygpfVxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbm5lY3QoKHN0YXRlKSA9PiB7XG5cdHJldHVybiB7XG5cdFx0bGlzdHM6IHN0YXRlLmxpc3RzLFxuXHRcdGxvYWRpbmc6IHN0YXRlLmxpc3RzLmxvYWRpbmcsXG5cdFx0ZXJyb3I6IHN0YXRlLmxpc3RzLmVycm9yLFxuXHRcdGN1cnJlbnRMaXN0OiBzdGF0ZS5saXN0cy5jdXJyZW50TGlzdCxcblx0XHRpdGVtczogc3RhdGUubGlzdHMuaXRlbXMsXG5cdFx0cGFnZTogc3RhdGUubGlzdHMucGFnZSxcblx0XHRyZWFkeTogc3RhdGUubGlzdHMucmVhZHksXG5cdFx0cm93QWxlcnQ6IHN0YXRlLmxpc3RzLnJvd0FsZXJ0LFxuXHRcdGFjdGl2ZTogc3RhdGUuYWN0aXZlLFxuXHR9O1xufSkoTGlzdFZpZXcpO1xuIiwiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcclxuaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcclxuXHJcbmltcG9ydCB7XHJcblx0QUREX0ZJTFRFUixcclxuXHRDTEVBUl9GSUxURVIsXHJcblx0Q0xFQVJfQUxMX0ZJTFRFUlMsXHJcblx0U0VUX0FDVElWRV9TRUFSQ0gsXHJcblx0U0VUX0FDVElWRV9TT1JULFxyXG5cdFNFVF9BQ1RJVkVfQ09MVU1OUyxcclxuXHRTRVRfQUNUSVZFX0xJU1QsXHJcblx0U0VUX0ZJTFRFUlMsXHJcblx0UVVFUllfSEFTX0NIQU5HRUQsXHJcblx0UkVQTEFDRV9DQUNIRURfUVVFUlksXHJcblx0Q0xFQVJfQ0FDSEVEX1FVRVJZLFxyXG59IGZyb20gJy4uL2NvbnN0YW50cyc7XHJcblxyXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XHJcblx0Y29sdW1uczogW10sXHJcblx0ZmlsdGVyczogW10sXHJcblx0c2VhcmNoOiAnJyxcclxuXHRzb3J0OiB7XHJcblx0XHRpbnB1dDogJycsXHJcblx0XHRpc0RlZmF1bHRTb3J0OiBmYWxzZSxcclxuXHRcdHBhdGhzOiBbXSxcclxuXHRcdHJhd0lucHV0OiAnJyxcclxuXHR9LFxyXG5cdGNhY2hlZFF1ZXJ5OiB7fSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNYW5hZ2UgdGhlIGFjdGl2ZSBzdGF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gYWN0aXZlIChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSB7XHJcblx0c3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG5cdFx0Y2FzZSBTRVRfQUNUSVZFX0xJU1Q6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0aWQ6IGFjdGlvbi5pZCxcclxuXHRcdFx0XHRjb2x1bW5zOiBhY3Rpb24ubGlzdC5leHBhbmRDb2x1bW5zKGFjdGlvbi5saXN0LmRlZmF1bHRDb2x1bW5zKSxcclxuXHRcdFx0XHRmaWx0ZXJzOiBbXSxcclxuXHRcdFx0XHRzZWFyY2g6ICcnLFxyXG5cdFx0XHRcdHNvcnQ6IGFjdGlvbi5saXN0LmV4cGFuZFNvcnQoYWN0aW9uLmxpc3QuZGVmYXVsdFNvcnQpLFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgU0VUX0FDVElWRV9TRUFSQ0g6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0c2VhcmNoOiBhY3Rpb24uc2VhcmNoU3RyaW5nLFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgU0VUX0FDVElWRV9TT1JUOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdHNvcnQ6IGFjdGlvbi5zb3J0LFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgU0VUX0FDVElWRV9DT0xVTU5TOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGNvbHVtbnM6IGFjdGlvbi5jb2x1bW5zLFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgQUREX0ZJTFRFUjpcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHQvLyBPdmVycmlkZSBleGlzdGluZyBmaWx0ZXIgd2l0aCBmaWVsZCBwYXRoLFxyXG5cdFx0XHRcdC8vIG90aGVyd2lzZSBhZGQgdG8gZmlsdGVycyBhcnJheVxyXG5cdFx0XHRcdGZpbHRlcnM6IF8udW5pb25XaXRoKFthY3Rpb24uZmlsdGVyXSwgc3RhdGUuZmlsdGVycywgKHN0YXRlRmlsdGVyLCBhY3Rpb25GaWx0ZXIpID0+IHtcclxuXHRcdFx0XHRcdHJldHVybiBzdGF0ZUZpbHRlci5maWVsZC5wYXRoID09PSBhY3Rpb25GaWx0ZXIuZmllbGQucGF0aDtcclxuXHRcdFx0XHR9KSxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIFNFVF9GSUxURVJTOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGZpbHRlcnM6IGFjdGlvbi5maWx0ZXJzLFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgQ0xFQVJfRklMVEVSOlxyXG5cdFx0XHRsZXQgbmV3RmlsdGVycyA9IF8uZmlsdGVyKHN0YXRlLmZpbHRlcnMsIChmaWx0ZXIpID0+IHtcclxuXHRcdFx0XHRyZXR1cm4gZmlsdGVyLmZpZWxkLnBhdGggIT09IGFjdGlvbi5wYXRoO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRmaWx0ZXJzOiBuZXdGaWx0ZXJzLFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgQ0xFQVJfQUxMX0ZJTFRFUlM6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0ZmlsdGVyczogW10sXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBRVUVSWV9IQVNfQ0hBTkdFRDpcclxuXHRcdFx0Y29uc3Qge1xyXG5cdFx0XHRcdHNlYXJjaCxcclxuXHRcdFx0XHRzb3J0LFxyXG5cdFx0XHRcdGZpbHRlcnMsXHJcblx0XHRcdFx0Y29sdW1ucyxcclxuXHRcdFx0fSA9IGFjdGlvbi5wYXJzZWRRdWVyeTtcclxuXHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0c2VhcmNoLFxyXG5cdFx0XHRcdHNvcnQ6IHNvcnQgfHwgaW5pdGlhbFN0YXRlLnNvcnQsXHJcblx0XHRcdFx0ZmlsdGVyczogZmlsdGVycyB8fCBpbml0aWFsU3RhdGUuZmlsdGVycyxcclxuXHRcdFx0XHRjb2x1bW5zOiBjb2x1bW5zIHx8IGluaXRpYWxTdGF0ZS5jb2x1bW5zLFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgUkVQTEFDRV9DQUNIRURfUVVFUlk6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0Y2FjaGVkUXVlcnk6IGFjdGlvbi5jYWNoZWRRdWVyeSxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIENMRUFSX0NBQ0hFRF9RVUVSWTpcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRjYWNoZWRRdWVyeToge30sXHJcblx0XHRcdH0pO1xyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0cmV0dXJuIHN0YXRlO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWN0aXZlO1xyXG4iLCJpbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xyXG5pbXBvcnQgTGlzdCBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9MaXN0JztcclxuaW1wb3J0IHtcclxuXHRTRUxFQ1RfTElTVCxcclxuXHRJVEVNU19MT0FERUQsXHJcblx0TE9BRF9JVEVNUyxcclxuXHRJVEVNX0xPQURJTkdfRVJST1IsXHJcblx0U0VUX0NVUlJFTlRfUEFHRSxcclxuXHRRVUVSWV9IQVNfQ0hBTkdFRCxcclxuXHRTRVRfUk9XX0FMRVJULFxyXG5cdFJFU0VUX0RSQUdfUEFHRSxcclxuXHRSRVNFVF9EUkFHX0lURU1TLFxyXG5cdFNFVF9EUkFHX0lURU0sXHJcblx0U0VUX0RSQUdfSU5ERVgsXHJcblx0RFJBR19NT1ZFX0lURU0sXHJcbn0gZnJvbSAnLi4vY29uc3RhbnRzJztcclxuXHJcbmltcG9ydCB7XHJcblx0REVMRVRFX0lURU0sXHJcbn0gZnJvbSAnLi4vLi4vSXRlbS9jb25zdGFudHMnO1xyXG5cclxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xyXG5cdGxvYWRpbmdSZWY6IG51bGwsXHJcblx0bG9hZENvdW50ZXI6IDAsXHJcblx0Y3VycmVudExpc3Q6IG51bGwsXHJcblx0bG9hZGluZzogZmFsc2UsXHJcblx0cmVhZHk6IGZhbHNlLFxyXG5cdGVycm9yOiBudWxsLFxyXG5cdGRhdGE6IHt9LFxyXG5cdGl0ZW1zOiB7XHJcblx0XHRyZXN1bHRzOiBbXSxcclxuXHRcdGNvdW50OiBudWxsLFxyXG5cdH0sXHJcblx0cGFnZToge1xyXG5cdFx0c2l6ZTogbnVsbCxcclxuXHRcdGluZGV4OiB1bmRlZmluZWQsXHJcblx0fSxcclxuXHRyb3dBbGVydDoge1xyXG5cdFx0c3VjY2VzczogZmFsc2UsXHJcblx0XHRmYWlsOiBmYWxzZSxcclxuXHR9LFxyXG5cdGRyYWc6IHtcclxuXHRcdHBhZ2U6IDEsXHJcblx0XHRpdGVtOiBmYWxzZSxcclxuXHRcdGNsb25lZEl0ZW1zOiBmYWxzZSxcclxuXHRcdGluZGV4OiBmYWxzZSxcclxuXHR9LFxyXG59O1xyXG5cclxuLy8gUmVrZXkgdGhlIGxpc3RzIGluIHRoZSBzdGF0ZSB3aXRoIHRoZWlyIHBhdGhzIGZvciBlYXNpZXIgbWF0Y2hpbmcgd2l0aCB0aGVcclxuLy8gVVJMIHBhcmFtZXRlcnNcclxuY29uc3QgaW5pdGlhbExpc3RzID0gS2V5c3RvbmUubGlzdHM7XHJcbmZvciAoY29uc3QgbmFtZSBpbiBpbml0aWFsTGlzdHMpIHtcclxuXHRpZiAoe30uaGFzT3duUHJvcGVydHkuY2FsbChpbml0aWFsTGlzdHMsIG5hbWUpKSB7XHJcblx0XHRjb25zdCBjdXJyZW50TGlzdCA9IGluaXRpYWxMaXN0c1tuYW1lXTtcclxuXHRcdGluaXRpYWxTdGF0ZS5kYXRhW2N1cnJlbnRMaXN0LnBhdGhdID0gbmV3IExpc3QoY3VycmVudExpc3QpO1xyXG5cdFx0aW5pdGlhbFN0YXRlLmRhdGFbY3VycmVudExpc3QucGF0aF0uaXRlbXMgPSB7XHJcblx0XHRcdHJlc3VsdHM6IFtdLFxyXG5cdFx0XHRjb3VudDogbnVsbCxcclxuXHRcdH07XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogTWFuYWdlIGFsbCBsaXN0c1xyXG4gKi9cclxuZnVuY3Rpb24gbGlzdHMgKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pIHtcclxuXHRzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcblx0XHRjYXNlIFNFTEVDVF9MSVNUOlxyXG5cdFx0XHRjb25zdCBsaXN0ID0gc3RhdGUuZGF0YVthY3Rpb24uaWRdO1xyXG5cdFx0XHRsaXN0LmlkID0gYWN0aW9uLmlkO1xyXG5cdFx0XHRsZXQgaXRlbXMgPSB7XHJcblx0XHRcdFx0cmVzdWx0czogW10sXHJcblx0XHRcdFx0Y291bnQ6IG51bGwsXHJcblx0XHRcdH07XHJcblx0XHRcdC8vIElmIHdlIGhhdmUgY2FjaGVkIGl0ZW1zLCBpbnN0ZWFkIG9mIHJlc2V0dGluZyBzdGF0ZS5pdGVtcyBwdXQgdGhlXHJcblx0XHRcdC8vIGNhY2hlZCBpdGVtcyBpbiB0aGUgc3RhdGVcclxuXHRcdFx0aWYgKGxpc3QuaXRlbXMuY291bnQgIT09IG51bGwpIHtcclxuXHRcdFx0XHRpdGVtcyA9IGxpc3QuaXRlbXM7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRjdXJyZW50TGlzdDogbGlzdCxcclxuXHRcdFx0XHRyZWFkeTogZmFsc2UsXHJcblx0XHRcdFx0aXRlbXM6IGl0ZW1zLFxyXG5cdFx0XHRcdHBhZ2U6IHtcclxuXHRcdFx0XHRcdC4uLnN0YXRlLnBhZ2UsXHJcblx0XHRcdFx0XHRpbmRleDogMSxcclxuXHRcdFx0XHRcdHNpemU6IGxpc3QucGVyUGFnZSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgTE9BRF9JVEVNUzpcclxuXHRcdFx0bGV0IGxvYWRpbmcgPSB0cnVlO1xyXG5cdFx0XHRsZXQgcmVhZHkgPSBzdGF0ZS5yZWFkeTtcclxuXHRcdFx0Ly8gSWYgd2UgaGF2ZSBjYWNoZWQgaXRlbXMgcmVhZHksIGRvbid0IHNob3cgYSBsb2FkaW5nIGluZGljYXRvclxyXG5cdFx0XHQvLyB3aGlsZSB3ZSBmZXRjaCB0aGUgbmV3IGl0ZW1zIGluIHRoZSBiYWNrZ3JvdW5kXHJcblx0XHRcdGlmIChzdGF0ZS5pdGVtcy5jb3VudCAhPT0gbnVsbCAmJiBsb2FkaW5nID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdGxvYWRpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHRyZWFkeSA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRsb2FkaW5nLFxyXG5cdFx0XHRcdHJlYWR5LFxyXG5cdFx0XHRcdGxvYWRDb3VudGVyOiBhY3Rpb24ubG9hZENvdW50ZXIsXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBJVEVNU19MT0FERUQ6XHJcblx0XHRcdC8vIENhY2hlIHRoZSBpdGVtcyBpbiBzdGF0ZS5kYXRhIHNvIHdlIGNhbiBzaG93IHRoZSBhbHJlYWR5IGV4aXN0aW5nXHJcblx0XHRcdC8vIGl0ZW1zIG9uIHRoZSBuZXh0IHJvdW5kIHRyaXAgd2hpbGUgZmV0Y2hpbmcgdGhlIG5ldyBpdGVtcyBpbiB0aGVcclxuXHRcdFx0Ly8gYmFja2dyb3VuZFxyXG5cdFx0XHRjb25zdCBjYWNoZWRMaXN0ID0gc3RhdGUuZGF0YVtzdGF0ZS5jdXJyZW50TGlzdC5pZF07XHJcblx0XHRcdGNhY2hlZExpc3QuaXRlbXMgPSBhY3Rpb24uaXRlbXM7XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0bG9hZGluZzogZmFsc2UsXHJcblx0XHRcdFx0cmVhZHk6IHRydWUsXHJcblx0XHRcdFx0ZXJyb3I6IG51bGwsXHJcblx0XHRcdFx0aXRlbXM6IGFjdGlvbi5pdGVtcyxcclxuXHRcdFx0XHRkYXRhOiB7XHJcblx0XHRcdFx0XHQuLi5zdGF0ZS5kYXRhLFxyXG5cdFx0XHRcdFx0W3N0YXRlLmN1cnJlbnRMaXN0LmlkXTogY2FjaGVkTGlzdCxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGxvYWRDb3VudGVyOiAwLFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgSVRFTV9MT0FESU5HX0VSUk9SOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGxvYWRpbmc6IHRydWUsXHJcblx0XHRcdFx0cmVhZHk6IHRydWUsXHJcblx0XHRcdFx0ZXJyb3I6IGFjdGlvbi5lcnIsXHJcblx0XHRcdFx0bG9hZENvdW50ZXI6IDAsXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBERUxFVEVfSVRFTTpcclxuXHRcdFx0Y29uc3QgbmV3SXRlbXMgPSB7XHJcblx0XHRcdFx0cmVzdWx0czogc3RhdGUuaXRlbXMucmVzdWx0cy5maWx0ZXIoKGVsKSA9PiAoZWwuaWQgIT09IGFjdGlvbi5pZCkpLFxyXG5cdFx0XHRcdGNvdW50OiBzdGF0ZS5pdGVtcy5jb3VudCAtIDEsXHJcblx0XHRcdH07XHJcblx0XHRcdGNvbnN0IG5ld0NhY2hlZExpc3QgPSBzdGF0ZS5kYXRhW3N0YXRlLmN1cnJlbnRMaXN0LmlkXTtcclxuXHRcdFx0bmV3Q2FjaGVkTGlzdC5pdGVtcyA9IG5ld0l0ZW1zO1xyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGl0ZW1zOiBuZXdJdGVtcyxcclxuXHRcdFx0XHRkYXRhOiB7XHJcblx0XHRcdFx0XHQuLi5zdGF0ZS5kYXRhLFxyXG5cdFx0XHRcdFx0W3N0YXRlLmN1cnJlbnRMaXN0LmlkXTogbmV3Q2FjaGVkTGlzdCxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgU0VUX0NVUlJFTlRfUEFHRTpcclxuXHRcdFx0Y29uc29sZS5sb2coYWN0aW9uLmluZGV4KTtcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRsb2FkaW5nOiB0cnVlLFxyXG5cdFx0XHRcdHBhZ2U6IHtcclxuXHRcdFx0XHRcdC4uLnN0YXRlLnBhZ2UsXHJcblx0XHRcdFx0XHRpbmRleDogYWN0aW9uLmluZGV4LFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBTRVRfUk9XX0FMRVJUOlxyXG5cdFx0XHRpZiAoYWN0aW9uLmRhdGEucmVzZXQgPT09IHRydWUpIHtcclxuXHRcdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdFx0cm93QWxlcnQ6IHtcclxuXHRcdFx0XHRcdFx0c3VjY2VzczogZmFsc2UsXHJcblx0XHRcdFx0XHRcdGZhaWw6IGZhbHNlLFxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdHJvd0FsZXJ0OiB7XHJcblx0XHRcdFx0XHQuLi5zdGF0ZS5yb3dBbGVydCxcclxuXHRcdFx0XHRcdC4uLmFjdGlvbi5kYXRhLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBSRVNFVF9EUkFHX1BBR0U6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0ZHJhZzoge1xyXG5cdFx0XHRcdFx0Li4uc3RhdGUuZHJhZyxcclxuXHRcdFx0XHRcdHBhZ2U6IHN0YXRlLnBhZ2UuaW5kZXgsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIFJFU0VUX0RSQUdfSVRFTVM6XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0ZHJhZzoge1xyXG5cdFx0XHRcdFx0Li4uc3RhdGUuZHJhZyxcclxuXHRcdFx0XHRcdGNsb25lZEl0ZW1zOiBzdGF0ZS5pdGVtcyxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9KTtcclxuXHRcdGNhc2UgU0VUX0RSQUdfSVRFTTpcclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcclxuXHRcdFx0XHRkcmFnOiB7XHJcblx0XHRcdFx0XHQuLi5zdGF0ZS5kcmFnLFxyXG5cdFx0XHRcdFx0aXRlbTogYWN0aW9uLml0ZW0sXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIFNFVF9EUkFHX0lOREVYOlxyXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xyXG5cdFx0XHRcdGRyYWc6IHtcclxuXHRcdFx0XHRcdC4uLnN0YXRlLmRyYWcsXHJcblx0XHRcdFx0XHRpbmRleDogYWN0aW9uLmluZGV4LFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0pO1xyXG5cdFx0Y2FzZSBRVUVSWV9IQVNfQ0hBTkdFRDpcclxuXHRcdFx0Y29uc3QgaW5kZXggPSBwYXJzZUludChhY3Rpb24ucGFyc2VkUXVlcnkuY3VycmVudFBhZ2UpIHx8IDE7XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0bG9hZGluZzogdHJ1ZSxcclxuXHRcdFx0XHRwYWdlOiB7XHJcblx0XHRcdFx0XHQuLi5zdGF0ZS5wYWdlLFxyXG5cdFx0XHRcdFx0aW5kZXgsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSk7XHJcblx0XHRjYXNlIERSQUdfTU9WRV9JVEVNOlxyXG5cdFx0XHQvLyBUT0RPOiBvcHRpb24gdG8gdXNlIG1hbmFnZU1vZGUgZm9yIHNvcnRPcmRlclxyXG5cdFx0XHRjb25zdCBjdXJyZW50SXRlbXMgPSBzdGF0ZS5pdGVtcy5yZXN1bHRzO1xyXG5cdFx0XHRjb25zdCBpdGVtID0gY3VycmVudEl0ZW1zW2FjdGlvbi5wcmV2SW5kZXhdO1xyXG5cdFx0XHQvLyBSZW1vdmUgaXRlbSBhdCBwcmV2SW5kZXggZnJvbSBhcnJheSBhbmQgc2F2ZSB0aGF0IGFycmF5IGluXHJcblx0XHRcdC8vIGl0ZW1zV2l0aG91dEl0ZW1cclxuXHRcdFx0bGV0IGl0ZW1zV2l0aG91dEl0ZW0gPSBjdXJyZW50SXRlbXNcclxuXHRcdFx0XHQuc2xpY2UoMCwgYWN0aW9uLnByZXZJbmRleClcclxuXHRcdFx0XHQuY29uY2F0KFxyXG5cdFx0XHRcdFx0Y3VycmVudEl0ZW1zLnNsaWNlKFxyXG5cdFx0XHRcdFx0XHRhY3Rpb24ucHJldkluZGV4ICsgMSxcclxuXHRcdFx0XHRcdFx0Y3VycmVudEl0ZW1zLmxlbmd0aFxyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdC8vIEFkZCBpdGVtIGJhY2sgaW4gYXQgbmV3IGluZGV4XHJcblx0XHRcdGl0ZW1zV2l0aG91dEl0ZW0uc3BsaWNlKGFjdGlvbi5uZXdJbmRleCwgMCwgaXRlbSk7XHJcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XHJcblx0XHRcdFx0aXRlbXM6IHtcclxuXHRcdFx0XHRcdC4uLnN0YXRlLml0ZW1zLFxyXG5cdFx0XHRcdFx0cmVzdWx0czogaXRlbXNXaXRob3V0SXRlbSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9KTtcclxuXHRcdGRlZmF1bHQ6XHJcblx0XHRcdHJldHVybiBzdGF0ZTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxpc3RzO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBBbGVydCB9IGZyb20gJy4uL2VsZW1lbnRhbCc7XHJcblxyXG5pbXBvcnQgeyB1cGNhc2UgfSBmcm9tICcuLi8uLi91dGlscy9zdHJpbmcnO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgcmVuZGVycyBhbGVydHMgZm9yIEFQSSBzdWNjZXNzIGFuZCBlcnJvciByZXNwb25zZXMuXHJcbiAqICAgRXJyb3IgZm9ybWF0OiB7XHJcbiAqICAgICBlcnJvcjogJ3ZhbGlkYXRpb24gZXJyb3JzJyAvLyBUaGUgdW5pcXVlIGVycm9yIHR5cGUgaWRlbnRpZmllclxyXG4gKiAgICAgZGV0YWlsOiB7IC4uLiB9IC8vIE9wdGlvbmFsIGRldGFpbHMgc3BlY2lmaWMgdG8gdGhhdCBlcnJvciB0eXBlXHJcbiAqICAgfVxyXG4gKiAgIFN1Y2Nlc3MgZm9ybWF0OiB7XHJcbiAqICAgICBzdWNjZXNzOiAnaXRlbSB1cGRhdGVkJywgLy8gVGhlIHVuaXF1ZSBzdWNjZXNzIHR5cGUgaWRlbnRpZmllclxyXG4gKiAgICAgZGV0YWlsczogeyAuLi4gfSAvLyBPcHRpb25hbCBkZXRhaWxzIHNwZWNpZmljIHRvIHRoYXQgc3VjY2VzcyB0eXBlXHJcbiAqICAgfVxyXG4gKiAgIEV2ZW50dWFsbHkgc3VjY2VzcyBhbmQgZXJyb3IgcmVzcG9uc2VzIHNob3VsZCBiZSBoYW5kbGVkIGluZGl2aWR1YWxseVxyXG4gKiAgIGJhc2VkIG9uIHRoZWlyIHR5cGUuIEZvciBleGFtcGxlOiB2YWxpZGF0aW9uIGVycm9ycyBzaG91bGQgYmUgZGlzcGxheWVkIG5leHRcclxuICogICB0byBlYWNoIGludmFsaWQgZmllbGQgYW5kIHNpZ25pbiBlcnJvcnMgc2hvdWxkIHByb210IHRoZSB1c2VyIHRvIHNpZ24gaW4uXHJcbiAqL1xyXG52YXIgQWxlcnRNZXNzYWdlcyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ0FsZXJ0TWVzc2FnZXMnLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0YWxlcnRzOiBSZWFjdC5Qcm9wVHlwZXMuc2hhcGUoe1xyXG5cdFx0XHRlcnJvcjogUmVhY3QuUHJvcFR5cGVzLk9iamVjdCxcclxuXHRcdFx0c3VjY2VzczogUmVhY3QuUHJvcFR5cGVzLk9iamVjdCxcclxuXHRcdH0pLFxyXG5cdH0sXHJcblx0Z2V0RGVmYXVsdFByb3BzICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGFsZXJ0czoge30sXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0cmVuZGVyVmFsaWRhdGlvbkVycm9ycyAoKSB7XHJcblx0XHRsZXQgZXJyb3JzID0gdGhpcy5wcm9wcy5hbGVydHMuZXJyb3IuZGV0YWlsO1xyXG5cdFx0aWYgKGVycm9ycy5uYW1lID09PSAnVmFsaWRhdGlvbkVycm9yJykge1xyXG5cdFx0XHRlcnJvcnMgPSBlcnJvcnMuZXJyb3JzO1xyXG5cdFx0fVxyXG5cdFx0bGV0IGVycm9yQ291bnQgPSBPYmplY3Qua2V5cyhlcnJvcnMpLmxlbmd0aDtcclxuXHRcdGxldCBhbGVydENvbnRlbnQ7XHJcblx0XHRsZXQgbWVzc2FnZXMgPSBPYmplY3Qua2V5cyhlcnJvcnMpLm1hcCgocGF0aCkgPT4ge1xyXG5cdFx0XHRpZiAoZXJyb3JDb3VudCA+IDEpIHtcclxuXHRcdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdFx0PGxpIGtleT17cGF0aH0+XHJcblx0XHRcdFx0XHRcdHt1cGNhc2UoZXJyb3JzW3BhdGhdLmVycm9yIHx8IGVycm9yc1twYXRoXS5tZXNzYWdlKX1cclxuXHRcdFx0XHRcdDwvbGk+XHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdFx0PGRpdiBrZXk9e3BhdGh9PlxyXG5cdFx0XHRcdFx0XHR7dXBjYXNlKGVycm9yc1twYXRoXS5lcnJvciB8fCBlcnJvcnNbcGF0aF0ubWVzc2FnZSl9XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRpZiAoZXJyb3JDb3VudCA+IDEpIHtcclxuXHRcdFx0YWxlcnRDb250ZW50ID0gKFxyXG5cdFx0XHRcdDxkaXY+XHJcblx0XHRcdFx0XHQ8aDQ+VGhlcmUgd2VyZSB7ZXJyb3JDb3VudH0gZXJyb3JzIGNyZWF0aW5nIHRoZSBuZXcgaXRlbTo8L2g0PlxyXG5cdFx0XHRcdFx0PHVsPnttZXNzYWdlc308L3VsPlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0YWxlcnRDb250ZW50ID0gbWVzc2FnZXM7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIDxBbGVydCBjb2xvcj1cImRhbmdlclwiPnthbGVydENvbnRlbnR9PC9BbGVydD47XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0bGV0IHsgZXJyb3IsIHN1Y2Nlc3MgfSA9IHRoaXMucHJvcHMuYWxlcnRzO1xyXG5cdFx0aWYgKGVycm9yKSB7XHJcblx0XHRcdC8vIFJlbmRlciBlcnJvciBhbGVydHNcclxuXHRcdFx0c3dpdGNoIChlcnJvci5lcnJvcikge1xyXG5cdFx0XHRcdGNhc2UgJ3ZhbGlkYXRpb24gZXJyb3JzJzpcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzLnJlbmRlclZhbGlkYXRpb25FcnJvcnMoKTtcclxuXHRcdFx0XHRjYXNlICdlcnJvcic6XHJcblx0XHRcdFx0XHRpZiAoZXJyb3IuZGV0YWlsLm5hbWUgPT09ICdWYWxpZGF0aW9uRXJyb3InKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnJlbmRlclZhbGlkYXRpb25FcnJvcnMoKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiA8QWxlcnQgY29sb3I9XCJkYW5nZXJcIj57dXBjYXNlKGVycm9yLmVycm9yKX08L0FsZXJ0PjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0cmV0dXJuIDxBbGVydCBjb2xvcj1cImRhbmdlclwiPnt1cGNhc2UoZXJyb3IuZXJyb3IpfTwvQWxlcnQ+O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHN1Y2Nlc3MpIHtcclxuXHRcdFx0Ly8gUmVuZGVyIHN1Y2Nlc3MgYWxlcnRzXHJcblx0XHRcdHJldHVybiA8QWxlcnQgY29sb3I9XCJzdWNjZXNzXCI+e3VwY2FzZShzdWNjZXNzLnN1Y2Nlc3MpfTwvQWxlcnQ+O1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBudWxsOyAvLyBObyBhbGVydHMsIHJlbmRlciBub3RoaW5nXHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEFsZXJ0TWVzc2FnZXM7XHJcbiIsIi8qKlxyXG4gKiBSZW5kZXJzIGEgY29uZmlybWF0aW9uIGRpYWxvZyBtb2RhbFxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEJ1dHRvbiwgTW9kYWwgfSBmcm9tICcuLi9lbGVtZW50YWwnO1xyXG5cclxuZnVuY3Rpb24gQ29uZmlybWF0aW9uRGlhbG9nICh7XHJcblx0Y2FuY2VsTGFiZWwsXHJcblx0Y2hpbGRyZW4sXHJcblx0Y29uZmlybWF0aW9uTGFiZWwsXHJcblx0Y29uZmlybWF0aW9uVHlwZSxcclxuXHRodG1sLFxyXG5cdGlzT3BlbixcclxuXHRvbkNhbmNlbCxcclxuXHRvbkNvbmZpcm1hdGlvbixcclxuXHQuLi5wcm9wc1xyXG59KSB7XHJcblx0Ly8gUHJvcGVydHkgVmlvbGF0aW9uXHJcblx0aWYgKGNoaWxkcmVuICYmIGh0bWwpIHtcclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1dhcm5pbmc6IEZvcm1Ob3RlIGNhbm5vdCByZW5kZXIgYGNoaWxkcmVuYCBhbmQgYGh0bWxgLiBZb3UgbXVzdCBwcm92aWRlIG9uZSBvciB0aGUgb3RoZXIuJyk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PE1vZGFsLkRpYWxvZ1xyXG5cdFx0XHRiYWNrZHJvcENsb3Nlc01vZGFsXHJcblx0XHRcdGlzT3Blbj17aXNPcGVufVxyXG5cdFx0XHRvbkNsb3NlPXtvbkNhbmNlbH1cclxuXHRcdFx0d2lkdGg9ezQwMH1cclxuXHRcdD5cclxuXHRcdFx0e2h0bWwgPyAoXHJcblx0XHRcdFx0PE1vZGFsLkJvZHkgey4uLnByb3BzfSBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGh0bWwgfX0gLz5cclxuXHRcdFx0KSA6IChcclxuXHRcdFx0XHQ8TW9kYWwuQm9keSB7Li4ucHJvcHN9PntjaGlsZHJlbn08L01vZGFsLkJvZHk+XHJcblx0XHRcdCl9XHJcblx0XHRcdDxNb2RhbC5Gb290ZXI+XHJcblx0XHRcdFx0PEJ1dHRvbiBhdXRvRm9jdXMgc2l6ZT1cInNtYWxsXCIgZGF0YS1idXR0b24tdHlwZT1cImNvbmZpcm1cIiBjb2xvcj17Y29uZmlybWF0aW9uVHlwZX0gb25DbGljaz17b25Db25maXJtYXRpb259PlxyXG5cdFx0XHRcdFx0e2NvbmZpcm1hdGlvbkxhYmVsfVxyXG5cdFx0XHRcdDwvQnV0dG9uPlxyXG5cdFx0XHRcdDxCdXR0b24gc2l6ZT1cInNtYWxsXCIgZGF0YS1idXR0b24tdHlwZT1cImNhbmNlbFwiIHZhcmlhbnQ9XCJsaW5rXCIgY29sb3I9XCJjYW5jZWxcIiBvbkNsaWNrPXtvbkNhbmNlbH0+XHJcblx0XHRcdFx0XHR7Y2FuY2VsTGFiZWx9XHJcblx0XHRcdFx0PC9CdXR0b24+XHJcblx0XHRcdDwvTW9kYWwuRm9vdGVyPlxyXG5cdFx0PC9Nb2RhbC5EaWFsb2c+XHJcblx0KTtcclxufTtcclxuQ29uZmlybWF0aW9uRGlhbG9nLnByb3BUeXBlcyA9IHtcclxuXHRib2R5OiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdGNhbmNlbExhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdGNvbmZpcm1hdGlvbkxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdGNvbmZpcm1hdGlvblR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ2RhbmdlcicsICdwcmltYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSxcclxuXHRvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmMsXHJcblx0b25Db25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxyXG59O1xyXG5Db25maXJtYXRpb25EaWFsb2cuZGVmYXVsdFByb3BzID0ge1xyXG5cdGNhbmNlbExhYmVsOiAnQ2FuY2VsJyxcclxuXHRjb25maXJtYXRpb25MYWJlbDogJ09rYXknLFxyXG5cdGNvbmZpcm1hdGlvblR5cGU6ICdkYW5nZXInLFxyXG5cdGlzT3BlbjogZmFsc2UsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb25maXJtYXRpb25EaWFsb2c7XHJcbiIsIi8qKlxyXG4gKiBUaGUgZm9ybSB0aGF0J3MgdmlzaWJsZSB3aGVuIFwiQ3JlYXRlIDxJdGVtTmFtZT5cIiBpcyBjbGlja2VkIG9uIGVpdGhlciB0aGVcclxuICogTGlzdCBzY3JlZW4gb3IgdGhlIEl0ZW0gc2NyZWVuXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcclxuaW1wb3J0IHZrZXkgZnJvbSAndmtleSc7XHJcbmltcG9ydCBBbGVydE1lc3NhZ2VzIGZyb20gJy4vQWxlcnRNZXNzYWdlcyc7XHJcbmltcG9ydCB7IEZpZWxkcyB9IGZyb20gJ0ZpZWxkVHlwZXMnO1xyXG5pbXBvcnQgSW52YWxpZEZpZWxkVHlwZSBmcm9tICcuL0ludmFsaWRGaWVsZFR5cGUnO1xyXG5pbXBvcnQgeyBCdXR0b24sIEZvcm0sIE1vZGFsIH0gZnJvbSAnLi4vZWxlbWVudGFsJztcclxuXHJcbmltcG9ydCBJZnJhbWVDb250ZW50IGZyb20gJy4vSWZyYW1lQ29udGVudCc7XHJcblxyXG5jb25zdCBDcmVhdGVGb3JtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnQ3JlYXRlRm9ybScsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRlcnI6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXHJcblx0XHRpc09wZW46IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG5cdFx0bGlzdDogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcclxuXHRcdG9uQ2FuY2VsOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHRcdG9uQ3JlYXRlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHR9LFxyXG5cdGdldERlZmF1bHRQcm9wcyAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRlcnI6IG51bGwsXHJcblx0XHRcdGlzT3BlbjogZmFsc2UsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcclxuXHRcdC8vIFNldCB0aGUgZmllbGQgdmFsdWVzIHRvIHRoZWlyIGRlZmF1bHQgdmFsdWVzIHdoZW4gZmlyc3QgcmVuZGVyaW5nIHRoZVxyXG5cdFx0Ly8gZm9ybS4gKElmIHRoZXkgaGF2ZSBhIGRlZmF1bHQgdmFsdWUsIHRoYXQgaXMpXHJcblx0XHR2YXIgdmFsdWVzID0ge307XHJcblx0XHRPYmplY3Qua2V5cyh0aGlzLnByb3BzLmxpc3QuZmllbGRzKS5mb3JFYWNoKGtleSA9PiB7XHJcblx0XHRcdHZhciBmaWVsZCA9IHRoaXMucHJvcHMubGlzdC5maWVsZHNba2V5XTtcclxuXHRcdFx0dmFyIEZpZWxkQ29tcG9uZW50ID0gRmllbGRzW2ZpZWxkLnR5cGVdO1xyXG5cdFx0XHR2YWx1ZXNbZmllbGQucGF0aF0gPSBGaWVsZENvbXBvbmVudC5nZXREZWZhdWx0VmFsdWUoZmllbGQpO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR2YWx1ZXM6IHZhbHVlcyxcclxuXHRcdFx0YWxlcnRzOiB7fSxcclxuXHRcdFx0c2hvd0lmcmFtZTogZmFsc2VcclxuXHRcdH07XHJcblx0fSxcclxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XHJcblx0XHRpZih0aGlzLnByb3BzLmxpc3QubGluay5jcmVhdGUpIHtcclxuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdFx0c2hvd0lmcmFtZTogdHJ1ZVxyXG5cdFx0XHR9KVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuaGFuZGxlS2V5UHJlc3MsIGZhbHNlKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcclxuXHRcdGlmKCF0aGlzLnN0YXRlLnNob3dJZnJhbWUpIHtcclxuXHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuaGFuZGxlS2V5UHJlc3MsIGZhbHNlKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdGhhbmRsZUtleVByZXNzIChldnQpIHtcclxuXHRcdGlmICh2a2V5W2V2dC5rZXlDb2RlXSA9PT0gJzxlc2NhcGU+Jykge1xyXG5cdFx0XHR0aGlzLnByb3BzLm9uQ2FuY2VsKCk7XHJcblx0XHR9XHJcblx0fSxcclxuXHQvLyBIYW5kbGUgaW5wdXQgY2hhbmdlIGV2ZW50c1xyXG5cdGhhbmRsZUNoYW5nZSAoZXZlbnQpIHtcclxuXHRcdHZhciB2YWx1ZXMgPSBhc3NpZ24oe30sIHRoaXMuc3RhdGUudmFsdWVzKTtcclxuXHRcdHZhbHVlc1tldmVudC5wYXRoXSA9IGV2ZW50LnZhbHVlO1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdHZhbHVlczogdmFsdWVzLFxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHQvLyBTZXQgdGhlIHByb3BzIG9mIGEgZmllbGRcclxuXHRnZXRGaWVsZFByb3BzIChmaWVsZCkge1xyXG5cdFx0dmFyIHByb3BzID0gYXNzaWduKHt9LCBmaWVsZCk7XHJcblx0XHRwcm9wcy52YWx1ZSA9IHRoaXMuc3RhdGUudmFsdWVzW2ZpZWxkLnBhdGhdO1xyXG5cdFx0cHJvcHMudmFsdWVzID0gdGhpcy5zdGF0ZS52YWx1ZXM7XHJcblx0XHRwcm9wcy5vbkNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlO1xyXG5cdFx0cHJvcHMubW9kZSA9ICdjcmVhdGUnO1xyXG5cdFx0cHJvcHMua2V5ID0gZmllbGQucGF0aDtcclxuXHRcdHJldHVybiBwcm9wcztcclxuXHR9LFxyXG5cdC8vIENyZWF0ZSBhIG5ldyBpdGVtIHdoZW4gdGhlIGZvcm0gaXMgc3VibWl0dGVkXHJcblx0c3VibWl0Rm9ybSAoZXZlbnQpIHtcclxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRjb25zdCBjcmVhdGVGb3JtID0gZXZlbnQudGFyZ2V0O1xyXG5cdFx0Y29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoY3JlYXRlRm9ybSk7XHJcblx0XHR0aGlzLnByb3BzLmxpc3QuY3JlYXRlSXRlbShmb3JtRGF0YSwgKGVyciwgZGF0YSkgPT4ge1xyXG5cdFx0XHRpZiAoZGF0YSkge1xyXG5cdFx0XHRcdGlmICh0aGlzLnByb3BzLm9uQ3JlYXRlKSB7XHJcblx0XHRcdFx0XHR0aGlzLnByb3BzLm9uQ3JlYXRlKGRhdGEpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBDbGVhciBmb3JtXHJcblx0XHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0XHRcdFx0dmFsdWVzOiB7fSxcclxuXHRcdFx0XHRcdFx0YWxlcnRzOiB7XHJcblx0XHRcdFx0XHRcdFx0c3VjY2Vzczoge1xyXG5cdFx0XHRcdFx0XHRcdFx0c3VjY2VzczogJ0l0ZW0gY3JlYXRlZCcsXHJcblx0XHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRpZiAoIWVycikge1xyXG5cdFx0XHRcdFx0ZXJyID0ge1xyXG5cdFx0XHRcdFx0XHRlcnJvcjogJ2Nvbm5lY3Rpb24gZXJyb3InLFxyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gSWYgd2UgZ2V0IGEgZGF0YWJhc2UgZXJyb3IsIHNob3cgdGhlIGRhdGFiYXNlIGVycm9yIG1lc3NhZ2VcclxuXHRcdFx0XHQvLyBpbnN0ZWFkIG9mIG9ubHkgc2F5aW5nIFwiRGF0YWJhc2UgZXJyb3JcIlxyXG5cdFx0XHRcdGlmIChlcnIuZXJyb3IgPT09ICdkYXRhYmFzZSBlcnJvcicpIHtcclxuXHRcdFx0XHRcdGVyci5lcnJvciA9IGVyci5kZXRhaWwuZXJybXNnO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0XHRcdGFsZXJ0czoge1xyXG5cdFx0XHRcdFx0XHRlcnJvcjogZXJyLFxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHQvLyBSZW5kZXIgdGhlIGZvcm0gaXRzZWxmXHJcblx0cmVuZGVyRm9ybSAoKSB7XHJcblx0XHRpZiAoIXRoaXMucHJvcHMuaXNPcGVuKSByZXR1cm47XHJcblxyXG5cdFx0dmFyIGZvcm0gPSBbXTtcclxuXHRcdHZhciBsaXN0ID0gdGhpcy5wcm9wcy5saXN0O1xyXG5cdFx0dmFyIG5hbWVGaWVsZCA9IHRoaXMucHJvcHMubGlzdC5uYW1lRmllbGQ7XHJcblx0XHR2YXIgZm9jdXNXYXNTZXQ7XHJcblxyXG5cdFx0Ly8gSWYgdGhlIG5hbWUgZmllbGQgaXMgYW4gaW5pdGlhbCBvbmUsIHdlIG5lZWQgdG8gcmVuZGVyIGEgcHJvcGVyXHJcblx0XHQvLyBpbnB1dCBmb3IgaXRcclxuXHRcdGlmIChsaXN0Lm5hbWVJc0luaXRpYWwpIHtcclxuXHRcdFx0dmFyIG5hbWVGaWVsZFByb3BzID0gdGhpcy5nZXRGaWVsZFByb3BzKG5hbWVGaWVsZCk7XHJcblx0XHRcdG5hbWVGaWVsZFByb3BzLmF1dG9Gb2N1cyA9IGZvY3VzV2FzU2V0ID0gdHJ1ZTtcclxuXHRcdFx0aWYgKG5hbWVGaWVsZC50eXBlID09PSAndGV4dCcpIHtcclxuXHRcdFx0XHRuYW1lRmllbGRQcm9wcy5jbGFzc05hbWUgPSAnaXRlbS1uYW1lLWZpZWxkJztcclxuXHRcdFx0XHRuYW1lRmllbGRQcm9wcy5wbGFjZWhvbGRlciA9IG5hbWVGaWVsZC5sYWJlbDtcclxuXHRcdFx0XHRuYW1lRmllbGRQcm9wcy5sYWJlbCA9ICcnO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvcm0ucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KEZpZWxkc1tuYW1lRmllbGQudHlwZV0sIG5hbWVGaWVsZFByb3BzKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVuZGVyIGlucHV0cyBmb3IgYWxsIGluaXRpYWwgZmllbGRzXHJcblx0XHRPYmplY3Qua2V5cyhsaXN0LmluaXRpYWxGaWVsZHMpLmZvckVhY2goa2V5ID0+IHtcclxuXHRcdFx0dmFyIGZpZWxkID0gbGlzdC5maWVsZHNbbGlzdC5pbml0aWFsRmllbGRzW2tleV1dO1xyXG5cdFx0XHQvLyBJZiB0aGVyZSdzIHNvbWV0aGluZyB3ZWlyZCBwYXNzZWQgaW4gYXMgZmllbGQgdHlwZSwgcmVuZGVyIHRoZVxyXG5cdFx0XHQvLyBpbnZhbGlkIGZpZWxkIHR5cGUgY29tcG9uZW50XHJcblx0XHRcdGlmICh0eXBlb2YgRmllbGRzW2ZpZWxkLnR5cGVdICE9PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdFx0Zm9ybS5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW52YWxpZEZpZWxkVHlwZSwgeyB0eXBlOiBmaWVsZC50eXBlLCBwYXRoOiBmaWVsZC5wYXRoLCBrZXk6IGZpZWxkLnBhdGggfSkpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBHZXQgdGhlIHByb3BzIGZvciB0aGUgaW5wdXQgZmllbGRcclxuXHRcdFx0dmFyIGZpZWxkUHJvcHMgPSB0aGlzLmdldEZpZWxkUHJvcHMoZmllbGQpO1xyXG5cdFx0XHQvLyBJZiB0aGVyZSB3YXMgbm8gZm9jdXNSZWYgc2V0IHByZXZpb3VzbHksIHNldCB0aGUgY3VycmVudCBmaWVsZCB0b1xyXG5cdFx0XHQvLyBiZSB0aGUgb25lIHRvIGJlIGZvY3Vzc2VkLiBHZW5lcmFsbHkgdGhlIGZpcnN0IGlucHV0IGZpZWxkLCBpZlxyXG5cdFx0XHQvLyB0aGVyZSdzIGFuIGluaXRpYWwgbmFtZSBmaWVsZCB0aGF0IHRha2VzIHByZWNlZGVuY2UuXHJcblx0XHRcdGlmICghZm9jdXNXYXNTZXQpIHtcclxuXHRcdFx0XHRmaWVsZFByb3BzLmF1dG9Gb2N1cyA9IGZvY3VzV2FzU2V0ID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3JtLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChGaWVsZHNbZmllbGQudHlwZV0sIGZpZWxkUHJvcHMpKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxGb3JtIGxheW91dD1cImhvcml6b250YWxcIiBvblN1Ym1pdD17dGhpcy5zdWJtaXRGb3JtfT5cclxuXHRcdFx0XHQ8TW9kYWwuSGVhZGVyXHJcblx0XHRcdFx0XHR0ZXh0PXsnQ3JlYXRlIGEgbmV3ICcgKyBsaXN0LnNpbmd1bGFyfVxyXG5cdFx0XHRcdFx0c2hvd0Nsb3NlQnV0dG9uXHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0XHQ8TW9kYWwuQm9keT5cclxuXHRcdFx0XHRcdDxBbGVydE1lc3NhZ2VzIGFsZXJ0cz17dGhpcy5zdGF0ZS5hbGVydHN9IC8+XHJcblx0XHRcdFx0XHR7Zm9ybX1cclxuXHRcdFx0XHQ8L01vZGFsLkJvZHk+XHJcblx0XHRcdFx0PE1vZGFsLkZvb3Rlcj5cclxuXHRcdFx0XHRcdDxCdXR0b24gY29sb3I9XCJzdWNjZXNzXCIgdHlwZT1cInN1Ym1pdFwiIGRhdGEtYnV0dG9uLXR5cGU9XCJzdWJtaXRcIj5cclxuXHRcdFx0XHRcdFx0Q3JlYXRlXHJcblx0XHRcdFx0XHQ8L0J1dHRvbj5cclxuXHRcdFx0XHRcdDxCdXR0b25cclxuXHRcdFx0XHRcdFx0dmFyaWFudD1cImxpbmtcIlxyXG5cdFx0XHRcdFx0XHRjb2xvcj1cImNhbmNlbFwiXHJcblx0XHRcdFx0XHRcdGRhdGEtYnV0dG9uLXR5cGU9XCJjYW5jZWxcIlxyXG5cdFx0XHRcdFx0XHRvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2FuY2VsfVxyXG5cdFx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0XHRDYW5jZWxcclxuXHRcdFx0XHRcdDwvQnV0dG9uPlxyXG5cdFx0XHRcdDwvTW9kYWwuRm9vdGVyPlxyXG5cdFx0XHQ8L0Zvcm0+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyQ29udGVudCgpIHtcclxuXHRcdGNvbnN0IHtzaG93SWZyYW1lfSA9IHRoaXMuc3RhdGU7XHJcblx0XHRjb25zdCBpZnJhbWVVUkwgPSBgJHtLZXlzdG9uZS5leHRlcm5hbEhvc3R9JHt0aGlzLnByb3BzLmxpc3QubGluay5jcmVhdGV9YDtcclxuXHJcblx0XHRyZXR1cm4gKHNob3dJZnJhbWUgJiYgdGhpcy5wcm9wcy5pc09wZW4pID9cclxuXHRcdFx0PElmcmFtZUNvbnRlbnQgc3JjPXtpZnJhbWVVUkx9IHNob3c9e3RoaXMucHJvcHMuaXNPcGVufSBvbkNhbmNlbD17dGhpcy5wcm9wcy5vbkNhbmNlbH0gb25TYXZlPXt0aGlzLnByb3BzLm9uQ3JlYXRlfSBjbGFzc05hbWU9e1wiZnVsbC1zY3JlZW5cIn0vPiA6XHJcblx0XHRcdDxNb2RhbC5EaWFsb2cgaXNPcGVuPXt0aGlzLnByb3BzLmlzT3Blbn0gb25DbG9zZT17dGhpcy5wcm9wcy5vbkNhbmNlbH0gYmFja2Ryb3BDbG9zZXNNb2RhbD5cclxuXHRcdFx0XHR7dGhpcy5yZW5kZXJGb3JtKCl9XHJcblx0XHRcdDwvTW9kYWwuRGlhbG9nPlxyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHJldHVybiB0aGlzLnJlbmRlckNvbnRlbnQoKTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQ3JlYXRlRm9ybTtcclxuIiwiLyoqXHJcbiAqIEEgc2luZ2xlIGZsYXNoIG1lc3NhZ2UgY29tcG9uZW50LiBVc2VkIGJ5IEZsYXNoTWVzc2FnZXMuanNcclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBBbGVydCB9IGZyb20gJy4uL2VsZW1lbnRhbCc7XHJcblxyXG5jb25zdCBGbGFzaE1lc3NhZ2UgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRtZXNzYWdlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuXHRcdFx0UHJvcFR5cGVzLm9iamVjdCxcclxuXHRcdFx0UHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdF0pLmlzUmVxdWlyZWQsXHJcblx0XHR0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG5cdH0sXHJcblx0Ly8gUmVuZGVyIHRoZSBtZXNzYWdlXHJcblx0cmVuZGVyTWVzc2FnZSAobWVzc2FnZSkge1xyXG5cdFx0Ly8gSWYgdGhlIG1lc3NhZ2UgaXMgb25seSBhIHN0cmluZywgcmVuZGVyIHRoZSBzdHJpbmdcclxuXHRcdGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHQ8c3Bhbj5cclxuXHRcdFx0XHRcdHttZXNzYWdlfVxyXG5cdFx0XHRcdDwvc3Bhbj5cclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBHZXQgdGhlIHRpdGxlIGFuZCB0aGUgZGV0YWlsIG9mIHRoZSBtZXNzYWdlXHJcblx0XHRjb25zdCB0aXRsZSA9IG1lc3NhZ2UudGl0bGUgPyA8aDQ+e21lc3NhZ2UudGl0bGV9PC9oND4gOiBudWxsO1xyXG5cdFx0Y29uc3QgZGV0YWlsID0gbWVzc2FnZS5kZXRhaWwgPyA8cD57bWVzc2FnZS5kZXRhaWx9PC9wPiA6IG51bGw7XHJcblx0XHQvLyBJZiB0aGUgbWVzc2FnZSBoYXMgYSBsaXN0IGF0dGFjaGVkLCByZW5kZXIgYSA8dWw+XHJcblx0XHRjb25zdCBsaXN0ID0gbWVzc2FnZS5saXN0ID8gKFxyXG5cdFx0XHQ8dWwgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAwIH19PlxyXG5cdFx0XHRcdHttZXNzYWdlLmxpc3QubWFwKChpdGVtLCBpKSA9PiA8bGkga2V5PXtgaSR7aX1gfT57aXRlbX08L2xpPil9XHJcblx0XHRcdDwvdWw+XHJcblx0XHQpIDogbnVsbDtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8c3Bhbj5cclxuXHRcdFx0XHR7dGl0bGV9XHJcblx0XHRcdFx0e2RldGFpbH1cclxuXHRcdFx0XHR7bGlzdH1cclxuXHRcdFx0PC9zcGFuPlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRjb25zdCB7IG1lc3NhZ2UsIHR5cGUgfSA9IHRoaXMucHJvcHM7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PEFsZXJ0IGNvbG9yPXt0eXBlfT5cclxuXHRcdFx0XHR7dGhpcy5yZW5kZXJNZXNzYWdlKG1lc3NhZ2UpfVxyXG5cdFx0XHQ8L0FsZXJ0PlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRmxhc2hNZXNzYWdlO1xyXG4iLCIvKipcclxuICogUmVuZGVyIGEgZmV3IGZsYXNoIG1lc3NhZ2VzLCBlLmcuIGVycm9ycywgc3VjY2VzcyBtZXNzYWdlcywgd2FybmluZ3MsLi4uXHJcbiAqXHJcbiAqIFVzZSBsaWtlIHRoaXM6XHJcbiAqIDxGbGFzaE1lc3NhZ2VzXHJcbiAqICAgbWVzc2FnZXM9e3tcclxuICpcdCAgIGVycm9yOiBbe1xyXG4gKlx0ICAgICB0aXRsZTogJ1RoZXJlIGlzIGEgbmV0d29yayBwcm9ibGVtJyxcclxuICpcdCAgICAgZGV0YWlsOiAnUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4uLicsXHJcbiAqXHQgICB9XSxcclxuICogICB9fVxyXG4gKiAvPlxyXG4gKlxyXG4gKiBJbnN0ZWFkIG9mIGVycm9yLCBpdCBjYW4gYWxzbyBiZSBoaWxpZ2h0LCBpbmZvLCBzdWNjZXNzIG9yIHdhcm5pbmdcclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xyXG5cclxuaW1wb3J0IEZsYXNoTWVzc2FnZSBmcm9tICcuL0ZsYXNoTWVzc2FnZSc7XHJcblxyXG52YXIgRmxhc2hNZXNzYWdlcyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ0ZsYXNoTWVzc2FnZXMnLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0bWVzc2FnZXM6IFJlYWN0LlByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG5cdFx0XHRSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuXHRcdFx0UmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcclxuXHRcdFx0XHRlcnJvcjogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxyXG5cdFx0XHRcdGhpbGlnaHQ6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcclxuXHRcdFx0XHRpbmZvOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXHJcblx0XHRcdFx0c3VjY2VzczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxyXG5cdFx0XHRcdHdhcm5pbmc6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcclxuXHRcdFx0fSksXHJcblx0XHRdKSxcclxuXHR9LFxyXG5cdC8vIFJlbmRlciBtZXNzYWdlcyBieSB0aGVpciB0eXBlXHJcblx0cmVuZGVyTWVzc2FnZXMgKG1lc3NhZ2VzLCB0eXBlKSB7XHJcblx0XHRpZiAoIW1lc3NhZ2VzIHx8ICFtZXNzYWdlcy5sZW5ndGgpIHJldHVybiBudWxsO1xyXG5cclxuXHRcdHJldHVybiBtZXNzYWdlcy5tYXAoKG1lc3NhZ2UsIGkpID0+IHtcclxuXHRcdFx0cmV0dXJuIDxGbGFzaE1lc3NhZ2UgbWVzc2FnZT17bWVzc2FnZX0gdHlwZT17dHlwZX0ga2V5PXtgaSR7aX1gfSAvPjtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0Ly8gUmVuZGVyIHRoZSBpbmRpdmlkdWFsIG1lc3NhZ2VzIGJhc2VkIG9uIHRoZWlyIHR5cGVcclxuXHRyZW5kZXJUeXBlcyAodHlwZXMpIHtcclxuXHRcdHJldHVybiBPYmplY3Qua2V5cyh0eXBlcykubWFwKHR5cGUgPT4gdGhpcy5yZW5kZXJNZXNzYWdlcyh0eXBlc1t0eXBlXSwgdHlwZSkpO1xyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGlmICghdGhpcy5wcm9wcy5tZXNzYWdlcykgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJmbGFzaC1tZXNzYWdlc1wiPlxyXG5cdFx0XHRcdHtfLmlzUGxhaW5PYmplY3QodGhpcy5wcm9wcy5tZXNzYWdlcykgJiYgdGhpcy5yZW5kZXJUeXBlcyh0aGlzLnByb3BzLm1lc3NhZ2VzKX1cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGbGFzaE1lc3NhZ2VzO1xyXG4iLCIvKipcclxuICogVGhlIGZvcm0gdGhhdCdzIHZpc2libGUgd2hlbiBcIkNyZWF0ZSA8SXRlbU5hbWU+XCIgaXMgY2xpY2tlZCBvbiBlaXRoZXIgdGhlXHJcbiAqIExpc3Qgc2NyZWVuIG9yIHRoZSBJdGVtIHNjcmVlblxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5jb25zdCBJZnJhbWVDb250ZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnSWZyYW1lQ29udGVudCcsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRzaG93OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuXHRcdHNyYzogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdG9uQ2FuY2VsOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHRcdG9uU2F2ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcblx0fSxcclxuXHRnZXREZWZhdWx0UHJvcHMgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0c2hvdzogZmFsc2UsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuaGFuZGxlRnJhbWVUYXNrcywgdGhpcyk7XHJcblx0fSxcclxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XHJcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5oYW5kbGVGcmFtZVRhc2tzLCB0aGlzKTtcclxuXHR9LFxyXG5cdGhhbmRsZUZyYW1lVGFza3MoZSl7XHJcblx0XHR0cnl7XHJcblx0XHRcdGNvbnN0IG1lc3NhZ2UgPSBKU09OLnBhcnNlKGUuZGF0YSk7XHJcblx0XHRcdHN3aXRjaChtZXNzYWdlLnR5cGUpIHtcclxuXHRcdFx0XHRjYXNlICdjb250ZW50VXBkYXRlJzogXHJcblx0XHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcclxuXHRcdFx0XHRcdFx0Y29udGVudEhlaWdodDogbWVzc2FnZS5kYXRhXHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAnb25TYXZlJzpcclxuXHRcdFx0XHRcdGlmICh0aGlzLnByb3BzLm9uU2F2ZSkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnByb3BzLm9uU2F2ZShtZXNzYWdlLmRhdGEpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAnb25DYW5jZWwnOlxyXG5cdFx0XHRcdFx0aWYodGhpcy5wcm9wcy5vbkNhbmNlbCkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnByb3BzLm9uQ2FuY2VsKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fSBjYXRjaCAoZXJyKSB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdHJlbmRlckNvbnRlbnQoKSB7XHJcblx0XHRjb25zdCB7c3JjLCBzaG93LCBjbGFzc05hbWUgPSAnJ30gPSB0aGlzLnByb3BzO1xyXG5cdFx0Y29uc3QgaWZyYW1lVVJMID0gYCR7c3JjfT90b2tlbj0ke0tleXN0b25lLnVzZXIudG9rZW59YFxyXG5cdFx0cmV0dXJuIHNob3cgP1xyXG5cdFx0XHQ8aWZyYW1lIGNsYXNzTmFtZT17J2NvbnRlbnQtZnJhbWUgJyArIGNsYXNzTmFtZX0gc3R5bGU9e3toZWlnaHQ6IHRoaXMuc3RhdGUuY29udGVudEhlaWdodH19IHJlZj17KGYpID0+IHRoaXMuaWZyID0gZiB9IHNyYz17aWZyYW1lVVJMfSAvPiA6IDxkaXYgLz5cclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5yZW5kZXJDb250ZW50KCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IElmcmFtZUNvbnRlbnQ7XHJcbiIsIi8qKlxyXG4gKiBSZW5kZXJzIGFuIFwiSW52YWxpZCBGaWVsZCBUeXBlXCIgZXJyb3JcclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuY29uc3QgSW52YWxpZEZpZWxkVHlwZSA9IGZ1bmN0aW9uIChwcm9wcykge1xyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2IGNsYXNzTmFtZT1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxyXG5cdFx0XHRJbnZhbGlkIGZpZWxkIHR5cGUgPHN0cm9uZz57cHJvcHMudHlwZX08L3N0cm9uZz4gYXQgcGF0aCA8c3Ryb25nPntwcm9wcy5wYXRofTwvc3Ryb25nPlxyXG5cdFx0PC9kaXY+XHJcblx0KTtcclxufTtcclxuXHJcbkludmFsaWRGaWVsZFR5cGUucHJvcFR5cGVzID0ge1xyXG5cdHBhdGg6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0dHlwZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gSW52YWxpZEZpZWxkVHlwZTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcclxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uL3RoZW1lJztcclxuaW1wb3J0IHsgZGFya2VuLCBsaWdodGVuIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29sb3InO1xyXG5cclxuZnVuY3Rpb24gS2JkICh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSkge1xyXG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhjbGFzc2VzLmtiZCk7XHJcblxyXG5cdHJldHVybiA8a2JkIHsuLi5wcm9wc30gLz47XHJcbn07XHJcblxyXG5jb25zdCBjbGFzc2VzID0ge1xyXG5cdGtiZDoge1xyXG5cdFx0YmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvci5ib2R5LFxyXG5cdFx0Ym9yZGVyUmFkaXVzOiAzLFxyXG5cdFx0Ym9yZGVyOiBgMXB4IHNvbGlkICNjY2NgLFxyXG5cdFx0Ym9yZGVyQm90dG9tQ29sb3I6IGRhcmtlbignI2NjYycsIDQpLFxyXG5cdFx0Ym9yZGVyVG9wQ29sb3I6IGxpZ2h0ZW4oJyNjY2MnLCA0KSxcclxuXHRcdGJveFNoYWRvdzogYDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMTIpLCAwIDJweCAwIDAgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpIGluc2V0YCxcclxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxyXG5cdFx0Zm9udEZhbWlseTogJ0NvbnNvbGFzLCBcIkxpYmVyYXRpb24gTW9ub1wiLCBDb3VyaWVyLCBtb25vc3BhY2UnLFxyXG5cdFx0Zm9udFNpemU6ICcwLjg1ZW0nLFxyXG5cdFx0Zm9udFdlaWdodDogNzAwLFxyXG5cdFx0bGluZUhlaWdodDogJ2luaGVyaXQnLFxyXG5cdFx0cGFkZGluZzogJzFweCA0cHgnLFxyXG5cdFx0d2hpdGVTcGFjZTogJ25vd3JhcCcsXHJcblxyXG5cdFx0Ly8gbGl0dGxlIGhhY2sgdG8gdHdlYWsgXCJ2aXN1YWwtbWlkZGxlXCIgYWxpZ25tZW50XHJcblx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJyxcclxuXHRcdHRvcDogLTEsXHJcblx0fSxcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gS2JkO1xyXG4iLCIvKipcclxuICogUmVuZGVyIHRoZSBib2R5IG9mIGEgcG9wb3V0XHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGJsYWNrbGlzdCBmcm9tICdibGFja2xpc3QnO1xyXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuXHJcbnZhciBQb3BvdXRCb2R5ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnUG9wb3V0Qm9keScsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRjaGlsZHJlbjogUmVhY3QuUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcclxuXHRcdGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdHNjcm9sbGFibGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IGNsYXNzTmFtZSA9IGNsYXNzbmFtZXMoJ1BvcG91dF9fYm9keScsIHtcclxuXHRcdFx0J1BvcG91dF9fc2Nyb2xsYWJsZS1hcmVhJzogdGhpcy5wcm9wcy5zY3JvbGxhYmxlLFxyXG5cdFx0fSwgdGhpcy5wcm9wcy5jbGFzc05hbWUpO1xyXG5cdFx0Y29uc3QgcHJvcHMgPSBibGFja2xpc3QodGhpcy5wcm9wcywgJ2NsYXNzTmFtZScsICdzY3JvbGxhYmxlJyk7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gey4uLnByb3BzfSAvPlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUG9wb3V0Qm9keTtcclxuIiwiLyoqXHJcbiAqIFJlbmRlciBhIGZvb3RlciBmb3IgYSBwb3BvdXRcclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuY29uc3QgQlVUVE9OX0JBU0VfQ0xBU1NOQU1FID0gJ1BvcG91dF9fZm9vdGVyX19idXR0b24gUG9wb3V0X19mb290ZXJfX2J1dHRvbi0tJztcclxuXHJcbmNvbnN0IFBvcG91dEZvb3RlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ1BvcG91dEZvb3RlcicsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRjaGlsZHJlbjogUmVhY3QuUHJvcFR5cGVzLm5vZGUsXHJcblx0XHRwcmltYXJ5QnV0dG9uQWN0aW9uOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHRcdHByaW1hcnlCdXR0b25Jc1N1Ym1pdDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXHJcblx0XHRwcmltYXJ5QnV0dG9uTGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRzZWNvbmRhcnlCdXR0b25BY3Rpb246IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdFx0c2Vjb25kYXJ5QnV0dG9uTGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0fSxcclxuXHQvLyBSZW5kZXIgYSBwcmltYXJ5IGJ1dHRvblxyXG5cdHJlbmRlclByaW1hcnlCdXR0b24gKCkge1xyXG5cdFx0aWYgKCF0aGlzLnByb3BzLnByaW1hcnlCdXR0b25MYWJlbCkgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGJ1dHRvblxyXG5cdFx0XHRcdHR5cGU9e3RoaXMucHJvcHMucHJpbWFyeUJ1dHRvbklzU3VibWl0ID8gJ3N1Ym1pdCcgOiAnYnV0dG9uJ31cclxuXHRcdFx0XHRjbGFzc05hbWU9e0JVVFRPTl9CQVNFX0NMQVNTTkFNRSArICdwcmltYXJ5J31cclxuXHRcdFx0XHRvbkNsaWNrPXt0aGlzLnByb3BzLnByaW1hcnlCdXR0b25BY3Rpb259XHJcblx0XHRcdD5cclxuXHRcdFx0XHR7dGhpcy5wcm9wcy5wcmltYXJ5QnV0dG9uTGFiZWx9XHJcblx0XHRcdDwvYnV0dG9uPlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdC8vIFJlbmRlciBhIHNlY29uZGFyeSBidXR0b25cclxuXHRyZW5kZXJTZWNvbmRhcnlCdXR0b24gKCkge1xyXG5cdFx0aWYgKCF0aGlzLnByb3BzLnNlY29uZGFyeUJ1dHRvbkFjdGlvbiB8fCAhdGhpcy5wcm9wcy5zZWNvbmRhcnlCdXR0b25MYWJlbCkgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGJ1dHRvblxyXG5cdFx0XHRcdHR5cGU9XCJidXR0b25cIlxyXG5cdFx0XHRcdGNsYXNzTmFtZT17QlVUVE9OX0JBU0VfQ0xBU1NOQU1FICsgJ3NlY29uZGFyeSd9XHJcblx0XHRcdFx0b25DbGljaz17dGhpcy5wcm9wcy5zZWNvbmRhcnlCdXR0b25BY3Rpb259XHJcblx0XHRcdD5cclxuXHRcdFx0XHR7dGhpcy5wcm9wcy5zZWNvbmRhcnlCdXR0b25MYWJlbH1cclxuXHRcdFx0PC9idXR0b24+XHJcblx0XHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiUG9wb3V0X19mb290ZXJcIj5cclxuXHRcdFx0XHR7dGhpcy5yZW5kZXJQcmltYXJ5QnV0dG9uKCl9XHJcblx0XHRcdFx0e3RoaXMucmVuZGVyU2Vjb25kYXJ5QnV0dG9uKCl9XHJcblx0XHRcdFx0e3RoaXMucHJvcHMuY2hpbGRyZW59XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUG9wb3V0Rm9vdGVyO1xyXG4iLCIvKipcclxuICogUmVuZGVyIGEgaGVhZGVyIGZvciBhIHBvcG91dFxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBUcmFuc2l0aW9uIGZyb20gJ3JlYWN0LWFkZG9ucy1jc3MtdHJhbnNpdGlvbi1ncm91cCc7XHJcblxyXG5jb25zdCBQb3BvdXRIZWFkZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdQb3BvdXRIZWFkZXInLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0bGVmdEFjdGlvbjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcblx0XHRsZWZ0SWNvbjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHRcdHRpdGxlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcblx0XHR0cmFuc2l0aW9uRGlyZWN0aW9uOiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoWyduZXh0JywgJ3ByZXYnXSksXHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Ly8gSWYgd2UgaGF2ZSBhIGxlZnQgYWN0aW9uIGFuZCBhIGxlZnQgaWNvbiwgcmVuZGVyIGEgaGVhZGVyIGJ1dHRvblxyXG5cdFx0dmFyIGhlYWRlckJ1dHRvbiA9ICh0aGlzLnByb3BzLmxlZnRBY3Rpb24gJiYgdGhpcy5wcm9wcy5sZWZ0SWNvbikgPyAoXHJcblx0XHRcdDxidXR0b25cclxuXHRcdFx0XHRrZXk9eydidXR0b25fJyArIHRoaXMucHJvcHMudHJhbnNpdGlvbkRpcmVjdGlvbn1cclxuXHRcdFx0XHR0eXBlPVwiYnV0dG9uXCJcclxuXHRcdFx0XHRjbGFzc05hbWU9eydQb3BvdXRfX2hlYWRlcl9fYnV0dG9uIG9jdGljb24gb2N0aWNvbi0nICsgdGhpcy5wcm9wcy5sZWZ0SWNvbn1cclxuXHRcdFx0XHRvbkNsaWNrPXt0aGlzLnByb3BzLmxlZnRBY3Rpb259XHJcblx0XHRcdC8+XHJcblx0XHQpIDogbnVsbDtcclxuXHRcdC8vIElmIHdlIGhhdmUgYSB0aXRsZSwgcmVuZGVyIGl0XHJcblx0XHR2YXIgaGVhZGVyVGl0bGUgPSB0aGlzLnByb3BzLnRpdGxlID8gKFxyXG5cdFx0XHQ8c3BhblxyXG5cdFx0XHRcdGtleT17J3RpdGxlXycgKyB0aGlzLnByb3BzLnRyYW5zaXRpb25EaXJlY3Rpb259XHJcblx0XHRcdFx0Y2xhc3NOYW1lPVwiUG9wb3V0X19oZWFkZXJfX2xhYmVsXCJcclxuXHRcdFx0PlxyXG5cdFx0XHRcdHt0aGlzLnByb3BzLnRpdGxlfVxyXG5cdFx0XHQ8L3NwYW4+XHJcblx0XHQpIDogbnVsbDtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIlBvcG91dF9faGVhZGVyXCI+XHJcblx0XHRcdFx0PFRyYW5zaXRpb25cclxuXHRcdFx0XHRcdHRyYW5zaXRpb25OYW1lPVwiUG9wb3V0X19oZWFkZXJfX2J1dHRvblwiXHJcblx0XHRcdFx0XHR0cmFuc2l0aW9uRW50ZXJUaW1lb3V0PXsyMDB9XHJcblx0XHRcdFx0XHR0cmFuc2l0aW9uTGVhdmVUaW1lb3V0PXsyMDB9XHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0e2hlYWRlckJ1dHRvbn1cclxuXHRcdFx0XHQ8L1RyYW5zaXRpb24+XHJcblx0XHRcdFx0PFRyYW5zaXRpb25cclxuXHRcdFx0XHRcdHRyYW5zaXRpb25OYW1lPXsnUG9wb3V0X19wYW5lLScgKyB0aGlzLnByb3BzLnRyYW5zaXRpb25EaXJlY3Rpb259XHJcblx0XHRcdFx0XHR0cmFuc2l0aW9uRW50ZXJUaW1lb3V0PXszNjB9XHJcblx0XHRcdFx0XHR0cmFuc2l0aW9uTGVhdmVUaW1lb3V0PXszNjB9XHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0e2hlYWRlclRpdGxlfVxyXG5cdFx0XHRcdDwvVHJhbnNpdGlvbj5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpO1xyXG5cdH0sXHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQb3BvdXRIZWFkZXI7XHJcbiIsIi8qKlxyXG4gKiBSZW5kZXIgYSBwb3BvdXQgbGlzdC4gQ2FuIGFsc28gdXNlIFBvcG91dExpc3RJdGVtIGFuZCBQb3BvdXRMaXN0SGVhZGluZ1xyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBibGFja2xpc3QgZnJvbSAnYmxhY2tsaXN0JztcclxuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcblxyXG5jb25zdCBQb3BvdXRMaXN0ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnUG9wb3V0TGlzdCcsXHJcblx0cHJvcFR5cGVzOiB7XHJcblx0XHRjaGlsZHJlbjogUmVhY3QuUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcclxuXHRcdGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcclxuXHR9LFxyXG5cdHJlbmRlciAoKSB7XHJcblx0XHRjb25zdCBjbGFzc05hbWUgPSBjbGFzc25hbWVzKCdQb3BvdXRMaXN0JywgdGhpcy5wcm9wcy5jbGFzc05hbWUpO1xyXG5cdFx0Y29uc3QgcHJvcHMgPSBibGFja2xpc3QodGhpcy5wcm9wcywgJ2NsYXNzTmFtZScpO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5wcm9wc30gLz5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFBvcG91dExpc3Q7XHJcblxyXG4vLyBleHBvc2UgdGhlIGNoaWxkIHRvIHRoZSB0b3AgbGV2ZWwgZXhwb3J0XHJcbm1vZHVsZS5leHBvcnRzLkl0ZW0gPSByZXF1aXJlKCcuL1BvcG91dExpc3RJdGVtJyk7XHJcbm1vZHVsZS5leHBvcnRzLkhlYWRpbmcgPSByZXF1aXJlKCcuL1BvcG91dExpc3RIZWFkaW5nJyk7XHJcbiIsIi8qKlxyXG4gKiBSZW5kZXIgYSBwb3BvdXQgbGlzdCBoZWFkaW5nXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGJsYWNrbGlzdCBmcm9tICdibGFja2xpc3QnO1xyXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuXHJcbnZhciBQb3BvdXRMaXN0SGVhZGluZyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ1BvcG91dExpc3RIZWFkaW5nJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxyXG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IGNsYXNzTmFtZSA9IGNsYXNzbmFtZXMoJ1BvcG91dExpc3RfX2hlYWRpbmcnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSk7XHJcblx0XHRjb25zdCBwcm9wcyA9IGJsYWNrbGlzdCh0aGlzLnByb3BzLCAnY2xhc3NOYW1lJyk7XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gey4uLnByb3BzfSAvPlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUG9wb3V0TGlzdEhlYWRpbmc7XHJcbiIsIi8qKlxyXG4gKiBSZW5kZXIgYSBwb3BvdXQgbGlzdCBpdGVtXHJcbiAqL1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGJsYWNrbGlzdCBmcm9tICdibGFja2xpc3QnO1xyXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuXHJcbnZhciBQb3BvdXRMaXN0SXRlbSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuXHRkaXNwbGF5TmFtZTogJ1BvcG91dExpc3RJdGVtJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGljb246IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRpY29uSG92ZXI6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXHJcblx0XHRpc1NlbGVjdGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuXHRcdGxhYmVsOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcblx0XHRvbkNsaWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHR9LFxyXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRob3ZlcjogZmFsc2UsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0aG92ZXIgKCkge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7IGhvdmVyOiB0cnVlIH0pO1xyXG5cdH0sXHJcblx0dW5ob3ZlciAoKSB7XHJcblx0XHR0aGlzLnNldFN0YXRlKHsgaG92ZXI6IGZhbHNlIH0pO1xyXG5cdH0sXHJcblx0Ly8gUmVuZGVyIGFuIGljb25cclxuXHRyZW5kZXJJY29uICgpIHtcclxuXHRcdGlmICghdGhpcy5wcm9wcy5pY29uKSByZXR1cm4gbnVsbDtcclxuXHRcdGNvbnN0IGljb24gPSB0aGlzLnN0YXRlLmhvdmVyICYmIHRoaXMucHJvcHMuaWNvbkhvdmVyID8gdGhpcy5wcm9wcy5pY29uSG92ZXIgOiB0aGlzLnByb3BzLmljb247XHJcblx0XHRjb25zdCBpY29uQ2xhc3NuYW1lID0gY2xhc3NuYW1lcygnUG9wb3V0TGlzdF9faXRlbV9faWNvbiBvY3RpY29uJywgKCdvY3RpY29uLScgKyBpY29uKSk7XHJcblxyXG5cdFx0cmV0dXJuIDxzcGFuIGNsYXNzTmFtZT17aWNvbkNsYXNzbmFtZX0gLz47XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0Y29uc3QgaXRlbUNsYXNzbmFtZSA9IGNsYXNzbmFtZXMoJ1BvcG91dExpc3RfX2l0ZW0nLCB7XHJcblx0XHRcdCdpcy1zZWxlY3RlZCc6IHRoaXMucHJvcHMuaXNTZWxlY3RlZCxcclxuXHRcdH0pO1xyXG5cdFx0Y29uc3QgcHJvcHMgPSBibGFja2xpc3QodGhpcy5wcm9wcywgJ2NsYXNzTmFtZScsICdpY29uJywgJ2ljb25Ib3ZlcicsICdpc1NlbGVjdGVkJywgJ2xhYmVsJyk7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8YnV0dG9uXHJcblx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXHJcblx0XHRcdFx0dGl0bGU9e3RoaXMucHJvcHMubGFiZWx9XHJcblx0XHRcdFx0Y2xhc3NOYW1lPXtpdGVtQ2xhc3NuYW1lfVxyXG5cdFx0XHRcdG9uRm9jdXM9e3RoaXMuaG92ZXJ9XHJcblx0XHRcdFx0b25CbHVyPXt0aGlzLnVuaG92ZXJ9XHJcblx0XHRcdFx0b25Nb3VzZU92ZXI9e3RoaXMuaG92ZXJ9XHJcblx0XHRcdFx0b25Nb3VzZU91dD17dGhpcy51bmhvdmVyfVxyXG5cdFx0XHRcdHsuLi5wcm9wc31cclxuXHRcdFx0PlxyXG5cdFx0XHRcdHt0aGlzLnJlbmRlckljb24oKX1cclxuXHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJQb3BvdXRMaXN0X19pdGVtX19sYWJlbFwiPlxyXG5cdFx0XHRcdFx0e3RoaXMucHJvcHMubGFiZWx9XHJcblx0XHRcdFx0PC9zcGFuPlxyXG5cdFx0XHQ8L2J1dHRvbj5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFBvcG91dExpc3RJdGVtO1xyXG4iLCIvKipcclxuICogUmVuZGVyIGEgcG9wb3V0IHBhbmUsIGNhbGxzIHByb3BzLm9uTGF5b3V0IHdoZW4gdGhlIGNvbXBvbmVudCBtb3VudHNcclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgYmxhY2tsaXN0IGZyb20gJ2JsYWNrbGlzdCc7XHJcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5cclxudmFyIFBvcG91dFBhbmUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdQb3BvdXRQYW5lJyxcclxuXHRwcm9wVHlwZXM6IHtcclxuXHRcdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxyXG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG5cdFx0b25MYXlvdXQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG5cdH0sXHJcblx0Z2V0RGVmYXVsdFByb3BzICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdG9uTGF5b3V0OiAoKSA9PiB7fSxcclxuXHRcdH07XHJcblx0fSxcclxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XHJcblx0XHR0aGlzLnByb3BzLm9uTGF5b3V0KHRoaXMucmVmcy5lbC5vZmZzZXRIZWlnaHQpO1xyXG5cdH0sXHJcblx0cmVuZGVyICgpIHtcclxuXHRcdGNvbnN0IGNsYXNzTmFtZSA9IGNsYXNzbmFtZXMoJ1BvcG91dF9fcGFuZScsIHRoaXMucHJvcHMuY2xhc3NOYW1lKTtcclxuXHRcdGNvbnN0IHByb3BzID0gYmxhY2tsaXN0KHRoaXMucHJvcHMsICdjbGFzc05hbWUnLCAnb25MYXlvdXQnKTtcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8ZGl2IHJlZj1cImVsXCIgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5wcm9wc30gLz5cclxuXHRcdCk7XHJcblx0fSxcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFBvcG91dFBhbmU7XHJcbiIsIi8qKlxyXG4gKiBBIFBvcG91dCBjb21wb25lbnQuXHJcbiAqIE9uZSBjYW4gYWxzbyBhZGQgYSBIZWFkZXIgKFBvcG91dC9IZWFkZXIpLCBhIEZvb3RlclxyXG4gKiAoUG9wb3V0L0Zvb3RlciksIGEgQm9keSAoUG9wb3V0L0JvZHkpIGFuZCBhIFBhbiAoUG9wb3V0L1BhbmUpLlxyXG4gKi9cclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vUG9ydGFsJztcclxuaW1wb3J0IFRyYW5zaXRpb24gZnJvbSAncmVhY3QtYWRkb25zLWNzcy10cmFuc2l0aW9uLWdyb3VwJztcclxuXHJcbmNvbnN0IFNJWkVTID0ge1xyXG5cdGFycm93SGVpZ2h0OiAxMixcclxuXHRhcnJvd1dpZHRoOiAxNixcclxuXHRob3Jpem9udGFsTWFyZ2luOiAyMCxcclxufTtcclxuXHJcbnZhciBQb3BvdXQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcblx0ZGlzcGxheU5hbWU6ICdQb3BvdXQnLFxyXG5cdHByb3BUeXBlczoge1xyXG5cdFx0aXNPcGVuOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcclxuXHRcdG9uQ2FuY2VsOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHRcdG9uU3VibWl0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcclxuXHRcdHJlbGF0aXZlVG9JRDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG5cdFx0d2lkdGg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXHJcblx0fSxcclxuXHRnZXREZWZhdWx0UHJvcHMgKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0d2lkdGg6IDMyMCxcclxuXHRcdH07XHJcblx0fSxcclxuXHRnZXRJbml0aWFsU3RhdGUgKCkge1xyXG5cdFx0cmV0dXJuIHt9O1xyXG5cdH0sXHJcblx0Y29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XHJcblx0XHRpZiAoIXRoaXMucHJvcHMuaXNPcGVuICYmIG5leHRQcm9wcy5pc09wZW4pIHtcclxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuY2FsY3VsYXRlUG9zaXRpb24pO1xyXG5cdFx0XHR0aGlzLmNhbGN1bGF0ZVBvc2l0aW9uKG5leHRQcm9wcy5pc09wZW4pO1xyXG5cdFx0fSBlbHNlIGlmICh0aGlzLnByb3BzLmlzT3BlbiAmJiAhbmV4dFByb3BzLmlzT3Blbikge1xyXG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5jYWxjdWxhdGVQb3NpdGlvbik7XHJcblx0XHR9XHJcblx0fSxcclxuXHRnZXRQb3J0YWxET01Ob2RlICgpIHtcclxuXHRcdHJldHVybiB0aGlzLnJlZnMucG9ydGFsLmdldFBvcnRhbERPTU5vZGUoKTtcclxuXHR9LFxyXG5cdGNhbGN1bGF0ZVBvc2l0aW9uIChpc09wZW4pIHtcclxuXHRcdGlmICghaXNPcGVuKSByZXR1cm47XHJcblx0XHRsZXQgcG9zTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMucHJvcHMucmVsYXRpdmVUb0lEKTtcclxuXHJcblx0XHRjb25zdCBwb3MgPSB7XHJcblx0XHRcdHRvcDogMCxcclxuXHRcdFx0bGVmdDogMCxcclxuXHRcdFx0d2lkdGg6IHBvc05vZGUub2Zmc2V0V2lkdGgsXHJcblx0XHRcdGhlaWdodDogcG9zTm9kZS5vZmZzZXRIZWlnaHQsXHJcblx0XHR9O1xyXG5cdFx0d2hpbGUgKHBvc05vZGUub2Zmc2V0UGFyZW50KSB7XHJcblx0XHRcdHBvcy50b3AgKz0gcG9zTm9kZS5vZmZzZXRUb3A7XHJcblx0XHRcdHBvcy5sZWZ0ICs9IHBvc05vZGUub2Zmc2V0TGVmdDtcclxuXHRcdFx0cG9zTm9kZSA9IHBvc05vZGUub2Zmc2V0UGFyZW50O1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBsZWZ0T2Zmc2V0ID0gTWF0aC5tYXgocG9zLmxlZnQgKyAocG9zLndpZHRoIC8gMikgLSAodGhpcy5wcm9wcy53aWR0aCAvIDIpLCBTSVpFUy5ob3Jpem9udGFsTWFyZ2luKTtcclxuXHRcdGxldCB0b3BPZmZzZXQgPSBwb3MudG9wICsgcG9zLmhlaWdodCArIFNJWkVTLmFycm93SGVpZ2h0O1xyXG5cclxuXHRcdHZhciBzcGFjZU9uUmlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIChsZWZ0T2Zmc2V0ICsgdGhpcy5wcm9wcy53aWR0aCArIFNJWkVTLmhvcml6b250YWxNYXJnaW4pO1xyXG5cdFx0aWYgKHNwYWNlT25SaWdodCA8IDApIHtcclxuXHRcdFx0bGVmdE9mZnNldCA9IGxlZnRPZmZzZXQgKyBzcGFjZU9uUmlnaHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgYXJyb3dMZWZ0T2Zmc2V0ID0gbGVmdE9mZnNldCA9PT0gU0laRVMuaG9yaXpvbnRhbE1hcmdpblxyXG5cdFx0XHQ/IHBvcy5sZWZ0ICsgKHBvcy53aWR0aCAvIDIpIC0gKFNJWkVTLmFycm93V2lkdGggLyAyKSAtIFNJWkVTLmhvcml6b250YWxNYXJnaW5cclxuXHRcdFx0OiBudWxsO1xyXG5cclxuXHRcdGNvbnN0IG5ld1N0YXRlQXZhbGlhYmxlID0gdGhpcy5zdGF0ZS5sZWZ0T2Zmc2V0ICE9PSBsZWZ0T2Zmc2V0XHJcblx0XHRcdHx8IHRoaXMuc3RhdGUudG9wT2Zmc2V0ICE9PSB0b3BPZmZzZXRcclxuXHRcdFx0fHwgdGhpcy5zdGF0ZS5hcnJvd0xlZnRPZmZzZXQgIT09IGFycm93TGVmdE9mZnNldDtcclxuXHJcblx0XHRpZiAobmV3U3RhdGVBdmFsaWFibGUpIHtcclxuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XHJcblx0XHRcdFx0bGVmdE9mZnNldDogbGVmdE9mZnNldCxcclxuXHRcdFx0XHR0b3BPZmZzZXQ6IHRvcE9mZnNldCxcclxuXHRcdFx0XHRhcnJvd0xlZnRPZmZzZXQ6IGFycm93TGVmdE9mZnNldCxcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRyZW5kZXJQb3BvdXQgKCkge1xyXG5cdFx0aWYgKCF0aGlzLnByb3BzLmlzT3BlbikgcmV0dXJuIG51bGw7XHJcblxyXG5cdFx0Y29uc3QgeyB3aWR0aCB9ID0gdGhpcy5wcm9wcztcclxuXHRcdGNvbnN0IHsgYXJyb3dMZWZ0T2Zmc2V0LCBsZWZ0T2Zmc2V0OiBsZWZ0LCB0b3BPZmZzZXQ6IHRvcCB9ID0gdGhpcy5zdGF0ZTtcclxuXHJcblx0XHRjb25zdCBhcnJvd1N0eWxlcyA9IGFycm93TGVmdE9mZnNldFxyXG5cdFx0XHQ/IHsgbGVmdDogMCwgbWFyZ2luTGVmdDogYXJyb3dMZWZ0T2Zmc2V0IH1cclxuXHRcdFx0OiBudWxsO1xyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiUG9wb3V0XCIgc3R5bGU9e3sgbGVmdCwgdG9wLCB3aWR0aCB9fT5cclxuXHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJQb3BvdXRfX2Fycm93XCIgc3R5bGU9e2Fycm93U3R5bGVzfSAvPlxyXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiUG9wb3V0X19pbm5lclwiPlxyXG5cdFx0XHRcdFx0e3RoaXMucHJvcHMuY2hpbGRyZW59XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0KTtcclxuXHR9LFxyXG5cdHJlbmRlckJsb2Nrb3V0ICgpIHtcclxuXHRcdGlmICghdGhpcy5wcm9wcy5pc09wZW4pIHJldHVybjtcclxuXHRcdHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImJsb2Nrb3V0XCIgb25DbGljaz17dGhpcy5wcm9wcy5vbkNhbmNlbH0gLz47XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PFBvcnRhbCBjbGFzc05hbWU9XCJQb3BvdXQtd3JhcHBlclwiIHJlZj1cInBvcnRhbFwiPlxyXG5cdFx0XHRcdDxUcmFuc2l0aW9uXHJcblx0XHRcdFx0XHR0cmFuc2l0aW9uRW50ZXJUaW1lb3V0PXsyMDB9XHJcblx0XHRcdFx0XHR0cmFuc2l0aW9uTGVhdmVUaW1lb3V0PXsyMDB9XHJcblx0XHRcdFx0XHR0cmFuc2l0aW9uTmFtZT1cIlBvcG91dFwiXHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyUG9wb3V0KCl9XHJcblx0XHRcdFx0PC9UcmFuc2l0aW9uPlxyXG5cdFx0XHRcdHt0aGlzLnJlbmRlckJsb2Nrb3V0KCl9XHJcblx0XHRcdDwvUG9ydGFsPlxyXG5cdFx0KTtcclxuXHR9LFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUG9wb3V0O1xyXG5cclxuLy8gZXhwb3NlIHRoZSBjaGlsZCB0byB0aGUgdG9wIGxldmVsIGV4cG9ydFxyXG5tb2R1bGUuZXhwb3J0cy5IZWFkZXIgPSByZXF1aXJlKCcuL1BvcG91dEhlYWRlcicpO1xyXG5tb2R1bGUuZXhwb3J0cy5Cb2R5ID0gcmVxdWlyZSgnLi9Qb3BvdXRCb2R5Jyk7XHJcbm1vZHVsZS5leHBvcnRzLkZvb3RlciA9IHJlcXVpcmUoJy4vUG9wb3V0Rm9vdGVyJyk7XHJcbm1vZHVsZS5leHBvcnRzLlBhbmUgPSByZXF1aXJlKCcuL1BvcG91dFBhbmUnKTtcclxuIiwiLyoqXHJcbiAqIFVzZWQgYnkgdGhlIFBvcG91dCBjb21wb25lbnQgYW5kIHRoZSBMaWdodGJveCBjb21wb25lbnQgb2YgdGhlIGZpZWxkcyBmb3JcclxuICogcG9wb3V0cy4gUmVuZGVycyBhIG5vbi1yZWFjdCBET00gbm9kZS5cclxuICovXHJcblxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG5cdGRpc3BsYXlOYW1lOiAnUG9ydGFsJyxcclxuXHRwb3J0YWxFbGVtZW50OiBudWxsLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L3NvcnQtY29tcFxyXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuXHRcdGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTtcclxuXHRcdHRoaXMucG9ydGFsRWxlbWVudCA9IGVsO1xyXG5cdFx0dGhpcy5jb21wb25lbnREaWRVcGRhdGUoKTtcclxuXHR9LFxyXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcclxuXHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5wb3J0YWxFbGVtZW50KTtcclxuXHR9LFxyXG5cdGNvbXBvbmVudERpZFVwZGF0ZSAoKSB7XHJcblx0XHRSZWFjdERPTS5yZW5kZXIoPGRpdiB7Li4udGhpcy5wcm9wc30gLz4sIHRoaXMucG9ydGFsRWxlbWVudCk7XHJcblx0fSxcclxuXHRnZXRQb3J0YWxET01Ob2RlICgpIHtcclxuXHRcdHJldHVybiB0aGlzLnBvcnRhbEVsZW1lbnQ7XHJcblx0fSxcclxuXHRyZW5kZXIgKCkge1xyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fSxcclxufSk7XHJcbiIsImltcG9ydCB7IHJvdXRlclJlZHVjZXIsIHJvdXRlck1pZGRsZXdhcmUgfSBmcm9tICdyZWFjdC1yb3V0ZXItcmVkdXgnO1xyXG5pbXBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBhcHBseU1pZGRsZXdhcmUsIGNvbXBvc2UgfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCB7IGJyb3dzZXJIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcclxuaW1wb3J0IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlIGZyb20gJ3JlZHV4LXNhZ2EnO1xyXG5cclxuaW1wb3J0IGxpc3RzUmVkdWNlciBmcm9tICcuL3NjcmVlbnMvTGlzdC9yZWR1Y2Vycy9tYWluJztcclxuaW1wb3J0IGFjdGl2ZVJlZHVjZXIgZnJvbSAnLi9zY3JlZW5zL0xpc3QvcmVkdWNlcnMvYWN0aXZlJztcclxuaW1wb3J0IGl0ZW1SZWR1Y2VyIGZyb20gJy4vc2NyZWVucy9JdGVtL3JlZHVjZXInO1xyXG5pbXBvcnQgaG9tZVJlZHVjZXIgZnJvbSAnLi9zY3JlZW5zL0hvbWUvcmVkdWNlcic7XHJcblxyXG5pbXBvcnQgcm9vdFNhZ2EgZnJvbSAnLi9zYWdhcyc7XHJcblxyXG5cclxuLy8gQ29tYmluZSB0aGUgcmVkdWNlcnMgdG8gb25lIHN0YXRlXHJcbmNvbnN0IHJlZHVjZXJzID0gY29tYmluZVJlZHVjZXJzKHtcclxuXHRsaXN0czogbGlzdHNSZWR1Y2VyLFxyXG5cdGFjdGl2ZTogYWN0aXZlUmVkdWNlcixcclxuXHRpdGVtOiBpdGVtUmVkdWNlcixcclxuXHRob21lOiBob21lUmVkdWNlcixcclxuXHRyb3V0aW5nOiByb3V0ZXJSZWR1Y2VyLFxyXG59KTtcclxuXHJcbmNvbnN0IHNhZ2FNaWRkbGV3YXJlID0gY3JlYXRlU2FnYU1pZGRsZXdhcmUoKTtcclxuXHJcbi8vIENyZWF0ZSB0aGUgc3RvcmVcclxuY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcclxuXHRyZWR1Y2VycyxcclxuXHRjb21wb3NlKFxyXG5cdFx0YXBwbHlNaWRkbGV3YXJlKFxyXG5cdFx0XHQvLyBTdXBwb3J0IHRodW5rZWQgYWN0aW9ucyBhbmQgcmVhY3Qtcm91dGVyLXJlZHV4XHJcblx0XHRcdHRodW5rLFxyXG5cdFx0XHRyb3V0ZXJNaWRkbGV3YXJlKGJyb3dzZXJIaXN0b3J5KSxcclxuXHRcdFx0c2FnYU1pZGRsZXdhcmVcclxuXHRcdCksXHJcblx0XHQvLyBTdXBwb3J0IHRoZSBDaHJvbWUgRGV2VG9vbHMgZXh0ZW5zaW9uXHJcblx0XHR3aW5kb3cuZGV2VG9vbHNFeHRlbnNpb24gPyB3aW5kb3cuZGV2VG9vbHNFeHRlbnNpb24oKSA6IGYgPT4gZlxyXG5cdClcclxuKTtcclxuXHJcbnNhZ2FNaWRkbGV3YXJlLnJ1bihyb290U2FnYSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzdG9yZTtcclxuIiwiLyoqXHJcbiAqIENvbnN0YW50c1xyXG4gKi9cclxuXHJcbi8vIGJyZWFrcG9pbnRzXHJcbmV4cG9ydHMuYnJlYWtwb2ludCA9IHtcclxuXHR4czogNDgwLFxyXG5cdHNtOiA3NjgsXHJcblx0bWQ6IDk5MixcclxuXHRsZzogMTIwMCxcclxufTtcclxuXHJcbi8vIGJvcmRlciByYWRpaVxyXG5leHBvcnRzLmJvcmRlclJhZGl1cyA9IHtcclxuXHR4czogMixcclxuXHRzbTogNCxcclxuXHRtZDogOCxcclxuXHRsZzogMTYsXHJcblx0eGw6IDMyLFxyXG59O1xyXG5cclxuLy8gY29sb3JcclxuZXhwb3J0cy5jb2xvciA9IHtcclxuXHRhcHBEYW5nZXI6ICcjZDY0MjQyJyxcclxuXHRhcHBJbmZvOiAnIzU2Y2RmYycsXHJcblx0YXBwUHJpbWFyeTogJyMxMzg1ZTUnLFxyXG5cdGFwcFN1Y2Nlc3M6ICcjMzRjMjQwJyxcclxuXHRhcHBXYXJuaW5nOiAnI2ZhOWY0NycsXHJcbn07XHJcblxyXG4vLyBzcGFjaW5nXHJcbmV4cG9ydHMuc3BhY2luZyA9IHtcclxuXHR4czogNSxcclxuXHRzbTogMTAsXHJcblx0bWQ6IDIwLFxyXG5cdGxnOiA0MCxcclxuXHR4bDogODAsXHJcbn07XHJcblxyXG4vLyB0YWJsZSBjb25zdGFudHNcclxuXHJcbmV4cG9ydHMuVEFCTEVfQ09OVFJPTF9DT0xVTU5fV0lEVEggPSAyNjsgIC8vIGljb24gKyBwYWRkaW5nXHJcbmV4cG9ydHMuTkVUV09SS19FUlJPUl9SRVRSWV9ERUxBWSA9IDUwMDsgLy8gaW4gbXNcclxuIiwiLyogZXNsaW50LWRpc2FibGUga2V5LXNwYWNpbmcgKi9cclxuY29uc3QgdGhlbWUgPSB7fTtcclxuY29uc3QgeyBibGVuZCwgZGFya2VuLCBmYWRlLCBsaWdodGVuIH0gPSByZXF1aXJlKCcuL3V0aWxzL2NvbG9yJyk7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gQ09NTU9OXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuLy8gYnJlYWtwb2ludFxyXG5cclxudGhlbWUuYnJlYWtwb2ludE51bWVyaWMgPSB7XHJcblx0bW9iaWxlOiAgICAgICAgICAgNDgwLFxyXG5cdHRhYmxldFBvcnRyYWl0OiAgIDc2OCxcclxuXHR0YWJsZXRMYW5kc2NhcGU6ICA5OTIsXHJcblx0ZGVza3RvcDogICAgICAgICAgMTIwMCxcclxufTtcclxudGhlbWUuYnJlYWtwb2ludCA9IHtcclxuXHR0YWJsZXRQb3J0cmFpdE1pbjogICh0aGVtZS5icmVha3BvaW50TnVtZXJpYy5tb2JpbGUgKyAxKSArICdweCcsXHJcblx0dGFibGV0TGFuZHNjYXBlTWluOiAodGhlbWUuYnJlYWtwb2ludE51bWVyaWMudGFibGV0UG9ydHJhaXQgKyAxKSArICdweCcsXHJcblx0ZGVza3RvcE1pbjogICAgICAgICAodGhlbWUuYnJlYWtwb2ludE51bWVyaWMudGFibGV0TGFuZHNjYXBlICsgMSkgKyAncHgnLFxyXG5cdGRlc2t0b3BMYXJnZU1pbjogICAgKHRoZW1lLmJyZWFrcG9pbnROdW1lcmljLmRlc2t0b3AgKyAxKSArICdweCcsXHJcblxyXG5cdG1vYmlsZU1heDogICAgICAgICAgIHRoZW1lLmJyZWFrcG9pbnROdW1lcmljLm1vYmlsZSArICdweCcsXHJcblx0dGFibGV0UG9ydHJhaXRNYXg6ICAgdGhlbWUuYnJlYWtwb2ludE51bWVyaWMudGFibGV0UG9ydHJhaXQgKyAncHgnLFxyXG5cdHRhYmxldExhbmRzY2FwZU1heDogIHRoZW1lLmJyZWFrcG9pbnROdW1lcmljLnRhYmxldExhbmRzY2FwZSArICdweCcsXHJcblx0ZGVza3RvcE1heDogICAgICAgICAgdGhlbWUuYnJlYWtwb2ludE51bWVyaWMuZGVza3RvcCArICdweCcsXHJcbn07XHJcblxyXG4vLyBjb250YWluZXJcclxuXHJcbnRoZW1lLmNvbnRhaW5lciA9IHtcclxuXHRndXR0ZXI6IDIwLFxyXG5cdHNpemU6IHtcclxuXHRcdHNtYWxsOiAgNzUwLFxyXG5cdFx0bWVkaXVtOiA5NzAsXHJcblx0XHRsYXJnZTogMTE3MCxcclxuXHR9LFxyXG59O1xyXG5cclxuLy8gY29sb3JcclxuXHJcbnRoZW1lLmNvbG9yID0ge1xyXG5cdGJvZHk6ICAgICAgICAgICAgICAgICcjZmFmYWZhJyxcclxuXHRsaW5rOiAgICAgICAgICAgICAgICAnIzEzODVlNScsXHJcblx0bGlua0hvdmVyOiAgICAgICAgICAgbGlnaHRlbignIzEzODVlNScsIDEwKSxcclxuXHR0ZXh0OiAgICAgICAgICAgICAgICAnIzFBMUExQScsXHJcblxyXG5cdC8vIGNvbnRleHR1YWxcclxuXHRzdWNjZXNzOiAgICAgICAgICAgICAnIzM0YzI0MCcsXHJcblx0Y3JlYXRlOiAgICAgICAgICAgICAgJyMzNGMyNDAnLCAvLyBhbGlhcyBmb3Igc3VjY2Vzc1xyXG5cdHByaW1hcnk6ICAgICAgICAgICAgICcjMTM4NWU1JyxcclxuXHRpbmZvOiAgICAgICAgICAgICAgICAnIzEzODVlNScsIC8vIGFsaWFzIGZvciBwcmltYXJ5XHJcblx0d2FybmluZzogICAgICAgICAgICAgJyNGQTMnLFxyXG5cdGRhbmdlcjogICAgICAgICAgICAgICcjZDY0MjQyJyxcclxuXHRlcnJvcjogICAgICAgICAgICAgICAnI2Q2NDI0MicsIC8vIGFsaWFzIGZvciBkYW5nZXJcclxuXHJcblx0Ly8gbmV1dHJhbHNcclxuXHRncmF5OTA6ICAgICAgICAgICAgICAnIzFBMUExQScsXHJcblx0Z3JheTgwOiAgICAgICAgICAgICAgJyMzMzMnLFxyXG5cdGdyYXk3MDogICAgICAgICAgICAgICcjNEQ0RDREJyxcclxuXHRncmF5NjA6ICAgICAgICAgICAgICAnIzY2NicsXHJcblx0Z3JheTUwOiAgICAgICAgICAgICAgJyM3RjdGN0YnLFxyXG5cdGdyYXk0MDogICAgICAgICAgICAgICcjOTk5JyxcclxuXHRncmF5MzA6ICAgICAgICAgICAgICAnI0IzQjNCMycsXHJcblx0Z3JheTIwOiAgICAgICAgICAgICAgJyNDQ0MnLFxyXG5cdGdyYXkxNTogICAgICAgICAgICAgICcjRDlEOUQ5JyxcclxuXHRncmF5MTA6ICAgICAgICAgICAgICAnI0U1RTVFNScsXHJcblx0Z3JheTA1OiAgICAgICAgICAgICAgJyNGMkYyRjInLFxyXG5cclxuXHQvLyBzb2NpYWxcclxuXHRmYWNlYm9vazogICAgICAgICAgICAnIzNCNTk5OCcsXHJcblx0Z29vZ2xlOiAgICAgICAgICAgICAgJyNEQzRFNDEnLFxyXG5cdGluc3RhZ3JhbTogICAgICAgICAgICcjM2Y3MjliJyxcclxuXHRwaW50ZXJlc3Q6ICAgICAgICAgICAnI2JkMDgxYycsXHJcblx0dHVtYmxyOiAgICAgICAgICAgICAgJyMzNTQ2NWMnLFxyXG5cdHR3aXR0ZXI6ICAgICAgICAgICAgICcjNTVBQ0VFJyxcclxuXHR5b3V0dWJlOiAgICAgICAgICAgICAnI2NkMjAxZicsXHJcblx0dmltZW86ICAgICAgICAgICAgICAgJyMxYWI3ZWEnLFxyXG59O1xyXG5cclxuLy8gYm9yZGVyIHJhZGlpXHJcblxyXG50aGVtZS5ib3JkZXJSYWRpdXMgPSB7XHJcblx0c21hbGw6ICcwLjEyNXJlbScsXHJcblx0ZGVmYXVsdDogJzAuM3JlbScsXHJcblx0bGFyZ2U6ICcwLjVyZW0nLFxyXG59O1xyXG5cclxuLy8gc3BhY2luZ1xyXG5cclxudGhlbWUuc3BhY2luZyA9IHtcclxuXHR4c21hbGw6ICAgICAgNSxcclxuXHRzbWFsbDogICAgICAgMTAsXHJcblx0ZGVmYXVsdDogICAgIDIwLFxyXG5cdGxhcmdlOiAgICAgICAzMCxcclxuXHR4bGFyZ2U6ICAgICAgNDAsXHJcblx0eHhsYXJnZTogICAgIDYwLFxyXG59O1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEVMRU1FTlRBTCBTUEVDSUZJQ1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbi8vIGJ1dHRvblxyXG5cclxudGhlbWUuYnV0dG9uID0ge1xyXG5cdGJvcmRlclJhZGl1czogdGhlbWUuYm9yZGVyUmFkaXVzLmRlZmF1bHQsXHJcblx0Ym9yZGVyV2lkdGg6IDEsXHJcblx0Zm9udDoge1xyXG5cdFx0d2VpZ2h0OiA1MDAsXHJcblx0fSxcclxuXHRwYWRkaW5nSG9yaXpvbnRhbDogJzFlbScsXHJcblx0ZGVmYXVsdDoge1xyXG5cdFx0YmdDb2xvcjogdGhlbWUuY29sb3IucHJpbWFyeSxcclxuXHRcdGJvcmRlckNvbG9yOiBibGVuZCh0aGVtZS5jb2xvci5wcmltYXJ5LCB0aGVtZS5jb2xvci5ib2R5LCA2MCksXHJcblx0XHR0ZXh0Q29sb3I6IHRoZW1lLmNvbG9yLnByaW1hcnksXHJcblx0fSxcclxuXHRwcmltYXJ5OiB7XHJcblx0XHRiZ0NvbG9yOiB0aGVtZS5jb2xvci5wcmltYXJ5LFxyXG5cdFx0Ym9yZGVyQ29sb3I6IGJsZW5kKHRoZW1lLmNvbG9yLnByaW1hcnksIHRoZW1lLmNvbG9yLmJvZHksIDYwKSxcclxuXHRcdHRleHRDb2xvcjogdGhlbWUuY29sb3IucHJpbWFyeSxcclxuXHR9LFxyXG5cdHN1Y2Nlc3M6IHtcclxuXHRcdGJnQ29sb3I6IHRoZW1lLmNvbG9yLnN1Y2Nlc3MsXHJcblx0XHRib3JkZXJDb2xvcjogYmxlbmQodGhlbWUuY29sb3Iuc3VjY2VzcywgdGhlbWUuY29sb3IuYm9keSwgNjApLFxyXG5cdFx0dGV4dENvbG9yOiB0aGVtZS5jb2xvci5zdWNjZXNzLFxyXG5cdH0sXHJcblx0d2FybmluZzoge1xyXG5cdFx0YmdDb2xvcjogdGhlbWUuY29sb3Iud2FybmluZyxcclxuXHRcdGJvcmRlckNvbG9yOiBibGVuZCh0aGVtZS5jb2xvci53YXJuaW5nLCB0aGVtZS5jb2xvci5ib2R5LCA2MCksXHJcblx0XHR0ZXh0Q29sb3I6IHRoZW1lLmNvbG9yLndhcm5pbmcsXHJcblx0fSxcclxuXHRkYW5nZXI6IHtcclxuXHRcdGJnQ29sb3I6IHRoZW1lLmNvbG9yLmRhbmdlcixcclxuXHRcdGJvcmRlckNvbG9yOiBibGVuZCh0aGVtZS5jb2xvci5kYW5nZXIsIHRoZW1lLmNvbG9yLmJvZHksIDYwKSxcclxuXHRcdHRleHRDb2xvcjogdGhlbWUuY29sb3IuZGFuZ2VyLFxyXG5cdH0sXHJcbn07XHJcblxyXG4vLyBibGFuayBzdGF0ZVxyXG5cclxudGhlbWUuYmxhbmtzdGF0ZSA9IHtcclxuXHRiYWNrZ3JvdW5kOiBkYXJrZW4odGhlbWUuY29sb3IuYm9keSwgNCksXHJcblx0Ym9yZGVyUmFkaXVzOiB0aGVtZS5ib3JkZXJSYWRpdXMuZGVmYXVsdCxcclxuXHRjb2xvcjogdGhlbWUuY29sb3IuZ3JheTQwLFxyXG5cdHBhZGRpbmdIb3Jpem9udGFsOiAnMmVtJyxcclxuXHRwYWRkaW5nVmVydGljYWw6ICc0ZW0nLFxyXG59O1xyXG5cclxuLy8gZm9udFxyXG5cclxudGhlbWUuZm9udCA9IHtcclxuXHRmYW1pbHk6IHtcclxuXHRcdG1vbm86ICdNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgXCJDb3VyaWVyIE5ld1wiLCBtb25vc3BhY2UnLFxyXG5cdFx0c2Fuc1NlcmlmOiAnXCJIZWx2ZXRpY2EgTmV1ZVwiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmJyxcclxuXHRcdHNlcmlmOiAnR2VvcmdpYSwgVGltZXMgTmV3IFJvbWFuLCBUaW1lcywgc2VyaWYnLFxyXG5cdH0sXHJcblx0c2l6ZToge1xyXG5cdFx0eHhzbWFsbDogJzAuNjVyZW0nLFxyXG5cdFx0eHNtYWxsOiAnMC43NXJlbScsXHJcblx0XHRzbWFsbDogJzAuODVyZW0nLFxyXG5cdFx0ZGVmYXVsdDogJzFyZW0nLFxyXG5cdFx0bWVkaXVtOiAnMS4ycmVtJyxcclxuXHRcdGxhcmdlOiAnMS42cmVtJyxcclxuXHRcdHhsYXJnZTogJzIuNHJlbScsXHJcblx0XHR4eGxhcmdlOiAnMy4ycmVtJyxcclxuXHR9LFxyXG59O1xyXG5cclxuLy8gZm9ybVxyXG5cclxudGhlbWUuZm9ybSA9IHtcclxuXHRsYWJlbDoge1xyXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk1MCxcclxuXHRcdGZvbnRTaXplOiAnMXJlbScsXHJcblx0XHRmb250V2VpZ2h0OiAnbm9ybWFsJyxcclxuXHRcdHdpZHRoOiAxODAsXHJcblx0fSxcclxuXHRub3RlOiB7XHJcblx0XHRjb2xvcjogdGhlbWUuY29sb3IuZ3JheTQwLFxyXG5cdFx0Zm9udFNpemU6ICcwLjllbScsXHJcblx0fSxcclxufTtcclxuXHJcbi8vIGNvbXBvbmVudFxyXG5cclxudGhlbWUuY29tcG9uZW50ID0ge1xyXG5cdGxpbmVIZWlnaHQ6ICcyLjNlbScsXHJcblx0aGVpZ2h0OiAnMi40ZW0nLFxyXG5cdHBhZGRpbmc6ICcxZW0nLFxyXG59O1xyXG5cclxuLy8gaW5wdXRcclxuXHJcbnRoZW1lLmlucHV0ID0ge1xyXG5cdGJhY2tncm91bmQ6IHtcclxuXHRcdGRlZmF1bHQ6ICd3aGl0ZScsXHJcblx0XHRkaXNhYmxlZDogJyNmYWZhZmEnLFxyXG5cdFx0bm9lZGl0OiBkYXJrZW4odGhlbWUuY29sb3IuYm9keSwgMiksXHJcblx0fSxcclxuXHRwbGFjZWhvbGRlckNvbG9yOiAnI2FhYScsXHJcblx0bGluZUhlaWdodDogdGhlbWUuY29tcG9uZW50LmxpbmVIZWlnaHQsXHJcblx0aGVpZ2h0OiB0aGVtZS5jb21wb25lbnQuaGVpZ2h0LFxyXG5cdGJvcmRlcjoge1xyXG5cdFx0Y29sb3I6IHtcclxuXHRcdFx0ZGVmYXVsdDogJyNjY2MnLFxyXG5cdFx0XHRmb2N1czogdGhlbWUuY29sb3IuaW5mbyxcclxuXHRcdFx0aG92ZXI6ICcjYmJiJyxcclxuXHRcdFx0bm9lZGl0OiBkYXJrZW4odGhlbWUuY29sb3IuYm9keSwgOCksXHJcblx0XHR9LFxyXG5cdFx0cmFkaXVzOiB0aGVtZS5ib3JkZXJSYWRpdXMuZGVmYXVsdCxcclxuXHRcdHdpZHRoOiAxLFxyXG5cdH0sXHJcblx0Ym94U2hhZG93OiAnaW5zZXQgMCAxcHggMXB4IHJnYmEoMCwgMCwgMCwgMC4wNzUpJyxcclxuXHRib3hTaGFkb3dGb2N1czogYGluc2V0IDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMDc1KSwgMCAwIDAgM3B4ICR7ZmFkZSh0aGVtZS5jb2xvci5pbmZvLCAxMCl9YCxcclxuXHRwYWRkaW5nSG9yaXpvbnRhbDogJy43NWVtJyxcclxufTtcclxuXHJcbi8vIHNlbGVjdFxyXG5cclxudGhlbWUuc2VsZWN0ID0ge1xyXG5cdGJveFNoYWRvdzogJzAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMDc1KScsXHJcbn07XHJcblxyXG4vLyBhbGVydFxyXG5cclxudGhlbWUuYWxlcnQgPSB7XHJcblx0cGFkZGluZzogJzAuNzVlbSAgMWVtJyxcclxuXHRtYXJnaW46ICcwIDAgMWVtJyxcclxuXHRib3JkZXJXaWR0aDogMSxcclxuXHRib3JkZXJSYWRpdXM6IHRoZW1lLmJvcmRlclJhZGl1cy5kZWZhdWx0LFxyXG5cclxuXHRjb2xvcjoge1xyXG5cdFx0ZGFuZ2VyOiB7XHJcblx0XHRcdGJhY2tncm91bmQ6IGZhZGUodGhlbWUuY29sb3IuZGFuZ2VyLCAxMCksXHJcblx0XHRcdGJvcmRlcjogZmFkZSh0aGVtZS5jb2xvci5kYW5nZXIsIDEwKSxcclxuXHRcdFx0dGV4dDogdGhlbWUuY29sb3IuZGFuZ2VyLFxyXG5cdFx0fSxcclxuXHRcdGluZm86IHtcclxuXHRcdFx0YmFja2dyb3VuZDogZmFkZSh0aGVtZS5jb2xvci5wcmltYXJ5LCAxMCksXHJcblx0XHRcdGJvcmRlcjogZmFkZSh0aGVtZS5jb2xvci5wcmltYXJ5LCAxMCksXHJcblx0XHRcdHRleHQ6IHRoZW1lLmNvbG9yLnByaW1hcnksXHJcblx0XHR9LFxyXG5cdFx0c3VjY2Vzczoge1xyXG5cdFx0XHRiYWNrZ3JvdW5kOiBmYWRlKHRoZW1lLmNvbG9yLnN1Y2Nlc3MsIDEwKSxcclxuXHRcdFx0Ym9yZGVyOiBmYWRlKHRoZW1lLmNvbG9yLnN1Y2Nlc3MsIDEwKSxcclxuXHRcdFx0dGV4dDogdGhlbWUuY29sb3Iuc3VjY2VzcyxcclxuXHRcdH0sXHJcblx0XHR3YXJuaW5nOiB7XHJcblx0XHRcdGJhY2tncm91bmQ6IGZhZGUodGhlbWUuY29sb3Iud2FybmluZywgMTApLFxyXG5cdFx0XHRib3JkZXI6IGZhZGUodGhlbWUuY29sb3Iud2FybmluZywgMTApLFxyXG5cdFx0XHR0ZXh0OiB0aGVtZS5jb2xvci53YXJuaW5nLFxyXG5cdFx0fSxcclxuXHR9LFxyXG59O1xyXG5cclxuLy8gZ2x5cGhcclxuXHJcbnRoZW1lLmdseXBoID0ge1xyXG5cdGNvbG9yOiB7XHJcblx0XHRkYW5nZXI6IHRoZW1lLmNvbG9yLmRhbmdlcixcclxuXHRcdGluaGVyaXQ6ICdpbmhlcml0JyxcclxuXHRcdGludmVydGVkOiAnd2hpdGUnLFxyXG5cdFx0cHJpbWFyeTogdGhlbWUuY29sb3IucHJpbWFyeSxcclxuXHRcdHN1Y2Nlc3M6IHRoZW1lLmNvbG9yLnN1Y2Nlc3MsXHJcblx0XHR3YXJuaW5nOiB0aGVtZS5jb2xvci53YXJuaW5nLFxyXG5cdH0sXHJcblx0c2l6ZToge1xyXG5cdFx0c21hbGw6IDE2LFxyXG5cdFx0bWVkaXVtOiAzMixcclxuXHRcdGxhcmdlOiA2NCxcclxuXHR9LFxyXG59O1xyXG5cclxuLy8gbW9kYWxcclxuXHJcbnRoZW1lLm1vZGFsID0ge1xyXG5cdGJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuOCknLFxyXG5cdHpJbmRleDogMTAwLFxyXG5cdHBhZGRpbmc6IHtcclxuXHRcdGRpYWxvZzoge1xyXG5cdFx0XHRob3Jpem9udGFsOiAnMWVtJyxcclxuXHRcdFx0dmVydGljYWw6IDAsXHJcblx0XHR9LFxyXG5cdFx0Ym9keToge1xyXG5cdFx0XHRob3Jpem9udGFsOiAwLFxyXG5cdFx0XHR2ZXJ0aWNhbDogJzFlbScsXHJcblx0XHR9LFxyXG5cdFx0Zm9vdGVyOiB7XHJcblx0XHRcdGhvcml6b250YWw6IDAsXHJcblx0XHRcdHZlcnRpY2FsOiAnMWVtJyxcclxuXHRcdH0sXHJcblx0XHRoZWFkZXI6IHtcclxuXHRcdFx0aG9yaXpvbnRhbDogMCxcclxuXHRcdFx0dmVydGljYWw6ICcwLjZlbScsXHJcblx0XHR9LFxyXG5cdH0sXHJcbn07XHJcblxyXG4vLyBwYWdpbmF0aW9uXHJcblxyXG50aGVtZS5wYWdpbmF0aW9uID0ge1xyXG5cdGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5NjAsXHJcblxyXG5cdGhvdmVyOiB7XHJcblx0XHRiYWNrZ3JvdW5kOiAnd2hpdGUnLFxyXG5cdFx0Ym9yZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEpJyxcclxuXHRcdGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5NjAsXHJcblx0fSxcclxuXHRzZWxlY3RlZDoge1xyXG5cdFx0YmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4wNSknLFxyXG5cdFx0Ym9yZGVyOiAndHJhbnNwYXJlbnQnLFxyXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk2MCxcclxuXHR9LFxyXG5cdGRpc2FibGVkOiB7XHJcblx0XHRiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLFxyXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk0MCxcclxuXHR9LFxyXG59O1xyXG5cclxuLy8gc3Bpbm5lclxyXG5cclxudGhlbWUuc3Bpbm5lciA9IHtcclxuXHRjb2xvcjoge1xyXG5cdFx0ZGFuZ2VyOiB0aGVtZS5jb2xvci5kYW5nZXIsXHJcblx0XHRkZWZhdWx0OiB0aGVtZS5jb2xvci5ncmF5NDAsXHJcblx0XHRpbnZlcnRlZDogJ3doaXRlJyxcclxuXHRcdHByaW1hcnk6IHRoZW1lLmNvbG9yLnByaW1hcnksXHJcblx0XHRzdWNjZXNzOiB0aGVtZS5jb2xvci5zdWNjZXNzLFxyXG5cdFx0d2FybmluZzogdGhlbWUuY29sb3Iud2FybmluZyxcclxuXHR9LFxyXG5cdHNpemU6IHtcclxuXHRcdHNtYWxsOlx0NCxcclxuXHRcdG1lZGl1bTpcdDgsXHJcblx0XHRsYXJnZTpcdDE2LFxyXG5cdH0sXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHRoZW1lO1xyXG4iLCIvKipcclxuICogSGVscGVyIG1ldGhvZCB0byBoYW5kbGUgTGlzdCBvcGVyYXRpb25zLCBlLmcuIGNyZWF0aW5nIGl0ZW1zLCBkZWxldGluZyBpdGVtcyxcclxuICogZ2V0dGluZyBpbmZvcm1hdGlvbiBhYm91dCB0aG9zZSBsaXN0cywgZXRjLlxyXG4gKi9cclxuXHJcbmNvbnN0IGxpc3RUb0FycmF5ID0gcmVxdWlyZSgnbGlzdC10by1hcnJheScpO1xyXG5jb25zdCBxcyA9IHJlcXVpcmUoJ3FzJyk7XHJcbmNvbnN0IHhociA9IHJlcXVpcmUoJ3hocicpO1xyXG5jb25zdCBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XHJcbi8vIEZpbHRlcnMgZm9yIHRydXRoeSBlbGVtZW50cyBpbiBhbiBhcnJheVxyXG5jb25zdCB0cnV0aHkgPSAoaSkgPT4gaTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIGNvbHVtbnMgb2YgYSBsaXN0LCBzdHJ1Y3R1cmVkIGJ5IGZpZWxkcyBhbmQgaGVhZGluZ3NcclxuICpcclxuICogQHBhcmFtICB7T2JqZWN0fSBsaXN0IFRoZSBsaXN0IHdlIHdhbnQgdGhlIGNvbHVtbnMgb2ZcclxuICpcclxuICogQHJldHVybiB7QXJyYXl9ICAgICAgIFRoZSBjb2x1bW5zXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDb2x1bW5zKGxpc3QpIHtcclxuXHRyZXR1cm4gbGlzdC51aUVsZW1lbnRzLm1hcCgoY29sKSA9PiB7XHJcblx0XHRpZiAoY29sLnR5cGUgPT09ICdoZWFkaW5nJykge1xyXG5cdFx0XHRyZXR1cm4geyB0eXBlOiAnaGVhZGluZycsIGNvbnRlbnQ6IGNvbC5jb250ZW50IH07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgZmllbGQgPSBsaXN0LmZpZWxkc1tjb2wuZmllbGRdO1xyXG5cdFx0XHRyZXR1cm4gZmllbGQgPyB7IHR5cGU6ICdmaWVsZCcsIGZpZWxkOiBmaWVsZCwgdGl0bGU6IGZpZWxkLmxhYmVsLCBwYXRoOiBmaWVsZC5wYXRoIH0gOiBudWxsO1xyXG5cdFx0fVxyXG5cdH0pLmZpbHRlcih0cnV0aHkpO1xyXG59XHJcblxyXG4vKipcclxuICogTWFrZSBhbiBhcnJheSBvZiBmaWx0ZXJzIGFuIG9iamVjdCBrZXllZCBieSB0aGUgZmlsdGVyaW5nIHBhdGhcclxuICpcclxuICogQHBhcmFtICB7QXJyYXl9IGZpbHRlckFycmF5IFRoZSBhcnJheSBvZiBmaWx0ZXJzXHJcbiAqXHJcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICBUaGUgY29ycmVjdGVkIGZpbHRlcnMsIGtleWVkIGJ5IHBhdGhcclxuICovXHJcbmZ1bmN0aW9uIGdldEZpbHRlcnMoZmlsdGVyQXJyYXkpIHtcclxuXHR2YXIgZmlsdGVycyA9IHt9O1xyXG5cdGZpbHRlckFycmF5LmZvckVhY2goKGZpbHRlcikgPT4ge1xyXG5cdFx0ZmlsdGVyc1tmaWx0ZXIuZmllbGQucGF0aF0gPSBmaWx0ZXIudmFsdWU7XHJcblx0fSk7XHJcblx0cmV0dXJuIGZpbHRlcnM7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBzb3J0aW5nIHN0cmluZyBmb3IgdGhlIFVSSVxyXG4gKlxyXG4gKiBAcGFyYW0gIHtBcnJheX0gc29ydC5wYXRocyBUaGUgcGF0aHMgd2Ugd2FudCB0byBzb3J0XHJcbiAqXHJcbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICAgIEFsbCB0aGUgc29ydGluZyBxdWVyaWVzIHdlIHdhbnQgYXMgYSBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGdldFNvcnRTdHJpbmcoc29ydCkge1xyXG5cdHJldHVybiBzb3J0LnBhdGhzLm1hcChpID0+IHtcclxuXHRcdC8vIElmIHdlIHdhbnQgdG8gc29ydCBpbnZlcnRlZCwgd2UgcHJlZml4IGEgXCItXCIgYmVmb3JlIHRoZSBzb3J0IHBhdGhcclxuXHRcdHJldHVybiBpLmludmVydCA/ICctJyArIGkucGF0aCA6IGkucGF0aDtcclxuXHR9KS5maWx0ZXIodHJ1dGh5KS5qb2luKCcsJyk7XHJcbn07XHJcblxyXG4vKipcclxuICogQnVpbGQgYSBxdWVyeSBzdHJpbmcgZnJvbSBhIGJ1bmNoIG9mIG9wdGlvbnNcclxuICovXHJcbmZ1bmN0aW9uIGJ1aWxkUXVlcnlTdHJpbmcob3B0aW9ucykge1xyXG5cdGNvbnN0IHF1ZXJ5ID0ge307XHJcblx0aWYgKG9wdGlvbnMuc2VhcmNoKSBxdWVyeS5zZWFyY2ggPSBvcHRpb25zLnNlYXJjaDtcclxuXHRpZiAob3B0aW9ucy5maWx0ZXJzLmxlbmd0aCkgcXVlcnkuZmlsdGVycyA9IEpTT04uc3RyaW5naWZ5KGdldEZpbHRlcnMob3B0aW9ucy5maWx0ZXJzKSk7XHJcblx0aWYgKG9wdGlvbnMuY29sdW1ucykgcXVlcnkuZmllbGRzID0gb3B0aW9ucy5jb2x1bW5zLm1hcChpID0+IGkucGF0aCkuam9pbignLCcpO1xyXG5cdGlmIChvcHRpb25zLnBhZ2UgJiYgb3B0aW9ucy5wYWdlLnNpemUpIHF1ZXJ5LmxpbWl0ID0gb3B0aW9ucy5wYWdlLnNpemU7XHJcblx0aWYgKG9wdGlvbnMucGFnZSAmJiBvcHRpb25zLnBhZ2UuaW5kZXggPiAxKSBxdWVyeS5za2lwID0gKG9wdGlvbnMucGFnZS5pbmRleCAtIDEpICogb3B0aW9ucy5wYWdlLnNpemU7XHJcblx0aWYgKG9wdGlvbnMuc29ydCkgcXVlcnkuc29ydCA9IGdldFNvcnRTdHJpbmcob3B0aW9ucy5zb3J0KTtcclxuXHRxdWVyeS5leHBhbmRSZWxhdGlvbnNoaXBGaWVsZHMgPSB0cnVlO1xyXG5cclxuXHQvLyBDdXN0b20gRmlsdGVyIHRvIEZldGNoIGFsbCBSZWNvcmRzIFdoaWxlIFNlbGVjdGluZyBNYW5hZ2UgQWxsXHJcblxyXG5cdGlmIChvcHRpb25zLmZpbHRlcnMuZmV0Y2hfYWxsX2RhdGEpIHtcclxuXHRcdHF1ZXJ5LmxpbWl0ID0gb3B0aW9ucy5maWx0ZXJzLml0ZW1fY291bnQ7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gJz8nICsgcXMuc3RyaW5naWZ5KHF1ZXJ5KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUaGUgbWFpbiBsaXN0IGhlbHBlciBjbGFzc1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gKi9cclxuY29uc3QgTGlzdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblx0Ly8gVE9ETyB0aGVzZSBvcHRpb25zIGFyZSBwb3NzaWJseSB1bnVzZWRcclxuXHRhc3NpZ24odGhpcywgb3B0aW9ucyk7XHJcblx0dGhpcy5jb2x1bW5zID0gZ2V0Q29sdW1ucyh0aGlzKTtcclxuXHR0aGlzLmV4cGFuZGVkRGVmYXVsdENvbHVtbnMgPSB0aGlzLmV4cGFuZENvbHVtbnModGhpcy5kZWZhdWx0Q29sdW1ucyk7XHJcblx0dGhpcy5kZWZhdWx0Q29sdW1uUGF0aHMgPSB0aGlzLmV4cGFuZGVkRGVmYXVsdENvbHVtbnMubWFwKGkgPT4gaS5wYXRoKS5qb2luKCcsJyk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGFuIGl0ZW0gdmlhIHRoZSBBUElcclxuICpcclxuICogQHBhcmFtICB7Rm9ybURhdGF9IGZvcm1EYXRhIFRoZSBzdWJtaXR0ZWQgZm9ybSBkYXRhXHJcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgdGhlIEFQSSBjYWxsXHJcbiAqL1xyXG5MaXN0LnByb3RvdHlwZS5jcmVhdGVJdGVtID0gZnVuY3Rpb24gKGZvcm1EYXRhLCBjYWxsYmFjaykge1xyXG5cdHhocih7XHJcblx0XHR1cmw6IGAke0tleXN0b25lLmFkbWluUGF0aH0vYXBpLyR7dGhpcy5wYXRofS9jcmVhdGVgLFxyXG5cdFx0cmVzcG9uc2VUeXBlOiAnanNvbicsXHJcblx0XHRtZXRob2Q6ICdQT1NUJyxcclxuXHRcdGhlYWRlcnM6IGFzc2lnbih7fSwgS2V5c3RvbmUuY3NyZi5oZWFkZXIpLFxyXG5cdFx0Ym9keTogZm9ybURhdGEsXHJcblx0fSwgKGVyciwgcmVzcCwgZGF0YSkgPT4ge1xyXG5cdFx0aWYgKGVycikgY2FsbGJhY2soZXJyKTtcclxuXHRcdGlmIChyZXNwLnN0YXR1c0NvZGUgPT09IDIwMCkge1xyXG5cdFx0XHRjYWxsYmFjayhudWxsLCBkYXRhKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIE5PVEU6IHhociBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCB3aXRoIGFuIEVycm9yIGlmXHJcblx0XHRcdC8vICB0aGVyZSBpcyBhbiBlcnJvciBpbiB0aGUgYnJvd3NlciB0aGF0IHByZXZlbnRzXHJcblx0XHRcdC8vICBzZW5kaW5nIHRoZSByZXF1ZXN0LiBBIEhUVFAgNTAwIHJlc3BvbnNlIGlzIG5vdFxyXG5cdFx0XHQvLyAgZ29pbmcgdG8gY2F1c2UgYW4gZXJyb3IgdG8gYmUgcmV0dXJuZWQuXHJcblx0XHRcdGNhbGxiYWNrKGRhdGEsIG51bGwpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZSBhIHNwZWNpZmljIGl0ZW1cclxuICpcclxuICogQHBhcmFtICB7U3RyaW5nfSAgIGlkICAgICAgIFRoZSBpZCBvZiB0aGUgaXRlbSB3ZSB3YW50IHRvIHVwZGF0ZVxyXG4gKiBAcGFyYW0gIHtGb3JtRGF0YX0gZm9ybURhdGEgVGhlIHN1Ym1pdHRlZCBmb3JtIGRhdGFcclxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciB0aGUgQVBJIGNhbGxcclxuICovXHJcbkxpc3QucHJvdG90eXBlLnVwZGF0ZUl0ZW0gPSBmdW5jdGlvbiAoaWQsIGZvcm1EYXRhLCBjYWxsYmFjaykge1xyXG5cdHhocih7XHJcblx0XHR1cmw6IGAke0tleXN0b25lLmFkbWluUGF0aH0vYXBpLyR7dGhpcy5wYXRofS8ke2lkfWAsXHJcblx0XHRyZXNwb25zZVR5cGU6ICdqc29uJyxcclxuXHRcdG1ldGhvZDogJ1BPU1QnLFxyXG5cdFx0aGVhZGVyczogYXNzaWduKHt9LCBLZXlzdG9uZS5jc3JmLmhlYWRlciksXHJcblx0XHRib2R5OiBmb3JtRGF0YSxcclxuXHR9LCAoZXJyLCByZXNwLCBkYXRhKSA9PiB7XHJcblx0XHRpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcclxuXHRcdGlmIChyZXNwLnN0YXR1c0NvZGUgPT09IDIwMCkge1xyXG5cdFx0XHRjYWxsYmFjayhudWxsLCBkYXRhKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGNhbGxiYWNrKGRhdGEpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59O1xyXG5cclxuTGlzdC5wcm90b3R5cGUuZXhwYW5kQ29sdW1ucyA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG5cdGxldCBuYW1lSW5jbHVkZWQgPSBmYWxzZTtcclxuXHRjb25zdCBjb2xzID0gbGlzdFRvQXJyYXkoaW5wdXQpLm1hcChpID0+IHtcclxuXHRcdGNvbnN0IHNwbGl0ID0gaS5zcGxpdCgnfCcpO1xyXG5cdFx0bGV0IHBhdGggPSBzcGxpdFswXTtcclxuXHRcdGxldCB3aWR0aCA9IHNwbGl0WzFdO1xyXG5cdFx0aWYgKHBhdGggPT09ICdfX25hbWVfXycpIHtcclxuXHRcdFx0cGF0aCA9IHRoaXMubmFtZVBhdGg7XHJcblx0XHR9XHJcblx0XHRjb25zdCBmaWVsZCA9IHRoaXMuZmllbGRzW3BhdGhdO1xyXG5cdFx0aWYgKCFmaWVsZCkge1xyXG5cdFx0XHQvLyBUT0RPOiBTdXBwb3J0IGFyYml0YXJ5IGRvY3VtZW50IHBhdGhzXHJcblx0XHRcdGlmICghdGhpcy5oaWRkZW4pIHtcclxuXHRcdFx0XHRpZiAocGF0aCA9PT0gdGhpcy5uYW1lUGF0aCkge1xyXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKGBMaXN0ICR7dGhpcy5rZXl9IGRpZCBub3Qgc3BlY2lmeSBhbnkgZGVmYXVsdCBjb2x1bW5zIG9yIGEgbmFtZSBmaWVsZGApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oYExpc3QgJHt0aGlzLmtleX0gc3BlY2lmaWVkIGFuIGludmFsaWQgZGVmYXVsdCBjb2x1bW46ICR7cGF0aH1gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHBhdGggPT09IHRoaXMubmFtZVBhdGgpIHtcclxuXHRcdFx0bmFtZUluY2x1ZGVkID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGZpZWxkOiBmaWVsZCxcclxuXHRcdFx0bGFiZWw6IGZpZWxkLmxhYmVsLFxyXG5cdFx0XHRwYXRoOiBmaWVsZC5wYXRoLFxyXG5cdFx0XHR0eXBlOiBmaWVsZC50eXBlLFxyXG5cdFx0XHR3aWR0aDogd2lkdGgsXHJcblx0XHR9O1xyXG5cdH0pLmZpbHRlcih0cnV0aHkpO1xyXG5cdGlmICghbmFtZUluY2x1ZGVkKSB7XHJcblx0XHRjb2xzLnVuc2hpZnQoe1xyXG5cdFx0XHR0eXBlOiAnaWQnLFxyXG5cdFx0XHRsYWJlbDogJ0lEJyxcclxuXHRcdFx0cGF0aDogJ2lkJyxcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRyZXR1cm4gY29scztcclxufTtcclxuXHJcbkxpc3QucHJvdG90eXBlLmV4cGFuZFNvcnQgPSBmdW5jdGlvbiAoaW5wdXQpIHtcclxuXHRjb25zdCBzb3J0ID0ge1xyXG5cdFx0cmF3SW5wdXQ6IGlucHV0IHx8IHRoaXMuZGVmYXVsdFNvcnQsXHJcblx0XHRpc0RlZmF1bHRTb3J0OiBmYWxzZSxcclxuXHR9O1xyXG5cdHNvcnQuaW5wdXQgPSBzb3J0LnJhd0lucHV0O1xyXG5cdGlmIChzb3J0LmlucHV0ID09PSAnX19kZWZhdWx0X18nKSB7XHJcblx0XHRzb3J0LmlzRGVmYXVsdFNvcnQgPSB0cnVlO1xyXG5cdFx0c29ydC5pbnB1dCA9IHRoaXMuc29ydGFibGUgPyAnc29ydE9yZGVyJyA6IHRoaXMubmFtZVBhdGg7XHJcblx0fVxyXG5cdHNvcnQucGF0aHMgPSBsaXN0VG9BcnJheShzb3J0LmlucHV0KS5tYXAocGF0aCA9PiB7XHJcblx0XHRsZXQgaW52ZXJ0ID0gZmFsc2U7XHJcblx0XHRpZiAocGF0aC5jaGFyQXQoMCkgPT09ICctJykge1xyXG5cdFx0XHRpbnZlcnQgPSB0cnVlO1xyXG5cdFx0XHRwYXRoID0gcGF0aC5zdWJzdHIoMSk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmIChwYXRoLmNoYXJBdCgwKSA9PT0gJysnKSB7XHJcblx0XHRcdHBhdGggPSBwYXRoLnN1YnN0cigxKTtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGZpZWxkID0gdGhpcy5maWVsZHNbcGF0aF07XHJcblx0XHRpZiAoIWZpZWxkKSB7XHJcblx0XHRcdC8vIFRPRE86IFN1cHBvcnQgYXJiaXRhcnkgZG9jdW1lbnQgcGF0aHNcclxuXHRcdFx0Y29uc29sZS53YXJuKCdJbnZhbGlkIFNvcnQgc3BlY2lmaWVkOicsIHBhdGgpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRmaWVsZDogZmllbGQsXHJcblx0XHRcdHR5cGU6IGZpZWxkLnR5cGUsXHJcblx0XHRcdGxhYmVsOiBmaWVsZC5sYWJlbCxcclxuXHRcdFx0cGF0aDogZmllbGQucGF0aCxcclxuXHRcdFx0aW52ZXJ0OiBpbnZlcnQsXHJcblx0XHR9O1xyXG5cdH0pLmZpbHRlcih0cnV0aHkpO1xyXG5cdHJldHVybiBzb3J0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIExvYWQgYSBzcGVjaWZpYyBpdGVtIHZpYSB0aGUgQVBJXHJcbiAqXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gICBpdGVtSWQgICBUaGUgaWQgb2YgdGhlIGl0ZW0gd2Ugd2FudCB0byBsb2FkXHJcbiAqIEBwYXJhbSAge09iamVjdH0gICBvcHRpb25zXHJcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFja1xyXG4gKi9cclxuTGlzdC5wcm90b3R5cGUubG9hZEl0ZW0gPSBmdW5jdGlvbiAoaXRlbUlkLCBvcHRpb25zLCBjYWxsYmFjaykge1xyXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRjYWxsYmFjayA9IG9wdGlvbnM7XHJcblx0XHRvcHRpb25zID0gbnVsbDtcclxuXHR9XHJcblx0bGV0IHVybCA9IEtleXN0b25lLmFkbWluUGF0aCArICcvYXBpLycgKyB0aGlzLnBhdGggKyAnLycgKyBpdGVtSWQ7XHJcblx0Y29uc3QgcXVlcnkgPSBxcy5zdHJpbmdpZnkob3B0aW9ucyk7XHJcblx0aWYgKHF1ZXJ5Lmxlbmd0aCkgdXJsICs9ICc/JyArIHF1ZXJ5O1xyXG5cdHhocih7XHJcblx0XHR1cmw6IHVybCxcclxuXHRcdHJlc3BvbnNlVHlwZTogJ2pzb24nLFxyXG5cdH0sIChlcnIsIHJlc3AsIGRhdGEpID0+IHtcclxuXHRcdGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xyXG5cdFx0Ly8gUGFzcyB0aGUgZGF0YSBhcyByZXN1bHQgb3IgZXJyb3IsIGRlcGVuZGluZyBvbiB0aGUgc3RhdHVzQ29kZVxyXG5cdFx0aWYgKHJlc3Auc3RhdHVzQ29kZSA9PT0gMjAwKSB7XHJcblx0XHRcdGNhbGxiYWNrKG51bGwsIGRhdGEpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y2FsbGJhY2soZGF0YSk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn07XHJcblxyXG4vKipcclxuICogTG9hZCBhbGwgaXRlbXMgb2YgYSBsaXN0LCBvcHRpb25hbGx5IHBhc3Npbmcgb2JqZWN0cyB0byBidWlsZCBhIHF1ZXJ5IHN0cmluZ1xyXG4gKiBmb3Igc29ydGluZyBvciBzZWFyY2hpbmdcclxuICpcclxuICogQHBhcmFtICB7T2JqZWN0fSAgIG9wdGlvbnNcclxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXHJcbiAqL1xyXG5MaXN0LnByb3RvdHlwZS5sb2FkSXRlbXMgPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcclxuXHRjb25zdCB1cmwgPSBLZXlzdG9uZS5hZG1pblBhdGggKyAnL2FwaS8nICsgdGhpcy5wYXRoICsgYnVpbGRRdWVyeVN0cmluZyhvcHRpb25zKTtcclxuXHR4aHIoe1xyXG5cdFx0dXJsOiB1cmwsXHJcblx0XHRyZXNwb25zZVR5cGU6ICdqc29uJyxcclxuXHR9LCAoZXJyLCByZXNwLCBkYXRhKSA9PiB7XHJcblx0XHRpZiAoZXJyKSBjYWxsYmFjayhlcnIpO1xyXG5cdFx0Ly8gUGFzcyB0aGUgZGF0YSBhcyByZXN1bHQgb3IgZXJyb3IsIGRlcGVuZGluZyBvbiB0aGUgc3RhdHVzQ29kZVxyXG5cdFx0aWYgKHJlc3Auc3RhdHVzQ29kZSA9PT0gMjAwKSB7XHJcblx0XHRcdGNhbGxiYWNrKG51bGwsIGRhdGEpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y2FsbGJhY2soZGF0YSk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIGRvd25sb2FkIFVSTCB0byBkb3dubG9hZCBhIGxpc3Qgd2l0aCB0aGUgY3VycmVudCBzb3J0aW5nLCBmaWx0ZXJpbmcsXHJcbiAqIHNlbGVjdGlvbiBhbmQgc2VhcmNoaW5nIG9wdGlvbnNcclxuICpcclxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXHJcbiAqXHJcbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICBUaGUgZG93bmxvYWQgVVJMXHJcbiAqL1xyXG5MaXN0LnByb3RvdHlwZS5nZXREb3dubG9hZFVSTCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblx0Y29uc3QgdXJsID0gS2V5c3RvbmUuYWRtaW5QYXRoICsgJy9hcGkvJyArIHRoaXMucGF0aDtcclxuXHRjb25zdCBwYXJ0cyA9IFtdO1xyXG5cdGlmIChvcHRpb25zLmZvcm1hdCAhPT0gJ2pzb24nKSB7XHJcblx0XHRvcHRpb25zLmZvcm1hdCA9ICdjc3YnO1xyXG5cdH1cclxuXHRwYXJ0cy5wdXNoKG9wdGlvbnMuc2VhcmNoID8gJ3NlYXJjaD0nICsgb3B0aW9ucy5zZWFyY2ggOiAnJyk7XHJcblx0cGFydHMucHVzaChvcHRpb25zLmZpbHRlcnMubGVuZ3RoID8gJ2ZpbHRlcnM9JyArIEpTT04uc3RyaW5naWZ5KGdldEZpbHRlcnMob3B0aW9ucy5maWx0ZXJzKSkgOiAnJyk7XHJcblx0cGFydHMucHVzaChvcHRpb25zLmNvbHVtbnMgPyAnc2VsZWN0PScgKyBvcHRpb25zLmNvbHVtbnMubWFwKGkgPT4gaS5wYXRoKS5qb2luKCcsJykgOiAnJyk7XHJcblx0cGFydHMucHVzaChvcHRpb25zLnNvcnQgPyAnc29ydD0nICsgZ2V0U29ydFN0cmluZyhvcHRpb25zLnNvcnQpIDogJycpO1xyXG5cdHBhcnRzLnB1c2goJ2V4cGFuZFJlbGF0aW9uc2hpcEZpZWxkcz10cnVlJyk7XHJcblx0cmV0dXJuIHVybCArICcvZXhwb3J0LicgKyBvcHRpb25zLmZvcm1hdCArICc/JyArIHBhcnRzLmZpbHRlcih0cnV0aHkpLmpvaW4oJyYnKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBEZWxldGUgYSBzcGVjaWZpYyBpdGVtIHZpYSB0aGUgQVBJXHJcbiAqXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gICBpdGVtSWQgICBUaGUgaWQgb2YgdGhlIGl0ZW0gd2Ugd2FudCB0byBkZWxldGVcclxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXHJcbiAqL1xyXG5MaXN0LnByb3RvdHlwZS5kZWxldGVJdGVtID0gZnVuY3Rpb24gKGl0ZW1JZCwgY2FsbGJhY2spIHtcclxuXHR0aGlzLmRlbGV0ZUl0ZW1zKFtpdGVtSWRdLCBjYWxsYmFjayk7XHJcbn07XHJcblxyXG4vKipcclxuICogRGVsZXRlIG11bHRpcGxlIGl0ZW1zIGF0IG9uY2UgdmlhIHRoZSBBUElcclxuICpcclxuICogQHBhcmFtICB7QXJyYXl9ICAgaXRlbUlkcyAgQW4gYXJyYXkgb2YgaWRzIG9mIGl0ZW1zIHdlIHdhbnQgdG8gZGVsZXRlXHJcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFja1xyXG4gKi9cclxuTGlzdC5wcm90b3R5cGUuZGVsZXRlSXRlbXMgPSBmdW5jdGlvbiAoaXRlbUlkcywgY2FsbGJhY2spIHtcclxuXHRjb25zdCB1cmwgPSBLZXlzdG9uZS5hZG1pblBhdGggKyAnL2FwaS8nICsgdGhpcy5wYXRoICsgJy9kZWxldGUnO1xyXG5cdHhocih7XHJcblx0XHR1cmw6IHVybCxcclxuXHRcdG1ldGhvZDogJ1BPU1QnLFxyXG5cdFx0aGVhZGVyczogYXNzaWduKHt9LCBLZXlzdG9uZS5jc3JmLmhlYWRlciksXHJcblx0XHRqc29uOiB7XHJcblx0XHRcdGlkczogaXRlbUlkcyxcclxuXHRcdH0sXHJcblx0fSwgKGVyciwgcmVzcCwgYm9keSkgPT4ge1xyXG5cdFx0aWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XHJcblx0XHQvLyBQYXNzIHRoZSBib2R5IGFzIHJlc3VsdCBvciBlcnJvciwgZGVwZW5kaW5nIG9uIHRoZSBzdGF0dXNDb2RlXHJcblx0XHRpZiAocmVzcC5zdGF0dXNDb2RlID09PSAyMDApIHtcclxuXHRcdFx0Y2FsbGJhY2sobnVsbCwgYm9keSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjYWxsYmFjayhib2R5KTtcclxuXHRcdH1cclxuXHR9KTtcclxufTtcclxuXHJcbkxpc3QucHJvdG90eXBlLnJlb3JkZXJJdGVtcyA9IGZ1bmN0aW9uIChpdGVtLCBvbGRTb3J0T3JkZXIsIG5ld1NvcnRPcmRlciwgcGFnZU9wdGlvbnMsIGNhbGxiYWNrKSB7XHJcblx0Y29uc3QgdXJsID0gS2V5c3RvbmUuYWRtaW5QYXRoICsgJy9hcGkvJyArIHRoaXMucGF0aCArICcvJyArIGl0ZW0uaWQgKyAnL3NvcnRPcmRlci8nICsgb2xkU29ydE9yZGVyICsgJy8nICsgbmV3U29ydE9yZGVyICsgJy8nICsgYnVpbGRRdWVyeVN0cmluZyhwYWdlT3B0aW9ucyk7XHJcblx0eGhyKHtcclxuXHRcdHVybDogdXJsLFxyXG5cdFx0bWV0aG9kOiAnUE9TVCcsXHJcblx0XHRoZWFkZXJzOiBhc3NpZ24oe30sIEtleXN0b25lLmNzcmYuaGVhZGVyKSxcclxuXHR9LCAoZXJyLCByZXNwLCBib2R5KSA9PiB7XHJcblx0XHRpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGJvZHkgPSBKU09OLnBhcnNlKGJvZHkpO1xyXG5cdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRjb25zb2xlLmxvZygnRXJyb3IgcGFyc2luZyByZXN1bHRzIGpzb246JywgZSwgYm9keSk7XHJcblx0XHRcdHJldHVybiBjYWxsYmFjayhlKTtcclxuXHRcdH1cclxuXHRcdC8vIFBhc3MgdGhlIGJvZHkgYXMgcmVzdWx0IG9yIGVycm9yLCBkZXBlbmRpbmcgb24gdGhlIHN0YXR1c0NvZGVcclxuXHRcdGlmIChyZXNwLnN0YXR1c0NvZGUgPT09IDIwMCkge1xyXG5cdFx0XHRjYWxsYmFjayhudWxsLCBib2R5KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGNhbGxiYWNrKGJvZHkpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59O1xyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTGlzdDtcclxuIiwiLyoqXHJcblx0VmFsaWRhdGUgSGV4XHJcblx0PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5cdEBwYXJhbSB7U3RyaW5nfSBoZXhcclxuXHJcblx0MS4gcmVtb3ZlIGhhc2ggaWYgcHJlc2VudFxyXG5cdDIuIGNvbnZlcnQgZnJvbSAzIHRvIDYgZGlnaXQgY29sb3IgY29kZSAmIGVuc3VyZSB2YWxpZCBoZXhcclxuKi9cclxuXHJcbmZ1bmN0aW9uIHZhbGlkYXRlSGV4IChjb2xvcikge1xyXG5cdGNvbnN0IGhleCA9IGNvbG9yLnJlcGxhY2UoJyMnLCAnJyk7XHJcblxyXG5cdGlmIChoZXgubGVuZ3RoID09PSAzKSB7XHJcblx0XHRyZXR1cm4gaGV4WzBdICsgaGV4WzBdICsgaGV4WzFdICsgaGV4WzFdICsgaGV4WzJdICsgaGV4WzJdO1xyXG5cdH1cclxuXHRpZiAoaGV4Lmxlbmd0aCAhPT0gNikge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNvbG9yIHZhbHVlIHByb3ZpZGVkOiBcIiR7Y29sb3J9XCJgKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBoZXg7XHJcbn07XHJcblxyXG4vKipcclxuXHRGYWRlIENvbG9yXHJcblx0PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5cdFRha2VzIGEgaGV4aWRlY2ltYWwgY29sb3IsIGNvbnZlcnRzIGl0IHRvIFJHQiBhbmQgYXBwbGllcyBhbiBhbHBoYSB2YWx1ZS5cclxuXHJcblx0QHBhcmFtIHtTdHJpbmd9IGNvbG9yXHJcblx0QHBhcmFtIHtOdW1iZXJ9IG9wYWNpdHkgKDAtMTAwKVxyXG5cclxuXHQxLiBjb252ZXJ0IGhleCB0byBSR0JcclxuXHQyLiBjb21iaW5lIGFuZCBhZGQgYWxwaGEgY2hhbm5lbFxyXG4qL1xyXG5cclxuZnVuY3Rpb24gZmFkZSAoY29sb3IsIG9wYWNpdHkgPSAxMDApIHtcclxuXHRjb25zdCBkZWNpbWFsRnJhY3Rpb24gPSBvcGFjaXR5IC8gMTAwO1xyXG5cdGNvbnN0IGhleCA9IHZhbGlkYXRlSGV4KGNvbG9yKTtcclxuXHJcblx0Ly8gMS5cclxuXHRjb25zdCByID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZygwLCAyKSwgMTYpO1xyXG5cdGNvbnN0IGcgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDIsIDQpLCAxNik7XHJcblx0Y29uc3QgYiA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoNCwgNiksIDE2KTtcclxuXHJcblx0Ly8gMi5cclxuXHRjb25zdCByZXN1bHQgPSAncmdiYSgnXHJcblx0XHQrIHIgKyAnLCdcclxuXHRcdCsgZyArICcsJ1xyXG5cdFx0KyBiICsgJywnXHJcblx0XHQrIGRlY2ltYWxGcmFjdGlvblxyXG5cdFx0KyAnKSc7XHJcblxyXG5cdHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcblx0U2hhZGUgQ29sb3JcclxuXHQ9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcblx0VGFrZXMgYSBoZXhpZGVjaW1hbCBjb2xvciwgY29udmVydHMgaXQgdG8gUkdCIGFuZCBsaWdodGVucyBvciBkYXJrZW5zXHJcblxyXG5cdEBwYXJhbSB7U3RyaW5nfSBjb2xvclxyXG5cdEBwYXJhbSB7TnVtYmVyfSBvcGFjaXR5ICgwLTEwMClcclxuXHJcblx0MS4gZG8gZmFuY3kgUkdCIGJpdHdpc2Ugb3BlcmF0aW9uc1xyXG5cdDIuIGNvbWJpbmUgYmFjayBpbnRvIGEgaGV4IHZhbHVlXHJcbiovXHJcblxyXG5mdW5jdGlvbiBzaGFkZSAoY29sb3IsIHBlcmNlbnQpIHtcclxuXHRjb25zdCBkZWNpbWFsRnJhY3Rpb24gPSBwZXJjZW50IC8gMTAwO1xyXG5cdGNvbnN0IGhleCA9IHZhbGlkYXRlSGV4KGNvbG9yKTtcclxuXHJcblx0Ly8gMS5cclxuXHRsZXQgZiA9IHBhcnNlSW50KGhleCwgMTYpO1xyXG5cdGxldCB0ID0gZGVjaW1hbEZyYWN0aW9uIDwgMCA/IDAgOiAyNTU7XHJcblx0bGV0IHAgPSBkZWNpbWFsRnJhY3Rpb24gPCAwID8gZGVjaW1hbEZyYWN0aW9uICogLTEgOiBkZWNpbWFsRnJhY3Rpb247XHJcblxyXG5cdGNvbnN0IFIgPSBmID4+IDE2O1xyXG5cdGNvbnN0IEcgPSBmID4+IDggJiAweDAwRkY7XHJcblx0Y29uc3QgQiA9IGYgJiAweDAwMDBGRjtcclxuXHJcblx0Ly8gMi5cclxuXHRyZXR1cm4gJyMnICsgKDB4MTAwMDAwMFxyXG5cdFx0KyAoTWF0aC5yb3VuZCgodCAtIFIpICogcCkgKyBSKSAqIDB4MTAwMDBcclxuXHRcdCsgKE1hdGgucm91bmQoKHQgLSBHKSAqIHApICsgRykgKiAweDEwMFxyXG5cdFx0KyAoTWF0aC5yb3VuZCgodCAtIEIpICogcCkgKyBCKSkudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xyXG59O1xyXG5cclxuLy8gc2hhZGUgaGVscGVyc1xyXG5jb25zdCBsaWdodGVuID0gc2hhZGU7XHJcbmZ1bmN0aW9uIGRhcmtlbiAoY29sb3IsIHBlcmNlbnQpIHtcclxuXHRyZXR1cm4gc2hhZGUoY29sb3IsIHBlcmNlbnQgKiAtMSk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcblx0QmxlbmQgQ29sb3JcclxuXHQ9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcblx0VGFrZXMgdHdvIGhleGlkZWNpbWFsIGNvbG9ycyBhbmQgYmxlbmQgdGhlbSB0b2dldGhlclxyXG5cclxuXHRAcGFyYW0ge1N0cmluZ30gY29sb3IxXHJcblx0QHBhcmFtIHtTdHJpbmd9IGNvbG9yMlxyXG5cdEBwYXJhbSB7TnVtYmVyfSBwZXJjZW50ICgwLTEwMClcclxuXHJcblx0MS4gZG8gZmFuY3kgUkdCIGJpdHdpc2Ugb3BlcmF0aW9uc1xyXG5cdDIuIGNvbWJpbmUgYmFjayBpbnRvIGEgaGV4IHZhbHVlXHJcbiovXHJcblxyXG5mdW5jdGlvbiBibGVuZCAoY29sb3IxLCBjb2xvcjIsIHBlcmNlbnQpIHtcclxuXHRjb25zdCBkZWNpbWFsRnJhY3Rpb24gPSBwZXJjZW50IC8gMTAwO1xyXG5cdGNvbnN0IGhleDEgPSB2YWxpZGF0ZUhleChjb2xvcjEpO1xyXG5cdGNvbnN0IGhleDIgPSB2YWxpZGF0ZUhleChjb2xvcjIpO1xyXG5cclxuXHQvLyAxLlxyXG5cdGNvbnN0IGYgPSBwYXJzZUludChoZXgxLCAxNik7XHJcblx0Y29uc3QgdCA9IHBhcnNlSW50KGhleDIsIDE2KTtcclxuXHJcblx0Y29uc3QgUjEgPSBmID4+IDE2O1xyXG5cdGNvbnN0IEcxID0gZiA+PiA4ICYgMHgwMEZGO1xyXG5cdGNvbnN0IEIxID0gZiAmIDB4MDAwMEZGO1xyXG5cclxuXHRjb25zdCBSMiA9IHQgPj4gMTY7XHJcblx0Y29uc3QgRzIgPSB0ID4+IDggJiAweDAwRkY7XHJcblx0Y29uc3QgQjIgPSB0ICYgMHgwMDAwRkY7XHJcblxyXG5cdC8vIDIuXHJcblx0cmV0dXJuICcjJyArICgweDEwMDAwMDBcclxuXHRcdCsgKE1hdGgucm91bmQoKFIyIC0gUjEpICogZGVjaW1hbEZyYWN0aW9uKSArIFIxKSAqIDB4MTAwMDBcclxuXHRcdCsgKE1hdGgucm91bmQoKEcyIC0gRzEpICogZGVjaW1hbEZyYWN0aW9uKSArIEcxKSAqIDB4MTAwXHJcblx0XHQrIChNYXRoLnJvdW5kKChCMiAtIEIxKSAqIGRlY2ltYWxGcmFjdGlvbikgKyBCMSkpLnRvU3RyaW5nKDE2KS5zbGljZSgxKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0YmxlbmQsXHJcblx0ZGFya2VuLFxyXG5cdGZhZGUsXHJcblx0bGlnaHRlbixcclxufTtcclxuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyBDb25jYXRlbmF0ZSBDbGFzc25hbWVzXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gU3VwcG9ydCBjbGFzc05hbWUgYXMgYW4gYXJyYXk6XHJcbi8vIGZvcmNlIGNsYXNzbmFtZSBwcm9wIGludG8gYW4gYXJyYXkgKHBvc3NpYmx5IG9mIGFycmF5cykgdGhlbiBmbGF0dGVuXHJcblxyXG4vKlxyXG5cdC8vIFRvIHVzZSBzcHJlYWQgdGhlIG5ldyBhcnJheSBpbnRvIGFwaHJvZGl0ZSdzIGBjc3NgIGZ1bmN0aW9uXHJcblxyXG5cdGZ1bmN0aW9uIENvbXBvbmVudCAoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0pIHtcclxuXHRcdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcclxuXHRcdFx0Y2xhc3Nlcy5jb21wb25lbnQsXHJcblx0XHRcdC4uLmNvbmNhdENsYXNzbmFtZXMoY2xhc3NOYW1lKVxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xyXG5cdH07XHJcbiovXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbmNhdENsYXNzbmFtZXMgKGNsYXNzTmFtZSkge1xyXG5cdHJldHVybiBbY2xhc3NOYW1lXS5yZWR1Y2UoKGEsIGIpID0+IHtcclxuXHRcdHJldHVybiBhLmNvbmNhdChiKTtcclxuXHR9LCBbXSk7XHJcbn07XHJcbiIsIi8qKlxyXG5cdExpbmVhciBHcmFkaWVudFxyXG5cdD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuXHRTaG9ydC1oYW5kIGhlbHBlciBmb3IgYWRkaW5nIGEgbGluZWFyIGdyYWRpZW50IHRvIHlvdXIgY29tcG9uZW50LlxyXG5cclxuXHQtIEBwYXJhbSB7U3RyaW5nfSBzaWRlT3JDb3JuZXJcclxuXHQtIEBwYXJhbSB7U3RyaW5nfSB0b3BcclxuXHQtIEBwYXJhbSB7U3RyaW5nfSBib3R0b21cclxuXHQtIEBwYXJhbSB7U3RyaW5nfSBiYXNlIChvcHRpb25hbClcclxuXHQtIEByZXR1cm5zIHtPYmplY3R9IGNzcyBsaW5lYXIgZ3JhZGllbnQgZGVjbGFyYXRpb25cclxuXHJcblx0U3ByZWFkIHRoZSBkZWNsYXJhdGlvbiBpbnRvIHlvdXIgY29tcG9uZW50IGNsYXNzOlxyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuXHRteUNvbXBvbmVudENsYXNzOiB7XHJcblx0XHQuLi5saW5lYXJHcmFkaWVudChyZWQsIGJsdWUpLFxyXG5cdH1cclxuKi9cclxuXHJcbmZ1bmN0aW9uIGxpbmVhckdyYWRpZW50IChkaXJlY3Rpb24sIHRvcCwgYm90dG9tLCBiYXNlID0gJycpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0YmFja2dyb3VuZDogYGxpbmVhci1ncmFkaWVudCgke2RpcmVjdGlvbn0sICR7dG9wfSAwJSwgJHtib3R0b219IDEwMCUpICR7YmFzZX1gLFxyXG5cdH07XHJcbn1cclxuXHJcbi8vIFZlcnRpY2FsIEdyYWRpZW50XHJcbmZ1bmN0aW9uIGdyYWRpZW50VmVydGljYWwgKHRvcCwgYm90dG9tLCBiYXNlKSB7XHJcblx0cmV0dXJuIGxpbmVhckdyYWRpZW50KCd0byBib3R0b20nLCB0b3AsIGJvdHRvbSwgYmFzZSk7XHJcbn1cclxuXHJcbi8vIEhvcml6b250YWwgR3JhZGllbnRcclxuZnVuY3Rpb24gZ3JhZGllbnRIb3Jpem9udGFsICh0b3AsIGJvdHRvbSwgYmFzZSkge1xyXG5cdHJldHVybiBsaW5lYXJHcmFkaWVudCgndG8gcmlnaHQnLCB0b3AsIGJvdHRvbSwgYmFzZSk7XHJcbn1cclxuXHJcbi8qKlxyXG5cdEJvcmRlciBSYWRpdXNcclxuXHQ9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcblx0U2hvcnQtaGFuZCBoZWxwZXIgZm9yIGJvcmRlciByYWRpaVxyXG4qL1xyXG5cclxuLy8gdG9wXHJcbmZ1bmN0aW9uIGJvcmRlclRvcFJhZGl1cyAocmFkaXVzKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdGJvcmRlclRvcExlZnRSYWRpdXM6IHJhZGl1cyxcclxuXHRcdGJvcmRlclRvcFJpZ2h0UmFkaXVzOiByYWRpdXMsXHJcblx0fTtcclxufVxyXG5cclxuLy8gcmlnaHRcclxuZnVuY3Rpb24gYm9yZGVyUmlnaHRSYWRpdXMgKHJhZGl1cykge1xyXG5cdHJldHVybiB7XHJcblx0XHRib3JkZXJCb3R0b21SaWdodFJhZGl1czogcmFkaXVzLFxyXG5cdFx0Ym9yZGVyVG9wUmlnaHRSYWRpdXM6IHJhZGl1cyxcclxuXHR9O1xyXG59XHJcblxyXG4vLyBib3R0b21cclxuZnVuY3Rpb24gYm9yZGVyQm90dG9tUmFkaXVzIChyYWRpdXMpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0Ym9yZGVyQm90dG9tTGVmdFJhZGl1czogcmFkaXVzLFxyXG5cdFx0Ym9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IHJhZGl1cyxcclxuXHR9O1xyXG59XHJcblxyXG4vLyBsZWZ0XHJcbmZ1bmN0aW9uIGJvcmRlckxlZnRSYWRpdXMgKHJhZGl1cykge1xyXG5cdHJldHVybiB7XHJcblx0XHRib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiByYWRpdXMsXHJcblx0XHRib3JkZXJUb3BMZWZ0UmFkaXVzOiByYWRpdXMsXHJcblx0fTtcclxufVxyXG5cclxuLy8gUmV0dXJuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRib3JkZXJUb3BSYWRpdXMsXHJcblx0Ym9yZGVyUmlnaHRSYWRpdXMsXHJcblx0Ym9yZGVyQm90dG9tUmFkaXVzLFxyXG5cdGJvcmRlckxlZnRSYWRpdXMsXHJcblxyXG5cdGdyYWRpZW50SG9yaXpvbnRhbCxcclxuXHRncmFkaWVudFZlcnRpY2FsLFxyXG59O1xyXG4iLCIvKipcclxuICogRXhwb3J0cyBhbiBvYmplY3Qgb2YgbGlzdHMsIGtleWVkIHdpdGggdGhlaXIga2V5IGluc3RlYWQgb2YgdGhlaXIgbmFtZSBhbmRcclxuICogd3JhcHBlZCB3aXRoIHRoZSBMaXN0IGhlbHBlciAoLi9MaXN0LmpzKVxyXG4gKi9cclxuXHJcbmltcG9ydCBMaXN0IGZyb20gJy4vTGlzdCc7XHJcblxyXG5leHBvcnRzLmxpc3RzQnlLZXkgPSB7fTtcclxuZXhwb3J0cy5saXN0c0J5UGF0aCA9IHt9O1xyXG5cclxuZm9yIChjb25zdCBrZXkgaW4gS2V5c3RvbmUubGlzdHMpIHtcclxuXHQvLyBHdWFyZCBmb3ItaW5zXHJcblx0aWYgKHt9Lmhhc093blByb3BlcnR5LmNhbGwoS2V5c3RvbmUubGlzdHMsIGtleSkpIHtcclxuXHRcdHZhciBsaXN0ID0gbmV3IExpc3QoS2V5c3RvbmUubGlzdHNba2V5XSk7XHJcblx0XHRleHBvcnRzLmxpc3RzQnlLZXlba2V5XSA9IGxpc3Q7XHJcblx0XHRleHBvcnRzLmxpc3RzQnlQYXRoW2xpc3QucGF0aF0gPSBsaXN0O1xyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xyXG5pbXBvcnQgYmxhY2tsaXN0IGZyb20gJ2JsYWNrbGlzdCc7XHJcbmltcG9ydCBpc0VxdWFsIGZyb20gJ2xvZGFzaC9pc0VxdWFsJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja0ZvclF1ZXJ5Q2hhbmdlIChuZXh0UHJvcHMsIHRoaXNQcm9wcykge1xyXG5cdGNvbnN0IHsgcXVlcnkgfSA9IG5leHRQcm9wcy5sb2NhdGlvbjtcclxuXHRjb25zdCB7IGNhY2hlZFF1ZXJ5IH0gPSBuZXh0UHJvcHMuYWN0aXZlO1xyXG5cclxuXHRjb25zdCBwYXJzZWRRdWVyeSA9IE9iamVjdC5hc3NpZ24oXHJcblx0XHR7fSxcclxuXHRcdHF1ZXJ5LFxyXG5cdFx0eyBwYWdlOiBwYXJzZUludChxdWVyeS5wYWdlKSB9XHJcblx0KTtcclxuXHJcblx0aWYgKCFwYXJzZWRRdWVyeS5wYWdlKSBkZWxldGUgcGFyc2VkUXVlcnkucGFnZTtcclxuXHJcblx0Y29uc3QgYXR0ZW51YXRlZFF1ZXJ5ID0gYmxhY2tsaXN0KHBhcnNlZFF1ZXJ5LCAnc2VhcmNoJyk7XHJcblx0Y29uc3QgYXR0ZW51YXRlZENhY2hlID0gYmxhY2tsaXN0KGNhY2hlZFF1ZXJ5LCAnc2VhcmNoJyk7XHJcblxyXG5cdGlmIChuZXh0UHJvcHMubG9jYXRpb24ucGF0aG5hbWUgIT09IHRoaXNQcm9wcy5sb2NhdGlvbi5wYXRobmFtZSkgcmV0dXJuIHRydWU7XHJcblxyXG5cdGlmICghaXNFcXVhbChhdHRlbnVhdGVkUXVlcnksIGF0dGVudWF0ZWRDYWNoZSkpIHJldHVybiB0cnVlO1xyXG5cclxuXHRyZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpc2VWYWx1ZSAodmFsdWUsIGJlbmNobWFyaykge1xyXG5cdGlmICh2YWx1ZSA9PT0gYmVuY2htYXJrKSByZXR1cm4gdm9pZCAwO1xyXG5cdHJldHVybiB2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNvcnRRdWVyeVBhcmFtcyAocmF3SW5wdXQsIGRlZmF1bHRTb3J0KSB7XHJcblx0cmV0dXJuIG5vcm1hbGlzZVZhbHVlKHJhd0lucHV0LCBkZWZhdWx0U29ydCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQYWdlUXVlcnlQYXJhbXMgKHBhZ2UsIGRlZmF1bHRWYWx1ZSkge1xyXG5cdHJldHVybiBub3JtYWxpc2VWYWx1ZShwYWdlLCBkZWZhdWx0VmFsdWUpO1xyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlcyB0aGUgcXVlcnkgcGFyYW1ldGVycyB3aXRoIHRoZSBvbmVzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnRcclxuICpcclxuICogQHBhcmFtICB7T2JqZWN0fSBwYXJhbXMgICAgICAgICBUaGUgbmV3IHBhcmFtZXRlcnMgdG8gYmUgYWRkZWRcclxuICogQHBhcmFtICB7T2JqZWN0fSBsb2NhdGlvbiAgICAgICBUaGUgY3VycmVudCBsb2NhdGlvbiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVRdWVyeVBhcmFtcyAocGFyYW1zLCBsb2NhdGlvbikge1xyXG5cdGlmICghbG9jYXRpb24pIHJldHVybjtcclxuXHRjb25zdCBuZXdQYXJhbXMgPSBhc3NpZ24oe30sIGxvY2F0aW9uLnF1ZXJ5KTtcclxuXHQvLyBTdHJpbmdpZnkgbmVzdGVkIG9iamVjdHMgaW5zaWRlIHRoZSBwYXJhbWV0ZXJzXHJcblx0T2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKGkgPT4ge1xyXG5cdFx0aWYgKHBhcmFtc1tpXSkge1xyXG5cdFx0XHRuZXdQYXJhbXNbaV0gPSBwYXJhbXNbaV07XHJcblx0XHRcdGlmICh0eXBlb2YgbmV3UGFyYW1zW2ldID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRcdG5ld1BhcmFtc1tpXSA9IEpTT04uc3RyaW5naWZ5KG5ld1BhcmFtc1tpXSk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRlbGV0ZSBuZXdQYXJhbXNbaV07XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdHJldHVybiBuZXdQYXJhbXM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdHJpbmdpZnkgdGhlIGNvbHVtbnMgYXJyYXkgZnJvbSB0aGUgc3RhdGVcclxuICpcclxuICogQHBhcmFtICB7QXJyYXl9ICBjb2x1bW5zICAgICAgICAgICAgVGhlIGNvbHVtbnMgZnJvbSB0aGUgYWN0aXZlIHN0YXRlXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gZGVmYXVsdENvbHVtblBhdGhzIFRoZSBkZWZhdWx0IGNvbHVtbiBwYXRocyBvZiB0aGUgY3VycmVudCBsaXN0XHJcbiAqXHJcbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICAgICAgICAgICAgIFRoZSBjb2x1bW4gYXJyYXksIHN0cmluZ2lmaWVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5Q29sdW1ucyAoY29sdW1ucywgZGVmYXVsdENvbHVtblBhdGhzKSB7XHJcblx0aWYgKCFjb2x1bW5zKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdC8vIFR1cm5zIFt7IHBhdGg6ICdzb21lQ29sdW1uJyB9LCB7IHBhdGg6ICdzb21lT3RoZXJDb2x1bW4nIH1dXHJcblx0Ly8gaW50byBbJ3NvbWVDb2x1bW4nLCAnc29tZU90aGVyQ29sdW1uJ11cclxuXHRsZXQgY29sdW1uU3RyaW5nID0gY29sdW1ucy5tYXAoKGNvbHVtbikgPT4gY29sdW1uLnBhdGgpO1xyXG5cdC8vIFR1cm5zIHRoYXQgYXJyYXkgaW50byAnc29tZUNvbHVtbixzb21lT3RoZXJDb2x1bW4nXHJcblx0aWYgKEFycmF5LmlzQXJyYXkoY29sdW1uU3RyaW5nKSkgY29sdW1uU3RyaW5nID0gY29sdW1uU3RyaW5nLmpvaW4oJywnKTtcclxuXHQvLyBJZiB0aGF0IGlzIHRoZSBzYW1lIGFzIHRoZSBkZWZhdWx0IGNvbHVtbnMsIGRvbid0IHNldCB0aGUgcXVlcnkgcGFyYW1cclxuXHRpZiAoY29sdW1uU3RyaW5nID09PSBkZWZhdWx0Q29sdW1uUGF0aHMpIGNvbHVtblN0cmluZyA9IHVuZGVmaW5lZDtcclxuXHRyZXR1cm4gY29sdW1uU3RyaW5nO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEZsYXR0ZW5zIGZpbHRlcnMgZnJvbSBzdGF0ZSBpbnRvIHRoZSBtaW5pbXVtIG5lZWRlZCBvYmplY3QgdG8gYmUgdXNlZCBhcyBhIHVybFxyXG4gKiBwYXJhbVxyXG4gKlxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IGZpbHRlckFycmF5ICAgICAgICAgVGhlIGFycmF5IG9mIGZpbHRlcnMgZnJvbSBzdGF0ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcmFtZXRpemVGaWx0ZXJzIChmaWx0ZXJBcnJheSkge1xyXG5cdGlmICghZmlsdGVyQXJyYXkgfHwgZmlsdGVyQXJyYXkubGVuZ3RoID09PSAwKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdHJldHVybiBmaWx0ZXJBcnJheS5tYXAoKGZpbHRlcikgPT4ge1xyXG5cdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24oe1xyXG5cdFx0XHRwYXRoOiBmaWx0ZXIuZmllbGQucGF0aCxcclxuXHRcdH0sIGZpbHRlci52YWx1ZSk7XHJcblx0fSk7XHJcbn1cclxuIiwiLyoqXHJcbiAqIEEgZmV3IGhlbHBlciBtZXRob2RzIGZvciBzdHJpbmdzXHJcbiAqL1xyXG5cclxuaW1wb3J0IGluZmxlY3QgZnJvbSAnaSc7XHJcbmltcG9ydCB7IGNvbXBhY3QsIHNpemUgfSBmcm9tICdsb2Rhc2gnO1xyXG5cclxuLyoqXHJcbiAqIERpc3BsYXlzIHRoZSBzaW5ndWxhciBvciBwbHVyYWwgb2YgYSBzdHJpbmcgYmFzZWQgb24gYSBudW1iZXJcclxuICogb3IgbnVtYmVyIG9mIGl0ZW1zIGluIGFuIGFycmF5LlxyXG4gKlxyXG4gKiBJZiBhcml0eSBpcyAxLCByZXR1cm5zIHRoZSBwbHVyYWwgZm9ybSBvZiB0aGUgd29yZC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGNvdW50XHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzaW5ndWxhciBzdHJpbmdcclxuICogQHBhcmFtIHtTdHJpbmd9IHBsdXJhbCBzdHJpbmdcclxuICogQHJldHVybiB7U3RyaW5nfSBzaW5ndWxhciBvciBwbHVyYWwsICogaXMgcmVwbGFjZWQgd2l0aCBjb3VudFxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmV4cG9ydHMucGx1cmFsID0gZnVuY3Rpb24gKGNvdW50LCBzbiwgcGwpIHtcclxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xyXG5cdFx0cmV0dXJuIGluZmxlY3QucGx1cmFsaXplKGNvdW50KTtcclxuXHR9XHJcblx0aWYgKHR5cGVvZiBzbiAhPT0gJ3N0cmluZycpIHNuID0gJyc7XHJcblx0aWYgKCFwbCkge1xyXG5cdFx0cGwgPSBpbmZsZWN0LnBsdXJhbGl6ZShzbik7XHJcblx0fVxyXG5cdGlmICh0eXBlb2YgY291bnQgPT09ICdzdHJpbmcnKSB7XHJcblx0XHRjb3VudCA9IE51bWJlcihjb3VudCk7XHJcblx0fSBlbHNlIGlmICh0eXBlb2YgY291bnQgIT09ICdudW1iZXInKSB7XHJcblx0XHRjb3VudCA9IHNpemUoY291bnQpO1xyXG5cdH1cclxuXHRyZXR1cm4gKGNvdW50ID09PSAxID8gc24gOiBwbCkucmVwbGFjZSgnKicsIGNvdW50KTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIGZpcnN0IGxldHRlciBpbiBhIHN0cmluZyB0byB1cHBlcmNhc2VcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxyXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFN0clxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmV4cG9ydHMudXBjYXNlID0gZnVuY3Rpb24gKHN0cikge1xyXG5cdGlmIChzdHIgJiYgc3RyLnRvU3RyaW5nKSBzdHIgPSBzdHIudG9TdHJpbmcoKTtcclxuXHRpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgIXN0ci5sZW5ndGgpIHJldHVybiAnJztcclxuXHRyZXR1cm4gKHN0ci5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKSArIHN0ci5zdWJzdHIoMSkpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgZmlyc3QgbGV0dGVyIGluIGEgc3RyaW5nIHRvIGxvd2VyY2FzZVxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gU3RyXHJcbiAqIEByZXR1cm4ge1N0cmluZ30gc3RyXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZXhwb3J0cy5kb3duY2FzZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuXHRpZiAoc3RyICYmIHN0ci50b1N0cmluZykgc3RyID0gc3RyLnRvU3RyaW5nKCk7XHJcblx0aWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnIHx8ICFzdHIubGVuZ3RoKSByZXR1cm4gJyc7XHJcblx0cmV0dXJuIChzdHIuc3Vic3RyKDAsIDEpLnRvTG93ZXJDYXNlKCkgKyBzdHIuc3Vic3RyKDEpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQ29udmVydHMgYSBzdHJpbmcgdG8gdGl0bGUgY2FzZVxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4ge1N0cmluZ30gVGl0bGUgQ2FzZSBmb3JtIG9mIHN0clxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmV4cG9ydHMudGl0bGVjYXNlID0gZnVuY3Rpb24gKHN0cikge1xyXG5cdGlmIChzdHIgJiYgc3RyLnRvU3RyaW5nKSBzdHIgPSBzdHIudG9TdHJpbmcoKTtcclxuXHRpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgIXN0ci5sZW5ndGgpIHJldHVybiAnJztcclxuXHRzdHIgPSBzdHIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxICQyJyk7XHJcblx0dmFyIHBhcnRzID0gc3RyLnNwbGl0KC9cXHN8X3xcXC0vKTtcclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRpZiAocGFydHNbaV0gJiYgIS9eW0EtWjAtOV0rJC8udGVzdChwYXJ0c1tpXSkpIHtcclxuXHRcdFx0cGFydHNbaV0gPSBleHBvcnRzLnVwY2FzZShwYXJ0c1tpXSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBjb21wYWN0KHBhcnRzKS5qb2luKCcgJyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIGEgc3RyaW5nIHRvIGNhbWVsIGNhc2VcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGxvd2VyY2FzZUZpcnN0V29yZFxyXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGNhbWVsLWNhc2UgZm9ybSBvZiBzdHJcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5leHBvcnRzLmNhbWVsY2FzZSA9IGZ1bmN0aW9uIChzdHIsIGxjKSB7XHJcblx0cmV0dXJuIGluZmxlY3QuY2FtZWxpemUoc3RyLCAhKGxjKSk7XHJcbn07XHJcbiIsInZhciBFeE1hdGNoID0gcmVxdWlyZSgnZXhwcmVzc2lvbi1tYXRjaCcpOyAvLyBNYXRjaGVzIG9iamVjdHMgd2l0aCBleHByZXNzaW9uc1xyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBzb21ldGhpbmcgaXMgYW4gb2JqZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSAge0FueX0gYXJnICAgVGhlIHNvbWV0aGluZyB3ZSB3YW50IHRvIGNoZWNrIHRoZSB0eXBlIG9mXHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59IElmIGFyZyBpcyBhbiBvYmplY3Qgb3Igbm90XHJcbiAqL1xyXG5mdW5jdGlvbiBpc09iamVjdCAoYXJnKSB7XHJcblx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpID09PSAnW29iamVjdCBPYmplY3RdJztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFdmFsdWF0ZXMgdGhlIHZpc2liaWxpdHkgb2YgYSBmaWVsZCBiYXNlZCBvbiBpdHMgZGVwZW5kZW5jaWVzIGFuZCB0aGVpciB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtICB7T2JqZWN0fEFueX0gZGVwZW5kc09uIFRoZSBkZXBlbmRzT24gdmFyaWFibGUgd2UgZ2V0IGZyb20gdGhlIGZpZWxkXHJcbiAqIEBwYXJhbSAge09iamVjdH1cdFx0dmFsdWVzICAgIFRoZSB2YWx1ZXMgY3VycmVudGx5IGluIHRoZSBmaWVsZHNcclxuICogQHJldHVybiB7Qm9vbGVhbn1cdFx0XHQgIElmIHRoZSBjdXJyZW50IGZpZWxkIHNob3VsZCBiZSBkaXNwbGF5ZWQgYmFzZWRcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgIFx0ICBvbiBpdCdzIGRlcGVuZGVuY2llcyBhbmQgdGhlaXIgdmFsdWVzXHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV2YWxEZXBlbmRzT24gKGRlcGVuZHNPbiwgdmFsdWVzKSB7XHJcblx0aWYgKCFpc09iamVjdChkZXBlbmRzT24pIHx8ICFPYmplY3Qua2V5cyhkZXBlbmRzT24pLmxlbmd0aCkge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHQvLyBDaGVja3MgaWYgdGhlIGN1cnJlbnQgZmllbGQgc2hvdWxkIGJlIGRpc3BsYXllZCwgYmFzZWQgb24gdGhlIHZhbHVlcyBvZlxyXG5cdC8vIG90aGVyIGZpZWxkcyBhbmQgdGhlIGRlcGVuZHNPbiBjb25maWd1cmF0aW9uIG9mIHRoaXMgZmllbGRcclxuXHR2YXIgTWF0Y2ggPSBuZXcgRXhNYXRjaChkZXBlbmRzT24sIHZhbHVlcywgZmFsc2UpO1xyXG5cdHJldHVybiBNYXRjaC5tYXRjaCgpO1xyXG59O1xyXG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFWaWV3O1xuIiwidmFyIGhhc2hDbGVhciA9IHJlcXVpcmUoJy4vX2hhc2hDbGVhcicpLFxuICAgIGhhc2hEZWxldGUgPSByZXF1aXJlKCcuL19oYXNoRGVsZXRlJyksXG4gICAgaGFzaEdldCA9IHJlcXVpcmUoJy4vX2hhc2hHZXQnKSxcbiAgICBoYXNoSGFzID0gcmVxdWlyZSgnLi9faGFzaEhhcycpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG4iLCJ2YXIgbGlzdENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVDbGVhcicpLFxuICAgIGxpc3RDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZURlbGV0ZScpLFxuICAgIGxpc3RDYWNoZUdldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUdldCcpLFxuICAgIGxpc3RDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUhhcycpLFxuICAgIGxpc3RDYWNoZVNldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdENhY2hlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciBtYXBDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVDbGVhcicpLFxuICAgIG1hcENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVEZWxldGUnKSxcbiAgICBtYXBDYWNoZUdldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlR2V0JyksXG4gICAgbWFwQ2FjaGVIYXMgPSByZXF1aXJlKCcuL19tYXBDYWNoZUhhcycpLFxuICAgIG1hcENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwQ2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyksXG4gICAgc2V0Q2FjaGVBZGQgPSByZXF1aXJlKCcuL19zZXRDYWNoZUFkZCcpLFxuICAgIHNldENhY2hlSGFzID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVIYXMnKTtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldENhY2hlO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gVWludDhBcnJheTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYWtNYXA7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlGaWx0ZXI7XG4iLCJ2YXIgYmFzZVRpbWVzID0gcmVxdWlyZSgnLi9fYmFzZVRpbWVzJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TGlrZUtleXM7XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlQdXNoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVNvbWU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIiwidmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRBbGxLZXlzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzQXJndW1lbnRzO1xuIiwidmFyIGJhc2VJc0VxdWFsRGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsRGVlcCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgZXF1YWxCeVRhZyA9IHJlcXVpcmUoJy4vX2VxdWFsQnlUYWcnKSxcbiAgICBlcXVhbE9iamVjdHMgPSByZXF1aXJlKCcuL19lcXVhbE9iamVjdHMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWxEZWVwO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc01hc2tlZCA9IHJlcXVpcmUoJy4vX2lzTWFza2VkJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hdGl2ZTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNUeXBlZEFycmF5O1xuIiwidmFyIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5cycpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXM7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUaW1lcztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYWNoZUhhcztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG4iLCJ2YXIgU2V0Q2FjaGUgPSByZXF1aXJlKCcuL19TZXRDYWNoZScpLFxuICAgIGFycmF5U29tZSA9IHJlcXVpcmUoJy4vX2FycmF5U29tZScpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBtYXBUb0FycmF5ID0gcmVxdWlyZSgnLi9fbWFwVG9BcnJheScpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxCeVRhZztcbiIsInZhciBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbE9iamVjdHM7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCJ2YXIgYmFzZUdldEFsbEtleXMgPSByZXF1aXJlKCcuL19iYXNlR2V0QWxsS2V5cycpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXM7XG4iLCJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXBEYXRhO1xuIiwidmFyIGJhc2VJc05hdGl2ZSA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hdGl2ZScpLFxuICAgIGdldFZhbHVlID0gcmVxdWlyZSgnLi9fZ2V0VmFsdWUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmU7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UHJvdG90eXBlO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwidmFyIGFycmF5RmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXlGaWx0ZXInKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9scztcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHwgcmVJc1VpbnQudGVzdCh2YWx1ZSkpICYmXG4gICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXlhYmxlO1xuIiwidmFyIGNvcmVKc0RhdGEgPSByZXF1aXJlKCcuL19jb3JlSnNEYXRhJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNNYXNrZWQ7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQcm90b3R5cGU7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCJ2YXIgSGFzaCA9IHJlcXVpcmUoJy4vX0hhc2gnKSxcbiAgICBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlQ2xlYXI7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVEZWxldGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBUb0FycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUNyZWF0ZTtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbm9kZVV0aWw7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCIvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUFkZDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUhhcztcbiIsIi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9BcnJheTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrRGVsZXRlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0hhcztcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrU2V0O1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuIiwiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXE7XG4iLCJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKSxcbiAgICBzdHViRmFsc2UgPSByZXF1aXJlKCcuL3N0dWJGYWxzZScpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNCdWZmZXI7XG4iLCJ2YXIgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpO1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAqIGVxdWl2YWxlbnQuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLFxuICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAqIGJ5IHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTVxuICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIG9iamVjdCA9PT0gb3RoZXI7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0VxdWFsO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0xlbmd0aDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUGxhaW5PYmplY3Q7XG4iLCJ2YXIgYmFzZUlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Jhc2VJc1R5cGVkQXJyYXknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVHlwZWRBcnJheTtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5cztcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkFycmF5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJGYWxzZTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9lZmZlY3RzJykiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaW8gPSByZXF1aXJlKCcuL2ludGVybmFsL2lvJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAndGFrZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby50YWtlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAndGFrZW0nLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8udGFrZW07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdwdXQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8ucHV0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAncmFjZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5yYWNlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnY2FsbCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5jYWxsO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnYXBwbHknLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uYXBwbHk7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjcHMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uY3BzO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnZm9yaycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5mb3JrO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnc3Bhd24nLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uc3Bhd247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdqb2luJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLmpvaW47XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjYW5jZWwnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uY2FuY2VsO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnc2VsZWN0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLnNlbGVjdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2FjdGlvbkNoYW5uZWwnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uYWN0aW9uQ2hhbm5lbDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NhbmNlbGxlZCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5jYW5jZWxsZWQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdmbHVzaCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5mbHVzaDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3Rha2VFdmVyeScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby50YWtlRXZlcnk7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICd0YWtlTGF0ZXN0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLnRha2VMYXRlc3Q7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICd0aHJvdHRsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby50aHJvdHRsZTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5idWZmZXJzID0gZXhwb3J0cy5CVUZGRVJfT1ZFUkZMT1cgPSB1bmRlZmluZWQ7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBCVUZGRVJfT1ZFUkZMT1cgPSBleHBvcnRzLkJVRkZFUl9PVkVSRkxPVyA9ICdDaGFubmVsXFwncyBCdWZmZXIgb3ZlcmZsb3chJztcblxudmFyIE9OX09WRVJGTE9XX1RIUk9XID0gMTtcbnZhciBPTl9PVkVSRkxPV19EUk9QID0gMjtcbnZhciBPTl9PVkVSRkxPV19TTElERSA9IDM7XG52YXIgT05fT1ZFUkZMT1dfRVhQQU5EID0gNDtcblxudmFyIHplcm9CdWZmZXIgPSB7IGlzRW1wdHk6IF91dGlscy5rVHJ1ZSwgcHV0OiBfdXRpbHMubm9vcCwgdGFrZTogX3V0aWxzLm5vb3AgfTtcblxuZnVuY3Rpb24gcmluZ0J1ZmZlcigpIHtcbiAgdmFyIGxpbWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxMDtcbiAgdmFyIG92ZXJmbG93QWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBhcnIgPSBuZXcgQXJyYXkobGltaXQpO1xuICB2YXIgbGVuZ3RoID0gMDtcbiAgdmFyIHB1c2hJbmRleCA9IDA7XG4gIHZhciBwb3BJbmRleCA9IDA7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKGl0KSB7XG4gICAgYXJyW3B1c2hJbmRleF0gPSBpdDtcbiAgICBwdXNoSW5kZXggPSAocHVzaEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICBsZW5ndGgrKztcbiAgfTtcblxuICB2YXIgdGFrZSA9IGZ1bmN0aW9uIHRha2UoKSB7XG4gICAgaWYgKGxlbmd0aCAhPSAwKSB7XG4gICAgICB2YXIgaXQgPSBhcnJbcG9wSW5kZXhdO1xuICAgICAgYXJyW3BvcEluZGV4XSA9IG51bGw7XG4gICAgICBsZW5ndGgtLTtcbiAgICAgIHBvcEluZGV4ID0gKHBvcEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICAgIHJldHVybiBpdDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgd2hpbGUgKGxlbmd0aCkge1xuICAgICAgaXRlbXMucHVzaCh0YWtlKCkpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBpc0VtcHR5OiBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgICAgcmV0dXJuIGxlbmd0aCA9PSAwO1xuICAgIH0sXG4gICAgcHV0OiBmdW5jdGlvbiBwdXQoaXQpIHtcbiAgICAgIGlmIChsZW5ndGggPCBsaW1pdCkge1xuICAgICAgICBwdXNoKGl0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBkb3VibGVkTGltaXQgPSB2b2lkIDA7XG4gICAgICAgIHN3aXRjaCAob3ZlcmZsb3dBY3Rpb24pIHtcbiAgICAgICAgICBjYXNlIE9OX09WRVJGTE9XX1RIUk9XOlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEJVRkZFUl9PVkVSRkxPVyk7XG4gICAgICAgICAgY2FzZSBPTl9PVkVSRkxPV19TTElERTpcbiAgICAgICAgICAgIGFycltwdXNoSW5kZXhdID0gaXQ7XG4gICAgICAgICAgICBwdXNoSW5kZXggPSAocHVzaEluZGV4ICsgMSkgJSBsaW1pdDtcbiAgICAgICAgICAgIHBvcEluZGV4ID0gcHVzaEluZGV4O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBPTl9PVkVSRkxPV19FWFBBTkQ6XG4gICAgICAgICAgICBkb3VibGVkTGltaXQgPSAyICogbGltaXQ7XG5cbiAgICAgICAgICAgIGFyciA9IGZsdXNoKCk7XG5cbiAgICAgICAgICAgIGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICBwdXNoSW5kZXggPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgcG9wSW5kZXggPSAwO1xuXG4gICAgICAgICAgICBhcnIubGVuZ3RoID0gZG91YmxlZExpbWl0O1xuICAgICAgICAgICAgbGltaXQgPSBkb3VibGVkTGltaXQ7XG5cbiAgICAgICAgICAgIHB1c2goaXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBEUk9QXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRha2U6IHRha2UsIGZsdXNoOiBmbHVzaFxuICB9O1xufVxuXG52YXIgYnVmZmVycyA9IGV4cG9ydHMuYnVmZmVycyA9IHtcbiAgbm9uZTogZnVuY3Rpb24gbm9uZSgpIHtcbiAgICByZXR1cm4gemVyb0J1ZmZlcjtcbiAgfSxcbiAgZml4ZWQ6IGZ1bmN0aW9uIGZpeGVkKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX1RIUk9XKTtcbiAgfSxcbiAgZHJvcHBpbmc6IGZ1bmN0aW9uIGRyb3BwaW5nKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX0RST1ApO1xuICB9LFxuICBzbGlkaW5nOiBmdW5jdGlvbiBzbGlkaW5nKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX1NMSURFKTtcbiAgfSxcbiAgZXhwYW5kaW5nOiBmdW5jdGlvbiBleHBhbmRpbmcoaW5pdGlhbFNpemUpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihpbml0aWFsU2l6ZSwgT05fT1ZFUkZMT1dfRVhQQU5EKTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlVOREVGSU5FRF9JTlBVVF9FUlJPUiA9IGV4cG9ydHMuSU5WQUxJRF9CVUZGRVIgPSBleHBvcnRzLmlzRW5kID0gZXhwb3J0cy5FTkQgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuZW1pdHRlciA9IGVtaXR0ZXI7XG5leHBvcnRzLmNoYW5uZWwgPSBjaGFubmVsO1xuZXhwb3J0cy5ldmVudENoYW5uZWwgPSBldmVudENoYW5uZWw7XG5leHBvcnRzLnN0ZENoYW5uZWwgPSBzdGRDaGFubmVsO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgX2J1ZmZlcnMgPSByZXF1aXJlKCcuL2J1ZmZlcnMnKTtcblxudmFyIF9zY2hlZHVsZXIgPSByZXF1aXJlKCcuL3NjaGVkdWxlcicpO1xuXG52YXIgQ0hBTk5FTF9FTkRfVFlQRSA9ICdAQHJlZHV4LXNhZ2EvQ0hBTk5FTF9FTkQnO1xudmFyIEVORCA9IGV4cG9ydHMuRU5EID0geyB0eXBlOiBDSEFOTkVMX0VORF9UWVBFIH07XG52YXIgaXNFbmQgPSBleHBvcnRzLmlzRW5kID0gZnVuY3Rpb24gaXNFbmQoYSkge1xuICByZXR1cm4gYSAmJiBhLnR5cGUgPT09IENIQU5ORUxfRU5EX1RZUEU7XG59O1xuXG5mdW5jdGlvbiBlbWl0dGVyKCkge1xuICB2YXIgc3Vic2NyaWJlcnMgPSBbXTtcblxuICBmdW5jdGlvbiBzdWJzY3JpYmUoc3ViKSB7XG4gICAgc3Vic2NyaWJlcnMucHVzaChzdWIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKDAsIF91dGlscy5yZW1vdmUpKHN1YnNjcmliZXJzLCBzdWIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0KGl0ZW0pIHtcbiAgICB2YXIgYXJyID0gc3Vic2NyaWJlcnMuc2xpY2UoKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhcnJbaV0oaXRlbSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBlbWl0OiBlbWl0XG4gIH07XG59XG5cbnZhciBJTlZBTElEX0JVRkZFUiA9IGV4cG9ydHMuSU5WQUxJRF9CVUZGRVIgPSAnaW52YWxpZCBidWZmZXIgcGFzc2VkIHRvIGNoYW5uZWwgZmFjdG9yeSBmdW5jdGlvbic7XG52YXIgVU5ERUZJTkVEX0lOUFVUX0VSUk9SID0gZXhwb3J0cy5VTkRFRklORURfSU5QVVRfRVJST1IgPSAnU2FnYSB3YXMgcHJvdmlkZWQgd2l0aCBhbiB1bmRlZmluZWQgYWN0aW9uJztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5VTkRFRklORURfSU5QVVRfRVJST1IgPSBVTkRFRklORURfSU5QVVRfRVJST1IgKz0gJ1xcbkhpbnRzOlxcbiAgICAtIGNoZWNrIHRoYXQgeW91ciBBY3Rpb24gQ3JlYXRvciByZXR1cm5zIGEgbm9uLXVuZGVmaW5lZCB2YWx1ZVxcbiAgICAtIGlmIHRoZSBTYWdhIHdhcyBzdGFydGVkIHVzaW5nIHJ1blNhZ2EsIGNoZWNrIHRoYXQgeW91ciBzdWJzY3JpYmUgc291cmNlIHByb3ZpZGVzIHRoZSBhY3Rpb24gdG8gaXRzIGxpc3RlbmVyc1xcbiAgJztcbn1cblxuZnVuY3Rpb24gY2hhbm5lbCgpIHtcbiAgdmFyIGJ1ZmZlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogX2J1ZmZlcnMuYnVmZmVycy5maXhlZCgpO1xuXG4gIHZhciBjbG9zZWQgPSBmYWxzZTtcbiAgdmFyIHRha2VycyA9IFtdO1xuXG4gICgwLCBfdXRpbHMuY2hlY2spKGJ1ZmZlciwgX3V0aWxzLmlzLmJ1ZmZlciwgSU5WQUxJRF9CVUZGRVIpO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCkge1xuICAgIGlmIChjbG9zZWQgJiYgdGFrZXJzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgKDAsIF91dGlscy5pbnRlcm5hbEVycikoJ0Nhbm5vdCBoYXZlIGEgY2xvc2VkIGNoYW5uZWwgd2l0aCBwZW5kaW5nIHRha2VycycpO1xuICAgIH1cbiAgICBpZiAodGFrZXJzLmxlbmd0aCAmJiAhYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgdGhyb3cgKDAsIF91dGlscy5pbnRlcm5hbEVycikoJ0Nhbm5vdCBoYXZlIHBlbmRpbmcgdGFrZXJzIHdpdGggbm9uIGVtcHR5IGJ1ZmZlcicpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHB1dChpbnB1dCkge1xuICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7XG4gICAgKDAsIF91dGlscy5jaGVjaykoaW5wdXQsIF91dGlscy5pcy5ub3RVbmRlZiwgVU5ERUZJTkVEX0lOUFVUX0VSUk9SKTtcbiAgICBpZiAoY2xvc2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGFrZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5wdXQoaW5wdXQpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRha2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNiID0gdGFrZXJzW2ldO1xuICAgICAgaWYgKCFjYltfdXRpbHMuTUFUQ0hdIHx8IGNiW191dGlscy5NQVRDSF0oaW5wdXQpKSB7XG4gICAgICAgIHRha2Vycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHJldHVybiBjYihpbnB1dCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdGFrZShjYikge1xuICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7XG4gICAgKDAsIF91dGlscy5jaGVjaykoY2IsIF91dGlscy5pcy5mdW5jLCAnY2hhbm5lbC50YWtlXFwncyBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICAgIGlmIChjbG9zZWQgJiYgYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgY2IoRU5EKTtcbiAgICB9IGVsc2UgaWYgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgICBjYihidWZmZXIudGFrZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFrZXJzLnB1c2goY2IpO1xuICAgICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF91dGlscy5yZW1vdmUpKHRha2VycywgY2IpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaChjYikge1xuICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7IC8vIFRPRE86IGNoZWNrIGlmIHNvbWUgbmV3IHN0YXRlIHNob3VsZCBiZSBmb3JiaWRkZW4gbm93XG4gICAgKDAsIF91dGlscy5jaGVjaykoY2IsIF91dGlscy5pcy5mdW5jLCAnY2hhbm5lbC5mbHVzaFxcJyBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICBpZiAoY2xvc2VkICYmIGJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICAgIGNiKEVORCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNiKGJ1ZmZlci5mbHVzaCgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7XG4gICAgaWYgKCFjbG9zZWQpIHtcbiAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICBpZiAodGFrZXJzLmxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyID0gdGFrZXJzO1xuICAgICAgICB0YWtlcnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGFycltpXShFTkQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgdGFrZTogdGFrZSwgcHV0OiBwdXQsIGZsdXNoOiBmbHVzaCwgY2xvc2U6IGNsb3NlLFxuICAgIGdldCBfX3Rha2Vyc19fKCkge1xuICAgICAgcmV0dXJuIHRha2VycztcbiAgICB9LFxuICAgIGdldCBfX2Nsb3NlZF9fKCkge1xuICAgICAgcmV0dXJuIGNsb3NlZDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV2ZW50Q2hhbm5lbChzdWJzY3JpYmUpIHtcbiAgdmFyIGJ1ZmZlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogX2J1ZmZlcnMuYnVmZmVycy5ub25lKCk7XG4gIHZhciBtYXRjaGVyID0gYXJndW1lbnRzWzJdO1xuXG4gIC8qKlxuICAgIHNob3VsZCBiZSBpZih0eXBlb2YgbWF0Y2hlciAhPT0gdW5kZWZpbmVkKSBpbnN0ZWFkP1xuICAgIHNlZSBQUiAjMjczIGZvciBhIGJhY2tncm91bmQgZGlzY3Vzc2lvblxuICAqKi9cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgKDAsIF91dGlscy5jaGVjaykobWF0Y2hlciwgX3V0aWxzLmlzLmZ1bmMsICdJbnZhbGlkIG1hdGNoIGZ1bmN0aW9uIHBhc3NlZCB0byBldmVudENoYW5uZWwnKTtcbiAgfVxuXG4gIHZhciBjaGFuID0gY2hhbm5lbChidWZmZXIpO1xuICB2YXIgdW5zdWJzY3JpYmUgPSBzdWJzY3JpYmUoZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKGlzRW5kKGlucHV0KSkge1xuICAgICAgY2hhbi5jbG9zZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobWF0Y2hlciAmJiAhbWF0Y2hlcihpbnB1dCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2hhbi5wdXQoaW5wdXQpO1xuICB9KTtcblxuICBpZiAoIV91dGlscy5pcy5mdW5jKHVuc3Vic2NyaWJlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignaW4gZXZlbnRDaGFubmVsOiBzdWJzY3JpYmUgc2hvdWxkIHJldHVybiBhIGZ1bmN0aW9uIHRvIHVuc3Vic2NyaWJlJyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRha2U6IGNoYW4udGFrZSxcbiAgICBmbHVzaDogY2hhbi5mbHVzaCxcbiAgICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICBpZiAoIWNoYW4uX19jbG9zZWRfXykge1xuICAgICAgICBjaGFuLmNsb3NlKCk7XG4gICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzdGRDaGFubmVsKHN1YnNjcmliZSkge1xuICB2YXIgY2hhbiA9IGV2ZW50Q2hhbm5lbChmdW5jdGlvbiAoY2IpIHtcbiAgICByZXR1cm4gc3Vic2NyaWJlKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgaWYgKGlucHV0W191dGlscy5TQUdBX0FDVElPTl0pIHtcbiAgICAgICAgY2IoaW5wdXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAoMCwgX3NjaGVkdWxlci5hc2FwKShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjYihpbnB1dCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBjaGFuLCB7XG4gICAgdGFrZTogZnVuY3Rpb24gdGFrZShjYiwgbWF0Y2hlcikge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICgwLCBfdXRpbHMuY2hlY2spKG1hdGNoZXIsIF91dGlscy5pcy5mdW5jLCAnY2hhbm5lbC50YWtlXFwncyBtYXRjaGVyIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICBjYltfdXRpbHMuTUFUQ0hdID0gbWF0Y2hlcjtcbiAgICAgIH1cbiAgICAgIGNoYW4udGFrZShjYik7XG4gICAgfVxuICB9KTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFzRWZmZWN0ID0gZXhwb3J0cy50YWtlbSA9IHVuZGVmaW5lZDtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG5leHBvcnRzLnRha2UgPSB0YWtlO1xuZXhwb3J0cy5wdXQgPSBwdXQ7XG5leHBvcnRzLnJhY2UgPSByYWNlO1xuZXhwb3J0cy5jYWxsID0gY2FsbDtcbmV4cG9ydHMuYXBwbHkgPSBhcHBseTtcbmV4cG9ydHMuY3BzID0gY3BzO1xuZXhwb3J0cy5mb3JrID0gZm9yaztcbmV4cG9ydHMuc3Bhd24gPSBzcGF3bjtcbmV4cG9ydHMuam9pbiA9IGpvaW47XG5leHBvcnRzLmNhbmNlbCA9IGNhbmNlbDtcbmV4cG9ydHMuc2VsZWN0ID0gc2VsZWN0O1xuZXhwb3J0cy5hY3Rpb25DaGFubmVsID0gYWN0aW9uQ2hhbm5lbDtcbmV4cG9ydHMuY2FuY2VsbGVkID0gY2FuY2VsbGVkO1xuZXhwb3J0cy5mbHVzaCA9IGZsdXNoO1xuZXhwb3J0cy50YWtlRXZlcnkgPSB0YWtlRXZlcnk7XG5leHBvcnRzLnRha2VMYXRlc3QgPSB0YWtlTGF0ZXN0O1xuZXhwb3J0cy50aHJvdHRsZSA9IHRocm90dGxlO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgX3NhZ2FIZWxwZXJzID0gcmVxdWlyZSgnLi9zYWdhSGVscGVycycpO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgSU8gPSAoMCwgX3V0aWxzLnN5bSkoJ0lPJyk7XG52YXIgVEFLRSA9ICdUQUtFJztcbnZhciBQVVQgPSAnUFVUJztcbnZhciBSQUNFID0gJ1JBQ0UnO1xudmFyIENBTEwgPSAnQ0FMTCc7XG52YXIgQ1BTID0gJ0NQUyc7XG52YXIgRk9SSyA9ICdGT1JLJztcbnZhciBKT0lOID0gJ0pPSU4nO1xudmFyIENBTkNFTCA9ICdDQU5DRUwnO1xudmFyIFNFTEVDVCA9ICdTRUxFQ1QnO1xudmFyIEFDVElPTl9DSEFOTkVMID0gJ0FDVElPTl9DSEFOTkVMJztcbnZhciBDQU5DRUxMRUQgPSAnQ0FOQ0VMTEVEJztcbnZhciBGTFVTSCA9ICdGTFVTSCc7XG5cbnZhciBkZXByZWNhdGlvbldhcm5pbmcgPSBmdW5jdGlvbiBkZXByZWNhdGlvbldhcm5pbmcoZGVwcmVjYXRlZCwgcHJlZmVycmVkKSB7XG4gIHJldHVybiBkZXByZWNhdGVkICsgJyBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm9yIG9mICcgKyBwcmVmZXJyZWQgKyAnLCBwbGVhc2UgdXBkYXRlIHlvdXIgY29kZSc7XG59O1xuXG52YXIgZWZmZWN0ID0gZnVuY3Rpb24gZWZmZWN0KHR5cGUsIHBheWxvYWQpIHtcbiAgdmFyIF9yZWY7XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIElPLCB0cnVlKSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIHR5cGUsIHBheWxvYWQpLCBfcmVmO1xufTtcblxuZnVuY3Rpb24gdGFrZSgpIHtcbiAgdmFyIHBhdHRlcm5PckNoYW5uZWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcqJztcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICgwLCBfdXRpbHMuY2hlY2spKGFyZ3VtZW50c1swXSwgX3V0aWxzLmlzLm5vdFVuZGVmLCAndGFrZShwYXR0ZXJuT3JDaGFubmVsKTogcGF0dGVybk9yQ2hhbm5lbCBpcyB1bmRlZmluZWQnKTtcbiAgfVxuICBpZiAoX3V0aWxzLmlzLnBhdHRlcm4ocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gZWZmZWN0KFRBS0UsIHsgcGF0dGVybjogcGF0dGVybk9yQ2hhbm5lbCB9KTtcbiAgfVxuICBpZiAoX3V0aWxzLmlzLmNoYW5uZWwocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gZWZmZWN0KFRBS0UsIHsgY2hhbm5lbDogcGF0dGVybk9yQ2hhbm5lbCB9KTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ3Rha2UocGF0dGVybk9yQ2hhbm5lbCk6IGFyZ3VtZW50ICcgKyBTdHJpbmcocGF0dGVybk9yQ2hhbm5lbCkgKyAnIGlzIG5vdCB2YWxpZCBjaGFubmVsIG9yIGEgdmFsaWQgcGF0dGVybicpO1xufVxuXG50YWtlLm1heWJlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZWZmID0gdGFrZS5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIGVmZltUQUtFXS5tYXliZSA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59O1xuXG52YXIgdGFrZW0gPSBleHBvcnRzLnRha2VtID0gKDAsIF91dGlscy5kZXByZWNhdGUpKHRha2UubWF5YmUsIGRlcHJlY2F0aW9uV2FybmluZygndGFrZW0nLCAndGFrZS5tYXliZScpKTtcblxuZnVuY3Rpb24gcHV0KGNoYW5uZWwsIGFjdGlvbikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAoMCwgX3V0aWxzLmNoZWNrKShjaGFubmVsLCBfdXRpbHMuaXMubm90VW5kZWYsICdwdXQoY2hhbm5lbCwgYWN0aW9uKTogYXJndW1lbnQgY2hhbm5lbCBpcyB1bmRlZmluZWQnKTtcbiAgICAoMCwgX3V0aWxzLmNoZWNrKShjaGFubmVsLCBfdXRpbHMuaXMuY2hhbm5lbCwgJ3B1dChjaGFubmVsLCBhY3Rpb24pOiBhcmd1bWVudCAnICsgY2hhbm5lbCArICcgaXMgbm90IGEgdmFsaWQgY2hhbm5lbCcpO1xuICAgICgwLCBfdXRpbHMuY2hlY2spKGFjdGlvbiwgX3V0aWxzLmlzLm5vdFVuZGVmLCAncHV0KGNoYW5uZWwsIGFjdGlvbik6IGFyZ3VtZW50IGFjdGlvbiBpcyB1bmRlZmluZWQnKTtcbiAgfSBlbHNlIHtcbiAgICAoMCwgX3V0aWxzLmNoZWNrKShjaGFubmVsLCBfdXRpbHMuaXMubm90VW5kZWYsICdwdXQoYWN0aW9uKTogYXJndW1lbnQgYWN0aW9uIGlzIHVuZGVmaW5lZCcpO1xuICAgIGFjdGlvbiA9IGNoYW5uZWw7XG4gICAgY2hhbm5lbCA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIGVmZmVjdChQVVQsIHsgY2hhbm5lbDogY2hhbm5lbCwgYWN0aW9uOiBhY3Rpb24gfSk7XG59XG5cbnB1dC5yZXNvbHZlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZWZmID0gcHV0LmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgZWZmW1BVVF0ucmVzb2x2ZSA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59O1xuXG5wdXQuc3luYyA9ICgwLCBfdXRpbHMuZGVwcmVjYXRlKShwdXQucmVzb2x2ZSwgZGVwcmVjYXRpb25XYXJuaW5nKCdwdXQuc3luYycsICdwdXQucmVzb2x2ZScpKTtcblxuZnVuY3Rpb24gcmFjZShlZmZlY3RzKSB7XG4gIHJldHVybiBlZmZlY3QoUkFDRSwgZWZmZWN0cyk7XG59XG5cbmZ1bmN0aW9uIGdldEZuQ2FsbERlc2MobWV0aCwgZm4sIGFyZ3MpIHtcbiAgKDAsIF91dGlscy5jaGVjaykoZm4sIF91dGlscy5pcy5ub3RVbmRlZiwgbWV0aCArICc6IGFyZ3VtZW50IGZuIGlzIHVuZGVmaW5lZCcpO1xuXG4gIHZhciBjb250ZXh0ID0gbnVsbDtcbiAgaWYgKF91dGlscy5pcy5hcnJheShmbikpIHtcbiAgICB2YXIgX2ZuID0gZm47XG5cbiAgICB2YXIgX2ZuMiA9IF9zbGljZWRUb0FycmF5KF9mbiwgMik7XG5cbiAgICBjb250ZXh0ID0gX2ZuMlswXTtcbiAgICBmbiA9IF9mbjJbMV07XG4gIH0gZWxzZSBpZiAoZm4uZm4pIHtcbiAgICB2YXIgX2ZuMyA9IGZuO1xuICAgIGNvbnRleHQgPSBfZm4zLmNvbnRleHQ7XG4gICAgZm4gPSBfZm4zLmZuO1xuICB9XG4gICgwLCBfdXRpbHMuY2hlY2spKGZuLCBfdXRpbHMuaXMuZnVuYywgbWV0aCArICc6IGFyZ3VtZW50ICcgKyBmbiArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcblxuICByZXR1cm4geyBjb250ZXh0OiBjb250ZXh0LCBmbjogZm4sIGFyZ3M6IGFyZ3MgfTtcbn1cblxuZnVuY3Rpb24gY2FsbChmbikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBlZmZlY3QoQ0FMTCwgZ2V0Rm5DYWxsRGVzYygnY2FsbCcsIGZuLCBhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5KGNvbnRleHQsIGZuKSB7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTtcblxuICByZXR1cm4gZWZmZWN0KENBTEwsIGdldEZuQ2FsbERlc2MoJ2FwcGx5JywgeyBjb250ZXh0OiBjb250ZXh0LCBmbjogZm4gfSwgYXJncykpO1xufVxuXG5mdW5jdGlvbiBjcHMoZm4pIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICByZXR1cm4gZWZmZWN0KENQUywgZ2V0Rm5DYWxsRGVzYygnY3BzJywgZm4sIGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gZm9yayhmbikge1xuICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgYXJnc1tfa2V5MyAtIDFdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIHJldHVybiBlZmZlY3QoRk9SSywgZ2V0Rm5DYWxsRGVzYygnZm9yaycsIGZuLCBhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIHNwYXduKGZuKSB7XG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW40ID4gMSA/IF9sZW40IC0gMSA6IDApLCBfa2V5NCA9IDE7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICBhcmdzW19rZXk0IC0gMV0gPSBhcmd1bWVudHNbX2tleTRdO1xuICB9XG5cbiAgdmFyIGVmZiA9IGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbZm5dLmNvbmNhdChhcmdzKSk7XG4gIGVmZltGT1JLXS5kZXRhY2hlZCA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59XG5cbnZhciBpc0ZvcmtlZFRhc2sgPSBmdW5jdGlvbiBpc0ZvcmtlZFRhc2sodGFzaykge1xuICByZXR1cm4gdGFza1tfdXRpbHMuVEFTS107XG59O1xuXG5mdW5jdGlvbiBqb2luKHRhc2spIHtcbiAgaWYgKF91dGlscy5pcy5hcnJheSh0YXNrKSkge1xuICAgIHJldHVybiB0YXNrLm1hcChqb2luKTtcbiAgfVxuICAoMCwgX3V0aWxzLmNoZWNrKSh0YXNrLCBfdXRpbHMuaXMubm90VW5kZWYsICdqb2luKHRhc2spOiBhcmd1bWVudCB0YXNrIGlzIHVuZGVmaW5lZCcpO1xuICBpZiAoIWlzRm9ya2VkVGFzayh0YXNrKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignam9pbih0YXNrKTogYXJndW1lbnQgJyArIHRhc2sgKyAnIGlzIG5vdCBhIHZhbGlkIFRhc2sgb2JqZWN0IFxcbihISU5UOiBpZiB5b3UgYXJlIGdldHRpbmcgdGhpcyBlcnJvcnMgaW4gdGVzdHMsIGNvbnNpZGVyIHVzaW5nIGNyZWF0ZU1vY2tUYXNrIGZyb20gcmVkdXgtc2FnYS91dGlscyknKTtcbiAgfVxuXG4gIHJldHVybiBlZmZlY3QoSk9JTiwgdGFzayk7XG59XG5cbmZ1bmN0aW9uIGNhbmNlbCh0YXNrKSB7XG4gICgwLCBfdXRpbHMuY2hlY2spKHRhc2ssIF91dGlscy5pcy5ub3RVbmRlZiwgJ2NhbmNlbCh0YXNrKTogYXJndW1lbnQgdGFzayBpcyB1bmRlZmluZWQnKTtcbiAgaWYgKCFpc0ZvcmtlZFRhc2sodGFzaykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbmNlbCh0YXNrKTogYXJndW1lbnQgJyArIHRhc2sgKyAnIGlzIG5vdCBhIHZhbGlkIFRhc2sgb2JqZWN0IFxcbihISU5UOiBpZiB5b3UgYXJlIGdldHRpbmcgdGhpcyBlcnJvcnMgaW4gdGVzdHMsIGNvbnNpZGVyIHVzaW5nIGNyZWF0ZU1vY2tUYXNrIGZyb20gcmVkdXgtc2FnYS91dGlscyknKTtcbiAgfVxuXG4gIHJldHVybiBlZmZlY3QoQ0FOQ0VMLCB0YXNrKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0KHNlbGVjdG9yKSB7XG4gIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW41ID4gMSA/IF9sZW41IC0gMSA6IDApLCBfa2V5NSA9IDE7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICBhcmdzW19rZXk1IC0gMV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICB9XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBzZWxlY3RvciA9IF91dGlscy5pZGVudDtcbiAgfSBlbHNlIHtcbiAgICAoMCwgX3V0aWxzLmNoZWNrKShzZWxlY3RvciwgX3V0aWxzLmlzLm5vdFVuZGVmLCAnc2VsZWN0KHNlbGVjdG9yLFsuLi5dKTogYXJndW1lbnQgc2VsZWN0b3IgaXMgdW5kZWZpbmVkJyk7XG4gICAgKDAsIF91dGlscy5jaGVjaykoc2VsZWN0b3IsIF91dGlscy5pcy5mdW5jLCAnc2VsZWN0KHNlbGVjdG9yLFsuLi5dKTogYXJndW1lbnQgJyArIHNlbGVjdG9yICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9XG4gIHJldHVybiBlZmZlY3QoU0VMRUNULCB7IHNlbGVjdG9yOiBzZWxlY3RvciwgYXJnczogYXJncyB9KTtcbn1cblxuLyoqXG4gIGNoYW5uZWwocGF0dGVybiwgW2J1ZmZlcl0pICAgID0+IGNyZWF0ZXMgYW4gZXZlbnQgY2hhbm5lbCBmb3Igc3RvcmUgYWN0aW9uc1xuKiovXG5mdW5jdGlvbiBhY3Rpb25DaGFubmVsKHBhdHRlcm4sIGJ1ZmZlcikge1xuICAoMCwgX3V0aWxzLmNoZWNrKShwYXR0ZXJuLCBfdXRpbHMuaXMubm90VW5kZWYsICdhY3Rpb25DaGFubmVsKHBhdHRlcm4sLi4uKTogYXJndW1lbnQgcGF0dGVybiBpcyB1bmRlZmluZWQnKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgKDAsIF91dGlscy5jaGVjaykoYnVmZmVyLCBfdXRpbHMuaXMubm90VW5kZWYsICdhY3Rpb25DaGFubmVsKHBhdHRlcm4sIGJ1ZmZlcik6IGFyZ3VtZW50IGJ1ZmZlciBpcyB1bmRlZmluZWQnKTtcbiAgICAoMCwgX3V0aWxzLmNoZWNrKShidWZmZXIsIF91dGlscy5pcy5idWZmZXIsICdhY3Rpb25DaGFubmVsKHBhdHRlcm4sIGJ1ZmZlcik6IGFyZ3VtZW50ICcgKyBidWZmZXIgKyAnIGlzIG5vdCBhIHZhbGlkIGJ1ZmZlcicpO1xuICB9XG4gIHJldHVybiBlZmZlY3QoQUNUSU9OX0NIQU5ORUwsIHsgcGF0dGVybjogcGF0dGVybiwgYnVmZmVyOiBidWZmZXIgfSk7XG59XG5cbmZ1bmN0aW9uIGNhbmNlbGxlZCgpIHtcbiAgcmV0dXJuIGVmZmVjdChDQU5DRUxMRUQsIHt9KTtcbn1cblxuZnVuY3Rpb24gZmx1c2goY2hhbm5lbCkge1xuICAoMCwgX3V0aWxzLmNoZWNrKShjaGFubmVsLCBfdXRpbHMuaXMuY2hhbm5lbCwgJ2ZsdXNoKGNoYW5uZWwpOiBhcmd1bWVudCAnICsgY2hhbm5lbCArICcgaXMgbm90IHZhbGlkIGNoYW5uZWwnKTtcbiAgcmV0dXJuIGVmZmVjdChGTFVTSCwgY2hhbm5lbCk7XG59XG5cbmZ1bmN0aW9uIHRha2VFdmVyeShwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjYgPiAyID8gX2xlbjYgLSAyIDogMCksIF9rZXk2ID0gMjsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgIGFyZ3NbX2tleTYgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gIH1cblxuICByZXR1cm4gZm9yay5hcHBseSh1bmRlZmluZWQsIFtfc2FnYUhlbHBlcnMudGFrZUV2ZXJ5SGVscGVyLCBwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXJdLmNvbmNhdChhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIHRha2VMYXRlc3QocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW43ID4gMiA/IF9sZW43IC0gMiA6IDApLCBfa2V5NyA9IDI7IF9rZXk3IDwgX2xlbjc7IF9rZXk3KyspIHtcbiAgICBhcmdzW19rZXk3IC0gMl0gPSBhcmd1bWVudHNbX2tleTddO1xuICB9XG5cbiAgcmV0dXJuIGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbX3NhZ2FIZWxwZXJzLnRha2VMYXRlc3RIZWxwZXIsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gdGhyb3R0bGUobXMsIHBhdHRlcm4sIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuOCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuOCA+IDMgPyBfbGVuOCAtIDMgOiAwKSwgX2tleTggPSAzOyBfa2V5OCA8IF9sZW44OyBfa2V5OCsrKSB7XG4gICAgYXJnc1tfa2V5OCAtIDNdID0gYXJndW1lbnRzW19rZXk4XTtcbiAgfVxuXG4gIHJldHVybiBmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW19zYWdhSGVscGVycy50aHJvdHRsZUhlbHBlciwgbXMsIHBhdHRlcm4sIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cblxudmFyIGNyZWF0ZUFzRWZmZWN0VHlwZSA9IGZ1bmN0aW9uIGNyZWF0ZUFzRWZmZWN0VHlwZSh0eXBlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZWZmZWN0KSB7XG4gICAgcmV0dXJuIGVmZmVjdCAmJiBlZmZlY3RbSU9dICYmIGVmZmVjdFt0eXBlXTtcbiAgfTtcbn07XG5cbnZhciBhc0VmZmVjdCA9IGV4cG9ydHMuYXNFZmZlY3QgPSB7XG4gIHRha2U6IGNyZWF0ZUFzRWZmZWN0VHlwZShUQUtFKSxcbiAgcHV0OiBjcmVhdGVBc0VmZmVjdFR5cGUoUFVUKSxcbiAgcmFjZTogY3JlYXRlQXNFZmZlY3RUeXBlKFJBQ0UpLFxuICBjYWxsOiBjcmVhdGVBc0VmZmVjdFR5cGUoQ0FMTCksXG4gIGNwczogY3JlYXRlQXNFZmZlY3RUeXBlKENQUyksXG4gIGZvcms6IGNyZWF0ZUFzRWZmZWN0VHlwZShGT1JLKSxcbiAgam9pbjogY3JlYXRlQXNFZmZlY3RUeXBlKEpPSU4pLFxuICBjYW5jZWw6IGNyZWF0ZUFzRWZmZWN0VHlwZShDQU5DRUwpLFxuICBzZWxlY3Q6IGNyZWF0ZUFzRWZmZWN0VHlwZShTRUxFQ1QpLFxuICBhY3Rpb25DaGFubmVsOiBjcmVhdGVBc0VmZmVjdFR5cGUoQUNUSU9OX0NIQU5ORUwpLFxuICBjYW5jZWxsZWQ6IGNyZWF0ZUFzRWZmZWN0VHlwZShDQU5DRUxMRUQpLFxuICBmbHVzaDogY3JlYXRlQXNFZmZlY3RUeXBlKEZMVVNIKVxufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRocm90dGxlID0gZXhwb3J0cy50YWtlTGF0ZXN0ID0gZXhwb3J0cy50YWtlRXZlcnkgPSB1bmRlZmluZWQ7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxuZXhwb3J0cy50YWtlRXZlcnlIZWxwZXIgPSB0YWtlRXZlcnlIZWxwZXI7XG5leHBvcnRzLnRha2VMYXRlc3RIZWxwZXIgPSB0YWtlTGF0ZXN0SGVscGVyO1xuZXhwb3J0cy50aHJvdHRsZUhlbHBlciA9IHRocm90dGxlSGVscGVyO1xuXG52YXIgX2NoYW5uZWwgPSByZXF1aXJlKCcuL2NoYW5uZWwnKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIF9pbyA9IHJlcXVpcmUoJy4vaW8nKTtcblxudmFyIF9idWZmZXJzID0gcmVxdWlyZSgnLi9idWZmZXJzJyk7XG5cbnZhciBkb25lID0geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH07XG52YXIgcUVuZCA9IHt9O1xuXG5mdW5jdGlvbiBmc21JdGVyYXRvcihmc20sIHEwKSB7XG4gIHZhciBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnaXRlcmF0b3InO1xuXG4gIHZhciB1cGRhdGVTdGF0ZSA9IHZvaWQgMCxcbiAgICAgIHFOZXh0ID0gcTA7XG5cbiAgZnVuY3Rpb24gbmV4dChhcmcsIGVycm9yKSB7XG4gICAgaWYgKHFOZXh0ID09PSBxRW5kKSB7XG4gICAgICByZXR1cm4gZG9uZTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHFOZXh0ID0gcUVuZDtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGVTdGF0ZSAmJiB1cGRhdGVTdGF0ZShhcmcpO1xuXG4gICAgICB2YXIgX2ZzbSRxTmV4dCA9IGZzbVtxTmV4dF0oKSxcbiAgICAgICAgICBfZnNtJHFOZXh0MiA9IF9zbGljZWRUb0FycmF5KF9mc20kcU5leHQsIDMpLFxuICAgICAgICAgIHEgPSBfZnNtJHFOZXh0MlswXSxcbiAgICAgICAgICBvdXRwdXQgPSBfZnNtJHFOZXh0MlsxXSxcbiAgICAgICAgICBfdXBkYXRlU3RhdGUgPSBfZnNtJHFOZXh0MlsyXTtcblxuICAgICAgcU5leHQgPSBxO1xuICAgICAgdXBkYXRlU3RhdGUgPSBfdXBkYXRlU3RhdGU7XG4gICAgICByZXR1cm4gcU5leHQgPT09IHFFbmQgPyBkb25lIDogb3V0cHV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoMCwgX3V0aWxzLm1ha2VJdGVyYXRvcikobmV4dCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgcmV0dXJuIG5leHQobnVsbCwgZXJyb3IpO1xuICB9LCBuYW1lLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gc2FmZU5hbWUocGF0dGVybk9yQ2hhbm5lbCkge1xuICBpZiAoX3V0aWxzLmlzLmNoYW5uZWwocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gJ2NoYW5uZWwnO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gU3RyaW5nKHBhdHRlcm5PckNoYW5uZWwubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhlbnRyeSk7XG4gICAgfSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBTdHJpbmcocGF0dGVybk9yQ2hhbm5lbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGFrZUV2ZXJ5SGVscGVyKHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciB5VGFrZSA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiAoMCwgX2lvLnRha2UpKHBhdHRlcm5PckNoYW5uZWwpIH07XG4gIHZhciB5Rm9yayA9IGZ1bmN0aW9uIHlGb3JrKGFjKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBfaW8uZm9yay5hcHBseSh1bmRlZmluZWQsIFt3b3JrZXJdLmNvbmNhdChhcmdzLCBbYWNdKSkgfTtcbiAgfTtcblxuICB2YXIgYWN0aW9uID0gdm9pZCAwLFxuICAgICAgc2V0QWN0aW9uID0gZnVuY3Rpb24gc2V0QWN0aW9uKGFjKSB7XG4gICAgcmV0dXJuIGFjdGlvbiA9IGFjO1xuICB9O1xuXG4gIHJldHVybiBmc21JdGVyYXRvcih7XG4gICAgcTE6IGZ1bmN0aW9uIHExKCkge1xuICAgICAgcmV0dXJuIFsncTInLCB5VGFrZSwgc2V0QWN0aW9uXTtcbiAgICB9LFxuICAgIHEyOiBmdW5jdGlvbiBxMigpIHtcbiAgICAgIHJldHVybiBhY3Rpb24gPT09IF9jaGFubmVsLkVORCA/IFtxRW5kXSA6IFsncTEnLCB5Rm9yayhhY3Rpb24pXTtcbiAgICB9XG4gIH0sICdxMScsICd0YWtlRXZlcnkoJyArIHNhZmVOYW1lKHBhdHRlcm5PckNoYW5uZWwpICsgJywgJyArIHdvcmtlci5uYW1lICsgJyknKTtcbn1cblxuZnVuY3Rpb24gdGFrZUxhdGVzdEhlbHBlcihwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICB2YXIgeVRha2UgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogKDAsIF9pby50YWtlKShwYXR0ZXJuT3JDaGFubmVsKSB9O1xuICB2YXIgeUZvcmsgPSBmdW5jdGlvbiB5Rm9yayhhYykge1xuICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogX2lvLmZvcmsuYXBwbHkodW5kZWZpbmVkLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpIH07XG4gIH07XG4gIHZhciB5Q2FuY2VsID0gZnVuY3Rpb24geUNhbmNlbCh0YXNrKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiAoMCwgX2lvLmNhbmNlbCkodGFzaykgfTtcbiAgfTtcblxuICB2YXIgdGFzayA9IHZvaWQgMCxcbiAgICAgIGFjdGlvbiA9IHZvaWQgMDtcbiAgdmFyIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRUYXNrKHQpIHtcbiAgICByZXR1cm4gdGFzayA9IHQ7XG4gIH07XG4gIHZhciBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG5cbiAgcmV0dXJuIGZzbUl0ZXJhdG9yKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlUYWtlLCBzZXRBY3Rpb25dO1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbiA9PT0gX2NoYW5uZWwuRU5EID8gW3FFbmRdIDogdGFzayA/IFsncTMnLCB5Q2FuY2VsKHRhc2spXSA6IFsncTEnLCB5Rm9yayhhY3Rpb24pLCBzZXRUYXNrXTtcbiAgICB9LFxuICAgIHEzOiBmdW5jdGlvbiBxMygpIHtcbiAgICAgIHJldHVybiBbJ3ExJywgeUZvcmsoYWN0aW9uKSwgc2V0VGFza107XG4gICAgfVxuICB9LCAncTEnLCAndGFrZUxhdGVzdCgnICsgc2FmZU5hbWUocGF0dGVybk9yQ2hhbm5lbCkgKyAnLCAnICsgd29ya2VyLm5hbWUgKyAnKScpO1xufVxuXG5mdW5jdGlvbiB0aHJvdHRsZUhlbHBlcihkZWxheUxlbmd0aCwgcGF0dGVybiwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4zID4gMyA/IF9sZW4zIC0gMyA6IDApLCBfa2V5MyA9IDM7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhcmdzW19rZXkzIC0gM10gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgdmFyIGFjdGlvbiA9IHZvaWQgMCxcbiAgICAgIGNoYW5uZWwgPSB2b2lkIDA7XG5cbiAgdmFyIHlBY3Rpb25DaGFubmVsID0geyBkb25lOiBmYWxzZSwgdmFsdWU6ICgwLCBfaW8uYWN0aW9uQ2hhbm5lbCkocGF0dGVybiwgX2J1ZmZlcnMuYnVmZmVycy5zbGlkaW5nKDEpKSB9O1xuICB2YXIgeVRha2UgPSBmdW5jdGlvbiB5VGFrZSgpIHtcbiAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6ICgwLCBfaW8udGFrZSkoY2hhbm5lbCwgcGF0dGVybikgfTtcbiAgfTtcbiAgdmFyIHlGb3JrID0gZnVuY3Rpb24geUZvcmsoYWMpIHtcbiAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IF9pby5mb3JrLmFwcGx5KHVuZGVmaW5lZCwgW3dvcmtlcl0uY29uY2F0KGFyZ3MsIFthY10pKSB9O1xuICB9O1xuICB2YXIgeURlbGF5ID0geyBkb25lOiBmYWxzZSwgdmFsdWU6ICgwLCBfaW8uY2FsbCkoX3V0aWxzLmRlbGF5LCBkZWxheUxlbmd0aCkgfTtcblxuICB2YXIgc2V0QWN0aW9uID0gZnVuY3Rpb24gc2V0QWN0aW9uKGFjKSB7XG4gICAgcmV0dXJuIGFjdGlvbiA9IGFjO1xuICB9O1xuICB2YXIgc2V0Q2hhbm5lbCA9IGZ1bmN0aW9uIHNldENoYW5uZWwoY2gpIHtcbiAgICByZXR1cm4gY2hhbm5lbCA9IGNoO1xuICB9O1xuXG4gIHJldHVybiBmc21JdGVyYXRvcih7XG4gICAgcTE6IGZ1bmN0aW9uIHExKCkge1xuICAgICAgcmV0dXJuIFsncTInLCB5QWN0aW9uQ2hhbm5lbCwgc2V0Q2hhbm5lbF07XG4gICAgfSxcbiAgICBxMjogZnVuY3Rpb24gcTIoKSB7XG4gICAgICByZXR1cm4gWydxMycsIHlUYWtlKCksIHNldEFjdGlvbl07XG4gICAgfSxcbiAgICBxMzogZnVuY3Rpb24gcTMoKSB7XG4gICAgICByZXR1cm4gYWN0aW9uID09PSBfY2hhbm5lbC5FTkQgPyBbcUVuZF0gOiBbJ3E0JywgeUZvcmsoYWN0aW9uKV07XG4gICAgfSxcbiAgICBxNDogZnVuY3Rpb24gcTQoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlEZWxheV07XG4gICAgfVxuICB9LCAncTEnLCAndGhyb3R0bGUoJyArIHNhZmVOYW1lKHBhdHRlcm4pICsgJywgJyArIHdvcmtlci5uYW1lICsgJyknKTtcbn1cblxudmFyIGRlcHJlY2F0aW9uV2FybmluZyA9IGZ1bmN0aW9uIGRlcHJlY2F0aW9uV2FybmluZyhoZWxwZXJOYW1lKSB7XG4gIHJldHVybiAnaW1wb3J0ICcgKyBoZWxwZXJOYW1lICsgJyBmcm9tIFxcJ3JlZHV4LXNhZ2FcXCcgaGFzIGJlZW4gZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBpbXBvcnQgJyArIGhlbHBlck5hbWUgKyAnIGZyb20gXFwncmVkdXgtc2FnYS9lZmZlY3RzXFwnLlxcblRoZSBsYXR0ZXIgd2lsbCBub3Qgd29yayB3aXRoIHlpZWxkKiwgYXMgaGVscGVyIGVmZmVjdHMgYXJlIHdyYXBwZWQgYXV0b21hdGljYWxseSBmb3IgeW91IGluIGZvcmsgZWZmZWN0LlxcblRoZXJlZm9yZSB5aWVsZCAnICsgaGVscGVyTmFtZSArICcgd2lsbCByZXR1cm4gdGFzayBkZXNjcmlwdG9yIHRvIHlvdXIgc2FnYSBhbmQgZXhlY3V0ZSBuZXh0IGxpbmVzIG9mIGNvZGUuJztcbn07XG52YXIgdGFrZUV2ZXJ5ID0gZXhwb3J0cy50YWtlRXZlcnkgPSAoMCwgX3V0aWxzLmRlcHJlY2F0ZSkodGFrZUV2ZXJ5SGVscGVyLCBkZXByZWNhdGlvbldhcm5pbmcoJ3Rha2VFdmVyeScpKTtcbnZhciB0YWtlTGF0ZXN0ID0gZXhwb3J0cy50YWtlTGF0ZXN0ID0gKDAsIF91dGlscy5kZXByZWNhdGUpKHRha2VMYXRlc3RIZWxwZXIsIGRlcHJlY2F0aW9uV2FybmluZygndGFrZUxhdGVzdCcpKTtcbnZhciB0aHJvdHRsZSA9IGV4cG9ydHMudGhyb3R0bGUgPSAoMCwgX3V0aWxzLmRlcHJlY2F0ZSkodGhyb3R0bGVIZWxwZXIsIGRlcHJlY2F0aW9uV2FybmluZygndGhyb3R0bGUnKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFzYXAgPSBhc2FwO1xuZXhwb3J0cy5zdXNwZW5kID0gc3VzcGVuZDtcbmV4cG9ydHMuZmx1c2ggPSBmbHVzaDtcblxudmFyIHF1ZXVlID0gW107XG4vKipcbiAgVmFyaWFibGUgdG8gaG9sZCBhIGNvdW50aW5nIHNlbWFwaG9yZVxuICAtIEluY3JlbWVudGluZyBhZGRzIGEgbG9jayBhbmQgcHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHN1c3BlbmRlZGAgc3RhdGUgKGlmIGl0J3Mgbm90XG4gICAgYWxyZWFkeSBzdXNwZW5kZWQpXG4gIC0gRGVjcmVtZW50aW5nIHJlbGVhc2VzIGEgbG9jay4gWmVybyBsb2NrcyBwdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgcmVsZWFzZWRgIHN0YXRlLiBUaGlzXG4gICAgdHJpZ2dlcnMgZmx1c2hpbmcgdGhlIHF1ZXVlZCB0YXNrcy5cbioqL1xudmFyIHNlbWFwaG9yZSA9IDA7XG5cbi8qKlxuICBFeGVjdXRlcyBhIHRhc2sgJ2F0b21pY2FsbHknLiBUYXNrcyBzY2hlZHVsZWQgZHVyaW5nIHRoaXMgZXhlY3V0aW9uIHdpbGwgYmUgcXVldWVkXG4gIGFuZCBmbHVzaGVkIGFmdGVyIHRoaXMgdGFzayBoYXMgZmluaXNoZWQgKGFzc3VtaW5nIHRoZSBzY2hlZHVsZXIgZW5kdXAgaW4gYSByZWxlYXNlZFxuICBzdGF0ZSkuXG4qKi9cbmZ1bmN0aW9uIGV4ZWModGFzaykge1xuICB0cnkge1xuICAgIHN1c3BlbmQoKTtcbiAgICB0YXNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZmx1c2goKTtcbiAgfVxufVxuXG4vKipcbiAgRXhlY3V0ZXMgb3IgcXVldWVzIGEgdGFzayBkZXBlbmRpbmcgb24gdGhlIHN0YXRlIG9mIHRoZSBzY2hlZHVsZXIgKGBzdXNwZW5kZWRgIG9yIGByZWxlYXNlZGApXG4qKi9cbmZ1bmN0aW9uIGFzYXAodGFzaykge1xuICBpZiAoIXNlbWFwaG9yZSkge1xuICAgIGV4ZWModGFzayk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWUucHVzaCh0YXNrKTtcbiAgfVxufVxuXG4vKipcbiAgUHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHN1c3BlbmRlZGAgc3RhdGUuIFNjaGVkdWxlZCB0YXNrcyB3aWxsIGJlIHF1ZXVlZCB1bnRpbCB0aGVcbiAgc2NoZWR1bGVyIGlzIHJlbGVhc2VkLlxuKiovXG5mdW5jdGlvbiBzdXNwZW5kKCkge1xuICBzZW1hcGhvcmUrKztcbn1cblxuLyoqXG4gIFJlbGVhc2VzIHRoZSBjdXJyZW50IGxvY2suIEV4ZWN1dGVzIGFsbCBxdWV1ZWQgdGFza3MgaWYgdGhlIHNjaGVkdWxlciBpcyBpbiB0aGUgcmVsZWFzZWQgc3RhdGUuXG4qKi9cbmZ1bmN0aW9uIGZsdXNoKCkge1xuICBzZW1hcGhvcmUtLTtcbiAgaWYgKCFzZW1hcGhvcmUgJiYgcXVldWUubGVuZ3RoKSB7XG4gICAgZXhlYyhxdWV1ZS5zaGlmdCgpKTtcbiAgfVxufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLmNoZWNrID0gY2hlY2s7XG5leHBvcnRzLmhhc093biA9IGhhc093bjtcbmV4cG9ydHMucmVtb3ZlID0gcmVtb3ZlO1xuZXhwb3J0cy5kZWZlcnJlZCA9IGRlZmVycmVkO1xuZXhwb3J0cy5hcnJheU9mRGVmZmVyZWQgPSBhcnJheU9mRGVmZmVyZWQ7XG5leHBvcnRzLmRlbGF5ID0gZGVsYXk7XG5leHBvcnRzLmNyZWF0ZU1vY2tUYXNrID0gY3JlYXRlTW9ja1Rhc2s7XG5leHBvcnRzLmF1dG9JbmMgPSBhdXRvSW5jO1xuZXhwb3J0cy5tYWtlSXRlcmF0b3IgPSBtYWtlSXRlcmF0b3I7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZGVwcmVjYXRlID0gZGVwcmVjYXRlO1xuZXhwb3J0cy53cmFwU2FnYURpc3BhdGNoID0gd3JhcFNhZ2FEaXNwYXRjaDtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIHN5bSA9IGV4cG9ydHMuc3ltID0gZnVuY3Rpb24gc3ltKGlkKSB7XG4gIHJldHVybiAnQEByZWR1eC1zYWdhLycgKyBpZDtcbn07XG52YXIgVEFTSyA9IGV4cG9ydHMuVEFTSyA9IHN5bSgnVEFTSycpO1xudmFyIEhFTFBFUiA9IGV4cG9ydHMuSEVMUEVSID0gc3ltKCdIRUxQRVInKTtcbnZhciBNQVRDSCA9IGV4cG9ydHMuTUFUQ0ggPSBzeW0oJ01BVENIJyk7XG52YXIgQ0FOQ0VMID0gZXhwb3J0cy5DQU5DRUwgPSBzeW0oJ2NhbmNlbFByb21pc2UnKTtcbnZhciBTQUdBX0FDVElPTiA9IGV4cG9ydHMuU0FHQV9BQ1RJT04gPSBzeW0oJ1NBR0FfQUNUSU9OJyk7XG52YXIga29uc3QgPSBleHBvcnRzLmtvbnN0ID0gZnVuY3Rpb24ga29uc3Qodikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2O1xuICB9O1xufTtcbnZhciBrVHJ1ZSA9IGV4cG9ydHMua1RydWUgPSBrb25zdCh0cnVlKTtcbnZhciBrRmFsc2UgPSBleHBvcnRzLmtGYWxzZSA9IGtvbnN0KGZhbHNlKTtcbnZhciBub29wID0gZXhwb3J0cy5ub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xudmFyIGlkZW50ID0gZXhwb3J0cy5pZGVudCA9IGZ1bmN0aW9uIGlkZW50KHYpIHtcbiAgcmV0dXJuIHY7XG59O1xuXG52YXIgaXNEZXYgPSBleHBvcnRzLmlzRGV2ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCc7XG5cbmZ1bmN0aW9uIGNoZWNrKHZhbHVlLCBwcmVkaWNhdGUsIGVycm9yKSB7XG4gIGlmICghcHJlZGljYXRlKHZhbHVlKSkge1xuICAgIGxvZygnZXJyb3InLCAndW5jYXVnaHQgYXQgY2hlY2snLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgfVxufVxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIGlzLm5vdFVuZGVmKG9iamVjdCkgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTtcbn1cblxudmFyIGlzID0gZXhwb3J0cy5pcyA9IHtcbiAgdW5kZWY6IGZ1bmN0aW9uIHVuZGVmKHYpIHtcbiAgICByZXR1cm4gdiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQ7XG4gIH0sXG4gIG5vdFVuZGVmOiBmdW5jdGlvbiBub3RVbmRlZih2KSB7XG4gICAgcmV0dXJuIHYgIT09IG51bGwgJiYgdiAhPT0gdW5kZWZpbmVkO1xuICB9LFxuICBmdW5jOiBmdW5jdGlvbiBmdW5jKGYpIHtcbiAgICByZXR1cm4gdHlwZW9mIGYgPT09ICdmdW5jdGlvbic7XG4gIH0sXG4gIG51bWJlcjogZnVuY3Rpb24gbnVtYmVyKG4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG4gPT09ICdudW1iZXInO1xuICB9LFxuICBhcnJheTogQXJyYXkuaXNBcnJheSxcbiAgcHJvbWlzZTogZnVuY3Rpb24gcHJvbWlzZShwKSB7XG4gICAgcmV0dXJuIHAgJiYgaXMuZnVuYyhwLnRoZW4pO1xuICB9LFxuICBpdGVyYXRvcjogZnVuY3Rpb24gaXRlcmF0b3IoaXQpIHtcbiAgICByZXR1cm4gaXQgJiYgaXMuZnVuYyhpdC5uZXh0KSAmJiBpcy5mdW5jKGl0LnRocm93KTtcbiAgfSxcbiAgdGFzazogZnVuY3Rpb24gdGFzayh0KSB7XG4gICAgcmV0dXJuIHQgJiYgdFtUQVNLXTtcbiAgfSxcbiAgb2JzZXJ2YWJsZTogZnVuY3Rpb24gb2JzZXJ2YWJsZShvYikge1xuICAgIHJldHVybiBvYiAmJiBpcy5mdW5jKG9iLnN1YnNjcmliZSk7XG4gIH0sXG4gIGJ1ZmZlcjogZnVuY3Rpb24gYnVmZmVyKGJ1Zikge1xuICAgIHJldHVybiBidWYgJiYgaXMuZnVuYyhidWYuaXNFbXB0eSkgJiYgaXMuZnVuYyhidWYudGFrZSkgJiYgaXMuZnVuYyhidWYucHV0KTtcbiAgfSxcbiAgcGF0dGVybjogZnVuY3Rpb24gcGF0dGVybihwYXQpIHtcbiAgICByZXR1cm4gcGF0ICYmICh0eXBlb2YgcGF0ID09PSAnc3RyaW5nJyB8fCAodHlwZW9mIHBhdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0KSkgPT09ICdzeW1ib2wnIHx8IGlzLmZ1bmMocGF0KSB8fCBpcy5hcnJheShwYXQpKTtcbiAgfSxcbiAgY2hhbm5lbDogZnVuY3Rpb24gY2hhbm5lbChjaCkge1xuICAgIHJldHVybiBjaCAmJiBpcy5mdW5jKGNoLnRha2UpICYmIGlzLmZ1bmMoY2guY2xvc2UpO1xuICB9LFxuICBoZWxwZXI6IGZ1bmN0aW9uIGhlbHBlcihpdCkge1xuICAgIHJldHVybiBpdCAmJiBpdFtIRUxQRVJdO1xuICB9LFxuICBzdHJpbmdhYmxlRnVuYzogZnVuY3Rpb24gc3RyaW5nYWJsZUZ1bmMoZikge1xuICAgIHJldHVybiBpcy5mdW5jKGYpICYmIGhhc093bihmLCAndG9TdHJpbmcnKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBpdGVtKSB7XG4gIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG4gIGlmIChpbmRleCA+PSAwKSB7XG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZlcnJlZCgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgZGVmID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZGVmLnJlc29sdmUgPSByZXNvbHZlO1xuICAgIGRlZi5yZWplY3QgPSByZWplY3Q7XG4gIH0pO1xuICBkZWYucHJvbWlzZSA9IHByb21pc2U7XG4gIHJldHVybiBkZWY7XG59XG5cbmZ1bmN0aW9uIGFycmF5T2ZEZWZmZXJlZChsZW5ndGgpIHtcbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgYXJyLnB1c2goZGVmZXJyZWQoKSk7XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gZGVsYXkobXMpIHtcbiAgdmFyIHZhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcblxuICB2YXIgdGltZW91dElkID0gdm9pZCAwO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZSh2YWwpO1xuICAgIH0sIG1zKTtcbiAgfSk7XG5cbiAgcHJvbWlzZVtDQU5DRUxdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgfTtcblxuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTW9ja1Rhc2soKSB7XG4gIHZhciBfcmVmO1xuXG4gIHZhciBydW5uaW5nID0gdHJ1ZTtcbiAgdmFyIF9yZXN1bHQgPSB2b2lkIDAsXG4gICAgICBfZXJyb3IgPSB2b2lkIDA7XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFRBU0ssIHRydWUpLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgJ2lzUnVubmluZycsIGZ1bmN0aW9uIGlzUnVubmluZygpIHtcbiAgICByZXR1cm4gcnVubmluZztcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCAncmVzdWx0JywgZnVuY3Rpb24gcmVzdWx0KCkge1xuICAgIHJldHVybiBfcmVzdWx0O1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsICdlcnJvcicsIGZ1bmN0aW9uIGVycm9yKCkge1xuICAgIHJldHVybiBfZXJyb3I7XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgJ3NldFJ1bm5pbmcnLCBmdW5jdGlvbiBzZXRSdW5uaW5nKGIpIHtcbiAgICByZXR1cm4gcnVubmluZyA9IGI7XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgJ3NldFJlc3VsdCcsIGZ1bmN0aW9uIHNldFJlc3VsdChyKSB7XG4gICAgcmV0dXJuIF9yZXN1bHQgPSByO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsICdzZXRFcnJvcicsIGZ1bmN0aW9uIHNldEVycm9yKGUpIHtcbiAgICByZXR1cm4gX2Vycm9yID0gZTtcbiAgfSksIF9yZWY7XG59XG5cbmZ1bmN0aW9uIGF1dG9JbmMoKSB7XG4gIHZhciBzZWVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICsrc2VlZDtcbiAgfTtcbn1cblxudmFyIHVpZCA9IGV4cG9ydHMudWlkID0gYXV0b0luYygpO1xuXG52YXIga1Rocm93ID0gZnVuY3Rpb24ga1Rocm93KGVycikge1xuICB0aHJvdyBlcnI7XG59O1xudmFyIGtSZXR1cm4gPSBmdW5jdGlvbiBrUmV0dXJuKHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogdHJ1ZSB9O1xufTtcbmZ1bmN0aW9uIG1ha2VJdGVyYXRvcihuZXh0KSB7XG4gIHZhciB0aHJvID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBrVGhyb3c7XG4gIHZhciBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnJztcbiAgdmFyIGlzSGVscGVyID0gYXJndW1lbnRzWzNdO1xuXG4gIHZhciBpdGVyYXRvciA9IHsgbmFtZTogbmFtZSwgbmV4dDogbmV4dCwgdGhyb3c6IHRocm8sIHJldHVybjoga1JldHVybiB9O1xuXG4gIGlmIChpc0hlbHBlcikge1xuICAgIGl0ZXJhdG9yW0hFTFBFUl0gPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJykge1xuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gaXRlcmF0b3I7XG59XG5cbi8qKlxuICBQcmludCBlcnJvciBpbiBhIHVzZWZ1bCB3YXkgd2hldGhlciBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAgKHdpdGggZXhwYW5kYWJsZSBlcnJvciBzdGFjayB0cmFjZXMpLCBvciBpbiBhIG5vZGUuanMgZW52aXJvbm1lbnRcbiAgKHRleHQtb25seSBsb2cgb3V0cHV0KVxuICoqL1xuZnVuY3Rpb24gbG9nKGxldmVsLCBtZXNzYWdlKSB7XG4gIHZhciBlcnJvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJyc7XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlKi9cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5sb2coJ3JlZHV4LXNhZ2EgJyArIGxldmVsICsgJzogJyArIG1lc3NhZ2UgKyAnXFxuJyArIChlcnJvciAmJiBlcnJvci5zdGFjayB8fCBlcnJvcikpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGVbbGV2ZWxdKG1lc3NhZ2UsIGVycm9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXByZWNhdGUoZm4sIGRlcHJlY2F0aW9uV2FybmluZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc0RldikgbG9nKCd3YXJuJywgZGVwcmVjYXRpb25XYXJuaW5nKTtcbiAgICByZXR1cm4gZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG52YXIgaW50ZXJuYWxFcnIgPSBleHBvcnRzLmludGVybmFsRXJyID0gZnVuY3Rpb24gaW50ZXJuYWxFcnIoZXJyKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ1xcbiAgcmVkdXgtc2FnYTogRXJyb3IgY2hlY2tpbmcgaG9va3MgZGV0ZWN0ZWQgYW4gaW5jb25zaXN0ZW50IHN0YXRlLiBUaGlzIGlzIGxpa2VseSBhIGJ1Z1xcbiAgaW4gcmVkdXgtc2FnYSBjb2RlIGFuZCBub3QgeW91cnMuIFRoYW5rcyBmb3IgcmVwb3J0aW5nIHRoaXMgaW4gdGhlIHByb2plY3RcXCdzIGdpdGh1YiByZXBvLlxcbiAgRXJyb3I6ICcgKyBlcnIgKyAnXFxuJyk7XG59O1xuXG5mdW5jdGlvbiB3cmFwU2FnYURpc3BhdGNoKGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzYWdhRGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgdmFyIHdyYXBwZWRBY3Rpb24gPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoYWN0aW9uLCBTQUdBX0FDVElPTiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgICByZXR1cm4gZGlzcGF0Y2god3JhcHBlZEFjdGlvbik7XG4gIH07XG59Il19
